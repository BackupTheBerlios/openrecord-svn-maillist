From skinner at sheep.berlios.de  Fri Apr  1 01:00:18 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 1 Apr 2005 01:00:18 +0200
Subject: [openrecord-svn] r13 - trunk/source
Message-ID: <200503312300.j2VN0IKe015330@sheep.berlios.de>

Author: skinner
Date: 2005-04-01 01:00:14 +0200 (Fri, 01 Apr 2005)
New Revision: 13

Added:
   trunk/source/root_view.js
Removed:
   trunk/source/complete_view.js
Modified:
   trunk/source/item_view.js
   trunk/source/outline_layout.js
   trunk/source/page_view.js
   trunk/source/section_view.js
   trunk/source/stevedore.js
   trunk/source/table_layout.js
   trunk/source/test_page.html
   trunk/source/test_page.js
Log:
Renamed CompleteView to be RootView.

Deleted: trunk/source/complete_view.js
===================================================================
--- trunk/source/complete_view.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/complete_view.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -1,433 +0,0 @@
-/*****************************************************************************
- complete_view.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   page_view.js
-//   repository.js
-//   util.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// CompleteView public class constants
-// -------------------------------------------------------------------
-CompleteView.ELEMENT_CLASS_PAGE_EDIT_BUTTON = "page_edit_button";
-
-CompleteView.ELEMENT_ID_EDIT_BUTTON = "edit_button";
-CompleteView.ELEMENT_ID_DEBUG_TEXTAREA = "debug_textarea";
-
-CompleteView.URL_PAGE_PREFIX = "page";
-CompleteView.URL_ITEM_PREFIX = "item";
-CompleteView.URL_HASH_PAGE_PREFIX = "#" + CompleteView.URL_PAGE_PREFIX;
-CompleteView.URL_HASH_ITEM_PREFIX = "#" + CompleteView.URL_ITEM_PREFIX;
-
-
-// -------------------------------------------------------------------
-// CompleteView class properties
-// -------------------------------------------------------------------
-CompleteView.ourSingleInstance = null;
-
-
-/**
- * The OpenRecord app uses a single instance of CompleteView, which serves as the
- * outer-most view in the browser, and contains the current PageView as well
- * as some standard chrome (like the Edit button).
- *
- * @scope    public instance constructor
- * @syntax   var completeView = new CompleteView()
- */
-function CompleteView(inStevedore, inNavbarDivElement, inContentViewDivElement, inDebugDivElement, inMainControlSpanElement, inStatusBlurbSpanElement) {
-  CompleteView.ourSingleInstance = this;
-   
-  Util.assert(inStevedore instanceof Stevedore);
-  Util.assert(inNavbarDivElement instanceof HTMLDivElement);
-  Util.assert(inContentViewDivElement instanceof HTMLDivElement);
-  Util.assert(inDebugDivElement instanceof HTMLDivElement);
-  Util.assert(inMainControlSpanElement instanceof HTMLSpanElement);
-  Util.assert(inStatusBlurbSpanElement instanceof HTMLSpanElement);
-
-  // instance properties
-  this._myStevedore = inStevedore;
-  this.myNavbarDivElement = inNavbarDivElement;
-  this._myContentViewDivElement = inContentViewDivElement;
-  this.myDebugDivElement = inDebugDivElement;
-  this.myMainControlSpanElement = inMainControlSpanElement;
-  this.myStatusBlurbSpanElement = inStatusBlurbSpanElement;
-  
-  this.myEditButtonId = CompleteView.ELEMENT_ID_EDIT_BUTTON;
-  this.myEditMode = false;
-  this.myNumberOfCallsToDebug = 0;
-  this.myDebugTextarea = null;
-  
-  this._myHashTableOfItemViewsKeyedByUuid = {};
-  this._myHashTableOfPageViewsKeyedByUuid = {};
-  this._myCurrentContentView = null;
-  
-  this.myHashTableOfPagesKeyedByUuid = {};
-  var categoryPage = this._myStevedore.getItemFromUuid(Stevedore.UUID_FOR_CATEGORY_PAGE);
-  var listOfPages = this._myStevedore.getListOfItemsInCategory(categoryPage);
-  for (var key in listOfPages) {
-    var page = listOfPages[key];
-    this.myHashTableOfPagesKeyedByUuid[page.getUuid()] = page; 
-  }
-
-  Util.setErrorReportCallback(CompleteView.displayTextInDebugTextarea);
-  this.setCurrentContentViewFromUrl();
-}
-
-
-// -------------------------------------------------------------------
-// Public instance methods
-// -------------------------------------------------------------------
-
-/**
- * Returns the Stevedore instance that this CompleteView is using.
- *
- * @scope    public instance method
- * @return   A Stevedore object. 
- */
-CompleteView.prototype.getStevedore = function () {
-  return this._myStevedore;
-};
-
-
-/**
- * Returns true if we are in Edit Mode.
- *
- * @scope    public instance method
- * @return   A boolean value. True if we are in Edit Mode.
- */
-CompleteView.prototype.isInEditMode = function () {
-  return this.myEditMode;
-};
-
-  
-/**
- * Gets the browser URL from window.location, finds or creates a corresponding
- * PageView or ItemView, and sets the current content view to the newly selected
- * PageView or ItemView.
- *
- * @scope    public instance method
- */
-CompleteView.prototype.setCurrentContentViewFromUrl = function () {
-  var contentViewToSwitchTo = null;
-  
-  if (window.location) {
-    if (window.location.hash) {
-      var originalHash = window.location.hash;
-      var uuidText = null;
-      var uuidNumber = null;
-      var pageFromUuid = null;
-      var itemFromUuid = null;
-      var divElement = null;
-      var isUrlForPage = (originalHash.indexOf(CompleteView.URL_HASH_PAGE_PREFIX) != -1);
-      var isUrlForItem = (originalHash.indexOf(CompleteView.URL_HASH_ITEM_PREFIX) != -1);
-      // alert(originalHash + "\n isUrlForPage: " + isUrlForPage + "\n isUrlForItem: " + isUrlForItem);
-      if (isUrlForItem) {
-        uuidText = originalHash.replace(CompleteView.URL_HASH_ITEM_PREFIX, "");
-        uuidNumber = parseInt(uuidText);
-        contentViewToSwitchTo = this._myHashTableOfItemViewsKeyedByUuid[uuidNumber];
-        if (!contentViewToSwitchTo) {
-          itemFromUuid = this._myStevedore.getItemFromUuid(uuidNumber);
-          if (itemFromUuid) {
-            divElement = window.document.createElement("div"); 
-            this._myContentViewDivElement.appendChild(divElement);
-            contentViewToSwitchTo = new ItemView(itemFromUuid, divElement, this);
-            this._myHashTableOfItemViewsKeyedByUuid[uuidNumber] = contentViewToSwitchTo;
-          }
-        }
-        // this._myCurrentContentView = contentView;
-      } else {
-        if (isUrlForPage) {
-          uuidText = originalHash.replace(CompleteView.URL_HASH_PAGE_PREFIX, "");
-          uuidNumber = parseInt(uuidText);
-          contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[uuidNumber];
-          if (!contentViewToSwitchTo) {
-            pageFromUuid = this.myHashTableOfPagesKeyedByUuid[uuidNumber];
-            if (pageFromUuid) {
-              divElement = window.document.createElement("div"); 
-              this._myContentViewDivElement.appendChild(divElement);
-              contentViewToSwitchTo = new PageView(pageFromUuid, divElement, this);
-              this._myHashTableOfPageViewsKeyedByUuid[uuidNumber] = contentViewToSwitchTo;
-            }
-          }
-        } 
-      }
-    } 
-  }
-  
-  if (!contentViewToSwitchTo) {
-    var page = this._myStevedore.getHomePage();
-    contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[page.getUuid()];
-    if (!contentViewToSwitchTo) {
-      divElement = window.document.createElement("div"); 
-      this._myContentViewDivElement.appendChild(divElement);
-      contentViewToSwitchTo = new PageView(page, divElement, this);
-      this._myHashTableOfPageViewsKeyedByUuid[page.getUuid()] = contentViewToSwitchTo;
-    }
-  }
-  if (this._myCurrentContentView) {
-    this._myCurrentContentView.hide();
-  }
-  this._myCurrentContentView = contentViewToSwitchTo;
-
-  this.display();
-};
-
-  
-/**
- * Re-creates all the HTML for the CompleteView, including the chrome and 
- * the current PageView, and hands the HTML to the browser to be re-drawn.
- *
- * @scope    public instance method
- */
-CompleteView.prototype.display = function () {
-  Util.assert(this._myCurrentContentView instanceof Object);
-
-  document.title = this._myCurrentContentView.getPageTitle() + " - openagenda.org";
-  this.displayControlSpan();
-  this.displayNavbar();
-  this.displayDebugArea();
-  this._myCurrentContentView.display();
-  window.focus();
-};
-
-
-/**
- * Re-creates the HTML for the chrome area containing the controls,
- * and hands the HTML to the browser to be re-drawn.
- *
- * @scope    public instance method
- */
-CompleteView.prototype.displayControlSpan = function () {
-  Util.assert(this.myMainControlSpanElement instanceof HTMLSpanElement);
-
-  var listOfStrings = [];
-  
-  var buttonValue = (this.myEditMode) ? "View" : "Edit";
-  listOfStrings.push("<input type=\"button\" class=\"" + CompleteView.ELEMENT_CLASS_PAGE_EDIT_BUTTON + "\" id=\"" + this.myEditButtonId + "\" name=\"layout\" value=\"" + buttonValue + "\"></input>");
-
-  // write out the new control span content 
-  var finalString = listOfStrings.join("");
-  this.myMainControlSpanElement.innerHTML = finalString;
-
-  // add event handlers for the newly created control span UI elements
-  var editButton = document.getElementById(this.myEditButtonId);
-  editButton.onclick = CompleteView.clickOnEditButton;
- 
-  // attach back-pointers to the newly created control span UI elements
-  editButton.mycompleteview = this;
-};
-
-
-/**
- * Re-creates the HTML for the Navbar, and hands the HTML to the browser 
- * to be re-drawn.
- *
- * @scope    public instance method
- */
-CompleteView.prototype.displayNavbar = function () {
-  Util.assert(this.myNavbarDivElement instanceof HTMLDivElement);
-
-  var listOfStrings = [];
-
-  listOfStrings.push("<ul class=\"menu\">");
-  
-  for (var uuid in this.myHashTableOfPagesKeyedByUuid) {
-    var page = this.myHashTableOfPagesKeyedByUuid[uuid];
-    var menuText = page.getShortName();
-    var menuUrl = CompleteView.URL_HASH_PAGE_PREFIX + page.getUuid();
-    listOfStrings.push("<li class=\"menu_item\"><a href=\"" + menuUrl + "\" onclick=\"CompleteView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
-  }
-
-  listOfStrings.push("</ul>");
-  // listOfStrings.push("<p><a href=\"http://www.opensource.org/\"><img src=\"osi-certified-60x50.png\" width=\"60\" height=\"50\" alt=\"OSI logo\"></img></a></p>");
-  
-  // write out the new control span content 
-  var finalString = listOfStrings.join("");
-  this.myNavbarDivElement.innerHTML = finalString;
-};
-
-
-/**
- * Re-creates the HTML for the Debug area, and hands the HTML to the browser 
- * to be re-drawn.
- *
- * @scope    public instance method
- */
-CompleteView.prototype.displayDebugArea = function () {
-  Util.assert(this.myDebugDivElement instanceof HTMLDivElement);
-
-  var listOfStrings = [];
-  listOfStrings.push("<textarea readonly id=\"" + CompleteView.ELEMENT_ID_DEBUG_TEXTAREA + "\" rows=\"20\" cols=\"100\" wrap=\"virtual\"></textarea>");
-  var finalString = listOfStrings.join("");
-  this.myDebugDivElement.innerHTML = finalString;
-  this.myDebugTextarea = document.getElementById(CompleteView.ELEMENT_ID_DEBUG_TEXTAREA);
-}
-
-
-// -------------------------------------------------------------------
-// Debug error display methods
-// -------------------------------------------------------------------
-
-/**
- * Displays a text string in the status blurb span.
- *
- * @scope    public class method
- * @param    inText    A text string to be displayed. 
- */
-CompleteView.displayStatusBlurb = function (inText) {
-  CompleteView.ourSingleInstance.displayStatusBlurb(inText);
-};
-
-
-/**
- * Displays a text string in the status blurb span.
- *
- * @scope    public instance method
- * @param    inText    A text string to be displayed. 
- */
-CompleteView.prototype.displayStatusBlurb = function (inText) {
-  this.myStatusBlurbSpanElement.innerHTML = inText;
-};
-
-
-/**
- * Displays a text string in the debug textarea.
- *
- * @scope    public class method
- * @param    inText    A text string to be displayed. 
- */
-CompleteView.displayTextInDebugTextarea = function (inText) {
-  CompleteView.ourSingleInstance.displayTextInDebugTextarea(inText);
-};
-
-
-/**
- * Displays a text string in the debug textarea.
- *
- * @scope    public instance method
- * @param    inText    A text string to be displayed. 
- */
-CompleteView.prototype.displayTextInDebugTextarea = function (inText) {
-  this.myNumberOfCallsToDebug++;
-  if (this.myNumberOfCallsToDebug > 20) {
-    return;
-  }
-  this.myDebugTextarea.value += inText + "\n\n============================\n\n";
-  this.myDebugTextarea.style.visibility = "visible";
-  this.myDebugTextarea.style.display = "block";
-  this.myDebugTextarea.scrollIntoView();
-};
-
-
-/**
- * Given a JavaScript object, gets all the values of all the object's properties,
- * and displays them in the debug textarea.
- *
- * @scope    public instance method
- * @param    inObject    Any sort of object. 
- */
-CompleteView.prototype.displayObjectInDebugTextarea = function (inObject) {
-  var outputText = "";
-  for (var property in inObject) {
-    outputText += property + " == " + inObject[property] + "\n";
-  }
-  this.displayTextInDebugTextarea(outputText);
-}
-
-
-// -------------------------------------------------------------------
-// Event handler methods
-// -------------------------------------------------------------------
-
-/**
- * Called when the user clicks on a menu item in the navbar, or on any other 
- * auto-generated link that points to other Blue-sky content.
- * 
- * Called from an HTML "li" element or an HTML "a" element on a generated page.
- * There is no need to call this method directly.
- *
- * @scope    public class method
- * @param    inEventObject    An event object. 
- */
-CompleteView.clickOnLocalLink = function (inEventObject) {
-  var eventObject = inEventObject;
-  if (!eventObject) { eventObject = window.event; }
-  
-  var startTiming = new Date();
-  var htmlAnchorElement = Util.getTargetFromEvent(eventObject);
-  
-  window.location = htmlAnchorElement.href;
-  CompleteView.ourSingleInstance.setCurrentContentViewFromUrl();
-  
-  var stopTiming = new Date();
-  var delayInMilliseconds = stopTiming.getTime() - startTiming.getTime();
-  CompleteView.ourSingleInstance.displayStatusBlurb("Page load: " + delayInMilliseconds + " milliseconds");
-};
-
-  
-/**
- * Called when the user clicks on the big "Edit" button.
- * 
- * Called from an HTML "input type='button'" element on the generated page.  
- * There is no need to call this method directly.
- *
- * @scope    public class method
- * @param    inEventObject    An event object. 
- */
-CompleteView.clickOnEditButton = function (inEventObject) {
-  var eventObject = inEventObject;
-  if (!eventObject) { eventObject = window.event; }
-  var editButton = Util.getTargetFromEvent(eventObject);
-  // PROBLEM: We could replace the lines above with "var editButton = this;"
-  // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
-
-  var completeView = editButton.mycompleteview;
-  var stevedore = completeView.getStevedore();
-  if (completeView.myEditMode) {
-    stevedore.endTransaction();
-  } else {
-    stevedore.beginTransaction();
-  }
-  completeView.myEditMode = !completeView.myEditMode;
-  completeView.display();
-  // completeView.displayTextInDebugTextarea(completeView.myEditMode);
-  if (!completeView.myEditMode && window.location && (window.location.protocol == "file:")) {
-    CompleteView.displayTextInDebugTextarea(stevedore._getJsonStringRepresentingAllItems());
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/item_view.js
===================================================================
--- trunk/source/item_view.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/item_view.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -33,7 +33,7 @@
 // Dependencies:
 //   repository.js
 //   util.js
-//   complete_view.js
+//   root_view.js
 //   detail_layout.js
 // -------------------------------------------------------------------
 
@@ -51,23 +51,23 @@
 
 
 /**
- * The CompleteView uses an instance of a ItemView to display an Item in the
+ * The RootView uses an instance of a ItemView to display an Item in the
  * browser window.
  *
  * @scope    public instance constructor
  * @param    inItem    The item to be displayed by this view. 
  * @param    inDivElement    The HTMLDivElement to display the HTML in. 
- * @param    inCompleteView    The CompleteView that this ItemView is nested in. 
+ * @param    inRootView    The RootView that this ItemView is nested in. 
  */
-function ItemView(inItem, inDivElement, inCompleteView) {
+function ItemView(inItem, inDivElement, inRootView) {
   Util.assert(inItem instanceof Item);
   Util.assert(inDivElement instanceof HTMLDivElement);
-  Util.assert(inCompleteView instanceof CompleteView);
+  Util.assert(inRootView instanceof RootView);
 
   // instance properties
   this.myItem = inItem;
   this.myDivElement = inDivElement;
-  this.myCompleteView = inCompleteView;
+  this.myRootView = inRootView;
   this.myLayout = new DetailLayout(this);
 }
 
@@ -79,7 +79,7 @@
  * @return   The stevedore object.
  */
 ItemView.prototype.getStevedore = function () {
-  return this.myCompleteView.getStevedore();
+  return this.myRootView.getStevedore();
 };
 
 
@@ -103,7 +103,7 @@
  * @return   A boolean value. True if we are in Edit Mode.
  */
 ItemView.prototype.isInEditMode = function () {
-  return this.myCompleteView.isInEditMode();
+  return this.myRootView.isInEditMode();
 };
 
   
@@ -142,7 +142,7 @@
   var listOfStrings = [];
 
   // add an <h1> heading with the name of the page
-  listOfStrings.push("<h1 id=\"" + CompleteView.URL_ITEM_PREFIX + this.myItem.getUuid() + "\">" + this.myItem.getDisplayName() + "</h1>");
+  listOfStrings.push("<h1 id=\"" + RootView.URL_ITEM_PREFIX + this.myItem.getUuid() + "\">" + this.myItem.getDisplayName() + "</h1>");
 
   // add a <div> element for the detail layout
   var detailDivId = ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX + this.myItem.getUuid();

Modified: trunk/source/outline_layout.js
===================================================================
--- trunk/source/outline_layout.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/outline_layout.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -99,7 +99,7 @@
     listOfStrings.push("<li>");
     listOfStrings.push(contentItem.getDisplayName("{no name}"));
     // PROBLEM: Why do I have to provide an onclick handler to get these links to work?
-    listOfStrings.push(" " + "<a class=\"" + SectionView.ELEMENT_CLASS_MORE_LINK + "\" href=\"" + CompleteView.URL_HASH_ITEM_PREFIX + contentItem.getUuid() + "\" onclick=\"CompleteView.clickOnLocalLink(event)\">(more &#8658;)</a>" + "");
+    listOfStrings.push(" " + "<a class=\"" + SectionView.ELEMENT_CLASS_MORE_LINK + "\" href=\"" + RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuid() + "\" onclick=\"RootView.clickOnLocalLink(event)\">(more &#8658;)</a>" + "");
     listOfStrings.push("</li>");
   }
   listOfStrings.push("</ul>");

Modified: trunk/source/page_view.js
===================================================================
--- trunk/source/page_view.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/page_view.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -55,23 +55,23 @@
 
 
 /**
- * The CompleteView uses an instance of a PageView to display a Page in the
+ * The RootView uses an instance of a PageView to display a Page in the
  * browser window.
  *
  * @scope    public instance constructor
  * @param    inPage    The page item to be displayed by this view. 
  * @param    inDivElement    The HTMLDivElement to display the HTML in. 
- * @param    inCompleteView    The CompleteView that this PageView is nested in. 
+ * @param    inRootView    The RootView that this PageView is nested in. 
  */
-function PageView(inPage, inDivElement, inCompleteView) {
+function PageView(inPage, inDivElement, inRootView) {
   Util.assert(inPage instanceof Item);
   Util.assert(inDivElement instanceof HTMLDivElement);
-  Util.assert(inCompleteView instanceof CompleteView);
+  Util.assert(inRootView instanceof RootView);
 
   // instance properties
   this.myPage = inPage;
   this.myDivElement = inDivElement;
-  this.myCompleteView = inCompleteView;
+  this.myRootView = inRootView;
   
   this.myListOfSectionViews = [];
   
@@ -93,7 +93,7 @@
  * @return   A boolean value. True if we are in Edit Mode.
  */
 PageView.prototype.isInEditMode = function () {
-  return this.myCompleteView.isInEditMode();
+  return this.myRootView.isInEditMode();
 };
 
   
@@ -132,7 +132,7 @@
   var hashTableOfSectionViewsKeyedByDivId = {};
   
   // add an <h1> heading with the name of the page
-  listOfStrings.push("<h1 id=\"" + CompleteView.URL_PAGE_PREFIX + this.myPage.getUuid() + "\">" + this.myPage.getDisplayName() + "</h1>");
+  listOfStrings.push("<h1 id=\"" + RootView.URL_PAGE_PREFIX + this.myPage.getUuid() + "\">" + this.myPage.getDisplayName() + "</h1>");
   
   var summaryViewDivId = PageView.ELEMENT_ID_SUMMARY_VIEW_DIV_PREFIX + this.myPage.getUuid();
   listOfStrings.push("<div id=\"" + summaryViewDivId + "\"></div>");

Copied: trunk/source/root_view.js (from rev 11, trunk/source/complete_view.js)
===================================================================
--- trunk/source/complete_view.js	2005-03-31 00:22:54 UTC (rev 11)
+++ trunk/source/root_view.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -0,0 +1,433 @@
+/*****************************************************************************
+ root_view.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   page_view.js
+//   repository.js
+//   util.js
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// RootView public class constants
+// -------------------------------------------------------------------
+RootView.ELEMENT_CLASS_PAGE_EDIT_BUTTON = "page_edit_button";
+
+RootView.ELEMENT_ID_EDIT_BUTTON = "edit_button";
+RootView.ELEMENT_ID_DEBUG_TEXTAREA = "debug_textarea";
+
+RootView.URL_PAGE_PREFIX = "page";
+RootView.URL_ITEM_PREFIX = "item";
+RootView.URL_HASH_PAGE_PREFIX = "#" + RootView.URL_PAGE_PREFIX;
+RootView.URL_HASH_ITEM_PREFIX = "#" + RootView.URL_ITEM_PREFIX;
+
+
+// -------------------------------------------------------------------
+// RootView class properties
+// -------------------------------------------------------------------
+RootView.ourSingleInstance = null;
+
+
+/**
+ * The OpenRecord app uses a single instance of RootView, which serves as the
+ * outer-most view in the browser, and contains the current PageView as well
+ * as some standard chrome (like the Edit button).
+ *
+ * @scope    public instance constructor
+ * @syntax   var rootView = new RootView()
+ */
+function RootView(inStevedore, inNavbarDivElement, inContentViewDivElement, inDebugDivElement, inMainControlSpanElement, inStatusBlurbSpanElement) {
+  RootView.ourSingleInstance = this;
+   
+  Util.assert(inStevedore instanceof Stevedore);
+  Util.assert(inNavbarDivElement instanceof HTMLDivElement);
+  Util.assert(inContentViewDivElement instanceof HTMLDivElement);
+  Util.assert(inDebugDivElement instanceof HTMLDivElement);
+  Util.assert(inMainControlSpanElement instanceof HTMLSpanElement);
+  Util.assert(inStatusBlurbSpanElement instanceof HTMLSpanElement);
+
+  // instance properties
+  this._myStevedore = inStevedore;
+  this.myNavbarDivElement = inNavbarDivElement;
+  this._myContentViewDivElement = inContentViewDivElement;
+  this.myDebugDivElement = inDebugDivElement;
+  this.myMainControlSpanElement = inMainControlSpanElement;
+  this.myStatusBlurbSpanElement = inStatusBlurbSpanElement;
+  
+  this.myEditButtonId = RootView.ELEMENT_ID_EDIT_BUTTON;
+  this.myEditMode = false;
+  this.myNumberOfCallsToDebug = 0;
+  this.myDebugTextarea = null;
+  
+  this._myHashTableOfItemViewsKeyedByUuid = {};
+  this._myHashTableOfPageViewsKeyedByUuid = {};
+  this._myCurrentContentView = null;
+  
+  this.myHashTableOfPagesKeyedByUuid = {};
+  var categoryPage = this._myStevedore.getItemFromUuid(Stevedore.UUID_FOR_CATEGORY_PAGE);
+  var listOfPages = this._myStevedore.getListOfItemsInCategory(categoryPage);
+  for (var key in listOfPages) {
+    var page = listOfPages[key];
+    this.myHashTableOfPagesKeyedByUuid[page.getUuid()] = page; 
+  }
+
+  Util.setErrorReportCallback(RootView.displayTextInDebugTextarea);
+  this.setCurrentContentViewFromUrl();
+}
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the Stevedore instance that this RootView is using.
+ *
+ * @scope    public instance method
+ * @return   A Stevedore object. 
+ */
+RootView.prototype.getStevedore = function () {
+  return this._myStevedore;
+};
+
+
+/**
+ * Returns true if we are in Edit Mode.
+ *
+ * @scope    public instance method
+ * @return   A boolean value. True if we are in Edit Mode.
+ */
+RootView.prototype.isInEditMode = function () {
+  return this.myEditMode;
+};
+
+  
+/**
+ * Gets the browser URL from window.location, finds or creates a corresponding
+ * PageView or ItemView, and sets the current content view to the newly selected
+ * PageView or ItemView.
+ *
+ * @scope    public instance method
+ */
+RootView.prototype.setCurrentContentViewFromUrl = function () {
+  var contentViewToSwitchTo = null;
+  
+  if (window.location) {
+    if (window.location.hash) {
+      var originalHash = window.location.hash;
+      var uuidText = null;
+      var uuidNumber = null;
+      var pageFromUuid = null;
+      var itemFromUuid = null;
+      var divElement = null;
+      var isUrlForPage = (originalHash.indexOf(RootView.URL_HASH_PAGE_PREFIX) != -1);
+      var isUrlForItem = (originalHash.indexOf(RootView.URL_HASH_ITEM_PREFIX) != -1);
+      // alert(originalHash + "\n isUrlForPage: " + isUrlForPage + "\n isUrlForItem: " + isUrlForItem);
+      if (isUrlForItem) {
+        uuidText = originalHash.replace(RootView.URL_HASH_ITEM_PREFIX, "");
+        uuidNumber = parseInt(uuidText);
+        contentViewToSwitchTo = this._myHashTableOfItemViewsKeyedByUuid[uuidNumber];
+        if (!contentViewToSwitchTo) {
+          itemFromUuid = this._myStevedore.getItemFromUuid(uuidNumber);
+          if (itemFromUuid) {
+            divElement = window.document.createElement("div"); 
+            this._myContentViewDivElement.appendChild(divElement);
+            contentViewToSwitchTo = new ItemView(itemFromUuid, divElement, this);
+            this._myHashTableOfItemViewsKeyedByUuid[uuidNumber] = contentViewToSwitchTo;
+          }
+        }
+        // this._myCurrentContentView = contentView;
+      } else {
+        if (isUrlForPage) {
+          uuidText = originalHash.replace(RootView.URL_HASH_PAGE_PREFIX, "");
+          uuidNumber = parseInt(uuidText);
+          contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[uuidNumber];
+          if (!contentViewToSwitchTo) {
+            pageFromUuid = this.myHashTableOfPagesKeyedByUuid[uuidNumber];
+            if (pageFromUuid) {
+              divElement = window.document.createElement("div"); 
+              this._myContentViewDivElement.appendChild(divElement);
+              contentViewToSwitchTo = new PageView(pageFromUuid, divElement, this);
+              this._myHashTableOfPageViewsKeyedByUuid[uuidNumber] = contentViewToSwitchTo;
+            }
+          }
+        } 
+      }
+    } 
+  }
+  
+  if (!contentViewToSwitchTo) {
+    var page = this._myStevedore.getHomePage();
+    contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[page.getUuid()];
+    if (!contentViewToSwitchTo) {
+      divElement = window.document.createElement("div"); 
+      this._myContentViewDivElement.appendChild(divElement);
+      contentViewToSwitchTo = new PageView(page, divElement, this);
+      this._myHashTableOfPageViewsKeyedByUuid[page.getUuid()] = contentViewToSwitchTo;
+    }
+  }
+  if (this._myCurrentContentView) {
+    this._myCurrentContentView.hide();
+  }
+  this._myCurrentContentView = contentViewToSwitchTo;
+
+  this.display();
+};
+
+  
+/**
+ * Re-creates all the HTML for the RootView, including the chrome and 
+ * the current PageView, and hands the HTML to the browser to be re-drawn.
+ *
+ * @scope    public instance method
+ */
+RootView.prototype.display = function () {
+  Util.assert(this._myCurrentContentView instanceof Object);
+
+  document.title = this._myCurrentContentView.getPageTitle() + " - openagenda.org";
+  this.displayControlSpan();
+  this.displayNavbar();
+  this.displayDebugArea();
+  this._myCurrentContentView.display();
+  window.focus();
+};
+
+
+/**
+ * Re-creates the HTML for the chrome area containing the controls,
+ * and hands the HTML to the browser to be re-drawn.
+ *
+ * @scope    public instance method
+ */
+RootView.prototype.displayControlSpan = function () {
+  Util.assert(this.myMainControlSpanElement instanceof HTMLSpanElement);
+
+  var listOfStrings = [];
+  
+  var buttonValue = (this.myEditMode) ? "View" : "Edit";
+  listOfStrings.push("<input type=\"button\" class=\"" + RootView.ELEMENT_CLASS_PAGE_EDIT_BUTTON + "\" id=\"" + this.myEditButtonId + "\" name=\"layout\" value=\"" + buttonValue + "\"></input>");
+
+  // write out the new control span content 
+  var finalString = listOfStrings.join("");
+  this.myMainControlSpanElement.innerHTML = finalString;
+
+  // add event handlers for the newly created control span UI elements
+  var editButton = document.getElementById(this.myEditButtonId);
+  editButton.onclick = RootView.clickOnEditButton;
+ 
+  // attach back-pointers to the newly created control span UI elements
+  editButton.myrootview = this;
+};
+
+
+/**
+ * Re-creates the HTML for the Navbar, and hands the HTML to the browser 
+ * to be re-drawn.
+ *
+ * @scope    public instance method
+ */
+RootView.prototype.displayNavbar = function () {
+  Util.assert(this.myNavbarDivElement instanceof HTMLDivElement);
+
+  var listOfStrings = [];
+
+  listOfStrings.push("<ul class=\"menu\">");
+  
+  for (var uuid in this.myHashTableOfPagesKeyedByUuid) {
+    var page = this.myHashTableOfPagesKeyedByUuid[uuid];
+    var menuText = page.getShortName();
+    var menuUrl = RootView.URL_HASH_PAGE_PREFIX + page.getUuid();
+    listOfStrings.push("<li class=\"menu_item\"><a href=\"" + menuUrl + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
+  }
+
+  listOfStrings.push("</ul>");
+  // listOfStrings.push("<p><a href=\"http://www.opensource.org/\"><img src=\"osi-certified-60x50.png\" width=\"60\" height=\"50\" alt=\"OSI logo\"></img></a></p>");
+  
+  // write out the new control span content 
+  var finalString = listOfStrings.join("");
+  this.myNavbarDivElement.innerHTML = finalString;
+};
+
+
+/**
+ * Re-creates the HTML for the Debug area, and hands the HTML to the browser 
+ * to be re-drawn.
+ *
+ * @scope    public instance method
+ */
+RootView.prototype.displayDebugArea = function () {
+  Util.assert(this.myDebugDivElement instanceof HTMLDivElement);
+
+  var listOfStrings = [];
+  listOfStrings.push("<textarea readonly id=\"" + RootView.ELEMENT_ID_DEBUG_TEXTAREA + "\" rows=\"20\" cols=\"100\" wrap=\"virtual\"></textarea>");
+  var finalString = listOfStrings.join("");
+  this.myDebugDivElement.innerHTML = finalString;
+  this.myDebugTextarea = document.getElementById(RootView.ELEMENT_ID_DEBUG_TEXTAREA);
+}
+
+
+// -------------------------------------------------------------------
+// Debug error display methods
+// -------------------------------------------------------------------
+
+/**
+ * Displays a text string in the status blurb span.
+ *
+ * @scope    public class method
+ * @param    inText    A text string to be displayed. 
+ */
+RootView.displayStatusBlurb = function (inText) {
+  RootView.ourSingleInstance.displayStatusBlurb(inText);
+};
+
+
+/**
+ * Displays a text string in the status blurb span.
+ *
+ * @scope    public instance method
+ * @param    inText    A text string to be displayed. 
+ */
+RootView.prototype.displayStatusBlurb = function (inText) {
+  this.myStatusBlurbSpanElement.innerHTML = inText;
+};
+
+
+/**
+ * Displays a text string in the debug textarea.
+ *
+ * @scope    public class method
+ * @param    inText    A text string to be displayed. 
+ */
+RootView.displayTextInDebugTextarea = function (inText) {
+  RootView.ourSingleInstance.displayTextInDebugTextarea(inText);
+};
+
+
+/**
+ * Displays a text string in the debug textarea.
+ *
+ * @scope    public instance method
+ * @param    inText    A text string to be displayed. 
+ */
+RootView.prototype.displayTextInDebugTextarea = function (inText) {
+  this.myNumberOfCallsToDebug++;
+  if (this.myNumberOfCallsToDebug > 20) {
+    return;
+  }
+  this.myDebugTextarea.value += inText + "\n\n============================\n\n";
+  this.myDebugTextarea.style.visibility = "visible";
+  this.myDebugTextarea.style.display = "block";
+  this.myDebugTextarea.scrollIntoView();
+};
+
+
+/**
+ * Given a JavaScript object, gets all the values of all the object's properties,
+ * and displays them in the debug textarea.
+ *
+ * @scope    public instance method
+ * @param    inObject    Any sort of object. 
+ */
+RootView.prototype.displayObjectInDebugTextarea = function (inObject) {
+  var outputText = "";
+  for (var property in inObject) {
+    outputText += property + " == " + inObject[property] + "\n";
+  }
+  this.displayTextInDebugTextarea(outputText);
+}
+
+
+// -------------------------------------------------------------------
+// Event handler methods
+// -------------------------------------------------------------------
+
+/**
+ * Called when the user clicks on a menu item in the navbar, or on any other 
+ * auto-generated link that points to other Blue-sky content.
+ * 
+ * Called from an HTML "li" element or an HTML "a" element on a generated page.
+ * There is no need to call this method directly.
+ *
+ * @scope    public class method
+ * @param    inEventObject    An event object. 
+ */
+RootView.clickOnLocalLink = function (inEventObject) {
+  var eventObject = inEventObject;
+  if (!eventObject) { eventObject = window.event; }
+  
+  var startTiming = new Date();
+  var htmlAnchorElement = Util.getTargetFromEvent(eventObject);
+  
+  window.location = htmlAnchorElement.href;
+  RootView.ourSingleInstance.setCurrentContentViewFromUrl();
+  
+  var stopTiming = new Date();
+  var delayInMilliseconds = stopTiming.getTime() - startTiming.getTime();
+  RootView.ourSingleInstance.displayStatusBlurb("Page load: " + delayInMilliseconds + " milliseconds");
+};
+
+  
+/**
+ * Called when the user clicks on the big "Edit" button.
+ * 
+ * Called from an HTML "input type='button'" element on the generated page.  
+ * There is no need to call this method directly.
+ *
+ * @scope    public class method
+ * @param    inEventObject    An event object. 
+ */
+RootView.clickOnEditButton = function (inEventObject) {
+  var eventObject = inEventObject;
+  if (!eventObject) { eventObject = window.event; }
+  var editButton = Util.getTargetFromEvent(eventObject);
+  // PROBLEM: We could replace the lines above with "var editButton = this;"
+  // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
+
+  var rootView = editButton.myrootview;
+  var stevedore = rootView.getStevedore();
+  if (rootView.myEditMode) {
+    stevedore.endTransaction();
+  } else {
+    stevedore.beginTransaction();
+  }
+  rootView.myEditMode = !rootView.myEditMode;
+  rootView.display();
+  // rootView.displayTextInDebugTextarea(rootView.myEditMode);
+  if (!rootView.myEditMode && window.location && (window.location.protocol == "file:")) {
+    RootView.displayTextInDebugTextarea(stevedore._getJsonStringRepresentingAllItems());
+  }
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/section_view.js
===================================================================
--- trunk/source/section_view.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/section_view.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -134,7 +134,7 @@
  * @return   A Stevedore object.
  */
 SectionView.prototype.getStevedore = function () {
-  return this.myPageView.myCompleteView.getStevedore();
+  return this.myPageView.myRootView.getStevedore();
 };
 
 
@@ -229,6 +229,7 @@
 
   var summaryDivId = this.myDivElement.id + SectionView.ELEMENT_ID_SUMMARY_DIV_SUFFIX;
   listOfStrings.push("<div id=\"" + summaryDivId + "\"></div>");
+  listOfStrings.push("<p></p>");
   
   // create the layout editing controls, if we're in edit mode
   var selectMenuId = this.myDivElement.id + SectionView.ELEMENT_ID_SELECT_MENU_SUFFIX;

Modified: trunk/source/stevedore.js
===================================================================
--- trunk/source/stevedore.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/stevedore.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -317,7 +317,7 @@
   //   This is just a stub method for now.  Once we start implementing
   //   support for transactions we'll have to put some real code here.
   if (this._myCountOfNestedTransactions === 0) {
-    CompleteView.displayStatusBlurb(this._myListOfDirtyItems.length + " changes made");
+    RootView.displayStatusBlurb(this._myListOfDirtyItems.length + " changes made");
     if (this._myListOfDirtyItems && (this._myListOfDirtyItems.length > 0)) {
       this._saveChangesToServer();
       this._myListOfDirtyItems = [];

Modified: trunk/source/table_layout.js
===================================================================
--- trunk/source/table_layout.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/table_layout.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -203,7 +203,7 @@
         hashTableOfCellDelegatesKeyedByElementId[cellId] = cellDelegate;
       } else {
         // if (columnCount == 0) {
-        //   string = "<a href=\"" + CompleteView.URL_HASH_ITEM_PREFIX + contentItem.getUuid() + "\" onclick=\"CompleteView.clickOnLocalLink(event)\">" + string + "</a>";
+        //   string = "<a href=\"" + RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuid() + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + string + "</a>";
         // }
         listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\">" + string + "</td>");
       }

Modified: trunk/source/test_page.html
===================================================================
--- trunk/source/test_page.html	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/test_page.html	2005-03-31 23:00:14 UTC (rev 13)
@@ -6,7 +6,7 @@
     <title>openagenda.org - Test Page</title>
     <link rel="stylesheet" type="text/css" href="base_style.css" />
     <script type="text/javascript" src="util.js"></script>
-    <script type="text/javascript" src="complete_view.js"></script>
+    <script type="text/javascript" src="root_view.js"></script>
     <script type="text/javascript" src="item_view.js"></script>
     <script type="text/javascript" src="page_view.js"></script>
     <script type="text/javascript" src="section_view.js"></script>

Modified: trunk/source/test_page.js
===================================================================
--- trunk/source/test_page.js	2005-03-31 21:46:47 UTC (rev 12)
+++ trunk/source/test_page.js	2005-03-31 23:00:14 UTC (rev 13)
@@ -32,7 +32,7 @@
 // -------------------------------------------------------------------
 // Dependencies:
 //   repository.js
-//   complete_view.js
+//   root_view.js
 // -------------------------------------------------------------------
 
 
@@ -71,8 +71,7 @@
 
   var stevedore = new Stevedore();
   stevedore._loadItemsFromList(Stevedore._ourRepositoryInJsonFormat);
-  window.completeView = new CompleteView(stevedore, navbarDivElement, contentViewDivElement, debugDivElement, mainControlSpanElement, statusBlurbSpanElement);
-  // window.completeView.displayTextInDebugTextarea(stevedore._getPickleForAllItems());
+  window.rootView = new RootView(stevedore, navbarDivElement, contentViewDivElement, debugDivElement, mainControlSpanElement, statusBlurbSpanElement);
 };
 
 
@@ -87,11 +86,11 @@
 };
 
 window.doOnfocusActions = function() {
-  // window.completeView.displayTextInDebugTextarea("onfocus");
+  // window.rootView.displayTextInDebugTextarea("onfocus");
 };
 
 window.doOnblurActions = function() {
-  // window.completeView.displayTextInDebugTextarea("onblur");
+  // window.rootView.displayTextInDebugTextarea("onblur");
 };
 
 



From skinner at sheep.berlios.de  Fri Apr  1 02:57:42 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 1 Apr 2005 02:57:42 +0200
Subject: [openrecord-svn] r14 - trunk/source
Message-ID: <200504010057.j310vgI9026978@sheep.berlios.de>

Author: skinner
Date: 2005-04-01 02:57:41 +0200 (Fri, 01 Apr 2005)
New Revision: 14

Modified:
   trunk/source/page_view.js
   trunk/source/root_view.js
   trunk/source/test_page.html
   trunk/source/test_page.js
Log:
Started migrating from an style that uses getElementById() to a style that uses createElement().

Modified: trunk/source/page_view.js
===================================================================
--- trunk/source/page_view.js	2005-03-31 23:00:14 UTC (rev 13)
+++ trunk/source/page_view.js	2005-04-01 00:57:41 UTC (rev 14)
@@ -132,7 +132,7 @@
   var hashTableOfSectionViewsKeyedByDivId = {};
   
   // add an <h1> heading with the name of the page
-  listOfStrings.push("<h1 id=\"" + RootView.URL_PAGE_PREFIX + this.myPage.getUuid() + "\">" + this.myPage.getDisplayName() + "</h1>");
+  listOfStrings.push("<h1>" + this.myPage.getDisplayName() + "</h1>");
   
   var summaryViewDivId = PageView.ELEMENT_ID_SUMMARY_VIEW_DIV_PREFIX + this.myPage.getUuid();
   listOfStrings.push("<div id=\"" + summaryViewDivId + "\"></div>");

Modified: trunk/source/root_view.js
===================================================================
--- trunk/source/root_view.js	2005-03-31 23:00:14 UTC (rev 13)
+++ trunk/source/root_view.js	2005-04-01 00:57:41 UTC (rev 14)
@@ -65,24 +65,13 @@
  * @scope    public instance constructor
  * @syntax   var rootView = new RootView()
  */
-function RootView(inStevedore, inNavbarDivElement, inContentViewDivElement, inDebugDivElement, inMainControlSpanElement, inStatusBlurbSpanElement) {
+function RootView(inStevedore) {
   RootView.ourSingleInstance = this;
    
   Util.assert(inStevedore instanceof Stevedore);
-  Util.assert(inNavbarDivElement instanceof HTMLDivElement);
-  Util.assert(inContentViewDivElement instanceof HTMLDivElement);
-  Util.assert(inDebugDivElement instanceof HTMLDivElement);
-  Util.assert(inMainControlSpanElement instanceof HTMLSpanElement);
-  Util.assert(inStatusBlurbSpanElement instanceof HTMLSpanElement);
 
   // instance properties
   this._myStevedore = inStevedore;
-  this.myNavbarDivElement = inNavbarDivElement;
-  this._myContentViewDivElement = inContentViewDivElement;
-  this.myDebugDivElement = inDebugDivElement;
-  this.myMainControlSpanElement = inMainControlSpanElement;
-  this.myStatusBlurbSpanElement = inStatusBlurbSpanElement;
-  
   this.myEditButtonId = RootView.ELEMENT_ID_EDIT_BUTTON;
   this.myEditMode = false;
   this.myNumberOfCallsToDebug = 0;
@@ -100,6 +89,68 @@
     this.myHashTableOfPagesKeyedByUuid[page.getUuid()] = page; 
   }
 
+  window.document.body.innerHTML = "";
+  var rootDivElement = window.document.createElement("div"); 
+  window.document.body.appendChild(rootDivElement);
+ 
+  for (var uuid in this.myHashTableOfPagesKeyedByUuid) {
+    var aPage = this.myHashTableOfPagesKeyedByUuid[uuid];
+    var anchorElement = window.document.createElement("a");
+    anchorElement.setAttribute("name", RootView.URL_PAGE_PREFIX + aPage.getUuid());
+    rootDivElement.appendChild(anchorElement);
+  }
+  
+  var headerElement = window.document.createElement("p"); 
+  headerElement.setAttribute("class", "header");
+  rootDivElement.appendChild(headerElement);
+  
+  var logoSpanElement = window.document.createElement("span");
+  logoSpanElement.setAttribute("class", "logo");
+  logoSpanElement.innerHTML = '<a href="http://openrecord.org"><span class="logostart">open</span><span class="logomiddle">record</span><span class="logoend">.org</span></a>';
+  headerElement.appendChild(logoSpanElement);
+
+  var mainControlSpanElement = window.document.createElement("span");
+  mainControlSpanElement.setAttribute("id", "main_control_span");
+  headerElement.appendChild(mainControlSpanElement);
+  headerElement.appendChild(window.document.createElement("br"));
+  
+  var navbarDivElement = window.document.createElement("div");
+  navbarDivElement.setAttribute("class", "navbar");
+  rootDivElement.appendChild(navbarDivElement);
+
+  var contentAreaDivElement = window.document.createElement("div");
+  contentAreaDivElement.setAttribute("class", "content_area");
+  rootDivElement.appendChild(contentAreaDivElement);
+
+  var contentViewDivElement = window.document.createElement("div");
+  contentAreaDivElement.appendChild(contentViewDivElement);
+
+  var debugDivElement = window.document.createElement("div");
+  debugDivElement.setAttribute("class", "debug");
+  rootDivElement.appendChild(debugDivElement);
+
+  var footerElement = window.document.createElement("p"); 
+  footerElement.setAttribute("class", "footer");
+  rootDivElement.appendChild(footerElement);
+
+  var copyrightSpanElement = window.document.createElement("span");
+  copyrightSpanElement.setAttribute("class", "copyright");
+  copyrightSpanElement.innerHTML = 'You can copy freely from this site &mdash; ' +
+    'copyright rights relinquished under the Creative Commons ' +
+    '<a rel="license external" href="http://creativecommons.org/licenses/publicdomain/">Public Domain Dedication</a>.';
+  footerElement.appendChild(copyrightSpanElement);
+
+  var statusBlurbSpanElement = window.document.createElement("span");
+  statusBlurbSpanElement.setAttribute("class", "fileformat");
+  footerElement.appendChild(statusBlurbSpanElement);
+  footerElement.appendChild(window.document.createElement("br"));
+  
+  this.myMainControlSpanElement = mainControlSpanElement;
+  this.myNavbarDivElement = navbarDivElement;
+  this._myContentViewDivElement = contentViewDivElement;
+  this.myDebugDivElement = debugDivElement;
+  this.myStatusBlurbSpanElement = statusBlurbSpanElement;
+  
   Util.setErrorReportCallback(RootView.displayTextInDebugTextarea);
   this.setCurrentContentViewFromUrl();
 }

Modified: trunk/source/test_page.html
===================================================================
--- trunk/source/test_page.html	2005-03-31 23:00:14 UTC (rev 13)
+++ trunk/source/test_page.html	2005-04-01 00:57:41 UTC (rev 14)
@@ -22,6 +22,9 @@
   </head>
   
   <body>
+    <p>Sorry, the browser you're using doesn't support JavaScript. 
+    This page won't display correctly.</p>
+<!--
     <p class="header">
       <span class="logo">
         <a href="http://openrecord.org"><span class="logostart">open</span><span class="logomiddle">record</span><span class="logoend">.org</span></a>
@@ -46,6 +49,7 @@
       </span>
       <br/>
     </p>
+-->
     
 <!-- Creative Commons metadata for Public Domain License 
 

Modified: trunk/source/test_page.js
===================================================================
--- trunk/source/test_page.js	2005-03-31 23:00:14 UTC (rev 13)
+++ trunk/source/test_page.js	2005-04-01 00:57:41 UTC (rev 14)
@@ -35,17 +35,6 @@
 //   root_view.js
 // -------------------------------------------------------------------
 
-
-// -------------------------------------------------------------------
-// Global constants
-// -------------------------------------------------------------------
-window.GLOBAL_ELEMENT_ID_NAVBAR_DIV = "navbar_div";
-window.GLOBAL_ELEMENT_ID_CONTENT_VIEW_DIV = "content_view_div";
-window.GLOBAL_ELEMENT_ID_DEBUG_DIV = "debug_div";
-window.GLOBAL_ELEMENT_ID_MAIN_CONTROL_SPAN = "main_control_span";
-window.GLOBAL_ELEMENT_ID_STATUS_BLURB_SPAN = "status_blurb_span";
-                  
-
 /**
  * Called when the window first loads. Calls all the functions that do 
  * initialization when the page is loaded.
@@ -55,23 +44,9 @@
 window.doOnloadActions = function() {  
   Util.setTargetsForExternalLinks();
   
-  // Repository.initialize();
-  
-  var navbarDivElement = document.getElementById(window.GLOBAL_ELEMENT_ID_NAVBAR_DIV);
-  var contentViewDivElement = document.getElementById(window.GLOBAL_ELEMENT_ID_CONTENT_VIEW_DIV);
-  var debugDivElement = document.getElementById(window.GLOBAL_ELEMENT_ID_DEBUG_DIV);
-  var mainControlSpanElement = document.getElementById(window.GLOBAL_ELEMENT_ID_MAIN_CONTROL_SPAN);
-  var statusBlurbSpanElement = document.getElementById(window.GLOBAL_ELEMENT_ID_STATUS_BLURB_SPAN);
-
-  Util.assert(navbarDivElement instanceof HTMLDivElement);
-  Util.assert(contentViewDivElement instanceof HTMLDivElement);
-  Util.assert(debugDivElement instanceof HTMLDivElement);
-  Util.assert(mainControlSpanElement instanceof HTMLSpanElement);
-  Util.assert(statusBlurbSpanElement instanceof HTMLSpanElement);
-
   var stevedore = new Stevedore();
   stevedore._loadItemsFromList(Stevedore._ourRepositoryInJsonFormat);
-  window.rootView = new RootView(stevedore, navbarDivElement, contentViewDivElement, debugDivElement, mainControlSpanElement, statusBlurbSpanElement);
+  window.rootView = new RootView(stevedore);
 };
 
 



From skinner at sheep.berlios.de  Fri Apr  1 08:14:03 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 1 Apr 2005 08:14:03 +0200
Subject: [openrecord-svn] r15 - trunk/source
Message-ID: <200504010614.j316E3xf023629@sheep.berlios.de>

Author: skinner
Date: 2005-04-01 08:14:02 +0200 (Fri, 01 Apr 2005)
New Revision: 15

Added:
   trunk/source/view.js
Modified:
   trunk/source/bar_chart_layout.js
   trunk/source/base_style.css
   trunk/source/page_view.js
   trunk/source/root_view.js
   trunk/source/section_view.js
   trunk/source/test_page.html
Log:
Created an abstract superclass called View, and set up PageView to start to use it.

Modified: trunk/source/bar_chart_layout.js
===================================================================
--- trunk/source/bar_chart_layout.js	2005-04-01 00:57:41 UTC (rev 14)
+++ trunk/source/bar_chart_layout.js	2005-04-01 06:14:02 UTC (rev 15)
@@ -186,3 +186,4 @@
 // End of file
 // -------------------------------------------------------------------
 
+

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-04-01 00:57:41 UTC (rev 14)
+++ trunk/source/base_style.css	2005-04-01 06:14:02 UTC (rev 15)
@@ -222,10 +222,6 @@
   float: right;
 }
 
-.page_edit_button {
-  /* float: right; */
-}
-
 .section_layout_menu {
 }
 

Modified: trunk/source/page_view.js
===================================================================
--- trunk/source/page_view.js	2005-04-01 00:57:41 UTC (rev 14)
+++ trunk/source/page_view.js	2005-04-01 06:14:02 UTC (rev 15)
@@ -59,19 +59,22 @@
  * browser window.
  *
  * @scope    public instance constructor
+ * @param    inRootView    The RootView that this PageView is nested in. 
+ * @param    inDivElement    The HTMLDivElement to display the HTML in. 
  * @param    inPage    The page item to be displayed by this view. 
- * @param    inDivElement    The HTMLDivElement to display the HTML in. 
- * @param    inRootView    The RootView that this PageView is nested in. 
  */
-function PageView(inPage, inDivElement, inRootView) {
+PageView.prototype = new View();
+function PageView(inRootView, inDivElement, inPage) {
+  Util.assert(inRootView instanceof RootView);
   Util.assert(inPage instanceof Item);
   Util.assert(inDivElement instanceof HTMLDivElement);
-  Util.assert(inRootView instanceof RootView);
 
   // instance properties
+  this.setSuperview(inRootView);
+  this.setDivElement(inDivElement);
+  // this.myRootView = inRootView;
+  // this.myDivElement = inDivElement;
   this.myPage = inPage;
-  this.myDivElement = inDivElement;
-  this.myRootView = inRootView;
   
   this.myListOfSectionViews = [];
   
@@ -92,9 +95,9 @@
  * @scope    public instance method
  * @return   A boolean value. True if we are in Edit Mode.
  */
-PageView.prototype.isInEditMode = function () {
-  return this.myRootView.isInEditMode();
-};
+// PageView.prototype.isInEditMode = function () {
+//   return this.myRootView.isInEditMode();
+// };
 
   
 /**
@@ -114,8 +117,9 @@
  * @scope    public instance method
  */
 PageView.prototype.hide = function () {
-  Util.assert(this.myDivElement instanceof HTMLDivElement);
-  this.myDivElement.style.display = "none";
+  // Util.assert(this.myDivElement instanceof HTMLDivElement);
+  // this.myDivElement.style.display = "none";
+  this.includeOnScreen(false);
 };
 
 
@@ -126,7 +130,8 @@
  * @scope    public instance method
  */
 PageView.prototype.display = function () {
-  Util.assert(this.myDivElement instanceof HTMLDivElement);
+  // Util.assert(this.myDivElement instanceof HTMLDivElement);
+  Util.assert(this.getDivElement() instanceof HTMLDivElement);
   
   var listOfStrings = [];
   var hashTableOfSectionViewsKeyedByDivId = {};
@@ -147,9 +152,12 @@
 
   // write out all the new content 
   var finalString = listOfStrings.join("");
-  this.myDivElement.className = (this.isInEditMode()) ? PageView.ELEMENT_CLASS_EDIT_MODE : PageView.ELEMENT_CLASS_VIEW_MODE;
-  this.myDivElement.innerHTML = finalString;
-  this.myDivElement.style.display = "block";
+  // var divElement = this.myDivElement;
+  var divElement = this.getDivElement();
+  divElement.className = (this.isInEditMode()) ? PageView.ELEMENT_CLASS_EDIT_MODE : PageView.ELEMENT_CLASS_VIEW_MODE;
+  divElement.innerHTML = finalString;
+  // divElement.style.display = "block";
+  this.includeOnScreen(true);
 
   // set up the summary text view
   var summaryElement = document.getElementById(summaryViewDivId);

Modified: trunk/source/root_view.js
===================================================================
--- trunk/source/root_view.js	2005-04-01 00:57:41 UTC (rev 14)
+++ trunk/source/root_view.js	2005-04-01 06:14:02 UTC (rev 15)
@@ -227,7 +227,7 @@
             if (pageFromUuid) {
               divElement = window.document.createElement("div"); 
               this._myContentViewDivElement.appendChild(divElement);
-              contentViewToSwitchTo = new PageView(pageFromUuid, divElement, this);
+              contentViewToSwitchTo = new PageView(this, divElement, pageFromUuid);
               this._myHashTableOfPageViewsKeyedByUuid[uuidNumber] = contentViewToSwitchTo;
             }
           }
@@ -242,7 +242,7 @@
     if (!contentViewToSwitchTo) {
       divElement = window.document.createElement("div"); 
       this._myContentViewDivElement.appendChild(divElement);
-      contentViewToSwitchTo = new PageView(page, divElement, this);
+      contentViewToSwitchTo = new PageView(this, divElement, page);
       this._myHashTableOfPageViewsKeyedByUuid[page.getUuid()] = contentViewToSwitchTo;
     }
   }

Modified: trunk/source/section_view.js
===================================================================
--- trunk/source/section_view.js	2005-04-01 00:57:41 UTC (rev 14)
+++ trunk/source/section_view.js	2005-04-01 06:14:02 UTC (rev 15)
@@ -134,7 +134,7 @@
  * @return   A Stevedore object.
  */
 SectionView.prototype.getStevedore = function () {
-  return this.myPageView.myRootView.getStevedore();
+  return this.myPageView.getStevedore();
 };
 
 
@@ -190,7 +190,6 @@
 };
 
 
-
 /**
  * Returns a list of content items to be displayed in this SectionView.
  *

Modified: trunk/source/test_page.html
===================================================================
--- trunk/source/test_page.html	2005-04-01 00:57:41 UTC (rev 14)
+++ trunk/source/test_page.html	2005-04-01 06:14:02 UTC (rev 15)
@@ -3,9 +3,10 @@
 <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
 
   <head>
-    <title>openagenda.org - Test Page</title>
+    <title>openrecord.org - Test Page</title>
     <link rel="stylesheet" type="text/css" href="base_style.css" />
     <script type="text/javascript" src="util.js"></script>
+    <script type="text/javascript" src="view.js"></script>
     <script type="text/javascript" src="root_view.js"></script>
     <script type="text/javascript" src="item_view.js"></script>
     <script type="text/javascript" src="page_view.js"></script>

Added: trunk/source/view.js
===================================================================
--- trunk/source/view.js	2005-04-01 00:57:41 UTC (rev 14)
+++ trunk/source/view.js	2005-04-01 06:14:02 UTC (rev 15)
@@ -0,0 +1,143 @@
+/*****************************************************************************
+ view.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   util.js
+// -------------------------------------------------------------------
+
+
+/**
+ * The View class serves as an abstract superclass for other view classes.
+ *
+ * @scope    public instance constructor
+ * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ */
+function View() {
+  // alert("View constructor");
+  this._mySuperview = null;
+  this._myDivElement = null;
+}
+
+
+/**
+ * Tells the View who its parent is in the view hierarchy.
+ *
+ * @scope    public instance method
+ * @param    inSuperview    The superview for this view. 
+ */
+View.prototype.setSuperview = function (inSuperview) {
+  // Util.assert(ViewInterface.isImplementedBy(inSuperview));
+
+  this._mySuperview = inSuperview;
+};
+
+
+/**
+ * Returns the parent view in the view hierarchy.
+ *
+ * @scope    public instance method
+ * @return   A View object. 
+ */
+View.prototype.getSuperview = function () {
+  return this._mySuperview;
+};
+
+
+/**
+ * Tells the View what HTMLDivElement to display itself in.
+ *
+ * @scope    public instance method
+ * @param    inDivElement    The HTMLDivElement to display the view in. 
+ */
+View.prototype.setDivElement = function (inDivElement) {
+  Util.assert(inDivElement instanceof HTMLDivElement);
+
+  this._myDivElement = inDivElement;
+  // this.display();
+};
+
+
+/**
+ * Returns the HTMLDivElement that the view displays itself in.
+ *
+ * @scope    public instance method
+ * @return   An HTMLDivElement. 
+ */
+View.prototype.getDivElement = function () {
+  return this._myDivElement;
+};
+
+
+/**
+ * Returns the Stevedore instance that this view is using.
+ *
+ * @scope    public instance method
+ * @return   A Stevedore object. 
+ */
+View.prototype.getStevedore = function () {
+  return this._mySuperview.getStevedore();
+};
+
+
+/**
+ * Returns true if we are in Edit Mode.
+ *
+ * @scope    public instance method
+ * @return   A boolean value. True if we are in Edit Mode.
+ */
+View.prototype.isInEditMode = function () {
+  return this._mySuperview.isInEditMode();
+};
+
+
+/**
+ * A toggle switch to set whether this view is drawn on-screen or hidden
+ * off-screen.
+ *
+ * @scope    public instance method
+ * @param    inBoolean    True if the view should be visible on screen. False if the view should be hidden off screen.
+ */
+View.prototype.includeOnScreen = function (inBoolean) {
+  Util.assert(Util.isBoolean(inBoolean));
+
+  if (inBoolean) {
+    this._myDivElement.style.display = "block";
+  } else {
+    this._myDivElement.style.display = "none";
+  }
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------
+



From skinner at sheep.berlios.de  Tue Apr  5 07:02:10 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 5 Apr 2005 07:02:10 +0200
Subject: [openrecord-svn] r20 - trunk/source
Message-ID: <200504050502.j3552AkM017208@sheep.berlios.de>

Author: skinner
Date: 2005-04-05 07:02:08 +0200 (Tue, 05 Apr 2005)
New Revision: 20

Modified:
   trunk/source/bar_chart_layout.js
   trunk/source/base_style.css
   trunk/source/detail_layout.js
   trunk/source/item.js
   trunk/source/item_view.js
   trunk/source/outline_layout.js
   trunk/source/rectangle.js
   trunk/source/root_view.js
   trunk/source/section_view.js
   trunk/source/stevedore.js
   trunk/source/table_layout.js
   trunk/source/test_page.js
   trunk/source/text_view.js
   trunk/source/util.js
   trunk/source/view.js
Log:
Updated more view classes to inherit from View.  Worked on event handling code.

Modified: trunk/source/bar_chart_layout.js
===================================================================
--- trunk/source/bar_chart_layout.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/bar_chart_layout.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -48,13 +48,15 @@
  * A BarChartLayout displays a set of content items for a SectionView. 
  *
  * @scope    public instance constructor
+ * @extends  View
  * @param    inSectionView    The SectionView that serves as the superview for this view. 
+ * @param    inDivElement    The HTMLDivElement to display this view in. 
  * @syntax   var barChart = new BarChartLayout()
  */
-function BarChartLayout(inSectionView) {
-  Util.assert(inSectionView instanceof SectionView);
-  this.mySectionView = inSectionView;
-  this._myDivElement = null;
+BarChartLayout.prototype = new View();  // makes BarChartLayout be a subclass of View
+function BarChartLayout(inSectionView, inDivElement) {
+  this.setSuperview(inSectionView);
+  this.setDivElement(inDivElement);
 }
 
 
@@ -70,25 +72,12 @@
 
 
 /**
- * Tells the BarChartLayout what HTMLDivElement to display the bar chart in.
- *
- * @scope    public instance method
- * @param    inDivElement    The HTMLDivElement to display the bar chart in. 
- */
-BarChartLayout.prototype.setDivElement = function (inDivElement) {
-  Util.assert(inDivElement instanceof HTMLDivElement);
-  this._myDivElement = inDivElement;
-  this.display();
-};
-
-
-/**
  * Re-creates all the HTML for the BarChartLayout, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-BarChartLayout.prototype.display = function () {
+BarChartLayout.prototype.refresh = function () {
   var listOfStrings = [];
 
   var contentItem = null;
@@ -96,7 +85,8 @@
   var hashTableOfNumericValueIncidenceKeyedByAttributeUuid = {};
   
   // for each attribute, count the number of items where that attribute has a numeric value
-  var listOfContentItems = this.mySectionView.getListOfContentItems();
+  // PENDING: how do we know our superview responds to getListOfContentItems()? 
+  var listOfContentItems = this.getSuperview().getListOfContentItems();
   for (var iKey in listOfContentItems) {
     contentItem = listOfContentItems[iKey];
     var listOfAttributesForItem = contentItem.getListOfAttributeUuids();
@@ -123,7 +113,7 @@
   for (attributeUuid in hashTableOfNumericValueIncidenceKeyedByAttributeUuid) {
     var incidence = hashTableOfNumericValueIncidenceKeyedByAttributeUuid[attributeUuid];
     if (incidence > maxIncidence) {
-      selectedAttribute = this.mySectionView.getStevedore().getItemFromUuid(attributeUuid);
+      selectedAttribute = this.getStevedore().getItemFromUuid(attributeUuid);
       maxIncidence = incidence;
     }
   }
@@ -144,7 +134,7 @@
   // add the table header row(s)
   listOfStrings.push("<table class=\"" + SectionView.ELEMENT_CLASS_SIMPLE_TABLE + "\">");
   listOfStrings.push("<tr>");
-  var attributeCalledName = this.mySectionView.getStevedore().getItemFromUuid(Stevedore.UUID_FOR_ATTRIBUTE_NAME);
+  var attributeCalledName = this.getStevedore().getItemFromUuid(Stevedore.UUID_FOR_ATTRIBUTE_NAME);
   listOfStrings.push("<th>" + attributeCalledName.getDisplayName() + "</th>");
   if (selectedAttribute) {
     listOfStrings.push("<th>" + selectedAttribute.getDisplayName() + "</th>");
@@ -178,12 +168,21 @@
     
   // return all the new content   
   var finalString = listOfStrings.join("");
-  this._myDivElement.innerHTML = finalString;
+  this.getDivElement().innerHTML = finalString;
 };
 
 
+/**
+ * Does final clean-up.
+ *
+ * @scope    public instance method
+ */
+BarChartLayout.prototype.endOfLife = function () {
+  this.getDivElement().innerHTML = "";
+};
+
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------
 
-

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/base_style.css	2005-04-05 05:02:08 UTC (rev 20)
@@ -51,20 +51,22 @@
  Here are lists of the colors I use.
  
  Background colors:
-   white            -->  rgb(100%,100%,100%);
-   gray background  -->  rgb(90%,90%,90%);
-   green background -->  rgb(80%,100%,80%);
-   red background   -->  rgb(100%,80%,80%);
-   bright yellow    -->  rgb(100%,100%,0%);
+   white            -->  rgb(100%, 100%, 100%);
+   gray background  -->  rgb(90%, 90%, 90%);
+   green background -->  rgb(80%, 100%, 80%);
+   red background   -->  rgb(100%, 80%, 80%);
+   bright yellow    -->  rgb(100%, 100%, 0%);
+   editing yellow   -->  rgb(100%, 100%, 40%);
+   hover yellow     -->  rgb(100%, 100%, 70%);
    black            -->  rgb(0%, 0%, 0%);
 
  Line colors
-   table line gray  -->  rgb(70%,70%,70%);
+   border line gray -->  rgb(70%,70%,70%);
    dark blue        -->  rgb(0%, 0%, 50%);
  
  Font colors:
    black            -->  rgb(0%, 0%, 0%);
-   logo gray        -->  rgb(60%,60%,60%);  
+   logo gray        -->  rgb(60%, 60%, 60%);  
    dark blue        -->  rgb(0%, 0%, 50%);
    red              -->  rgb(100%, 0%, 0%);
    teletype green   -->  rgb(0%, 100%, 0%);
@@ -72,7 +74,7 @@
  Link colors:
    blue             -->  #0000cc;
    maroon           -->  #551a8b;
-   dark gray        -->  rgb(30%,30%,30%);  
+   dark gray        -->  rgb(30%, 30%, 30%);  
 
 *********************************************************************/
 
@@ -81,13 +83,13 @@
 /* Universal styles                     */
 
 html, body {
-  background: rgb(100%,100%,100%);
+  background: rgb(100%, 100%, 100%);
   color: rgb(0%,0%,0%);
   font-family: Arial, Verdana, sans-serif;
 }
 
 div.editmode {
-  background: rgb(100%,100%,100%);
+  background: rgb(100%, 100%, 100%);
 }
 
 h1 {
@@ -129,7 +131,7 @@
   text-decoration: none;
   border-bottom-style: solid;
   border-bottom-width: 1pt;
-  background: rgb(100%,100%,0%);
+  background: rgb(100%, 100%, 0%);
 }
 
 a.anchor {
@@ -152,7 +154,7 @@
   text-decoration: none;
   border-bottom-style: solid;
   border-bottom-width: 1pt;
-  background: rgb(100%,100%,0%);
+  background: rgb(100%, 100%, 0%);
 }
 
 a.more {
@@ -199,7 +201,7 @@
 }
 
 .logostart {
-  color: rgb(60%,60%,60%);  
+  color: rgb(60%, 60%, 60%);  
 }
 
 .logomiddle {
@@ -207,7 +209,7 @@
 }
 
 .logoend {
-  color: rgb(60%,60%,60%);  
+  color: rgb(60%, 60%, 60%);  
 }
 
 .logo {
@@ -271,17 +273,17 @@
 
 .menu_item a:link {
   color: rgb(0%, 0%, 50%); 
-  background-color: rgb(100%,100%,100%);
+  background-color: rgb(100%, 100%, 100%);
 }
 
 .menu_item a:visited {
   color: rgb(0%, 0%, 50%); 
-  background-color: rgb(90%,90%,90%);
+  background-color: rgb(90%, 90%, 90%);
   border-left: solid 5pt rgb(90%, 90%, 90%);
 }
 
 .menu_item a:hover {
-  background-color: rgb(100%,100%,0%);
+  background-color: rgb(100%, 100%, 0%);
   width: 100%;
   border-left: solid 5pt rgb(0%, 0%, 50%);
   border-bottom-style: none;
@@ -331,6 +333,7 @@
 
 /****************************************/
 /* Footer and copyright styles          */
+
 .footer {
   clear: both;
   border-left: solid 1pt rgb(0%, 0%, 50%);
@@ -355,12 +358,12 @@
 
 .faq dt {
   font-weight: bold;
-  color: rgb(0%,0%,50%);
+  color: rgb(0%, 0%, 50%);
   margin-top: 1.4em;
 }
 
 .faq dd {
-  color: rgb(0%,0%,0%);
+  color: rgb(0%, 0%, 0%);
 }
 
 
@@ -368,31 +371,31 @@
 /* Table styles                         */
 
 .simple_table {
-  background: rgb(70%,70%,70%);
-  border: 1pt solid rgb(70%,70%,70%);
+  background: rgb(70%, 70%, 70%);
+  border: 1pt solid rgb(70%, 70%, 70%);
   border-collapse: collapse; 
 }
 
 .simple_table th {
   padding: 0.3em;
-  color: rgb(0%,0%,50%);
-  background: rgb(90%,90%,90%);
+  color: rgb(0%, 0%, 50%);
+  background: rgb(90%, 90%, 90%);
   font-size: 0.8em;
-  border: 1pt solid rgb(70%,70%,70%);
+  border: 1pt solid rgb(70%, 70%, 70%);
 }
 
 .simple_table tr {
-  background: rgb(100%,100%,100%);
+  background: rgb(100%, 100%, 100%);
 }
 
 .viewmode .simple_table tr:hover {
-  background: rgb(100%,100%,0%);
+  background: rgb(100%, 100%, 0%);
 }
 
 .simple_table td {
   padding: 0.1em 0.3em; 
   font-size: 0.8em;
-  border: 1pt solid rgb(70%,70%,70%);
+  border: 1pt solid rgb(70%, 70%, 70%);
 }
 
 td.plain {
@@ -400,11 +403,11 @@
 }
 
 td.yup {
-  background: rgb(80%,100%,80%);
+  background: rgb(80%, 100%, 80%);
 }
 
 td.nope {
-  background: rgb(100%,80%,80%);
+  background: rgb(100%, 80%, 80%);
 }
 
 td.year {
@@ -419,7 +422,7 @@
 
 td.title {
   font-weight: bold;  
-  background: rgb(90%,90%,90%);
+  background: rgb(90%, 90%, 90%);
 }
 
 td.label {
@@ -429,38 +432,38 @@
 }
 
 td.negative {
-  color: rgb(90%,0%,0%);
+  color: rgb(90%, 0%, 0%);
 }
 
 td.total {
   font-weight: bold;  
-  background: rgb(90%,90%,90%);
+  background: rgb(90%, 90%, 90%);
 }
 
 input.text_field_in_table_cell {
   border-width: 0px;
   width: 100%;
-  background: rgb(100%,100%,0%);
+  background: rgb(100%, 100%, 40%);
 }
 
 input.text_field_in_table_cell:hover {
   border-width: 0px;
   width: 100%;
-  background: rgb(100%,100%,0%);
+  background: rgb(100%, 100%, 40%);
 }
 
 .editmode .simple_table td:hover {
-  background: rgb(100%,100%,70%);
+  background: rgb(100%, 100%, 70%);
 }
 
 td.newitem {
   /* background: rgb(100%,100%,50%); */
-  border-top: medium solid rgb(70%,70%,70%);
+  border-top: medium solid rgb(70%, 70%, 70%);
 }
 
 .editmode .simple_table td.selected {
   /* padding: 0px 0px; */
-  background: rgb(100%,100%,0%);
+  background: rgb(100%, 100%, 40%);
 }
 
 
@@ -521,9 +524,23 @@
   width: 100%;
   font-family: Arial, Verdana, sans-serif;
   color: rgb(0%, 0%, 0%);
+  background: rgb(100%, 100%, 40%);
+  border: none; 
 }
 
+div.editmode .text_block:hover {
+  background: rgb(100%, 100%, 70%);
+  border: thin solid rgb(70%, 70%, 70%);
+}
 
+div.editmode .text_block {
+  border: solid thin rgb(100%, 100%, 100%); 
+}
+
+div.viewmode .text_block {
+  border: solid thin rgb(100%, 100%, 100%); 
+}
+
 /****************************************/
 /* PENDING -- time to delete these?     */
 

Modified: trunk/source/detail_layout.js
===================================================================
--- trunk/source/detail_layout.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/detail_layout.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -47,14 +47,15 @@
  * A DetailLayout display one or more content items. 
  *
  * @scope    public instance constructor
+ * @extends  View
  * @param    inSuperView    The superview for this view. 
+ * @param    inDivElement    The HTMLDivElement to display this view in. 
  * @syntax   var detailLayout = new DetailLayout()
  */
-function DetailLayout(inSuperView) {
-  Util.assert((inSuperView instanceof SectionView) || (inSuperView instanceof ItemView));
-  
-  this.mySuperView = inSuperView;
-  this.myDivElement = null;
+DetailLayout.prototype = new View();  // makes DetailLayout be a subclass of View
+function DetailLayout(inSuperView, inDivElement) {
+  this.setSuperview(inSuperView);
+  this.setDivElement(inDivElement);  
 }
 
 
@@ -70,30 +71,17 @@
 
   
 /**
- * Tells the DetailLayout what HTMLDivElement to display itself in.
- *
- * @scope    public instance method
- * @param    inDivElement    The HTMLDivElement to display in. 
- */
-DetailLayout.prototype.setDivElement = function (inDivElement) {
-  Util.assert(inDivElement instanceof HTMLDivElement);
-  
-  this.myDivElement = inDivElement;
-  this.display();
-};
-
-
-/**
  * Re-creates all the HTML for the DetailLayout, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-DetailLayout.prototype.display = function () {
+DetailLayout.prototype.refresh = function () {
   var listOfStrings = [];
 
   // for each content item, add its HTML representation to the output
-  var listOfContentItems = this.mySuperView.getListOfContentItems();
+  // PENDING: how do we know our superview responds to getListOfContentItems()? 
+  var listOfContentItems = this.getSuperview().getListOfContentItems();
   for (var contentItemKey in listOfContentItems) {
     var contentItem = listOfContentItems[contentItemKey];
     listOfStrings.push(this.getXhtmlTableForItem(contentItem));
@@ -102,11 +90,21 @@
 
   // take all the HTML and put it together
   var finalString = listOfStrings.join("");
-  this.myDivElement.innerHTML = finalString;
+  this.getDivElement().innerHTML = finalString;
 };
 
 
 /**
+ * Does final clean-up.
+ *
+ * @scope    public instance method
+ */
+DetailLayout.prototype.endOfLife = function () {
+  this.getDivElement().innerHTML = "";
+};
+
+
+/**
  * Given an item to be display, returns a string with XHTML to display
  * the item.
  *
@@ -118,7 +116,7 @@
   Util.assert(inItem instanceof Item);
   
   var listOfStrings = [];
-  var stevedore = this.mySuperView.getStevedore();
+  var stevedore = this.getStevedore();
   var attributeCalledName = stevedore.getItemFromUuid(Stevedore.UUID_FOR_ATTRIBUTE_NAME);
   
   listOfStrings.push("<table class=\"" + SectionView.ELEMENT_CLASS_SIMPLE_TABLE + "\">");

Modified: trunk/source/item.js
===================================================================
--- trunk/source/item.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/item.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -116,7 +116,7 @@
   Util.assert(Util.isHashTable(this._myHashTableOfAssignmentsKeyedByAttributeUuid));
   
   var attributeUuid = this._myStevedore.getAttributeUuidFromAttributeOrUuid(inAttribute);
-  // PROBLEM: 
+  // PENDING: 
   //   If this item isn't yet fully loaded into the cache, then we might need 
   //   to ask our stevedore to get the attribute values for us.
   var valueList = this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid];
@@ -153,7 +153,7 @@
   if (valueWasSet) {
     this._myStevedore.markDirty(this);
   }
-  // PROBLEM: 
+  // PENDING: 
   //   We also need to create a change object, and we need to tell 
   //   this._myStevedore about the change.
   this._notifyObservers();
@@ -180,7 +180,7 @@
     this._myStevedore.markDirty(this);
   }
   
-  // PROBLEM: 
+  // PENDING: 
   //   We also need to create a change object, and we need to tell 
   //   this._myStevedore about the change.
   this._notifyObservers();
@@ -250,11 +250,11 @@
   // is in turn in the categoery "inCategory"
   for (key in valueList) {
     value = valueList[key];
-    // PROBLEM: 
+    // PENDING: 
     //   This will go into an infinite loop if there is ever a cycle in the category 
     //   assignments, like: A is in category B, and B is in C, and C is in A.
     //   We need to use a non-recursive search of the graph.
-    // PROBLEM:
+    // PENDING:
     //   Do we also need to register as an observer of something, so that if we later
     //   become a member of that category in question, then we can notify whoever
     //   is observing us?

Modified: trunk/source/item_view.js
===================================================================
--- trunk/source/item_view.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/item_view.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -66,7 +66,7 @@
   this.myItem = inItem;
   // this.myDivElement = inDivElement;
   // this.myRootView = inRootView;
-  this.myLayout = new DetailLayout(this);
+  this.myLayout = null;
 }
 
 
@@ -103,7 +103,7 @@
 ItemView.prototype.refresh = function () {
   Util.assert(this.myItem instanceof Item);
   // Util.assert(this.myDivElement instanceof HTMLDivElement);
-  
+  // RootView.displayTextInDebugTextarea("ItemView.prototype.refresh"); 
   var listOfStrings = [];
 
   // add an <h1> heading with the name of the page
@@ -116,11 +116,11 @@
   // write out all the new content 
   var finalString = listOfStrings.join("");
   this.getDivElement().innerHTML = finalString;
-  this.includeOnScreen(true);
 
   // let the detailLayout add its own content
   var detailLayoutDivElement = document.getElementById(detailDivId);
-  this.myLayout.setDivElement(detailLayoutDivElement);
+  this.myLayout = new DetailLayout(this, detailLayoutDivElement);
+  this.myLayout.refresh();
 };
 
 

Modified: trunk/source/outline_layout.js
===================================================================
--- trunk/source/outline_layout.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/outline_layout.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -46,14 +46,15 @@
  * An OutlineLayout displays a set of content items for a SectionView. 
  *
  * @scope    public instance constructor
+ * @extends  View
  * @param    inSectionView    The SectionView that serves as the superview for this view. 
+ * @param    inDivElement    The HTMLDivElement to display this view in. 
  * @syntax   var outline = new OutlineLayout()
  */
-function OutlineLayout(inSectionView) {
-  Util.assert(inSectionView instanceof SectionView);
-
-  this.mySectionView = inSectionView;
-  this.myDivElement = null;
+OutlineLayout.prototype = new View();  // makes OutlineLayout be a subclass of View
+function OutlineLayout(inSectionView, inDivElement) {
+  this.setSuperview(inSectionView);
+  this.setDivElement(inDivElement);
 }
 
 
@@ -69,43 +70,35 @@
 
   
 /**
- * Tells the OutlineLayout what HTMLDivElement to display the bar chart in.
+ * Re-creates all the HTML for the OutlineLayout, and hands the HTML to the 
+ * browser to be re-drawn.
  *
  * @scope    public instance method
- * @param    inDivElement    The HTMLDivElement to display the bar chart in. 
  */
-OutlineLayout.prototype.setDivElement = function (inDivElement) {
-  Util.assert(inDivElement instanceof HTMLDivElement);
-
-  this.myDivElement = inDivElement;
+OutlineLayout.prototype.refresh = function () {
+  var listOfContentItems = this.getSuperview().getListOfContentItems();
+  var outlineDiv = this.getDivElement();
+  var ulElement = View.createAndAppendElement(outlineDiv, "ul");
+  for (var contentItemKey in listOfContentItems) {
+    var contentItem = listOfContentItems[contentItemKey];
+    var liElement = View.createAndAppendElement(ulElement, "li");
+    View.createAndAppendTextNode(liElement, contentItem.getDisplayName("{no name}") + " ");
+    var anchorElement = View.createAndAppendElement(liElement, "a", SectionView.ELEMENT_CLASS_MORE_LINK);
+    anchorElement.setAttribute("href", RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuid());
+    // View.createAndAppendTextNode(anchorElement, "(more &#8658;)");
+    anchorElement.innerHTML = "(more &#8658;)";
+    Util.addEventListener(anchorElement, "click", RootView.clickOnLocalLink);
+  }
 };
 
 
 /**
- * Re-creates all the HTML for the OutlineLayout, and hands the HTML to the 
- * browser to be re-drawn.
+ * Does final clean-up.
  *
  * @scope    public instance method
  */
-OutlineLayout.prototype.display = function () {
-  var listOfStrings = [];
-
-  var listOfContentItems = this.mySectionView.getListOfContentItems();
-  listOfStrings.push("<ul>");
-  // for each content item, add its HTML representation to the output
-  for (var contentItemKey in listOfContentItems) {
-    var contentItem = listOfContentItems[contentItemKey];
-    listOfStrings.push("<li>");
-    listOfStrings.push(contentItem.getDisplayName("{no name}"));
-    // PROBLEM: Why do I have to provide an onclick handler to get these links to work?
-    listOfStrings.push(" " + "<a class=\"" + SectionView.ELEMENT_CLASS_MORE_LINK + "\" href=\"" + RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuid() + "\" onclick=\"RootView.clickOnLocalLink(event)\">(more &#8658;)</a>" + "");
-    listOfStrings.push("</li>");
-  }
-  listOfStrings.push("</ul>");
-
-  // take all the HTML and put it together
-  var finalString = listOfStrings.join("");
-  this.myDivElement.innerHTML = finalString;
+OutlineLayout.prototype.endOfLife = function () {
+  this.getDivElement().innerHTML = "";
 };
 
 

Modified: trunk/source/rectangle.js
===================================================================
--- trunk/source/rectangle.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/rectangle.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -30,7 +30,7 @@
 //    + accessor methods are prefixed with "get" or "is" -- e.g. oval.getArea(), oval.isCircle()
 //       + any method that returns a value and does not change an object's state should be a "get" or "is" method
 //       + any method that does change an object's state should be a "set" method
-//    + problems are marked with PROBLEM
+//    + problems are marked with PENDING
 //
 // + compatiblity with other browsers and other JavaScript libraries 
 //    + use "get" and "set" accessors -- do *not* assign Mozilla "getter" and "setter" methods
@@ -54,7 +54,7 @@
 //    + instance methods are defined on the prototype -- see getArea()
 //    + accessor methods never have side-effects
 //
-// + PROBLEM
+// + PENDING
 //    + private instance properties?
 //    + private instance methods?
 //    + class methods?

Modified: trunk/source/root_view.js
===================================================================
--- trunk/source/root_view.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/root_view.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -262,10 +262,9 @@
 
   // add event handlers for the newly created control span UI elements
   var editButton = document.getElementById(this.myEditButtonId);
-  editButton.onclick = RootView.clickOnEditButton;
- 
-  // attach back-pointers to the newly created control span UI elements
-  editButton.myrootview = this;
+  var listener = this;
+  Util.addEventListener(editButton, "click",
+    function(event) { listener.clickOnEditButton(event);});
 };
 
 
@@ -401,14 +400,21 @@
  * @param    inEventObject    An event object. 
  */
 RootView.clickOnLocalLink = function (inEventObject) {
-  var eventObject = inEventObject;
-  if (!eventObject) { eventObject = window.event; }
+  var eventObject = inEventObject || window.event;
   
   var startTiming = new Date();
+  
+  // "wait", "auto", "default", "crosshair", "help"
+  // "n-resize", "s-resize", "e-resize", "w-resize"
+  // "ne-resize", "se-resize", "nw-resize", "sw-resize"
+  // window.document.body.style.cursor = "wait";
+
   var htmlAnchorElement = Util.getTargetFromEvent(eventObject);
   
   window.location = htmlAnchorElement.href;
   RootView.ourSingleInstance.setCurrentContentViewFromUrl();
+
+  // window.document.body.style.cursor = "default";
   
   var stopTiming = new Date();
   var delayInMilliseconds = stopTiming.getTime() - startTiming.getTime();
@@ -422,27 +428,22 @@
  * Called from an HTML "input type='button'" element on the generated page.  
  * There is no need to call this method directly.
  *
- * @scope    public class method
+ * @scope    public instance method
  * @param    inEventObject    An event object. 
  */
-RootView.clickOnEditButton = function (inEventObject) {
-  var eventObject = inEventObject;
-  if (!eventObject) { eventObject = window.event; }
-  var editButton = Util.getTargetFromEvent(eventObject);
-  // PROBLEM: We could replace the lines above with "var editButton = this;"
-  // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
-
-  var rootView = editButton.myrootview;
-  var stevedore = rootView.getStevedore();
-  if (rootView.myEditMode) {
+RootView.prototype.clickOnEditButton = function (inEventObject) {
+  var stevedore = this.getStevedore();
+  if (this.myEditMode) {
     stevedore.endTransaction();
+    window.document.body.style.cursor = "auto";
   } else {
     stevedore.beginTransaction();
+    window.document.body.style.cursor = "crosshair";
   }
-  rootView.myEditMode = !rootView.myEditMode;
-  rootView.display();
-  // rootView.displayTextInDebugTextarea(rootView.myEditMode);
-  if (!rootView.myEditMode && window.location && (window.location.protocol == "file:")) {
+  this.myEditMode = !this.myEditMode;
+  this.display();
+  // this.displayTextInDebugTextarea(this.myEditMode);
+  if (!this.myEditMode && window.location && (window.location.protocol == "file:")) {
     RootView.displayTextInDebugTextarea(stevedore._getJsonStringRepresentingAllItems());
   }
 };

Modified: trunk/source/section_view.js
===================================================================
--- trunk/source/section_view.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/section_view.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -93,15 +93,15 @@
   Util.assert(inSection instanceof Item);
   
   // instance properties
-  // PROBLEM: these should all be private
+  // PENDING: these should all be private
   this.setSuperview(inPageView);
   this.setDivElement(inDivElement);
   this.mySection = inSection;
   this.mySectionNumber = inSectionNumber;
   var query = inSection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
   this.myListOfContentItems = this.getStevedore().getListOfResultItemsForQuery(query); 
-  var layoutName = inSection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME)[0];
-  this.myLayout = this.getLayoutFromLayoutName(layoutName);
+
+  this._myLayout = null;
   this._myLayoutDiv = null;
   this._myHasEverBeenDisplayedFlag = false;
   this._mySectionSummaryView = null;
@@ -138,19 +138,20 @@
 /**
  * Given the name of a layout ("Table", "Outline", etc.), returns a newly
  * created layout object of that type, initialized to be the layout for this 
- * section
+ * SectionView.
  *
  * @scope    public instance method
  * @param    inLayoutName    A string. One of the registered layout names. 
+ * @param    inLayoutDiv    The HTMLDivElement to display the layout in. 
  * @return   A newly created layout object, initialized to be the layout for this section.
  */
-SectionView.prototype.getLayoutFromLayoutName = function (inLayoutName) {
+SectionView.prototype.getLayoutFromLayoutName = function (inLayoutName, inLayoutDiv) {
   Util.assert(Util.isString(inLayoutName));
   
   var newLayout = null;
   var layoutClass = SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[inLayoutName];
   if (layoutClass) {
-    newLayout = new layoutClass(this);
+    newLayout = new layoutClass(this, inLayoutDiv);
   }
   return newLayout;
 };
@@ -181,8 +182,7 @@
   } else {
     // refresh the <h2> element with the value: this.mySection.getDisplayName();  
     this._mySectionSummaryView.refresh();
-    this.myLayout.setDivElement(this._myLayoutDiv);
-    this.myLayout.display();
+    this._myLayout.refresh();
   }
 };
 
@@ -197,6 +197,7 @@
   if (!this.getDivElement()) {
     return;
   }
+  var selectedLayoutName = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME)[0];
   var query = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
   this.myListOfContentItems = this.getStevedore().getListOfResultItemsForQuery(query); 
   if (!this.myListOfContentItems) {
@@ -216,18 +217,19 @@
   var selectElement = View.createAndAppendElement(outerDiv, "select", SectionView.ELEMENT_CLASS_SECTION_LAYOUT_MENU, selectMenuId);
   selectElement.setAttribute("name", selectMenuId);
   selectElement.setAttribute(SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER, this.mySectionNumber);
-  selectElement.mysectionview = this;
   for (var layoutName in SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName) {
     var optionElement = View.createAndAppendElement(selectElement, "option");
-    optionElement.selected = (this.myLayout.getLayoutName() == layoutName);
+    optionElement.selected = (selectedLayoutName == layoutName);
     optionElement.setAttribute("value", layoutName);
-    optionElement.setAttribute("onclick", "SectionView.clickOnLayoutSelectionMenu(event)");
+    // Util.addEventListener(optionElement, "click", SectionView.clickOnLayoutSelectionMenu);
+    var listener = this; 
+    Util.addEventListener(optionElement, "click", function(event) {listener.clickOnLayoutSelectionMenu(event);});
     optionElement.innerHTML = layoutName;
   }
 
   // create a div element for the layout class to use
   this._myLayoutDiv = View.createAndAppendElement(outerDiv, "div");
-  this.myLayout.setDivElement(this._myLayoutDiv);
+  this._myLayout = this.getLayoutFromLayoutName(selectedLayoutName, this._myLayoutDiv);
   this._myHasEverBeenDisplayedFlag = true;
   this.refresh();
 };
@@ -241,31 +243,27 @@
  * Called when the user clicks on any of the layout option-select controls.
  * Called from an HTML option element within an HTML select element.
  *
- * @scope    public class method
+ * @scope    public instance method
  * @param    inEventObject    An event object. 
  */
-SectionView.clickOnLayoutSelectionMenu = function (inEventObject) {
-  var eventObject = inEventObject;
-  if (!eventObject) { eventObject = window.event; }
+SectionView.prototype.clickOnLayoutSelectionMenu = function (inEventObject) {
+  var eventObject = inEventObject || window.event;
   var optionElement = Util.getTargetFromEvent(eventObject);
-  // PROBLEM: We could replace the lines above with "var optionElement = this;"
+  // PENDING: We could replace the lines above with "var optionElement = this;"
   // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
   
   var selectElement = optionElement.parentNode;
   var newChoiceName = optionElement.value;
-  
-  var sectionView = selectElement.mysectionview;
-  
-  if (sectionView.myLayout.getLayoutName() == newChoiceName) {
-    // alert("line 213");
+
+ 
+  if (this._myLayout.getLayoutName() == newChoiceName) {
     return;
   } else {
-    // alert("line 216");
-    sectionView.myLayout = sectionView.getLayoutFromLayoutName(newChoiceName);
-    sectionView.mySection.clear(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME);
-    sectionView.mySection.assign(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME, newChoiceName);
-  
-    sectionView.refresh();
+    this._myLayout.endOfLife();
+    this._myLayout = this.getLayoutFromLayoutName(newChoiceName, this._myLayoutDiv);
+    this.mySection.clear(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME);
+    this.mySection.assign(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME, newChoiceName);
+    this.refresh();
   }
 };
 

Modified: trunk/source/stevedore.js
===================================================================
--- trunk/source/stevedore.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/stevedore.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -299,7 +299,7 @@
  */
 Stevedore.prototype.beginTransaction = function () {
   this._myCountOfNestedTransactions += 1;
-  // PROBLEM:
+  // PENDING:
   //   This is just a stub method for now.  Once we start implementing
   //   support for transactions we'll have to put some real code here.
 };
@@ -313,7 +313,7 @@
 Stevedore.prototype.endTransaction = function () {
   this._myCountOfNestedTransactions -= 1;
   Util.assert(this._myCountOfNestedTransactions >= 0);
-  // PROBLEM:
+  // PENDING:
   //   This is just a stub method for now.  Once we start implementing
   //   support for transactions we'll have to put some real code here.
   if (this._myCountOfNestedTransactions === 0) {
@@ -487,7 +487,7 @@
     }
   }
   
-  // PROBLEM:
+  // PENDING:
   // If we don't have a designated "home page" for this data set, then just
   // look through all the items and set the home page to be the first page 
   // item we come across.  This, of course, is a hack.

Modified: trunk/source/table_layout.js
===================================================================
--- trunk/source/table_layout.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/table_layout.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -54,13 +54,10 @@
  * When the TableLayout creates an HTML table, it sets up each HTML "td" table 
  * cell element in the table to point to a corresponding CellDelegate instance.
  *
- * PROBLEM: This CellDelegate class should be privately owned by the
- * TableLayout class.
- *
- * @scope    public instance constructor
+ * @scope    private instance constructor
  */
-function _CellDelegate(inRowDelegate, inCellElementId, inCellCount, inColumnNumber, inAttribute, inTableLayout) {
-  Util.assert(inRowDelegate instanceof _RowDelegate);
+TableLayout._CellDelegate = function (inRowDelegate, inCellElementId, inCellCount, inColumnNumber, inAttribute, inTableLayout) {
+  Util.assert(inRowDelegate instanceof TableLayout._RowDelegate);
   Util.assert(inAttribute instanceof Item);
   Util.assert(inTableLayout instanceof TableLayout);
 
@@ -77,12 +74,9 @@
  * When the TableLayout creates an HTML table, it sets up each HTML "tr" table
  * row element in the table to point to a corresponding RowDelegate instance.
  *
- * PROBLEM: This RowDelegate class should be privately owned by the
- * TableLayout class.
- *
- * @scope    public instance constructor
+ * @scope    private instance constructor
  */
-function _RowDelegate(inContentItem, inRowNumber) {
+TableLayout._RowDelegate = function (inContentItem, inRowNumber) {
   Util.assert((inContentItem == null) || (inContentItem instanceof Item));
 
   this.myContentItem = inContentItem;
@@ -96,13 +90,15 @@
  * HTML table.
  *
  * @scope    public instance constructor
+ * @extends  View
  * @param    inSectionView    The SectionView that this TableLayout will appears in. 
+ * @param    inDivElement    The HTMLDivElement to display this view in. 
  */
-function TableLayout(inSectionView) {
-  Util.assert(inSectionView instanceof SectionView);
+TableLayout.prototype = new View();  // makes TableLayout be a subclass of View
+function TableLayout(inSectionView, inDivElement) {
+  this.setSuperview(inSectionView);
+  this.setDivElement(inDivElement);  
 
-  this.mySectionView = inSectionView;
-  this.myDivElement = null;
   this.myNumColumns = null;
   this.myNumRows = null;
   this.myArrayOfRowDelegates = new Array();
@@ -122,27 +118,12 @@
 
   
 /**
- * Gives the TableLayout a place on the page to put HTML code, allowing
- * the TableLayout to display itself.
- *
- * @scope    public instance method
- * @param    inDivElement    The HTMLDivElement that this layout should display itself in. 
- */
-TableLayout.prototype.setDivElement = function (inDivElement) {
-  Util.assert(inDivElement instanceof HTMLDivElement);
-
-  this.myDivElement = inDivElement;
-  this.display();
-};
-
-
-/**
  * Re-creates all the HTML for the TableLayout, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-TableLayout.prototype.display = function () {
+TableLayout.prototype.refresh = function () {
   var listOfStrings = [];
   var hashTableOfAttributesKeyedByUuid = {};
   var hashTableOfCellDelegatesKeyedByElementId = {};
@@ -152,14 +133,15 @@
   var columnCount = 0;
   
   // find the union of the attribute lists of all the content items
-  var listOfContentItems = this.mySectionView.getListOfContentItems();
+  // PENDING: how do we know our superview responds to getListOfContentItems()? 
+  var listOfContentItems = this.getSuperview().getListOfContentItems();
   for (var iKey in listOfContentItems) {
     contentItem = listOfContentItems[iKey];
     var listOfAttributesForItem = contentItem.getListOfAttributeUuids();
     for (var attributeKey in listOfAttributesForItem) {
       attributeUuid = listOfAttributesForItem[attributeKey];
       if (attributeUuid != Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY) {
-        hashTableOfAttributesKeyedByUuid[attributeUuid] = this.mySectionView.getStevedore().getItemFromUuid(attributeUuid);
+        hashTableOfAttributesKeyedByUuid[attributeUuid] = this.getStevedore().getItemFromUuid(attributeUuid);
       }
     }
   }
@@ -177,13 +159,13 @@
   
   // add all the table body rows
   var cellCount = 0;
-  var cellIdPrefix = SectionView.ELEMENT_ID_CELL_PREFIX + this.mySectionView.mySectionNumber + SectionView.ELEMENT_ID_CELL_MIDFIX;
+  var cellIdPrefix = SectionView.ELEMENT_ID_CELL_PREFIX + this.getSuperview().mySectionNumber + SectionView.ELEMENT_ID_CELL_MIDFIX;
   var cellId = "";
   this.myNumRows = 0;
   for (var kKey in listOfContentItems) {
     contentItem = listOfContentItems[kKey];
     listOfStrings.push("<tr>");
-    var rowDelegate = new _RowDelegate(contentItem, this.myNumRows);
+    var rowDelegate = new TableLayout._RowDelegate(contentItem, this.myNumRows);
     this.myArrayOfRowDelegates[this.myNumRows] = rowDelegate;
     this.myNumRows += 1;
     columnCount = 0;
@@ -196,9 +178,9 @@
       if (valueList) {
         string = SectionView.getStringForValue(valueList[0]);
       }
-      if (this.mySectionView.isInEditMode()) {
-        listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.mySectionView.mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + string + "</td>");
-        var cellDelegate = new _CellDelegate(rowDelegate, cellId, cellCount, columnCount, attribute, this);
+      if (this.isInEditMode()) {
+        listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + string + "</td>");
+        var cellDelegate = new TableLayout._CellDelegate(rowDelegate, cellId, cellCount, columnCount, attribute, this);
         rowDelegate.myArrayOfCellDelegates[columnCount] = cellDelegate;
         hashTableOfCellDelegatesKeyedByElementId[cellId] = cellDelegate;
       } else {
@@ -214,10 +196,10 @@
 
   // if we're in edit mode, add a row at the bottom of the table for entering new items
   var firstCell = true;
-  var lastRowDelegate = new _RowDelegate(null, this.myNumRows);
+  var lastRowDelegate = new TableLayout._RowDelegate(null, this.myNumRows);
   this.myArrayOfRowDelegates[this.myNumRows] = lastRowDelegate;
   this.myNumRows += 1;
-  if (this.mySectionView.isInEditMode()) {
+  if (this.isInEditMode()) {
     listOfStrings.push("<tr>");
     columnCount = 0;
     for (var mKey in hashTableOfAttributesKeyedByUuid) {
@@ -226,8 +208,8 @@
       firstCell = false;
       cellCount += 1;
       cellId = cellIdPrefix + cellCount;
-      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_NEW_ITEM + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.mySectionView.mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + contentString + "</td>");
-      var lastRowCellDelegate = new _CellDelegate(lastRowDelegate, cellId, cellCount, columnCount, attribute, this);
+      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_NEW_ITEM + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + contentString + "</td>");
+      var lastRowCellDelegate = new TableLayout._CellDelegate(lastRowDelegate, cellId, cellCount, columnCount, attribute, this);
       lastRowDelegate.myArrayOfCellDelegates[columnCount] = lastRowCellDelegate;
       hashTableOfCellDelegatesKeyedByElementId[cellId] = lastRowCellDelegate;
       columnCount += 1;
@@ -240,7 +222,7 @@
   
   // write out all the new content   
   var finalString = listOfStrings.join("");
-  this.myDivElement.innerHTML = finalString;
+  this.getDivElement().innerHTML = finalString;
   
   // attach back-pointers to the newly created UI elements
   for (var elementId in hashTableOfCellDelegatesKeyedByElementId) {
@@ -252,6 +234,16 @@
   
 
 /**
+ * Does final clean-up.
+ *
+ * @scope    public instance method
+ */
+TableLayout.prototype.endOfLife = function () {
+  this.getDivElement().innerHTML = "";
+};
+
+
+/**
  * Called when the user clicks on a table cell.
  * 
  * Called from an HTML "td" element on the generated page.  There is no need
@@ -262,10 +254,10 @@
 TableLayout.clickOnCell = function (inEventObject) {
   var eventObject = inEventObject;
   if (!eventObject) { eventObject = window.event; } 
-  // PROBLEM: try this instead: var eventObject = inEventObject || window.event;
+  // PENDING: try this instead: var eventObject = inEventObject || window.event;
   
   var htmlElement = Util.getTargetFromEvent(eventObject);
-  // PROBLEM: We could replace the two lines above with "var htmlElement = this;"
+  // PENDING: We could replace the two lines above with "var htmlElement = this;"
   // That would work fine in Firefox, but maybe it wouldn't work in other browsers?
 
   var currentEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
@@ -308,7 +300,9 @@
   var editFieldString = "<input type=\"text\" class=\"" + SectionView.ELEMENT_CLASS_TEXT_FIELD_IN_TABLE_CELL + "\" id=\"" + TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD + "\" value=\"" + initialEditValue + "\" size=\"1\"></input>";
   inCellElement.innerHTML = editFieldString;
   inCellElement.className = SectionView.ELEMENT_CLASS_SELECTED + " " + inCellElement.className;
-  
+  // var listener = this; 
+  // Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
+      
   var newEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
   newEditField.onkeypress = TableLayout.keyPressOnEditField;
   newEditField.select();
@@ -332,7 +326,7 @@
     // find the content item for this cell, and set the attribute to the new cell value
     var contentItem = cellDelegate.myRowDelegate.myContentItem;
     if (!contentItem) {
-      var sectionView = cellDelegate.myTableLayout.mySectionView;
+      var sectionView = cellDelegate.myTableLayout.getSuperview();
       var stevedore = sectionView.getStevedore();
       contentItem = stevedore.newItem(); 
       cellDelegate.myTableLayout.myNewItemCreatedFlag = true;
@@ -340,7 +334,7 @@
       var queryList = sectionView.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY);
       if (queryList) {
         var query = queryList[0];
-        // PROBLEM: We should NOT get a value from the item's PRIVATE _myStevedore property
+        // PENDING: We should NOT get a value from the item's PRIVATE _myStevedore property
         contentItem._myStevedore.setItemToBeIncludedInQueryResultList(contentItem, query);
       }
     }
@@ -428,7 +422,7 @@
     if (move == MOVE_LEFT || move == MOVE_RIGHT) {
       shiftBy = (move == MOVE_LEFT) ? -1 : 1;
       var nextColumnNumber = cellDelegate.myColumnNumber + shiftBy;
-      // PROBLEM: We should be able to do this in one line, using a modulo operator
+      // PENDING: We should be able to do this in one line, using a modulo operator
       if (nextColumnNumber < 0) {
         nextColumnNumber = (tableLayout.myNumColumns - 1);
       }
@@ -457,7 +451,7 @@
     TableLayout.leaveEditField();
     if (userHitReturnInLastRow && tableLayout.myNewItemCreatedFlag) {
       tableLayout.myNewItemCreatedFlag = false;
-      tableLayout.display();
+      tableLayout.refresh();
       tableLayout.startEditingInCellForNewItemAtColumn(cellDelegate.myColumnNumber);
     } else {
       if (nextCell) {

Modified: trunk/source/test_page.js
===================================================================
--- trunk/source/test_page.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/test_page.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -42,11 +42,11 @@
  * @scope    global function
  */
 window.doOnloadActions = function() {  
-  Util.setTargetsForExternalLinks();
   
   var stevedore = new Stevedore();
   stevedore._loadItemsFromList(Stevedore._ourRepositoryInJsonFormat);
   window.rootView = new RootView(stevedore);
+  Util.setTargetsForExternalLinks();
 };
 
 

Modified: trunk/source/text_view.js
===================================================================
--- trunk/source/text_view.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/text_view.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -37,23 +37,31 @@
 // -------------------------------------------------------------------
 
 
+// -------------------------------------------------------------------
+// MultiLineTextView public class constants
+// -------------------------------------------------------------------
+MultiLineTextView.ELEMENT_CLASS_TEXT_BLOCK = "text_block";
+
+
 /**
  * An instance of MultiLineTextView can be placed in any parent container View
  * to display and (if in edit mode) edit multi-lines of text
  *
  * @scope    public instance constructor
+ * @extends  View
  * @param    theSuperview    The view that this view is nested in. 
  * @param    theItem    The Item to be displayed and edited by this view. 
  * @param    theAttribute    The attribute of the item to be displayed.
  * @param    theDivElement    The HTMLDivElement to display the HTML in. 
  * @param    theClassType    A string that gives a class name to assign to the HTML element. 
  */
+MultiLineTextView.prototype = new View();  // makes MultiLineTextView be a subclass of View
 function MultiLineTextView(theSuperview, theDivElement, theItem, theAttribute, theClassType) {
   Util.assert(theItem instanceof Item);
-  //Util.assert(theAttribute instanceof Attribute); PROBLEM need to check that attribute is an attribute
-  //Util.assert(inDivElement instanceof HTMLDivElement);
+  //Util.assert(theAttribute instanceof Attribute); PENDING need to check that attribute is an attribute
   
-  this.mySuperview = theSuperview;
+  this.setSuperview(theSuperview);
+  this.setDivElement(theDivElement);
   this.textItem = theItem;
   this.attribute = theAttribute;
   this.editField = null;
@@ -61,41 +69,10 @@
   this.classType = theClassType;
   this.isEditing = false;
   this._myHasEverBeenDisplayedFlag = false;
-  this.setDivElement(theDivElement);
 };
 
 
 /**
- * Tells the MultiLineTextView what HTMLDivElement to display itself in.
- *
- * @scope    public instance method
- * @param    inDivElement    The HTMLDivElement to display in. 
- */
-MultiLineTextView.prototype.setDivElement = function(theDivElement) {
-  Util.assert(theDivElement instanceof HTMLDivElement);
-  this.divElement = theDivElement;
-  if (theDivElement) {
-    var listener = this;
-    theDivElement.addEventListener("click",
-      function(event) {listener.onClick(event)},
-      false);
-    this.refresh();
-  }
-};
-
-
-/**
- * Returns true if we are in Edit Mode.
- *
- * @scope    public instance method
- * @return   A boolean value. True if we are in Edit Mode.
- */
-MultiLineTextView.prototype.isInEditMode = function () {
-  return this.mySuperview.isInEditMode();
-};
-
-  
-/**
  * Updates the HTML elements in this view to reflect any changes in 
  * the item's attribute values.
  *
@@ -120,9 +97,10 @@
  * @scope    public instance method
  */
 MultiLineTextView.prototype.doInitialDisplay = function() {
-  if (!this.divElement) return;
-  Util.assert(this.divElement instanceof HTMLDivElement);
+  var divElement = this.getDivElement();
+  Util.assert(divElement instanceof HTMLDivElement);
   
+  divElement.className = MultiLineTextView.ELEMENT_CLASS_TEXT_BLOCK;
   var textList = this.textItem.getValueListFromAttribute(this.attribute);
   var textString = "";
   for (var i in textList) {
@@ -130,7 +108,11 @@
   };
   
   this.textNode = document.createTextNode(textString);
-  this.divElement.appendChild(this.textNode);
+  divElement.appendChild(this.textNode);
+
+  var listener = this;
+  Util.addEventListener(divElement, "click", function(event) { listener.onClick(event);});
+    
   this._myHasEverBeenDisplayedFlag = true;
 };
 
@@ -148,13 +130,11 @@
       editField.className = this.classType;
       //editField.cols=80; now using css style sheet "text_view"
       var listener = this; 
-      editField.addEventListener("blur",
-        function(evt) {listener.onBlur(evt)},
-        false);
+      Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
       editField.defaultValue = this.textNode.data;
     }
-    editField.style.height = this.divElement.offsetHeight + "px";
-    this.divElement.replaceChild(editField,this.textNode);
+    editField.style.height = this.getDivElement().offsetHeight + "px";
+    this.getDivElement().replaceChild(editField, this.textNode);
     editField.focus();
     editField.select();
     this.isEditing = true;
@@ -175,7 +155,6 @@
  * @param    inEventObject    An event object. 
  */
 MultiLineTextView.prototype.onClick = function(inEventObject) {
-  inEventObject = inEventObject || window.event;
   if (this.isInEditMode()) {
     this.startEditing();
   }
@@ -195,9 +174,9 @@
   if (this.isEditing) {
     var newText = this.editField.value;
     this.textItem.clear(this.attribute);
-    this.textItem.assign(this.attribute,newText); //PROBLEM: need to deal with multi valued attrs
+    this.textItem.assign(this.attribute, newText); // PENDING: need to deal with multi valued attrs
     this.textNode.data = newText;
-    this.divElement.replaceChild(this.textNode,this.editField);
+    this.getDivElement().replaceChild(this.textNode, this.editField);
     this.isEditing = false;
   }
 };

Modified: trunk/source/util.js
===================================================================
--- trunk/source/util.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/util.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -43,6 +43,7 @@
  * @syntax   DO NOT CALL THIS CONSTRUCTOR
  */
 function Util() {
+  throw new Error("Util is a static class. You can't create instances of it.");
 }
 
 
@@ -254,7 +255,7 @@
  * @return   A boolean value. True if inValue is a hash table.
  */
 Util.isHashTable = function (inValue) {
-  return (inValue && (typeof(inValue) == "object"));  // PROBLEM: we should be more restrictive!
+  return (inValue && (typeof(inValue) == "object"));  // PENDING: we should be more restrictive!
 };
 
 
@@ -360,23 +361,26 @@
 
 
 /**
- * This function allows Views to register an event listener in an 
- * object-oriented manner, allowing a specific object's handleEvent() 
- * method to be called. 
+ * A cross-browser compatibility method for registering event listeners. 
  *
  * @scope public class method
  * @param inElement    An HTMLElement.
- * @param inEventtype    The type of event (e.g. "mousedown", "click").
- * @param inView    The object whose handleEvent() method is to be called.
+ * @param inEventType    The type of event (e.g. "mousedown", "click").
+ * @param inCallback    The function to call when the event happens.
  * @param inCaptures    True if the event should be captured by this function.
  */
-Util.registerObjectEventHandler = function(inElement, inEventtype, inView, inCaptures) {
-  inElement.addEventListener(inEventtype,
-    function(event) { inView.handleEvent(event);},
-    inCaptures);
+Util.addEventListener = function (inElement, inEventType, inCallback, inCaptures) {
+  if (inElement.addEventListener) {
+    // for DOM Level 2 browsers, like Firefox
+    inElement.addEventListener(inEventType, inCallback, inCaptures);
+  } else {
+    if (inElement.attachEvent) {
+      // for Internet Explorer
+      inElement.attachEvent("on"+inEventType, inCallback, inCaptures);
+    }
+  } 
 };
 
-
 // -------------------------------------------------------------------
 // HTML document manipulation
 // -------------------------------------------------------------------
@@ -393,13 +397,10 @@
     return;
   }
   var listOfAnchorElements = window.document.getElementsByTagName("a");
+  var regExp = new RegExp("\\b" + "external" + "\\b");
   for (var i=0; i<listOfAnchorElements.length; i+=1) {
     var anchor = listOfAnchorElements[i];
-    // PROBLEM: This only works if the "rel" attribute has a single value == "external".
-    // To make it work with multi-valued rel attributes, we should do some regular
-    // expression matching to check for strings like "external", "foo external", 
-    // and "external foo".
-    if (anchor.getAttribute("href") && (anchor.getAttribute("rel") == "external")) {
+    if (anchor.getAttribute("href") && (anchor.getAttribute("rel")) && (anchor.getAttribute("rel").search(regExp) != -1)) {
       anchor.target = "_blank";
     }
   }

Modified: trunk/source/view.js
===================================================================
--- trunk/source/view.js	2005-04-03 03:53:21 UTC (rev 19)
+++ trunk/source/view.js	2005-04-05 05:02:08 UTC (rev 20)
@@ -172,6 +172,26 @@
 };
 
 
+/**
+ * Given an HTML element, we first call document.createTextNode() to 
+ * create a new text node, and then call appendChild() to add the new 
+ * text node to the given element.
+ *
+ * @scope    public class method
+ * @param    inElement    The existing element that we should append the new element to. 
+ * @param    inText    The text string to put in the text node.
+ * @return   The newly created text node.
+ */
+View.createAndAppendTextNode = function (inElement, inText) {
+  Util.assert(inElement instanceof HTMLElement);
+  Util.assert(Util.isString(inText));
+
+  var newTextNode = window.document.createTextNode(inText);
+  inElement.appendChild(newTextNode);
+  return newTextNode;
+};
+
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From skinner at sheep.berlios.de  Tue Apr  5 23:00:36 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 5 Apr 2005 23:00:36 +0200
Subject: [openrecord-svn] r21 - trunk/source
Message-ID: <200504052100.j35L0aDq005795@sheep.berlios.de>

Author: skinner
Date: 2005-04-05 23:00:35 +0200 (Tue, 05 Apr 2005)
New Revision: 21

Added:
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/ItemView.js
   trunk/source/OutlinePlugin.js
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
Removed:
   trunk/source/bar_chart_layout.js
   trunk/source/detail_layout.js
   trunk/source/item.js
   trunk/source/item_view.js
   trunk/source/outline_layout.js
   trunk/source/page_view.js
   trunk/source/rectangle.js
   trunk/source/root_view.js
   trunk/source/section_view.js
   trunk/source/stevedore.js
   trunk/source/table_layout.js
   trunk/source/text_view.js
   trunk/source/util.js
   trunk/source/view.js
Log:


Copied: trunk/source/BarChartPlugin.js (from rev 20, trunk/source/bar_chart_layout.js)

Copied: trunk/source/DetailPlugin.js (from rev 20, trunk/source/detail_layout.js)

Copied: trunk/source/ItemView.js (from rev 20, trunk/source/item_view.js)

Copied: trunk/source/OutlinePlugin.js (from rev 20, trunk/source/outline_layout.js)

Copied: trunk/source/PageView.js (from rev 18, trunk/source/page_view.js)

Copied: trunk/source/RootView.js (from rev 20, trunk/source/root_view.js)

Copied: trunk/source/SectionView.js (from rev 20, trunk/source/section_view.js)

Copied: trunk/source/TablePlugin.js (from rev 20, trunk/source/table_layout.js)

Copied: trunk/source/TextView.js (from rev 20, trunk/source/text_view.js)

Deleted: trunk/source/bar_chart_layout.js
===================================================================
--- trunk/source/bar_chart_layout.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/bar_chart_layout.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,188 +0,0 @@
-/*****************************************************************************
- bar_chart_layout.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   section_view.js
-//   page_view.js
-//   util.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
-// -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_BAR_CHART] = BarChartLayout;
-
-
-/**
- * A BarChartLayout displays a set of content items for a SectionView. 
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inSectionView    The SectionView that serves as the superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
- * @syntax   var barChart = new BarChartLayout()
- */
-BarChartLayout.prototype = new View();  // makes BarChartLayout be a subclass of View
-function BarChartLayout(inSectionView, inDivElement) {
-  this.setSuperview(inSectionView);
-  this.setDivElement(inDivElement);
-}
-
-
-/**
- * Returns the registered name of this type of layout.
- *
- * @scope    public instance method
- * @return   A string.
- */
-BarChartLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_BAR_CHART;
-};
-
-
-/**
- * Re-creates all the HTML for the BarChartLayout, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-BarChartLayout.prototype.refresh = function () {
-  var listOfStrings = [];
-
-  var contentItem = null;
-  var attributeUuid = null;
-  var hashTableOfNumericValueIncidenceKeyedByAttributeUuid = {};
-  
-  // for each attribute, count the number of items where that attribute has a numeric value
-  // PENDING: how do we know our superview responds to getListOfContentItems()? 
-  var listOfContentItems = this.getSuperview().getListOfContentItems();
-  for (var iKey in listOfContentItems) {
-    contentItem = listOfContentItems[iKey];
-    var listOfAttributesForItem = contentItem.getListOfAttributeUuids();
-    for (var attributeKey in listOfAttributesForItem) {
-      attributeUuid = listOfAttributesForItem[attributeKey];
-      var valueList = contentItem.getValueListFromAttribute(attributeUuid);
-      if (valueList) {
-        var value = valueList[0];
-        if (Util.isNumber(value)) {
-          var count = hashTableOfNumericValueIncidenceKeyedByAttributeUuid[attributeUuid];
-          if (!count) {
-            count = 0;
-          }
-          count += 1;
-          hashTableOfNumericValueIncidenceKeyedByAttributeUuid[attributeUuid] = count;
-        }
-      }
-    }
-  }
-  
-  // find the attribute for which most of the items have a numeric value 
-  var maxIncidence = 0;
-  var selectedAttribute = null;
-  for (attributeUuid in hashTableOfNumericValueIncidenceKeyedByAttributeUuid) {
-    var incidence = hashTableOfNumericValueIncidenceKeyedByAttributeUuid[attributeUuid];
-    if (incidence > maxIncidence) {
-      selectedAttribute = this.getStevedore().getItemFromUuid(attributeUuid);
-      maxIncidence = incidence;
-    }
-  }
-
-  // find the maximum value for the selected attribute
-  if (selectedAttribute) {
-    var maxValue = 0;
-    for (var jkey in listOfContentItems) {
-      contentItem = listOfContentItems[jkey];
-      var nextValueList = contentItem.getValueListFromAttribute(selectedAttribute);
-      var nextValue = nextValueList[0];
-      if (Util.isNumber(nextValue)) {
-        maxValue = Math.max(maxValue, nextValue);
-      }     
-    }
-  }
-
-  // add the table header row(s)
-  listOfStrings.push("<table class=\"" + SectionView.ELEMENT_CLASS_SIMPLE_TABLE + "\">");
-  listOfStrings.push("<tr>");
-  var attributeCalledName = this.getStevedore().getItemFromUuid(Stevedore.UUID_FOR_ATTRIBUTE_NAME);
-  listOfStrings.push("<th>" + attributeCalledName.getDisplayName() + "</th>");
-  if (selectedAttribute) {
-    listOfStrings.push("<th>" + selectedAttribute.getDisplayName() + "</th>");
-  } else {
-    listOfStrings.push("<th>" + "Sorry, there are no attributes with numeric values to chart" + "</th>");
-  }
-  listOfStrings.push("</tr>");
-    
-  // add all the table body rows
-  for (var kKey in listOfContentItems) {
-    contentItem = listOfContentItems[kKey];
-    listOfStrings.push("<tr>");
-    listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\">" + contentItem.getDisplayName("{no name}") + "</td>");
-    var numericValue = 0;
-    if (selectedAttribute) {
-      var listOfValues = contentItem.getValueListFromAttribute(selectedAttribute);
-      var firstValue = listOfValues[0];
-      if (Util.isNumber(firstValue)) {
-        numericValue = firstValue;
-      }
-    }
-    // listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\">" + displayValue + "</td>");
-    var width = 0;
-    if (maxValue > 0) {
-      width = (numericValue / maxValue) * 100; // 100 Percent
-    }
-    listOfStrings.push("<td class=\"bar_chart_frame\"><input disabled type=\"text\" class=\"bar_chart_bar\" value=\"" + numericValue + "\" size=\"1\" style=\"width: " + width + "%;\"></input></td>");
-    listOfStrings.push("</tr>");
-  }  
-  listOfStrings.push("</table>");
-    
-  // return all the new content   
-  var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
-};
-
-
-/**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-BarChartLayout.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------
-

Deleted: trunk/source/detail_layout.js
===================================================================
--- trunk/source/detail_layout.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/detail_layout.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,153 +0,0 @@
-/*****************************************************************************
- detail_layout.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   section_view.js
-//   util.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
-// -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_DETAIL] = DetailLayout;
-
-
-/**
- * A DetailLayout display one or more content items. 
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inSuperView    The superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
- * @syntax   var detailLayout = new DetailLayout()
- */
-DetailLayout.prototype = new View();  // makes DetailLayout be a subclass of View
-function DetailLayout(inSuperView, inDivElement) {
-  this.setSuperview(inSuperView);
-  this.setDivElement(inDivElement);  
-}
-
-
-/**
- * Returns the registered name of this type of layout.
- *
- * @scope    public instance method
- * @return   A string.
- */
-DetailLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_DETAIL;
-};
-
-  
-/**
- * Re-creates all the HTML for the DetailLayout, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-DetailLayout.prototype.refresh = function () {
-  var listOfStrings = [];
-
-  // for each content item, add its HTML representation to the output
-  // PENDING: how do we know our superview responds to getListOfContentItems()? 
-  var listOfContentItems = this.getSuperview().getListOfContentItems();
-  for (var contentItemKey in listOfContentItems) {
-    var contentItem = listOfContentItems[contentItemKey];
-    listOfStrings.push(this.getXhtmlTableForItem(contentItem));
-    listOfStrings.push("<p>&nbsp;</p>");
-  }
-
-  // take all the HTML and put it together
-  var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
-};
-
-
-/**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-DetailLayout.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
-};
-
-
-/**
- * Given an item to be display, returns a string with XHTML to display
- * the item.
- *
- * @scope    public instance method
- * @param    inItem    An item to be displayed. 
- * @return   A string containing the XHTML to display the item.
- */
-DetailLayout.prototype.getXhtmlTableForItem = function (inItem) {
-  Util.assert(inItem instanceof Item);
-  
-  var listOfStrings = [];
-  var stevedore = this.getStevedore();
-  var attributeCalledName = stevedore.getItemFromUuid(Stevedore.UUID_FOR_ATTRIBUTE_NAME);
-  
-  listOfStrings.push("<table class=\"" + SectionView.ELEMENT_CLASS_SIMPLE_TABLE + "\">");
-  listOfStrings.push("<tr>");
-  listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_LABEL + " " + SectionView.ELEMENT_CLASS_TITLE + "\">" + attributeCalledName.getDisplayName() + "</td>");
-  listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_TITLE + "\">" + inItem.getDisplayName() + "</td>");
-  listOfStrings.push("</tr>");
-  var listOfAttributeUuids = inItem.getListOfAttributeUuids();
-  for (var key in listOfAttributeUuids) { 
-    var attributeUuid = listOfAttributeUuids[key];
-    if (attributeUuid != attributeCalledName.getUuid()) {
-      listOfStrings.push("<tr>");
-      var attribute = stevedore.getItemFromUuid(attributeUuid);
-      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_LABEL + "\">" + attribute.getDisplayName() + "</td>");
-      var valueList = inItem.getValueListFromAttribute(attributeUuid); 
-      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\">");
-      for (var j = 0; j < valueList.length; ++j) {
-        listOfStrings.push(SectionView.getStringForValue(valueList[j]) + "<br/>");
-      }
-      listOfStrings.push("</td>");
-      listOfStrings.push("</tr>");
-    }
-  }
-  listOfStrings.push("</table>");
-
-  // return all the new content
-  var finalString = listOfStrings.join("");
-  return finalString;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/item.js
===================================================================
--- trunk/source/item.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/item.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,369 +0,0 @@
-/*****************************************************************************
- item.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
- 
-// -------------------------------------------------------------------
-// Dependencies:
-//   util.js
-//   stevedore.js
-// -------------------------------------------------------------------
-
-
-/**
- * Instances of the Item class know how to store and retrieve their
- * attribute values.
- *
- * @scope    public instance constructor
- */
-function Item(inStevedore, inUuid) {
-  Util.assert(!inUuid || Util.isNumeric(inUuid));
-  
-  this._myStevedore = inStevedore;
-  this._myUuid = inUuid;
-  this._myListOfObservers = [];
-  this._myHashTableOfAssignmentsKeyedByAttributeUuid = {};
-}
-
-
-/**
- * Returns the display name of the item.
- *
- * @scope    public instance method
- * @return   A string with a display name for the item.
- */
-Item.prototype.toString = function () {
-  var returnString = "[Item #" + this.getUuid() + " ";
-  var listOfCategories = this.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY);
-  for (var key in listOfCategories) {
-    var category = listOfCategories[key];
-    Util.assert(category instanceof Item);
-    returnString += "(" + category.getDisplayName() + ")";
-  }
-  returnString += " \"" + this.getDisplayName() + "\"" + "]";
-  return returnString; 
-};
-
-
-// -------------------------------------------------------------------
-// Attribute Accessor Methods
-// -------------------------------------------------------------------
-
-/**
- * Returns the display name of the item.
- *
- * @scope    public instance method
- * @return   A string with a display name for the item.
- */
-Item.prototype.getDisplayName = function (inDefaultString) {
-  return this._getStringUsingNameAttributes(Stevedore.UUID_FOR_ATTRIBUTE_NAME, null, inDefaultString);
-};
-  
-  
-/**
- * Returns a short display name for the item.
- *
- * @scope    public instance method
- * @return   A string with a short display name for the item.
- */
-Item.prototype.getShortName = function (inDefaultString) {
-  return this._getStringUsingNameAttributes(Stevedore.UUID_FOR_ATTRIBUTE_SHORT_NAME, Stevedore.UUID_FOR_ATTRIBUTE_NAME, inDefaultString);
-};
-
-
-/**
- * Given an attribute, this method returns the list of values that 
- * have been assigned to that attribute for this item.
- *
- * For example, to find out what color Kermit is: 
- * <pre>
- *    var valueList = kermit.getValueListFromAttribute(color);
- *    for (var i = 0; i < valueList.length; ++i) {
- *      alert("Kermit is " + valueList[i]);
- *    }
- * </pre>
- *
- * @scope    public instance method
- * @param    inAttribute    The object to be removed from the set of observers. 
- */
-Item.prototype.getValueListFromAttribute = function (inAttribute) {
-  Util.assert(Util.isHashTable(this._myHashTableOfAssignmentsKeyedByAttributeUuid));
-  
-  var attributeUuid = this._myStevedore.getAttributeUuidFromAttributeOrUuid(inAttribute);
-  // PENDING: 
-  //   If this item isn't yet fully loaded into the cache, then we might need 
-  //   to ask our stevedore to get the attribute values for us.
-  var valueList = this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid];
-  return (valueList || null);
-};
-
-
-/**
- * Assigns a value to an attribute in this item.
- *
- * Given an attribute and a value, assigns that value to the
- * attribute of the item. For example, to make a Kermit green:
- * <pre>
- *    kermit.assign(color, "green");
- * </pre>
- * Attributes can always have more than one assigned value, so
- * you can make Kermit be both blue and green by doing:
- * <pre>
- *    kermit.assign(color, "green");
- *    kermit.assign(color, "blue");
- * </pre>
- *
- * @scope    public instance method
- * @param    inAttribute    The attribute to assign the value to, or the UUID of the attribute. 
- * @param    inValue    The value to be assigned. 
- */
-Item.prototype.assign = function (inAttribute, inValue) {
-  var cleanValue = inValue;
-  // alert("assign(" + inAttribute + ", " + inValue + ")");
-  if (Util.isString(inValue)) {
-    var cleanValue = Util.getCleanString(inValue);
-  }
-  var valueWasSet = this._initializeAttributeValue(inAttribute, cleanValue);
-  if (valueWasSet) {
-    this._myStevedore.markDirty(this);
-  }
-  // PENDING: 
-  //   We also need to create a change object, and we need to tell 
-  //   this._myStevedore about the change.
-  this._notifyObservers();
-};
-
-
-/**
- * Given an attribute, removes that attribute from the item's list
- * of attributes that have values assigned.
- *
- * @scope    public instance method
- * @param    inAttribute    The attribute to clear, or the UUID of the attribute. 
- * @return   Returns true if there was an existing attribute value to clear.
- */
-Item.prototype.clear = function (inAttribute) {
-  Util.assert(Util.isHashTable(this._myHashTableOfAssignmentsKeyedByAttributeUuid));
-
-  var valueWasDeleted = false;
-  var attributeUuid = this._myStevedore.getAttributeUuidFromAttributeOrUuid(inAttribute);
-  var currentValueList = this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid];
-  if (currentValueList && (currentValueList.length > 0)) {
-    this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid] = null;
-    valueWasDeleted = true;
-    this._myStevedore.markDirty(this);
-  }
-  
-  // PENDING: 
-  //   We also need to create a change object, and we need to tell 
-  //   this._myStevedore about the change.
-  this._notifyObservers();
-  
-  return valueWasDeleted;
-};
-
-
-// -------------------------------------------------------------------
-// Non-Attribute Accessor Methods
-// -------------------------------------------------------------------
-
-/**
- * Returns the UUID of the item.
- *
- * @scope    public instance method
- * @return   The UUID of the item.
- */
-Item.prototype.getUuid = function () {
-  return this._myUuid;
-};
-
-
-/**
- * Returns a list of the UUIDs for all the attributes that this item
- * has values assigned to.
- *
- * @scope    public instance method
- * @return   A list of UUIDs of attribute items.
- */
-Item.prototype.getListOfAttributeUuids = function () {
-  var listOfAttributeUuids = [];
-  for (var attributeUuid in this._myHashTableOfAssignmentsKeyedByAttributeUuid) {
-    listOfAttributeUuids.push(attributeUuid);
-  }
-  return listOfAttributeUuids;
-};
-
-
-/**
- * Given a category, returns "true" if the item has been assigned to 
- * that category.
- *
- * Also returns true if the item has been assigned to some category which is in
- * turn assigned to the given category, and so on, up the chain of category 
- * assignments.
- *
- * @scope    public instance method
- * @return   A boolean.  True if the item has been assigned to the category.
- */
-Item.prototype.isInCategory = function (inCategory) {
-  Util.assert(inCategory instanceof Item);
-
-  var valueList = this.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY);
-  var key;
-  var value;
-  
-  // look at all the categories this item is assigned to, and see if one of them is "inCategory"
-  for (key in valueList) {
-    value = valueList[key];
-    if (value == inCategory) {
-      return true;
-    }
-  }
-  
-  // look at all the categories this item is assigned to, and see if one of them
-  // is in turn in the categoery "inCategory"
-  for (key in valueList) {
-    value = valueList[key];
-    // PENDING: 
-    //   This will go into an infinite loop if there is ever a cycle in the category 
-    //   assignments, like: A is in category B, and B is in C, and C is in A.
-    //   We need to use a non-recursive search of the graph.
-    // PENDING:
-    //   Do we also need to register as an observer of something, so that if we later
-    //   become a member of that category in question, then we can notify whoever
-    //   is observing us?
-    if ((value != this) && (value.isInCategory(inCategory))) {
-      return true;
-    }
-  }
-  return false;
-};
- 
-
-// -------------------------------------------------------------------
-// Observer/Observable Methods
-// -------------------------------------------------------------------
-
-/**
- * Given an object, registers the object as an observer of this item, so that
- * the object will be notified when the item changes.
- *
- * @scope    public instance method
- * @param    inObserver    An object to be registered as an observer of the item. 
- */
-Item.prototype.addObserver = function (inObserver) {
-  Util.addObjectToSet(inObserver, this._myListOfObservers);
-};
-
-
-/**
- * Given an object, removes that object from the set of observers of this item, so 
- * that the object will no longer be notified when the item changes.
- *
- * @scope    public instance method
- * @param    inObserver    The object to be removed from the set of observers. 
- */
-Item.prototype.removeObserver = function (inObserver) {
-  Util.removeObjectFromSet(inObserver, this._myListOfObservers);
-};
-
-
-// -------------------------------------------------------------------
-// Private Methods
-// -------------------------------------------------------------------
-
-/**
- * Set the value of an attribute when the item is first being loaded
- * by the Stevedore.
- *
- * @scope    private instance method
- * @param    inAttribute    The attribute to assign the value to, or the UUID of the attribute. 
- * @param    inValue    The value to be assigned. 
- * @return   Returns true if the value was assigned.
- */
-Item.prototype._initializeAttributeValue = function (inAttribute, inValue) {
-  Util.assert(Util.isHashTable(this._myHashTableOfAssignmentsKeyedByAttributeUuid));
-
-  var attributeUuid = this._myStevedore.getAttributeUuidFromAttributeOrUuid(inAttribute);
-  if (!this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid]) {
-    this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid] = [];
-  }
-  // var 
-  var valueList = this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid];
-  var valueWasAddedFlag = Util.addObjectToSet(inValue, valueList);
-  return valueWasAddedFlag;
-};
-
-
-/**
- * Returns some display name for the item, drawing on both the "name" and
- * "short name" attributes.
- *
- * @scope    private instance method
- * @return   A string with a display name for the item.
- */
-Item.prototype._getStringUsingNameAttributes = function (inPrimaryAttributeUuid, inSecondaryAttributeUuid, inDefaultString) {
-  var returnString = null;
-  var nameList = this.getValueListFromAttribute(inPrimaryAttributeUuid);
-  if (nameList) {
-    returnString = nameList[0];
-  }
-  if (!returnString && inSecondaryAttributeUuid) {
-    nameList = this.getValueListFromAttribute(inSecondaryAttributeUuid);
-    if (nameList) {
-      returnString = nameList[0];
-    }
-  }
-  if (!returnString) {
-    returnString = inDefaultString;
-  }
-  if (!returnString) {
-    returnString = "";
-  }
-  return returnString;
-};
-  
-
-/**
- * Sends messages to all the registered observers to let them know that
- * this item has changed.
- *
- * @scope    private instance method
- */
-Item.prototype._notifyObservers = function () {
-  for (var key in this._myListOfObservers) {
-    var observer = this._myListOfObservers[key];
-    observer.observedItemHasChanged(this);
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/item_view.js
===================================================================
--- trunk/source/item_view.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/item_view.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,129 +0,0 @@
-/*****************************************************************************
- item_view.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   util.js
-//   root_view.js
-//   detail_layout.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// ItemView public class constants
-// -------------------------------------------------------------------
-ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX = "detail_layout_div_for_item_";
-
-
-/**
- * The RootView uses an instance of a ItemView to display an Item in the
- * browser window.
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inRootView    The RootView that this ItemView is nested in. 
- * @param    inDivElement    The HTMLDivElement to display the HTML in. 
- * @param    inItem    The item to be displayed by this view. 
- */
-ItemView.prototype = new View();  // makes ItemView be a subclass of View
-function ItemView(inRootView, inDivElement, inItem) {
-  Util.assert(inItem instanceof Item);
-  Util.assert(inDivElement instanceof HTMLDivElement);
-  Util.assert(inRootView instanceof RootView);
-
-  // instance properties
-  this.setSuperview(inRootView);
-  this.setDivElement(inDivElement);
-  this.myItem = inItem;
-  // this.myDivElement = inDivElement;
-  // this.myRootView = inRootView;
-  this.myLayout = null;
-}
-
-
-/**
- * Returns a list with a single content item in it.
- *
- * @scope    public instance method
- * @return   A list with one item in it.
- */
-ItemView.prototype.getListOfContentItems = function () {
-  var listOfContentItems = [];
-  listOfContentItems.push(this.myItem);
-  return listOfContentItems;
-};
-
-
-/**
- * Returns a string that gives the name of the page.
- *
- * @scope    public instance method
- * @return   A string that gives the name of the page.
- */
-ItemView.prototype.getPageTitle = function () {
-  return this.myItem.getShortName();
-};
-
-
-/**
- * Re-creates all the HTML for the ItemView, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-ItemView.prototype.refresh = function () {
-  Util.assert(this.myItem instanceof Item);
-  // Util.assert(this.myDivElement instanceof HTMLDivElement);
-  // RootView.displayTextInDebugTextarea("ItemView.prototype.refresh"); 
-  var listOfStrings = [];
-
-  // add an <h1> heading with the name of the page
-  listOfStrings.push("<h1 id=\"" + RootView.URL_ITEM_PREFIX + this.myItem.getUuid() + "\">" + this.myItem.getDisplayName() + "</h1>");
-
-  // add a <div> element for the detail layout
-  var detailDivId = ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX + this.myItem.getUuid();
-  listOfStrings.push("<div id=\"" + detailDivId + "\"></div>");
-
-  // write out all the new content 
-  var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
-
-  // let the detailLayout add its own content
-  var detailLayoutDivElement = document.getElementById(detailDivId);
-  this.myLayout = new DetailLayout(this, detailLayoutDivElement);
-  this.myLayout.refresh();
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/outline_layout.js
===================================================================
--- trunk/source/outline_layout.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/outline_layout.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,107 +0,0 @@
-/*****************************************************************************
- outline_layout.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   section_view.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
-// -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_OUTLINE] = OutlineLayout;
-
-
-/**
- * An OutlineLayout displays a set of content items for a SectionView. 
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inSectionView    The SectionView that serves as the superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
- * @syntax   var outline = new OutlineLayout()
- */
-OutlineLayout.prototype = new View();  // makes OutlineLayout be a subclass of View
-function OutlineLayout(inSectionView, inDivElement) {
-  this.setSuperview(inSectionView);
-  this.setDivElement(inDivElement);
-}
-
-
-/**
- * Returns the registered name of this type of layout.
- *
- * @scope    public instance method
- * @return   A string.
- */
-OutlineLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_OUTLINE;
-};
-
-  
-/**
- * Re-creates all the HTML for the OutlineLayout, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-OutlineLayout.prototype.refresh = function () {
-  var listOfContentItems = this.getSuperview().getListOfContentItems();
-  var outlineDiv = this.getDivElement();
-  var ulElement = View.createAndAppendElement(outlineDiv, "ul");
-  for (var contentItemKey in listOfContentItems) {
-    var contentItem = listOfContentItems[contentItemKey];
-    var liElement = View.createAndAppendElement(ulElement, "li");
-    View.createAndAppendTextNode(liElement, contentItem.getDisplayName("{no name}") + " ");
-    var anchorElement = View.createAndAppendElement(liElement, "a", SectionView.ELEMENT_CLASS_MORE_LINK);
-    anchorElement.setAttribute("href", RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuid());
-    // View.createAndAppendTextNode(anchorElement, "(more &#8658;)");
-    anchorElement.innerHTML = "(more &#8658;)";
-    Util.addEventListener(anchorElement, "click", RootView.clickOnLocalLink);
-  }
-};
-
-
-/**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-OutlineLayout.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/page_view.js
===================================================================
--- trunk/source/page_view.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/page_view.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,145 +0,0 @@
-/*****************************************************************************
- page_view.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   util.js
-//   section_view.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// PageView public class constants
-// -------------------------------------------------------------------
-PageView.ELEMENT_ID_SECTION_DIV_PREFIX = "section_view_";
-PageView.ELEMENT_ID_SECTION_DIV_MIDFIX = "_in_page_";
-PageView.ELEMENT_ID_SUMMARY_VIEW_DIV_PREFIX = "_summary_view_for_page_";
-
-PageView.ELEMENT_CLASS_EDIT_MODE = "editmode";
-PageView.ELEMENT_CLASS_VIEW_MODE = "viewmode";
-
-
-/**
- * The RootView uses an instance of a PageView to display a Page in the
- * browser window.
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inRootView    The RootView that this PageView is nested in. 
- * @param    inDivElement    The HTMLDivElement to display the HTML in. 
- * @param    inPage    The page item to be displayed by this view. 
- */
-PageView.prototype = new View();  // makes PageView be a subclass of View
-function PageView(inRootView, inDivElement, inPage) {
-  Util.assert(inRootView instanceof RootView);
-  Util.assert(inDivElement instanceof HTMLDivElement);
-  Util.assert(inPage instanceof Item);
-
-  // instance properties
-  this.setSuperview(inRootView);
-  this.setDivElement(inDivElement);
-  this.myPage = inPage;
-  this._myHasEverBeenDisplayedFlag = false;
-  
-  this._myPageSummaryView = null;
-  this.myListOfSectionViews = [];
-}
-
-
-/**
- * Returns a string that gives the name of the page.
- *
- * @scope    public instance method
- * @return   A string that gives the name of the page.
- */
-PageView.prototype.getPageTitle = function () {
-  return this.myPage.getShortName();
-};
-
-  
-/**
- * Updates the HTML elements in this view to reflect any changes in 
- * the data, and tells the sub-views to refresh themselves too.
- *
- * @scope    public instance method
- */
-PageView.prototype.refresh = function () {
-  if (!this._myHasEverBeenDisplayedFlag) {
-    this.doInitialDisplay();
-  } else {
-    this.getDivElement().className = (this.isInEditMode()) ? PageView.ELEMENT_CLASS_EDIT_MODE : PageView.ELEMENT_CLASS_VIEW_MODE;
-    this._myPageSummaryView.refresh();
-    for (var key in this.myListOfSectionViews) {
-      var sectionView = this.myListOfSectionViews[key];      
-      sectionView.refresh();
-    }
-  }
-};
-
-
-/**
- * Re-creates all the HTML for the PageView, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-PageView.prototype.doInitialDisplay = function () {
-  Util.assert(this.getDivElement() instanceof HTMLDivElement);
-  
-  var pageDivElement = this.getDivElement();
-  pageDivElement.className = (this.isInEditMode()) ? PageView.ELEMENT_CLASS_EDIT_MODE : PageView.ELEMENT_CLASS_VIEW_MODE;
-  
-  var headerElement = View.createAndAppendElement(pageDivElement, "h1");
-  headerElement.innerHTML = this.myPage.getDisplayName();
-
-  var summaryViewDiv = View.createAndAppendElement(pageDivElement, "div");
-  this._myPageSummaryView = new MultiLineTextView(this, summaryViewDiv, this.myPage, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
-
-  // add <div> elements for each of the sections on the page
-  // and create a new SectionView for each section
-  var listOfSections = this.myPage.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_SECTION);
-  var sectionNumber = 0;
-  for (var key in listOfSections) {
-    var section = listOfSections[key];
-    var sectionViewDiv = View.createAndAppendElement(pageDivElement, "div");
-    var sectionView = new SectionView(this, sectionViewDiv, section, sectionNumber);
-    sectionNumber += 1;
-    this.myListOfSectionViews.push(sectionView);
-  }
-  this._myHasEverBeenDisplayedFlag = true;
-  this.refresh();
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/rectangle.js
===================================================================
--- trunk/source/rectangle.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/rectangle.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,173 +0,0 @@
-// -------------------------------------------------------------------
-// Brian's 2005 JavaScript Coding Conventions
-//
-// + jslint approved
-//    + jslint returns "ok" when it looks at the code (with strictest settings)
-//    + do not use "with"
-//    + do not use "new Function"
-//    + do not use ++ and --
-// 
-// + naming conventions
-//    + capitalization
-//       + classes are initial caps (CamelCaps): "Rectangle", "FillPattern"
-//       + all variable names and methods names are mixedCaps: "fillPattern"
-//       + acronyms appear in initial caps: "myHtmlString", not "myHTMLString"
-//       + file names are the all lower case version of the class name, with underscores: "rectangle", "fill_pattern"
-//       + directories should be all lower case, with underscores: "basic_shapes"
-//       + constants are all caps, with underscores: FILL_PATTERN_SOLID
-//    + variable scoping prefixes
-//       + class variables are prefixed with "our"
-//       + instance variables are prefixed with "my"
-//       + global variables are prefixed with "window.global"
-//       + locally scoped variables are not prefixed
-//       + function input parameters are prefixed with "in"
-//       + private variables are prefixed with "_"
-//    + class constants are prefixed with the type of the constant -- see LAYOUT_PORTRAIT
-//    + array variables are prefixed with "ListOf" or "HashTableOf" or "ArrayOf"
-//       + var myListOfBooks = []; <-- a "List" has only values, no keys ["Apple", "Orange", "Banana"]
-//       + var myHashTableOfBooksKeyedByTitle = {}; <-- a "HashTable" is an associative array with key-value pairs
-//       + var myArrayOfBooks = new Array(); <-- an "Array" has values that are indexed by number array[23] = "Apple"
-//    + accessor methods are prefixed with "get" or "is" -- e.g. oval.getArea(), oval.isCircle()
-//       + any method that returns a value and does not change an object's state should be a "get" or "is" method
-//       + any method that does change an object's state should be a "set" method
-//    + problems are marked with PENDING
-//
-// + compatiblity with other browsers and other JavaScript libraries 
-//    + use "get" and "set" accessors -- do *not* assign Mozilla "getter" and "setter" methods
-//    + add methods in your own namespace -- do *not* extend built-in objects: String.prototype.toEsperanto = function ...
-//
-// + indenting, tabs, and line ending characters
-//    + 2-space indenting
-//    + only spaces, no tabs
-//    + Unix style line endings: just \n -- not \r or \r\n
-//
-// + file header and footer conventions
-//    + file name is given
-//    + copyright and license statements are included
-//    + file dependencies are listed
-//    + sections for: class constants, class properties, constructor, instance methods
-//    + "End of file" ending
-//
-// + scoping
-//    + locally scoped variables are declared before being used: "var foo", not "foo
-//    + global variables are not used, except for class names
-//    + instance methods are defined on the prototype -- see getArea()
-//    + accessor methods never have side-effects
-//
-// + PENDING
-//    + private instance properties?
-//    + private instance methods?
-//    + class methods?
-// -------------------------------------------------------------------
-
-
-
-
-/*****************************************************************************
- rectangle.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   line.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Rectangle public class constants
-// -------------------------------------------------------------------
-Rectangle.LAYOUT_PORTRAIT = "Portrait";
-Rectangle.LAYOUT_LANDSCAPE = "Landscape";
-
-Rectangle.FILL_SOLID = "Solid";
-Rectangle.FILL_EMPTY = "Empty";
-
-
-// -------------------------------------------------------------------
-// Rectangle class properties
-// -------------------------------------------------------------------
-Rectangle.ourHashTableOfColorsKeyedBySize = new Array();
-
-
-/**
- * Each Rectangle instances represents a single rectangle.
- *
- * @scope    public instance constructor
- * @syntax   var rect = new Rectangle()
- */
-function Rectangle() {
-  // instance properties
-  this.myWidth = null;
-  this.myHeight = null;
-}
-
-
-// -------------------------------------------------------------------
-// Public class methods
-// -------------------------------------------------------------------
-
-/**
- * Given two Rectangle object, returns new Rectangle large enough
- * to encompass both of the given Rectangles.
- *
- * @scope    public class method
- * @param    inRectOne    A Rectangle object. 
- * @param    inRectTwo    A Rectangle object. 
- * @return   A newly created Rectangle object.
- */
-Rectangle.union = function (inRectOne, inRectTwo) {
-  Util.assert(inRectOne instanceof Rectangle);
-  Util.assert(inRectTwo instanceof Rectangle);
-
-  var newRectangle = new Rectangle();
-  newRectangle.myWidth = Math.max(inRectOne.myWidth, inRectTwo.myWidth);
-  newRectangle.myHeight = Math.max(inRectOne.myHeight, inRectTwo.myHeight);
-  return newRectangle;
-};
-
-
-// -------------------------------------------------------------------
-// Public instance methods
-// -------------------------------------------------------------------
-
-/**
- * Returns the area of the rectangle.
- *
- * @scope    public instance method
- * @return   A number.
- */
-Rectangle.prototype.getArea = function () {
-  var area = this.myWidth * this.myHeight;
-  return area;
-};
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/root_view.js
===================================================================
--- trunk/source/root_view.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/root_view.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,454 +0,0 @@
-/*****************************************************************************
- root_view.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   page_view.js
-//   repository.js
-//   util.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// RootView public class constants
-// -------------------------------------------------------------------
-RootView.ELEMENT_CLASS_PAGE_EDIT_BUTTON = "page_edit_button";
-
-RootView.ELEMENT_ID_EDIT_BUTTON = "edit_button";
-RootView.ELEMENT_ID_DEBUG_TEXTAREA = "debug_textarea";
-
-RootView.URL_PAGE_PREFIX = "page";
-RootView.URL_ITEM_PREFIX = "item";
-RootView.URL_HASH_PAGE_PREFIX = "#" + RootView.URL_PAGE_PREFIX;
-RootView.URL_HASH_ITEM_PREFIX = "#" + RootView.URL_ITEM_PREFIX;
-
-
-// -------------------------------------------------------------------
-// RootView class properties
-// -------------------------------------------------------------------
-RootView.ourSingleInstance = null;
-
-
-/**
- * The OpenRecord app uses a single instance of RootView, which serves as the
- * outer-most view in the browser, and contains the current PageView as well
- * as some standard chrome (like the Edit button).
- *
- * @scope    public instance constructor
- * @syntax   var rootView = new RootView()
- */
-function RootView(inStevedore) {
-  RootView.ourSingleInstance = this;
-   
-  Util.assert(inStevedore instanceof Stevedore);
-
-  // instance properties
-  this._myStevedore = inStevedore;
-  this.myEditButtonId = RootView.ELEMENT_ID_EDIT_BUTTON;
-  this.myEditMode = false;
-  this.myNumberOfCallsToDebug = 0;
-  this.myDebugTextarea = null;
-  
-  this._myHashTableOfItemViewsKeyedByUuid = {};
-  this._myHashTableOfPageViewsKeyedByUuid = {};
-  this._myCurrentContentView = null;
-  
-  this.myHashTableOfPagesKeyedByUuid = {};
-  var categoryPage = this._myStevedore.getItemFromUuid(Stevedore.UUID_FOR_CATEGORY_PAGE);
-  var listOfPages = this._myStevedore.getListOfItemsInCategory(categoryPage);
-  for (var key in listOfPages) {
-    var page = listOfPages[key];
-    this.myHashTableOfPagesKeyedByUuid[page.getUuid()] = page; 
-  }
-
-  window.document.body.innerHTML = "";
-  var rootDiv = View.createAndAppendElement(window.document.body, "div");
- 
-  for (var uuid in this.myHashTableOfPagesKeyedByUuid) {
-    var aPage = this.myHashTableOfPagesKeyedByUuid[uuid];
-    var anchor = View.createAndAppendElement(rootDiv, "a");
-    anchor.setAttribute("name", RootView.URL_PAGE_PREFIX + aPage.getUuid());
-  }
-  
-  var headerP = View.createAndAppendElement(rootDiv, "p", "header");
-  var logoSpan = View.createAndAppendElement(headerP, "span", "logo");
-  logoSpan.innerHTML = '<a href="http://openrecord.org"><span class="logostart">open</span><span class="logomiddle">record</span><span class="logoend">.org</span></a>';
-  var mainControlSpan = View.createAndAppendElement(headerP, "span", null, "main_control_span");
-  View.createAndAppendElement(headerP, "br");
-  var navbarDiv = View.createAndAppendElement(rootDiv, "div", "navbar");
-  var contentAreaDiv = View.createAndAppendElement(rootDiv, "div", "content_area");
-  var contentViewDiv = View.createAndAppendElement(contentAreaDiv, "div");
-  var debugDiv = View.createAndAppendElement(rootDiv, "div", "debug");
-
-  var footerP = View.createAndAppendElement(rootDiv, "p", "footer");
-  var copyrightSpan = View.createAndAppendElement(footerP, "span", "copyright");
-  copyrightSpan.innerHTML = 'You can copy freely from this site &mdash; ' +
-    'copyright rights relinquished under the Creative Commons ' +
-    '<a rel="license external" href="http://creativecommons.org/licenses/publicdomain/">Public Domain Dedication</a>.';
-
-  var statusBlurbSpan = View.createAndAppendElement(footerP, "span", "fileformat");
-  View.createAndAppendElement(footerP, "br");
-  
-  this.myMainControlSpanElement = mainControlSpan;
-  this.myNavbarDivElement = navbarDiv;
-  this._myContentViewDivElement = contentViewDiv;
-  this.myDebugDivElement = debugDiv;
-  this.myStatusBlurbSpanElement = statusBlurbSpan;
-  
-  Util.setErrorReportCallback(RootView.displayTextInDebugTextarea);
-  this.setCurrentContentViewFromUrl();
-}
-
-
-// -------------------------------------------------------------------
-// Public instance methods
-// -------------------------------------------------------------------
-
-/**
- * Returns the Stevedore instance that this RootView is using.
- *
- * @scope    public instance method
- * @return   A Stevedore object. 
- */
-RootView.prototype.getStevedore = function () {
-  return this._myStevedore;
-};
-
-
-/**
- * Returns true if we are in Edit Mode.
- *
- * @scope    public instance method
- * @return   A boolean value. True if we are in Edit Mode.
- */
-RootView.prototype.isInEditMode = function () {
-  return this.myEditMode;
-};
-
-  
-/**
- * Gets the browser URL from window.location, finds or creates a corresponding
- * PageView or ItemView, and sets the current content view to the newly selected
- * PageView or ItemView.
- *
- * @scope    public instance method
- */
-RootView.prototype.setCurrentContentViewFromUrl = function () {
-  var contentViewToSwitchTo = null;
-  
-  if (window.location) {
-    if (window.location.hash) {
-      var originalHash = window.location.hash;
-      var uuidText = null;
-      var uuidNumber = null;
-      var pageFromUuid = null;
-      var itemFromUuid = null;
-      var divElement = null;
-      var isUrlForPage = (originalHash.indexOf(RootView.URL_HASH_PAGE_PREFIX) != -1);
-      var isUrlForItem = (originalHash.indexOf(RootView.URL_HASH_ITEM_PREFIX) != -1);
-      if (isUrlForItem) {
-        uuidText = originalHash.replace(RootView.URL_HASH_ITEM_PREFIX, "");
-        uuidNumber = parseInt(uuidText);
-        contentViewToSwitchTo = this._myHashTableOfItemViewsKeyedByUuid[uuidNumber];
-        if (!contentViewToSwitchTo) {
-          itemFromUuid = this._myStevedore.getItemFromUuid(uuidNumber);
-          if (itemFromUuid) {
-            divElement = window.document.createElement("div"); 
-            this._myContentViewDivElement.appendChild(divElement);
-            contentViewToSwitchTo = new ItemView(this, divElement, itemFromUuid);
-            this._myHashTableOfItemViewsKeyedByUuid[uuidNumber] = contentViewToSwitchTo;
-          }
-        }
-      } else {
-        if (isUrlForPage) {
-          uuidText = originalHash.replace(RootView.URL_HASH_PAGE_PREFIX, "");
-          uuidNumber = parseInt(uuidText);
-          contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[uuidNumber];
-          if (!contentViewToSwitchTo) {
-            pageFromUuid = this.myHashTableOfPagesKeyedByUuid[uuidNumber];
-            if (pageFromUuid) {
-              divElement = window.document.createElement("div"); 
-              this._myContentViewDivElement.appendChild(divElement);
-              contentViewToSwitchTo = new PageView(this, divElement, pageFromUuid);
-              this._myHashTableOfPageViewsKeyedByUuid[uuidNumber] = contentViewToSwitchTo;
-            }
-          }
-        } 
-      }
-    } 
-  }
-  
-  if (!contentViewToSwitchTo) {
-    var page = this._myStevedore.getHomePage();
-    contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[page.getUuid()];
-    if (!contentViewToSwitchTo) {
-      divElement = window.document.createElement("div"); 
-      this._myContentViewDivElement.appendChild(divElement);
-      contentViewToSwitchTo = new PageView(this, divElement, page);
-      this._myHashTableOfPageViewsKeyedByUuid[page.getUuid()] = contentViewToSwitchTo;
-    }
-  }
-  if (this._myCurrentContentView) {
-    this._myCurrentContentView.includeOnScreen(false);
-  }
-  this._myCurrentContentView = contentViewToSwitchTo;
-  this.display();
-};
-
-  
-/**
- * Re-creates all the HTML for the RootView, including the chrome and 
- * the current PageView, and hands the HTML to the browser to be re-drawn.
- *
- * @scope    public instance method
- */
-RootView.prototype.display = function () {
-  Util.assert(this._myCurrentContentView instanceof Object);
-
-  document.title = this._myCurrentContentView.getPageTitle() + " - openagenda.org";
-  this.displayControlSpan();
-  this.displayNavbar();
-  this.displayDebugArea();
-  this._myCurrentContentView.includeOnScreen(true);
-  window.focus();
-};
-
-
-/**
- * Re-creates the HTML for the chrome area containing the controls,
- * and hands the HTML to the browser to be re-drawn.
- *
- * @scope    public instance method
- */
-RootView.prototype.displayControlSpan = function () {
-  Util.assert(this.myMainControlSpanElement instanceof HTMLSpanElement);
-
-  var listOfStrings = [];
-  
-  var buttonValue = (this.myEditMode) ? "Save" : "Edit";
-  listOfStrings.push("<input type=\"button\" class=\"" + RootView.ELEMENT_CLASS_PAGE_EDIT_BUTTON + "\" id=\"" + this.myEditButtonId + "\" name=\"layout\" value=\"" + buttonValue + "\"></input>");
-
-  // write out the new control span content 
-  var finalString = listOfStrings.join("");
-  this.myMainControlSpanElement.innerHTML = finalString;
-
-  // add event handlers for the newly created control span UI elements
-  var editButton = document.getElementById(this.myEditButtonId);
-  var listener = this;
-  Util.addEventListener(editButton, "click",
-    function(event) { listener.clickOnEditButton(event);});
-};
-
-
-/**
- * Re-creates the HTML for the Navbar, and hands the HTML to the browser 
- * to be re-drawn.
- *
- * @scope    public instance method
- */
-RootView.prototype.displayNavbar = function () {
-  Util.assert(this.myNavbarDivElement instanceof HTMLDivElement);
-
-  var listOfStrings = [];
-
-  listOfStrings.push("<ul class=\"menu\">");
-  
-  for (var uuid in this.myHashTableOfPagesKeyedByUuid) {
-    var page = this.myHashTableOfPagesKeyedByUuid[uuid];
-    var menuText = page.getShortName();
-    var menuUrl = RootView.URL_HASH_PAGE_PREFIX + page.getUuid();
-    listOfStrings.push("<li class=\"menu_item\"><a href=\"" + menuUrl + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
-  }
-
-  listOfStrings.push("</ul>");
-  // listOfStrings.push("<p><a href=\"http://www.opensource.org/\"><img src=\"osi-certified-60x50.png\" width=\"60\" height=\"50\" alt=\"OSI logo\"></img></a></p>");
-  
-  // write out the new control span content 
-  var finalString = listOfStrings.join("");
-  this.myNavbarDivElement.innerHTML = finalString;
-};
-
-
-/**
- * Re-creates the HTML for the Debug area, and hands the HTML to the browser 
- * to be re-drawn.
- *
- * @scope    public instance method
- */
-RootView.prototype.displayDebugArea = function () {
-  Util.assert(this.myDebugDivElement instanceof HTMLDivElement);
-
-  var listOfStrings = [];
-  listOfStrings.push("<textarea readonly id=\"" + RootView.ELEMENT_ID_DEBUG_TEXTAREA + "\" rows=\"20\" cols=\"100\" wrap=\"virtual\"></textarea>");
-  var finalString = listOfStrings.join("");
-  this.myDebugDivElement.innerHTML = finalString;
-  this.myDebugTextarea = document.getElementById(RootView.ELEMENT_ID_DEBUG_TEXTAREA);
-}
-
-
-// -------------------------------------------------------------------
-// Debug error display methods
-// -------------------------------------------------------------------
-
-/**
- * Displays a text string in the status blurb span.
- *
- * @scope    public class method
- * @param    inText    A text string to be displayed. 
- */
-RootView.displayStatusBlurb = function (inText) {
-  RootView.ourSingleInstance.displayStatusBlurb(inText);
-};
-
-
-/**
- * Displays a text string in the status blurb span.
- *
- * @scope    public instance method
- * @param    inText    A text string to be displayed. 
- */
-RootView.prototype.displayStatusBlurb = function (inText) {
-  this.myStatusBlurbSpanElement.innerHTML = inText;
-};
-
-
-/**
- * Displays a text string in the debug textarea.
- *
- * @scope    public class method
- * @param    inText    A text string to be displayed. 
- */
-RootView.displayTextInDebugTextarea = function (inText) {
-  RootView.ourSingleInstance.displayTextInDebugTextarea(inText);
-};
-
-
-/**
- * Displays a text string in the debug textarea.
- *
- * @scope    public instance method
- * @param    inText    A text string to be displayed. 
- */
-RootView.prototype.displayTextInDebugTextarea = function (inText) {
-  this.myNumberOfCallsToDebug++;
-  if (this.myNumberOfCallsToDebug > 20) {
-    return;
-  }
-  this.myDebugTextarea.value += inText + "\n\n============================\n\n";
-  this.myDebugTextarea.style.visibility = "visible";
-  this.myDebugTextarea.style.display = "block";
-  this.myDebugTextarea.scrollIntoView();
-};
-
-
-/**
- * Given a JavaScript object, gets all the values of all the object's properties,
- * and displays them in the debug textarea.
- *
- * @scope    public instance method
- * @param    inObject    Any sort of object. 
- */
-RootView.prototype.displayObjectInDebugTextarea = function (inObject) {
-  var outputText = "";
-  for (var property in inObject) {
-    outputText += property + " == " + inObject[property] + "\n";
-  }
-  this.displayTextInDebugTextarea(outputText);
-}
-
-
-// -------------------------------------------------------------------
-// Event handler methods
-// -------------------------------------------------------------------
-
-/**
- * Called when the user clicks on a menu item in the navbar, or on any other 
- * auto-generated link that points to other Blue-sky content.
- * 
- * Called from an HTML "li" element or an HTML "a" element on a generated page.
- * There is no need to call this method directly.
- *
- * @scope    public class method
- * @param    inEventObject    An event object. 
- */
-RootView.clickOnLocalLink = function (inEventObject) {
-  var eventObject = inEventObject || window.event;
-  
-  var startTiming = new Date();
-  
-  // "wait", "auto", "default", "crosshair", "help"
-  // "n-resize", "s-resize", "e-resize", "w-resize"
-  // "ne-resize", "se-resize", "nw-resize", "sw-resize"
-  // window.document.body.style.cursor = "wait";
-
-  var htmlAnchorElement = Util.getTargetFromEvent(eventObject);
-  
-  window.location = htmlAnchorElement.href;
-  RootView.ourSingleInstance.setCurrentContentViewFromUrl();
-
-  // window.document.body.style.cursor = "default";
-  
-  var stopTiming = new Date();
-  var delayInMilliseconds = stopTiming.getTime() - startTiming.getTime();
-  RootView.ourSingleInstance.displayStatusBlurb("Page load: " + delayInMilliseconds + " milliseconds");
-};
-
-  
-/**
- * Called when the user clicks on the big "Edit" button.
- * 
- * Called from an HTML "input type='button'" element on the generated page.  
- * There is no need to call this method directly.
- *
- * @scope    public instance method
- * @param    inEventObject    An event object. 
- */
-RootView.prototype.clickOnEditButton = function (inEventObject) {
-  var stevedore = this.getStevedore();
-  if (this.myEditMode) {
-    stevedore.endTransaction();
-    window.document.body.style.cursor = "auto";
-  } else {
-    stevedore.beginTransaction();
-    window.document.body.style.cursor = "crosshair";
-  }
-  this.myEditMode = !this.myEditMode;
-  this.display();
-  // this.displayTextInDebugTextarea(this.myEditMode);
-  if (!this.myEditMode && window.location && (window.location.protocol == "file:")) {
-    RootView.displayTextInDebugTextarea(stevedore._getJsonStringRepresentingAllItems());
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/section_view.js
===================================================================
--- trunk/source/section_view.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/section_view.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,273 +0,0 @@
-/*****************************************************************************
- section_view.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   util.js
-//   page_view.js
-//   table_layout.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// SectionView public class constants
-// -------------------------------------------------------------------
-SectionView.LAYOUT_TABLE = "Table";
-SectionView.LAYOUT_OUTLINE = "Outline";
-SectionView.LAYOUT_DETAIL = "Detail";
-SectionView.LAYOUT_BAR_CHART = "Bar Chart";
-
-SectionView.ELEMENT_CLASS_SECTION = "section";
-SectionView.ELEMENT_CLASS_SECTION_LAYOUT_MENU = "section_layout_menu";
-SectionView.ELEMENT_CLASS_SIMPLE_TABLE = "simple_table";
-SectionView.ELEMENT_CLASS_NEW_ITEM = "newitem";
-SectionView.ELEMENT_CLASS_PLAIN = "plain";
-SectionView.ELEMENT_CLASS_LABEL = "label";
-SectionView.ELEMENT_CLASS_TITLE = "title";
-SectionView.ELEMENT_CLASS_TEXT_FIELD_IN_TABLE_CELL = "text_field_in_table_cell";
-SectionView.ELEMENT_CLASS_SELECTED = "selected";
-SectionView.ELEMENT_CLASS_MORE_LINK = "more";
-SectionView.ELEMENT_CLASS_TEXT_VIEW = "text_view";
-
-SectionView.ELEMENT_ID_SELECT_MENU_PREFIX = "select_menu_";
-SectionView.ELEMENT_ID_SELECT_MENU_SUFFIX = "_select_menu";
-SectionView.ELEMENT_ID_LAYOUT_DIV_SUFFIX = "_layout_div";
-SectionView.ELEMENT_ID_CELL_PREFIX = "section_";
-SectionView.ELEMENT_ID_CELL_MIDFIX = "_cell_";
-SectionView.ELEMENT_ID_SUMMARY_DIV_SUFFIX = "_summary_div";
-
-SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER = "section_number";
-SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER = "cell_number";
-
-
-// -------------------------------------------------------------------
-// SectionView class properties
-// -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName = {};
-
-
-/**
- * A PageView uses instances of a SectionViews to display the Sections 
- * of a page. 
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inPageView    The PageView that serves as the superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display the HTML in. 
- * @param    inSection    The Section item to be displayed in by this view. 
- * @param    inSectionNumber    The number of the section on the page (1, 2, 3, 4...). 
- * @syntax   var sectionView = new SectionView()
- */
-SectionView.prototype = new View();  // makes SectionView be a subclass of View
-function SectionView(inPageView, inDivElement, inSection, inSectionNumber) {
-  Util.assert(inPageView instanceof PageView);
-  Util.assert(inSection instanceof Item);
-  
-  // instance properties
-  // PENDING: these should all be private
-  this.setSuperview(inPageView);
-  this.setDivElement(inDivElement);
-  this.mySection = inSection;
-  this.mySectionNumber = inSectionNumber;
-  var query = inSection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
-  this.myListOfContentItems = this.getStevedore().getListOfResultItemsForQuery(query); 
-
-  this._myLayout = null;
-  this._myLayoutDiv = null;
-  this._myHasEverBeenDisplayedFlag = false;
-  this._mySectionSummaryView = null;
-}
-
-
-// -------------------------------------------------------------------
-// Public class methods
-// -------------------------------------------------------------------
-
-/**
- * Given a string or an item, returns a string.
- *
- * @scope    public class method
- * @param    inValue    A string or an Item. 
- * @return   A string.
- */
-SectionView.getStringForValue = function (inValue) {
-  var string = "";
-  if (Util.isString(inValue)) {
-    string = inValue;
-  }
-  if (inValue instanceof Item) {
-    string = inValue.getDisplayName();
-  }
-  return string;
-};
-
-
-// -------------------------------------------------------------------
-// Public instance methods
-// -------------------------------------------------------------------
-
-/**
- * Given the name of a layout ("Table", "Outline", etc.), returns a newly
- * created layout object of that type, initialized to be the layout for this 
- * SectionView.
- *
- * @scope    public instance method
- * @param    inLayoutName    A string. One of the registered layout names. 
- * @param    inLayoutDiv    The HTMLDivElement to display the layout in. 
- * @return   A newly created layout object, initialized to be the layout for this section.
- */
-SectionView.prototype.getLayoutFromLayoutName = function (inLayoutName, inLayoutDiv) {
-  Util.assert(Util.isString(inLayoutName));
-  
-  var newLayout = null;
-  var layoutClass = SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[inLayoutName];
-  if (layoutClass) {
-    newLayout = new layoutClass(this, inLayoutDiv);
-  }
-  return newLayout;
-};
-
-
-/**
- * Returns a list of content items to be displayed in this SectionView.
- *
- * @scope    public instance method
- * @return   A list of content items.
- */
-SectionView.prototype.getListOfContentItems = function () {
-  var query = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
-  this.myListOfContentItems = this.getStevedore().getListOfResultItemsForQuery(query); 
-  return this.myListOfContentItems;
-};
-
-
-/**
- * Updates the HTML elements in this view to reflect any changes in 
- * the data, and tells the sub-views to refresh themselves too.
- *
- * @scope    public instance method
- */
-SectionView.prototype.refresh = function () {
-  if (!this._myHasEverBeenDisplayedFlag) {
-    this.doInitialDisplay();
-  } else {
-    // refresh the <h2> element with the value: this.mySection.getDisplayName();  
-    this._mySectionSummaryView.refresh();
-    this._myLayout.refresh();
-  }
-};
-
-
-/**
- * Re-creates all the HTML for the SectionView, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-SectionView.prototype.doInitialDisplay = function () {
-  if (!this.getDivElement()) {
-    return;
-  }
-  var selectedLayoutName = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME)[0];
-  var query = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
-  this.myListOfContentItems = this.getStevedore().getListOfResultItemsForQuery(query); 
-  if (!this.myListOfContentItems) {
-    return;
-  }
-
-  var sectionDiv = this.getDivElement();
-  var outerDiv = View.createAndAppendElement(sectionDiv, "div", SectionView.ELEMENT_CLASS_SECTION);
-  var headerH2 = View.createAndAppendElement(outerDiv, "h2");
-  headerH2.innerHTML = this.mySection.getDisplayName();
-  var summaryDiv = View.createAndAppendElement(outerDiv, "div");
-  this._mySectionSummaryView = new MultiLineTextView(this, summaryDiv, this.mySection, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
-  View.createAndAppendElement(outerDiv, "p");
-
-  // create the layout editing controls, if we're in edit mode
-  var selectMenuId = SectionView.ELEMENT_ID_SELECT_MENU_PREFIX + this.mySection.getUuid();
-  var selectElement = View.createAndAppendElement(outerDiv, "select", SectionView.ELEMENT_CLASS_SECTION_LAYOUT_MENU, selectMenuId);
-  selectElement.setAttribute("name", selectMenuId);
-  selectElement.setAttribute(SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER, this.mySectionNumber);
-  for (var layoutName in SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName) {
-    var optionElement = View.createAndAppendElement(selectElement, "option");
-    optionElement.selected = (selectedLayoutName == layoutName);
-    optionElement.setAttribute("value", layoutName);
-    // Util.addEventListener(optionElement, "click", SectionView.clickOnLayoutSelectionMenu);
-    var listener = this; 
-    Util.addEventListener(optionElement, "click", function(event) {listener.clickOnLayoutSelectionMenu(event);});
-    optionElement.innerHTML = layoutName;
-  }
-
-  // create a div element for the layout class to use
-  this._myLayoutDiv = View.createAndAppendElement(outerDiv, "div");
-  this._myLayout = this.getLayoutFromLayoutName(selectedLayoutName, this._myLayoutDiv);
-  this._myHasEverBeenDisplayedFlag = true;
-  this.refresh();
-};
-  
-
-// -------------------------------------------------------------------
-// Event handler methods
-// -------------------------------------------------------------------
-
-/**
- * Called when the user clicks on any of the layout option-select controls.
- * Called from an HTML option element within an HTML select element.
- *
- * @scope    public instance method
- * @param    inEventObject    An event object. 
- */
-SectionView.prototype.clickOnLayoutSelectionMenu = function (inEventObject) {
-  var eventObject = inEventObject || window.event;
-  var optionElement = Util.getTargetFromEvent(eventObject);
-  // PENDING: We could replace the lines above with "var optionElement = this;"
-  // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
-  
-  var selectElement = optionElement.parentNode;
-  var newChoiceName = optionElement.value;
-
- 
-  if (this._myLayout.getLayoutName() == newChoiceName) {
-    return;
-  } else {
-    this._myLayout.endOfLife();
-    this._myLayout = this.getLayoutFromLayoutName(newChoiceName, this._myLayoutDiv);
-    this.mySection.clear(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME);
-    this.mySection.assign(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME, newChoiceName);
-    this.refresh();
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/stevedore.js
===================================================================
--- trunk/source/stevedore.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/stevedore.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,638 +0,0 @@
-/*****************************************************************************
- stevedore.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
- 
-// -------------------------------------------------------------------
-// Dependencies:
-//   util.js
-//   item.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Stevedore public class constants
-// -------------------------------------------------------------------
-Stevedore.UUID_FOR_ATTRIBUTE_UUID = 100;
-Stevedore.UUID_FOR_ATTRIBUTE_SHORT_NAME = 101;
-Stevedore.UUID_FOR_ATTRIBUTE_NAME = 102;
-Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY = 103;
-Stevedore.UUID_FOR_ATTRIBUTE_BODY = 104;
-Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY = 105;
-Stevedore.UUID_FOR_ATTRIBUTE_USERSTAMP = 106;
-Stevedore.UUID_FOR_ATTRIBUTE_TIMESTAMP = 107;
-Stevedore.UUID_FOR_ATTRIBUTE_SECTION = 108;
-Stevedore.UUID_FOR_ATTRIBUTE_QUERY = 109;
-Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = 110;
-Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = 111;
-Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME = 112;
-
-Stevedore.UUID_FOR_CATEGORY_BOOK = 141;      // here as an example only
-Stevedore.UUID_FOR_CATEGORY_MOVIE = 142;     // here as an example only
-Stevedore.UUID_FOR_CATEGORY_ATTRIBUTE = 143;
-Stevedore.UUID_FOR_CATEGORY_CATEGORY = 144;
-Stevedore.UUID_FOR_CATEGORY_PAGE = 145;
-Stevedore.UUID_FOR_CATEGORY_SECTION = 146;
-Stevedore.UUID_FOR_CATEGORY_QUERY = 147;
-
-Stevedore.JSON_MEMBER_FORMAT = "format";
-Stevedore.JSON_MEMBER_TIMESTAMP = "timestamp";
-Stevedore.JSON_MEMBER_DATA = "data";
-Stevedore.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
-
-Stevedore.JSON_MEMBER_TYPE = "type";
-Stevedore.JSON_MEMBER_VALUE = "value";
-Stevedore.JSON_TYPE_STRING_VALUE = "StringValue";
-Stevedore.JSON_TYPE_UUID = "Uuid";
-Stevedore.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
-Stevedore.JSON_TYPE_NUMBER_VALUE = "NumberValue";
-
-
-/**
- * Instances of the Stevedore class know how to store and retrieve items to 
- * and from a data source.
- *
- * @scope    public instance constructor
- */
-function Stevedore() {
-  this._myNextAvailableUuid = 1;
-  this._myHashTableOfItemsKeyedByUuid = {};
-  this._myCountOfNestedTransactions = 0;
-  this._myHomePageItem = null;
-  this._myXMLHttpRequestObject = this._newXMLHttpRequestObject();
-  this._myListOfDirtyItems = [];
-  // this._myDirtyFlag = false;
-  
-  this._loadBootstrapItems();
-}
-
-
-/**
- * Returns a newly created item.
- *
- * @scope    public instance method
- * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
- * @return   A newly created item.
- */
-Stevedore.prototype.newItem = function (inObserver) {
-  var uuid = this._myNextAvailableUuid;
-  this._myNextAvailableUuid += 1;
-  var item = new Item(this, uuid);
-  this._myHashTableOfItemsKeyedByUuid[uuid] = item;
-  item.addObserver(inObserver);
-  this.markDirty(item);
-  return item;
-};
-
-
-// -------------------------------------------------------------------
-// Accessor Methods
-// -------------------------------------------------------------------
-
-/**
- * Given a UUID, returns the item identified by that UUID.
- *
- * @scope    public instance method
- * @param    inUuid    The UUID of the item to be returned. 
- * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
- * @return   The item identified by the given UUID.
- */
-Stevedore.prototype.getItemFromUuid = function (inUuid, inObserver) {
-  Util.assert(Util.isNumeric(inUuid));
-  
-  var item = this._myHashTableOfItemsKeyedByUuid[inUuid];
-  if (item && inObserver) {
-    item.addObserver(inObserver);
-  }
-  return item;
-};
-
-
-/**
- * Given an attribute or an attribute's UUID, return the attribute's UUID.
- *
- * @scope    public instance method
- * @param    inAttributeOrUuid    An attribute, or an attribute's UUID. 
- * @return   The UUID of the attribute.
- */
-Stevedore.prototype.getAttributeUuidFromAttributeOrUuid = function (inAttributeOrUuid) {
-  Util.assert((inAttributeOrUuid instanceof Item) || Util.isNumeric(inAttributeOrUuid));
-
-  var uuid = null;
-  if (Util.isNumeric(inAttributeOrUuid)) {
-    uuid = inAttributeOrUuid;
-  }
-  if (inAttributeOrUuid instanceof Item) {
-    uuid = inAttributeOrUuid.getUuid();
-  }
-  return uuid;
-};
-
-
-/**
- * Returns the page item to be used as the home page.
- *
- * @scope    public instance method
- * @return   A page item.
- */
-Stevedore.prototype.getHomePage = function () {
-  return this._myHomePageItem; 
-};
-
-
-/**
- * Given a query item, this method returns a list of all the items that 
- * match the query criteria.
- *
- * @scope    public instance method
- * @param    inQuery    A query item. 
- * @return   A list of items.
- */
-Stevedore.prototype.getListOfResultItemsForQuery = function (inQuery) {
-  Util.assert(inQuery instanceof Item);
-
-  var listOfQueryResultItems = null;
-  var listOfMatchingCategories = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var listOfMatchingItems = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
-  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
-  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
-
-  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
-
-  if (isItemMatchingQuery) {
-    listOfQueryResultItems = listOfMatchingItems;
-  }
-  
-  if (isCategoryMatchingQuery) {
-    listOfQueryResultItems = [];
-    // This is a wildly inefficient search.  But maybe it doesn't matter,
-    // because this code should all be replaced someday by server code.
-    for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
-      var item = this._myHashTableOfItemsKeyedByUuid[uuid];
-      var includeItem = true;
-      for (var key in listOfMatchingCategories) {
-        var category = listOfMatchingCategories[key];
-        if (includeItem && !(item.isInCategory(category))) {
-          includeItem = false;
-        }
-      }
-      if (includeItem) {
-        listOfQueryResultItems.push(item);
-      }
-    }
-  }
-  
-  if (!isItemMatchingQuery && !isCategoryMatchingQuery) {
-    listOfQueryResultItems = [];
-    for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
-      var item = this._myHashTableOfItemsKeyedByUuid[uuid];
-      listOfQueryResultItems.push(item);
-    }
-  }
-  
-  return listOfQueryResultItems; 
-};
-
-
-
-/**
- * Given an item and a query item, this method modifies the attributes 
- * of the item so that when the query is next evaluated the item will be 
- * included in query result list.
- *
- * @scope    public instance method
- * @param    inItem    An item, which will be modified so that it matches the query. 
- * @param    inQuery    A query item. 
- */
-Stevedore.prototype.setItemToBeIncludedInQueryResultList = function (inItem, inQuery) {
-  Util.assert(inItem instanceof Item);
-  Util.assert(inQuery instanceof Item);
-
-  var listOfMatchingCategories = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var listOfMatchingItems = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
-  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
-  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
-
-  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
-
-  if (isItemMatchingQuery) {
-    inQuery.assign(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM, inItem);
-  }
-  
-  if (isCategoryMatchingQuery) {
-    for (var key in listOfMatchingCategories) {
-      var category = listOfMatchingCategories[key];
-      if (!(inItem.isInCategory(category))) {
-        inItem.assign(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY, category);
-      }
-    }
-  }
-};
-
-
-/**
- * Given a category, this method returns a list of all the items that have been 
- * assigned to that category.
- *
- * @scope    public instance method
- * @param    inCategory    A category item. 
- * @return   A list of items.
- */
-Stevedore.prototype.getListOfItemsInCategory = function (inCategory) {
-  Util.assert(inCategory instanceof Item);
-
-  var listOfItems = [];
-  for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
-    var item = this._myHashTableOfItemsKeyedByUuid[uuid];
-    if (item.isInCategory(inCategory)) {
-      listOfItems.push(item);
-    }
-    // var kindList = item.getValueListFromAttribute(Repository.ATTRIBUTE_CALLED_KIND);
-    // if (kindList) {
-    //   if (kindList[0] == inKind) {
-    //     listOfItems.push(item);
-    //   }
-    // }
-  }
-  return listOfItems; 
-};
-
-// -------------------------------------------------------------------
-// Transaction Methods
-// -------------------------------------------------------------------
-
-/**
- * Marks the beginning of a transaction.
- *
- * Each time you call beginTransaction() you open a new transaction, 
- * which you need to close later using endTransation().  Transactions
- * may be nested, but the beginTransaction and endTransation calls
- * always need to come in pairs. 
- *
- * @scope    public instance method
- */
-Stevedore.prototype.beginTransaction = function () {
-  this._myCountOfNestedTransactions += 1;
-  // PENDING:
-  //   This is just a stub method for now.  Once we start implementing
-  //   support for transactions we'll have to put some real code here.
-};
- 
-
-/**
- * Marks the end of a transaction.
- *
- * @scope    public instance method
- */
-Stevedore.prototype.endTransaction = function () {
-  this._myCountOfNestedTransactions -= 1;
-  Util.assert(this._myCountOfNestedTransactions >= 0);
-  // PENDING:
-  //   This is just a stub method for now.  Once we start implementing
-  //   support for transactions we'll have to put some real code here.
-  if (this._myCountOfNestedTransactions === 0) {
-    RootView.displayStatusBlurb(this._myListOfDirtyItems.length + " changes made");
-    if (this._myListOfDirtyItems && (this._myListOfDirtyItems.length > 0)) {
-      this._saveChangesToServer();
-      this._myListOfDirtyItems = [];
-    }
-  }
-};
-
-
-/**
- * Marks an item as having been edited during the transaction.
- *
- * @scope    public instance method
- */
-Stevedore.prototype.markDirty = function (anItem) {
-  Util.assert(Util.isArray(this._myListOfDirtyItems));
-  this._myListOfDirtyItems.push(anItem);
-};
-
-
-// -------------------------------------------------------------------
-// Private Methods
-// -------------------------------------------------------------------
-
-/**
- * Given a UUID, either (a) returns the existing item identified by that UUID, 
- * or (b) creates an new item object, set its UUID, and returns that object.
- *
- * @scope    public instance method
- * @param    inUuid    The UUID of the item to be returned. 
- * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
- * @return   The item identified by the given UUID.
- */
-Stevedore.prototype._getItemFromUuidOrBootstrapItem = function (inUuid, inObserver) {
-  var item = this.getItemFromUuid(inUuid, inObserver);
-  if (!item) {
-    item = new Item(this, inUuid);
-    this._myHashTableOfItemsKeyedByUuid[inUuid] = item;
-    this._myNextAvailableUuid = Math.max(this._myNextAvailableUuid, (inUuid + 1));   
-    item.addObserver(inObserver);
-  }
-  return item;
-};
-
-
-/**
- * Loads the basic items that needed in order to anything else, like
- * the items for "name", "attribute", and "category".
- *
- * @scope    private instance method
- */
-Stevedore.prototype._loadBootstrapItems = function () {
-  var uuid;
-  var name;
-  var item;
-  
-  // associate display names with the UUIDs of all the attributes
-  var hashTableOfAttributeNamesKeyedByUuid = {};
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_SHORT_NAME] = "Short Name";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_NAME] = "Name";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY] = "Summary";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_BODY] = "Body";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY] = "Category";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_USERSTAMP] = "Userstamp";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_TIMESTAMP] = "Timestamp";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_SECTION] = "Section";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY] = "Query";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = "Matching Item";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME] = "Layout Name";
-
-  // create all the Item objects for the attributes
-  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
-    this._getItemFromUuidOrBootstrapItem(uuid);
-  }
-  
-  // associate display names with the UUIDs of all the categories
-  var hashTableOfCategoryNamesKeyedByUuid = {};
-  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_ATTRIBUTE] = "Attribute";
-  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_CATEGORY] = "Category";
-  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_PAGE] = "Page";
-  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_SECTION] = "Section";
-  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_QUERY] = "Query";
-
-  // create all the Item objects for the categories
-  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
-    this._getItemFromUuidOrBootstrapItem(uuid);
-  }
- 
-  // set the display names of all the attributes, and put them in the category called "Attribute"
-  var categoryAttribute = this._getItemFromUuidOrBootstrapItem(Stevedore.UUID_FOR_CATEGORY_ATTRIBUTE);
-  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
-    item = this.getItemFromUuid(uuid);
-    name = hashTableOfAttributeNamesKeyedByUuid[uuid];
-    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_NAME, name);
-    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY, categoryAttribute);
-  }
-  
-  // set the display names of all the categories, and put them in the category called "Category"
-  var categoryCategory = this._getItemFromUuidOrBootstrapItem(Stevedore.UUID_FOR_CATEGORY_CATEGORY);
-  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
-    item = this.getItemFromUuid(uuid);
-    name = hashTableOfCategoryNamesKeyedByUuid[uuid];
-    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_NAME, name);
-    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY, categoryCategory);
-  }
-  
-};
-
-
-/**
- * Loads sample data.
- *
- * Given a set of sample data in JSON format, bootstraps 
- * new instances of items corresponding to the sample data.
- * 
- * @scope    private instance method
- * @param    inDataSet    A list of items to be loaded, in JSON format. 
- */
-Stevedore.prototype._loadItemsFromList = function (inDataSet) {
-  Util.assert(Util.isArray(inDataSet) || Util.isObject(inDataSet));
-  
-  var uuidValue;
-  var uuid;
-  var item;
-  var listOfItems;
-  
-  if (Util.isArray(inDataSet)) {
-    // this is an old, pre-March-15-2005, file format
-    listOfItems = inDataSet;
-  } else {
-    // this is newer file format, circa March-16-2005
-    var fileFormat = inDataSet[Stevedore.JSON_MEMBER_FORMAT];
-    Util.assert(fileFormat == Stevedore.JSON_FORMAT_2005_MARCH);
-    listOfItems = inDataSet[Stevedore.JSON_MEMBER_DATA];
-    Util.assert(Util.isArray(listOfItems));
-  }
-  
-  for (var entryKey in listOfItems) {
-    var entry = listOfItems[entryKey];
-    uuidValue = entry[Stevedore.UUID_FOR_ATTRIBUTE_UUID];
-    uuid = uuidValue[Stevedore.JSON_MEMBER_VALUE];
-    item = this._getItemFromUuidOrBootstrapItem(uuid);
-    for (var propertyKey in entry) {
-      if (propertyKey != Stevedore.UUID_FOR_ATTRIBUTE_UUID) { 
-        var propertyValue = entry[propertyKey];
-        var attributeUuid = propertyKey;
-        Util.assert(Util.isArray(propertyValue));
-        for (var valueKey in propertyValue) {
-          var valueObject = propertyValue[valueKey];
-          var valueType = valueObject[Stevedore.JSON_MEMBER_TYPE];
-          var valueValue = valueObject[Stevedore.JSON_MEMBER_VALUE];
-          var finalValue = null;
-          switch (valueType) {
-            case Stevedore.JSON_TYPE_FOREIGN_UUID:
-              finalValue = this._getItemFromUuidOrBootstrapItem(valueValue);
-              break;
-            case Stevedore.JSON_TYPE_STRING_VALUE:
-              finalValue = valueValue;
-              break;
-            case Stevedore.JSON_TYPE_NUMBER_VALUE:
-              finalValue = valueValue;
-              break;
-          }
-          item._initializeAttributeValue(attributeUuid, finalValue);
-        }
-      }
-    }
-  }
-  
-  // PENDING:
-  // If we don't have a designated "home page" for this data set, then just
-  // look through all the items and set the home page to be the first page 
-  // item we come across.  This, of course, is a hack.
-  if (!this._myHomePageItem) {
-    var categoryPage = this.getItemFromUuid(Stevedore.UUID_FOR_CATEGORY_PAGE);
-    for (uuid in this._myHashTableOfItemsKeyedByUuid) {
-      item = this.getItemFromUuid(uuid);
-      if (item.isInCategory(categoryPage)) {
-        this._myHomePageItem = this._myHomePageItem || item;
-      }
-    }
-  }
-};
-
-
-/**
- * Returns a huge string, containing a JavaScript "object literal"
- * representation of the entire cache.
- *
- * @scope    private instance method
- * @return   A string in JavaScript "object literal" format, representing all the items in the cache. 
- */
-Stevedore.prototype._getJsonStringRepresentingAllItems = function () {
-  var timestamp = new Date();
-  var timestampString = timestamp.toString();
-  var listOfStrings = [];
-  
-  listOfStrings.push('// Repository dump, in JSON format' + '\n');
-  listOfStrings.push('Stevedore._ourRepositoryInJsonFormat = {' + '\n');
-  listOfStrings.push('  "' + Stevedore.JSON_MEMBER_FORMAT + '": "' + Stevedore.JSON_FORMAT_2005_MARCH + '", ' + '\n');
-  listOfStrings.push('  "' + Stevedore.JSON_MEMBER_TIMESTAMP + '": "' + timestampString + '", ' + '\n');
-  listOfStrings.push('  "' + Stevedore.JSON_MEMBER_DATA + '": ' + '[' + '\n');
-  for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
-    var uuidInJsonForm = '{ "' + Stevedore.JSON_MEMBER_TYPE + '": "' + Stevedore.JSON_TYPE_UUID + '", "' + Stevedore.JSON_MEMBER_VALUE + '": ' + uuid + ' }';
-    listOfStrings.push('  { "' + Stevedore.UUID_FOR_ATTRIBUTE_UUID + '": ' + uuidInJsonForm + ',' + '\n');
-    var item = this.getItemFromUuid(uuid);
-    var listOfAttributeUuids = item.getListOfAttributeUuids();
-    for (var attributeKey in listOfAttributeUuids) {
-      var attributeUuid = listOfAttributeUuids[attributeKey];
-      var attribute = this.getItemFromUuid(attributeUuid);
-      Util.assert(attribute instanceof Item);
-      var attributeName = attribute.getDisplayName();
-      var attributeNameSubstring = (attributeName + '          ').substring(0, 10);
-      listOfStrings.push('    /* ' + attributeNameSubstring + ' */   ');
-      listOfStrings.push('"' + attributeUuid + '": [');
-      var listOfAttributeValues = item.getValueListFromAttribute(attribute);
-      for (var valueKey in listOfAttributeValues) {
-        var value = listOfAttributeValues[valueKey];
-        var pickleString = "";
-        var typeString = null;
-        var valueString = null;
-        if (Util.isNumber(value)) {
-          typeString = Stevedore.JSON_TYPE_NUMBER_VALUE;
-          valueString = value;
-        }
-        if (Util.isString(value)) {
-          typeString = Stevedore.JSON_TYPE_STRING_VALUE;
-          valueString = '"' + value + '"';
-        }
-        if (value instanceof Item) {
-          typeString = Stevedore.JSON_TYPE_FOREIGN_UUID;
-          valueString = value.getUuid();
-        }
-        pickleString = '{ "' + Stevedore.JSON_MEMBER_TYPE + '": "' + typeString + '", "' + Stevedore.JSON_MEMBER_VALUE + '": ' + valueString + ' }';
-        listOfStrings.push(pickleString + ', ');
-      }
-      listOfStrings.push('],\n');
-    }
-    listOfStrings.push("  }," + "\n");
-  }
-  listOfStrings.push("]};" + "\n");
-  var finalString = listOfStrings.join("");
-  return finalString;
-};
-
-
-/**
- * Returns a newly created XMLHttpRequest object.
- *
- * @scope    private instance method
- * @return   A newly created XMLHttpRequest object. 
- */
-Stevedore.prototype._newXMLHttpRequestObject = function () {
-  var newXMLHttpRequestObject = null;
-  if (window.XMLHttpRequest) {
-    newXMLHttpRequestObject = new XMLHttpRequest();
-  } else {
-    if (window.ActiveXObject) {
-      newXMLHttpRequestObject = new ActiveXObject("Microsoft.XMLHTTP");
-    }
-  }
-  if (newXMLHttpRequestObject) {
-    newXMLHttpRequestObject.onreadystatechange = function() {
-      alert("onreadystatechange:\n" +
-        "readyState: " + this._myXMLHttpRequestObject.readyState + "\n" +
-        "status: " + this._myXMLHttpRequestObject.status + "\n" +
-        "statusText: " + this._myXMLHttpRequestObject.statusText + "\n" +
-        "responseText: " + this._myXMLHttpRequestObject.responseText + "\n");
-    };
-  }
-  return newXMLHttpRequestObject;
-};
-
-
-/**
- * Sends all the changed items to the server, so that the server can save the
- * changes.
- *
- * @scope    private instance method
- */
-Stevedore.prototype._saveChangesToServer = function () {
-  var saveChanges = false;
-  if (window.location) {
-    if (window.location.protocol == "http:") {
-      saveChanges = true;
-    }
-    if (window.location.protocol == "file:") {
-      alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
-    }
-  }
-  
-  if (saveChanges) {
-    var url = "save_changes.php";
-    this._myXMLHttpRequestObject.open("POST", url, true);
-    this._myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/xml");
-    this._myXMLHttpRequestObject.send(this._getJsonStringRepresentingAllItems());
-  }
-  
-};
-
-
-/**
- * This is the event handler method that we register with the XMLHttpRequest
- * object's onreadystatechange property.
- *
- * @scope    private class method
- */
-Stevedore._handleStateChangeForXMLHttpRequestObject = function () {
-  alert("_handleStateChangeForXMLHttpRequestObject()\n"); // +
-  //  "readyState: " + this._myXMLHttpRequestObject.readyState + "\n" +
-  //  "status: " + this._myXMLHttpRequestObject.status + "\n" +
-  //  "statusText: " + this._myXMLHttpRequestObject.statusText + "\n" +
-  //  "responseText: " + this._myXMLHttpRequestObject.responseText + "\n");
-};
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/table_layout.js
===================================================================
--- trunk/source/table_layout.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/table_layout.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,467 +0,0 @@
-/*****************************************************************************
- table_layout.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
- 
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   section_view.js
-//   page_view.js
-//   util.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
-// -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_TABLE] = TableLayout;
-
-
-// -------------------------------------------------------------------
-// TableLayout public class constants
-// -------------------------------------------------------------------
-TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD = "current_edit_field";
-
-
-/**
- * When the TableLayout creates an HTML table, it sets up each HTML "td" table 
- * cell element in the table to point to a corresponding CellDelegate instance.
- *
- * @scope    private instance constructor
- */
-TableLayout._CellDelegate = function (inRowDelegate, inCellElementId, inCellCount, inColumnNumber, inAttribute, inTableLayout) {
-  Util.assert(inRowDelegate instanceof TableLayout._RowDelegate);
-  Util.assert(inAttribute instanceof Item);
-  Util.assert(inTableLayout instanceof TableLayout);
-
-  this.myRowDelegate = inRowDelegate;
-  this.myCellElementId = inCellElementId;
-  this.myCellCount = inCellCount;
-  this.myColumnNumber = inColumnNumber;
-  this.myAttribute = inAttribute;
-  this.myTableLayout = inTableLayout;
-}
-
-
-/**
- * When the TableLayout creates an HTML table, it sets up each HTML "tr" table
- * row element in the table to point to a corresponding RowDelegate instance.
- *
- * @scope    private instance constructor
- */
-TableLayout._RowDelegate = function (inContentItem, inRowNumber) {
-  Util.assert((inContentItem == null) || (inContentItem instanceof Item));
-
-  this.myContentItem = inContentItem;
-  this.myRowNumber = inRowNumber;
-  this.myArrayOfCellDelegates = new Array();
-}
-
-
-/**
- * The TableLayout class knows how to display a Section of a Page as an
- * HTML table.
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inSectionView    The SectionView that this TableLayout will appears in. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
- */
-TableLayout.prototype = new View();  // makes TableLayout be a subclass of View
-function TableLayout(inSectionView, inDivElement) {
-  this.setSuperview(inSectionView);
-  this.setDivElement(inDivElement);  
-
-  this.myNumColumns = null;
-  this.myNumRows = null;
-  this.myArrayOfRowDelegates = new Array();
-  this.myNewItemCreatedFlag = false;
-}
-
-
-/**
- * Returns a string with the display name for this type of layout.
- *
- * @scope    public instance method
- * @return   A String with a display name for this type of layout. 
- */
-TableLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_TABLE;
-};
-
-  
-/**
- * Re-creates all the HTML for the TableLayout, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-TableLayout.prototype.refresh = function () {
-  var listOfStrings = [];
-  var hashTableOfAttributesKeyedByUuid = {};
-  var hashTableOfCellDelegatesKeyedByElementId = {};
-  var attribute = null;
-  var attributeUuid = null;
-  var contentItem = null;
-  var columnCount = 0;
-  
-  // find the union of the attribute lists of all the content items
-  // PENDING: how do we know our superview responds to getListOfContentItems()? 
-  var listOfContentItems = this.getSuperview().getListOfContentItems();
-  for (var iKey in listOfContentItems) {
-    contentItem = listOfContentItems[iKey];
-    var listOfAttributesForItem = contentItem.getListOfAttributeUuids();
-    for (var attributeKey in listOfAttributesForItem) {
-      attributeUuid = listOfAttributesForItem[attributeKey];
-      if (attributeUuid != Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY) {
-        hashTableOfAttributesKeyedByUuid[attributeUuid] = this.getStevedore().getItemFromUuid(attributeUuid);
-      }
-    }
-  }
-
-  // add the table header row
-  listOfStrings.push("<table class=\"" + SectionView.ELEMENT_CLASS_SIMPLE_TABLE + "\">");
-  listOfStrings.push("<tr>");
-  this.myNumColumns = 0;
-  for (var jKey in hashTableOfAttributesKeyedByUuid) {
-    attribute = hashTableOfAttributesKeyedByUuid[jKey];
-    this.myNumColumns += 1;
-    listOfStrings.push("<th>" + attribute.getDisplayName() + "</th>");
-  }
-  listOfStrings.push("</tr>");
-  
-  // add all the table body rows
-  var cellCount = 0;
-  var cellIdPrefix = SectionView.ELEMENT_ID_CELL_PREFIX + this.getSuperview().mySectionNumber + SectionView.ELEMENT_ID_CELL_MIDFIX;
-  var cellId = "";
-  this.myNumRows = 0;
-  for (var kKey in listOfContentItems) {
-    contentItem = listOfContentItems[kKey];
-    listOfStrings.push("<tr>");
-    var rowDelegate = new TableLayout._RowDelegate(contentItem, this.myNumRows);
-    this.myArrayOfRowDelegates[this.myNumRows] = rowDelegate;
-    this.myNumRows += 1;
-    columnCount = 0;
-    for (var lKey in hashTableOfAttributesKeyedByUuid) {
-      attribute = hashTableOfAttributesKeyedByUuid[lKey];
-      cellCount += 1;
-      cellId = cellIdPrefix + cellCount;
-      var valueList = contentItem.getValueListFromAttribute(attribute);
-      var string = "";
-      if (valueList) {
-        string = SectionView.getStringForValue(valueList[0]);
-      }
-      if (this.isInEditMode()) {
-        listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + string + "</td>");
-        var cellDelegate = new TableLayout._CellDelegate(rowDelegate, cellId, cellCount, columnCount, attribute, this);
-        rowDelegate.myArrayOfCellDelegates[columnCount] = cellDelegate;
-        hashTableOfCellDelegatesKeyedByElementId[cellId] = cellDelegate;
-      } else {
-        // if (columnCount == 0) {
-        //   string = "<a href=\"" + RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuid() + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + string + "</a>";
-        // }
-        listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\">" + string + "</td>");
-      }
-      columnCount += 1;
-    }
-    listOfStrings.push("</tr>");
-  }  
-
-  // if we're in edit mode, add a row at the bottom of the table for entering new items
-  var firstCell = true;
-  var lastRowDelegate = new TableLayout._RowDelegate(null, this.myNumRows);
-  this.myArrayOfRowDelegates[this.myNumRows] = lastRowDelegate;
-  this.myNumRows += 1;
-  if (this.isInEditMode()) {
-    listOfStrings.push("<tr>");
-    columnCount = 0;
-    for (var mKey in hashTableOfAttributesKeyedByUuid) {
-      attribute = hashTableOfAttributesKeyedByUuid[mKey];
-      var contentString = (firstCell) ? "&gt;" : "";
-      firstCell = false;
-      cellCount += 1;
-      cellId = cellIdPrefix + cellCount;
-      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_NEW_ITEM + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + contentString + "</td>");
-      var lastRowCellDelegate = new TableLayout._CellDelegate(lastRowDelegate, cellId, cellCount, columnCount, attribute, this);
-      lastRowDelegate.myArrayOfCellDelegates[columnCount] = lastRowCellDelegate;
-      hashTableOfCellDelegatesKeyedByElementId[cellId] = lastRowCellDelegate;
-      columnCount += 1;
-    }
-    listOfStrings.push("</tr>");
-  }
-
-
-  listOfStrings.push("</table>");
-  
-  // write out all the new content   
-  var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
-  
-  // attach back-pointers to the newly created UI elements
-  for (var elementId in hashTableOfCellDelegatesKeyedByElementId) {
-    var aCellDelegate = hashTableOfCellDelegatesKeyedByElementId[elementId];
-    var cellElement = document.getElementById(elementId);
-    cellElement.mydelegate = aCellDelegate;
-  }
-};
-  
-
-/**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-TableLayout.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
-};
-
-
-/**
- * Called when the user clicks on a table cell.
- * 
- * Called from an HTML "td" element on the generated page.  There is no need
- * to call this method directly.
- *
- * @scope    public class method
- */
-TableLayout.clickOnCell = function (inEventObject) {
-  var eventObject = inEventObject;
-  if (!eventObject) { eventObject = window.event; } 
-  // PENDING: try this instead: var eventObject = inEventObject || window.event;
-  
-  var htmlElement = Util.getTargetFromEvent(eventObject);
-  // PENDING: We could replace the two lines above with "var htmlElement = this;"
-  // That would work fine in Firefox, but maybe it wouldn't work in other browsers?
-
-  var currentEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
-  if (currentEditField && (currentEditField == htmlElement)) {
-    // another click in the cell we're already editing -- just ignore it
-    return; 
-  }
-  TableLayout.leaveEditField();
-  TableLayout.startEditingInCell(htmlElement);
-};
-
-
-/**
- * Called when the user first moves the cursor into one of the cells of
- * the bottom table row, which is the row used for creating new items.
- * 
- * @scope    public instance method
- * @param    inColumnNumber    An integer column number, telling which column to start editing in. 
- */
-TableLayout.prototype.startEditingInCellForNewItemAtColumn = function (inColumnNumber) {
-  var rowForNewItemEntry = this.myNumRows - 1;
-  var rowDelegateForNewItemEntry = this.myArrayOfRowDelegates[rowForNewItemEntry];
-  var cellDelegate = rowDelegateForNewItemEntry.myArrayOfCellDelegates[inColumnNumber];
-  var nextCell = document.getElementById(cellDelegate.myCellElementId);
-  TableLayout.startEditingInCell(nextCell);
-};
-
-
-/**
- * Given an HTML table cell element, adds a text field inside the
- * table cell, so the user can edit the cell.
- * 
- * @scope    public class method
- * @param    inCellElement    An HTMLTableCellElement. 
- */
-TableLayout.startEditingInCell = function (inCellElement) {
-  Util.assert(inCellElement instanceof HTMLTableCellElement);
-
-  var initialEditValue = inCellElement.innerHTML.replace(/"/g, "&quot");
-  var editFieldString = "<input type=\"text\" class=\"" + SectionView.ELEMENT_CLASS_TEXT_FIELD_IN_TABLE_CELL + "\" id=\"" + TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD + "\" value=\"" + initialEditValue + "\" size=\"1\"></input>";
-  inCellElement.innerHTML = editFieldString;
-  inCellElement.className = SectionView.ELEMENT_CLASS_SELECTED + " " + inCellElement.className;
-  // var listener = this; 
-  // Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
-      
-  var newEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
-  newEditField.onkeypress = TableLayout.keyPressOnEditField;
-  newEditField.select();
-  newEditField.focus();
-};
-
-
-/**
- * Called when the user is done editing a table cell. 
- *
- * @scope    public class method
- */
-TableLayout.leaveEditField = function () {
-  var currentEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
-
-  if (currentEditField) {
-    var newValueString = currentEditField.value;
-    var cellElement = currentEditField.parentNode;
-    var cellDelegate = cellElement.mydelegate;
-
-    // find the content item for this cell, and set the attribute to the new cell value
-    var contentItem = cellDelegate.myRowDelegate.myContentItem;
-    if (!contentItem) {
-      var sectionView = cellDelegate.myTableLayout.getSuperview();
-      var stevedore = sectionView.getStevedore();
-      contentItem = stevedore.newItem(); 
-      cellDelegate.myTableLayout.myNewItemCreatedFlag = true;
-      cellDelegate.myRowDelegate.myContentItem = contentItem;
-      var queryList = sectionView.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY);
-      if (queryList) {
-        var query = queryList[0];
-        // PENDING: We should NOT get a value from the item's PRIVATE _myStevedore property
-        contentItem._myStevedore.setItemToBeIncludedInQueryResultList(contentItem, query);
-      }
-    }
-    var attribute = cellDelegate.myAttribute;
-    var valueList = contentItem.getValueListFromAttribute(attribute);
-    var oldValueString = "";
-    if (valueList) {
-      oldValueString = SectionView.getStringForValue(valueList[0]);
-    }
-    if (oldValueString != newValueString) {
-      contentItem.clear(attribute);
-      contentItem.assign(attribute, newValueString);
-    }
-    
-    // remove the edit field from the cell, and replace it with the new cell value
-    valueList = contentItem.getValueListFromAttribute(attribute);
-    newValueString = "";
-    if (valueList) {
-      newValueString = SectionView.getStringForValue(valueList[0]);
-    } 
-    cellElement.innerHTML = newValueString;
-    var regularExpression = new RegExp(SectionView.ELEMENT_CLASS_SELECTED, "i");
-    cellElement.className = cellElement.className.replace(regularExpression, "");    
-  }
-};
-
-
-/**
- * Called when the user types a character when editing a table cell. 
- *
- * Called from an HTML "input type='text'" element within an HTML "td"
- * table cell element on the generated page.  There is no need
- * to call this method directly.
- * 
- * @scope    public class method
- */
-TableLayout.keyPressOnEditField = function (inEventObject) {
-  var eventObject = inEventObject;
-  if (!eventObject) { eventObject = window.event; }
-  var asciiValueOfKey = eventObject.keyCode;
-  var shiftKeyPressed = eventObject.shiftKey;
-  
-  var MOVE_LEFT = "left";
-  var MOVE_UP = "up";
-  var MOVE_RIGHT = "right";
-  var MOVE_DOWN = "down";
-  
-  var move = null;
-  switch (asciiValueOfKey) {
-    case Util.ASCII_VALUE_FOR_LEFT_ARROW:
-      move = MOVE_LEFT;
-      break;
-    case Util.ASCII_VALUE_FOR_UP_ARROW:
-      move = MOVE_UP;
-      break;
-    case Util.ASCII_VALUE_FOR_RIGHT_ARROW:
-      move = MOVE_RIGHT;
-      break;
-    case Util.ASCII_VALUE_FOR_DOWN_ARROW:
-      move = MOVE_DOWN;
-      break;
-    case Util.ASCII_VALUE_FOR_RETURN:
-      move = (shiftKeyPressed) ? MOVE_UP : MOVE_DOWN;
-      break;
-    case Util.ASCII_VALUE_FOR_TAB:
-      move = (shiftKeyPressed) ? MOVE_LEFT : MOVE_RIGHT;
-      break;
-    default:
-      move = null;
-      break;
-  }
-  
-  if (move) {
-    var currentEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
-    Util.assert(currentEditField == Util.getTargetFromEvent(eventObject));
-
-    var cellElement = currentEditField.parentNode;
-    var cellDelegate = cellElement.mydelegate;
-    var tableLayout = cellDelegate.myTableLayout;
-    var sectionView = tableLayout.mySectionView;
-    var userHitReturnInLastRow = false;
-    var nextCellDelegate = null;
-    var shiftBy;
-    
-    if (move == MOVE_LEFT || move == MOVE_RIGHT) {
-      shiftBy = (move == MOVE_LEFT) ? -1 : 1;
-      var nextColumnNumber = cellDelegate.myColumnNumber + shiftBy;
-      // PENDING: We should be able to do this in one line, using a modulo operator
-      if (nextColumnNumber < 0) {
-        nextColumnNumber = (tableLayout.myNumColumns - 1);
-      }
-      if (nextColumnNumber >= tableLayout.myNumColumns) {
-        nextColumnNumber = 0;
-      }
-      nextCellDelegate = cellDelegate.myRowDelegate.myArrayOfCellDelegates[nextColumnNumber];
-    }
-    
-    if (move == MOVE_UP || move == MOVE_DOWN) {
-      shiftBy = (move == MOVE_UP) ? -1 : 1;
-      var nextRowNumber = cellDelegate.myRowDelegate.myRowNumber + shiftBy;
-      if (nextRowNumber < 0) {
-        nextRowNumber = (tableLayout.myNumRows - 1);
-      }
-      if (nextRowNumber >= tableLayout.myNumRows) {
-        nextRowNumber = 0;
-        userHitReturnInLastRow = true;
-      }
-      var nextRowDelegate = tableLayout.myArrayOfRowDelegates[nextRowNumber];
-      nextCellDelegate = nextRowDelegate.myArrayOfCellDelegates[cellDelegate.myColumnNumber];
-    }
-    
-    var nextCellId = nextCellDelegate.myCellElementId;    
-    var nextCell = document.getElementById(nextCellId);
-    TableLayout.leaveEditField();
-    if (userHitReturnInLastRow && tableLayout.myNewItemCreatedFlag) {
-      tableLayout.myNewItemCreatedFlag = false;
-      tableLayout.refresh();
-      tableLayout.startEditingInCellForNewItemAtColumn(cellDelegate.myColumnNumber);
-    } else {
-      if (nextCell) {
-        TableLayout.startEditingInCell(nextCell);
-      }
-    }
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/text_view.js
===================================================================
--- trunk/source/text_view.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/text_view.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,188 +0,0 @@
-/*****************************************************************************
- text_view.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
- and Chih-Chao Lam <chao at cs.stanford.edu>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   util.js
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// MultiLineTextView public class constants
-// -------------------------------------------------------------------
-MultiLineTextView.ELEMENT_CLASS_TEXT_BLOCK = "text_block";
-
-
-/**
- * An instance of MultiLineTextView can be placed in any parent container View
- * to display and (if in edit mode) edit multi-lines of text
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    theSuperview    The view that this view is nested in. 
- * @param    theItem    The Item to be displayed and edited by this view. 
- * @param    theAttribute    The attribute of the item to be displayed.
- * @param    theDivElement    The HTMLDivElement to display the HTML in. 
- * @param    theClassType    A string that gives a class name to assign to the HTML element. 
- */
-MultiLineTextView.prototype = new View();  // makes MultiLineTextView be a subclass of View
-function MultiLineTextView(theSuperview, theDivElement, theItem, theAttribute, theClassType) {
-  Util.assert(theItem instanceof Item);
-  //Util.assert(theAttribute instanceof Attribute); PENDING need to check that attribute is an attribute
-  
-  this.setSuperview(theSuperview);
-  this.setDivElement(theDivElement);
-  this.textItem = theItem;
-  this.attribute = theAttribute;
-  this.editField = null;
-  this.textObj = null;
-  this.classType = theClassType;
-  this.isEditing = false;
-  this._myHasEverBeenDisplayedFlag = false;
-};
-
-
-/**
- * Updates the HTML elements in this view to reflect any changes in 
- * the item's attribute values.
- *
- * @scope    public instance method
- */
-MultiLineTextView.prototype.refresh = function() {
-  if (!this._myHasEverBeenDisplayedFlag) {
-    this.doInitialDisplay();
-  } else {
-    // if (weHaveBeenNotifiedOfChangesTo(this.textItem)) {
-    //   var newText = getNewValueFrom(this.textItem);
-    //   this.textNode.data = newText;
-    // }
-  }
-};
-
-
-/**
- * Re-creates all the HTML for the MultiLineTextView, and hands the HTML to the 
- * browser to be re-drawn.
- *
- * @scope    public instance method
- */
-MultiLineTextView.prototype.doInitialDisplay = function() {
-  var divElement = this.getDivElement();
-  Util.assert(divElement instanceof HTMLDivElement);
-  
-  divElement.className = MultiLineTextView.ELEMENT_CLASS_TEXT_BLOCK;
-  var textList = this.textItem.getValueListFromAttribute(this.attribute);
-  var textString = "";
-  for (var i in textList) {
-    textString = textList[i] + "\n" + textString;
-  };
-  
-  this.textNode = document.createTextNode(textString);
-  divElement.appendChild(this.textNode);
-
-  var listener = this;
-  Util.addEventListener(divElement, "click", function(event) { listener.onClick(event);});
-    
-  this._myHasEverBeenDisplayedFlag = true;
-};
-
-
-/**
- * Switch to edit text field for editing.
- *
- * @scope    public instance method
- */
-MultiLineTextView.prototype.startEditing = function() {
-  if (!this.isEditing) {
-    var editField = this.editField;
-    if (!editField) {
-      editField = this.editField = document.createElement("textarea");
-      editField.className = this.classType;
-      //editField.cols=80; now using css style sheet "text_view"
-      var listener = this; 
-      Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
-      editField.defaultValue = this.textNode.data;
-    }
-    editField.style.height = this.getDivElement().offsetHeight + "px";
-    this.getDivElement().replaceChild(editField, this.textNode);
-    editField.focus();
-    editField.select();
-    this.isEditing = true;
-  }
-};
-
-
-// -------------------------------------------------------------------
-// Event handler methods
-// -------------------------------------------------------------------
-
-/**
- * Called when the user clicks on the text.
- *
- * Handles the mouse click event on text view. Called by listener.
- *
- * @scope    public instance method
- * @param    inEventObject    An event object. 
- */
-MultiLineTextView.prototype.onClick = function(inEventObject) {
-  if (this.isInEditMode()) {
-    this.startEditing();
-  }
-};
-
-
-/**
- * Called when focus leaves the text view.
- *
- * Handles loss of focus for text view. Called by listener. Switches back 
- * to static text from editable text.
- *
- * @scope    public instance method
- * @param    inEventObject    An event object. 
- */
-MultiLineTextView.prototype.onBlur = function(inEventObject) {
-  if (this.isEditing) {
-    var newText = this.editField.value;
-    this.textItem.clear(this.attribute);
-    this.textItem.assign(this.attribute, newText); // PENDING: need to deal with multi valued attrs
-    this.textNode.data = newText;
-    this.getDivElement().replaceChild(this.textNode, this.editField);
-    this.isEditing = false;
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------
-  
\ No newline at end of file

Deleted: trunk/source/util.js
===================================================================
--- trunk/source/util.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/util.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,411 +0,0 @@
-/*****************************************************************************
- util.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-
-/**
- * The Util class offers general utility methods that might
- * be useful in a wide variety of applications.
- *
- * There is no need to ever call this constructor.  All the Util
- * methods are class methods, not instance methods, and the only 
- * reason this constructor exists is to cause the name "Util"
- * to be a globally-scoped class name, which the class methods 
- * can then be attached to.
- *
- * @scope    public instance constructor
- * @syntax   DO NOT CALL THIS CONSTRUCTOR
- */
-function Util() {
-  throw new Error("Util is a static class. You can't create instances of it.");
-}
-
-
-// -------------------------------------------------------------------
-// Util public class constants
-// -------------------------------------------------------------------
-Util.ASCII_VALUE_FOR_RETURN = 13;
-Util.ASCII_VALUE_FOR_TAB = 9;
-Util.ASCII_VALUE_FOR_ESCAPE = 27;
-
-// &#37; = %
-// &#38; = &
-// &#39; = '
-// &#40; = (
-Util.ASCII_VALUE_FOR_LEFT_ARROW = 37;  // 123
-Util.ASCII_VALUE_FOR_UP_ARROW = 38;    // 126
-Util.ASCII_VALUE_FOR_RIGHT_ARROW = 39; // 124
-Util.ASCII_VALUE_FOR_DOWN_ARROW = 40;  // 125
-
-
-// -------------------------------------------------------------------
-// String manipulation methods
-// -------------------------------------------------------------------
-
-/**
- * Returns a copy of the input string, cleaned up so that it can be 
- * included in a valid HTML page.
- *
- * Returns a copy of the string, but with the original characters 
- * '<', '>', and '&' all replaced by their HTML entities: "&lt;", 
- * "&gt;", and "&amp;".  Allows strings to displayed on HTML pages.
- *
- * @scope    public class method
- * @syntax   var cleanString = Util.getCleanString(dirtyString);
- * @param    inString    A dirty string to be cleaned up.
- * @return   String
- */
-Util.getCleanString = function(inString) {
-  Util.assert(Util.isString(inString));
-  
-  var returnString = inString;
-  returnString = returnString.replace(/&/g, "&amp;");
-  returnString = returnString.replace(/</g, "&lt;");
-  returnString = returnString.replace(/>/g, "&gt;");
-  returnString = returnString.replace(/"/g, "&quot;");
-  returnString = returnString.replace(/\n/g, " ");
-  return returnString;
-};
-
-
-// -------------------------------------------------------------------
-// Assertions and error handling methods
-// -------------------------------------------------------------------
-
-/**
- * Registers a function to be used to report errors.
- *
- * @scope    public class method
- * @param    inFunction    A function which takes a single string argument. 
- */
-Util.setErrorReportCallback = function (inFunction) {
-  Util.ourErrorReporter = inFunction;
-};
-
-
-/**
- * This defaultErrorReporter simply calls "alert" to report errors.
- *
- * @scope    public class method
- * @param    inText    The error message to be reported. 
- */
-Util.defaultErrorReporter = function (inText) {
-  window.alert(inText);
-};
-Util.ourErrorReporter = Util.defaultErrorReporter;
-
- 
- /**
- * Pops up an alert box showing an error message.
- *
- * @scope    public class method
- * @param    inMessage    A string describing the error.
- * @param    inUrl    A string that gives the name of the file where the error was found.
- * @param    inLine    The line number where the error was found.
- */
-Util.handleError = function (inMessage, inUrl, inLine) {
-  Util.ourErrorReporter("Util.handleError()\n" + inMessage + "\nline: " + inLine + "\nURL: " + inUrl);
-};
-
-
-/**
- * Pops up an alert box if the assertion fails.
- *
- * If the asserted condition is true, this method does nothing. If the condition
- * is false, this method pops up an alert box.  The alert box explains that an
- * assertion failed, and it gives a stack trace showing the file name and line
- * number where the assertion failed.
- *
- * @scope    public class method
- * @param    inBoolean    A boolean value, which needs to be true for the assertion to succeed. 
- * @param    inMessage    Optional. A string describing the assertion.
- */
-Util.assert = function (inBoolean, inMessage) {
-  var exception = new Error();  // create an exception, just to get a stack trace
-  var stackString = exception.stack;
-  var stackList = stackString.split("\n");
-  stackList.shift(); // get rid of the "ReferenceError()@:0" at the start of the list
-  stackList.shift(); // get rid of the "(false)@file ... util.js:67" at the start of the list
-  stackList.pop();   // get rid of the trailing "\n"
-  stackList.pop();   // get rid of the "@:0" at the end of the list
-  stackString = stackList.join("\n");
-  if (Util.isBoolean(inBoolean)) {
-    if (!inBoolean) {    
-      Util.ourErrorReporter("An assert statement failed.\nThe method Util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
-    }
-  } else {
-    Util.ourErrorReporter("An assert statement went sour.\nThe method Util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
-  }
-};
-
-
-// -------------------------------------------------------------------
-// Type checking methods
-// -------------------------------------------------------------------
-
-/**
- * Returns true if the given value is a string.
- *
- * @scope    public class method
- * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is a string.
- */
-Util.isString = function (inValue) {
-  return (typeof(inValue) == "string");
-};
-
-
-/**
- * Returns true if the given value is a number (and is finite number).
- *
- * @scope    public class method
- * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is a number.
- */
-Util.isNumber = function (inValue) {
-  return ((typeof(inValue) == "number") && isFinite(inValue));
-};
-
-
-/**
- * Returns true if the given value is a number or a string that 
- * represents a number.
- *
- * @scope    public class method
- * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is a number or a string that represents a number.
- */
-Util.isNumeric = function (inValue) {
-  var isNumber = Util.isNumber(inValue);
-  if (isNumber) {
-    return true;
-  }
-  var isNumeric = Util.isString(inValue) && Util.isNumber(parseInt(inValue));
-  return isNumeric;
-};
-
-
-/**
- * Returns true if the given value is a boolean.
- *
- * @scope    public class method
- * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is a boolean.
- */
-Util.isBoolean = function (inValue) {
-  return (typeof(inValue) == "boolean");
-};
-
-
-/**
- * Returns true if the given value is an object.
- *
- * @scope    public class method
- * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is an object.
- */
-Util.isObject = function (inValue) {
-  return (inValue && (typeof(inValue) == "object"));
-};
-
-
-/**
- * Returns true if the given value is an array.
- *
- * @scope    public class method
- * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is an array.
- */
-Util.isArray = function (inValue) {
-  return (inValue && (typeof(inValue) == "object") && (inValue.constructor == Array));
-};
-
-
-/**
- * Returns true if the given value is a hash table.
- *
- * @scope    public class method
- * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is a hash table.
- */
-Util.isHashTable = function (inValue) {
-  return (inValue && (typeof(inValue) == "object"));  // PENDING: we should be more restrictive!
-};
-
-
-// -------------------------------------------------------------------
-// Methods that operate on Sets
-// -------------------------------------------------------------------
-
-/**
- * Returns true if the given object is a member of the set.  
- * 
- * @scope    public class method
- * @param    inObject    The object to look for. 
- * @param    inSet    The Array to look for the object in. 
- * @return   Returns true if the object was found in the set.
- */
-Util.isObjectInSet = function (inObject, inSet) {
-  Util.assert(Util.isArray(inSet));
-  
-  for (var i=0; i<inSet.length; i+=1) {
-    if (inSet[i] == inObject) {
-      return true;
-    }
-  }
-  return false;
-};
-
-
-/**
- * Removes an object from an array.  
- * 
- * @scope    public class method
- * @param    inObject    The object to be removed. 
- * @param    inSet    The Array that the object should be removed from. 
- * @return   Returns true if the object was removed from the array.
- */
-Util.removeObjectFromSet = function (inObject, inSet) {
-  Util.assert(Util.isArray(inSet));
-  
-  if (!inObject) {
-    return false;
-  }
-  for (var i=0; i<inSet.length; i+=1) {
-    if (inSet[i] == inObject) {
-      inSet.splice(i, 1);
-      return true;
-    }
-  }
-  return false;
-};
-
-
-/**
- * This method is similar to array.push(object), but it will only add the
- * object to the array if the object is not already in the array.  
- * 
- * @scope    public class method
- * @param    inObject    The object to be added. 
- * @param    inSet    The Array that the object should be added to. 
- * @return   Returns true if the object was added to the array.
- */
-Util.addObjectToSet = function (inObject, inSet) {
-  Util.assert(Util.isArray(inSet));
-
-  if (!inObject) {
-    return false;
-  }
-  if (Util.isObjectInSet(inObject, inSet)) {
-    return false;
-  }
-  inSet.push(inObject);
-  return true;
-};
-
-
-// -------------------------------------------------------------------
-// Methods that deal with event handling
-// -------------------------------------------------------------------
-
-/**
- * Given an event object, returns the HTML element that was the 
- * target of the event.  
- * 
- * Should work for IE, Mozilla, and _some_ other browsers.  
- *
- * @scope    public class method
- * @param    inEventObject    An event object. 
- * @return   An HTML element.
- */
-Util.getTargetFromEvent = function (inEventObject) {
-  var target = null;
-  if (inEventObject.target) {
-    target = inEventObject.target;
-  } else {
-    if (inEventObject.srcElement) {
-      target = inEventObject.srcElement;
-    }
-  }
-  if (target && target.nodeType == 3) { // defeat Safari bug
-    target = target.parentNode;
-  }
-  return target;
-};
-
-
-/**
- * A cross-browser compatibility method for registering event listeners. 
- *
- * @scope public class method
- * @param inElement    An HTMLElement.
- * @param inEventType    The type of event (e.g. "mousedown", "click").
- * @param inCallback    The function to call when the event happens.
- * @param inCaptures    True if the event should be captured by this function.
- */
-Util.addEventListener = function (inElement, inEventType, inCallback, inCaptures) {
-  if (inElement.addEventListener) {
-    // for DOM Level 2 browsers, like Firefox
-    inElement.addEventListener(inEventType, inCallback, inCaptures);
-  } else {
-    if (inElement.attachEvent) {
-      // for Internet Explorer
-      inElement.attachEvent("on"+inEventType, inCallback, inCaptures);
-    }
-  } 
-};
-
-// -------------------------------------------------------------------
-// HTML document manipulation
-// -------------------------------------------------------------------
-
-/**
- * Looks at all the anchor links in the document, finds the ones with the 
- * attribute rel="external", and sets the target attribute of those anchor
- * links so that the links will open in a new browser window.  
- * 
- * @scope    public class method
- */
-Util.setTargetsForExternalLinks = function () {
-  if (!window.document.getElementsByTagName) {
-    return;
-  }
-  var listOfAnchorElements = window.document.getElementsByTagName("a");
-  var regExp = new RegExp("\\b" + "external" + "\\b");
-  for (var i=0; i<listOfAnchorElements.length; i+=1) {
-    var anchor = listOfAnchorElements[i];
-    if (anchor.getAttribute("href") && (anchor.getAttribute("rel")) && (anchor.getAttribute("rel").search(regExp) != -1)) {
-      anchor.target = "_blank";
-    }
-  }
-};
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/view.js
===================================================================
--- trunk/source/view.js	2005-04-05 05:02:08 UTC (rev 20)
+++ trunk/source/view.js	2005-04-05 21:00:35 UTC (rev 21)
@@ -1,198 +0,0 @@
-/*****************************************************************************
- view.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   util.js
-// -------------------------------------------------------------------
-
-
-/**
- * The View class serves as an abstract superclass for other view classes.
- *
- * @scope    public instance constructor
- * @syntax   DO NOT CALL THIS CONSTRUCTOR
- */
-function View() {
-  // alert("View constructor");
-  this._mySuperview = null;
-  this._myDivElement = null;
-}
-
-
-/**
- * Tells the View who its parent is in the view hierarchy.
- *
- * @scope    public instance method
- * @param    inSuperview    The superview for this view. 
- */
-View.prototype.setSuperview = function (inSuperview) {
-  // Util.assert(ViewInterface.isImplementedBy(inSuperview));
-
-  this._mySuperview = inSuperview;
-};
-
-
-/**
- * Returns the parent view in the view hierarchy.
- *
- * @scope    public instance method
- * @return   A View object. 
- */
-View.prototype.getSuperview = function () {
-  return this._mySuperview;
-};
-
-
-/**
- * Tells the View what HTMLDivElement to display itself in.
- *
- * @scope    public instance method
- * @param    inDivElement    The HTMLDivElement to display the view in. 
- */
-View.prototype.setDivElement = function (inDivElement) {
-  Util.assert(inDivElement instanceof HTMLDivElement);
-
-  this._myDivElement = inDivElement;
-  // this.display();
-};
-
-
-/**
- * Returns the HTMLDivElement that the view displays itself in.
- *
- * @scope    public instance method
- * @return   An HTMLDivElement. 
- */
-View.prototype.getDivElement = function () {
-  return this._myDivElement;
-};
-
-
-/**
- * Returns the Stevedore instance that this view is using.
- *
- * @scope    public instance method
- * @return   A Stevedore object. 
- */
-View.prototype.getStevedore = function () {
-  return this._mySuperview.getStevedore();
-};
-
-
-/**
- * Returns true if we are in Edit Mode.
- *
- * @scope    public instance method
- * @return   A boolean value. True if we are in Edit Mode.
- */
-View.prototype.isInEditMode = function () {
-  return this._mySuperview.isInEditMode();
-};
-
-
-/**
- * A toggle switch to set whether this view is drawn on-screen or hidden
- * off-screen.
- *
- * @scope    public instance method
- * @param    inBoolean    True if the view should be visible on screen. False if the view should be hidden off screen.
- */
-View.prototype.includeOnScreen = function (inBoolean) {
-  Util.assert(Util.isBoolean(inBoolean));
-
-  if (inBoolean) {
-    this.refresh();
-    this._myDivElement.style.display = "block";
-  } else {
-    this._myDivElement.style.display = "none";
-  }
-};
-
-
-// -------------------------------------------------------------------
-// HTML element helper methods
-// -------------------------------------------------------------------
-
-/**
- * Given an HTML element, we first call document.createElement() to 
- * create a new element, and then call appendChild() to add the new 
- * element to the given element.
- *
- * @scope    public class method
- * @param    inElement    The existing element that we should append the new element to. 
- * @param    inTagName    The HTML tag for the element ("div", "p", "span", etc.). 
- * @param    inClassName    Optional. The HTML/CSS class to assign to the new element. 
- * @param    inId    Optional. The HTML id to assign to the new element. 
- * @return   The newly created HTML element.
- */
-View.createAndAppendElement = function (inElement, inTagName, inClassName, inId) {
-  Util.assert(inElement instanceof HTMLElement);
-  Util.assert(Util.isString(inTagName));
-  Util.assert(!inClassName || Util.isString(inClassName));
-  Util.assert(!inId || Util.isString(inId));
-
-  var newElement = window.document.createElement(inTagName);
-  if (inClassName) {
-    newElement.className = inClassName;
-  }
-  if (inId) {
-    newElement.id = inId;
-  }
-  inElement.appendChild(newElement);
-  return newElement;
-};
-
-
-/**
- * Given an HTML element, we first call document.createTextNode() to 
- * create a new text node, and then call appendChild() to add the new 
- * text node to the given element.
- *
- * @scope    public class method
- * @param    inElement    The existing element that we should append the new element to. 
- * @param    inText    The text string to put in the text node.
- * @return   The newly created text node.
- */
-View.createAndAppendTextNode = function (inElement, inText) {
-  Util.assert(inElement instanceof HTMLElement);
-  Util.assert(Util.isString(inText));
-
-  var newTextNode = window.document.createTextNode(inText);
-  inElement.appendChild(newTextNode);
-  return newTextNode;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------
-



From skinner at sheep.berlios.de  Tue Apr  5 23:04:32 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 5 Apr 2005 23:04:32 +0200
Subject: [openrecord-svn] r22 - trunk/source
Message-ID: <200504052104.j35L4WwG006118@sheep.berlios.de>

Author: skinner
Date: 2005-04-05 23:04:31 +0200 (Tue, 05 Apr 2005)
New Revision: 22

Added:
   trunk/source/Item.js
   trunk/source/Rectangle.js
   trunk/source/Stevedore.js
   trunk/source/Util.js
   trunk/source/View.js
Log:
Changing file names from this_style.js to ThisStyle.js

Added: trunk/source/Item.js
===================================================================
--- trunk/source/Item.js	2005-04-05 21:00:35 UTC (rev 21)
+++ trunk/source/Item.js	2005-04-05 21:04:31 UTC (rev 22)
@@ -0,0 +1,369 @@
+/*****************************************************************************
+ item.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+ 
+// -------------------------------------------------------------------
+// Dependencies:
+//   util.js
+//   stevedore.js
+// -------------------------------------------------------------------
+
+
+/**
+ * Instances of the Item class know how to store and retrieve their
+ * attribute values.
+ *
+ * @scope    public instance constructor
+ */
+function Item(inStevedore, inUuid) {
+  Util.assert(!inUuid || Util.isNumeric(inUuid));
+  
+  this._myStevedore = inStevedore;
+  this._myUuid = inUuid;
+  this._myListOfObservers = [];
+  this._myHashTableOfAssignmentsKeyedByAttributeUuid = {};
+}
+
+
+/**
+ * Returns the display name of the item.
+ *
+ * @scope    public instance method
+ * @return   A string with a display name for the item.
+ */
+Item.prototype.toString = function () {
+  var returnString = "[Item #" + this.getUuid() + " ";
+  var listOfCategories = this.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY);
+  for (var key in listOfCategories) {
+    var category = listOfCategories[key];
+    Util.assert(category instanceof Item);
+    returnString += "(" + category.getDisplayName() + ")";
+  }
+  returnString += " \"" + this.getDisplayName() + "\"" + "]";
+  return returnString; 
+};
+
+
+// -------------------------------------------------------------------
+// Attribute Accessor Methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the display name of the item.
+ *
+ * @scope    public instance method
+ * @return   A string with a display name for the item.
+ */
+Item.prototype.getDisplayName = function (inDefaultString) {
+  return this._getStringUsingNameAttributes(Stevedore.UUID_FOR_ATTRIBUTE_NAME, null, inDefaultString);
+};
+  
+  
+/**
+ * Returns a short display name for the item.
+ *
+ * @scope    public instance method
+ * @return   A string with a short display name for the item.
+ */
+Item.prototype.getShortName = function (inDefaultString) {
+  return this._getStringUsingNameAttributes(Stevedore.UUID_FOR_ATTRIBUTE_SHORT_NAME, Stevedore.UUID_FOR_ATTRIBUTE_NAME, inDefaultString);
+};
+
+
+/**
+ * Given an attribute, this method returns the list of values that 
+ * have been assigned to that attribute for this item.
+ *
+ * For example, to find out what color Kermit is: 
+ * <pre>
+ *    var valueList = kermit.getValueListFromAttribute(color);
+ *    for (var i = 0; i < valueList.length; ++i) {
+ *      alert("Kermit is " + valueList[i]);
+ *    }
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    inAttribute    The object to be removed from the set of observers. 
+ */
+Item.prototype.getValueListFromAttribute = function (inAttribute) {
+  Util.assert(Util.isHashTable(this._myHashTableOfAssignmentsKeyedByAttributeUuid));
+  
+  var attributeUuid = this._myStevedore.getAttributeUuidFromAttributeOrUuid(inAttribute);
+  // PENDING: 
+  //   If this item isn't yet fully loaded into the cache, then we might need 
+  //   to ask our stevedore to get the attribute values for us.
+  var valueList = this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid];
+  return (valueList || null);
+};
+
+
+/**
+ * Assigns a value to an attribute in this item.
+ *
+ * Given an attribute and a value, assigns that value to the
+ * attribute of the item. For example, to make a Kermit green:
+ * <pre>
+ *    kermit.assign(color, "green");
+ * </pre>
+ * Attributes can always have more than one assigned value, so
+ * you can make Kermit be both blue and green by doing:
+ * <pre>
+ *    kermit.assign(color, "green");
+ *    kermit.assign(color, "blue");
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    inAttribute    The attribute to assign the value to, or the UUID of the attribute. 
+ * @param    inValue    The value to be assigned. 
+ */
+Item.prototype.assign = function (inAttribute, inValue) {
+  var cleanValue = inValue;
+  // alert("assign(" + inAttribute + ", " + inValue + ")");
+  if (Util.isString(inValue)) {
+    var cleanValue = Util.getCleanString(inValue);
+  }
+  var valueWasSet = this._initializeAttributeValue(inAttribute, cleanValue);
+  if (valueWasSet) {
+    this._myStevedore.markDirty(this);
+  }
+  // PENDING: 
+  //   We also need to create a change object, and we need to tell 
+  //   this._myStevedore about the change.
+  this._notifyObservers();
+};
+
+
+/**
+ * Given an attribute, removes that attribute from the item's list
+ * of attributes that have values assigned.
+ *
+ * @scope    public instance method
+ * @param    inAttribute    The attribute to clear, or the UUID of the attribute. 
+ * @return   Returns true if there was an existing attribute value to clear.
+ */
+Item.prototype.clear = function (inAttribute) {
+  Util.assert(Util.isHashTable(this._myHashTableOfAssignmentsKeyedByAttributeUuid));
+
+  var valueWasDeleted = false;
+  var attributeUuid = this._myStevedore.getAttributeUuidFromAttributeOrUuid(inAttribute);
+  var currentValueList = this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid];
+  if (currentValueList && (currentValueList.length > 0)) {
+    this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid] = null;
+    valueWasDeleted = true;
+    this._myStevedore.markDirty(this);
+  }
+  
+  // PENDING: 
+  //   We also need to create a change object, and we need to tell 
+  //   this._myStevedore about the change.
+  this._notifyObservers();
+  
+  return valueWasDeleted;
+};
+
+
+// -------------------------------------------------------------------
+// Non-Attribute Accessor Methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the UUID of the item.
+ *
+ * @scope    public instance method
+ * @return   The UUID of the item.
+ */
+Item.prototype.getUuid = function () {
+  return this._myUuid;
+};
+
+
+/**
+ * Returns a list of the UUIDs for all the attributes that this item
+ * has values assigned to.
+ *
+ * @scope    public instance method
+ * @return   A list of UUIDs of attribute items.
+ */
+Item.prototype.getListOfAttributeUuids = function () {
+  var listOfAttributeUuids = [];
+  for (var attributeUuid in this._myHashTableOfAssignmentsKeyedByAttributeUuid) {
+    listOfAttributeUuids.push(attributeUuid);
+  }
+  return listOfAttributeUuids;
+};
+
+
+/**
+ * Given a category, returns "true" if the item has been assigned to 
+ * that category.
+ *
+ * Also returns true if the item has been assigned to some category which is in
+ * turn assigned to the given category, and so on, up the chain of category 
+ * assignments.
+ *
+ * @scope    public instance method
+ * @return   A boolean.  True if the item has been assigned to the category.
+ */
+Item.prototype.isInCategory = function (inCategory) {
+  Util.assert(inCategory instanceof Item);
+
+  var valueList = this.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY);
+  var key;
+  var value;
+  
+  // look at all the categories this item is assigned to, and see if one of them is "inCategory"
+  for (key in valueList) {
+    value = valueList[key];
+    if (value == inCategory) {
+      return true;
+    }
+  }
+  
+  // look at all the categories this item is assigned to, and see if one of them
+  // is in turn in the categoery "inCategory"
+  for (key in valueList) {
+    value = valueList[key];
+    // PENDING: 
+    //   This will go into an infinite loop if there is ever a cycle in the category 
+    //   assignments, like: A is in category B, and B is in C, and C is in A.
+    //   We need to use a non-recursive search of the graph.
+    // PENDING:
+    //   Do we also need to register as an observer of something, so that if we later
+    //   become a member of that category in question, then we can notify whoever
+    //   is observing us?
+    if ((value != this) && (value.isInCategory(inCategory))) {
+      return true;
+    }
+  }
+  return false;
+};
+ 
+
+// -------------------------------------------------------------------
+// Observer/Observable Methods
+// -------------------------------------------------------------------
+
+/**
+ * Given an object, registers the object as an observer of this item, so that
+ * the object will be notified when the item changes.
+ *
+ * @scope    public instance method
+ * @param    inObserver    An object to be registered as an observer of the item. 
+ */
+Item.prototype.addObserver = function (inObserver) {
+  Util.addObjectToSet(inObserver, this._myListOfObservers);
+};
+
+
+/**
+ * Given an object, removes that object from the set of observers of this item, so 
+ * that the object will no longer be notified when the item changes.
+ *
+ * @scope    public instance method
+ * @param    inObserver    The object to be removed from the set of observers. 
+ */
+Item.prototype.removeObserver = function (inObserver) {
+  Util.removeObjectFromSet(inObserver, this._myListOfObservers);
+};
+
+
+// -------------------------------------------------------------------
+// Private Methods
+// -------------------------------------------------------------------
+
+/**
+ * Set the value of an attribute when the item is first being loaded
+ * by the Stevedore.
+ *
+ * @scope    private instance method
+ * @param    inAttribute    The attribute to assign the value to, or the UUID of the attribute. 
+ * @param    inValue    The value to be assigned. 
+ * @return   Returns true if the value was assigned.
+ */
+Item.prototype._initializeAttributeValue = function (inAttribute, inValue) {
+  Util.assert(Util.isHashTable(this._myHashTableOfAssignmentsKeyedByAttributeUuid));
+
+  var attributeUuid = this._myStevedore.getAttributeUuidFromAttributeOrUuid(inAttribute);
+  if (!this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid]) {
+    this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid] = [];
+  }
+  // var 
+  var valueList = this._myHashTableOfAssignmentsKeyedByAttributeUuid[attributeUuid];
+  var valueWasAddedFlag = Util.addObjectToSet(inValue, valueList);
+  return valueWasAddedFlag;
+};
+
+
+/**
+ * Returns some display name for the item, drawing on both the "name" and
+ * "short name" attributes.
+ *
+ * @scope    private instance method
+ * @return   A string with a display name for the item.
+ */
+Item.prototype._getStringUsingNameAttributes = function (inPrimaryAttributeUuid, inSecondaryAttributeUuid, inDefaultString) {
+  var returnString = null;
+  var nameList = this.getValueListFromAttribute(inPrimaryAttributeUuid);
+  if (nameList) {
+    returnString = nameList[0];
+  }
+  if (!returnString && inSecondaryAttributeUuid) {
+    nameList = this.getValueListFromAttribute(inSecondaryAttributeUuid);
+    if (nameList) {
+      returnString = nameList[0];
+    }
+  }
+  if (!returnString) {
+    returnString = inDefaultString;
+  }
+  if (!returnString) {
+    returnString = "";
+  }
+  return returnString;
+};
+  
+
+/**
+ * Sends messages to all the registered observers to let them know that
+ * this item has changed.
+ *
+ * @scope    private instance method
+ */
+Item.prototype._notifyObservers = function () {
+  for (var key in this._myListOfObservers) {
+    var observer = this._myListOfObservers[key];
+    observer.observedItemHasChanged(this);
+  }
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/Rectangle.js
===================================================================
--- trunk/source/Rectangle.js	2005-04-05 21:00:35 UTC (rev 21)
+++ trunk/source/Rectangle.js	2005-04-05 21:04:31 UTC (rev 22)
@@ -0,0 +1,175 @@
+// -------------------------------------------------------------------
+// Brian's 2005 JavaScript Coding Conventions
+//
+// + jslint approved
+//    + jslint should return "ok" when it looks at the code (with strictest settings)
+//    + do not use "with"
+//    + do not use "new Function"
+//    + do not use ++ and --
+// 
+// + naming conventions
+//    + capitalization
+//       + classes are initial caps (CamelCaps): "Rectangle", "FillPattern"
+//       + all variable names and methods names are mixedCaps: "fillPattern"
+//       + acronyms appear in initial caps: "myHtmlString", not "myHTMLString"
+//       + constants are all caps, with underscores: FILL_PATTERN_SOLID
+//    + file names
+//       + each file has just one public class
+//       + file names exactly match the name of the class they contain: "Rectangle.js", "FillPattern.js"
+//       + directories are all lower case, with underscores: "basic_shapes"
+//    + variable scoping prefixes
+//       + class variables are prefixed with "our"
+//       + instance variables are prefixed with "my"
+//       + global variables are prefixed with "window.global"
+//       + locally scoped variables are not prefixed
+//       + function input parameters are prefixed with "in"
+//       + private variables are prefixed with "_"
+//    + class constants are prefixed with the type of the constant -- see LAYOUT_PORTRAIT
+//    + array variables are prefixed with "ListOf" or "HashTableOf" or "ArrayOf"
+//       + var myListOfBooks = []; <-- a "List" has only values, no keys ["Apple", "Orange", "Banana"]
+//       + var myHashTableOfBooksKeyedByTitle = {}; <-- a "HashTable" is an associative array with key-value pairs
+//       + var myArrayOfBooks = new Array(); <-- an "Array" has values that are indexed by number array[23] = "Apple"
+//    + accessor methods are prefixed with "get" or "is" -- e.g. oval.getArea(), oval.isCircle()
+//       + any method that returns a value and does not change an object's state should be a "get" or "is" method
+//       + any method that does change an object's state should be a "set" method
+//    + problems are marked with "PENDING"
+//
+// + compatiblity with other browsers and other JavaScript libraries 
+//    + use "get" and "set" accessors -- do *not* assign Mozilla "getter" and "setter" methods
+//    + add methods in your own namespace -- do *not* extend built-in objects: String.prototype.toEsperanto = function ...
+//
+// + indenting, tabs, and line ending characters
+//    + 2-space indenting
+//    + only spaces, no tabs
+//    + Unix style line endings: just \n -- not \r or \r\n
+//
+// + file header and footer conventions
+//    + file name is given
+//    + copyright and license statements are included
+//    + file dependencies are listed
+//    + sections for: class constants, class properties, constructor, instance methods
+//    + "End of file" ending
+//
+// + scoping
+//    + locally scoped variables are declared before being used: "var foo", not "foo
+//    + global variables are not used, except for class names
+//    + instance methods are defined on the prototype -- see getArea()
+//    + accessor methods never have side-effects
+//
+// + PENDING
+//    + private instance properties?
+//    + private instance methods?
+//    + class methods?
+// -------------------------------------------------------------------
+
+
+
+
+/*****************************************************************************
+ rectangle.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   line.js
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// Rectangle public class constants
+// -------------------------------------------------------------------
+Rectangle.LAYOUT_PORTRAIT = "Portrait";
+Rectangle.LAYOUT_LANDSCAPE = "Landscape";
+
+Rectangle.FILL_SOLID = "Solid";
+Rectangle.FILL_EMPTY = "Empty";
+
+
+// -------------------------------------------------------------------
+// Rectangle class properties
+// -------------------------------------------------------------------
+Rectangle.ourHashTableOfColorsKeyedBySize = new Array();
+
+
+/**
+ * Each Rectangle instances represents a single rectangle.
+ *
+ * @scope    public instance constructor
+ * @syntax   var rect = new Rectangle()
+ */
+function Rectangle() {
+  // instance properties
+  this.myWidth = null;
+  this.myHeight = null;
+}
+
+
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
+/**
+ * Given two Rectangle object, returns new Rectangle large enough
+ * to encompass both of the given Rectangles.
+ *
+ * @scope    public class method
+ * @param    inRectOne    A Rectangle object. 
+ * @param    inRectTwo    A Rectangle object. 
+ * @return   A newly created Rectangle object.
+ */
+Rectangle.union = function (inRectOne, inRectTwo) {
+  Util.assert(inRectOne instanceof Rectangle);
+  Util.assert(inRectTwo instanceof Rectangle);
+
+  var newRectangle = new Rectangle();
+  newRectangle.myWidth = Math.max(inRectOne.myWidth, inRectTwo.myWidth);
+  newRectangle.myHeight = Math.max(inRectOne.myHeight, inRectTwo.myHeight);
+  return newRectangle;
+};
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the area of the rectangle.
+ *
+ * @scope    public instance method
+ * @return   A number.
+ */
+Rectangle.prototype.getArea = function () {
+  var area = this.myWidth * this.myHeight;
+  return area;
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/Stevedore.js
===================================================================
--- trunk/source/Stevedore.js	2005-04-05 21:00:35 UTC (rev 21)
+++ trunk/source/Stevedore.js	2005-04-05 21:04:31 UTC (rev 22)
@@ -0,0 +1,638 @@
+/*****************************************************************************
+ stevedore.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+ 
+// -------------------------------------------------------------------
+// Dependencies:
+//   util.js
+//   item.js
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// Stevedore public class constants
+// -------------------------------------------------------------------
+Stevedore.UUID_FOR_ATTRIBUTE_UUID = 100;
+Stevedore.UUID_FOR_ATTRIBUTE_SHORT_NAME = 101;
+Stevedore.UUID_FOR_ATTRIBUTE_NAME = 102;
+Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY = 103;
+Stevedore.UUID_FOR_ATTRIBUTE_BODY = 104;
+Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY = 105;
+Stevedore.UUID_FOR_ATTRIBUTE_USERSTAMP = 106;
+Stevedore.UUID_FOR_ATTRIBUTE_TIMESTAMP = 107;
+Stevedore.UUID_FOR_ATTRIBUTE_SECTION = 108;
+Stevedore.UUID_FOR_ATTRIBUTE_QUERY = 109;
+Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = 110;
+Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = 111;
+Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME = 112;
+
+Stevedore.UUID_FOR_CATEGORY_BOOK = 141;      // here as an example only
+Stevedore.UUID_FOR_CATEGORY_MOVIE = 142;     // here as an example only
+Stevedore.UUID_FOR_CATEGORY_ATTRIBUTE = 143;
+Stevedore.UUID_FOR_CATEGORY_CATEGORY = 144;
+Stevedore.UUID_FOR_CATEGORY_PAGE = 145;
+Stevedore.UUID_FOR_CATEGORY_SECTION = 146;
+Stevedore.UUID_FOR_CATEGORY_QUERY = 147;
+
+Stevedore.JSON_MEMBER_FORMAT = "format";
+Stevedore.JSON_MEMBER_TIMESTAMP = "timestamp";
+Stevedore.JSON_MEMBER_DATA = "data";
+Stevedore.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
+
+Stevedore.JSON_MEMBER_TYPE = "type";
+Stevedore.JSON_MEMBER_VALUE = "value";
+Stevedore.JSON_TYPE_STRING_VALUE = "StringValue";
+Stevedore.JSON_TYPE_UUID = "Uuid";
+Stevedore.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
+Stevedore.JSON_TYPE_NUMBER_VALUE = "NumberValue";
+
+
+/**
+ * Instances of the Stevedore class know how to store and retrieve items to 
+ * and from a data source.
+ *
+ * @scope    public instance constructor
+ */
+function Stevedore() {
+  this._myNextAvailableUuid = 1;
+  this._myHashTableOfItemsKeyedByUuid = {};
+  this._myCountOfNestedTransactions = 0;
+  this._myHomePageItem = null;
+  this._myXMLHttpRequestObject = this._newXMLHttpRequestObject();
+  this._myListOfDirtyItems = [];
+  // this._myDirtyFlag = false;
+  
+  this._loadBootstrapItems();
+}
+
+
+/**
+ * Returns a newly created item.
+ *
+ * @scope    public instance method
+ * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
+ * @return   A newly created item.
+ */
+Stevedore.prototype.newItem = function (inObserver) {
+  var uuid = this._myNextAvailableUuid;
+  this._myNextAvailableUuid += 1;
+  var item = new Item(this, uuid);
+  this._myHashTableOfItemsKeyedByUuid[uuid] = item;
+  item.addObserver(inObserver);
+  this.markDirty(item);
+  return item;
+};
+
+
+// -------------------------------------------------------------------
+// Accessor Methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a UUID, returns the item identified by that UUID.
+ *
+ * @scope    public instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
+ * @return   The item identified by the given UUID.
+ */
+Stevedore.prototype.getItemFromUuid = function (inUuid, inObserver) {
+  Util.assert(Util.isNumeric(inUuid));
+  
+  var item = this._myHashTableOfItemsKeyedByUuid[inUuid];
+  if (item && inObserver) {
+    item.addObserver(inObserver);
+  }
+  return item;
+};
+
+
+/**
+ * Given an attribute or an attribute's UUID, return the attribute's UUID.
+ *
+ * @scope    public instance method
+ * @param    inAttributeOrUuid    An attribute, or an attribute's UUID. 
+ * @return   The UUID of the attribute.
+ */
+Stevedore.prototype.getAttributeUuidFromAttributeOrUuid = function (inAttributeOrUuid) {
+  Util.assert((inAttributeOrUuid instanceof Item) || Util.isNumeric(inAttributeOrUuid));
+
+  var uuid = null;
+  if (Util.isNumeric(inAttributeOrUuid)) {
+    uuid = inAttributeOrUuid;
+  }
+  if (inAttributeOrUuid instanceof Item) {
+    uuid = inAttributeOrUuid.getUuid();
+  }
+  return uuid;
+};
+
+
+/**
+ * Returns the page item to be used as the home page.
+ *
+ * @scope    public instance method
+ * @return   A page item.
+ */
+Stevedore.prototype.getHomePage = function () {
+  return this._myHomePageItem; 
+};
+
+
+/**
+ * Given a query item, this method returns a list of all the items that 
+ * match the query criteria.
+ *
+ * @scope    public instance method
+ * @param    inQuery    A query item. 
+ * @return   A list of items.
+ */
+Stevedore.prototype.getListOfResultItemsForQuery = function (inQuery) {
+  Util.assert(inQuery instanceof Item);
+
+  var listOfQueryResultItems = null;
+  var listOfMatchingCategories = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var listOfMatchingItems = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
+  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
+
+  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
+
+  if (isItemMatchingQuery) {
+    listOfQueryResultItems = listOfMatchingItems;
+  }
+  
+  if (isCategoryMatchingQuery) {
+    listOfQueryResultItems = [];
+    // This is a wildly inefficient search.  But maybe it doesn't matter,
+    // because this code should all be replaced someday by server code.
+    for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
+      var item = this._myHashTableOfItemsKeyedByUuid[uuid];
+      var includeItem = true;
+      for (var key in listOfMatchingCategories) {
+        var category = listOfMatchingCategories[key];
+        if (includeItem && !(item.isInCategory(category))) {
+          includeItem = false;
+        }
+      }
+      if (includeItem) {
+        listOfQueryResultItems.push(item);
+      }
+    }
+  }
+  
+  if (!isItemMatchingQuery && !isCategoryMatchingQuery) {
+    listOfQueryResultItems = [];
+    for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
+      var item = this._myHashTableOfItemsKeyedByUuid[uuid];
+      listOfQueryResultItems.push(item);
+    }
+  }
+  
+  return listOfQueryResultItems; 
+};
+
+
+
+/**
+ * Given an item and a query item, this method modifies the attributes 
+ * of the item so that when the query is next evaluated the item will be 
+ * included in query result list.
+ *
+ * @scope    public instance method
+ * @param    inItem    An item, which will be modified so that it matches the query. 
+ * @param    inQuery    A query item. 
+ */
+Stevedore.prototype.setItemToBeIncludedInQueryResultList = function (inItem, inQuery) {
+  Util.assert(inItem instanceof Item);
+  Util.assert(inQuery instanceof Item);
+
+  var listOfMatchingCategories = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var listOfMatchingItems = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
+  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
+
+  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
+
+  if (isItemMatchingQuery) {
+    inQuery.assign(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM, inItem);
+  }
+  
+  if (isCategoryMatchingQuery) {
+    for (var key in listOfMatchingCategories) {
+      var category = listOfMatchingCategories[key];
+      if (!(inItem.isInCategory(category))) {
+        inItem.assign(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY, category);
+      }
+    }
+  }
+};
+
+
+/**
+ * Given a category, this method returns a list of all the items that have been 
+ * assigned to that category.
+ *
+ * @scope    public instance method
+ * @param    inCategory    A category item. 
+ * @return   A list of items.
+ */
+Stevedore.prototype.getListOfItemsInCategory = function (inCategory) {
+  Util.assert(inCategory instanceof Item);
+
+  var listOfItems = [];
+  for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
+    var item = this._myHashTableOfItemsKeyedByUuid[uuid];
+    if (item.isInCategory(inCategory)) {
+      listOfItems.push(item);
+    }
+    // var kindList = item.getValueListFromAttribute(Repository.ATTRIBUTE_CALLED_KIND);
+    // if (kindList) {
+    //   if (kindList[0] == inKind) {
+    //     listOfItems.push(item);
+    //   }
+    // }
+  }
+  return listOfItems; 
+};
+
+// -------------------------------------------------------------------
+// Transaction Methods
+// -------------------------------------------------------------------
+
+/**
+ * Marks the beginning of a transaction.
+ *
+ * Each time you call beginTransaction() you open a new transaction, 
+ * which you need to close later using endTransation().  Transactions
+ * may be nested, but the beginTransaction and endTransation calls
+ * always need to come in pairs. 
+ *
+ * @scope    public instance method
+ */
+Stevedore.prototype.beginTransaction = function () {
+  this._myCountOfNestedTransactions += 1;
+  // PENDING:
+  //   This is just a stub method for now.  Once we start implementing
+  //   support for transactions we'll have to put some real code here.
+};
+ 
+
+/**
+ * Marks the end of a transaction.
+ *
+ * @scope    public instance method
+ */
+Stevedore.prototype.endTransaction = function () {
+  this._myCountOfNestedTransactions -= 1;
+  Util.assert(this._myCountOfNestedTransactions >= 0);
+  // PENDING:
+  //   This is just a stub method for now.  Once we start implementing
+  //   support for transactions we'll have to put some real code here.
+  if (this._myCountOfNestedTransactions === 0) {
+    RootView.displayStatusBlurb(this._myListOfDirtyItems.length + " changes made");
+    if (this._myListOfDirtyItems && (this._myListOfDirtyItems.length > 0)) {
+      this._saveChangesToServer();
+      this._myListOfDirtyItems = [];
+    }
+  }
+};
+
+
+/**
+ * Marks an item as having been edited during the transaction.
+ *
+ * @scope    public instance method
+ */
+Stevedore.prototype.markDirty = function (anItem) {
+  Util.assert(Util.isArray(this._myListOfDirtyItems));
+  this._myListOfDirtyItems.push(anItem);
+};
+
+
+// -------------------------------------------------------------------
+// Private Methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a UUID, either (a) returns the existing item identified by that UUID, 
+ * or (b) creates an new item object, set its UUID, and returns that object.
+ *
+ * @scope    public instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
+ * @return   The item identified by the given UUID.
+ */
+Stevedore.prototype._getItemFromUuidOrBootstrapItem = function (inUuid, inObserver) {
+  var item = this.getItemFromUuid(inUuid, inObserver);
+  if (!item) {
+    item = new Item(this, inUuid);
+    this._myHashTableOfItemsKeyedByUuid[inUuid] = item;
+    this._myNextAvailableUuid = Math.max(this._myNextAvailableUuid, (inUuid + 1));   
+    item.addObserver(inObserver);
+  }
+  return item;
+};
+
+
+/**
+ * Loads the basic items that needed in order to anything else, like
+ * the items for "name", "attribute", and "category".
+ *
+ * @scope    private instance method
+ */
+Stevedore.prototype._loadBootstrapItems = function () {
+  var uuid;
+  var name;
+  var item;
+  
+  // associate display names with the UUIDs of all the attributes
+  var hashTableOfAttributeNamesKeyedByUuid = {};
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_SHORT_NAME] = "Short Name";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_NAME] = "Name";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY] = "Summary";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_BODY] = "Body";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY] = "Category";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_USERSTAMP] = "Userstamp";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_TIMESTAMP] = "Timestamp";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_SECTION] = "Section";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY] = "Query";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = "Matching Item";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME] = "Layout Name";
+
+  // create all the Item objects for the attributes
+  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
+    this._getItemFromUuidOrBootstrapItem(uuid);
+  }
+  
+  // associate display names with the UUIDs of all the categories
+  var hashTableOfCategoryNamesKeyedByUuid = {};
+  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_ATTRIBUTE] = "Attribute";
+  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_CATEGORY] = "Category";
+  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_PAGE] = "Page";
+  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_SECTION] = "Section";
+  hashTableOfCategoryNamesKeyedByUuid[Stevedore.UUID_FOR_CATEGORY_QUERY] = "Query";
+
+  // create all the Item objects for the categories
+  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
+    this._getItemFromUuidOrBootstrapItem(uuid);
+  }
+ 
+  // set the display names of all the attributes, and put them in the category called "Attribute"
+  var categoryAttribute = this._getItemFromUuidOrBootstrapItem(Stevedore.UUID_FOR_CATEGORY_ATTRIBUTE);
+  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
+    item = this.getItemFromUuid(uuid);
+    name = hashTableOfAttributeNamesKeyedByUuid[uuid];
+    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_NAME, name);
+    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY, categoryAttribute);
+  }
+  
+  // set the display names of all the categories, and put them in the category called "Category"
+  var categoryCategory = this._getItemFromUuidOrBootstrapItem(Stevedore.UUID_FOR_CATEGORY_CATEGORY);
+  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
+    item = this.getItemFromUuid(uuid);
+    name = hashTableOfCategoryNamesKeyedByUuid[uuid];
+    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_NAME, name);
+    item._initializeAttributeValue(Stevedore.UUID_FOR_ATTRIBUTE_CATEGORY, categoryCategory);
+  }
+  
+};
+
+
+/**
+ * Loads sample data.
+ *
+ * Given a set of sample data in JSON format, bootstraps 
+ * new instances of items corresponding to the sample data.
+ * 
+ * @scope    private instance method
+ * @param    inDataSet    A list of items to be loaded, in JSON format. 
+ */
+Stevedore.prototype._loadItemsFromList = function (inDataSet) {
+  Util.assert(Util.isArray(inDataSet) || Util.isObject(inDataSet));
+  
+  var uuidValue;
+  var uuid;
+  var item;
+  var listOfItems;
+  
+  if (Util.isArray(inDataSet)) {
+    // this is an old, pre-March-15-2005, file format
+    listOfItems = inDataSet;
+  } else {
+    // this is newer file format, circa March-16-2005
+    var fileFormat = inDataSet[Stevedore.JSON_MEMBER_FORMAT];
+    Util.assert(fileFormat == Stevedore.JSON_FORMAT_2005_MARCH);
+    listOfItems = inDataSet[Stevedore.JSON_MEMBER_DATA];
+    Util.assert(Util.isArray(listOfItems));
+  }
+  
+  for (var entryKey in listOfItems) {
+    var entry = listOfItems[entryKey];
+    uuidValue = entry[Stevedore.UUID_FOR_ATTRIBUTE_UUID];
+    uuid = uuidValue[Stevedore.JSON_MEMBER_VALUE];
+    item = this._getItemFromUuidOrBootstrapItem(uuid);
+    for (var propertyKey in entry) {
+      if (propertyKey != Stevedore.UUID_FOR_ATTRIBUTE_UUID) { 
+        var propertyValue = entry[propertyKey];
+        var attributeUuid = propertyKey;
+        Util.assert(Util.isArray(propertyValue));
+        for (var valueKey in propertyValue) {
+          var valueObject = propertyValue[valueKey];
+          var valueType = valueObject[Stevedore.JSON_MEMBER_TYPE];
+          var valueValue = valueObject[Stevedore.JSON_MEMBER_VALUE];
+          var finalValue = null;
+          switch (valueType) {
+            case Stevedore.JSON_TYPE_FOREIGN_UUID:
+              finalValue = this._getItemFromUuidOrBootstrapItem(valueValue);
+              break;
+            case Stevedore.JSON_TYPE_STRING_VALUE:
+              finalValue = valueValue;
+              break;
+            case Stevedore.JSON_TYPE_NUMBER_VALUE:
+              finalValue = valueValue;
+              break;
+          }
+          item._initializeAttributeValue(attributeUuid, finalValue);
+        }
+      }
+    }
+  }
+  
+  // PENDING:
+  // If we don't have a designated "home page" for this data set, then just
+  // look through all the items and set the home page to be the first page 
+  // item we come across.  This, of course, is a hack.
+  if (!this._myHomePageItem) {
+    var categoryPage = this.getItemFromUuid(Stevedore.UUID_FOR_CATEGORY_PAGE);
+    for (uuid in this._myHashTableOfItemsKeyedByUuid) {
+      item = this.getItemFromUuid(uuid);
+      if (item.isInCategory(categoryPage)) {
+        this._myHomePageItem = this._myHomePageItem || item;
+      }
+    }
+  }
+};
+
+
+/**
+ * Returns a huge string, containing a JavaScript "object literal"
+ * representation of the entire cache.
+ *
+ * @scope    private instance method
+ * @return   A string in JavaScript "object literal" format, representing all the items in the cache. 
+ */
+Stevedore.prototype._getJsonStringRepresentingAllItems = function () {
+  var timestamp = new Date();
+  var timestampString = timestamp.toString();
+  var listOfStrings = [];
+  
+  listOfStrings.push('// Repository dump, in JSON format' + '\n');
+  listOfStrings.push('Stevedore._ourRepositoryInJsonFormat = {' + '\n');
+  listOfStrings.push('  "' + Stevedore.JSON_MEMBER_FORMAT + '": "' + Stevedore.JSON_FORMAT_2005_MARCH + '", ' + '\n');
+  listOfStrings.push('  "' + Stevedore.JSON_MEMBER_TIMESTAMP + '": "' + timestampString + '", ' + '\n');
+  listOfStrings.push('  "' + Stevedore.JSON_MEMBER_DATA + '": ' + '[' + '\n');
+  for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
+    var uuidInJsonForm = '{ "' + Stevedore.JSON_MEMBER_TYPE + '": "' + Stevedore.JSON_TYPE_UUID + '", "' + Stevedore.JSON_MEMBER_VALUE + '": ' + uuid + ' }';
+    listOfStrings.push('  { "' + Stevedore.UUID_FOR_ATTRIBUTE_UUID + '": ' + uuidInJsonForm + ',' + '\n');
+    var item = this.getItemFromUuid(uuid);
+    var listOfAttributeUuids = item.getListOfAttributeUuids();
+    for (var attributeKey in listOfAttributeUuids) {
+      var attributeUuid = listOfAttributeUuids[attributeKey];
+      var attribute = this.getItemFromUuid(attributeUuid);
+      Util.assert(attribute instanceof Item);
+      var attributeName = attribute.getDisplayName();
+      var attributeNameSubstring = (attributeName + '          ').substring(0, 10);
+      listOfStrings.push('    /* ' + attributeNameSubstring + ' */   ');
+      listOfStrings.push('"' + attributeUuid + '": [');
+      var listOfAttributeValues = item.getValueListFromAttribute(attribute);
+      for (var valueKey in listOfAttributeValues) {
+        var value = listOfAttributeValues[valueKey];
+        var pickleString = "";
+        var typeString = null;
+        var valueString = null;
+        if (Util.isNumber(value)) {
+          typeString = Stevedore.JSON_TYPE_NUMBER_VALUE;
+          valueString = value;
+        }
+        if (Util.isString(value)) {
+          typeString = Stevedore.JSON_TYPE_STRING_VALUE;
+          valueString = '"' + value + '"';
+        }
+        if (value instanceof Item) {
+          typeString = Stevedore.JSON_TYPE_FOREIGN_UUID;
+          valueString = value.getUuid();
+        }
+        pickleString = '{ "' + Stevedore.JSON_MEMBER_TYPE + '": "' + typeString + '", "' + Stevedore.JSON_MEMBER_VALUE + '": ' + valueString + ' }';
+        listOfStrings.push(pickleString + ', ');
+      }
+      listOfStrings.push('],\n');
+    }
+    listOfStrings.push("  }," + "\n");
+  }
+  listOfStrings.push("]};" + "\n");
+  var finalString = listOfStrings.join("");
+  return finalString;
+};
+
+
+/**
+ * Returns a newly created XMLHttpRequest object.
+ *
+ * @scope    private instance method
+ * @return   A newly created XMLHttpRequest object. 
+ */
+Stevedore.prototype._newXMLHttpRequestObject = function () {
+  var newXMLHttpRequestObject = null;
+  if (window.XMLHttpRequest) {
+    newXMLHttpRequestObject = new XMLHttpRequest();
+  } else {
+    if (window.ActiveXObject) {
+      newXMLHttpRequestObject = new ActiveXObject("Microsoft.XMLHTTP");
+    }
+  }
+  if (newXMLHttpRequestObject) {
+    newXMLHttpRequestObject.onreadystatechange = function() {
+      alert("onreadystatechange:\n" +
+        "readyState: " + this._myXMLHttpRequestObject.readyState + "\n" +
+        "status: " + this._myXMLHttpRequestObject.status + "\n" +
+        "statusText: " + this._myXMLHttpRequestObject.statusText + "\n" +
+        "responseText: " + this._myXMLHttpRequestObject.responseText + "\n");
+    };
+  }
+  return newXMLHttpRequestObject;
+};
+
+
+/**
+ * Sends all the changed items to the server, so that the server can save the
+ * changes.
+ *
+ * @scope    private instance method
+ */
+Stevedore.prototype._saveChangesToServer = function () {
+  var saveChanges = false;
+  if (window.location) {
+    if (window.location.protocol == "http:") {
+      saveChanges = true;
+    }
+    if (window.location.protocol == "file:") {
+      alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
+    }
+  }
+  
+  if (saveChanges) {
+    var url = "save_changes.php";
+    this._myXMLHttpRequestObject.open("POST", url, true);
+    this._myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/xml");
+    this._myXMLHttpRequestObject.send(this._getJsonStringRepresentingAllItems());
+  }
+  
+};
+
+
+/**
+ * This is the event handler method that we register with the XMLHttpRequest
+ * object's onreadystatechange property.
+ *
+ * @scope    private class method
+ */
+Stevedore._handleStateChangeForXMLHttpRequestObject = function () {
+  alert("_handleStateChangeForXMLHttpRequestObject()\n"); // +
+  //  "readyState: " + this._myXMLHttpRequestObject.readyState + "\n" +
+  //  "status: " + this._myXMLHttpRequestObject.status + "\n" +
+  //  "statusText: " + this._myXMLHttpRequestObject.statusText + "\n" +
+  //  "responseText: " + this._myXMLHttpRequestObject.responseText + "\n");
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-04-05 21:00:35 UTC (rev 21)
+++ trunk/source/Util.js	2005-04-05 21:04:31 UTC (rev 22)
@@ -0,0 +1,411 @@
+/*****************************************************************************
+ util.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+/**
+ * The Util class offers general utility methods that might
+ * be useful in a wide variety of applications.
+ *
+ * There is no need to ever call this constructor.  All the Util
+ * methods are class methods, not instance methods, and the only 
+ * reason this constructor exists is to cause the name "Util"
+ * to be a globally-scoped class name, which the class methods 
+ * can then be attached to.
+ *
+ * @scope    public instance constructor
+ * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ */
+function Util() {
+  throw new Error("Util is a static class. You can't create instances of it.");
+}
+
+
+// -------------------------------------------------------------------
+// Util public class constants
+// -------------------------------------------------------------------
+Util.ASCII_VALUE_FOR_RETURN = 13;
+Util.ASCII_VALUE_FOR_TAB = 9;
+Util.ASCII_VALUE_FOR_ESCAPE = 27;
+
+// &#37; = %
+// &#38; = &
+// &#39; = '
+// &#40; = (
+Util.ASCII_VALUE_FOR_LEFT_ARROW = 37;  // 123
+Util.ASCII_VALUE_FOR_UP_ARROW = 38;    // 126
+Util.ASCII_VALUE_FOR_RIGHT_ARROW = 39; // 124
+Util.ASCII_VALUE_FOR_DOWN_ARROW = 40;  // 125
+
+
+// -------------------------------------------------------------------
+// String manipulation methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a copy of the input string, cleaned up so that it can be 
+ * included in a valid HTML page.
+ *
+ * Returns a copy of the string, but with the original characters 
+ * '<', '>', and '&' all replaced by their HTML entities: "&lt;", 
+ * "&gt;", and "&amp;".  Allows strings to displayed on HTML pages.
+ *
+ * @scope    public class method
+ * @syntax   var cleanString = Util.getCleanString(dirtyString);
+ * @param    inString    A dirty string to be cleaned up.
+ * @return   String
+ */
+Util.getCleanString = function(inString) {
+  Util.assert(Util.isString(inString));
+  
+  var returnString = inString;
+  returnString = returnString.replace(/&/g, "&amp;");
+  returnString = returnString.replace(/</g, "&lt;");
+  returnString = returnString.replace(/>/g, "&gt;");
+  returnString = returnString.replace(/"/g, "&quot;");
+  returnString = returnString.replace(/\n/g, " ");
+  return returnString;
+};
+
+
+// -------------------------------------------------------------------
+// Assertions and error handling methods
+// -------------------------------------------------------------------
+
+/**
+ * Registers a function to be used to report errors.
+ *
+ * @scope    public class method
+ * @param    inFunction    A function which takes a single string argument. 
+ */
+Util.setErrorReportCallback = function (inFunction) {
+  Util.ourErrorReporter = inFunction;
+};
+
+
+/**
+ * This defaultErrorReporter simply calls "alert" to report errors.
+ *
+ * @scope    public class method
+ * @param    inText    The error message to be reported. 
+ */
+Util.defaultErrorReporter = function (inText) {
+  window.alert(inText);
+};
+Util.ourErrorReporter = Util.defaultErrorReporter;
+
+ 
+ /**
+ * Pops up an alert box showing an error message.
+ *
+ * @scope    public class method
+ * @param    inMessage    A string describing the error.
+ * @param    inUrl    A string that gives the name of the file where the error was found.
+ * @param    inLine    The line number where the error was found.
+ */
+Util.handleError = function (inMessage, inUrl, inLine) {
+  Util.ourErrorReporter("Util.handleError()\n" + inMessage + "\nline: " + inLine + "\nURL: " + inUrl);
+};
+
+
+/**
+ * Pops up an alert box if the assertion fails.
+ *
+ * If the asserted condition is true, this method does nothing. If the condition
+ * is false, this method pops up an alert box.  The alert box explains that an
+ * assertion failed, and it gives a stack trace showing the file name and line
+ * number where the assertion failed.
+ *
+ * @scope    public class method
+ * @param    inBoolean    A boolean value, which needs to be true for the assertion to succeed. 
+ * @param    inMessage    Optional. A string describing the assertion.
+ */
+Util.assert = function (inBoolean, inMessage) {
+  var exception = new Error();  // create an exception, just to get a stack trace
+  var stackString = exception.stack;
+  var stackList = stackString.split("\n");
+  stackList.shift(); // get rid of the "ReferenceError()@:0" at the start of the list
+  stackList.shift(); // get rid of the "(false)@file ... util.js:67" at the start of the list
+  stackList.pop();   // get rid of the trailing "\n"
+  stackList.pop();   // get rid of the "@:0" at the end of the list
+  stackString = stackList.join("\n");
+  if (Util.isBoolean(inBoolean)) {
+    if (!inBoolean) {    
+      Util.ourErrorReporter("An assert statement failed.\nThe method Util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
+    }
+  } else {
+    Util.ourErrorReporter("An assert statement went sour.\nThe method Util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Type checking methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns true if the given value is a string.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is a string.
+ */
+Util.isString = function (inValue) {
+  return (typeof(inValue) == "string");
+};
+
+
+/**
+ * Returns true if the given value is a number (and is finite number).
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is a number.
+ */
+Util.isNumber = function (inValue) {
+  return ((typeof(inValue) == "number") && isFinite(inValue));
+};
+
+
+/**
+ * Returns true if the given value is a number or a string that 
+ * represents a number.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is a number or a string that represents a number.
+ */
+Util.isNumeric = function (inValue) {
+  var isNumber = Util.isNumber(inValue);
+  if (isNumber) {
+    return true;
+  }
+  var isNumeric = Util.isString(inValue) && Util.isNumber(parseInt(inValue));
+  return isNumeric;
+};
+
+
+/**
+ * Returns true if the given value is a boolean.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is a boolean.
+ */
+Util.isBoolean = function (inValue) {
+  return (typeof(inValue) == "boolean");
+};
+
+
+/**
+ * Returns true if the given value is an object.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is an object.
+ */
+Util.isObject = function (inValue) {
+  return (inValue && (typeof(inValue) == "object"));
+};
+
+
+/**
+ * Returns true if the given value is an array.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is an array.
+ */
+Util.isArray = function (inValue) {
+  return (inValue && (typeof(inValue) == "object") && (inValue.constructor == Array));
+};
+
+
+/**
+ * Returns true if the given value is a hash table.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is a hash table.
+ */
+Util.isHashTable = function (inValue) {
+  return (inValue && (typeof(inValue) == "object"));  // PENDING: we should be more restrictive!
+};
+
+
+// -------------------------------------------------------------------
+// Methods that operate on Sets
+// -------------------------------------------------------------------
+
+/**
+ * Returns true if the given object is a member of the set.  
+ * 
+ * @scope    public class method
+ * @param    inObject    The object to look for. 
+ * @param    inSet    The Array to look for the object in. 
+ * @return   Returns true if the object was found in the set.
+ */
+Util.isObjectInSet = function (inObject, inSet) {
+  Util.assert(Util.isArray(inSet));
+  
+  for (var i=0; i<inSet.length; i+=1) {
+    if (inSet[i] == inObject) {
+      return true;
+    }
+  }
+  return false;
+};
+
+
+/**
+ * Removes an object from an array.  
+ * 
+ * @scope    public class method
+ * @param    inObject    The object to be removed. 
+ * @param    inSet    The Array that the object should be removed from. 
+ * @return   Returns true if the object was removed from the array.
+ */
+Util.removeObjectFromSet = function (inObject, inSet) {
+  Util.assert(Util.isArray(inSet));
+  
+  if (!inObject) {
+    return false;
+  }
+  for (var i=0; i<inSet.length; i+=1) {
+    if (inSet[i] == inObject) {
+      inSet.splice(i, 1);
+      return true;
+    }
+  }
+  return false;
+};
+
+
+/**
+ * This method is similar to array.push(object), but it will only add the
+ * object to the array if the object is not already in the array.  
+ * 
+ * @scope    public class method
+ * @param    inObject    The object to be added. 
+ * @param    inSet    The Array that the object should be added to. 
+ * @return   Returns true if the object was added to the array.
+ */
+Util.addObjectToSet = function (inObject, inSet) {
+  Util.assert(Util.isArray(inSet));
+
+  if (!inObject) {
+    return false;
+  }
+  if (Util.isObjectInSet(inObject, inSet)) {
+    return false;
+  }
+  inSet.push(inObject);
+  return true;
+};
+
+
+// -------------------------------------------------------------------
+// Methods that deal with event handling
+// -------------------------------------------------------------------
+
+/**
+ * Given an event object, returns the HTML element that was the 
+ * target of the event.  
+ * 
+ * Should work for IE, Mozilla, and _some_ other browsers.  
+ *
+ * @scope    public class method
+ * @param    inEventObject    An event object. 
+ * @return   An HTML element.
+ */
+Util.getTargetFromEvent = function (inEventObject) {
+  var target = null;
+  if (inEventObject.target) {
+    target = inEventObject.target;
+  } else {
+    if (inEventObject.srcElement) {
+      target = inEventObject.srcElement;
+    }
+  }
+  if (target && target.nodeType == 3) { // defeat Safari bug
+    target = target.parentNode;
+  }
+  return target;
+};
+
+
+/**
+ * A cross-browser compatibility method for registering event listeners. 
+ *
+ * @scope public class method
+ * @param inElement    An HTMLElement.
+ * @param inEventType    The type of event (e.g. "mousedown", "click").
+ * @param inCallback    The function to call when the event happens.
+ * @param inCaptures    True if the event should be captured by this function.
+ */
+Util.addEventListener = function (inElement, inEventType, inCallback, inCaptures) {
+  if (inElement.addEventListener) {
+    // for DOM Level 2 browsers, like Firefox
+    inElement.addEventListener(inEventType, inCallback, inCaptures);
+  } else {
+    if (inElement.attachEvent) {
+      // for Internet Explorer
+      inElement.attachEvent("on"+inEventType, inCallback, inCaptures);
+    }
+  } 
+};
+
+// -------------------------------------------------------------------
+// HTML document manipulation
+// -------------------------------------------------------------------
+
+/**
+ * Looks at all the anchor links in the document, finds the ones with the 
+ * attribute rel="external", and sets the target attribute of those anchor
+ * links so that the links will open in a new browser window.  
+ * 
+ * @scope    public class method
+ */
+Util.setTargetsForExternalLinks = function () {
+  if (!window.document.getElementsByTagName) {
+    return;
+  }
+  var listOfAnchorElements = window.document.getElementsByTagName("a");
+  var regExp = new RegExp("\\b" + "external" + "\\b");
+  for (var i=0; i<listOfAnchorElements.length; i+=1) {
+    var anchor = listOfAnchorElements[i];
+    if (anchor.getAttribute("href") && (anchor.getAttribute("rel")) && (anchor.getAttribute("rel").search(regExp) != -1)) {
+      anchor.target = "_blank";
+    }
+  }
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/View.js
===================================================================
--- trunk/source/View.js	2005-04-05 21:00:35 UTC (rev 21)
+++ trunk/source/View.js	2005-04-05 21:04:31 UTC (rev 22)
@@ -0,0 +1,198 @@
+/*****************************************************************************
+ view.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   util.js
+// -------------------------------------------------------------------
+
+
+/**
+ * The View class serves as an abstract superclass for other view classes.
+ *
+ * @scope    public instance constructor
+ * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ */
+function View() {
+  // alert("View constructor");
+  this._mySuperview = null;
+  this._myDivElement = null;
+}
+
+
+/**
+ * Tells the View who its parent is in the view hierarchy.
+ *
+ * @scope    public instance method
+ * @param    inSuperview    The superview for this view. 
+ */
+View.prototype.setSuperview = function (inSuperview) {
+  // Util.assert(ViewInterface.isImplementedBy(inSuperview));
+
+  this._mySuperview = inSuperview;
+};
+
+
+/**
+ * Returns the parent view in the view hierarchy.
+ *
+ * @scope    public instance method
+ * @return   A View object. 
+ */
+View.prototype.getSuperview = function () {
+  return this._mySuperview;
+};
+
+
+/**
+ * Tells the View what HTMLDivElement to display itself in.
+ *
+ * @scope    public instance method
+ * @param    inDivElement    The HTMLDivElement to display the view in. 
+ */
+View.prototype.setDivElement = function (inDivElement) {
+  Util.assert(inDivElement instanceof HTMLDivElement);
+
+  this._myDivElement = inDivElement;
+  // this.display();
+};
+
+
+/**
+ * Returns the HTMLDivElement that the view displays itself in.
+ *
+ * @scope    public instance method
+ * @return   An HTMLDivElement. 
+ */
+View.prototype.getDivElement = function () {
+  return this._myDivElement;
+};
+
+
+/**
+ * Returns the Stevedore instance that this view is using.
+ *
+ * @scope    public instance method
+ * @return   A Stevedore object. 
+ */
+View.prototype.getStevedore = function () {
+  return this._mySuperview.getStevedore();
+};
+
+
+/**
+ * Returns true if we are in Edit Mode.
+ *
+ * @scope    public instance method
+ * @return   A boolean value. True if we are in Edit Mode.
+ */
+View.prototype.isInEditMode = function () {
+  return this._mySuperview.isInEditMode();
+};
+
+
+/**
+ * A toggle switch to set whether this view is drawn on-screen or hidden
+ * off-screen.
+ *
+ * @scope    public instance method
+ * @param    inBoolean    True if the view should be visible on screen. False if the view should be hidden off screen.
+ */
+View.prototype.includeOnScreen = function (inBoolean) {
+  Util.assert(Util.isBoolean(inBoolean));
+
+  if (inBoolean) {
+    this.refresh();
+    this._myDivElement.style.display = "block";
+  } else {
+    this._myDivElement.style.display = "none";
+  }
+};
+
+
+// -------------------------------------------------------------------
+// HTML element helper methods
+// -------------------------------------------------------------------
+
+/**
+ * Given an HTML element, we first call document.createElement() to 
+ * create a new element, and then call appendChild() to add the new 
+ * element to the given element.
+ *
+ * @scope    public class method
+ * @param    inElement    The existing element that we should append the new element to. 
+ * @param    inTagName    The HTML tag for the element ("div", "p", "span", etc.). 
+ * @param    inClassName    Optional. The HTML/CSS class to assign to the new element. 
+ * @param    inId    Optional. The HTML id to assign to the new element. 
+ * @return   The newly created HTML element.
+ */
+View.createAndAppendElement = function (inElement, inTagName, inClassName, inId) {
+  Util.assert(inElement instanceof HTMLElement);
+  Util.assert(Util.isString(inTagName));
+  Util.assert(!inClassName || Util.isString(inClassName));
+  Util.assert(!inId || Util.isString(inId));
+
+  var newElement = window.document.createElement(inTagName);
+  if (inClassName) {
+    newElement.className = inClassName;
+  }
+  if (inId) {
+    newElement.id = inId;
+  }
+  inElement.appendChild(newElement);
+  return newElement;
+};
+
+
+/**
+ * Given an HTML element, we first call document.createTextNode() to 
+ * create a new text node, and then call appendChild() to add the new 
+ * text node to the given element.
+ *
+ * @scope    public class method
+ * @param    inElement    The existing element that we should append the new element to. 
+ * @param    inText    The text string to put in the text node.
+ * @return   The newly created text node.
+ */
+View.createAndAppendTextNode = function (inElement, inText) {
+  Util.assert(inElement instanceof HTMLElement);
+  Util.assert(Util.isString(inText));
+
+  var newTextNode = window.document.createTextNode(inText);
+  inElement.appendChild(newTextNode);
+  return newTextNode;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------
+



From skinner at sheep.berlios.de  Tue Apr  5 23:07:31 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 5 Apr 2005 23:07:31 +0200
Subject: [openrecord-svn] r23 - trunk/source
Message-ID: <200504052107.j35L7V7N006296@sheep.berlios.de>

Author: skinner
Date: 2005-04-05 23:07:31 +0200 (Tue, 05 Apr 2005)
New Revision: 23

Modified:
   trunk/source/test_page.html
Log:
Changing file names from this_style.js to ThisStyle.js

Modified: trunk/source/test_page.html
===================================================================
--- trunk/source/test_page.html	2005-04-05 21:04:31 UTC (rev 22)
+++ trunk/source/test_page.html	2005-04-05 21:07:31 UTC (rev 23)
@@ -5,20 +5,20 @@
   <head>
     <title>openrecord.org - Test Page</title>
     <link rel="stylesheet" type="text/css" href="base_style.css" />
-    <script type="text/javascript" src="util.js"></script>
-    <script type="text/javascript" src="view.js"></script>
-    <script type="text/javascript" src="root_view.js"></script>
-    <script type="text/javascript" src="item_view.js"></script>
-    <script type="text/javascript" src="page_view.js"></script>
-    <script type="text/javascript" src="section_view.js"></script>
-    <script type="text/javascript" src="text_view.js"></script>
-    <script type="text/javascript" src="table_layout.js"></script>
-    <script type="text/javascript" src="outline_layout.js"></script>
-    <script type="text/javascript" src="detail_layout.js"></script>
-    <script type="text/javascript" src="bar_chart_layout.js"></script>
+    <script type="text/javascript" src="Util.js"></script>
+    <script type="text/javascript" src="View.js"></script>
+    <script type="text/javascript" src="RootView.js"></script>
+    <script type="text/javascript" src="ItemView.js"></script>
+    <script type="text/javascript" src="PageView.js"></script>
+    <script type="text/javascript" src="SectionView.js"></script>
+    <script type="text/javascript" src="TextView.js"></script>
+    <script type="text/javascript" src="TablePlugin.js"></script>
+    <script type="text/javascript" src="OutlinePlugin.js"></script>
+    <script type="text/javascript" src="DetailPlugin.js"></script>
+    <script type="text/javascript" src="BarChartPlugin.js"></script>
     <script type="text/javascript" src="test_page.js"></script>
-    <script type="text/javascript" src="item.js"></script>
-    <script type="text/javascript" src="stevedore.js"></script>
+    <script type="text/javascript" src="Item.js"></script>
+    <script type="text/javascript" src="Stevedore.js"></script>
     <script type="text/javascript" src="datastore.js"></script>
   </head>
   



From skinner at sheep.berlios.de  Tue Apr  5 23:54:38 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 5 Apr 2005 23:54:38 +0200
Subject: [openrecord-svn] r24 - trunk/source
Message-ID: <200504052154.j35LscNJ009021@sheep.berlios.de>

Author: skinner
Date: 2005-04-05 23:54:37 +0200 (Tue, 05 Apr 2005)
New Revision: 24

Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/Item.js
   trunk/source/ItemView.js
   trunk/source/OutlinePlugin.js
   trunk/source/PageView.js
   trunk/source/Rectangle.js
   trunk/source/RootView.js
   trunk/source/SectionView.js
   trunk/source/Stevedore.js
   trunk/source/TablePlugin.js
   trunk/source/base_style.css
   trunk/source/datastore.js
Log:
Changed file names from this_style.js to ThisStyle.js.  Changed all the "layouts" to be called "plugins".

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/BarChartPlugin.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- bar_chart_layout.js
+ BarChartPlugin.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,53 +31,53 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   repository.js
-//   section_view.js
-//   page_view.js
-//   util.js
+//   Stevedore.js
+//   SectionView.js
+//   PageView.js
+//   Util.js
 // -------------------------------------------------------------------
 
 
 // -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
+// Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_BAR_CHART] = BarChartLayout;
+SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_BAR_CHART] = BarChartPlugin;
 
 
 /**
- * A BarChartLayout displays a set of content items for a SectionView. 
+ * A BarChartPlugin displays a set of content items for a SectionView. 
  *
  * @scope    public instance constructor
  * @extends  View
  * @param    inSectionView    The SectionView that serves as the superview for this view. 
  * @param    inDivElement    The HTMLDivElement to display this view in. 
- * @syntax   var barChart = new BarChartLayout()
+ * @syntax   var barChart = new BarChartPlugin()
  */
-BarChartLayout.prototype = new View();  // makes BarChartLayout be a subclass of View
-function BarChartLayout(inSectionView, inDivElement) {
+BarChartPlugin.prototype = new View();  // makes BarChartPlugin be a subclass of View
+function BarChartPlugin(inSectionView, inDivElement) {
   this.setSuperview(inSectionView);
   this.setDivElement(inDivElement);
 }
 
 
 /**
- * Returns the registered name of this type of layout.
+ * Returns the registered name of this plugin.
  *
  * @scope    public instance method
  * @return   A string.
  */
-BarChartLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_BAR_CHART;
+BarChartPlugin.prototype.getPluginName = function () {
+  return SectionView.PLUGIN_BAR_CHART;
 };
 
 
 /**
- * Re-creates all the HTML for the BarChartLayout, and hands the HTML to the 
+ * Re-creates all the HTML for the BarChartPlugin, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-BarChartLayout.prototype.refresh = function () {
+BarChartPlugin.prototype.refresh = function () {
   var listOfStrings = [];
 
   var contentItem = null;
@@ -177,7 +177,7 @@
  *
  * @scope    public instance method
  */
-BarChartLayout.prototype.endOfLife = function () {
+BarChartPlugin.prototype.endOfLife = function () {
   this.getDivElement().innerHTML = "";
 };
 

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/DetailPlugin.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- detail_layout.js
+ DetailPlugin.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,52 +31,52 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   repository.js
-//   section_view.js
-//   util.js
+//   Stevedore.js
+//   SectionView.js
+//   Util.js
 // -------------------------------------------------------------------
 
 
 // -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
+// Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_DETAIL] = DetailLayout;
+SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_DETAIL] = DetailPlugin;
 
 
 /**
- * A DetailLayout display one or more content items. 
+ * A DetailPlugin display one or more content items. 
  *
  * @scope    public instance constructor
  * @extends  View
  * @param    inSuperView    The superview for this view. 
  * @param    inDivElement    The HTMLDivElement to display this view in. 
- * @syntax   var detailLayout = new DetailLayout()
+ * @syntax   var detailPlugin = new DetailPlugin()
  */
-DetailLayout.prototype = new View();  // makes DetailLayout be a subclass of View
-function DetailLayout(inSuperView, inDivElement) {
+DetailPlugin.prototype = new View();  // makes DetailPlugin be a subclass of View
+function DetailPlugin(inSuperView, inDivElement) {
   this.setSuperview(inSuperView);
   this.setDivElement(inDivElement);  
 }
 
 
 /**
- * Returns the registered name of this type of layout.
+ * Returns the registered name of this plugin.
  *
  * @scope    public instance method
  * @return   A string.
  */
-DetailLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_DETAIL;
+DetailPlugin.prototype.getPluginName = function () {
+  return SectionView.PLUGIN_DETAIL;
 };
 
   
 /**
- * Re-creates all the HTML for the DetailLayout, and hands the HTML to the 
+ * Re-creates all the HTML for the DetailPlugin, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-DetailLayout.prototype.refresh = function () {
+DetailPlugin.prototype.refresh = function () {
   var listOfStrings = [];
 
   // for each content item, add its HTML representation to the output
@@ -99,7 +99,7 @@
  *
  * @scope    public instance method
  */
-DetailLayout.prototype.endOfLife = function () {
+DetailPlugin.prototype.endOfLife = function () {
   this.getDivElement().innerHTML = "";
 };
 
@@ -112,7 +112,7 @@
  * @param    inItem    An item to be displayed. 
  * @return   A string containing the XHTML to display the item.
  */
-DetailLayout.prototype.getXhtmlTableForItem = function (inItem) {
+DetailPlugin.prototype.getXhtmlTableForItem = function (inItem) {
   Util.assert(inItem instanceof Item);
   
   var listOfStrings = [];

Modified: trunk/source/Item.js
===================================================================
--- trunk/source/Item.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/Item.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- item.js
+ Item.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,8 +31,8 @@
  
 // -------------------------------------------------------------------
 // Dependencies:
-//   util.js
-//   stevedore.js
+//   Util.js
+//   Stevedore.js
 // -------------------------------------------------------------------
 
 

Modified: trunk/source/ItemView.js
===================================================================
--- trunk/source/ItemView.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/ItemView.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- item_view.js
+ ItemView.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,17 +31,17 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   repository.js
-//   util.js
-//   root_view.js
-//   detail_layout.js
+//   Stevedore.js
+//   Util.js
+//   RootView.js
+//   DetailPlugin.js
 // -------------------------------------------------------------------
 
 
 // -------------------------------------------------------------------
 // ItemView public class constants
 // -------------------------------------------------------------------
-ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX = "detail_layout_div_for_item_";
+ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX = "detail_plugin_div_for_item_";
 
 
 /**
@@ -66,7 +66,7 @@
   this.myItem = inItem;
   // this.myDivElement = inDivElement;
   // this.myRootView = inRootView;
-  this.myLayout = null;
+  this.myPlugin = null;
 }
 
 
@@ -109,7 +109,7 @@
   // add an <h1> heading with the name of the page
   listOfStrings.push("<h1 id=\"" + RootView.URL_ITEM_PREFIX + this.myItem.getUuid() + "\">" + this.myItem.getDisplayName() + "</h1>");
 
-  // add a <div> element for the detail layout
+  // add a <div> element for the detail plugin
   var detailDivId = ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX + this.myItem.getUuid();
   listOfStrings.push("<div id=\"" + detailDivId + "\"></div>");
 
@@ -117,10 +117,10 @@
   var finalString = listOfStrings.join("");
   this.getDivElement().innerHTML = finalString;
 
-  // let the detailLayout add its own content
-  var detailLayoutDivElement = document.getElementById(detailDivId);
-  this.myLayout = new DetailLayout(this, detailLayoutDivElement);
-  this.myLayout.refresh();
+  // let the detailPlugin add its own content
+  var detailPluginDivElement = document.getElementById(detailDivId);
+  this.myPlugin = new DetailPlugin(this, detailPluginDivElement);
+  this.myPlugin.refresh();
 };
 
 

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/OutlinePlugin.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- outline_layout.js
+ OutlinePlugin.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,53 +31,54 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   repository.js
-//   section_view.js
+//   Stevedore.js
+//   SectionView.js
 // -------------------------------------------------------------------
 
 
 // -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
+// Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_OUTLINE] = OutlineLayout;
+SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_OUTLINE] = OutlinePlugin;
 
 
 /**
- * An OutlineLayout displays a set of content items for a SectionView. 
+ * An OutlinePlugin displays a set of content items for a SectionView. 
  *
  * @scope    public instance constructor
  * @extends  View
  * @param    inSectionView    The SectionView that serves as the superview for this view. 
  * @param    inDivElement    The HTMLDivElement to display this view in. 
- * @syntax   var outline = new OutlineLayout()
+ * @syntax   var outline = new OutlinePlugin()
  */
-OutlineLayout.prototype = new View();  // makes OutlineLayout be a subclass of View
-function OutlineLayout(inSectionView, inDivElement) {
+OutlinePlugin.prototype = new View();  // makes OutlinePlugin be a subclass of View
+function OutlinePlugin(inSectionView, inDivElement) {
   this.setSuperview(inSectionView);
   this.setDivElement(inDivElement);
 }
 
 
 /**
- * Returns the registered name of this type of layout.
+ * Returns the registered name of this plugin.
  *
  * @scope    public instance method
  * @return   A string.
  */
-OutlineLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_OUTLINE;
+OutlinePlugin.prototype.getPluginName = function () {
+  return SectionView.PLUGIN_OUTLINE;
 };
 
   
 /**
- * Re-creates all the HTML for the OutlineLayout, and hands the HTML to the 
+ * Re-creates all the HTML for the OutlinePlugin, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-OutlineLayout.prototype.refresh = function () {
+OutlinePlugin.prototype.refresh = function () {
   var listOfContentItems = this.getSuperview().getListOfContentItems();
   var outlineDiv = this.getDivElement();
+  outlineDiv.innerHTML = "";
   var ulElement = View.createAndAppendElement(outlineDiv, "ul");
   for (var contentItemKey in listOfContentItems) {
     var contentItem = listOfContentItems[contentItemKey];
@@ -97,7 +98,7 @@
  *
  * @scope    public instance method
  */
-OutlineLayout.prototype.endOfLife = function () {
+OutlinePlugin.prototype.endOfLife = function () {
   this.getDivElement().innerHTML = "";
 };
 

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/PageView.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- page_view.js
+ PageView.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,9 +31,9 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   repository.js
-//   util.js
-//   section_view.js
+//   Stevedore.js
+//   Util.js
+//   SectionView.js
 // -------------------------------------------------------------------
 
 

Modified: trunk/source/Rectangle.js
===================================================================
--- trunk/source/Rectangle.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/Rectangle.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 // -------------------------------------------------------------------
-// Brian's 2005 JavaScript Coding Conventions
+// OpenRecord 2005 JavaScript Coding Conventions
 //
 // + jslint approved
 //    + jslint should return "ok" when it looks at the code (with strictest settings)
@@ -66,7 +66,7 @@
 
 
 /*****************************************************************************
- rectangle.js
+ Rectangle.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -98,7 +98,7 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   line.js
+//   Line.js
 // -------------------------------------------------------------------
 
 

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/RootView.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- root_view.js
+ RootView.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,9 +31,9 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   page_view.js
-//   repository.js
-//   util.js
+//   PageView.js
+//   Stevedore.js
+//   Util.js
 // -------------------------------------------------------------------
 
 
@@ -254,7 +254,7 @@
   var listOfStrings = [];
   
   var buttonValue = (this.myEditMode) ? "Save" : "Edit";
-  listOfStrings.push("<input type=\"button\" class=\"" + RootView.ELEMENT_CLASS_PAGE_EDIT_BUTTON + "\" id=\"" + this.myEditButtonId + "\" name=\"layout\" value=\"" + buttonValue + "\"></input>");
+  listOfStrings.push("<input type=\"button\" class=\"" + RootView.ELEMENT_CLASS_PAGE_EDIT_BUTTON + "\" id=\"" + this.myEditButtonId + "\" name=\"editbutton\" value=\"" + buttonValue + "\"></input>");
 
   // write out the new control span content 
   var finalString = listOfStrings.join("");

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/SectionView.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- section_view.js
+ SectionView.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,23 +31,23 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   repository.js
-//   util.js
-//   page_view.js
-//   table_layout.js
+//   Stevedore.js
+//   Util.js
+//   PageView.js
+//   TablePlugin.js
 // -------------------------------------------------------------------
 
 
 // -------------------------------------------------------------------
 // SectionView public class constants
 // -------------------------------------------------------------------
-SectionView.LAYOUT_TABLE = "Table";
-SectionView.LAYOUT_OUTLINE = "Outline";
-SectionView.LAYOUT_DETAIL = "Detail";
-SectionView.LAYOUT_BAR_CHART = "Bar Chart";
+SectionView.PLUGIN_TABLE = "Table";
+SectionView.PLUGIN_OUTLINE = "Outline";
+SectionView.PLUGIN_DETAIL = "Detail";
+SectionView.PLUGIN_BAR_CHART = "Bar Chart";
 
 SectionView.ELEMENT_CLASS_SECTION = "section";
-SectionView.ELEMENT_CLASS_SECTION_LAYOUT_MENU = "section_layout_menu";
+SectionView.ELEMENT_CLASS_SECTION_PLUGIN_MENU = "section_plugin_menu";
 SectionView.ELEMENT_CLASS_SIMPLE_TABLE = "simple_table";
 SectionView.ELEMENT_CLASS_NEW_ITEM = "newitem";
 SectionView.ELEMENT_CLASS_PLAIN = "plain";
@@ -60,7 +60,7 @@
 
 SectionView.ELEMENT_ID_SELECT_MENU_PREFIX = "select_menu_";
 SectionView.ELEMENT_ID_SELECT_MENU_SUFFIX = "_select_menu";
-SectionView.ELEMENT_ID_LAYOUT_DIV_SUFFIX = "_layout_div";
+SectionView.ELEMENT_ID_PLUGIN_DIV_SUFFIX = "_plugin_div";
 SectionView.ELEMENT_ID_CELL_PREFIX = "section_";
 SectionView.ELEMENT_ID_CELL_MIDFIX = "_cell_";
 SectionView.ELEMENT_ID_SUMMARY_DIV_SUFFIX = "_summary_div";
@@ -72,7 +72,7 @@
 // -------------------------------------------------------------------
 // SectionView class properties
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName = {};
+SectionView.ourHashTableOfPluginClassesKeyedByPluginName = {};
 
 
 /**
@@ -101,8 +101,8 @@
   var query = inSection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
   this.myListOfContentItems = this.getStevedore().getListOfResultItemsForQuery(query); 
 
-  this._myLayout = null;
-  this._myLayoutDiv = null;
+  this._myPlugin = null;
+  this._myPluginDiv = null;
   this._myHasEverBeenDisplayedFlag = false;
   this._mySectionSummaryView = null;
 }
@@ -136,24 +136,24 @@
 // -------------------------------------------------------------------
 
 /**
- * Given the name of a layout ("Table", "Outline", etc.), returns a newly
- * created layout object of that type, initialized to be the layout for this 
+ * Given the name of a plugin ("Table", "Outline", etc.), returns a newly
+ * created plugin object of that type, initialized to be the plugin for this 
  * SectionView.
  *
  * @scope    public instance method
- * @param    inLayoutName    A string. One of the registered layout names. 
- * @param    inLayoutDiv    The HTMLDivElement to display the layout in. 
- * @return   A newly created layout object, initialized to be the layout for this section.
+ * @param    inPluginName    A string. One of the registered plugin names. 
+ * @param    inPluginDiv    The HTMLDivElement to display the plugin in. 
+ * @return   A newly created plugin object, initialized to be the plugin for this section.
  */
-SectionView.prototype.getLayoutFromLayoutName = function (inLayoutName, inLayoutDiv) {
-  Util.assert(Util.isString(inLayoutName));
+SectionView.prototype.getPluginFromPluginName = function (inPluginName, inPluginDiv) {
+  Util.assert(Util.isString(inPluginName));
   
-  var newLayout = null;
-  var layoutClass = SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[inLayoutName];
-  if (layoutClass) {
-    newLayout = new layoutClass(this, inLayoutDiv);
+  var newPlugin = null;
+  var pluginClass = SectionView.ourHashTableOfPluginClassesKeyedByPluginName[inPluginName];
+  if (pluginClass) {
+    newPlugin = new pluginClass(this, inPluginDiv);
   }
-  return newLayout;
+  return newPlugin;
 };
 
 
@@ -182,7 +182,7 @@
   } else {
     // refresh the <h2> element with the value: this.mySection.getDisplayName();  
     this._mySectionSummaryView.refresh();
-    this._myLayout.refresh();
+    this._myPlugin.refresh();
   }
 };
 
@@ -197,7 +197,7 @@
   if (!this.getDivElement()) {
     return;
   }
-  var selectedLayoutName = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME)[0];
+  var selectedPluginName = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_PLUGIN_NAME)[0];
   var query = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
   this.myListOfContentItems = this.getStevedore().getListOfResultItemsForQuery(query); 
   if (!this.myListOfContentItems) {
@@ -212,24 +212,24 @@
   this._mySectionSummaryView = new MultiLineTextView(this, summaryDiv, this.mySection, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
   View.createAndAppendElement(outerDiv, "p");
 
-  // create the layout editing controls, if we're in edit mode
+  // create the plugin editing controls, if we're in edit mode
   var selectMenuId = SectionView.ELEMENT_ID_SELECT_MENU_PREFIX + this.mySection.getUuid();
-  var selectElement = View.createAndAppendElement(outerDiv, "select", SectionView.ELEMENT_CLASS_SECTION_LAYOUT_MENU, selectMenuId);
+  var selectElement = View.createAndAppendElement(outerDiv, "select", SectionView.ELEMENT_CLASS_SECTION_PLUGIN_MENU, selectMenuId);
   selectElement.setAttribute("name", selectMenuId);
   selectElement.setAttribute(SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER, this.mySectionNumber);
-  for (var layoutName in SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName) {
+  for (var pluginName in SectionView.ourHashTableOfPluginClassesKeyedByPluginName) {
     var optionElement = View.createAndAppendElement(selectElement, "option");
-    optionElement.selected = (selectedLayoutName == layoutName);
-    optionElement.setAttribute("value", layoutName);
-    // Util.addEventListener(optionElement, "click", SectionView.clickOnLayoutSelectionMenu);
+    optionElement.selected = (selectedPluginName == pluginName);
+    optionElement.setAttribute("value", pluginName);
+    // Util.addEventListener(optionElement, "click", SectionView.clickOnPluginSelectionMenu);
     var listener = this; 
-    Util.addEventListener(optionElement, "click", function(event) {listener.clickOnLayoutSelectionMenu(event);});
-    optionElement.innerHTML = layoutName;
+    Util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
+    optionElement.innerHTML = pluginName;
   }
 
-  // create a div element for the layout class to use
-  this._myLayoutDiv = View.createAndAppendElement(outerDiv, "div");
-  this._myLayout = this.getLayoutFromLayoutName(selectedLayoutName, this._myLayoutDiv);
+  // create a div element for the plugin class to use
+  this._myPluginDiv = View.createAndAppendElement(outerDiv, "div");
+  this._myPlugin = this.getPluginFromPluginName(selectedPluginName, this._myPluginDiv);
   this._myHasEverBeenDisplayedFlag = true;
   this.refresh();
 };
@@ -240,13 +240,13 @@
 // -------------------------------------------------------------------
 
 /**
- * Called when the user clicks on any of the layout option-select controls.
+ * Called when the user clicks on any of the plugin option-select controls.
  * Called from an HTML option element within an HTML select element.
  *
  * @scope    public instance method
  * @param    inEventObject    An event object. 
  */
-SectionView.prototype.clickOnLayoutSelectionMenu = function (inEventObject) {
+SectionView.prototype.clickOnPluginSelectionMenu = function (inEventObject) {
   var eventObject = inEventObject || window.event;
   var optionElement = Util.getTargetFromEvent(eventObject);
   // PENDING: We could replace the lines above with "var optionElement = this;"
@@ -256,13 +256,13 @@
   var newChoiceName = optionElement.value;
 
  
-  if (this._myLayout.getLayoutName() == newChoiceName) {
+  if (this._myPlugin.getPluginName() == newChoiceName) {
     return;
   } else {
-    this._myLayout.endOfLife();
-    this._myLayout = this.getLayoutFromLayoutName(newChoiceName, this._myLayoutDiv);
-    this.mySection.clear(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME);
-    this.mySection.assign(Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME, newChoiceName);
+    this._myPlugin.endOfLife();
+    this._myPlugin = this.getPluginFromPluginName(newChoiceName, this._myPluginDiv);
+    this.mySection.clear(Stevedore.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
+    this.mySection.assign(Stevedore.UUID_FOR_ATTRIBUTE_PLUGIN_NAME, newChoiceName);
     this.refresh();
   }
 };

Modified: trunk/source/Stevedore.js
===================================================================
--- trunk/source/Stevedore.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/Stevedore.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- stevedore.js
+ Stevedore.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,8 +31,8 @@
  
 // -------------------------------------------------------------------
 // Dependencies:
-//   util.js
-//   item.js
+//   Util.js
+//   Item.js
 // -------------------------------------------------------------------
 
 
@@ -51,7 +51,7 @@
 Stevedore.UUID_FOR_ATTRIBUTE_QUERY = 109;
 Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = 110;
 Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = 111;
-Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME = 112;
+Stevedore.UUID_FOR_ATTRIBUTE_PLUGIN_NAME = 112;
 
 Stevedore.UUID_FOR_CATEGORY_BOOK = 141;      // here as an example only
 Stevedore.UUID_FOR_CATEGORY_MOVIE = 142;     // here as an example only
@@ -386,7 +386,7 @@
   hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY] = "Query";
   hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";
   hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = "Matching Item";
-  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_LAYOUT_NAME] = "Layout Name";
+  hashTableOfAttributeNamesKeyedByUuid[Stevedore.UUID_FOR_ATTRIBUTE_PLUGIN_NAME] = "Plugin Name";
 
   // create all the Item objects for the attributes
   for (uuid in hashTableOfAttributeNamesKeyedByUuid) {

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/TablePlugin.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- table_layout.js
+ TablePlugin.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,52 +31,52 @@
  
 // -------------------------------------------------------------------
 // Dependencies:
-//   repository.js
-//   section_view.js
-//   page_view.js
-//   util.js
+//   Stevedore.js
+//   SectionView.js
+//   PageView.js
+//   Util.js
 // -------------------------------------------------------------------
 
 
 // -------------------------------------------------------------------
-// Register this layout type in the SectionView registry
+// Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfLayoutClassesKeyedByLayoutName[SectionView.LAYOUT_TABLE] = TableLayout;
+SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_TABLE] = TablePlugin;
 
 
 // -------------------------------------------------------------------
-// TableLayout public class constants
+// TablePlugin public class constants
 // -------------------------------------------------------------------
-TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD = "current_edit_field";
+TablePlugin.ELEMENT_ID_CURRENT_EDIT_FIELD = "current_edit_field";
 
 
 /**
- * When the TableLayout creates an HTML table, it sets up each HTML "td" table 
+ * When the TablePlugin creates an HTML table, it sets up each HTML "td" table 
  * cell element in the table to point to a corresponding CellDelegate instance.
  *
  * @scope    private instance constructor
  */
-TableLayout._CellDelegate = function (inRowDelegate, inCellElementId, inCellCount, inColumnNumber, inAttribute, inTableLayout) {
-  Util.assert(inRowDelegate instanceof TableLayout._RowDelegate);
+TablePlugin._CellDelegate = function (inRowDelegate, inCellElementId, inCellCount, inColumnNumber, inAttribute, inTablePlugin) {
+  Util.assert(inRowDelegate instanceof TablePlugin._RowDelegate);
   Util.assert(inAttribute instanceof Item);
-  Util.assert(inTableLayout instanceof TableLayout);
+  Util.assert(inTablePlugin instanceof TablePlugin);
 
   this.myRowDelegate = inRowDelegate;
   this.myCellElementId = inCellElementId;
   this.myCellCount = inCellCount;
   this.myColumnNumber = inColumnNumber;
   this.myAttribute = inAttribute;
-  this.myTableLayout = inTableLayout;
+  this.myTablePlugin = inTablePlugin;
 }
 
 
 /**
- * When the TableLayout creates an HTML table, it sets up each HTML "tr" table
+ * When the TablePlugin creates an HTML table, it sets up each HTML "tr" table
  * row element in the table to point to a corresponding RowDelegate instance.
  *
  * @scope    private instance constructor
  */
-TableLayout._RowDelegate = function (inContentItem, inRowNumber) {
+TablePlugin._RowDelegate = function (inContentItem, inRowNumber) {
   Util.assert((inContentItem == null) || (inContentItem instanceof Item));
 
   this.myContentItem = inContentItem;
@@ -86,16 +86,16 @@
 
 
 /**
- * The TableLayout class knows how to display a Section of a Page as an
+ * The TablePlugin class knows how to display a Section of a Page as an
  * HTML table.
  *
  * @scope    public instance constructor
  * @extends  View
- * @param    inSectionView    The SectionView that this TableLayout will appears in. 
+ * @param    inSectionView    The SectionView that this TablePlugin will appears in. 
  * @param    inDivElement    The HTMLDivElement to display this view in. 
  */
-TableLayout.prototype = new View();  // makes TableLayout be a subclass of View
-function TableLayout(inSectionView, inDivElement) {
+TablePlugin.prototype = new View();  // makes TablePlugin be a subclass of View
+function TablePlugin(inSectionView, inDivElement) {
   this.setSuperview(inSectionView);
   this.setDivElement(inDivElement);  
 
@@ -107,23 +107,23 @@
 
 
 /**
- * Returns a string with the display name for this type of layout.
+ * Returns a string with the display name for this plugin.
  *
  * @scope    public instance method
- * @return   A String with a display name for this type of layout. 
+ * @return   A String with a display name for this plugin. 
  */
-TableLayout.prototype.getLayoutName = function () {
-  return SectionView.LAYOUT_TABLE;
+TablePlugin.prototype.getPluginName = function () {
+  return SectionView.PLUGIN_TABLE;
 };
 
   
 /**
- * Re-creates all the HTML for the TableLayout, and hands the HTML to the 
+ * Re-creates all the HTML for the TablePlugin, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-TableLayout.prototype.refresh = function () {
+TablePlugin.prototype.refresh = function () {
   var listOfStrings = [];
   var hashTableOfAttributesKeyedByUuid = {};
   var hashTableOfCellDelegatesKeyedByElementId = {};
@@ -165,7 +165,7 @@
   for (var kKey in listOfContentItems) {
     contentItem = listOfContentItems[kKey];
     listOfStrings.push("<tr>");
-    var rowDelegate = new TableLayout._RowDelegate(contentItem, this.myNumRows);
+    var rowDelegate = new TablePlugin._RowDelegate(contentItem, this.myNumRows);
     this.myArrayOfRowDelegates[this.myNumRows] = rowDelegate;
     this.myNumRows += 1;
     columnCount = 0;
@@ -179,8 +179,8 @@
         string = SectionView.getStringForValue(valueList[0]);
       }
       if (this.isInEditMode()) {
-        listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + string + "</td>");
-        var cellDelegate = new TableLayout._CellDelegate(rowDelegate, cellId, cellCount, columnCount, attribute, this);
+        listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TablePlugin.clickOnCell(event)\">" + string + "</td>");
+        var cellDelegate = new TablePlugin._CellDelegate(rowDelegate, cellId, cellCount, columnCount, attribute, this);
         rowDelegate.myArrayOfCellDelegates[columnCount] = cellDelegate;
         hashTableOfCellDelegatesKeyedByElementId[cellId] = cellDelegate;
       } else {
@@ -196,7 +196,7 @@
 
   // if we're in edit mode, add a row at the bottom of the table for entering new items
   var firstCell = true;
-  var lastRowDelegate = new TableLayout._RowDelegate(null, this.myNumRows);
+  var lastRowDelegate = new TablePlugin._RowDelegate(null, this.myNumRows);
   this.myArrayOfRowDelegates[this.myNumRows] = lastRowDelegate;
   this.myNumRows += 1;
   if (this.isInEditMode()) {
@@ -208,8 +208,8 @@
       firstCell = false;
       cellCount += 1;
       cellId = cellIdPrefix + cellCount;
-      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_NEW_ITEM + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TableLayout.clickOnCell(event)\">" + contentString + "</td>");
-      var lastRowCellDelegate = new TableLayout._CellDelegate(lastRowDelegate, cellId, cellCount, columnCount, attribute, this);
+      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_NEW_ITEM + "\" id=\"" + cellId + "\" " + SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER + "=\"" + this.getSuperview().mySectionNumber + "\" " + SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER + "=\"" + cellCount + "\" onclick=\"TablePlugin.clickOnCell(event)\">" + contentString + "</td>");
+      var lastRowCellDelegate = new TablePlugin._CellDelegate(lastRowDelegate, cellId, cellCount, columnCount, attribute, this);
       lastRowDelegate.myArrayOfCellDelegates[columnCount] = lastRowCellDelegate;
       hashTableOfCellDelegatesKeyedByElementId[cellId] = lastRowCellDelegate;
       columnCount += 1;
@@ -238,7 +238,7 @@
  *
  * @scope    public instance method
  */
-TableLayout.prototype.endOfLife = function () {
+TablePlugin.prototype.endOfLife = function () {
   this.getDivElement().innerHTML = "";
 };
 
@@ -251,7 +251,7 @@
  *
  * @scope    public class method
  */
-TableLayout.clickOnCell = function (inEventObject) {
+TablePlugin.clickOnCell = function (inEventObject) {
   var eventObject = inEventObject;
   if (!eventObject) { eventObject = window.event; } 
   // PENDING: try this instead: var eventObject = inEventObject || window.event;
@@ -260,13 +260,13 @@
   // PENDING: We could replace the two lines above with "var htmlElement = this;"
   // That would work fine in Firefox, but maybe it wouldn't work in other browsers?
 
-  var currentEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
+  var currentEditField = document.getElementById(TablePlugin.ELEMENT_ID_CURRENT_EDIT_FIELD);
   if (currentEditField && (currentEditField == htmlElement)) {
     // another click in the cell we're already editing -- just ignore it
     return; 
   }
-  TableLayout.leaveEditField();
-  TableLayout.startEditingInCell(htmlElement);
+  TablePlugin.leaveEditField();
+  TablePlugin.startEditingInCell(htmlElement);
 };
 
 
@@ -277,12 +277,12 @@
  * @scope    public instance method
  * @param    inColumnNumber    An integer column number, telling which column to start editing in. 
  */
-TableLayout.prototype.startEditingInCellForNewItemAtColumn = function (inColumnNumber) {
+TablePlugin.prototype.startEditingInCellForNewItemAtColumn = function (inColumnNumber) {
   var rowForNewItemEntry = this.myNumRows - 1;
   var rowDelegateForNewItemEntry = this.myArrayOfRowDelegates[rowForNewItemEntry];
   var cellDelegate = rowDelegateForNewItemEntry.myArrayOfCellDelegates[inColumnNumber];
   var nextCell = document.getElementById(cellDelegate.myCellElementId);
-  TableLayout.startEditingInCell(nextCell);
+  TablePlugin.startEditingInCell(nextCell);
 };
 
 
@@ -293,18 +293,18 @@
  * @scope    public class method
  * @param    inCellElement    An HTMLTableCellElement. 
  */
-TableLayout.startEditingInCell = function (inCellElement) {
+TablePlugin.startEditingInCell = function (inCellElement) {
   Util.assert(inCellElement instanceof HTMLTableCellElement);
 
   var initialEditValue = inCellElement.innerHTML.replace(/"/g, "&quot");
-  var editFieldString = "<input type=\"text\" class=\"" + SectionView.ELEMENT_CLASS_TEXT_FIELD_IN_TABLE_CELL + "\" id=\"" + TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD + "\" value=\"" + initialEditValue + "\" size=\"1\"></input>";
+  var editFieldString = "<input type=\"text\" class=\"" + SectionView.ELEMENT_CLASS_TEXT_FIELD_IN_TABLE_CELL + "\" id=\"" + TablePlugin.ELEMENT_ID_CURRENT_EDIT_FIELD + "\" value=\"" + initialEditValue + "\" size=\"1\"></input>";
   inCellElement.innerHTML = editFieldString;
   inCellElement.className = SectionView.ELEMENT_CLASS_SELECTED + " " + inCellElement.className;
   // var listener = this; 
   // Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
       
-  var newEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
-  newEditField.onkeypress = TableLayout.keyPressOnEditField;
+  var newEditField = document.getElementById(TablePlugin.ELEMENT_ID_CURRENT_EDIT_FIELD);
+  newEditField.onkeypress = TablePlugin.keyPressOnEditField;
   newEditField.select();
   newEditField.focus();
 };
@@ -315,8 +315,8 @@
  *
  * @scope    public class method
  */
-TableLayout.leaveEditField = function () {
-  var currentEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
+TablePlugin.leaveEditField = function () {
+  var currentEditField = document.getElementById(TablePlugin.ELEMENT_ID_CURRENT_EDIT_FIELD);
 
   if (currentEditField) {
     var newValueString = currentEditField.value;
@@ -326,10 +326,10 @@
     // find the content item for this cell, and set the attribute to the new cell value
     var contentItem = cellDelegate.myRowDelegate.myContentItem;
     if (!contentItem) {
-      var sectionView = cellDelegate.myTableLayout.getSuperview();
+      var sectionView = cellDelegate.myTablePlugin.getSuperview();
       var stevedore = sectionView.getStevedore();
       contentItem = stevedore.newItem(); 
-      cellDelegate.myTableLayout.myNewItemCreatedFlag = true;
+      cellDelegate.myTablePlugin.myNewItemCreatedFlag = true;
       cellDelegate.myRowDelegate.myContentItem = contentItem;
       var queryList = sectionView.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY);
       if (queryList) {
@@ -371,7 +371,7 @@
  * 
  * @scope    public class method
  */
-TableLayout.keyPressOnEditField = function (inEventObject) {
+TablePlugin.keyPressOnEditField = function (inEventObject) {
   var eventObject = inEventObject;
   if (!eventObject) { eventObject = window.event; }
   var asciiValueOfKey = eventObject.keyCode;
@@ -408,13 +408,13 @@
   }
   
   if (move) {
-    var currentEditField = document.getElementById(TableLayout.ELEMENT_ID_CURRENT_EDIT_FIELD);
+    var currentEditField = document.getElementById(TablePlugin.ELEMENT_ID_CURRENT_EDIT_FIELD);
     Util.assert(currentEditField == Util.getTargetFromEvent(eventObject));
 
     var cellElement = currentEditField.parentNode;
     var cellDelegate = cellElement.mydelegate;
-    var tableLayout = cellDelegate.myTableLayout;
-    var sectionView = tableLayout.mySectionView;
+    var tablePlugin = cellDelegate.myTablePlugin;
+    var sectionView = tablePlugin.mySectionView;
     var userHitReturnInLastRow = false;
     var nextCellDelegate = null;
     var shiftBy;
@@ -424,9 +424,9 @@
       var nextColumnNumber = cellDelegate.myColumnNumber + shiftBy;
       // PENDING: We should be able to do this in one line, using a modulo operator
       if (nextColumnNumber < 0) {
-        nextColumnNumber = (tableLayout.myNumColumns - 1);
+        nextColumnNumber = (tablePlugin.myNumColumns - 1);
       }
-      if (nextColumnNumber >= tableLayout.myNumColumns) {
+      if (nextColumnNumber >= tablePlugin.myNumColumns) {
         nextColumnNumber = 0;
       }
       nextCellDelegate = cellDelegate.myRowDelegate.myArrayOfCellDelegates[nextColumnNumber];
@@ -436,26 +436,26 @@
       shiftBy = (move == MOVE_UP) ? -1 : 1;
       var nextRowNumber = cellDelegate.myRowDelegate.myRowNumber + shiftBy;
       if (nextRowNumber < 0) {
-        nextRowNumber = (tableLayout.myNumRows - 1);
+        nextRowNumber = (tablePlugin.myNumRows - 1);
       }
-      if (nextRowNumber >= tableLayout.myNumRows) {
+      if (nextRowNumber >= tablePlugin.myNumRows) {
         nextRowNumber = 0;
         userHitReturnInLastRow = true;
       }
-      var nextRowDelegate = tableLayout.myArrayOfRowDelegates[nextRowNumber];
+      var nextRowDelegate = tablePlugin.myArrayOfRowDelegates[nextRowNumber];
       nextCellDelegate = nextRowDelegate.myArrayOfCellDelegates[cellDelegate.myColumnNumber];
     }
     
     var nextCellId = nextCellDelegate.myCellElementId;    
     var nextCell = document.getElementById(nextCellId);
-    TableLayout.leaveEditField();
-    if (userHitReturnInLastRow && tableLayout.myNewItemCreatedFlag) {
-      tableLayout.myNewItemCreatedFlag = false;
-      tableLayout.refresh();
-      tableLayout.startEditingInCellForNewItemAtColumn(cellDelegate.myColumnNumber);
+    TablePlugin.leaveEditField();
+    if (userHitReturnInLastRow && tablePlugin.myNewItemCreatedFlag) {
+      tablePlugin.myNewItemCreatedFlag = false;
+      tablePlugin.refresh();
+      tablePlugin.startEditingInCellForNewItemAtColumn(cellDelegate.myColumnNumber);
     } else {
       if (nextCell) {
-        TableLayout.startEditingInCell(nextCell);
+        TablePlugin.startEditingInCell(nextCell);
       }
     }
   }

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/base_style.css	2005-04-05 21:54:37 UTC (rev 24)
@@ -224,11 +224,11 @@
   float: right;
 }
 
-div.editmode .section_layout_menu {
+div.editmode .section_plugin_menu {
   display: block;
 }
 
-div.viewmode .section_layout_menu {
+div.viewmode .section_plugin_menu {
   display: none;
 }
 

Modified: trunk/source/datastore.js
===================================================================
--- trunk/source/datastore.js	2005-04-05 21:07:31 UTC (rev 23)
+++ trunk/source/datastore.js	2005-04-05 21:54:37 UTC (rev 24)
@@ -48,7 +48,7 @@
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
   },
   { "100": { "type": "Uuid", "value": 112 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Layout Name" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Plugin Name" }, ],
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
   },
   { "100": { "type": "Uuid", "value": 143 },
@@ -87,14 +87,14 @@
   { "100": { "type": "Uuid", "value": 3010 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "All Books" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3011 }, ],
     /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a list of all the books in the repository." }, ],
   },
   { "100": { "type": "Uuid", "value": 3020 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "One Book" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Detail" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Detail" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3021 }, ],
     /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item." }, ],
   },
@@ -169,25 +169,25 @@
   { "100": { "type": "Uuid", "value": 4010 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "All Features" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4011 }, ],
   },
   { "100": { "type": "Uuid", "value": 4020 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "All Bugs" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4021 }, ],
   },
   { "100": { "type": "Uuid", "value": 4030 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs and Features" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4031 }, ],
   },
   { "100": { "type": "Uuid", "value": 4040 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4041 }, ],
   },
   { "100": { "type": "Uuid", "value": 4011 },
@@ -312,19 +312,19 @@
   },
   { "100": { "type": "Uuid", "value": 4320 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' layout, have controls to optionally show more detail" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, have controls to optionally show more detail" }, ],
   },
   { "100": { "type": "Uuid", "value": 4321 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Add 'Table' layout controls for row sorting, column re-arranging, column hiding, etc." }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc." }, ],
   },
   { "100": { "type": "Uuid", "value": 4322 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' layout, be able to group by category" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, be able to group by category" }, ],
   },
   { "100": { "type": "Uuid", "value": 4323 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Table' layout, be able to group by category" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Table' plugin, be able to group by category" }, ],
   },
   { "100": { "type": "Uuid", "value": 4324 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
@@ -343,7 +343,7 @@
   { "100": { "type": "Uuid", "value": 5010 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "All Charities" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Bar Chart" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Bar Chart" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 5011 }, ],
   },
   { "100": { "type": "Uuid", "value": 5011 },
@@ -408,7 +408,7 @@
   { "100": { "type": "Uuid", "value": 6010 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
     /* Name       */   "102": [{ "type": "StringValue", "value": "All Items" }, ],
-    /* Layout Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
     /* Query      */   "109": [{ "type": "ForeignUuid", "value": 6011 }, ],
   },
   { "100": { "type": "Uuid", "value": 6011 },



From skinner at sheep.berlios.de  Wed Apr  6 00:01:32 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 6 Apr 2005 00:01:32 +0200
Subject: [openrecord-svn] r25 - trunk/source
Message-ID: <200504052201.j35M1WQa009467@sheep.berlios.de>

Author: skinner
Date: 2005-04-06 00:01:31 +0200 (Wed, 06 Apr 2005)
New Revision: 25

Modified:
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/TextView.js
   trunk/source/Util.js
   trunk/source/View.js
Log:
Renamed MultiLineTextView to be TextView

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-04-05 21:54:37 UTC (rev 24)
+++ trunk/source/PageView.js	2005-04-05 22:01:31 UTC (rev 25)
@@ -122,7 +122,7 @@
   headerElement.innerHTML = this.myPage.getDisplayName();
 
   var summaryViewDiv = View.createAndAppendElement(pageDivElement, "div");
-  this._myPageSummaryView = new MultiLineTextView(this, summaryViewDiv, this.myPage, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
+  this._myPageSummaryView = new TextView(this, summaryViewDiv, this.myPage, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
 
   // add <div> elements for each of the sections on the page
   // and create a new SectionView for each section

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-04-05 21:54:37 UTC (rev 24)
+++ trunk/source/SectionView.js	2005-04-05 22:01:31 UTC (rev 25)
@@ -209,7 +209,7 @@
   var headerH2 = View.createAndAppendElement(outerDiv, "h2");
   headerH2.innerHTML = this.mySection.getDisplayName();
   var summaryDiv = View.createAndAppendElement(outerDiv, "div");
-  this._mySectionSummaryView = new MultiLineTextView(this, summaryDiv, this.mySection, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
+  this._mySectionSummaryView = new TextView(this, summaryDiv, this.mySection, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
   View.createAndAppendElement(outerDiv, "p");
 
   // create the plugin editing controls, if we're in edit mode

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-04-05 21:54:37 UTC (rev 24)
+++ trunk/source/TextView.js	2005-04-05 22:01:31 UTC (rev 25)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- text_view.js
+ TextView.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -38,13 +38,13 @@
 
 
 // -------------------------------------------------------------------
-// MultiLineTextView public class constants
+// TextView public class constants
 // -------------------------------------------------------------------
-MultiLineTextView.ELEMENT_CLASS_TEXT_BLOCK = "text_block";
+TextView.ELEMENT_CLASS_TEXT_BLOCK = "text_block";
 
 
 /**
- * An instance of MultiLineTextView can be placed in any parent container View
+ * An instance of TextView can be placed in any parent container View
  * to display and (if in edit mode) edit multi-lines of text
  *
  * @scope    public instance constructor
@@ -55,8 +55,8 @@
  * @param    theDivElement    The HTMLDivElement to display the HTML in. 
  * @param    theClassType    A string that gives a class name to assign to the HTML element. 
  */
-MultiLineTextView.prototype = new View();  // makes MultiLineTextView be a subclass of View
-function MultiLineTextView(theSuperview, theDivElement, theItem, theAttribute, theClassType) {
+TextView.prototype = new View();  // makes TextView be a subclass of View
+function TextView(theSuperview, theDivElement, theItem, theAttribute, theClassType) {
   Util.assert(theItem instanceof Item);
   //Util.assert(theAttribute instanceof Attribute); PENDING need to check that attribute is an attribute
   
@@ -78,7 +78,7 @@
  *
  * @scope    public instance method
  */
-MultiLineTextView.prototype.refresh = function() {
+TextView.prototype.refresh = function() {
   if (!this._myHasEverBeenDisplayedFlag) {
     this.doInitialDisplay();
   } else {
@@ -91,16 +91,16 @@
 
 
 /**
- * Re-creates all the HTML for the MultiLineTextView, and hands the HTML to the 
+ * Re-creates all the HTML for the TextView, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    public instance method
  */
-MultiLineTextView.prototype.doInitialDisplay = function() {
+TextView.prototype.doInitialDisplay = function() {
   var divElement = this.getDivElement();
   Util.assert(divElement instanceof HTMLDivElement);
   
-  divElement.className = MultiLineTextView.ELEMENT_CLASS_TEXT_BLOCK;
+  divElement.className = TextView.ELEMENT_CLASS_TEXT_BLOCK;
   var textList = this.textItem.getValueListFromAttribute(this.attribute);
   var textString = "";
   for (var i in textList) {
@@ -122,7 +122,7 @@
  *
  * @scope    public instance method
  */
-MultiLineTextView.prototype.startEditing = function() {
+TextView.prototype.startEditing = function() {
   if (!this.isEditing) {
     var editField = this.editField;
     if (!editField) {
@@ -154,7 +154,7 @@
  * @scope    public instance method
  * @param    inEventObject    An event object. 
  */
-MultiLineTextView.prototype.onClick = function(inEventObject) {
+TextView.prototype.onClick = function(inEventObject) {
   if (this.isInEditMode()) {
     this.startEditing();
   }
@@ -170,7 +170,7 @@
  * @scope    public instance method
  * @param    inEventObject    An event object. 
  */
-MultiLineTextView.prototype.onBlur = function(inEventObject) {
+TextView.prototype.onBlur = function(inEventObject) {
   if (this.isEditing) {
     var newText = this.editField.value;
     this.textItem.clear(this.attribute);

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-04-05 21:54:37 UTC (rev 24)
+++ trunk/source/Util.js	2005-04-05 22:01:31 UTC (rev 25)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- util.js
+ Util.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>

Modified: trunk/source/View.js
===================================================================
--- trunk/source/View.js	2005-04-05 21:54:37 UTC (rev 24)
+++ trunk/source/View.js	2005-04-05 22:01:31 UTC (rev 25)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- view.js
+ View.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -31,7 +31,7 @@
 
 // -------------------------------------------------------------------
 // Dependencies:
-//   util.js
+//   Util.js
 // -------------------------------------------------------------------
 
 



From skinner at sheep.berlios.de  Wed Apr  6 01:41:42 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 6 Apr 2005 01:41:42 +0200
Subject: [openrecord-svn] r26 - trunk/source
Message-ID: <200504052341.j35Nfg8r007042@sheep.berlios.de>

Author: skinner
Date: 2005-04-06 01:41:39 +0200 (Wed, 06 Apr 2005)
New Revision: 26

Modified:
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/base_style.css
Log:
Added more UI feedback to let you know you're in edit mode.

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-04-05 22:01:31 UTC (rev 25)
+++ trunk/source/PageView.js	2005-04-05 23:41:39 UTC (rev 26)
@@ -44,10 +44,7 @@
 PageView.ELEMENT_ID_SECTION_DIV_MIDFIX = "_in_page_";
 PageView.ELEMENT_ID_SUMMARY_VIEW_DIV_PREFIX = "_summary_view_for_page_";
 
-PageView.ELEMENT_CLASS_EDIT_MODE = "editmode";
-PageView.ELEMENT_CLASS_VIEW_MODE = "viewmode";
 
-
 /**
  * The RootView uses an instance of a PageView to display a Page in the
  * browser window.
@@ -96,7 +93,6 @@
   if (!this._myHasEverBeenDisplayedFlag) {
     this.doInitialDisplay();
   } else {
-    this.getDivElement().className = (this.isInEditMode()) ? PageView.ELEMENT_CLASS_EDIT_MODE : PageView.ELEMENT_CLASS_VIEW_MODE;
     this._myPageSummaryView.refresh();
     for (var key in this.myListOfSectionViews) {
       var sectionView = this.myListOfSectionViews[key];      
@@ -116,7 +112,6 @@
   Util.assert(this.getDivElement() instanceof HTMLDivElement);
   
   var pageDivElement = this.getDivElement();
-  pageDivElement.className = (this.isInEditMode()) ? PageView.ELEMENT_CLASS_EDIT_MODE : PageView.ELEMENT_CLASS_VIEW_MODE;
   
   var headerElement = View.createAndAppendElement(pageDivElement, "h1");
   headerElement.innerHTML = this.myPage.getDisplayName();

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-04-05 22:01:31 UTC (rev 25)
+++ trunk/source/RootView.js	2005-04-05 23:41:39 UTC (rev 26)
@@ -50,7 +50,10 @@
 RootView.URL_HASH_PAGE_PREFIX = "#" + RootView.URL_PAGE_PREFIX;
 RootView.URL_HASH_ITEM_PREFIX = "#" + RootView.URL_ITEM_PREFIX;
 
+RootView.ELEMENT_CLASS_EDIT_MODE = "editmode";
+RootView.ELEMENT_CLASS_VIEW_MODE = "viewmode";
 
+
 // -------------------------------------------------------------------
 // RootView class properties
 // -------------------------------------------------------------------
@@ -122,6 +125,7 @@
   this._myContentViewDivElement = contentViewDiv;
   this.myDebugDivElement = debugDiv;
   this.myStatusBlurbSpanElement = statusBlurbSpan;
+  this._myRootDiv = rootDiv;
   
   Util.setErrorReportCallback(RootView.displayTextInDebugTextarea);
   this.setCurrentContentViewFromUrl();
@@ -234,6 +238,7 @@
   Util.assert(this._myCurrentContentView instanceof Object);
 
   document.title = this._myCurrentContentView.getPageTitle() + " - openagenda.org";
+  this._myRootDiv.className = (this.isInEditMode()) ? RootView.ELEMENT_CLASS_EDIT_MODE : RootView.ELEMENT_CLASS_VIEW_MODE;
   this.displayControlSpan();
   this.displayNavbar();
   this.displayDebugArea();

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-04-05 22:01:31 UTC (rev 25)
+++ trunk/source/base_style.css	2005-04-05 23:41:39 UTC (rev 26)
@@ -190,6 +190,14 @@
   width: 100%;
 }
 
+div.editmode .header {
+  background-color: rgb(100%, 100%, 40%);
+}
+
+div.viewmode .header {
+  background-color: rgb(100%, 100%, 100%);
+}
+
 .logo a {
   font-weight: bold;
   text-decoration: none;



From skinner at sheep.berlios.de  Wed Apr  6 21:47:02 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 6 Apr 2005 21:47:02 +0200
Subject: [openrecord-svn] r27 - trunk/source
Message-ID: <200504061947.j36Jl2gX010884@sheep.berlios.de>

Author: skinner
Date: 2005-04-06 21:47:01 +0200 (Wed, 06 Apr 2005)
New Revision: 27

Modified:
   trunk/source/TextView.js
   trunk/source/base_style.css
Log:
Tried, and failed, to get TextView to automatically grow taller as the user types.

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-04-05 23:41:39 UTC (rev 26)
+++ trunk/source/TextView.js	2005-04-06 19:47:01 UTC (rev 27)
@@ -103,9 +103,13 @@
   divElement.className = TextView.ELEMENT_CLASS_TEXT_BLOCK;
   var textList = this.textItem.getValueListFromAttribute(this.attribute);
   var textString = "";
-  for (var i in textList) {
-    textString = textList[i] + "\n" + textString;
-  };
+  if (textList && textList[0]) {
+    textString = textList[0];
+  }
+  // PENDING: need to deal with multi valued attrs
+  // for (var i in textList) {
+  //   textString = textList[i] + "\n" + textString;
+  // };
   
   this.textNode = document.createTextNode(textString);
   divElement.appendChild(this.textNode);
@@ -131,6 +135,7 @@
       //editField.cols=80; now using css style sheet "text_view"
       var listener = this; 
       Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
+      Util.addEventListener(editField, "keypress", function(event) {listener.onKeyPress(event);});
       editField.defaultValue = this.textNode.data;
     }
     editField.style.height = this.getDivElement().offsetHeight + "px";
@@ -182,6 +187,57 @@
 };
 
 
+/**
+ * Called when the user types in editField
+ *
+ * @scope    public instance method
+ * @param    inEventObject    An event object. 
+ */
+TextView.prototype.onKeyPress = function(inEventObject) {
+  var editField = this.editField;
+
+  // PENDING: 
+  // Here are some failed attempts at trying to get the editField to 
+  // automatically grow taller as the user types more text into it.
+  // The idea was to avoid having the editField ever show its scroll 
+  // bar. The user shouldn't feel like they're filling in a form; 
+  // they should feel like they're typing a paragraph in a word
+  // processor, and the paragraph grows naturally as they type, 
+  // with all the paragraphs beneath it getting pushed down the page.
+  
+  // ATTEMPT #0: 
+  // Display diagnostic info...
+  // Initially editField.scrollHeight and editField.clientHeight are equal.  
+  // As you type scrollHeight grows. editField.rows is always -1.
+  /*
+  RootView.displayStatusBlurb("editField.scrollHeight: " + editField.scrollHeight + ", " +
+    "editField.clientHeight: " + editField.clientHeight + ", " +
+    "editField.rows: " + editField.rows);
+  */
+
+  // ATTEMPT #1: 
+  // causes infinite loop -- adding rows doesn't change editField.clientHeight
+  /*
+  while (editField.scrollHeight > editField.clientHeight) {
+    editField.rows += 1;
+  }
+  */
+
+  // ATTEMPT #2: has no impact
+  /*
+  if (editField.scrollHeight > editField.clientHeight) {
+    editField.style.height = editField.scrollHeight;
+  }
+  */
+
+  // ATTEMPT #3: has no impact
+  /*
+  if (editField.scrollHeight > editField.clientHeight) {
+    editField.clientHeight = editField.scrollHeight;
+  }
+  */
+};
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-04-05 23:41:39 UTC (rev 26)
+++ trunk/source/base_style.css	2005-04-06 19:47:01 UTC (rev 27)
@@ -528,12 +528,13 @@
 /* Text view styles                     */
 
 .text_view {
-  height: 100%;
+  /* height: 100%; */
   width: 100%;
   font-family: Arial, Verdana, sans-serif;
   color: rgb(0%, 0%, 0%);
   background: rgb(100%, 100%, 40%);
   border: none; 
+  /* overflow: visible; */
 }
 
 div.editmode .text_block:hover {



From skinner at sheep.berlios.de  Thu Apr  7 04:09:46 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 7 Apr 2005 04:09:46 +0200
Subject: [openrecord-svn] r28 - trunk/source
Message-ID: <200504070209.j3729kHo019080@sheep.berlios.de>

Author: skinner
Date: 2005-04-07 04:09:40 +0200 (Thu, 07 Apr 2005)
New Revision: 28

Modified:
   trunk/source/TextView.js
Log:
Changed TextView so that as you type the text area automatically grows bigger instead of showing a scrollbar.

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-04-06 19:47:01 UTC (rev 27)
+++ trunk/source/TextView.js	2005-04-07 02:09:40 UTC (rev 28)
@@ -135,7 +135,7 @@
       //editField.cols=80; now using css style sheet "text_view"
       var listener = this; 
       Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
-      Util.addEventListener(editField, "keypress", function(event) {listener.onKeyPress(event);});
+      Util.addEventListener(editField, "keyup", function(event) {listener.onKeyUp(event);});
       editField.defaultValue = this.textNode.data;
     }
     editField.style.height = this.getDivElement().offsetHeight + "px";
@@ -193,7 +193,7 @@
  * @scope    public instance method
  * @param    inEventObject    An event object. 
  */
-TextView.prototype.onKeyPress = function(inEventObject) {
+TextView.prototype.onKeyUp = function(inEventObject) {
   var editField = this.editField;
 
   // PENDING: 
@@ -223,12 +223,11 @@
   }
   */
 
-  // ATTEMPT #2: has no impact
-  /*
+  // ATTEMPT #2: 
+  // slightly clunky, but better than nothing!
   if (editField.scrollHeight > editField.clientHeight) {
-    editField.style.height = editField.scrollHeight;
+    editField.style.height = editField.scrollHeight + "px";
   }
-  */
 
   // ATTEMPT #3: has no impact
   /*



From chaolam at sheep.berlios.de  Tue Apr 12 07:01:32 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Tue, 12 Apr 2005 07:01:32 +0200
Subject: [openrecord-svn] r30 - trunk/source
Message-ID: <200504120501.j3C51W7B003852@sheep.berlios.de>

Author: chaolam
Date: 2005-04-12 07:01:19 +0200 (Tue, 12 Apr 2005)
New Revision: 30

Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/ItemView.js
   trunk/source/OutlinePlugin.js
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/View.js
   trunk/source/datastore.js
Log:



Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/BarChartPlugin.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -50,13 +50,13 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    inSectionView    The SectionView that serves as the superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
+ * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var barChart = new BarChartPlugin()
  */
 BarChartPlugin.prototype = new View();  // makes BarChartPlugin be a subclass of View
-function BarChartPlugin(inSectionView, inDivElement) {
+function BarChartPlugin(inSectionView, inHTMLElement) {
   this.setSuperview(inSectionView);
-  this.setDivElement(inDivElement);
+  this.setHTMLElement(inHTMLElement);
 }
 
 
@@ -168,7 +168,7 @@
     
   // return all the new content   
   var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
+  this.getHTMLElement().innerHTML = finalString;
 };
 
 
@@ -178,7 +178,7 @@
  * @scope    public instance method
  */
 BarChartPlugin.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
+  this.getHTMLElement().innerHTML = "";
 };
 
 

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/DetailPlugin.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -49,13 +49,13 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    inSuperView    The superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
+ * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var detailPlugin = new DetailPlugin()
  */
 DetailPlugin.prototype = new View();  // makes DetailPlugin be a subclass of View
-function DetailPlugin(inSuperView, inDivElement) {
+function DetailPlugin(inSuperView, inHTMLElement) {
   this.setSuperview(inSuperView);
-  this.setDivElement(inDivElement);  
+  this.setHTMLElement(inHTMLElement);  
 }
 
 
@@ -90,7 +90,7 @@
 
   // take all the HTML and put it together
   var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
+  this.getHTMLElement().innerHTML = finalString;
 };
 
 
@@ -100,7 +100,7 @@
  * @scope    public instance method
  */
 DetailPlugin.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
+  this.getHTMLElement().innerHTML = "";
 };
 
 

Modified: trunk/source/ItemView.js
===================================================================
--- trunk/source/ItemView.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/ItemView.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -51,20 +51,20 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    inRootView    The RootView that this ItemView is nested in. 
- * @param    inDivElement    The HTMLDivElement to display the HTML in. 
+ * @param    inHTMLElement    The HTMLElement to display the HTML in. 
  * @param    inItem    The item to be displayed by this view. 
  */
 ItemView.prototype = new View();  // makes ItemView be a subclass of View
-function ItemView(inRootView, inDivElement, inItem) {
+function ItemView(inRootView, inHTMLElement, inItem) {
   Util.assert(inItem instanceof Item);
-  Util.assert(inDivElement instanceof HTMLDivElement);
+  Util.assert(inHTMLElement instanceof HTMLElement);
   Util.assert(inRootView instanceof RootView);
 
   // instance properties
   this.setSuperview(inRootView);
-  this.setDivElement(inDivElement);
+  this.setHTMLElement(inHTMLElement);
   this.myItem = inItem;
-  // this.myDivElement = inDivElement;
+  // this.myDivElement = inHTMLElement;
   // this.myRootView = inRootView;
   this.myPlugin = null;
 }
@@ -102,8 +102,6 @@
  */
 ItemView.prototype.refresh = function () {
   Util.assert(this.myItem instanceof Item);
-  // Util.assert(this.myDivElement instanceof HTMLDivElement);
-  // RootView.displayTextInDebugTextarea("ItemView.prototype.refresh"); 
   var listOfStrings = [];
 
   // add an <h1> heading with the name of the page
@@ -115,11 +113,11 @@
 
   // write out all the new content 
   var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
+  this.getHTMLElement().innerHTML = finalString;
 
   // let the detailPlugin add its own content
-  var detailPluginDivElement = document.getElementById(detailDivId);
-  this.myPlugin = new DetailPlugin(this, detailPluginDivElement);
+  var detailPluginElement = document.getElementById(detailDivId);
+  this.myPlugin = new DetailPlugin(this, detailPluginElement);
   this.myPlugin.refresh();
 };
 

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/OutlinePlugin.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -48,13 +48,13 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    inSectionView    The SectionView that serves as the superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
+ * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var outline = new OutlinePlugin()
  */
 OutlinePlugin.prototype = new View();  // makes OutlinePlugin be a subclass of View
-function OutlinePlugin(inSectionView, inDivElement) {
+function OutlinePlugin(inSectionView, inHTMLElement) {
   this.setSuperview(inSectionView);
-  this.setDivElement(inDivElement);
+  this.setHTMLElement(inHTMLElement);
 }
 
 
@@ -77,7 +77,7 @@
  */
 OutlinePlugin.prototype.refresh = function () {
   var listOfContentItems = this.getSuperview().getListOfContentItems();
-  var outlineDiv = this.getDivElement();
+  var outlineDiv = this.getHTMLElement();
   outlineDiv.innerHTML = "";
   var ulElement = View.createAndAppendElement(outlineDiv, "ul");
   for (var contentItemKey in listOfContentItems) {
@@ -99,7 +99,7 @@
  * @scope    public instance method
  */
 OutlinePlugin.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
+  this.getHTMLElement().innerHTML = "";
 };
 
 

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/PageView.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -34,6 +34,7 @@
 //   Stevedore.js
 //   Util.js
 //   SectionView.js
+//   TextView.js
 // -------------------------------------------------------------------
 
 
@@ -52,22 +53,23 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    inRootView    The RootView that this PageView is nested in. 
- * @param    inDivElement    The HTMLDivElement to display the HTML in. 
- * @param    inPage    The page item to be displayed by this view. 
+ * @param    inHTMLElement The HTMLElement to display the HTML in. 
+ * @param    inPage        The page item to be displayed by this view. 
  */
 PageView.prototype = new View();  // makes PageView be a subclass of View
-function PageView(inRootView, inDivElement, inPage) {
+function PageView(inRootView, inHTMLElement, inPage) {
   Util.assert(inRootView instanceof RootView);
-  Util.assert(inDivElement instanceof HTMLDivElement);
+  Util.assert(inHTMLElement instanceof HTMLElement);
   Util.assert(inPage instanceof Item);
 
   // instance properties
   this.setSuperview(inRootView);
-  this.setDivElement(inDivElement);
+  this.setHTMLElement(inHTMLElement);
   this.myPage = inPage;
   this._myHasEverBeenDisplayedFlag = false;
   
   this._myPageSummaryView = null;
+  this._myHeaderText = null;
   this.myListOfSectionViews = [];
 }
 
@@ -93,6 +95,7 @@
   if (!this._myHasEverBeenDisplayedFlag) {
     this.doInitialDisplay();
   } else {
+    this._myHeaderText.refresh();
     this._myPageSummaryView.refresh();
     for (var key in this.myListOfSectionViews) {
       var sectionView = this.myListOfSectionViews[key];      
@@ -109,15 +112,17 @@
  * @scope    public instance method
  */
 PageView.prototype.doInitialDisplay = function () {
-  Util.assert(this.getDivElement() instanceof HTMLDivElement);
+  Util.assert(this.getHTMLElement() instanceof HTMLElement);
   
-  var pageDivElement = this.getDivElement();
+  var pageDivElement = this.getHTMLElement();
   
   var headerElement = View.createAndAppendElement(pageDivElement, "h1");
-  headerElement.innerHTML = this.myPage.getDisplayName();
+  this._myHeaderText = new TextView(this, headerElement, this.myPage,
+    Stevedore.UUID_FOR_ATTRIBUTE_NAME, SectionView.ELEMENT_CLASS_TEXT_VIEW);
 
   var summaryViewDiv = View.createAndAppendElement(pageDivElement, "div");
-  this._myPageSummaryView = new TextView(this, summaryViewDiv, this.myPage, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
+  this._myPageSummaryView = new TextView(this, summaryViewDiv, this.myPage,
+    Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
 
   // add <div> elements for each of the sections on the page
   // and create a new SectionView for each section

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/SectionView.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -35,6 +35,7 @@
 //   Util.js
 //   PageView.js
 //   TablePlugin.js
+//   TextView.js
 // -------------------------------------------------------------------
 
 
@@ -82,20 +83,20 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    inPageView    The PageView that serves as the superview for this view. 
- * @param    inDivElement    The HTMLDivElement to display the HTML in. 
+ * @param    inHTMLElement The HTMLElement to display the HTML in. 
  * @param    inSection    The Section item to be displayed in by this view. 
  * @param    inSectionNumber    The number of the section on the page (1, 2, 3, 4...). 
  * @syntax   var sectionView = new SectionView()
  */
 SectionView.prototype = new View();  // makes SectionView be a subclass of View
-function SectionView(inPageView, inDivElement, inSection, inSectionNumber) {
+function SectionView(inPageView, inHTMLElement, inSection, inSectionNumber) {
   Util.assert(inPageView instanceof PageView);
   Util.assert(inSection instanceof Item);
   
   // instance properties
   // PENDING: these should all be private
   this.setSuperview(inPageView);
-  this.setDivElement(inDivElement);
+  this.setHTMLElement(inHTMLElement);
   this.mySection = inSection;
   this.mySectionNumber = inSectionNumber;
   var query = inSection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY)[0];
@@ -105,6 +106,7 @@
   this._myPluginDiv = null;
   this._myHasEverBeenDisplayedFlag = false;
   this._mySectionSummaryView = null;
+  this._myHeaderView = null;
 }
 
 
@@ -183,6 +185,7 @@
     // refresh the <h2> element with the value: this.mySection.getDisplayName();  
     this._mySectionSummaryView.refresh();
     this._myPlugin.refresh();
+    this._myHeaderView.refresh();
   }
 };
 
@@ -194,7 +197,7 @@
  * @scope    public instance method
  */
 SectionView.prototype.doInitialDisplay = function () {
-  if (!this.getDivElement()) {
+  if (!this.getHTMLElement()) {
     return;
   }
   var selectedPluginName = this.mySection.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_PLUGIN_NAME)[0];
@@ -204,12 +207,14 @@
     return;
   }
 
-  var sectionDiv = this.getDivElement();
+  var sectionDiv = this.getHTMLElement();
   var outerDiv = View.createAndAppendElement(sectionDiv, "div", SectionView.ELEMENT_CLASS_SECTION);
   var headerH2 = View.createAndAppendElement(outerDiv, "h2");
-  headerH2.innerHTML = this.mySection.getDisplayName();
+  this._myHeaderView = new TextView(this, headerH2, this.mySection,
+    Stevedore.UUID_FOR_ATTRIBUTE_NAME, SectionView.ELEMENT_CLASS_TEXT_VIEW);
   var summaryDiv = View.createAndAppendElement(outerDiv, "div");
-  this._mySectionSummaryView = new TextView(this, summaryDiv, this.mySection, Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW);
+  this._mySectionSummaryView = new TextView(this, summaryDiv, this.mySection,
+    Stevedore.UUID_FOR_ATTRIBUTE_SUMMARY, SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
   View.createAndAppendElement(outerDiv, "p");
 
   // create the plugin editing controls, if we're in edit mode

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/TablePlugin.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -92,12 +92,12 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    inSectionView    The SectionView that this TablePlugin will appears in. 
- * @param    inDivElement    The HTMLDivElement to display this view in. 
+ * @param    inHTMLElement    The HTMLElement to display this view in. 
  */
 TablePlugin.prototype = new View();  // makes TablePlugin be a subclass of View
-function TablePlugin(inSectionView, inDivElement) {
+function TablePlugin(inSectionView, inHTMLElement) {
   this.setSuperview(inSectionView);
-  this.setDivElement(inDivElement);  
+  this.setHTMLElement(inHTMLElement);  
 
   this.myNumColumns = null;
   this.myNumRows = null;
@@ -222,7 +222,7 @@
   
   // write out all the new content   
   var finalString = listOfStrings.join("");
-  this.getDivElement().innerHTML = finalString;
+  this.getHTMLElement().innerHTML = finalString;
   
   // attach back-pointers to the newly created UI elements
   for (var elementId in hashTableOfCellDelegatesKeyedByElementId) {
@@ -239,7 +239,7 @@
  * @scope    public instance method
  */
 TablePlugin.prototype.endOfLife = function () {
-  this.getDivElement().innerHTML = "";
+  this.getHTMLElement().innerHTML = "";
 };
 
 

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/TextView.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -50,23 +50,25 @@
  * @scope    public instance constructor
  * @extends  View
  * @param    theSuperview    The view that this view is nested in. 
- * @param    theItem    The Item to be displayed and edited by this view. 
+ * @param    theItem         The Item to be displayed and edited by this view. 
  * @param    theAttribute    The attribute of the item to be displayed.
- * @param    theDivElement    The HTMLDivElement to display the HTML in. 
+ * @param    theElement      The HTMLElement to display the HTML in. 
  * @param    theClassType    A string that gives a class name to assign to the HTML element. 
+ * @param    isMultiLine     a boolean indicating if text view is single line or multi-line
  */
-TextView.prototype = new View();  // makes TextView be a subclass of View
-function TextView(theSuperview, theDivElement, theItem, theAttribute, theClassType) {
+TextView.prototype = new View()  // makes TextView be a subclass of View
+function TextView(theSuperview, theElement, theItem, theAttribute, theClassType, isMultiLine) {
   Util.assert(theItem instanceof Item);
   //Util.assert(theAttribute instanceof Attribute); PENDING need to check that attribute is an attribute
   
   this.setSuperview(theSuperview);
-  this.setDivElement(theDivElement);
+  this.setHTMLElement(theElement);
   this.textItem = theItem;
   this.attribute = theAttribute;
   this.editField = null;
   this.textObj = null;
   this.classType = theClassType;
+  this.isMultiLine = isMultiLine;
   this.isEditing = false;
   this._myHasEverBeenDisplayedFlag = false;
 };
@@ -82,10 +84,10 @@
   if (!this._myHasEverBeenDisplayedFlag) {
     this.doInitialDisplay();
   } else {
-    // if (weHaveBeenNotifiedOfChangesTo(this.textItem)) {
-    //   var newText = getNewValueFrom(this.textItem);
-    //   this.textNode.data = newText;
-    // }
+  // if (weHaveBeenNotifiedOfChangesTo(this.textItem)) {
+  //   var newText = getNewValueFrom(this.textItem);
+  //   this.textNode.data = newText;
+  // }
   }
 };
 
@@ -97,10 +99,9 @@
  * @scope    public instance method
  */
 TextView.prototype.doInitialDisplay = function() {
-  var divElement = this.getDivElement();
-  Util.assert(divElement instanceof HTMLDivElement);
+  var htmlElement = this.getHTMLElement();
   
-  divElement.className = TextView.ELEMENT_CLASS_TEXT_BLOCK;
+  htmlElement.className = TextView.ELEMENT_CLASS_TEXT_BLOCK;
   var textList = this.textItem.getValueListFromAttribute(this.attribute);
   var textString = "";
   if (textList && textList[0]) {
@@ -112,10 +113,10 @@
   // };
   
   this.textNode = document.createTextNode(textString);
-  divElement.appendChild(this.textNode);
+  htmlElement.appendChild(this.textNode);
 
   var listener = this;
-  Util.addEventListener(divElement, "click", function(event) { listener.onClick(event);});
+  Util.addEventListener(htmlElement, "click", function(event) { listener.onClick(event);});
     
   this._myHasEverBeenDisplayedFlag = true;
 };
@@ -130,16 +131,22 @@
   if (!this.isEditing) {
     var editField = this.editField;
     if (!editField) {
-      editField = this.editField = document.createElement("textarea");
+      if (this.isMultiLine) {
+        editField = this.editField = document.createElement("textarea");
+      }
+      else {
+        editField = document.createElement("input");
+        editField.type = 'text';
+      }
+      this.editField = editField;
       editField.className = this.classType;
-      //editField.cols=80; now using css style sheet "text_view"
       var listener = this; 
       Util.addEventListener(editField, "blur", function(event) {listener.onBlur(event);});
       Util.addEventListener(editField, "keyup", function(event) {listener.onKeyUp(event);});
       editField.defaultValue = this.textNode.data;
     }
-    editField.style.height = this.getDivElement().offsetHeight + "px";
-    this.getDivElement().replaceChild(editField, this.textNode);
+    editField.style.height = this.getHTMLElement().offsetHeight + "px";
+    this.getHTMLElement().replaceChild(editField, this.textNode);
     editField.focus();
     editField.select();
     this.isEditing = true;
@@ -165,7 +172,7 @@
   }
 };
 
-
+  
 /**
  * Called when focus leaves the text view.
  *
@@ -181,7 +188,7 @@
     this.textItem.clear(this.attribute);
     this.textItem.assign(this.attribute, newText); // PENDING: need to deal with multi valued attrs
     this.textNode.data = newText;
-    this.getDivElement().replaceChild(this.textNode, this.editField);
+    this.getHTMLElement().replaceChild(this.textNode, this.editField);
     this.isEditing = false;
   }
 };

Modified: trunk/source/View.js
===================================================================
--- trunk/source/View.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/View.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -44,7 +44,7 @@
 function View() {
   // alert("View constructor");
   this._mySuperview = null;
-  this._myDivElement = null;
+  this._myHTMLElement = null;
 }
 
 
@@ -73,27 +73,27 @@
 
 
 /**
- * Tells the View what HTMLDivElement to display itself in.
+ * Tells the View what HTMLElement to display itself in.
  *
  * @scope    public instance method
- * @param    inDivElement    The HTMLDivElement to display the view in. 
+ * @param    inHTMLElement    The HTMLDivElement to display the view in. 
  */
-View.prototype.setDivElement = function (inDivElement) {
-  Util.assert(inDivElement instanceof HTMLDivElement);
+View.prototype.setHTMLElement = function (inHTMLElement) {
+  Util.assert(inHTMLElement instanceof HTMLElement);
 
-  this._myDivElement = inDivElement;
+  this._myHTMLElement = inHTMLElement;
   // this.display();
 };
 
 
 /**
- * Returns the HTMLDivElement that the view displays itself in.
+ * Returns the HTMLElement that the view displays itself in.
  *
  * @scope    public instance method
- * @return   An HTMLDivElement. 
+ * @return   An HTMLElement. 
  */
-View.prototype.getDivElement = function () {
-  return this._myDivElement;
+View.prototype.getHTMLElement = function () {
+  return this._myHTMLElement;
 };
 
 
@@ -131,9 +131,9 @@
 
   if (inBoolean) {
     this.refresh();
-    this._myDivElement.style.display = "block";
+    this._myHTMLElement.style.display = "block";
   } else {
-    this._myDivElement.style.display = "none";
+    this._myHTMLElement.style.display = "none";
   }
 };
 

Modified: trunk/source/datastore.js
===================================================================
--- trunk/source/datastore.js	2005-04-12 04:05:47 UTC (rev 29)
+++ trunk/source/datastore.js	2005-04-12 05:01:19 UTC (rev 30)
@@ -1,7 +1,7 @@
 // Repository dump, in JSON format
 Stevedore._ourRepositoryInJsonFormat = {
   "format": "2005_MARCH_ITEM_CENTRIC_LIST", 
-  "timestamp": "Fri Mar 18 2005 13:59:58 GMT-0800 (PST)", 
+  "timestamp": "Mon Apr 11 2005 21:58:47 GMT-0700 (PDT)", 
   "data": [
   { "100": { "type": "Uuid", "value": 101 },
     /* Name       */   "102": [{ "type": "StringValue", "value": "Short Name" }, ],
@@ -74,8 +74,8 @@
   { "100": { "type": "Uuid", "value": 2000 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
     /* Short Name */   "101": [{ "type": "StringValue", "value": "1. Welcome!" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Welcome to the OpenRecord demo!" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Welcome to the OpenRecord demo!!" }, ],
+    /* Summary    */   "103": [{ "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'. dfdf" }, ],
   },
   { "100": { "type": "Uuid", "value": 3000 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],



From skinner at sheep.berlios.de  Tue Apr 12 19:14:42 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 12 Apr 2005 19:14:42 +0200
Subject: [openrecord-svn] r31 - trunk/source
Message-ID: <200504121714.j3CHEgE8009996@sheep.berlios.de>

Author: skinner
Date: 2005-04-12 19:14:41 +0200 (Tue, 12 Apr 2005)
New Revision: 31

Modified:
   trunk/source/TextView.js
   trunk/source/datastore.js
Log:
minor fixes

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-04-12 05:01:19 UTC (rev 30)
+++ trunk/source/TextView.js	2005-04-12 17:14:41 UTC (rev 31)
@@ -56,7 +56,7 @@
  * @param    theClassType    A string that gives a class name to assign to the HTML element. 
  * @param    isMultiLine     a boolean indicating if text view is single line or multi-line
  */
-TextView.prototype = new View()  // makes TextView be a subclass of View
+TextView.prototype = new View();  // makes TextView be a subclass of View
 function TextView(theSuperview, theElement, theItem, theAttribute, theClassType, isMultiLine) {
   Util.assert(theItem instanceof Item);
   //Util.assert(theAttribute instanceof Attribute); PENDING need to check that attribute is an attribute

Modified: trunk/source/datastore.js
===================================================================
--- trunk/source/datastore.js	2005-04-12 05:01:19 UTC (rev 30)
+++ trunk/source/datastore.js	2005-04-12 17:14:41 UTC (rev 31)
@@ -74,8 +74,8 @@
   { "100": { "type": "Uuid", "value": 2000 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
     /* Short Name */   "101": [{ "type": "StringValue", "value": "1. Welcome!" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Welcome to the OpenRecord demo!!" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'. dfdf" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Welcome to the OpenRecord demo!" }, ],
+    /* Summary    */   "103": [{ "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." }, ],
   },
   { "100": { "type": "Uuid", "value": 3000 },
     /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],



From skinner at sheep.berlios.de  Fri Apr 15 01:39:17 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 15 Apr 2005 01:39:17 +0200
Subject: [openrecord-svn] r32 - in trunk: . source third_party third_party/jsunit third_party/jsunit/jsunit2_1 third_party/jsunit/jsunit2_1/app third_party/jsunit/jsunit2_1/licenses
Message-ID: <200504142339.j3ENdHl3025947@sheep.berlios.de>

Author: skinner
Date: 2005-04-15 01:39:11 +0200 (Fri, 15 Apr 2005)
New Revision: 32

Added:
   trunk/source/TestSuite.html
   trunk/source/UtilTest.html
   trunk/source/UtilTest.js
   trunk/source/demo_page.html
   trunk/source/demo_page.js
   trunk/third_party/
   trunk/third_party/jsunit/
   trunk/third_party/jsunit/jsunit2_1/
   trunk/third_party/jsunit/jsunit2_1/app/
   trunk/third_party/jsunit/jsunit2_1/app/jsUnitCore.js
   trunk/third_party/jsunit/jsunit2_1/licenses/
   trunk/third_party/jsunit/jsunit2_1/licenses/MPL-1.1.txt
   trunk/third_party/jsunit/jsunit2_1/licenses/index.html
Removed:
   trunk/source/test_page.html
   trunk/source/test_page.js
Modified:
   trunk/source/datastore.js
Log:
Add our first few unit tests, using the JsUnit framework by Edward Hieatt.

Added: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/source/TestSuite.html	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>OpenRecord Test Suite</title>
+
+    <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new top.jsUnitTestSuite();
+        testSuite.addTestSuite(openRecordTestSuite());
+        return testSuite;
+      }
+      
+      function openRecordTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../subversive/trunk/source/UtilTest.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>OpenRecord Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>To run the tests, you need to use the 
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>To run these unit tests over the internet, go to 
+    <a href="http://www.edwardh.com/jsunit/runner/testRunner.html" rel="external">http://www.edwardh.com/jsunit/runner/testRunner.html</a>,
+    enter the URL of this page, and hit the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" href="http://creativecommons.org/licenses/publicdomain/">Public Domain Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/source/UtilTest.html
===================================================================
--- trunk/source/UtilTest.html	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/source/UtilTest.html	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for Util.js</title>
+
+    <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="Util.js"></script>
+    <script type="text/javascript" src="UtilTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for Util.js</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>To run the tests, you need to use the 
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>To run these unit tests over the internet, go to 
+    <a href="http://www.edwardh.com/jsunit/runner/testRunner.html" rel="external">http://www.edwardh.com/jsunit/runner/testRunner.html</a>,
+    enter the URL of this page, and hit the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" href="http://creativecommons.org/licenses/publicdomain/">Public Domain Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/source/UtilTest.js
===================================================================
--- trunk/source/UtilTest.js	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/source/UtilTest.js	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,69 @@
+/*****************************************************************************
+ UtilTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var UtilTestVars = null;
+
+function setUp() {
+  UtilTestVars = {};
+  UtilTestVars.theHobbit = "The Hobbit";
+}
+
+function testSimplestCase() {
+  assertTrue("This is true", true);
+}
+
+function testTypeCheckingMethods() {
+  assertTrue('"The Hobbit" is a string', Util.isString("The Hobbit"));
+  assertFalse('"The Hobbit" is not a number', Util.isNumber("The Hobbit"));
+  assertFalse('"The Hobbit" is not numeric', Util.isNumeric("The Hobbit"));
+  assertFalse('"The Hobbit" is not a boolean', Util.isBoolean("The Hobbit"));
+  assertFalse('"The Hobbit" is not an object', Util.isObject("The Hobbit"));
+  assertFalse('"The Hobbit" is not an array', Util.isArray("The Hobbit"));
+  assertFalse('"The Hobbit" is not a hash table', Util.isHashTable("The Hobbit"));
+}
+
+function testMethodsThatOperateOnSets() {
+  var aSet = [];
+  var theHobbit = UtilTestVars.theHobbit;
+  assertFalse('"The Hobbit" is not in an empty set', Util.isObjectInSet(theHobbit, aSet));
+  assertTrue('"The Hobbit" can be added to an empty set', Util.addObjectToSet(theHobbit, aSet));
+  assertTrue('"The Hobbit" is in the set after being added', Util.isObjectInSet(theHobbit, aSet));
+  assertTrue('"The Hobbit" can be removed from a set it is in', Util.removeObjectFromSet(theHobbit, aSet));
+  assertFalse('"The Hobbit" is no longer in a set it was removed from', Util.isObjectInSet(theHobbit, aSet));
+  assertFalse('"The Hobbit" can not be removed twice', Util.removeObjectFromSet(theHobbit, aSet));
+}
+
+function tearDown() {
+  test = null;
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/datastore.js
===================================================================
--- trunk/source/datastore.js	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/source/datastore.js	2005-04-14 23:39:11 UTC (rev 32)
@@ -1,7 +1,7 @@
 // Repository dump, in JSON format
 Stevedore._ourRepositoryInJsonFormat = {
   "format": "2005_MARCH_ITEM_CENTRIC_LIST", 
-  "timestamp": "Mon Apr 11 2005 21:58:47 GMT-0700 (PDT)", 
+  "timestamp": "Thu Apr 14 2005 13:52:41 GMT-0700 (Pacific Standard Time)", 
   "data": [
   { "100": { "type": "Uuid", "value": 101 },
     /* Name       */   "102": [{ "type": "StringValue", "value": "Short Name" }, ],

Copied: trunk/source/demo_page.html (from rev 30, trunk/source/test_page.html)
===================================================================
--- trunk/source/test_page.html	2005-04-12 05:01:19 UTC (rev 30)
+++ trunk/source/demo_page.html	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>openrecord.org - Demo Page</title>
+    <link rel="stylesheet" type="text/css" href="base_style.css" />
+    <script type="text/javascript" src="Util.js"></script>
+    <script type="text/javascript" src="View.js"></script>
+    <script type="text/javascript" src="RootView.js"></script>
+    <script type="text/javascript" src="ItemView.js"></script>
+    <script type="text/javascript" src="PageView.js"></script>
+    <script type="text/javascript" src="SectionView.js"></script>
+    <script type="text/javascript" src="TextView.js"></script>
+    <script type="text/javascript" src="TablePlugin.js"></script>
+    <script type="text/javascript" src="OutlinePlugin.js"></script>
+    <script type="text/javascript" src="DetailPlugin.js"></script>
+    <script type="text/javascript" src="BarChartPlugin.js"></script>
+    <script type="text/javascript" src="demo_page.js"></script>
+    <script type="text/javascript" src="Item.js"></script>
+    <script type="text/javascript" src="Stevedore.js"></script>
+    <script type="text/javascript" src="datastore.js"></script>
+  </head>
+  
+  <body>
+    <p>Sorry, the browser you're using doesn't support JavaScript. 
+    This page won't display correctly.</p>
+    
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+
+  </body>
+  
+</html>
+

Copied: trunk/source/demo_page.js (from rev 30, trunk/source/test_page.js)
===================================================================
--- trunk/source/test_page.js	2005-04-12 05:01:19 UTC (rev 30)
+++ trunk/source/demo_page.js	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,85 @@
+/*****************************************************************************
+ demo_page.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   repository.js
+//   root_view.js
+// -------------------------------------------------------------------
+
+/**
+ * Called when the window first loads. Calls all the functions that do 
+ * initialization when the page is loaded.
+ *
+ * @scope    global function
+ */
+window.doOnloadActions = function() {  
+  
+  var stevedore = new Stevedore();
+  stevedore._loadItemsFromList(Stevedore._ourRepositoryInJsonFormat);
+  window.rootView = new RootView(stevedore);
+  Util.setTargetsForExternalLinks();
+};
+
+
+/**
+ * Called when the user leaves the browser window.  Save any unsaved changes,
+ * and prepare to exit.
+ *
+ * @scope    global function
+ */
+window.doOnunloadActions = function() {
+  // stevedore.saveChanges();
+};
+
+window.doOnfocusActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onfocus");
+};
+
+window.doOnblurActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onblur");
+};
+
+
+// -------------------------------------------------------------------
+// Register for window events
+// -------------------------------------------------------------------
+window.onload = window.doOnloadActions;
+window.onunload = window.doOnunloadActions;
+window.onerror = Util.handleError;
+window.onfocus = window.doOnfocusActions;
+window.onblur = window.doOnblurActions;
+// window.onresize = window.doOnresizeActions;
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Deleted: trunk/source/test_page.html
===================================================================
--- trunk/source/test_page.html	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/source/test_page.html	2005-04-14 23:39:11 UTC (rev 32)
@@ -1,79 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-  <head>
-    <title>openrecord.org - Test Page</title>
-    <link rel="stylesheet" type="text/css" href="base_style.css" />
-    <script type="text/javascript" src="Util.js"></script>
-    <script type="text/javascript" src="View.js"></script>
-    <script type="text/javascript" src="RootView.js"></script>
-    <script type="text/javascript" src="ItemView.js"></script>
-    <script type="text/javascript" src="PageView.js"></script>
-    <script type="text/javascript" src="SectionView.js"></script>
-    <script type="text/javascript" src="TextView.js"></script>
-    <script type="text/javascript" src="TablePlugin.js"></script>
-    <script type="text/javascript" src="OutlinePlugin.js"></script>
-    <script type="text/javascript" src="DetailPlugin.js"></script>
-    <script type="text/javascript" src="BarChartPlugin.js"></script>
-    <script type="text/javascript" src="test_page.js"></script>
-    <script type="text/javascript" src="Item.js"></script>
-    <script type="text/javascript" src="Stevedore.js"></script>
-    <script type="text/javascript" src="datastore.js"></script>
-  </head>
-  
-  <body>
-    <p>Sorry, the browser you're using doesn't support JavaScript. 
-    This page won't display correctly.</p>
-<!--
-    <p class="header">
-      <span class="logo">
-        <a href="http://openrecord.org"><span class="logostart">open</span><span class="logomiddle">record</span><span class="logoend">.org</span></a>
-      </span>
-      <span id="main_control_span"></span>
-      <br/>
-    </p>
-
-    <noscript><p>Sorry, the browser you're using doesn't support JavaScript. 
-    This page won't display correctly.</p></noscript>
-        
-    <div class="navbar" id="navbar_div">test</div>
-    <div class="content_area">
-      <div id="content_view_div"></div>
-    </div>
-    <div class="debug" id="debug_div"></div>
-        
-    <p class="footer">
-      <span class="copyright">You can copy freely from this site &mdash; <a href="../page/copyright.html">copyright</a> rights relinquished under the Creative Commons  
-      <a rel="license external" href="http://creativecommons.org/licenses/publicdomain/">Public Domain Dedication</a>.</span>
-      <span class="fileformat"><span id="status_blurb_span"></span>
-      </span>
-      <br/>
-    </p>
--->
-    
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openagenda.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-
-  </body>
-  
-</html>
-

Deleted: trunk/source/test_page.js
===================================================================
--- trunk/source/test_page.js	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/source/test_page.js	2005-04-14 23:39:11 UTC (rev 32)
@@ -1,85 +0,0 @@
-/*****************************************************************************
- test_page.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   repository.js
-//   root_view.js
-// -------------------------------------------------------------------
-
-/**
- * Called when the window first loads. Calls all the functions that do 
- * initialization when the page is loaded.
- *
- * @scope    global function
- */
-window.doOnloadActions = function() {  
-  
-  var stevedore = new Stevedore();
-  stevedore._loadItemsFromList(Stevedore._ourRepositoryInJsonFormat);
-  window.rootView = new RootView(stevedore);
-  Util.setTargetsForExternalLinks();
-};
-
-
-/**
- * Called when the user leaves the browser window.  Save any unsaved changes,
- * and prepare to exit.
- *
- * @scope    global function
- */
-window.doOnunloadActions = function() {
-  // stevedore.saveChanges();
-};
-
-window.doOnfocusActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onfocus");
-};
-
-window.doOnblurActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onblur");
-};
-
-
-// -------------------------------------------------------------------
-// Register for window events
-// -------------------------------------------------------------------
-window.onload = window.doOnloadActions;
-window.onunload = window.doOnunloadActions;
-window.onerror = Util.handleError;
-window.onfocus = window.doOnfocusActions;
-window.onblur = window.doOnblurActions;
-// window.onresize = window.doOnresizeActions;
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Added: trunk/third_party/jsunit/jsunit2_1/app/jsUnitCore.js
===================================================================
--- trunk/third_party/jsunit/jsunit2_1/app/jsUnitCore.js	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/third_party/jsunit/jsunit2_1/app/jsUnitCore.js	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,383 @@
+/* @author Edward Hieatt, edward at jsunit.net */
+
+var JSUNIT_UNDEFINED_VALUE;
+var JSUNIT_VERSION="2.1";
+var isTestPageLoaded = false;
+
+//hack for NS62 bug
+function jsUnitFixTop() {
+  var tempTop = top;
+  if (!tempTop) {
+    tempTop = window;
+    while (tempTop.parent) {
+      tempTop = tempTop.parent;
+      if (tempTop.top && tempTop.top.jsUnitTestSuite) {
+        tempTop = tempTop.top;
+        break;
+      }
+    }
+  }
+  try {
+    window.top = tempTop;
+  } catch (e) {}
+}
+
+jsUnitFixTop();
+
+function _displayStringForValue(aVar) {
+  if (aVar === null) 
+    return 'null';
+    
+  if (aVar === top.JSUNIT_UNDEFINED_VALUE) 
+    return 'undefined';
+    
+  return aVar;
+}
+
+function fail(failureMessage) {
+  throw new JsUnitException(null, failureMessage);
+}
+
+function error(errorMessage) {
+  var errorObject         = new Object();
+  errorObject.description = errorMessage;
+  errorObject.stackTrace  = getStackTrace();
+  throw errorObject;
+}
+
+function argumentsIncludeComments(expectedNumberOfNonCommentArgs, args) {
+  return args.length == expectedNumberOfNonCommentArgs + 1;
+}
+
+function commentArg(expectedNumberOfNonCommentArgs, args) {
+  if (argumentsIncludeComments(expectedNumberOfNonCommentArgs, args))
+    return args[0];
+
+  return null;
+}
+
+function nonCommentArg(desiredNonCommentArgIndex, expectedNumberOfNonCommentArgs, args) {
+  return argumentsIncludeComments(expectedNumberOfNonCommentArgs, args) ?
+    args[desiredNonCommentArgIndex] :
+    args[desiredNonCommentArgIndex - 1];
+}
+
+function _validateArguments(expectedNumberOfNonCommentArgs, args) {
+  if (!( args.length == expectedNumberOfNonCommentArgs ||
+        (args.length == expectedNumberOfNonCommentArgs + 1 && typeof(args[0]) == 'string') ))
+    error('Incorrect arguments passed to assert function');
+}
+
+function _assert(comment, booleanValue, failureMessage) {
+  if (!booleanValue)
+    throw new JsUnitException(comment, failureMessage);
+}
+
+function assert() {
+  _validateArguments(1, arguments);
+  var booleanValue=nonCommentArg(1, 1, arguments);
+
+  if (typeof(booleanValue) != 'boolean')
+    error('Bad argument to assert(boolean)');
+
+  _assert(commentArg(1, arguments), booleanValue === true, 'Call to assert(boolean) with false');
+}
+
+function assertTrue() {
+  _validateArguments(1, arguments);
+  var booleanValue=nonCommentArg(1, 1, arguments);
+
+  if (typeof(booleanValue) != 'boolean')
+    error('Bad argument to assertTrue(boolean)');
+
+  _assert(commentArg(1, arguments), booleanValue === true, 'Call to assertTrue(boolean) with false');
+}
+
+function assertFalse() {
+  _validateArguments(1, arguments);
+  var booleanValue=nonCommentArg(1, 1, arguments);
+
+  if (typeof(booleanValue) != 'boolean')
+    error('Bad argument to assertFalse(boolean)');
+
+  _assert(commentArg(1, arguments), booleanValue === false, 'Call to assertFalse(boolean) with true');
+}
+
+function assertEquals() {
+  _validateArguments(2, arguments);
+  var var1=nonCommentArg(1, 2, arguments);
+  var var2=nonCommentArg(2, 2, arguments);
+  _assert(commentArg(2, arguments), var1 === var2, 'Expected ' + var1 + ' (' + typeof(var1) + ') but was ' + _displayStringForValue(var2) + ' (' + typeof(var2) + ')');
+}
+
+function assertNotEquals() {
+  _validateArguments(2, arguments);
+  var var1=nonCommentArg(1, 2, arguments);
+  var var2=nonCommentArg(2, 2, arguments);
+  _assert(commentArg(2, arguments), var1 !== var2, 'Expected not to be ' + _displayStringForValue(var2));
+}
+
+function assertNull() {
+  _validateArguments(1, arguments);
+  var aVar=nonCommentArg(1, 1, arguments);
+  _assert(commentArg(1, arguments), aVar === null, 'Expected null but was ' + _displayStringForValue(aVar));
+}
+
+function assertNotNull() {
+  _validateArguments(1, arguments);
+  var aVar=nonCommentArg(1, 1, arguments);
+  _assert(commentArg(1, arguments), aVar !== null, 'Expected not to be null');
+}
+
+function assertUndefined() {
+  _validateArguments(1, arguments);
+  var aVar=nonCommentArg(1, 1, arguments);
+  _assert(commentArg(1, arguments), aVar === top.JSUNIT_UNDEFINED_VALUE, 'Expected undefined but was ' + _displayStringForValue(aVar));
+}
+
+function assertNotUndefined() {
+  _validateArguments(1, arguments);
+  var aVar=nonCommentArg(1, 1, arguments);
+  _assert(commentArg(1, arguments), aVar !== top.JSUNIT_UNDEFINED_VALUE, 'Expected not to be undefined');
+}
+
+function assertNaN() {
+  _validateArguments(1, arguments);
+  var aVar=nonCommentArg(1, 1, arguments);
+  _assert(commentArg(1, arguments), isNaN(aVar), 'Expected NaN');
+}
+
+function assertNotNaN() {
+  _validateArguments(1, arguments);
+  var aVar=nonCommentArg(1, 1, arguments);
+  _assert(commentArg(1, arguments), !isNaN(aVar), 'Expected not NaN');
+}
+
+function isLoaded() {
+  return isTestPageLoaded;
+}
+
+function setUp() {
+}
+
+function tearDown() {
+}
+
+function getFunctionName(aFunction) {
+  var name = aFunction.toString().match(/function (\w*)/)[1];
+
+  if ((name == null) || (name.length == 0))
+    name = 'anonymous';
+
+  return name;
+}
+
+function getStackTrace() {
+  var result = '';
+
+  if (typeof(arguments.caller) != 'undefined') { // IE, not ECMA
+    for (var a = arguments.caller; a != null; a = a.caller) {
+      result += '> ' + getFunctionName(a.callee) + '\n';
+      if (a.caller == a) {
+        result += '*';
+        break;
+      }
+    }
+  }
+  else { // Mozilla, not ECMA
+    // fake an exception so we can get Mozilla's error stack
+    var testExcp;
+    try
+    {
+      foo.bar;
+    }
+    catch(testExcp)
+    {
+      var stack = parseErrorStack(testExcp);
+      for (var i = 1; i < stack.length; i++)
+      {
+        result += '> ' + stack[i] + '\n';
+      }
+    }
+  }
+
+  return result;
+}
+
+function parseErrorStack(excp)
+{
+  var stack = [];
+  var name;
+  
+  if (!excp || !excp.stack)
+  {
+    return stack;
+  }
+  
+  var stacklist = excp.stack.split('\n');
+
+  for (var i = 0; i < stacklist.length - 1; i++)
+  {
+    var framedata = stacklist[i];
+
+    name = framedata.match(/^(\w*)/)[1];
+    if (!name) {
+      name = 'anonymous';
+    }
+
+    stack[stack.length] = name;
+  }
+  // remove top level anonymous functions to match IE
+
+  while (stack.length && stack[stack.length - 1] == 'anonymous')
+  {
+    stack.length = stack.length - 1;
+  }
+  return stack;
+}
+
+function JsUnitException(comment, message) {
+  this.isJsUnitException = true;
+  this.comment           = comment;
+  this.jsUnitMessage     = message;
+  this.stackTrace        = getStackTrace();
+}
+
+function warn() {
+  if (top.tracer != null) 
+    top.tracer.warn(arguments[0], arguments[1]);
+}
+
+function inform() {
+  if (top.tracer != null) 
+    top.tracer.inform(arguments[0], arguments[1]);
+}
+
+function info() {
+  inform(arguments[0], arguments[1]);
+}
+
+function debug() {
+  if (top.tracer != null) 
+    top.tracer.debug(arguments[0], arguments[1]);
+}
+
+function setjsUnitTracer(ajsUnitTracer) {
+  top.tracer=ajsUnitTracer;
+}
+
+function trim(str) {
+  if (str == null) 
+    return null;
+
+  var startingIndex = 0;
+  var endingIndex   = str.length-1;
+  
+  while (str.substring(startingIndex, startingIndex+1) == ' ')
+    startingIndex++;
+
+  while (str.substring(endingIndex, endingIndex+1) == ' ')
+    endingIndex--;
+
+  if (endingIndex < startingIndex) 
+    return '';
+
+  return str.substring(startingIndex, endingIndex+1);
+}
+
+function isBlank(str) {
+  return trim(str) == '';
+}
+
+// the functions push(anArray, anObject) and pop(anArray) 
+// exist because the JavaScript Array.push(anObject) and Array.pop() 
+// functions are not available in IE 5.0
+
+function push(anArray, anObject) {
+  anArray[anArray.length]=anObject;
+}
+function pop(anArray) {
+  if (anArray.length>=1) {
+    delete anArray[anArray.length - 1];
+    anArray.length--;
+  }
+}
+
+// safe, strict access to jsUnitParmHash
+function jsUnitGetParm(name)
+{
+  if (typeof(top.jsUnitParmHash[name]) != 'undefined')
+  {
+    return top.jsUnitParmHash[name];
+  }
+  return null;
+}
+
+if (top && typeof(top.xbDEBUG) != 'undefined' && top.xbDEBUG.on && top.testManager)
+{
+  top.xbDebugTraceObject('top.testManager.containerTestFrame', 'JSUnitException');
+  // asserts
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', '_displayStringForValue');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'error');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'argumentsIncludeComments');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'commentArg');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'nonCommentArg');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', '_validateArguments');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', '_assert');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assert');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertTrue');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertEquals');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertNotEquals');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertNull');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertNotNull');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertUndefined');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertNotUndefined');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertNaN');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'assertNotNaN');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'isLoaded');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'setUp');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'tearDown');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'getFunctionName');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'getStackTrace');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'warn');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'inform');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'debug');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'setjsUnitTracer');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'trim');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'isBlank');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'newOnLoadEvent');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'push');
+  top.xbDebugTraceFunction('top.testManager.containerTestFrame', 'pop');
+}
+
+function newOnLoadEvent() {
+  isTestPageLoaded = true;
+}
+
+function jsUnitSetOnLoad(windowRef, onloadHandler)
+{
+  var isKonqueror = navigator.userAgent.indexOf('Konqueror/') != -1 ||
+                    navigator.userAgent.indexOf('Safari/')    != -1;
+
+  if (typeof(windowRef.attachEvent) != 'undefined') {
+    // Internet Explorer, Opera
+    windowRef.attachEvent("onload", onloadHandler);
+  } else if (typeof(windowRef.addEventListener) != 'undefined' && !isKonqueror){
+    // Mozilla, Konqueror
+    // exclude Konqueror due to load issues
+    windowRef.addEventListener("load", onloadHandler, false);
+  } else if (typeof(windowRef.document.addEventListener) != 'undefined' && !isKonqueror) {
+    // DOM 2 Events
+    // exclude Mozilla, Konqueror due to load issues
+    windowRef.document.addEventListener("load", onloadHandler, false);
+  } else if (typeof(windowRef.onload) != 'undefined' && windowRef.onload) {
+    windowRef.jsunit_original_onload = windowRef.onload;
+    windowRef.onload = function() { windowRef.jsunit_original_onload(); onloadHandler(); };
+  } else {
+    // browsers that do not support windowRef.attachEvent or 
+    // windowRef.addEventListener will override a page's own onload event
+    windowRef.onload=onloadHandler; 
+  }
+}
+
+jsUnitSetOnLoad(window, newOnLoadEvent);
\ No newline at end of file

Added: trunk/third_party/jsunit/jsunit2_1/licenses/MPL-1.1.txt
===================================================================
--- trunk/third_party/jsunit/jsunit2_1/licenses/MPL-1.1.txt	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/third_party/jsunit/jsunit2_1/licenses/MPL-1.1.txt	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,470 @@
+                          MOZILLA PUBLIC LICENSE
+                                Version 1.1
+
+                              ---------------
+
+1. Definitions.
+
+     1.0.1. "Commercial Use" means distribution or otherwise making the
+     Covered Code available to a third party.
+
+     1.1. "Contributor" means each entity that creates or contributes to
+     the creation of Modifications.
+
+     1.2. "Contributor Version" means the combination of the Original
+     Code, prior Modifications used by a Contributor, and the Modifications
+     made by that particular Contributor.
+
+     1.3. "Covered Code" means the Original Code or Modifications or the
+     combination of the Original Code and Modifications, in each case
+     including portions thereof.
+
+     1.4. "Electronic Distribution Mechanism" means a mechanism generally
+     accepted in the software development community for the electronic
+     transfer of data.
+
+     1.5. "Executable" means Covered Code in any form other than Source
+     Code.
+
+     1.6. "Initial Developer" means the individual or entity identified
+     as the Initial Developer in the Source Code notice required by Exhibit
+     A.
+
+     1.7. "Larger Work" means a work which combines Covered Code or
+     portions thereof with code not governed by the terms of this License.
+
+     1.8. "License" means this document.
+
+     1.8.1. "Licensable" means having the right to grant, to the maximum
+     extent possible, whether at the time of the initial grant or
+     subsequently acquired, any and all of the rights conveyed herein.
+
+     1.9. "Modifications" means any addition to or deletion from the
+     substance or structure of either the Original Code or any previous
+     Modifications. When Covered Code is released as a series of files, a
+     Modification is:
+          A. Any addition to or deletion from the contents of a file
+          containing Original Code or previous Modifications.
+
+          B. Any new file that contains any part of the Original Code or
+          previous Modifications.
+
+     1.10. "Original Code" means Source Code of computer software code
+     which is described in the Source Code notice required by Exhibit A as
+     Original Code, and which, at the time of its release under this
+     License is not already Covered Code governed by this License.
+
+     1.10.1. "Patent Claims" means any patent claim(s), now owned or
+     hereafter acquired, including without limitation,  method, process,
+     and apparatus claims, in any patent Licensable by grantor.
+
+     1.11. "Source Code" means the preferred form of the Covered Code for
+     making modifications to it, including all modules it contains, plus
+     any associated interface definition files, scripts used to control
+     compilation and installation of an Executable, or source code
+     differential comparisons against either the Original Code or another
+     well known, available Covered Code of the Contributor's choice. The
+     Source Code can be in a compressed or archival form, provided the
+     appropriate decompression or de-archiving software is widely available
+     for no charge.
+
+     1.12. "You" (or "Your")  means an individual or a legal entity
+     exercising rights under, and complying with all of the terms of, this
+     License or a future version of this License issued under Section 6.1.
+     For legal entities, "You" includes any entity which controls, is
+     controlled by, or is under common control with You. For purposes of
+     this definition, "control" means (a) the power, direct or indirect,
+     to cause the direction or management of such entity, whether by
+     contract or otherwise, or (b) ownership of more than fifty percent
+     (50%) of the outstanding shares or beneficial ownership of such
+     entity.
+
+2. Source Code License.
+
+     2.1. The Initial Developer Grant.
+     The Initial Developer hereby grants You a world-wide, royalty-free,
+     non-exclusive license, subject to third party intellectual property
+     claims:
+          (a)  under intellectual property rights (other than patent or
+          trademark) Licensable by Initial Developer to use, reproduce,
+          modify, display, perform, sublicense and distribute the Original
+          Code (or portions thereof) with or without Modifications, and/or
+          as part of a Larger Work; and
+
+          (b) under Patents Claims infringed by the making, using or
+          selling of Original Code, to make, have made, use, practice,
+          sell, and offer for sale, and/or otherwise dispose of the
+          Original Code (or portions thereof).
+
+          (c) the licenses granted in this Section 2.1(a) and (b) are
+          effective on the date Initial Developer first distributes
+          Original Code under the terms of this License.
+
+          (d) Notwithstanding Section 2.1(b) above, no patent license is
+          granted: 1) for code that You delete from the Original Code; 2)
+          separate from the Original Code;  or 3) for infringements caused
+          by: i) the modification of the Original Code or ii) the
+          combination of the Original Code with other software or devices.
+
+     2.2. Contributor Grant.
+     Subject to third party intellectual property claims, each Contributor
+     hereby grants You a world-wide, royalty-free, non-exclusive license
+
+          (a)  under intellectual property rights (other than patent or
+          trademark) Licensable by Contributor, to use, reproduce, modify,
+          display, perform, sublicense and distribute the Modifications
+          created by such Contributor (or portions thereof) either on an
+          unmodified basis, with other Modifications, as Covered Code
+          and/or as part of a Larger Work; and
+
+          (b) under Patent Claims infringed by the making, using, or
+          selling of  Modifications made by that Contributor either alone
+          and/or in combination with its Contributor Version (or portions
+          of such combination), to make, use, sell, offer for sale, have
+          made, and/or otherwise dispose of: 1) Modifications made by that
+          Contributor (or portions thereof); and 2) the combination of
+          Modifications made by that Contributor with its Contributor
+          Version (or portions of such combination).
+
+          (c) the licenses granted in Sections 2.2(a) and 2.2(b) are
+          effective on the date Contributor first makes Commercial Use of
+          the Covered Code.
+
+          (d)    Notwithstanding Section 2.2(b) above, no patent license is
+          granted: 1) for any code that Contributor has deleted from the
+          Contributor Version; 2)  separate from the Contributor Version;
+          3)  for infringements caused by: i) third party modifications of
+          Contributor Version or ii)  the combination of Modifications made
+          by that Contributor with other software  (except as part of the
+          Contributor Version) or other devices; or 4) under Patent Claims
+          infringed by Covered Code in the absence of Modifications made by
+          that Contributor.
+
+3. Distribution Obligations.
+
+     3.1. Application of License.
+     The Modifications which You create or to which You contribute are
+     governed by the terms of this License, including without limitation
+     Section 2.2. The Source Code version of Covered Code may be
+     distributed only under the terms of this License or a future version
+     of this License released under Section 6.1, and You must include a
+     copy of this License with every copy of the Source Code You
+     distribute. You may not offer or impose any terms on any Source Code
+     version that alters or restricts the applicable version of this
+     License or the recipients' rights hereunder. However, You may include
+     an additional document offering the additional rights described in
+     Section 3.5.
+
+     3.2. Availability of Source Code.
+     Any Modification which You create or to which You contribute must be
+     made available in Source Code form under the terms of this License
+     either on the same media as an Executable version or via an accepted
+     Electronic Distribution Mechanism to anyone to whom you made an
+     Executable version available; and if made available via Electronic
+     Distribution Mechanism, must remain available for at least twelve (12)
+     months after the date it initially became available, or at least six
+     (6) months after a subsequent version of that particular Modification
+     has been made available to such recipients. You are responsible for
+     ensuring that the Source Code version remains available even if the
+     Electronic Distribution Mechanism is maintained by a third party.
+
+     3.3. Description of Modifications.
+     You must cause all Covered Code to which You contribute to contain a
+     file documenting the changes You made to create that Covered Code and
+     the date of any change. You must include a prominent statement that
+     the Modification is derived, directly or indirectly, from Original
+     Code provided by the Initial Developer and including the name of the
+     Initial Developer in (a) the Source Code, and (b) in any notice in an
+     Executable version or related documentation in which You describe the
+     origin or ownership of the Covered Code.
+
+     3.4. Intellectual Property Matters
+          (a) Third Party Claims.
+          If Contributor has knowledge that a license under a third party's
+          intellectual property rights is required to exercise the rights
+          granted by such Contributor under Sections 2.1 or 2.2,
+          Contributor must include a text file with the Source Code
+          distribution titled "LEGAL" which describes the claim and the
+          party making the claim in sufficient detail that a recipient will
+          know whom to contact. If Contributor obtains such knowledge after
+          the Modification is made available as described in Section 3.2,
+          Contributor shall promptly modify the LEGAL file in all copies
+          Contributor makes available thereafter and shall take other steps
+          (such as notifying appropriate mailing lists or newsgroups)
+          reasonably calculated to inform those who received the Covered
+          Code that new knowledge has been obtained.
+
+          (b) Contributor APIs.
+          If Contributor's Modifications include an application programming
+          interface and Contributor has knowledge of patent licenses which
+          are reasonably necessary to implement that API, Contributor must
+          also include this information in the LEGAL file.
+
+               (c)    Representations.
+          Contributor represents that, except as disclosed pursuant to
+          Section 3.4(a) above, Contributor believes that Contributor's
+          Modifications are Contributor's original creation(s) and/or
+          Contributor has sufficient rights to grant the rights conveyed by
+          this License.
+
+     3.5. Required Notices.
+     You must duplicate the notice in Exhibit A in each file of the Source
+     Code.  If it is not possible to put such notice in a particular Source
+     Code file due to its structure, then You must include such notice in a
+     location (such as a relevant directory) where a user would be likely
+     to look for such a notice.  If You created one or more Modification(s)
+     You may add your name as a Contributor to the notice described in
+     Exhibit A.  You must also duplicate this License in any documentation
+     for the Source Code where You describe recipients' rights or ownership
+     rights relating to Covered Code.  You may choose to offer, and to
+     charge a fee for, warranty, support, indemnity or liability
+     obligations to one or more recipients of Covered Code. However, You
+     may do so only on Your own behalf, and not on behalf of the Initial
+     Developer or any Contributor. You must make it absolutely clear than
+     any such warranty, support, indemnity or liability obligation is
+     offered by You alone, and You hereby agree to indemnify the Initial
+     Developer and every Contributor for any liability incurred by the
+     Initial Developer or such Contributor as a result of warranty,
+     support, indemnity or liability terms You offer.
+
+     3.6. Distribution of Executable Versions.
+     You may distribute Covered Code in Executable form only if the
+     requirements of Section 3.1-3.5 have been met for that Covered Code,
+     and if You include a notice stating that the Source Code version of
+     the Covered Code is available under the terms of this License,
+     including a description of how and where You have fulfilled the
+     obligations of Section 3.2. The notice must be conspicuously included
+     in any notice in an Executable version, related documentation or
+     collateral in which You describe recipients' rights relating to the
+     Covered Code. You may distribute the Executable version of Covered
+     Code or ownership rights under a license of Your choice, which may
+     contain terms different from this License, provided that You are in
+     compliance with the terms of this License and that the license for the
+     Executable version does not attempt to limit or alter the recipient's
+     rights in the Source Code version from the rights set forth in this
+     License. If You distribute the Executable version under a different
+     license You must make it absolutely clear that any terms which differ
+     from this License are offered by You alone, not by the Initial
+     Developer or any Contributor. You hereby agree to indemnify the
+     Initial Developer and every Contributor for any liability incurred by
+     the Initial Developer or such Contributor as a result of any such
+     terms You offer.
+
+     3.7. Larger Works.
+     You may create a Larger Work by combining Covered Code with other code
+     not governed by the terms of this License and distribute the Larger
+     Work as a single product. In such a case, You must make sure the
+     requirements of this License are fulfilled for the Covered Code.
+
+4. Inability to Comply Due to Statute or Regulation.
+
+     If it is impossible for You to comply with any of the terms of this
+     License with respect to some or all of the Covered Code due to
+     statute, judicial order, or regulation then You must: (a) comply with
+     the terms of this License to the maximum extent possible; and (b)
+     describe the limitations and the code they affect. Such description
+     must be included in the LEGAL file described in Section 3.4 and must
+     be included with all distributions of the Source Code. Except to the
+     extent prohibited by statute or regulation, such description must be
+     sufficiently detailed for a recipient of ordinary skill to be able to
+     understand it.
+
+5. Application of this License.
+
+     This License applies to code to which the Initial Developer has
+     attached the notice in Exhibit A and to related Covered Code.
+
+6. Versions of the License.
+
+     6.1. New Versions.
+     Netscape Communications Corporation ("Netscape") may publish revised
+     and/or new versions of the License from time to time. Each version
+     will be given a distinguishing version number.
+
+     6.2. Effect of New Versions.
+     Once Covered Code has been published under a particular version of the
+     License, You may always continue to use it under the terms of that
+     version. You may also choose to use such Covered Code under the terms
+     of any subsequent version of the License published by Netscape. No one
+     other than Netscape has the right to modify the terms applicable to
+     Covered Code created under this License.
+
+     6.3. Derivative Works.
+     If You create or use a modified version of this License (which you may
+     only do in order to apply it to code which is not already Covered Code
+     governed by this License), You must (a) rename Your license so that
+     the phrases "Mozilla", "MOZILLAPL", "MOZPL", "Netscape",
+     "MPL", "NPL" or any confusingly similar phrase do not appear in your
+     license (except to note that your license differs from this License)
+     and (b) otherwise make it clear that Your version of the license
+     contains terms which differ from the Mozilla Public License and
+     Netscape Public License. (Filling in the name of the Initial
+     Developer, Original Code or Contributor in the notice described in
+     Exhibit A shall not of themselves be deemed to be modifications of
+     this License.)
+
+7. DISCLAIMER OF WARRANTY.
+
+     COVERED CODE IS PROVIDED UNDER THIS LICENSE ON AN "AS IS" BASIS,
+     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING,
+     WITHOUT LIMITATION, WARRANTIES THAT THE COVERED CODE IS FREE OF
+     DEFECTS, MERCHANTABLE, FIT FOR A PARTICULAR PURPOSE OR NON-INFRINGING.
+     THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE COVERED CODE
+     IS WITH YOU. SHOULD ANY COVERED CODE PROVE DEFECTIVE IN ANY RESPECT,
+     YOU (NOT THE INITIAL DEVELOPER OR ANY OTHER CONTRIBUTOR) ASSUME THE
+     COST OF ANY NECESSARY SERVICING, REPAIR OR CORRECTION. THIS DISCLAIMER
+     OF WARRANTY CONSTITUTES AN ESSENTIAL PART OF THIS LICENSE. NO USE OF
+     ANY COVERED CODE IS AUTHORIZED HEREUNDER EXCEPT UNDER THIS DISCLAIMER.
+
+8. TERMINATION.
+
+     8.1.  This License and the rights granted hereunder will terminate
+     automatically if You fail to comply with terms herein and fail to cure
+     such breach within 30 days of becoming aware of the breach. All
+     sublicenses to the Covered Code which are properly granted shall
+     survive any termination of this License. Provisions which, by their
+     nature, must remain in effect beyond the termination of this License
+     shall survive.
+
+     8.2.  If You initiate litigation by asserting a patent infringement
+     claim (excluding declatory judgment actions) against Initial Developer
+     or a Contributor (the Initial Developer or Contributor against whom
+     You file such action is referred to as "Participant")  alleging that:
+
+     (a)  such Participant's Contributor Version directly or indirectly
+     infringes any patent, then any and all rights granted by such
+     Participant to You under Sections 2.1 and/or 2.2 of this License
+     shall, upon 60 days notice from Participant terminate prospectively,
+     unless if within 60 days after receipt of notice You either: (i)
+     agree in writing to pay Participant a mutually agreeable reasonable
+     royalty for Your past and future use of Modifications made by such
+     Participant, or (ii) withdraw Your litigation claim with respect to
+     the Contributor Version against such Participant.  If within 60 days
+     of notice, a reasonable royalty and payment arrangement are not
+     mutually agreed upon in writing by the parties or the litigation claim
+     is not withdrawn, the rights granted by Participant to You under
+     Sections 2.1 and/or 2.2 automatically terminate at the expiration of
+     the 60 day notice period specified above.
+
+     (b)  any software, hardware, or device, other than such Participant's
+     Contributor Version, directly or indirectly infringes any patent, then
+     any rights granted to You by such Participant under Sections 2.1(b)
+     and 2.2(b) are revoked effective as of the date You first made, used,
+     sold, distributed, or had made, Modifications made by that
+     Participant.
+
+     8.3.  If You assert a patent infringement claim against Participant
+     alleging that such Participant's Contributor Version directly or
+     indirectly infringes any patent where such claim is resolved (such as
+     by license or settlement) prior to the initiation of patent
+     infringement litigation, then the reasonable value of the licenses
+     granted by such Participant under Sections 2.1 or 2.2 shall be taken
+     into account in determining the amount or value of any payment or
+     license.
+
+     8.4.  In the event of termination under Sections 8.1 or 8.2 above,
+     all end user license agreements (excluding distributors and resellers)
+     which have been validly granted by You or any distributor hereunder
+     prior to termination shall survive termination.
+
+9. LIMITATION OF LIABILITY.
+
+     UNDER NO CIRCUMSTANCES AND UNDER NO LEGAL THEORY, WHETHER TORT
+     (INCLUDING NEGLIGENCE), CONTRACT, OR OTHERWISE, SHALL YOU, THE INITIAL
+     DEVELOPER, ANY OTHER CONTRIBUTOR, OR ANY DISTRIBUTOR OF COVERED CODE,
+     OR ANY SUPPLIER OF ANY OF SUCH PARTIES, BE LIABLE TO ANY PERSON FOR
+     ANY INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES OF ANY
+     CHARACTER INCLUDING, WITHOUT LIMITATION, DAMAGES FOR LOSS OF GOODWILL,
+     WORK STOPPAGE, COMPUTER FAILURE OR MALFUNCTION, OR ANY AND ALL OTHER
+     COMMERCIAL DAMAGES OR LOSSES, EVEN IF SUCH PARTY SHALL HAVE BEEN
+     INFORMED OF THE POSSIBILITY OF SUCH DAMAGES. THIS LIMITATION OF
+     LIABILITY SHALL NOT APPLY TO LIABILITY FOR DEATH OR PERSONAL INJURY
+     RESULTING FROM SUCH PARTY'S NEGLIGENCE TO THE EXTENT APPLICABLE LAW
+     PROHIBITS SUCH LIMITATION. SOME JURISDICTIONS DO NOT ALLOW THE
+     EXCLUSION OR LIMITATION OF INCIDENTAL OR CONSEQUENTIAL DAMAGES, SO
+     THIS EXCLUSION AND LIMITATION MAY NOT APPLY TO YOU.
+
+10. U.S. GOVERNMENT END USERS.
+
+     The Covered Code is a "commercial item," as that term is defined in
+     48 C.F.R. 2.101 (Oct. 1995), consisting of "commercial computer
+     software" and "commercial computer software documentation," as such
+     terms are used in 48 C.F.R. 12.212 (Sept. 1995). Consistent with 48
+     C.F.R. 12.212 and 48 C.F.R. 227.7202-1 through 227.7202-4 (June 1995),
+     all U.S. Government End Users acquire Covered Code with only those
+     rights set forth herein.
+
+11. MISCELLANEOUS.
+
+     This License represents the complete agreement concerning subject
+     matter hereof. If any provision of this License is held to be
+     unenforceable, such provision shall be reformed only to the extent
+     necessary to make it enforceable. This License shall be governed by
+     California law provisions (except to the extent applicable law, if
+     any, provides otherwise), excluding its conflict-of-law provisions.
+     With respect to disputes in which at least one party is a citizen of,
+     or an entity chartered or registered to do business in the United
+     States of America, any litigation relating to this License shall be
+     subject to the jurisdiction of the Federal Courts of the Northern
+     District of California, with venue lying in Santa Clara County,
+     California, with the losing party responsible for costs, including
+     without limitation, court costs and reasonable attorneys' fees and
+     expenses. The application of the United Nations Convention on
+     Contracts for the International Sale of Goods is expressly excluded.
+     Any law or regulation which provides that the language of a contract
+     shall be construed against the drafter shall not apply to this
+     License.
+
+12. RESPONSIBILITY FOR CLAIMS.
+
+     As between Initial Developer and the Contributors, each party is
+     responsible for claims and damages arising, directly or indirectly,
+     out of its utilization of rights under this License and You agree to
+     work with Initial Developer and Contributors to distribute such
+     responsibility on an equitable basis. Nothing herein is intended or
+     shall be deemed to constitute any admission of liability.
+
+13. MULTIPLE-LICENSED CODE.
+
+     Initial Developer may designate portions of the Covered Code as
+     "Multiple-Licensed".  "Multiple-Licensed" means that the Initial
+     Developer permits you to utilize portions of the Covered Code under
+     Your choice of the NPL or the alternative licenses, if any, specified
+     by the Initial Developer in the file described in Exhibit A.
+
+EXHIBIT A -Mozilla Public License.
+
+     ``The contents of this file are subject to the Mozilla Public License
+     Version 1.1 (the "License"); you may not use this file except in
+     compliance with the License. You may obtain a copy of the License at
+     http://www.mozilla.org/MPL/
+
+     Software distributed under the License is distributed on an "AS IS"
+     basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
+     License for the specific language governing rights and limitations
+     under the License.
+
+     The Original Code is ______________________________________.
+
+     The Initial Developer of the Original Code is ________________________.
+     Portions created by ______________________ are Copyright (C) ______
+     _______________________. All Rights Reserved.
+
+     Contributor(s): ______________________________________.
+
+     Alternatively, the contents of this file may be used under the terms
+     of the _____ license (the  "[___] License"), in which case the
+     provisions of [______] License are applicable instead of those
+     above.  If you wish to allow use of your version of this file only
+     under the terms of the [____] License and not to allow others to use
+     your version of this file under the MPL, indicate your decision by
+     deleting  the provisions above and replace  them with the notice and
+     other provisions required by the [___] License.  If you do not delete
+     the provisions above, a recipient may use your version of this file
+     under either the MPL or the [___] License."
+
+     [NOTE: The text of this Exhibit A may differ slightly from the text of
+     the notices in the Source Code files of the Original Code. You should
+     use the text of this Exhibit A rather than the text found in the
+     Original Code Source Code for Your Modifications.]
+

Added: trunk/third_party/jsunit/jsunit2_1/licenses/index.html
===================================================================
--- trunk/third_party/jsunit/jsunit2_1/licenses/index.html	2005-04-12 17:14:41 UTC (rev 31)
+++ trunk/third_party/jsunit/jsunit2_1/licenses/index.html	2005-04-14 23:39:11 UTC (rev 32)
@@ -0,0 +1,134 @@
+<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
+            "http://www.w3.org/TR/html4/loose.dtd">
+<html>
+<!-- JsUnit -->
+<!-- ***** BEGIN LICENSE BLOCK *****
+   - Version: MPL 1.1/GPL 2.0/LGPL 2.1
+   -
+   - The contents of this file are subject to the Mozilla Public License Version
+   - 1.1 (the "License"); you may not use this file except in compliance with
+   - the License. You may obtain a copy of the License at
+   - http://www.mozilla.org/MPL/
+   -
+   - Software distributed under the License is distributed on an "AS IS" basis,
+   - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+   - for the specific language governing rights and limitations under the
+   - License.
+   -
+   - The Original Code is Edward Hieatt code.
+   -
+   - The Initial Developer of the Original Code is
+   - Edward Hieatt, edward at jsunit.net.
+   - Portions created by the Initial Developer are Copyright (C) 2001
+   - the Initial Developer. All Rights Reserved.
+   -
+   - Contributor(s):
+   - Edward Hieatt, edward at jsunit.net (original author)
+   - Bob Clary, bc at bclary.comn
+   -
+   - Alternatively, the contents of this file may be used under the terms of
+   - either the GNU General Public License Version 2 or later (the "GPL"), or
+   - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+   - in which case the provisions of the GPL or the LGPL are applicable instead
+   - of those above. If you wish to allow use of your version of this file only
+   - under the terms of either the GPL or the LGPL, and not to allow others to
+   - use your version of this file under the terms of the MPL, indicate your
+   - decision by deleting the provisions above and replace them with the notice
+   - and other provisions required by the LGPL or the GPL. If you do not delete
+   - the provisions above, a recipient may use your version of this file under
+   - the terms of any one of the MPL, the GPL or the LGPL.
+   -
+   - ***** END LICENSE BLOCK ***** -->
+
+  <head>
+	<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">  
+    <title>Licensing</title>
+    <link rel="stylesheet" type="text/css" href="../app/css/jsUnitStyle.css">
+  </head>
+  <body>
+      <table width="100%" cellpadding="0" cellspacing="0" border="1" summary="jsUnit Information">
+        <tr>
+          <th align="center" valign="top"><h1>JsUnit Licenses</h1></th>
+
+          <td align="right" valign="top">
+           <a href="http://www.jsunit.net/" target="_blank">JsUnit Home</a><br>
+           <a href="mailto:edward at jsunit.net">edward at jsunit.net</a><br>
+        </tr>
+      </table>
+
+    <p><h2>Third-party licenses:</h2>
+    <ul>
+    	<li>JDOM: Portions of this software are copyright Copyright (C) 2000-2003 Jason Hunter & Brett McLaughlin.  All rights reserved.  See <a href="JDOM_license.txt">JDOM_license.txt</a>.
+		<li>Jetty: Portions of this software are copyright ? Mort Bay Consulting Pty. Ltd. (Australia) and others.  All Rights Reserved.  See <a href="Jetty_license.html">Jetty_license.html</a>.
+    	<li>Individual files in this package may contain additional copyright notices. The javax.servlet packages are copyright Sun Microsystems Inc.  All Rights Reserved.
+    </ul>
+    </p>
+
+    <p><h2>JsUnit licenses:</h2>
+    JsUnit is licensed under 3 different licenses giving you the freedom
+    to use, modify and distribute JsUnit in a variety of fashions.
+    </p>
+    
+    <ol>
+      <li>
+      <p><a href="MPL-1.1.txt">Mozilla Public License 1.1</a></p>
+      <p>See <a href="http://www.mozilla.org/MPL/">mozilla.org</a>
+      for more details.</p>
+      </li>
+
+      <li>
+      <p><a href="gpl-2.txt">GNU Public License 2</a></p>
+      <p>See <a href="http://www.gnu.org/licenses/licenses.html">www.gnu.org</a>
+      for more details.</p>
+      </li>
+
+      <li>
+      <p><a href="lgpl-2.1.txt">GNU Lesser Public License 2.1</a></p>
+      <p>See <a href="http://www.gnu.org/licenses/licenses.html">www.gnu.org</a>
+      for more details.</p>
+      </li>
+    </ol>
+    
+    <p>
+        Every Java and JavaScript source file in this distribution should be considered to be under the following licensing terms.
+        <pre>
+         ***** BEGIN LICENSE BLOCK *****
+         - Version: MPL 1.1/GPL 2.0/LGPL 2.1
+         -
+         - The contents of this file are subject to the Mozilla Public License Version
+         - 1.1 (the "License"); you may not use this file except in compliance with
+         - the License. You may obtain a copy of the License at
+         - http://www.mozilla.org/MPL/
+         -
+         - Software distributed under the License is distributed on an "AS IS" basis,
+         - WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
+         - for the specific language governing rights and limitations under the
+         - License.
+         -
+         - The Original Code is Edward Hieatt code.
+         -
+         - The Initial Developer of the Original Code is
+         - Edward Hieatt, edward at jsunit.net.
+         - Portions created by the Initial Developer are Copyright (C) 2003
+         - the Initial Developer. All Rights Reserved.
+         -
+         - Author Edward Hieatt, edward at jsunit.net
+         -
+         - Alternatively, the contents of this file may be used under the terms of
+         - either the GNU General Public License Version 2 or later (the "GPL"), or
+         - the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
+         - in which case the provisions of the GPL or the LGPL are applicable instead
+         - of those above. If you wish to allow use of your version of this file only
+         - under the terms of either the GPL or the LGPL, and not to allow others to
+         - use your version of this file under the terms of the MPL, indicate your
+         - decision by deleting the provisions above and replace them with the notice
+         - and other provisions required by the LGPL or the GPL. If you do not delete
+         - the provisions above, a recipient may use your version of this file under
+         - the terms of any one of the MPL, the GPL or the LGPL.
+         -
+         - ***** END LICENSE BLOCK *****
+         </pre>
+    </p>
+  </body>
+</html>
+



From skinner at sheep.berlios.de  Fri Apr 15 05:19:55 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 15 Apr 2005 05:19:55 +0200
Subject: [openrecord-svn] r33 - trunk/source
Message-ID: <200504150319.j3F3JtJL006480@sheep.berlios.de>

Author: skinner
Date: 2005-04-15 05:19:53 +0200 (Fri, 15 Apr 2005)
New Revision: 33

Modified:
   trunk/source/TestSuite.html
   trunk/source/UtilTest.html
Log:
Messed with the path names in the html files for the Unit tests. It's all ugly, but at least now the testRunner page and the unit test pages have some hope of finding each other, provided they're always placed in exactly the right places in the file system.

Modified: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-04-14 23:39:11 UTC (rev 32)
+++ trunk/source/TestSuite.html	2005-04-15 03:19:53 UTC (rev 33)
@@ -23,7 +23,7 @@
       
       function openRecordTestSuite() {
         var testSuite = new window.top.jsUnitTestSuite();
-        testSuite.addTestPage("../../subversive/trunk/source/UtilTest.html");
+        testSuite.addTestPage("../../current/trunk/source/UtilTest.html");
         return testSuite;
       }
     </script>
@@ -44,23 +44,31 @@
     same name as this one, except with a .js extension instead of a .html
     extension.</p>
  
-    <p>To run the tests, you need to use the 
+    <p>The unit tests are set up to run in the
     <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>To run these unit tests over the internet, go to 
-    <a href="http://www.edwardh.com/jsunit/runner/testRunner.html" rel="external">http://www.edwardh.com/jsunit/runner/testRunner.html</a>,
-    enter the URL of this page, and hit the <b>Run</b> button.</p>
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../../third_party/jsunit/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
 
     <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit</a>.</p>
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
     
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 
     rights relinquished under the Creative Commons  
-    <a rel="license external" href="http://creativecommons.org/licenses/publicdomain/">Public Domain Dedication</a>.</p>
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
 
 <!-- Creative Commons metadata for Public Domain License 
 

Modified: trunk/source/UtilTest.html
===================================================================
--- trunk/source/UtilTest.html	2005-04-14 23:39:11 UTC (rev 32)
+++ trunk/source/UtilTest.html	2005-04-15 03:19:53 UTC (rev 33)
@@ -33,23 +33,31 @@
     same name as this one, except with a .js extension instead of a .html
     extension.</p>
  
-    <p>To run the tests, you need to use the 
+    <p>The unit tests are set up to run in the
     <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>To run these unit tests over the internet, go to 
-    <a href="http://www.edwardh.com/jsunit/runner/testRunner.html" rel="external">http://www.edwardh.com/jsunit/runner/testRunner.html</a>,
-    enter the URL of this page, and hit the <b>Run</b> button.</p>
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../../third_party/jsunit/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
 
     <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit</a>.</p>
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
     
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 
     rights relinquished under the Creative Commons  
-    <a rel="license external" href="http://creativecommons.org/licenses/publicdomain/">Public Domain Dedication</a>.</p>
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
 
 <!-- Creative Commons metadata for Public Domain License 
 



From skinner at sheep.berlios.de  Sat Apr 16 03:15:24 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 16 Apr 2005 03:15:24 +0200
Subject: [openrecord-svn] r34 - trunk/source
Message-ID: <200504160115.j3G1FOY0027600@sheep.berlios.de>

Author: skinner
Date: 2005-04-16 03:15:23 +0200 (Sat, 16 Apr 2005)
New Revision: 34

Added:
   trunk/source/LintTest.html
   trunk/source/LintTest.js
Modified:
   trunk/source/Item.js
   trunk/source/RootView.js
   trunk/source/Stevedore.js
   trunk/source/TablePlugin.js
   trunk/source/TestSuite.html
   trunk/source/TextView.js
   trunk/source/Util.js
Log:
Added a unit test that runs the source code through JSLint, and cleaned up some tidbits so that all the code now passes the JSLint tests.

Modified: trunk/source/Item.js
===================================================================
--- trunk/source/Item.js	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/Item.js	2005-04-16 01:15:23 UTC (rev 34)
@@ -147,7 +147,7 @@
   var cleanValue = inValue;
   // alert("assign(" + inAttribute + ", " + inValue + ")");
   if (Util.isString(inValue)) {
-    var cleanValue = Util.getCleanString(inValue);
+    cleanValue = Util.getCleanString(inValue);
   }
   var valueWasSet = this._initializeAttributeValue(inAttribute, cleanValue);
   if (valueWasSet) {

Added: trunk/source/LintTest.html
===================================================================
--- trunk/source/LintTest.html	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/LintTest.html	2005-04-16 01:15:23 UTC (rev 34)
@@ -0,0 +1,102 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="http://www.crockford.com/javascript/jslint.js"></script>
+<!-- 
+    <script type="text/javascript" src="../third_party/jslint/jslint.js"></script>
+-->
+    <script type="text/javascript" src="Util.js"></script>
+    <script type="text/javascript" src="View.js"></script>
+    <script type="text/javascript" src="RootView.js"></script>
+    <script type="text/javascript" src="ItemView.js"></script>
+    <script type="text/javascript" src="PageView.js"></script>
+    <script type="text/javascript" src="SectionView.js"></script>
+    <script type="text/javascript" src="TextView.js"></script>
+    <script type="text/javascript" src="TablePlugin.js"></script>
+    <script type="text/javascript" src="OutlinePlugin.js"></script>
+    <script type="text/javascript" src="DetailPlugin.js"></script>
+    <script type="text/javascript" src="BarChartPlugin.js"></script>
+    <script type="text/javascript" src="demo_page.js"></script>
+    <script type="text/javascript" src="Item.js"></script>
+    <script type="text/javascript" src="Stevedore.js"></script>
+    <script type="text/javascript" src="datastore.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../../third_party/jsunit/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/source/LintTest.js
===================================================================
--- trunk/source/LintTest.js	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/LintTest.js	2005-04-16 01:15:23 UTC (rev 34)
@@ -0,0 +1,142 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var Lint = {};
+
+
+/**
+ * Given a string containing JavaScript code, returns true if the code passes 
+ * the lint tests.
+ *
+ * @scope    public class method
+ * @param    inString    A string containing JavaScript code. 
+ * @return   A boolean value. True if the code is good (according to jslint).
+ */
+Lint.isCodeCleanInString = function(inString) {
+  jslint.laxLineEnd = false;
+  jslint.plusplus = true;
+  jslint.cap = false;
+  jslint.jscript = false;
+  jslint(inString);
+  var report = jslint.report();
+  var jslingIsOkay = (report.substr(0, 2) == 'ok');
+  var noTabs = (inString.indexOf("\t") == -1);
+  var noBackspaces = (inString.indexOf("\b") == -1);
+  var noCarriageReturns = (inString.indexOf("\r") == -1);
+  var noFormFeeds = (inString.indexOf("\f") == -1);
+  var allClean = jslingIsOkay && noTabs && noBackspaces && noCarriageReturns && noFormFeeds;
+  return (allClean);
+}; 
+
+
+/**
+ * Given the URL of a file containing JavaScript code, returns true if the code 
+ * passes the lint tests.
+ *
+ * @scope    public class method
+ * @param    inUrl    A string with the URL of a file containing JavaScript code. 
+ * @return   A boolean value. True if the code is good (according to jslint).
+ */
+Lint.isCodeCleanAtUrl = function(inUrl) {
+  var anXMLHttpRequestObject = new XMLHttpRequest();
+  anXMLHttpRequestObject.open("GET", inUrl, false);
+  anXMLHttpRequestObject.send(null);
+  var fileContents = anXMLHttpRequestObject.responseText;
+  return Lint.isCodeCleanInString(fileContents);
+};
+
+
+/**
+ * Given the name of a file containing JavaScript code, returns true if the 
+ * code passes the lint tests.
+ *
+ * @scope    public class method
+ * @param    inFileName    A string with the name of a file containing JavaScript code. 
+ * @return   A boolean value. True if the code is good (according to jslint).
+ */
+Lint.isCodeCleanInFile = function(inFileName) {
+  var url  = "../../current/trunk/source/" + inFileName;
+  return Lint.isCodeCleanAtUrl(url);
+};
+
+function setUp() {
+}
+
+function testJsLintOnGoodCodeFragment() {
+  var textToRunLintOn = "function iggy() { var pop = 'no fun'; }";
+  assertTrue("jslint says clean code is clean", Lint.isCodeCleanInString(textToRunLintOn));
+}
+
+function testJsLintOnBadCodeFragment() {
+  // badFragmentOne has THIS_SYMBOL_IS_BAD, which JSLint should catch
+  var badFragmentOne = "function iggy() { var pop = 'no fun'; } THIS_SYMBOL_IS_BAD";
+
+  // badFragmentTwo has tab characters in it, which our own isCodeCleanInString()
+  // method should catch
+  var badFragmentTwo = "function iggy()		{ var pop = 'no fun'; } ";
+  
+  // badFragmentThree has a carriage return character in it, which our own 
+  // isCodeCleanInString() method should catch
+  var badFragmentThree = "function iggy() \r { var pop = 'no fun'; } ";
+  
+  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentOne));
+  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentTwo));
+  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentThree));
+}
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "Util.js",
+    "View.js",
+    "RootView.js",
+    "ItemView.js",
+    "PageView.js",
+    "SectionView.js",
+    "TextView.js",
+    "TablePlugin.js",
+    "OutlinePlugin.js",
+    "DetailPlugin.js",
+    "BarChartPlugin.js",
+    "demo_page.js",
+    "Item.js",
+    "Stevedore.js",
+    "UtilTest.js"];
+  for (var key in listOfSourceCodeFiles) {
+    var fileName = listOfSourceCodeFiles[key];
+    assertTrue("jslint says Util.js is clean", Lint.isCodeCleanInFile(fileName));
+  }
+}
+
+function tearDown() {
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/RootView.js	2005-04-16 01:15:23 UTC (rev 34)
@@ -316,7 +316,7 @@
   var finalString = listOfStrings.join("");
   this.myDebugDivElement.innerHTML = finalString;
   this.myDebugTextarea = document.getElementById(RootView.ELEMENT_ID_DEBUG_TEXTAREA);
-}
+};
 
 
 // -------------------------------------------------------------------
@@ -363,7 +363,7 @@
  * @param    inText    A text string to be displayed. 
  */
 RootView.prototype.displayTextInDebugTextarea = function (inText) {
-  this.myNumberOfCallsToDebug++;
+  this.myNumberOfCallsToDebug += 1;
   if (this.myNumberOfCallsToDebug > 20) {
     return;
   }
@@ -387,7 +387,7 @@
     outputText += property + " == " + inObject[property] + "\n";
   }
   this.displayTextInDebugTextarea(outputText);
-}
+};
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/Stevedore.js
===================================================================
--- trunk/source/Stevedore.js	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/Stevedore.js	2005-04-16 01:15:23 UTC (rev 34)
@@ -177,6 +177,8 @@
 Stevedore.prototype.getListOfResultItemsForQuery = function (inQuery) {
   Util.assert(inQuery instanceof Item);
 
+  var uuid = null;
+  var item = null;
   var listOfQueryResultItems = null;
   var listOfMatchingCategories = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
   var listOfMatchingItems = inQuery.getValueListFromAttribute(Stevedore.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
@@ -193,8 +195,8 @@
     listOfQueryResultItems = [];
     // This is a wildly inefficient search.  But maybe it doesn't matter,
     // because this code should all be replaced someday by server code.
-    for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
-      var item = this._myHashTableOfItemsKeyedByUuid[uuid];
+    for (uuid in this._myHashTableOfItemsKeyedByUuid) {
+      item = this._myHashTableOfItemsKeyedByUuid[uuid];
       var includeItem = true;
       for (var key in listOfMatchingCategories) {
         var category = listOfMatchingCategories[key];
@@ -210,8 +212,8 @@
   
   if (!isItemMatchingQuery && !isCategoryMatchingQuery) {
     listOfQueryResultItems = [];
-    for (var uuid in this._myHashTableOfItemsKeyedByUuid) {
-      var item = this._myHashTableOfItemsKeyedByUuid[uuid];
+    for (uuid in this._myHashTableOfItemsKeyedByUuid) {
+      item = this._myHashTableOfItemsKeyedByUuid[uuid];
       listOfQueryResultItems.push(item);
     }
   }

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/TablePlugin.js	2005-04-16 01:15:23 UTC (rev 34)
@@ -67,7 +67,7 @@
   this.myColumnNumber = inColumnNumber;
   this.myAttribute = inAttribute;
   this.myTablePlugin = inTablePlugin;
-}
+};
 
 
 /**
@@ -77,12 +77,12 @@
  * @scope    private instance constructor
  */
 TablePlugin._RowDelegate = function (inContentItem, inRowNumber) {
-  Util.assert((inContentItem == null) || (inContentItem instanceof Item));
+  Util.assert((inContentItem === null) || (inContentItem instanceof Item));
 
   this.myContentItem = inContentItem;
   this.myRowNumber = inRowNumber;
   this.myArrayOfCellDelegates = new Array();
-}
+};
 
 
 /**

Modified: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/TestSuite.html	2005-04-16 01:15:23 UTC (rev 34)
@@ -24,6 +24,7 @@
       function openRecordTestSuite() {
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../current/trunk/source/UtilTest.html");
+        testSuite.addTestPage("../../current/trunk/source/LintTest.html");
         return testSuite;
       }
     </script>

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/TextView.js	2005-04-16 01:15:23 UTC (rev 34)
@@ -71,7 +71,7 @@
   this.isMultiLine = isMultiLine;
   this.isEditing = false;
   this._myHasEverBeenDisplayedFlag = false;
-};
+}
 
 
 /**

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-04-15 03:19:53 UTC (rev 33)
+++ trunk/source/Util.js	2005-04-16 01:15:23 UTC (rev 34)
@@ -177,7 +177,7 @@
  * @return   A boolean value. True if inValue is a string.
  */
 Util.isString = function (inValue) {
-  return (typeof(inValue) == "string");
+  return ((typeof inValue) == "string");
 };
 
 
@@ -189,7 +189,7 @@
  * @return   A boolean value. True if inValue is a number.
  */
 Util.isNumber = function (inValue) {
-  return ((typeof(inValue) == "number") && isFinite(inValue));
+  return (((typeof inValue) == "number") && isFinite(inValue));
 };
 
 
@@ -219,7 +219,7 @@
  * @return   A boolean value. True if inValue is a boolean.
  */
 Util.isBoolean = function (inValue) {
-  return (typeof(inValue) == "boolean");
+  return ((typeof inValue) == "boolean");
 };
 
 
@@ -231,7 +231,7 @@
  * @return   A boolean value. True if inValue is an object.
  */
 Util.isObject = function (inValue) {
-  return (inValue && (typeof(inValue) == "object"));
+  return (inValue && ((typeof inValue) == "object"));
 };
 
 
@@ -243,7 +243,7 @@
  * @return   A boolean value. True if inValue is an array.
  */
 Util.isArray = function (inValue) {
-  return (inValue && (typeof(inValue) == "object") && (inValue.constructor == Array));
+  return (inValue && ((typeof inValue) == "object") && (inValue.constructor == Array));
 };
 
 
@@ -255,7 +255,7 @@
  * @return   A boolean value. True if inValue is a hash table.
  */
 Util.isHashTable = function (inValue) {
-  return (inValue && (typeof(inValue) == "object"));  // PENDING: we should be more restrictive!
+  return (inValue && ((typeof inValue) == "object"));  // PENDING: we should be more restrictive!
 };
 
 



From skinner at sheep.berlios.de  Sat Apr 16 04:17:16 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 16 Apr 2005 04:17:16 +0200
Subject: [openrecord-svn] r35 - in trunk: source third_party third_party/jslint
Message-ID: <200504160217.j3G2HGxd002151@sheep.berlios.de>

Author: skinner
Date: 2005-04-16 04:17:14 +0200 (Sat, 16 Apr 2005)
New Revision: 35

Added:
   trunk/third_party/jslint/
   trunk/third_party/jslint/fulljslint.js
Modified:
   trunk/source/LintTest.html
Log:
Added jslint as a third_party file, and changed LintTest.html to point to it.

Modified: trunk/source/LintTest.html
===================================================================
--- trunk/source/LintTest.html	2005-04-16 01:15:23 UTC (rev 34)
+++ trunk/source/LintTest.html	2005-04-16 02:17:14 UTC (rev 35)
@@ -14,10 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="http://www.crockford.com/javascript/jslint.js"></script>
-<!-- 
-    <script type="text/javascript" src="../third_party/jslint/jslint.js"></script>
--->
+    <script type="text/javascript" src="../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="Util.js"></script>
     <script type="text/javascript" src="View.js"></script>
     <script type="text/javascript" src="RootView.js"></script>

Added: trunk/third_party/jslint/fulljslint.js
===================================================================
--- trunk/third_party/jslint/fulljslint.js	2005-04-16 01:15:23 UTC (rev 34)
+++ trunk/third_party/jslint/fulljslint.js	2005-04-16 02:17:14 UTC (rev 35)
@@ -0,0 +1,1711 @@
+// jslint.js
+// 2005-04-15
+
+/*
+Copyright (c) 2002 Douglas Crockford  (www.JSLint.com)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy of
+this software and associated documentation files (the "Software"), to deal in
+the Software without restriction, including without limitation the rights to
+use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
+of the Software, and to permit persons to whom the Software is furnished to do
+so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in all
+copies or substantial portions of the Software.
+
+The Software shall be used for Good, not Evil.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+SOFTWARE.
+*/
+
+String.prototype.isAlpha = function () {
+    return (this >= 'a' && this <= 'z\uffff') ||
+        (this >= 'A' && this <= 'Z\uffff');
+};
+
+
+String.prototype.isDigit = function () {
+    return (this >= '0' && this <= '9');
+};
+
+var jslint;
+
+(function () {
+
+    var anonname, builtin, funlab, funstack, functions, inHTML, lex, lookahead,
+        member, prevtoken, stack, syntax = {}, token, verb, tag = {
+            a:        {end: true},
+            abbr:     {end: true},
+            acronym:  {end: true},
+            address:  {end: true},
+            applet:   {end: true},
+            area:     {           parent: ' map '},
+            b:        {end: true},
+            base:     {           parent: ' head '},
+            bdo:      {end: true},
+            big:      {end: true},
+            blockquote: {end: true},
+            body:     {end: true, parent: ' html '},
+            br:       {},
+            button:   {end: true},
+            caption:  {end: true, parent: ' table '},
+            center:   {end: true},
+            cite:     {end: true},
+            code:     {end: true},
+            col:      {           parent: ' table '},
+            colgroup: {end: true, parent: ' table '},
+            dd:       {end: true, parent: ' dl '},
+            del:      {end: true},
+            dfn:      {end: true},
+            div:      {end: true},
+            dl:       {end: true},
+            dt:       {end: true, parent: ' dl '},
+            em:       {end: true},
+            embed:    {end: true},
+            fieldset: {end: true},
+            font:     {end: true},
+            form:     {end: true},
+            frame:    {           parent: ' frameset '},
+            frameset: {end: true, parent: ' html frameset '},
+            h1:       {end: true},
+            h2:       {end: true},
+            h3:       {end: true},
+            h4:       {end: true},
+            h5:       {end: true},
+            h6:       {end: true},
+            head:     {end: true, parent: ' html '},
+            html:     {end: true},
+            hr:       {},
+            i:        {end: true},
+            iframe:   {end: true},
+            img:      {},
+            input:    {},
+            ins:      {end: true},
+            kbd:      {end: true},
+            label:    {end: true},
+            legend:   {end: true, parent: ' fieldset '},
+            li:       {end: true, parent: ' dir menu ol ul '},
+            link:     {           parent: ' head '},
+            map:      {end: true},
+            meta:     {           parent: ' head noscript '},
+            noframes: {end: true},
+            noscript: {end: true},
+            object:   {end: true},
+            ol:       {end: true},
+            optgroup: {end: true, parent: ' select '},
+            option:   {end: true, parent: ' optgroup select '},
+            p:        {end: true},
+            param:    {           parent: ' applet object '},
+            pre:      {end: true},
+            q:        {end: true},
+            samp:     {end: true},
+            script:   {end: true, parent:
+' head body p div span abbr acronym address bdo blockquote cite code del dfn em ins kbd pre samp strong th td var '},
+            select:   {end: true},
+            small:    {end: true},
+            span:     {end: true},
+            strong:   {end: true},
+            style:    {end: true, parent: ' head ', special: true},
+            sub:      {end: true},
+            sup:      {end: true},
+            table:    {end: true},
+            tbody:    {end: true, parent: ' table '},
+            td:       {end: true, parent: ' tr '},
+            textarea: {end: true},
+            tfoot:    {end: true, parent: ' table '},
+            th:       {end: true, parent: ' tr '},
+            thead:    {end: true, parent: ' table '},
+            title:    {end: true, parent: ' head '},
+            tr:       {end: true, parent: ' table tbody thead tfoot '},
+            tt:       {end: true},
+            u:        {end: true},
+            ul:       {end: true},
+            'var':    {end: true}
+        },
+// token
+        tx = /^([(){}[\].,:;'"~]|\?>?|==?=?|\/(\*(global)*|=|)|\*[\/=]?|\+[+=]?|-[-=]?|%[=>]?|&[&=]?|\|[|=]?|>>?>?=?|<([\/=%\?]|\!(--)?|<=?)?|\^=?|\!=?=?|[a-zA-Z_$][a-zA-Z0-9_$]*|[0-9]+([xX][0-9a-fA-F]+|\.[0-9]*)?([eE][+-]?[0-9]+)?)/,
+// string ending in single quote
+        sx = /^((\\[^\x00-\x1f]|[^\x00-\x1f'\\])*)'/,
+// string ending in double quote
+        qx = /^((\\[^\x00-\x1f]|[^\x00-\x1f"\\])*)"/,
+// regular expression
+        rx = /^(\\[^\x00-\x1f]|\[(\\[^\x00-\x1f]|[^\x00-\x1f\\\/])*\]|[^\x00-\x1f\\\/\[])+\/[gim]*/,
+// star slash
+        lx = /\*\/|\/\*/,
+// global identifier
+        gx = /^([a-zA-Z_$][a-zA-Z0-9_$]*)/,
+// global separators
+        hx = /^[\x00-\x20,]*(\*\/)?/,
+// whitespace
+        wx = /^\s*\r*(\/\/.*\r*$)?/;
+
+    jslint = function (s) {
+        functions = [];
+        error.free = true;
+        inHTML = false;
+        stack = null;
+        funlab = {};
+        member = {};
+        funstack = [];
+        lookahead = [];
+        lex = new Lex(s);
+        builtin = {Array: 9, Boolean: 9, Date: 9, decodeURI: 9,
+            decodeURIComponent: 9, encodeURI: 9, encodeURIComponent: 9,
+            Error: 9, escape: 9, EvalError: 9, Function: 9, isFinite: 9,
+            isNaN: 9, Math: 9, Number: 9, Object: 9, parseInt: 9,
+            parseFloat: 9, RangeError: 9, ReferenceError: 9, RegExp: 9,
+            String: 9, TypeError: 9, unescape: 9, URIError: 9};
+        prevtoken = token = syntax['(begin)'];
+        advance();
+        if (token.value == '<' || token.value == '<!--' ||
+                token.value == '<%' || token.value == '<?' ||
+                token.value == '<!') {
+            html(token.value);
+        } else {
+            statements();
+            advance('(end)');
+        }
+        return error.free;
+    };
+
+
+    function produce(o) {
+        var r = function () {};
+        r.prototype = o;
+        return new r();
+    }
+
+
+// Lexical Analysis Constructor
+
+    function Lex(lines, filename) {
+        if (typeof lines == 'string') {
+            lines = lines.split('\n');
+        }
+        var line = 0,
+            character = 0,
+            from = 0,
+            s = lines[0];
+
+        function nextLine() {
+            line += 1;
+            if (line >= lines.length) {
+                return false;
+            }
+            character = 0;
+            s = lines[line];
+            return true;
+        }
+
+// Public methods
+
+// token -- this is called by advance to get the next token
+
+        this.token = function () {
+            function string(x) {
+                r = x.exec(s);
+                if (r) {
+                    t = r[1];
+                    l = r[0].length;
+                    s = s.substr(l);
+                    character += l;
+                    if (stack) {
+                        if (t.indexOf('<\/') >= 0) {
+                            return error(
+'Expected "...<\\/..." and instead saw "...<\/...".', token);
+                        }
+                    }
+                    return it('(string)', r[1]);
+                } else {
+                    if (!inHTML) {
+                        return error("Unclosed string: " + s,
+                            line, character);
+                    }
+                    while (error.free) {
+                        if (!nextLine()) {
+                            return error("Unclosed string.", token);
+                        }
+                        i = s.indexOf('"');
+                        if (i >= 0) {
+                            break;
+                        }
+                    }
+                    s = s.substr(i + 1);
+                    return it('(string)');
+                }
+            }
+
+            var c, i, l, r, t;
+            while (error.free) {
+                if (!s) {
+                    if (nextLine()) {
+                        return it('(endline)', '');
+                    } else {
+                        return it('(end)', '');
+                    }
+                }
+                r = wx.exec(s);
+                if (!r || !r[0]) {
+                    break;
+                }
+                l = r[0].length;
+                s = s.substr(l);
+                character += l;
+                if (s) {
+                    break;
+                }
+            }
+            from = character;
+            r = tx.exec(s);
+            if (r) {
+                t = r[0];
+                l = t.length;
+                s = s.substr(l);
+                character += l;
+                c = t.substr(0, 1);
+                if (c.isAlpha() || c == '_' || c == '$') {
+                    return it('(identifier)', t);
+                }
+                if (c.isDigit()) {
+                    if (token.id == '.') {
+                        return error(
+        "A decimal fraction should have a zero before the decimal point.",
+                            token);
+                    }
+                    if (!isFinite(Number(t))) {
+                        return error("Bad number: '" + t + "'.",
+                            line, character);
+                    }
+                    if (s.substr(0, 1).isAlpha()) {
+                        return error("Space is required after a number: '" +
+                            t + "'.", line, character);
+                    }
+                    if (c == '0' && t.substr(1,1).isDigit()) {
+                        return error("Don't use extra leading zeros: '" +
+                            t + "'.", line, character);
+                    }
+                    if (t.substr(t.length - 1) == '.') {
+                        return error(
+"A trailing decimal point can be confused with a dot: '" + t + "'.",
+                            line, character);
+                    }
+                    return it('(number)', t);
+                }
+                if (t == '"') {
+                    return string(qx);
+                }
+                if (t == "'") {
+                    return string(sx);
+                }
+                if (t == '/*') {
+                    while (error.free) {
+                        i = s.search(lx);
+                        if (i >= 0) {
+                            break;
+                        }
+                        if (!nextLine()) {
+                            return error("Unclosed comment.", token);
+                        }
+                    }
+                    character += i + 2;
+                    if (s.substr(i, 1) == '/') {
+                        return error("Nested comment.");
+                    }
+                    s = s.substr(i + 2);
+                    return this.token();
+                }
+                if (t == '/*global') {
+                    while (error.free) {
+                        r = hx.exec(s);
+                        if (r) {
+                            l = r[0].length;
+                            s = s.substr(l);
+                            character += l;
+                            if (r[1] == '*/') {
+                                return this.token();
+                            }
+                        }
+                        if (s) {
+                            r = gx.exec(s);
+                            if (r) {
+                                l = r[0].length;
+                                s = s.substr(l);
+                                character += l;
+                                builtin[r[1]] = 9;
+                            } else {
+                                return error("Bad global identifier: '" +
+                                    s + "'.", line, character);
+                            }
+                         } else if (!nextLine()) {
+                            return error("Unclosed comment.");
+                        }
+                    }
+                }
+                return it('(punctuator)', t);
+            }
+            return error("Unexpected token: " + (t || s.substr(0, 1)),
+                line, character);
+        };
+
+
+// skip -- skip past the next occurence of a particular string.
+// If the argument is empty, skip to just before the next '<' character.
+// This is used to ignore HTML content.
+// return false if it isn't found.
+
+        this.skip = function (to) {
+            if (token.id) {
+                if (!to) {
+                    to = '';
+                    if (token.id.substr(0, 1) == '<') {
+                        lookahead.push(token);
+                        return true;
+                    }
+                } else if (token.id.indexOf(to) >= 0) {
+                    return true;
+                }
+            }
+            prevtoken = token;
+            token = syntax['(error)'];
+            while (error.free) {
+                var i = s.indexOf(to || '<');
+                if (i >= 0) {
+                    character += i + to.length;
+                    s = s.substr(i + to.length);
+                    return true;
+                }
+                if (!nextLine()) {
+                    break;
+                }
+            }
+            return false;
+        };
+
+// regex -- this is called by parse when it sees '/' being used as a prefix.
+
+        this.regex = function () {
+            var l, r = rx.exec(s), x;
+            if (r) {
+                l = r[0].length;
+                character += l;
+                s = s.substr(l);
+                x = r[1];
+                return it('(regex)', x);
+            }
+            return error("Bad regular expression: " + s);
+        };
+
+
+        function it(type, value) {
+            var t;
+            if (type == '(punctuator)') {
+                t = syntax[value];
+            } else if (type == '(identifier)') {
+                t = syntax[value];
+                if (!t || typeof t != 'object') {
+                    t = syntax[type];
+                }
+            } else if (type == '(string)' || type == '(number)') {
+                t = syntax[type];
+            } else {
+                 t = syntax[type];
+            }
+            if (!t || typeof t != 'object') {
+                return error("Unrecognized symbol: '" + value + "' " + type);
+            }
+            t = produce(t);
+            if (value || type == '(string)') {
+                t.value = value;
+            }
+            t.line = line;
+            t.character = character;
+            t.from = from;
+            t.filename = filename;
+            return t;
+        }
+    }
+
+
+    Lex.punctuators = {
+        '(': 1, ')': true, '[': 1, ']': true, '{': 1, '}': 1,
+        ',': 1, ';': 1, ':': 1, '?': 1, '!': 1, '.': 1,
+        '|': 1, '^': 1, '&': 1, '+': 1, '-': 1, '*': 1, '/': 1,
+        '%': 1, '=': 1, '<': 1, '>': 1, '+=': 1, '-=': 1,
+        '*=': 1, '/=': 1, '%=': 1, '&=': 1, '|=': 1,
+        '^=': 1, '||': 1, '&&': 1,
+        '>>>': 1, '</': true, '<!--': true, '<<': 1, '>>': 1,
+        '==': 1, '>>>=': 1, '<<=': 1, '>>=': 1,
+        '!=': 1, '<=': 1, '>=': 1, '*/': true, '%>': true, '?>': true,
+        '===': 1, '!==': 1, '~': 1, '(begin)': 1,
+        '++': true, '--': true};
+
+
+
+
+    var error = function (m, x, y) {
+        var l, c;
+        if (typeof x == 'number') {
+            l = x;
+            c = y || 0;
+        } else if (x) {
+            l = x.line;
+            c = x.from;
+        } else {
+            l = token.line || 0;
+            c = token.from || 0;
+        }
+        if (error.free) {
+            error.free = false;
+            error.id = '(error)';
+            error.reason = '(' + (l + 1) + ') : error at character ' +
+                (c + 1) + ': ' + m;
+            token = syntax['(error)'];
+            token.reason = error.reason;
+        }
+        return error;
+    };
+
+
+    function addlabel(t, type) {
+        if (t) {
+            if (t == 'arguments') {
+                if (type == 'global' || type == 'var*') {
+                    funlab[t] = 'parameter';
+                    return;
+                } else {
+                    return error("Incorrect use of 'arguments'.", prevtoken);
+                }
+            }
+            if (typeof funlab[t] == 'string') {
+                switch (funlab[t]) {
+                case 'var':
+                case 'var*':
+                    if (type == 'global') {
+                        funlab[t] = 'var*';
+                        return;
+                    }
+                    break;
+                case 'global':
+                    if (type == 'var') {
+                        return error('Var ' + t +
+                            ' was used before it was declared.', prevtoken);
+                    }
+                    if (type == 'var*' || type == 'global') {
+                        return;
+                    }
+                    break;
+                case 'function':
+                case 'parameter':
+                    if (type == 'global') {
+                        return;
+                    }
+                    break;
+                }
+                return error("Identifier '" + t + "' already declared as " +
+                    funlab[t], prevtoken);
+            }
+            funlab[t] = type;
+        }
+    }
+
+
+    function beginfunction(i) {
+        var f = {'(name)': i, '(line)': token.line + 1, '(context)': funlab};
+        funstack.push(funlab);
+        funlab = f;
+        functions.push(funlab);
+    }
+
+
+    function endfunction() {
+        funlab = funstack.pop();
+    }
+
+
+    function parse(rbp, initial) {
+        var l, left, o;
+        if (token.id && token.id == '/') {
+            if (prevtoken.id != '(' && prevtoken.id != '=' &&
+                    prevtoken.id != ':' && prevtoken.id != ',' &&
+                    prevtoken.id != '=') {
+                return error(
+"Expected to see a '(' or '=' or ':' or ',' preceding a regular expression literal, and instead saw '" +
+                    prevtoken.value + "'.", prevtoken);
+            }
+            advanceregex();
+        }
+        advance();
+        if (initial) {
+            anonname = 'anonymous';
+            verb = prevtoken.value;
+        }
+        if (initial && prevtoken.fud) {
+            prevtoken.fud();
+        } else {
+            if (prevtoken.nud) {
+                o = prevtoken.exps;
+                left = prevtoken.nud();
+            } else {
+                if (token.type == '(number)' && prevtoken.id == '.') {
+                    return error(
+"A leading decimal point can be confused with a dot: ." + token.value,
+                        prevtoken);
+                }
+                return error("Expected an identifier and instead saw '" +
+                    prevtoken.id + "'.", prevtoken);
+            }
+            while (rbp < token.lbp) {
+                o = token.exps;
+                advance();
+                if (prevtoken.led) {
+                    left = prevtoken.led(left);
+                } else {
+                    return error("Expected an operator and instead saw '" +
+                        prevtoken.id + "'.");
+                }
+            }
+            if (initial && !o) {
+                return error(
+"Expected an assignment or function call and instead saw an expression.",
+                    prevtoken);
+            }
+        }
+        if (l) {
+            funlab[l] = 'label';
+        }
+    }
+
+
+    function symbol(s, p) {
+        return syntax[s] || (syntax[s] = {id: s, lbp: p, value: s});
+    }
+
+
+    function delim(s) {
+        return symbol(s, 0);
+    }
+
+
+    function stmt(s, f) {
+        var x = delim(s);
+        x.identifier = x.reserved = true;
+        x.fud = f;
+        return x;
+    }
+
+    function blockstmt(s, f) {
+        var x = stmt(s, f);
+        x.block = true;
+        return x;
+    }
+
+    function prefix(s, f) {
+        var x = symbol(s, 150);
+        x.nud = (typeof f == 'function') ? f : function () {
+            parse(150);
+            return this;
+        };
+        return x;
+    }
+
+
+    function type(s, f) {
+        var x = delim(s);
+        x.type = s;
+        x.nud = f;
+        return x;
+    }
+
+
+    function reserve(s, f) {
+        var x = type(s, f);
+        x.identifier = x.reserved = true;
+        return x;
+    }
+
+
+    function reservevar(s) {
+        return reserve(s, function () {
+            return this;
+        });
+    }
+
+
+    function infix(s, f, p) {
+        var x = symbol(s, p);
+        x.led = (typeof f == 'function') ? f : function (left) {
+            return [f, left, parse(p)];
+        };
+        return x;
+    }
+
+
+    function assignop(s, f) {
+        symbol(s, 20).exps = true;
+        return infix(s, function (left) {
+            if (left === true || (left.identifier && !left.reserved)) {
+                parse(19);
+                return left;
+            }
+            if (left == syntax['function']) {
+                if (jslint.jscript) {
+                    parse(19);
+                    return left;
+                } else {
+                    return error(
+"Expected an identifier in an assignment, and instead saw a function invocation.",
+                        prevtoken);
+                }
+            }
+            return error(
+                "Bad assignment.", this);
+        }, 20);
+    }
+
+
+    function suffix(s, f) {
+        var x = symbol(s, 150);
+        x.led = function (left) {
+            if (jslint.plusplus) {
+                return error("This operator is considered harmful: " + this.id,
+                    this);
+            }
+            return [f, left];
+        };
+        return x;
+    }
+
+
+    function optionalidentifier() {
+        if (token.reserved) {
+            return error("Expected an identifier and instead saw '" +
+                token.id + "' (a reserved word).");
+        }
+        if (token.identifier && !token.reserved) {
+            advance();
+            return prevtoken.value;
+        }
+    }
+
+
+    function identifier() {
+        return optionalidentifier() ||
+            error("Expected an identifier and instead saw '" +
+                token.value + "'.", token);
+    }
+
+
+    function reachable(s) {
+        var i = 0, t;
+        if (token.id != ';') {
+            return;
+        }
+        while (error.free) {
+            t = peek(i);
+            if (t.reach) {
+                return;
+            }
+            if (t.id != '(endline)') {
+                if (t.id == 'function') {
+                    return error(
+"Inner functions should be listed at the top of the outer function.", t);
+                }
+                return error("Unreachable '" + t.value + "' after '" + s +
+                    "'.", t);
+            }
+            i += 1;
+        }
+    }
+
+
+    function statement() {
+        var t = token;
+        if (t.identifier && !t.reserved && peek().id == ':') {
+            advance();
+            advance(':');
+            addlabel(token, 'live*');
+            if (!token.labelled) {
+                return error("Label '" + t.value +
+                    "' on unlabelable statement '" + token.value + "'.",
+                    token);
+            }
+            token.label = t.value;
+            t = token;
+        }
+        parse(0, true);
+        if (!t.block && error.free) {
+            if (token.id != ';') {
+                return  error("Expected ';' and instead saw '" + token.value +
+                    "'.", prevtoken.line,
+                    prevtoken.from + prevtoken.value.length);
+            }
+            advance(';');
+        }
+    }
+
+
+    function statements() {
+        while (error.free && !token.reach) {
+            statement();
+        }
+    }
+
+
+    function block() {
+        var t = token;
+        advance('{');
+        statements();
+        if (token.id != '}') {
+            return error("Expected '}' and instead saw '" + token.value +
+                "'. [line " + (t.line + 1) + ", character " +
+                (t.character + 1) + "] - ");
+        }
+        advance('}');
+        verb = null;
+    }
+
+
+    function idValue() {
+        return this;
+    }
+
+
+    type('(number)', idValue);
+    type('(string)', idValue);
+    syntax['(identifier)'] = {
+        type: '(identifier)',
+        lbp: 0,
+        identifier: true,
+        nud: function () {
+            addlabel(this.value, 'global');
+            return this;
+        },
+        led: function () {
+            return error("Expected an operator and instead saw '" +
+                token.value + "'.");
+        }
+    };
+
+    type('(regex)', function () {
+        return [this.id, this.value, this.flags];
+    });
+
+    delim('(endline)');
+    delim('(begin)');
+    delim('(end)').reach = true;
+    delim('</').reach = true;
+    delim('<%');
+    delim('<?');
+    delim('<!');
+    delim('<!--');
+    delim('%>');
+    delim('?>');
+    delim('(error)').reach = true;
+    delim('}').reach = true;
+    delim(')');
+    delim(']');
+    delim(';');
+    delim(':').reach = true;
+    delim(',');
+    reserve('else');
+    reserve('case').reach = true;
+    reserve('default').reach = true;
+    reserve('catch');
+    reserve('finally');
+    reservevar('this');
+    reservevar('true');
+    reservevar('false');
+    reservevar('Infinity');
+    reservevar('NaN');
+    reservevar('null');
+    reservevar('undefined');
+    assignop('=', 'assign', 20);
+    assignop('+=', 'assignadd', 20);
+    assignop('-=', 'assignsub', 20);
+    assignop('*=', 'assignmult', 20);
+    assignop('/=', 'assigndiv', 20).nud = function () {
+        return error(
+            "A regular expression literal can be confused with '/='.");
+    };
+    assignop('%=', 'assignmod', 20);
+    assignop('&=', 'assignbitand', 20);
+    assignop('|=', 'assignbitor', 20);
+    assignop('^=', 'assignbitxor', 20);
+    assignop('<<=', 'assignshiftleft', 20);
+    assignop('>>=', 'assignshiftright', 20);
+    assignop('>>>=', 'assignshiftrightunsigned', 20);
+    infix('?', function (left) {
+        parse(10);
+        advance(':');
+        parse(10);
+    }, 30);
+
+    infix('||', 'or', 40);
+    infix('&&', 'and', 50);
+    infix('|', 'bitor', 70);
+    infix('^', 'bitxor', 80);
+    infix('&', 'bitand', 90);
+    infix('==', function equalequal(left) {
+        var t = token;
+        if (    (t.type == '(number)' && !+t.value) ||
+                (t.type == '(string)' && !t.value) ||
+                t.type === 'true' || t.type == 'false' ||
+                t.type == 'undefined' || t.type == 'null') {
+            return error("Use '===' to compare with '" + t.value + "'.", t);
+        }
+        return ['==', left, parse(100)];
+    }, 100);
+    infix('===', 'equalexact', 100);
+    infix('!=', function bangequal(left) {
+        var t = token;
+        if (    (t.type == '(number)' && !+t.value) ||
+                (t.type == '(string)' && !t.value) ||
+                t.type === 'true' || t.type == 'false' ||
+                t.type == 'undefined' || t.type == 'null') {
+            return error("Use '!==' to compare with '" + t.value + "'.", t);
+        }
+        return ['!=', left, parse(100)];
+    }, 100);
+    infix('!==', 'notequalexact', 100);
+    infix('<', 'less', 110);
+    infix('>', 'greater', 110);
+    infix('<=', 'lessequal', 110);
+    infix('>=', 'greaterequal', 110);
+    infix('<<', 'shiftleft', 120);
+    infix('>>', 'shiftright', 120);
+    infix('>>>', 'shiftrightunsigned', 120);
+    infix('in', 'in', 120);
+    infix('instanceof', 'instanceof', 120);
+    infix('+', 'addconcat', 130);
+    prefix('+', 'num');
+    infix('-', 'sub', 130);
+    prefix('-', 'neg');
+    infix('*', 'mult', 140);
+    infix('/', 'div', 140);
+    infix('%', 'mod', 140);
+
+    suffix('++', 'postinc');
+    prefix('++', 'preinc');
+    syntax['++'].exps = true;
+
+    suffix('--', 'postdec');
+    prefix('--', 'predec');
+    syntax['--'].exps = true;
+    prefix('delete', function () {
+        parse(0);
+    }).exps = true;
+
+
+    prefix('~', 'bitnot');
+    prefix('!', 'not');
+    prefix('typeof', 'typeof');
+    prefix('new', function () {
+        parse(150);
+    });
+    syntax['new'].exps = true;
+
+    infix('.', function (left) {
+        var m = identifier();
+        if (typeof m == 'string') {
+            if (typeof member[m] == 'number') {
+                member[m] += 1;
+            } else {
+                member[m] = 1;
+            }
+        }
+        return true;
+    }, 160);
+
+    infix('(', function (left) {
+        if (token.id == ')') {
+            advance(')');
+            return syntax['function'];
+        }
+        while (error.free) {
+            parse(10);
+            if (token.id == ',') {
+                advance(',');
+            } else {
+                advance(')');
+                return syntax['function'];
+            }
+        }
+    }, 160);
+    syntax['('].exps = true;
+
+    prefix('(', function () {
+        parse(0);
+        advance(')');
+    });
+
+    infix('[', function (left) {
+        parse(0);
+        advance(']');
+        return true;
+    }, 160);
+
+    prefix('[', function () {
+        if (token.id == ']') {
+            advance(']');
+            return;
+        }
+        while (error.free) {
+            parse(10);
+            if (token.id == ',') {
+                advance(',');
+                if (token.id == ']' || token.id == ',') {
+                    return error('Extra comma.', prevtoken);
+                }
+            } else {
+                advance(']');
+                return;
+            }
+        }
+    }, 160);
+
+    (function (x) {
+        x.nud = function () {
+            var i;
+            if (token.id == '}') {
+                advance('}');
+                return;
+            }
+            while(error.free) {
+                i = optionalidentifier(true);
+                if (!i && (token.id == '(string)' || token.id == '(number)')) {
+                    i = token.id;
+                    advance();
+                }
+                if (!i) {
+                    return error("Expected an identifier and instead saw '" +
+                        token.value + "'.");
+                }
+                advance(':');
+                parse(10);
+                if (token.id == ',') {
+                    advance(',');
+                } else {
+                    advance('}');
+                    return;
+                }
+            }
+        };
+        x.fud = function () {
+            return error(
+                "Expected to see a statement and instead saw a block.");
+        };
+    })(delim('{'));
+
+
+    function varstatement() {
+        while (error.free) {
+            addlabel(identifier(), 'var');
+            if (token.id == '=') {
+                advance('=');
+                parse(20);
+            }
+            if (token.id == ',') {
+                advance(',');
+            } else {
+                return;
+            }
+        }
+    }
+
+
+    stmt('var', varstatement);
+
+
+    function functionparams() {
+        advance('(');
+        if (token.id == ')') {
+            advance(')');
+            return;
+        }
+        while(error.free) {
+            addlabel(identifier(), 'parameter');
+            if (token.id == ',') {
+                advance(',');
+            } else {
+                advance(')');
+                return;
+            }
+        }
+    }
+
+
+    blockstmt('function', function () {
+        var i = identifier();
+        addlabel(i, 'var*');
+        beginfunction(i);
+        addlabel(i, 'function');
+        functionparams();
+        block();
+        endfunction();
+    });
+
+    prefix('function', function () {
+        var i = optionalidentifier() || ('"' + anonname + '"');
+        beginfunction(i);
+        addlabel(i, 'function');
+        functionparams();
+        block();
+        endfunction();
+    });
+
+    blockstmt('if', function () {
+        advance('(');
+        parse(20);
+        advance(')');
+        block();
+        if (token.id == 'else') {
+            advance('else');
+            if (token.id == 'if' || token.id == 'switch') {
+                statement();
+            } else {
+                block();
+            }
+        }
+    });
+
+    blockstmt('try', function () {
+        var b;
+        block();
+        if (token.id == 'catch') {
+            advance('catch');
+            beginfunction('"catch"');
+            functionparams();
+            block();
+            endfunction();
+            b = true;
+        }
+        if (token.id == 'finally') {
+            advance('finally');
+            beginfunction('"finally"');
+            block();
+            endfunction();
+            return;
+        } else if (!b) {
+            return error("Expected 'catch' or 'finally' and instead saw '" +
+                token.value + "'.");
+        }
+    });
+
+    blockstmt('while', function () {
+        advance('(');
+        parse(20);
+        advance(')');
+        block();
+    }).labelled = true;
+
+    reserve('with');
+
+    blockstmt('switch', function () {
+        advance('(');
+        var g = false;
+        parse(20);
+        advance(')');
+        advance('{');
+        while (error.free) {
+            switch (token.id) {
+            case 'case':
+                switch (verb) {
+                case 'break':
+                case 'case':
+                case 'continue':
+                case 'return':
+                case 'switch':
+                case 'throw':
+                    break;
+                default:
+                    return error(
+                        "Expected a 'break' statement before 'case'.",
+                        prevtoken);
+                }
+                advance('case');
+                parse(20);
+                g = true;
+                advance(':');
+                verb = 'case';
+                break;
+            case 'default':
+                switch (verb) {
+                case 'break':
+                case 'continue':
+                case 'return':
+                case 'throw':
+                    break;
+                default:
+                    return error(
+                        "Expected a 'break' statement before 'default'.",
+                        prevtoken);
+                }
+                advance('default');
+                g = true;
+                advance(':');
+                break;
+            case '}':
+                advance('}');
+                return;
+            default:
+                if (g) {
+                    statements();
+                } else {
+                    return error("Expected to see 'case' and instead saw '" +
+                        token.value + "'.");
+                }
+            }
+        }
+    }).labelled = true;
+
+    stmt('do', function () {
+        block();
+        advance('while');
+        advance('(');
+        parse(20);
+        advance(')');
+    }).labelled = true;
+
+    blockstmt('for', function () {
+        advance('(');
+        if (peek(token.id == 'var' ? 1 : 0).id == 'in') {
+            if (token.id == 'var') {
+                advance('var');
+                addlabel(identifier(), 'var');
+            } else {
+                advance();
+            }
+            advance('in');
+            parse(20);
+            advance(')');
+            block();
+            return;
+        } else {
+            if (token.id != ';') {
+                if (token.id == 'var') {
+                    advance('var');
+                    varstatement();
+                } else {
+                    parse(0);
+                }
+            }
+            advance(';');
+            if (token.id != ';') {
+                parse(20);
+            }
+            advance(';');
+            if (token.id == ';') {
+                return error("Expected to see ')' and instead saw ';'");
+            }
+            if (token.id != ')') {
+                parse(0);
+            }
+            advance(')');
+            block();
+        }
+    }).labelled = true;
+
+    stmt('throw', function () {
+        parse(20);
+        reachable('throw');
+    });
+
+    stmt('return', function () {
+        if (token.id != ';' && !token.reach) {
+            parse(20);
+        }
+        reachable('return');
+    });
+
+    stmt('break', function () {
+        if (funlab[token.id] == 'live*') {
+            advance();
+        }
+        reachable('break');
+    });
+
+
+    stmt('continue', function () {
+        if (funlab[token.id] == 'live*') {
+            advance();
+        }
+        reachable('continue');
+    });
+
+// Future reserved words
+
+    reserve('abstract');
+    reserve('as');
+    reserve('boolean');
+    reserve('byte');
+    reserve('char');
+    reserve('class');
+    reserve('const');
+    reserve('debugger');
+    reserve('double');
+    reserve('enum');
+    reserve('export');
+    reserve('extends');
+    reserve('final');
+    reserve('float');
+    reserve('goto');
+    reserve('implements');
+    reserve('import');
+    reserve('int');
+    reserve('interface');
+    reserve('long');
+    reserve('native');
+    reserve('package');
+    reserve('private');
+    reserve('protected');
+    reserve('public');
+    reserve('short');
+    reserve('static');
+    reserve('super');
+    reserve('synchronized');
+    reserve('throws');
+    reserve('transient');
+    reserve('use');
+    reserve('void');
+    reserve('volatile');
+
+
+    function Token(s) {
+        this.id = s;
+        this.lbp = 0;
+        this.identifier = true;
+        syntax[s] = this;
+    }
+
+
+    Token.prototype.nud = function () {
+        addlabel(this.id, 'global');
+        return this.id;
+    };
+
+
+    Token.prototype.led = function () {
+        return error("Expected an operator and instead saw '" +
+            token.id + "'.");
+    };
+    function check(id) {
+        return token.id == id;
+    }
+
+    function advance(id, e) {
+        switch (prevtoken.id) {
+        case '(number)':
+            if (token.id == '.') {
+                return error(
+"A dot following a number can be confused with a decimal point.", prevtoken);
+            }
+            break;
+        case '-':
+            if (token.id == '-' || token.id == '--') {
+                return error("Confusing minusses.");
+            }
+            break;
+        case '+':
+            if (token.id == '+' || token.id == '++') {
+                return error("Confusing plusses.");
+            }
+            break;
+        }
+        if (prevtoken.type == '(string)' || prevtoken.identifier) {
+            anonname = prevtoken.value;
+        }
+
+        if (id && token.value != id) {
+            return error(
+                "Expected '" + id + "' and instead saw '" + token.value + "'.",
+                    e || token);
+        }
+        prevtoken = token;
+        while (error.free) {
+            token = lookahead.shift() || lex.token();
+            if (token.id != '(endline)') {
+                break;
+            }
+            if (Lex.punctuators[prevtoken.id] !== 1 && !jslint.laxLineEnd) {
+                return error(
+                    "Expected a line-ending punctuator and instead saw '" +
+                    prevtoken.value + "'.", prevtoken);
+            }
+        }
+    }
+    function advanceregex() {
+        token = lex.regex();
+    }
+
+// We need a peek function. If it has an argument, it peeks that much farther
+// ahead. It is used to distinguish
+//      " for ( var i in ... "
+// from
+//      " for ( var i ; ... "
+
+    function peek(i) {
+        var j = 0, t;
+        if (token == syntax['(error)']) {
+            return token;
+        }
+        i = i || 0;
+        while (j <= i) {
+            t = lookahead[j];
+            if (!t) {
+                t = lookahead[j] = lex.token();
+            }
+            j += 1;
+        }
+        return t;
+    }
+
+
+    jslint.report = function report() {
+        var a, c, cc, f, i, k, o = 'ok<br><br>', s;
+
+        function detail(h) {
+            if (s.length) {
+                return '<div>' + h + ':&nbsp; ' + s.sort().join(', ') +
+                    '</div>';
+            }
+            return '';
+        }
+
+
+        if (!error.free) {
+            return error.reason;
+        }
+        a = [];
+        for (k in member) {
+            a.push(k);
+        }
+        if (a.length) {
+            a = a.sort();
+            for (i = 0; i < a.length; i += 1) {
+                a[i] = '<tr><td><tt>' + a[i] + '</tt></td><td>' +
+                    member[a[i]] + '</td></tr>';
+            }
+            o += '<table><tr><th>Members</th><th>Occurences</th></tr>' +
+                a.join('') + '</table>';
+        }
+        for (i = 0; i < functions.length; ++i) {
+            f = functions[i];
+            for (k in f) {
+                if (f[k] == 'global') {
+                    c = f['(context)'];
+                    while (error.free) {
+                        cc = c['(context)'];
+                        if (!cc) {
+                            if ((!funlab[k] || funlab[k] == 'var?') &&
+                                    builtin[k] != 9) {
+                                funlab[k] = 'var?';
+                                f[k] = 'global?';
+                            }
+                            break;
+                        }
+                        if (c[k] == 'parameter!' || c[k] == 'var!') {
+                            f[k] = 'var.';
+                            break;
+                        }
+                        if (c[k] == 'var' || c[k] == 'var*' ||
+                                c[k] == 'var!') {
+                            f[k] = 'var.';
+                            c[k] = 'var!';
+                            break;
+                        }
+                        if (c[k] == 'parameter') {
+                            f[k] = 'var.';
+                            c[k] = 'parameter!';
+                            break;
+                        }
+                        c = cc;
+                    }
+                }
+            }
+        }
+        s = [];
+        for (k in funlab) {
+            if (funlab[k].substr(0, 3) == 'var') {
+                if (funlab[k] == 'var?') {
+                    s.push('<tt>' + k + '</tt><small>&nbsp;(?)</small>');
+                } else {
+                    s.push('<tt>' + k + '</tt>');
+                }
+            }
+        }
+        o += detail('Global');
+        if (functions.length) {
+            o += '<p>Function:</p><ol style="padding-left:0.5in">';
+        }
+        for (i = 0; i < functions.length; i += 1) {
+            f = functions[i];
+            o += '<li value=' +
+                f['(line)'] + '><tt>' + (f['(name)'] || '') + '</tt>';
+            s = [];
+            for (k in f) {
+                if (k.charAt(0) != '(') {
+                    switch (f[k]) {
+                    case 'parameter':
+                        s.push('<tt>' + k + '</tt>');
+                        break;
+                    case 'parameter!':
+                        s.push('<tt>' + k +
+                            '</tt><small>&nbsp;(closure)</small>');
+                        break;
+                    }
+                }
+            }
+            o += detail('Parameter');
+            s = [];
+            for (k in f) {
+                if (k.charAt(0) != '(') {
+                    switch(f[k]) {
+                    case 'var':
+                        s.push('<tt>' + k +
+                            '</tt><small>&nbsp;(unused)</small>');
+                        break;
+                    case 'var*':
+                        s.push('<tt>' + k + '</tt>');
+                        break;
+                    case 'var!':
+                        s.push('<tt>' + k +
+                            '</tt><small>&nbsp;(closure)</small>');
+                        break;
+                    case 'var.':
+                        s.push('<tt>' + k +
+                            '</tt><small>&nbsp;(outer)</small>');
+                        break;
+                    }
+                }
+            }
+            o += detail('Var');
+            s = [];
+            c = f['(context)'];
+            for (k in f) {
+                if (k.charAt(0) != '(' && f[k].substr(0, 6) == 'global') {
+                    if (f[k] == 'global?') {
+                        s.push('<tt>' + k + '</tt><small>&nbsp;(?)</small>');
+                    } else {
+                        s.push('<tt>' + k + '</tt>');
+                    }
+                }
+            }
+            o += detail('Global');
+            s = [];
+            for (k in f) {
+                if (k.charAt(0) != '(' && f[k] == 'label') {
+                   s.push(k);
+                }
+            }
+            o += detail('Label');
+            o += '</li>';
+        }
+        if (functions.length) {
+            o += '</ol>';
+        }
+        return o;
+    };
+
+
+    function html(start) {
+        var attribute, lax = jslint.laxLineEnd, p, src, h, t;
+        inHTML = true;
+        stack = [];
+        while (error.free) {
+            switch (start) {
+            case '<':
+                jslint.laxLineEnd = true;
+                advance('<');
+                h = token;
+                if (h.type == '(identifier)' || h.identifier) {
+                    if (jslint.cap) {
+                        h.value = h.value.toLowerCase();
+                    }
+                    advance();
+                    src = false;
+                    while (error.free) {
+                        if (token.id == '/') {
+                            advance('/');
+                            advance('>');
+                            h.empty = true;
+                            break;
+                        }
+                        if (token.id == '(end)') {
+                            return error('Very Bad HTML.', prevtoken);
+                        }
+                        if (token.id && token.id.substr(0, 1) == '>') {
+                            break;
+                        }
+                        if (!token.identifier) {
+                            return error('Bad HTML: ' + token.value,
+                                token);
+                        }
+                        attribute = token.value;
+                        if (attribute == 'src' || attribute == 'SRC') {
+                            src = true;
+                        }
+                        advance();
+                        while (token.id == '-') {
+                            advance();
+                            if (!token.identifier) {
+                                return error('Bad HTML: ' + token.value,
+                                    token);
+                            }
+                            attribute += '-' + token.value;
+                            advance();
+                        }
+                        if (token.id == ':') {
+                            advance(':');
+                            if (!token.identifier) {
+                                return error('Bad attribute: ' + token.value,
+                                    token);
+                            }
+                            attribute += ':' + token.value;
+                            advance();
+                        }
+                        if (token.id == '=') {
+                            advance('=');
+                            if (!token.identifier &&
+                                    token.type != '(string)' &&
+                                    token.type != '(number)') {
+                                return error('Bad attribute: ' + token.value,
+                                    token);
+                            }
+                            advance();
+                        }
+                    }
+                    t = tag[h.value];
+                    if (!t) {
+                        return error('Unrecognized HTML tag: <' + h.value +
+                            '>. ' + (h.value != h.value.toLowerCase() ?
+                            'Did you mean <' + h.value.toLowerCase() +
+                            '>?' : ''),
+                            h);
+                    }
+                    p = t.parent;
+                    if (p) {
+                        if (!stack.length) {
+                            return error('A <' + h.value +
+                                '> must be within <' + p + '>');
+                        }
+                        if (p.indexOf(' ' +
+                                stack[stack.length - 1].value +
+                                ' ') < 0) {
+                            return error('A <' + h.value +
+                                '> must be within <' + p + '>, not within <' +
+                                stack[stack.length - 1].value + '>',
+                                h);
+                        }
+                    } else if (h.value == 'html') {
+                        if (stack.length) {
+                            return error('Misplaced <html> tag.', h);
+                        }
+                    } else if (!stack.length) {
+                        return error('Expected <html> and instead saw <' +
+                            h.value + '>.', h);
+                    } else if (stack.length < 2 || stack[1].value != 'body') {
+                        return error('Expected <' + h.value +
+                            '> inside <body>.', h);
+                    }
+                    if (t.special) {
+                        lex.skip('</' + h.value + '>');
+                    } else if (t.end && !h.empty) {
+                        stack.push(h);
+                    }
+                    if (h.value == 'script' && !src) {
+                        advance();
+                        jslint.laxLineEnd = lax;
+                        inHTML = false;
+                        statements();
+                        advance('</');
+                        advance('script');
+                        if (token.id != '>') {
+                            return error("Expected '>' and instead saw '" +
+                                token.id + "'.", token);
+                        }
+                        stack.pop();
+                        jslint.laxLineEnd = lax;
+                        inHTML = true;
+                    }
+                } else {
+                    return error("Expected '&lt;' and instead saw '<'.",
+                        prevtoken);
+                }
+                break;
+            case '</':
+                advance('</');
+                t = stack.pop();
+                if (!t) {
+                    return error('Unexpected close tag: </' +
+                        token.value + '>', token);
+                }
+                if (jslint.cap) {
+                    token.value = token.value.toLowerCase();
+                }
+                if (t.value != token.value) {
+                    return error('Expected </' + t.value + '> (' +
+                        (t.line + 1) + ') and saw </' + token.value + '>',
+                        token);
+                }
+                advance();
+                lex.skip('>');
+                break;
+            case '<!':
+                jslint.laxLineEnd = true;
+                while (error.free) {
+                    advance();
+                    if (token.id == '>') {
+                        break;
+                    }
+                    if (token.id == '<' || token.id == '(end)') {
+                        return error("Missing '>'.", prevtoken);
+                    }
+                }
+                lex.skip('>');
+                break;
+            case '<!--':
+                lex.skip('-->');
+                break;
+            case '<%':
+                lex.skip('%>');
+                break;
+            case '<?':
+                jslint.laxLineEnd = true;
+                while (error.free) {
+                    advance();
+                    if (token.id == '?>') {
+                        break;
+                    }
+                    if (token.id == '<?' || token.id == '<' ||
+                            token.id == '>' || token.id == '(end)') {
+                        return error("Missing '?>'.", prevtoken);
+                    }
+                }
+                lex.skip('?>');
+                break;
+            case '<=':
+            case '<<':
+            case '<<=':
+                return error("Expected '&lt;'.");
+            case '(end)':
+                return;
+            }
+            if (!lex.skip('')) {
+                if (stack.length) {
+                    t = stack.pop();
+                    return error('Unmatched tag <' + t.value + '>', t);
+                }
+                return;
+            }
+            advance();
+            start = token.value;
+        }
+    }
+})();
\ No newline at end of file



From skinner at sheep.berlios.de  Sun Apr 17 19:03:34 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sun, 17 Apr 2005 19:03:34 +0200
Subject: [openrecord-svn] r36 - trunk/source
Message-ID: <200504171703.j3HH3YQ3028958@sheep.berlios.de>

Author: skinner
Date: 2005-04-17 19:03:33 +0200 (Sun, 17 Apr 2005)
New Revision: 36

Modified:
   trunk/source/LintTest.html
Log:
minor change, to keep LintTest.html working

Modified: trunk/source/LintTest.html
===================================================================
--- trunk/source/LintTest.html	2005-04-16 02:17:14 UTC (rev 35)
+++ trunk/source/LintTest.html	2005-04-17 17:03:33 UTC (rev 36)
@@ -26,7 +26,6 @@
     <script type="text/javascript" src="OutlinePlugin.js"></script>
     <script type="text/javascript" src="DetailPlugin.js"></script>
     <script type="text/javascript" src="BarChartPlugin.js"></script>
-    <script type="text/javascript" src="demo_page.js"></script>
     <script type="text/javascript" src="Item.js"></script>
     <script type="text/javascript" src="Stevedore.js"></script>
     <script type="text/javascript" src="datastore.js"></script>



From skinner at sheep.berlios.de  Mon Apr 25 06:34:05 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Mon, 25 Apr 2005 06:34:05 +0200
Subject: [openrecord-svn] r37 - in trunk/source: . model
Message-ID: <200504250434.j3P4Y5f2031017@sheep.berlios.de>

Author: skinner
Date: 2005-04-25 06:33:45 +0200 (Mon, 25 Apr 2005)
New Revision: 37

Added:
   trunk/source/model/
   trunk/source/model/BigLumpVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/LintTest.html
   trunk/source/model/LintTest.js
   trunk/source/model/ModelTest.html
   trunk/source/model/ModelTest.js
   trunk/source/model/Ordinal.js
   trunk/source/model/READ_ME.txt
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/Value.js
   trunk/source/model/Vote.js
   trunk/source/model/World.js
Modified:
   trunk/source/Rectangle.js
Log:
Initial check-in of the code in "model" directory.  This code is an experimental prototype for a data model framework.

Modified: trunk/source/Rectangle.js
===================================================================
--- trunk/source/Rectangle.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/Rectangle.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -17,13 +17,18 @@
 //       + each file has just one public class
 //       + file names exactly match the name of the class they contain: "Rectangle.js", "FillPattern.js"
 //       + directories are all lower case, with underscores: "basic_shapes"
+//    + unit tests
+//       + a JavaScript code file typically has two associated unit test files
+//       + the unit test files have the suffix "Test"
+//       + example: Book.js has unit test files BookTest.html and BookTest.js
 //    + variable scoping prefixes
 //       + class variables are prefixed with "our"
 //       + instance variables are prefixed with "my"
 //       + global variables are prefixed with "window.global"
 //       + locally scoped variables are not prefixed
 //       + function input parameters are prefixed with "in"
-//       + private variables are prefixed with "_"
+//       + private variables and methods are prefixed with "__"
+//       + protected variables and methods are prefixed with "_"
 //    + class constants are prefixed with the type of the constant -- see LAYOUT_PORTRAIT
 //    + array variables are prefixed with "ListOf" or "HashTableOf" or "ArrayOf"
 //       + var myListOfBooks = []; <-- a "List" has only values, no keys ["Apple", "Orange", "Banana"]

Added: trunk/source/model/BigLumpVirtualServer.js
===================================================================
--- trunk/source/model/BigLumpVirtualServer.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/BigLumpVirtualServer.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,490 @@
+/*****************************************************************************
+ BigLumpVirtualServer.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Util.js
+//   World.js
+//   Item.js
+//   Vote.js
+//   Value.js
+//   Ordinal.js
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// BigLumpVirtualServer public class constants
+// -------------------------------------------------------------------
+BigLumpVirtualServer.JSON_MEMBER_FORMAT = "format";
+BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP = "timestamp";
+BigLumpVirtualServer.JSON_MEMBER_DATA = "data";
+BigLumpVirtualServer.JSON_MEMBER_USERS = "users";
+BigLumpVirtualServer.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
+BigLumpVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
+
+BigLumpVirtualServer.JSON_MEMBER_TYPE = "type";
+BigLumpVirtualServer.JSON_MEMBER_DATA = "value";
+BigLumpVirtualServer.JSON_TYPE_STRING_VALUE = "StringValue";
+BigLumpVirtualServer.JSON_TYPE_UUID = "Uuid";
+BigLumpVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
+BigLumpVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
+BigLumpVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
+
+BigLumpVirtualServer.JSON_MEMBER_WUID = "Wuid";
+
+BigLumpVirtualServer.JSON_MEMBER_ITEM_CLASS = "Item";
+BigLumpVirtualServer.JSON_MEMBER_VALUE_CLASS = "Value";
+BigLumpVirtualServer.JSON_MEMBER_VOTE_CLASS = "Vote";
+BigLumpVirtualServer.JSON_MEMBER_ORDINAL_CLASS = "Ordinal";
+
+BigLumpVirtualServer.JSON_MEMBER_ATTRIBUTE = "attribute";
+BigLumpVirtualServer.JSON_MEMBER_PREVIOUS_VALUE = "previousValue";
+BigLumpVirtualServer.JSON_MEMBER_USERSTAMP = "userstamp";
+BigLumpVirtualServer.JSON_MEMBER_ENTRY = "entry";
+BigLumpVirtualServer.JSON_MEMBER_ITEM = "item";
+BigLumpVirtualServer.JSON_MEMBER_RETAIN_FLAG = "retainFlag";
+BigLumpVirtualServer.JSON_MEMBER_ORDINAL_NUMBER = "ordinalNumber";
+
+/**
+ * The BigLumpVirtualServer is a datastore that loads and saves
+ * an entire World of items as a single monolithic JSON string.
+ *
+ * @scope    public instance constructor
+ * @param    inJsonString    A JSON string literal representing the world of items. 
+ */
+BigLumpVirtualServer.prototype = new StubBackingStore();  // makes BigLumpVirtualServer be a subclass of StubBackingStore
+function BigLumpVirtualServer(inJsonString) {
+  this.__myDehydratedWorld = inJsonString;
+}
+
+
+// -------------------------------------------------------------------
+// Private Methods
+// -------------------------------------------------------------------
+
+/**
+ * Overrides the superclass method.  The BigLumpVirtualServer 
+ * does not create axiomatic items from scratch, but instead loads all
+ * the saved items, including the axiomatic items.
+ *
+ * @scope    private instance method
+ */
+BigLumpVirtualServer.prototype.__loadAxiomaticItems = function () {
+  this.__loadWorldFromJsonString(this.__myDehydratedWorld);
+};
+  
+  
+/**
+ * Loads a world of items from a dehydrated JSON string.
+ *
+ * Given a world of items in JSON format, bootstraps new 
+ * instances of items corresponding to the dehydrated data.
+ * 
+ * @scope    private instance method
+ * @param    inJsonString    A JSON string literal representing the world of items. 
+ */
+BigLumpVirtualServer.prototype.__loadWorldFromJsonString = function (inJsonString) {
+  Util.assert(Util.isString(inJsonString));
+  var dehydratedWorld = null;
+  eval("dehydratedWorld = " + inJsonString + ";");
+  Util.assert(Util.isObject(dehydratedWorld));
+  
+  var fileFormat = dehydratedWorld[BigLumpVirtualServer.JSON_MEMBER_FORMAT];
+  if (fileFormat == BigLumpVirtualServer.JSON_FORMAT_2005_MARCH) {
+    // this is an old file format, circa 2005-March-16
+    var listOfItems = dehydratedWorld[BigLumpVirtualServer.JSON_MEMBER_DATA];
+    Util.assert(Util.isArray(listOfItems));
+    this.__loadWorldFromOld2005MarchFormatList(listOfItems);
+  } else {
+    // this is newer file format, circa 2005-April-21
+    Util.assert(fileFormat == BigLumpVirtualServer.JSON_FORMAT_2005_APRIL);
+    var listOfRecords = dehydratedWorld[BigLumpVirtualServer.JSON_MEMBER_DATA];
+    var listOfUsers = dehydratedWorld[BigLumpVirtualServer.JSON_MEMBER_USERS];
+    Util.assert(Util.isArray(listOfRecords));
+    this.__loadWorldFromListOfRecordsAndUsers(listOfRecords, listOfUsers);
+  }
+};
+  
+
+/**
+ * Loads a world of items from a dehydrated list of items.
+ *
+ * @scope    private instance method
+ * @param    inListOfItems    A JSON list of dehydrated items. 
+ */
+BigLumpVirtualServer.prototype.__loadWorldFromOld2005MarchFormatList = function (inListOfItems) {
+  var listOfItems = inListOfItems;
+  var uuid;
+  var item;
+  
+  // Have the StubBackingStore load the axiomatic items, because it will
+  // correctly set the creator of those items to be the axiomatic user.
+  this.__loadAxiomaticItems();
+  
+  var guestUser = this.newUser("Guest", null);
+  this.__myCurrentUser = guestUser;
+    
+  for (var listKey in listOfItems) {
+    var dehydratedItem = listOfItems[listKey];
+    var dehydratedUuid = dehydratedItem[World.UUID_FOR_ATTRIBUTE_UUID];
+    uuid = dehydratedUuid[BigLumpVirtualServer.JSON_MEMBER_DATA];
+    item = this.__getItemFromUuidOrCreateNewItem(uuid);
+    for (var propertyKey in dehydratedItem) {
+      if (propertyKey != World.UUID_FOR_ATTRIBUTE_UUID) { 
+        var propertyValue = dehydratedItem[propertyKey];
+        var attributeUuid = propertyKey;
+        Util.assert(Util.isArray(propertyValue));
+        for (var valueKey in propertyValue) {
+          var valueObject = propertyValue[valueKey];
+          var valueType = valueObject[BigLumpVirtualServer.JSON_MEMBER_TYPE];
+          var valueValue = valueObject[BigLumpVirtualServer.JSON_MEMBER_DATA];
+          var finalValue = null;
+          switch (valueType) {
+            case BigLumpVirtualServer.JSON_TYPE_FOREIGN_UUID:
+              finalValue = this.__getItemFromUuidOrCreateNewItem(valueValue);
+              break;
+            case BigLumpVirtualServer.JSON_TYPE_STRING_VALUE:
+              finalValue = valueValue;
+              break;
+            case BigLumpVirtualServer.JSON_TYPE_NUMBER_VALUE:
+              finalValue = valueValue;
+              break;
+          }
+          var attribute = this.__getItemFromUuidOrCreateNewItem(attributeUuid);
+          item.addAttributeValue(attribute, finalValue);
+        }
+      }
+    }
+  }
+  
+  for (var key in this.__myChronologicalListOfNewlyCreatedRecords) {
+    var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
+    this.__myChronologicalListOfRecords.push(newRecord);
+  }
+  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  this.__myCurrentUser = null;
+};
+
+
+/**
+ * Given a UUID, either (a) returns the existing item identified by that UUID, 
+ * or (b) creates an new item object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @return   The item identified by the given UUID.
+ */
+StubVirtualServer.prototype.__getItemFromUuidOrBootstrapItem = function (inUuid) {
+  var item = this.getItemFromUuid(inUuid);
+  if (!item) {
+    this.__myNextAvailableUuid = Math.max(this.__myNextAvailableUuid, (inUuid + 1));   
+    item = new Item(this.__myWorld, inUuid);
+    this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
+  }
+  return item;
+};
+
+
+/**
+ * Given a UUID, either (a) returns the existing value identified by that UUID, 
+ * or (b) creates an new value object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    inUuid    The UUID of the value to be returned. 
+ * @return   The value identified by the given UUID.
+ */
+StubVirtualServer.prototype.__getValueFromUuidOrBootstrapValue = function (inUuid) {
+  var value = this.__myHashTableOfValuesKeyedByUuid[inUuid];
+  if (!value) {
+    this.__myNextAvailableUuid = Math.max(this.__myNextAvailableUuid, (inUuid + 1));   
+    value = new Value(this.__myWorld, inUuid);
+    this.__myHashTableOfValuesKeyedByUuid[inUuid] = value;
+  }
+  return value;
+};
+
+
+/**
+ * Loads a world of items from a dehydrated list of entries, where those
+ * entries may represent items, values, votes, or ordinal settings.
+ *
+ * @scope    private instance method
+ * @param    inJsonString    A JSON string literal representing the world of items. 
+ */
+BigLumpVirtualServer.prototype.__loadWorldFromListOfRecordsAndUsers = function (inListOfRecords, inListOfUsers) {
+  var key;
+  var itemUuid;
+  var item;
+  var entryUuid;
+  var entry;
+  
+  for (key in inListOfRecords) {
+    var dehydratedRecord = inListOfRecords[key];
+
+    var dehydratedItem = dehydratedRecord[BigLumpVirtualServer.JSON_MEMBER_ITEM_CLASS];
+    var dehydratedVote = dehydratedRecord[BigLumpVirtualServer.JSON_MEMBER_VOTE_CLASS];
+    var dehydratedOrdinal = dehydratedRecord[BigLumpVirtualServer.JSON_MEMBER_ORDINAL_CLASS];
+    var dehydratedValue = dehydratedRecord[BigLumpVirtualServer.JSON_MEMBER_VALUE_CLASS];
+
+    var contents = dehydratedItem || dehydratedVote || dehydratedOrdinal || dehydratedValue;
+
+    var timestampString = contents[BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP];
+    var userstampUuid = contents[BigLumpVirtualServer.JSON_MEMBER_USERSTAMP];
+    var timestamp = new Date(timestampString);
+    var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
+
+    if (dehydratedItem) {
+      itemUuid = dehydratedItem[BigLumpVirtualServer.JSON_MEMBER_WUID];
+      item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
+      item._rehydrate(timestamp, userstamp);
+      this.__myChronologicalListOfRecords.push(item);
+    }
+    if (dehydratedVote) {
+      var retainFlag = dehydratedVote[BigLumpVirtualServer.JSON_MEMBER_RETAIN_FLAG];
+      entryUuid = dehydratedVote[BigLumpVirtualServer.JSON_MEMBER_ENTRY];
+      entry = this.__getEntryFromUuid(entryUuid);
+      var vote = new Vote(entry, userstamp, retainFlag, timestamp);
+      this.__myChronologicalListOfRecords.push(vote);
+    }
+    if (dehydratedOrdinal) {
+      var ordinalNumber = dehydratedVote[BigLumpVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
+      entryUuid = dehydratedVote[BigLumpVirtualServer.JSON_MEMBER_ENTRY];
+      entry = this.__getEntryFromUuid(entryUuid);
+      var ordinal = new Ordinal(entry, userstamp, ordinalNumber, timestamp);
+      this.__myChronologicalListOfRecords.push(ordinal);
+    }
+    if (dehydratedValue) {
+      var valueUuid = dehydratedValue[BigLumpVirtualServer.JSON_MEMBER_WUID];
+      itemUuid = dehydratedValue[BigLumpVirtualServer.JSON_MEMBER_ITEM];
+      item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
+      var attributeUuid = dehydratedValue[BigLumpVirtualServer.JSON_MEMBER_ATTRIBUTE];
+      var attribute = null;
+      if (attributeUuid) {
+        attribute = this.__getItemFromUuidOrBootstrapItem(attributeUuid);
+      }
+      var previousValueUuid = dehydratedValue[BigLumpVirtualServer.JSON_MEMBER_PREVIOUS_VALUE];
+      var previousValue = null;
+      if (previousValueUuid) {
+        previousValue = this.__getValueFromUuidOrBootstrapValue(previousValueUuid);
+      }
+      var pickledData = dehydratedValue[BigLumpVirtualServer.JSON_MEMBER_DATA];
+      var dataType = pickledData[BigLumpVirtualServer.JSON_MEMBER_TYPE];
+      var rawData = pickledData[BigLumpVirtualServer.JSON_MEMBER_DATA];
+      var finalData = null;
+      switch (dataType) {
+        case BigLumpVirtualServer.JSON_TYPE_RELATED_UUID:
+          finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
+          break;
+        case BigLumpVirtualServer.JSON_TYPE_STRING_VALUE:
+          finalData = rawData;
+          break;
+        case BigLumpVirtualServer.JSON_TYPE_NUMBER_VALUE:
+          finalData = rawData;
+          break;
+      }
+      var value = this.__getValueFromUuidOrBootstrapValue(valueUuid);
+      var itemOrValue = previousValue || item;
+      value._rehydrate(itemOrValue, attribute, finalData, timestamp, userstamp);
+      this.__myChronologicalListOfRecords.push(value);
+    }
+  }
+  for (key in inListOfUsers) {
+    var userUuid = inListOfUsers[key];
+    var user = this.getItemFromUuid(userUuid);
+    this.__myListOfUsers.push(user);
+  }
+};
+  
+
+/**
+ * Returns a huge string, containing a JavaScript "object literal"
+ * representation of the entire world.
+ *
+ * @scope    private instance method
+ * @return   A JSON string literal, representing all the items in the world. 
+ */
+BigLumpVirtualServer.prototype.__getJsonStringRepresentingEntireWorld = function () {
+  var fileTimestamp = new Date();
+  var listOfStrings = [];
+  var key;
+  
+  listOfStrings.push('// Repository dump, in JSON format' + '\n');
+  listOfStrings.push('{ ');
+  listOfStrings.push('"' + BigLumpVirtualServer.JSON_MEMBER_FORMAT + '": "' + BigLumpVirtualServer.JSON_FORMAT_2005_APRIL + '", ' + '\n');
+  listOfStrings.push('  "' + BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + fileTimestamp.toString() + '", ' + '\n');
+  listOfStrings.push('  "' + BigLumpVirtualServer.JSON_MEMBER_DATA + '": ' + '[' + '\n');
+  var firstEntry = true;
+  for (key in this.__myChronologicalListOfRecords) {
+    var record = this.__myChronologicalListOfRecords[key];
+    if (!firstEntry) {
+      listOfStrings.push(',\n');
+    }
+    if (record instanceof Item) {
+      var item = record;
+      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_WUID + '": "' + item._getUuid() + '",\n');
+    }
+    if (record instanceof Vote) {
+      var vote = record;
+      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ENTRY + '": "' + vote.getEntry()._getUuid() + '",\n');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '",\n');
+    }
+    if (record instanceof Ordinal) {
+      var ordinal = record;
+      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ENTRY + '": "' + ordinal.getEntry()._getUuid() + '",\n');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '",\n');
+    }
+    if (record instanceof Value) {
+      var value = record;
+      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_VALUE_CLASS + '": ' + '{');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_WUID + '": "' + value._getUuid() + '",\n');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ITEM + '": "' + value.getItem()._getUuid() + '",\n');
+      var attribute = value.getAttribute();
+      if (attribute) {
+        var attributeName = attribute.getDisplayName();
+        var attributeNameSubstring = (attributeName + '          ').substring(0, 10);
+        listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
+        listOfStrings.push(' /* ' + attributeNameSubstring + ' */ \n');
+      }
+      var previousValue = value.getPreviousValue();
+      if (previousValue) {
+        listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousValue._getUuid() + '",\n');
+      }
+      var contentData = value.getContentData();
+      var pickleString = "";
+      var typeString = null;
+      var valueString = null;
+      if (Util.isNumber(contentData)) {
+        typeString = BigLumpVirtualServer.JSON_TYPE_NUMBER_VALUE;
+        valueString = contentData;
+      }
+      if (Util.isString(contentData)) {
+        typeString = BigLumpVirtualServer.JSON_TYPE_STRING_VALUE;
+        valueString = '"' + contentData + '"';
+      }
+      if (contentData instanceof Item) {
+        typeString = BigLumpVirtualServer.JSON_TYPE_RELATED_UUID;
+        valueString = contentData._getUuid();
+      }
+      pickleString = '{ "' + BigLumpVirtualServer.JSON_MEMBER_TYPE + '": "' + typeString + '", "' + BigLumpVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ' }';
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_DATA + '": ' + pickleString + ',\n');
+    }
+    listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().getUTCMilliseconds() + '",\n');
+    listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '"}\n');
+    listOfStrings.push('  }');
+  }
+  listOfStrings.push("  ], \n");
+  listOfStrings.push('  "' + BigLumpVirtualServer.JSON_MEMBER_USERS + '": ' + '[');
+
+  firstEntry = true;
+  for (key in this.__myListOfUsers) {
+    var user = this.__myListOfUsers[key];
+    if (!firstEntry) {
+      listOfStrings.push(', ');
+    }
+    listOfStrings.push('"' + user._getUuid() + '"');
+  }
+  listOfStrings.push("]\n");
+  listOfStrings.push("}");
+  var finalString = listOfStrings.join("");
+  return finalString;
+};
+
+
+/**
+ * Sends all the changes to the server, so that the server can record the
+ * changes.
+ *
+ * @scope    public instance method
+ * @return   The list of changes made. 
+ */
+BigLumpVirtualServer.saveChangesToServer = function () {
+  var saveChanges = false;
+  if (window.location) {
+    if (window.location.protocol == "http:") {
+      saveChanges = true;
+    }
+    if (window.location.protocol == "file:") {
+      window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
+    }
+  }
+  
+  for (var key in this.__myChronologicalListOfNewlyCreatedRecords) {
+    var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
+    this.__myChronologicalListOfRecords.push(newRecord);
+  }
+  
+  if (saveChanges) {
+    var url = "save_changes.php";
+    this.__myXMLHttpRequestObject.open("POST", url, true);
+    this.__myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/xml");
+    this.__myXMLHttpRequestObject.send(this.__getJsonStringRepresentingEntireWorld());
+  }
+  
+  var listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
+  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  return listOfChangesMade;
+};
+
+
+/**
+ * Returns a newly created XMLHttpRequest object.
+ *
+ * @scope    private instance method
+ * @return   A newly created XMLHttpRequest object. 
+ */
+BigLumpVirtualServer.prototype.__newXMLHttpRequestObject = function () {
+  var newXMLHttpRequestObject = null;
+  if (window.XMLHttpRequest) {
+    newXMLHttpRequestObject = new XMLHttpRequest();
+  } else {
+    if (window.ActiveXObject) {
+      newXMLHttpRequestObject = new ActiveXObject("Microsoft.XMLHTTP");
+    }
+  }
+  if (newXMLHttpRequestObject) {
+    var self = this;
+    newXMLHttpRequestObject.onreadystatechange = function() {
+      window.alert("onreadystatechange:\n" +
+        "readyState: " + self.__myXMLHttpRequestObject.readyState + "\n" +
+        "status: " + self.__myXMLHttpRequestObject.status + "\n" +
+        "statusText: " + self.__myXMLHttpRequestObject.statusText + "\n" +
+        "responseText: " + self.__myXMLHttpRequestObject.responseText + "\n");
+    };
+  }
+  return newXMLHttpRequestObject;
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/Entry.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,383 @@
+/*****************************************************************************
+ Entry.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Vote.js
+//   Ordinal.js
+//   Util.js
+//   World.js
+// -------------------------------------------------------------------
+
+/**
+ * The Entry class serves as an abstract superclass for the class Item
+ * and the class Value.
+ *
+ * @scope    public instance constructor
+ * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ */
+function Entry() {
+  throw new Error("Entry is an abstract superclass. You can't create instances of it.");
+}
+
+
+// -------------------------------------------------------------------
+// Protected methods
+// -------------------------------------------------------------------
+
+/**
+ * Called from the constructor function of each subclass of Entry.
+ *
+ * @scope    protected instance method
+ * @param    inWorld    The world that this value is a part of. 
+ * @param    inUuid    The UUID for this value. 
+ */
+Entry.prototype._Entry = function (inWorld, inUuid) {
+  Util.assert(!inUuid || Util.isNumeric(inUuid));
+  
+  this.__myWorld = inWorld;
+  this.__myUuid = inUuid;
+  
+  this.__myCreationTimestamp = null;
+  this.__myCreationUserstamp = null;
+
+  // Don't create these properties until we know we need them.
+  // this.__mySetOfVotes = null;
+  // this.__mySetOfOrdinals = null;
+};
+
+
+/**
+ * Initializes a new entry that has just been created by a user action.
+ *
+ * WARNING: This method should be called ONLY from subclasses.
+ *
+ * @scope    protected instance method
+ */
+Entry.prototype._initializeEntry = function () {
+  this.__myCreationTimestamp = new Date();
+  this.__myCreationUserstamp = this.getWorld().getCurrentUser();
+};
+
+
+/**
+ * Sets the properties of a newly rehydrated entry object.
+ *
+ * WARNING: This method should be called ONLY from subclasses.
+ *
+ * @scope    protected instance method
+ * @param    inTimestamp    A Date object with the creation timestamp for this item. 
+ * @param    inUserstamp    The user who created this item. 
+ */
+Entry.prototype._rehydrateEntry = function (inTimestamp, inUserstamp) {
+  this.__myCreationTimestamp = new Date();
+  this.__myCreationUserstamp = this.getWorld().getCurrentUser();
+};
+
+
+/**
+ * Returns the UUID of the item. 
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * If you're writing code in the view layer, call
+ * item.getUniqueKeyString() instead of item._getUuid();
+ *
+ * @scope    protected instance method
+ * @return   The UUID of the item.
+ */
+Entry.prototype._getUuid = function () {
+  return this.__myUuid;
+};
+
+
+/**
+ * Records a user's vote to retain or delete this value.
+ *
+ * @scope    protected instance method
+ * @param    inVote    A vote to retain or delete this value. 
+ */
+Entry.prototype._addVote = function (inVote) {
+  if (!this.__mySetOfVotes) {
+    this.__mySetOfVotes = [];
+  }
+  this.__mySetOfVotes.push(inVote);
+};
+
+
+/**
+ * Records the ordinal number that a user sets for this value.
+ *
+ * @scope    protected instance method
+ * @param    inOrdinal    A vote to retain or delete this value. 
+ */
+Entry.prototype._addOrdinal = function (inOrdinal) {
+  if (!this.__mySetOfOrdinals) {
+    this.__mySetOfOrdinals = [];
+  }
+  this.__mySetOfOrdinals.push(inOrdinal);
+};
+
+
+// -------------------------------------------------------------------
+// Simple accessor methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the world that this item was created in.
+ *
+ * @scope    public instance method
+ * @return   A world object.
+ */
+Entry.prototype.getWorld = function () {
+  return this.__myWorld;
+};
+
+
+/**
+ * Returns a Date object with the creation timestamp for this item.
+ *
+ * @scope    public instance method
+ * @return   A Date object.
+ */
+Entry.prototype.getTimestamp = function () {
+  return this.__myCreationTimestamp;
+};
+
+
+/**
+ * Returns the item representing the user who created this item.
+ *
+ * @scope    public instance method
+ * @return   A user item.
+ */
+Entry.prototype.getUserstamp = function () {
+  return this.__myCreationUserstamp;
+};
+
+
+/**
+ * Returns a string which can be used as a unique key in a hash table. 
+ *
+ * @scope    public instance method
+ * @return   A string which can serve as a unique key.
+ */
+Entry.prototype.getUniqueKeyString = function () {
+  return this.__myUuid;
+};
+
+
+/**
+ * Returns the ordinal number that this entry was given at creation. 
+ *
+ * @scope    public instance method
+ * @return   A number.
+ */
+Entry.prototype.getOrdinalNumberAtCreation = function () {
+  return (0 - this.__myCreationTimestamp.getUTCMilliseconds());
+};
+
+
+// -------------------------------------------------------------------
+// Accessor methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the ordinal number for this entry. 
+ *
+ * @scope    public instance method
+ * @return   A number.
+ */
+Entry.prototype.getOrdinalNumber = function () {
+  if (!this.__mySetOfOrdinals || this.__mySetOfOrdinals.length === 0) {
+    return this.getOrdinalNumberAtCreation();
+  }
+
+  var ordinalNumber = this.getOrdinalNumberAtCreation();
+  var key;
+  var ordinal;
+  var filter = this.__myWorld.getRetrievalFilter();
+  
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      var mostRecentOrdinal = this.__mySetOfOrdinals[0];
+      for (key in this.__mySetOfOrdinals) {
+        ordinal = this.__mySetOfOrdinals[key];
+        if (ordinal.getTimestamp() > mostRecentOrdinal.getTimestamp()) {
+          mostRecentOrdinal = ordinal;
+        }
+      }
+      ordinalNumber = !mostRecentOrdinal.getOrdinalNumber();
+      break;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+  return ordinalNumber;
+};
+
+
+/**
+ * Returns true if this entry has been deleted. 
+ *
+ * @scope    public instance method
+ * @return   A boolean.
+ */
+Entry.prototype.hasBeenDeleted = function () {
+  if (!this.__mySetOfVotes || this.__mySetOfVotes.length === 0) {
+    return false;
+  }
+  
+  var hasBeenDeleted = false;
+  var key;
+  var vote;
+  var filter = this.__myWorld.getRetrievalFilter();
+  
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      var mostRecentVote = this.__mySetOfVotes[0];
+      for (key in this.__mySetOfVotes) {
+        vote = this.__mySetOfVotes[key];
+        if (vote.getTimestamp() > mostRecentVote.getTimestamp()) {
+          mostRecentVote = vote;
+        }
+      }
+      hasBeenDeleted = !mostRecentVote.getRetainFlag();
+      break;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      hasBeenDeleted = false;
+      break;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+  return hasBeenDeleted;
+};
+
+
+/**
+ * Moves this entry to a new position in a list, by creating a new
+ * ordinal for this entry with an ordinal number that is set such
+ * that this entry appears between two other entries.
+ *
+ * @scope    public instance method
+ * @param    inEntryFirst    The entry that should come before this one. 
+ * @param    inEntryThird    The entry that should come after this one. 
+ */
+Entry.prototype.reorderBetween = function (inEntryFirst, inEntryThird) {
+  var firstOrdinalNumber = null;
+  var secondOrdinalNumber = null;
+  var thirdOrdinalNumber = null;
+  var arbitraryNumberToMoveUsUpOrDownSlightly = 100;
+  
+  if (inEntryFirst) {
+    firstOrdinalNumber = inEntryFirst.getOrdinalNumber();
+  }
+  if (inEntryThird) {
+    thirdOrdinalNumber = inEntryThird.getOrdinalNumber();
+  }
+  
+  if (firstOrdinalNumber && thirdOrdinalNumber) {
+    secondOrdinalNumber = (firstOrdinalNumber + thirdOrdinalNumber) / 2;
+  }
+  if (firstOrdinalNumber && !thirdOrdinalNumber) {
+    secondOrdinalNumber = (firstOrdinalNumber - arbitraryNumberToMoveUsUpOrDownSlightly);
+  }
+  if (!firstOrdinalNumber && thirdOrdinalNumber) {
+    secondOrdinalNumber = (firstOrdinalNumber + arbitraryNumberToMoveUsUpOrDownSlightly);
+  }
+  
+  this.getWorld()._newOrdinal(this, secondOrdinalNumber);
+};
+
+
+/**
+ * Registers a vote to delete this entry. 
+ *
+ * @scope    public instance method
+ */
+Entry.prototype.voteToDelete = function () {
+  this.getWorld()._newVote(this, false);
+};
+
+
+/**
+ * Registers a vote to retain this entry. 
+ *
+ * @scope    public instance method
+ */
+Entry.prototype.voteToRetain = function () {
+  this.getWorld()._newVote(this, true);
+};
+
+
+// -------------------------------------------------------------------
+// Class methods
+// -------------------------------------------------------------------
+
+/**
+ * Registers a vote to retain this entry. 
+ *
+ * @scope    public class method
+ */
+Entry.compareOrdinals = function (inEntryOne, inEntryTwo) {
+  var ordinalNumberOne = inEntryOne.getOrdinalNumber();
+  var ordinalNumberTwo = inEntryTwo.getOrdinalNumber();
+  return (ordinalNumberTwo - ordinalNumberOne);
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/Item.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,440 @@
+/*****************************************************************************
+ Item.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Util.js
+//   World.js
+//   Value.js
+//   Entry.js
+// -------------------------------------------------------------------
+
+
+/**
+ * Instances of the Item class know how to store and retrieve their
+ * attribute values.
+ *
+ * WARNING: This constructor method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * If you're writing code in a view class, instead of calling this
+ * constructor, call the newItem() method on World: world.newItem()
+ * 
+ * @scope    protected instance constructor
+ * @param    inWorld    The world that this value is a part of. 
+ * @param    inUuid    The UUID for this value. 
+ */
+Item.prototype = new Entry();  // makes Item be a subclass of Entry
+function Item(inWorld, inUuid) {
+  this._Entry(inWorld, inUuid);
+  
+  this.__myListOfValues = null;
+}
+
+
+/**
+ * Initializes a new item that has just been created by a user action.
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * This method is NOT used for setting the properties of values that
+ * are being rehydrated from a dehydrated JSON string.  For that, you
+ * need to call item.rehydrate();
+ *
+ * @scope    protected instance method
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ */
+Item.prototype._initialize = function (inObserver) {
+  this._initializeEntry();
+
+  this.__myListOfValues = [];
+  if (inObserver) {
+    this.addObserver(inObserver);
+  }
+};
+
+
+/**
+ * Sets the properties of a newly rehydrated value object.
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * This method should only be called from VirtualServer code that is
+ * rehydrating dehydrated value objects. 
+ *
+ * @scope    protected instance method
+ * @param    inTimestamp    A Date object with the creation timestamp for this item. 
+ * @param    inUserstamp    The user who created this item. 
+ */
+Item.prototype._rehydrate = function (inTimestamp, inUserstamp) {
+  this._rehydrateEntry(inTimestamp, inUserstamp);
+  
+  this.__myListOfValues = [];
+};
+
+
+// -------------------------------------------------------------------
+// Value adding methods
+// -------------------------------------------------------------------
+
+/**
+ * Creates a new value object and adds the new value to the item's 
+ * list of values.
+ *
+ * @scope    public instance method
+ * @param    inAttribute    The attribute to associate the value with. 
+ * @param    inContentData    The content data to initialize the value to.
+ * @return   A value object.
+ */
+Item.prototype.addValue = function (inContentData) {
+  return this.addAttributeValue(null, inContentData);
+};
+
+
+/**
+ * Assigns a value to an attribute in this item.
+ *
+ * Given an attribute and content data, creates a value object with the 
+ * content data, and sets the item's attribute to the new value.
+ * For example, to make a Kermit green:
+ * <pre>
+ *    kermit.addAttributeValue(color, "green");
+ * </pre>
+ * Attributes can always have more than one assigned value, so
+ * you can make Kermit be both blue and green by doing:
+ * <pre>
+ *    kermit.addAttributeValue(color, "green");
+ *    kermit.addAttributeValue(color, "blue");
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    inAttribute    The attribute to assign the value to. 
+ * @param    inContentData    The content data to initialize the value with.
+ * @return   A value object.
+ */
+Item.prototype.addAttributeValue = function (inAttribute, inContentData) {
+  return this.replaceValueWithAttributeValue(null, inAttribute, inContentData);
+};
+
+
+/**
+ * Replaces an existing value with a new value.
+ *
+ * @scope    public instance method
+ * @param    inValue    The old value to be replaced.
+ * @param    inContentData    The content data to initialize the new value to.
+ * @return   The new replacement value object.
+ */
+Item.prototype.replaceValue = function (inValue, inContentData) {
+  return this.replaceValueWithAttributeValue(inValue, null, inContentData);
+};
+
+
+/**
+ * Replaces an existing value with a new value, and assigns the new value
+ * to an attribute.
+ *
+ * @scope    public instance method
+ * @param    inValue    The old value to be replaced.
+ * @param    inAttribute    The attribute to assign the value to. 
+ * @param    inContentData    The content data to initialize the new value to.
+ * @return   The new replacement value object.
+ */
+Item.prototype.replaceValueWithAttributeValue = function (inValue, inAttribute, inContentData) {
+  var itemOrValue = inValue || this;
+  var value = this.getWorld()._newValue(itemOrValue, inAttribute, inContentData);
+  this.__myListOfValues.push(value);
+  return value;
+};
+
+
+// -------------------------------------------------------------------
+// Accessor methods where the answer depends on the retrieval filter
+// -------------------------------------------------------------------
+
+/**
+ * Given an attribute, this method returns the list of all the values that 
+ * have been assigned to that attribute for this item.
+ *
+ * For example, to find out what color Kermit is: 
+ * <pre>
+ *    var valueList = kermit.getValuesForAttribute(color);
+ *    for (var i = 0; i < valueList.length; ++i) {
+ *      alert("Kermit is " + valueList[i]);
+ *    }
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    inAttribute    An attribute that we want to know the values of. 
+ * @return   A list of value objects.
+ */
+Item.prototype.getValuesForAttribute = function (inAttribute) {
+  var listOfValuesForAttribute = [];
+  var listOfValues = this.getValues();
+  for (var key in listOfValues) {
+    var value = listOfValues[key];
+    var attribute = value.getAttribute();
+    if (attribute == inAttribute) {
+      listOfValuesForAttribute.push(value);
+    }
+  }
+  listOfValuesForAttribute.sort(Entry.compareOrdinals);
+  return listOfValuesForAttribute;
+};
+
+
+/**
+ * Returns a list of all the values assigned to an item.
+ *
+ * @scope    public instance method
+ * @return   A list of value objects.
+ */
+Item.prototype.getValues = function () {
+  var filter = this.getWorld().getRetrievalFilter();
+  var listOfValues = this.__myListOfValues;
+  var filteredListOfValues = [];
+  var key;
+  var value;
+  
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      for (key in listOfValues) {
+        value = listOfValues[key];
+        if (!value.hasBeenReplaced() && !value.hasBeenDeleted()) {
+          filteredListOfValues.push(value);
+        }
+      }
+      break;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      filteredListOfValues = listOfValues;
+      break;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+  filteredListOfValues.sort(Entry.compareOrdinals);
+  return filteredListOfValues;
+};
+
+
+/**
+ * Returns a list of all the attributes that this item has values
+ * assigned to.
+ *
+ * @scope    public instance method
+ * @return   A list of attribute items.
+ */
+Item.prototype.getAttributes = function () {
+  var listOfAttributes = [];
+  var listOfValues = this.getValues();
+  for (var key in listOfValues) {
+    var value = listOfValues[key];
+    var attribute = value.getAttribute();
+    Util.addObjectToSet(attribute, listOfAttributes);
+  }
+  listOfAttributes.sort(Entry.compareOrdinals);
+  return listOfAttributes;
+};
+
+
+// -------------------------------------------------------------------
+// Attribute accessor methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a display name for the item.
+ *
+ * @scope    public instance method
+ * @return   A string with a display name for the item.
+ */
+Item.prototype.getDisplayName = function (inDefaultString) {
+  var listOfNameValues = this.getName();
+  var primaryName = listOfNameValues[0];
+  return primaryName.getDisplayString();
+};
+  
+
+/**
+ * Returns a list of the values assigned to the "name" attribute.
+ *
+ * @scope    public instance method
+ * @return   A list of the values assigned to the "name" attribute.
+ */
+Item.prototype.getName = function (inDefaultString) {
+  var attributeCalledName = this.getWorld().getAttributeCalledName();
+  return this.getValuesForAttribute(attributeCalledName);
+};
+
+
+/**
+ * Returns a list of the values assigned to the "short name" attribute.
+ *
+ * @scope    public instance method
+ * @return   A list of the values assigned to the "short name" attribute.
+ */
+Item.prototype.getShortName = function (inDefaultString) {
+  var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
+  return this.getValuesForAttribute(attributeCalledShortName);
+};
+
+
+/**
+ * Returns a string describing the item.
+ *
+ * @scope    public instance method
+ * @return   A string with a description of the item.
+ */
+Item.prototype.toString = function () {
+  var returnString = "[Item #" + this.getUniqueKeyString() + " ";
+  var attributeCategory = this.getWorld().getAttributeCalledCategory();
+  var listOfCategories = this.getValuesForAttribute(attributeCategory);
+  for (var key in listOfCategories) {
+    var category = listOfCategories[key];
+    Util.assert(category instanceof Item);
+    returnString += "(" + category.getDisplayName() + ")";
+  }
+  returnString += " \"" + this.getDisplayName() + "\"" + "]";
+  return returnString; 
+};
+
+
+// -------------------------------------------------------------------
+// Non-Attribute Accessor Methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a category, returns "true" if the item has been assigned to 
+ * that category.
+ *
+ * Also returns true if the item has been assigned to some category which is in
+ * turn assigned to the given category, and so on, up the chain of category 
+ * assignments.
+ *
+ * @scope    public instance method
+ * @return   A boolean.  True if the item has been assigned to the category.
+ */
+Item.prototype.isInCategory = function (inCategory) {
+  Util.assert(inCategory instanceof Item);
+
+  var categoryAttribute = this.getWorld().getAttributeCalledCategory();
+  var valueList = this.getValuesForAttribute(categoryAttribute);
+  var key;
+  var value;
+  
+  // look at all the categories this item is assigned to, and see if one of them is "inCategory"
+  for (key in valueList) {
+    value = valueList[key];
+    if (value.getContentData() == inCategory) {
+      return true;
+    }
+  }
+  
+  // look at all the categories this item is assigned to, and see if one of them
+  // is in turn in the categoery "inCategory"
+  for (key in valueList) {
+    value = valueList[key];
+    // PENDING: 
+    //   This will go into an infinite loop if there is ever a cycle in the category 
+    //   assignments, like: A is in category B, and B is in C, and C is in A.
+    //   We need to use a non-recursive search of the graph.
+    // PENDING:
+    //   Do we also need to register as an observer of something, so that if we later
+    //   become a member of that category in question, then we can notify whoever
+    //   is observing us?
+    if ((value.getContentData() != this) && (value.getContentData().isInCategory(inCategory))) {
+      return true;
+    }
+  }
+  return false;
+};
+ 
+
+// -------------------------------------------------------------------
+// Observer/Observable Methods
+// -------------------------------------------------------------------
+
+/**
+ * Registers an object or method as an observer of this item, so that
+ * the observer will be notified when the item changes.
+ *
+ * @scope    public instance method
+ * @param    inObserver    An object or method to be registered as an observer of the item. 
+ */
+Item.prototype.addObserver = function (inObserver) {
+  this.getWorld().addItemObserver(this, inObserver);
+};
+
+
+/**
+ * Removes an object or method from the set of observers of this item, so 
+ * that the observer will no longer be notified when the item changes.
+ *
+ * @scope    public instance method
+ * @param    inObserver    The object or method to be removed from the set of observers. 
+ */
+Item.prototype.removeObserver = function (inObserver) {
+  this.getWorld().removeItemObserver(this, inObserver);
+};
+
+
+// -------------------------------------------------------------------
+// Protected Methods
+// -------------------------------------------------------------------
+
+/**
+ * Adds a new value to the item when the items and values are first
+ * being loaded by the backing store.
+ *
+ * WARNING: This method should be called ONLY from the  
+ * value._rehydrate() method.
+ * 
+ * @scope    protected instance method
+ * @param    inValue    The value to be associated with this item. 
+ */
+Item.prototype._addRehydratedValue = function (inValue) {
+  this.__myListOfValues.push(inValue);
+};
+  
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/LintTest.html
===================================================================
--- trunk/source/model/LintTest.html	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/LintTest.html	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,92 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="Ordinal.js"></script>
+    <script type="text/javascript" src="Vote.js"></script>
+    <script type="text/javascript" src="Entry.js"></script>
+    <script type="text/javascript" src="Item.js"></script>
+    <script type="text/javascript" src="Value.js"></script>
+    <script type="text/javascript" src="World.js"></script>
+    <script type="text/javascript" src="StubVirtualServer.js"></script>
+    <script type="text/javascript" src="BigLumpVirtualServer.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../../../third_party/jsunit/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/LintTest.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,150 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var Lint = {};
+
+
+/**
+ * Given a string containing JavaScript code, returns true if the code passes 
+ * the lint tests.
+ *
+ * @scope    public class method
+ * @param    inString    A string containing JavaScript code. 
+ * @return   A boolean value. True if the code is good (according to jslint).
+ */
+Lint.isCodeCleanInString = function(inString) {
+  jslint.laxLineEnd = false;
+  jslint.plusplus = true;
+  jslint.cap = false;
+  jslint.jscript = false;
+  jslint(inString);
+  var report = jslint.report();
+  var jslingIsOkay = (report.substr(0, 2) == 'ok');
+  var noTabs = (inString.indexOf("\t") == -1);
+  var noBackspaces = (inString.indexOf("\b") == -1);
+  var noCarriageReturns = (inString.indexOf("\r") == -1);
+  var noFormFeeds = (inString.indexOf("\f") == -1);
+  var allClean = jslingIsOkay && noTabs && noBackspaces && noCarriageReturns && noFormFeeds;
+  return (allClean);
+}; 
+
+
+/**
+ * Given the URL of a file, returns the contents of the file as a text string.
+ *
+ * @scope    public class method
+ * @param    inUrl    A string with the URL of a file containing JavaScript code. 
+ * @return   A string containing the contents of the file.
+ */
+// PENDING: move this up into Util.js
+Util.getStringContentsOfFileAtURL = function (inUrl) {
+  var anXMLHttpRequestObject = new XMLHttpRequest();
+  anXMLHttpRequestObject.open("GET", inUrl, false);
+  anXMLHttpRequestObject.send(null);
+  var fileContents = anXMLHttpRequestObject.responseText;
+  return fileContents;
+};
+
+
+/**
+ * Given the URL of a file containing JavaScript code, returns true if the code 
+ * passes the lint tests.
+ *
+ * @scope    public class method
+ * @param    inUrl    A string with the URL of a file containing JavaScript code. 
+ * @return   A boolean value. True if the code is good (according to jslint).
+ */
+Lint.isCodeCleanAtUrl = function (inUrl) {
+  var fileContents = Util.getStringContentsOfFileAtURL(inUrl);
+  return Lint.isCodeCleanInString(fileContents);
+};
+
+
+/**
+ * Given the name of a file containing JavaScript code, returns true if the 
+ * code passes the lint tests.
+ *
+ * @scope    public class method
+ * @param    inFileName    A string with the name of a file containing JavaScript code. 
+ * @return   A boolean value. True if the code is good (according to jslint).
+ */
+Lint.isCodeCleanInFile = function (inFileName) {
+  var url  = "../../current/trunk/source/" + inFileName;
+  return Lint.isCodeCleanAtUrl(url);
+};
+
+function setUp() {
+}
+
+function testJsLintOnGoodCodeFragment() {
+  var textToRunLintOn = "function iggy() { var pop = 'no fun'; }";
+  assertTrue("jslint says clean code is clean", Lint.isCodeCleanInString(textToRunLintOn));
+}
+
+function testJsLintOnBadCodeFragment() {
+  // badFragmentOne has THIS_SYMBOL_IS_BAD, which JSLint should catch
+  var badFragmentOne = "function iggy() { var pop = 'no fun'; } THIS_SYMBOL_IS_BAD";
+
+  // badFragmentTwo has tab characters in it, which our own isCodeCleanInString()
+  // method should catch
+  var badFragmentTwo = "function iggy()		{ var pop = 'no fun'; } ";
+  
+  // badFragmentThree has a carriage return character in it, which our own 
+  // isCodeCleanInString() method should catch
+  var badFragmentThree = "function iggy() \r { var pop = 'no fun'; } ";
+  
+  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentOne));
+  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentTwo));
+  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentThree));
+}
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "Ordinal.js",
+    "Vote.js",
+    "Entry.js",
+    "Item.js",
+    "Value.js",
+    "World.js",
+    "StubVirtualServer.js",
+    "BigLumpVirtualServer.js",
+    "ModelTest.js"];
+  for (var key in listOfSourceCodeFiles) {
+    var fileName = listOfSourceCodeFiles[key];
+    assertTrue("jslint says " + fileName + " is clean", Lint.isCodeCleanInFile(fileName));
+  }
+}
+
+function tearDown() {
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/ModelTest.html
===================================================================
--- trunk/source/model/ModelTest.html	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/ModelTest.html	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,84 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for the data model</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../Util.js"></script>
+    <script type="text/javascript" src="ModelTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for the data model</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../../../third_party/jsunit/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/ModelTest.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,179 @@
+/*****************************************************************************
+ ModelTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var ModelTestVars = null;
+
+function setUp() {
+  ModelTestVars = {};
+}
+
+function testLoginLogout() {
+  var world = new World();
+  var listOfUsers;
+  var loginSuccess;
+  
+  listOfUsers = world.getUsers();
+  assertTrue("Initially, there's only an axiomatic user", listOfUsers.length == 1);
+  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
+
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);  
+  listOfUsers = world.getUsers();
+  assertTrue("Now there are two users", listOfUsers.length == 2);
+  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
+
+  loginSuccess = world.login(userJane, "wrong password");
+  assertFalse('Can not log in with wrong password', loginSuccess);
+  assertTrue('Jane is not logged in', world.getCurrentUser() === null);
+
+  loginSuccess = world.login(userJane, janesPassword);
+  assertTrue('Can log in with right password', loginSuccess);
+  assertTrue('Jane is logged in', world.getCurrentUser() == userJane);
+  
+  world.logout();
+  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
+  
+  var passwordForChris = "Kringlishous!";
+  var userChris = world.newUser("Chris Kringle", passwordForChris);
+  world.login(userChris, passwordForChris);
+  assertTrue('Chris is logged in', world.getCurrentUser() == userChris);
+  
+  world.login(userJane, janesPassword);
+  assertTrue('Jane is logged in', world.getCurrentUser() == userJane);
+  assertFalse('Chris is not logged in', world.getCurrentUser() == userChris);
+  
+  world.logout();
+}
+  
+
+function testAccessorsForAxiomaticItems() {
+  var key;
+  var item;
+  var world = new World();
+  
+  var listOfAttributes = [];
+  listOfAttributes.push(world.getAttributeCalledName());
+  listOfAttributes.push(world.getAttributeCalledShortName());
+  listOfAttributes.push(world.getAttributeCalledSummary());
+  listOfAttributes.push(world.getAttributeCalledCategory());
+  listOfAttributes.push(world.getAttributeCalledOrdinal());
+  listOfAttributes.push(world.getAttributeCalledCreationUserstamp());
+  listOfAttributes.push(world.getAttributeCalledCreationTimestamp());
+  for (key in listOfAttributes) {
+    item = listOfAttributes[key];
+    var attributeName = item.getName();
+    assertTrue('Every axiomatic attribute has a name', Util.isString(attributeName));
+  }
+  
+  var listOfCategories = [];
+  listOfCategories.push(world.getCategoryCalledAttribute());
+  listOfCategories.push(world.getCategoryCalledCategory());
+  for (key in listOfCategories) {
+    item = listOfCategories[key];
+    var categoryName = item.getName();
+    assertTrue('Every axiomatic category has a name', Util.isString(categoryName));
+  }
+}
+
+  
+function testAdditionsAndRetrievals() {
+  var world = new World();
+  var nameAttribute = world.getAttributeCalledName();
+  var ordinalAttribute = world.getAttributeCalledOrdinal();
+  var userstampAttribute = world.getAttributeCalledCreationUserstamp();
+  var timestampAttribute = world.getAttributeCalledCreationTimestamp();
+  
+  var janesPassword = "jane's password";
+  var listOfCharacters = null;
+  var listOfValues = null;
+  var listOfAttributes = null;
+  var worldRetrievalFilter = null;
+  var hasAll;
+  
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+
+  var characterAttribute = world.newAttribute("Characters");
+  var starWars = world.newItem("Star Wars");
+  var luck = starWars.addAttributeValue(characterAttribute, "Luck Skywalker");
+  var c3po = starWars.addAttributeValue(characterAttribute, "C3PO");
+  var r2d2 = starWars.addValue("R2D2");
+  listOfCharacters = starWars.getValuesForAttribute(characterAttribute);
+  hasAll = true;
+  hasAll = hasAll &&  Util.isObjectInSet(luck, listOfCharacters);
+  hasAll = hasAll &&  Util.isObjectInSet(c3po, listOfCharacters);
+  assertTrue('"Star Wars" has characters: luck, c3po', hasAll);
+  assertTrue('Exactly 2 characters in the star wars', listOfCharacters.length == 2);
+  listOfValues = starWars.getValues();
+  hasAll = true;
+  hasAll = hasAll &&  Util.isObjectInSet(luck, listOfCharacters);
+  hasAll = hasAll &&  Util.isObjectInSet(c3po, listOfCharacters);
+  hasAll = hasAll &&  Util.isObjectInSet(r2d2, listOfCharacters);
+  assertTrue('"Star Wars" has values: luck, c3po, r2d2', hasAll);  
+  listOfAttributes = starWars.getAttributes();
+  hasAll = true;
+  hasAll = hasAll &&  Util.isObjectInSet(nameAttribute, listOfAttributes);
+  hasAll = hasAll &&  Util.isObjectInSet(ordinalAttribute, listOfAttributes);
+  hasAll = hasAll &&  Util.isObjectInSet(userstampAttribute, listOfAttributes);
+  hasAll = hasAll &&  Util.isObjectInSet(timestampAttribute, listOfAttributes);
+  hasAll = hasAll &&  Util.isObjectInSet(characterAttribute, listOfAttributes);
+  assertTrue('"Star Wars" has all 5 expected attributes', hasAll);
+  
+  worldRetrievalFilter = world.getRetrievalFilter();
+  assertTrue('Default retrieval filter is "last edit wins"', worldRetrievalFilter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS);
+  
+  var luke = starWars.replaceValue(luck, "Luke Skywalker");
+  var previousValue = luke.getPreviousValue();
+  assertTrue('"Luke" has the previous version "Luck"', previousValue !== null);
+
+  world.logout();
+  
+  var passwordForChris = "Kringlishous!";
+  var userChris = world.newUser("Chris Kringle", passwordForChris);
+  world.login(userChris, passwordForChris);
+
+  r2d2 = starWars.replaceValueWithAttributeValue(r2d2, characterAttribute, "R2D2");
+  var hasR2d2;
+  
+  listOfCharacters = starWars.getValuesForAttribute(characterAttribute);
+  hasR2d2 = Util.isObjectInSet(r2d2, listOfCharacters);
+  assertTrue('Chris sees R2D2 as a character', hasR2d2);
+  
+  world.logout();
+}
+
+
+function tearDown() {
+  ModelTestVars = null;
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/Ordinal.js
===================================================================
--- trunk/source/model/Ordinal.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/Ordinal.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,79 @@
+/*****************************************************************************
+ Ordinal.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   User.js
+//   Entry.js
+// -------------------------------------------------------------------
+
+/**
+ * Each instance of the Ordinal class keeps track of the fact that
+ * a user set an ordinal number for an item or a value of an item.
+ *
+ * @scope    public instance constructor
+ * @param    inEntry    The item or value that this vote is attached to. 
+ * @param    inUser    The user who voted. 
+ * @param    inOrdinalNumber    The ordinal number itself. 
+ * @param    inTimestamp    Optional. The time the vote was made. 
+ */
+function Ordinal(inEntry, inUser, inOrdinalNumber, inTimestamp) {
+  this.__myEntry = inEntry;
+  this.__myUserstamp = inUser;
+  this.__myOrdinalNumber = inOrdinalNumber;
+  if (inTimestamp) {
+    this.__myTimestamp = inTimestamp;
+  } else {
+    this.__myTimestamp = new Date();
+  }
+  this.__myEntry._addOrdinal(this);
+}
+
+Ordinal.prototype.getEntry = function () {
+  return this.__myEntry;
+};
+
+Ordinal.prototype.getTimestamp = function () {
+  return this.__myTimestamp;
+};
+
+Ordinal.prototype.getUserstamp = function () {
+  return this.__myUserstamp;
+};
+
+Ordinal.prototype.getOrdinalNumber = function () {
+  return this.__myOrdinalNumber;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/READ_ME.txt
===================================================================
--- trunk/source/model/READ_ME.txt	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/READ_ME.txt	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,88 @@
+=================================
+Experimental Data Model Framework
+=================================
+
+This directory, named "model", contains 8 or 10 JavaScript classes.  Together these JavaScript classes form an experimental data model framework.  
+
+This isn't a finished product, just a sort of experimental prototype, or maybe an extreme progamming "spike solution".  Right now this is still a work in progress.  The code doesn't run yet, it doesn't pass its unit tests, and it isn't as clean and tidy as I would like it to be.  But all the pieces are in place, and there's enough detail here to give you a good sense of what this solution would look like.
+
+
+---------------------------------
+Terminology
+---------------------------------
+Here's a quick overview of the terminology and concepts...
+
+Item -- items have attribute values
+Value -- an attribute value attached to an item
+  
+Entry -- the abstract superclass for Item and Value
+Ordinal -- keeps track of where an Entry should appear in a list
+Vote -- keeps track of who thinks an Entry should be replaced/deleted
+Record -- an Item, Value, Ordinal, or Vote -- things that have to be recorded
+
+World -- a set of items, like the "OpenAgenda" world or the "CoolChaser" world
+Server -- server-side code to run queries and deliver items to the browser
+VirtualServer -- client-side proxy, by which a World talks to a Server
+StubVirtualServer -- a simple VirtualServer which doesn't even talk to a Server
+BigLumpVirtualServer -- a simple VirtualServer that transfers data in big lumps
+
+
+---------------------------------
+Client API
+---------------------------------
+Here's a quick overview of the Data Model API that's available for people who are writing view code which allows users to view and edit items.
+
+Item methods --------------------
+
+  item.addAttributeValue()
+  item.addValue()
+  item.replaceValue()
+  item.replaceValueWithAttributeValue()
+  
+  item.getAttributes()
+  item.getValuesForAttribute()
+  item.getValues()
+  
+  item.getDisplayName()
+  item.getName()
+  item.getShortName()
+  
+  item.isInCategory()
+  item.reorderBetween()
+  
+  item.hasBeenDeleted()
+  item.voteToDelete()
+  item.voteToRetain()
+  
+  item.addObserver()
+  item.removeObserver()
+
+  
+Value methods ------------------- 
+
+  value.hasBeenReplaced()
+  value.getPreviousValue()
+  value.getAttribute()
+  value.getItem()
+  value.getContentData()
+
+  
+World methods ------------------- 
+
+  world.login()
+  world.logout()
+  
+  world.getUsers()
+  world.getCurrentUser()
+  world.newUser()
+  
+  world.newItem()
+  world.getListOfItemsInCategory()
+  world.getListOfResultItemsForQuery()
+  world.setItemToBeIncludedInQueryResultList()
+  world.removeObserverOfList()
+  
+  world.beginTransaction()
+  world.endTransaction()
+
+

Added: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/StubVirtualServer.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,567 @@
+/*****************************************************************************
+ StubVirtualServer.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Util.js
+//   World.js
+//   Item.js
+//   Entry.js
+//   Ordinal.js
+//   Value.js
+//   Vote.js
+//   Vote.js
+// -------------------------------------------------------------------
+
+
+/**
+ * The StubVirtualServer is a dummy place-holder datastore that does
+ * a bare-minimum job of providing data to a World.
+ *
+ * @scope    public instance constructor
+ */
+function StubVirtualServer() {
+}
+
+
+/**
+ * Initializes the instance variables for a newly created StubVirtualServer.
+ *
+ * @scope    private instance method
+ * @param    inWorld    The world that we provide data for. 
+ */
+StubVirtualServer.prototype.__initialize = function (inWorld) {
+  this.__myWorld = inWorld;
+  
+  this.__myNextAvailableUuid = 1;
+  this.__myHashTableOfItemsKeyedByUuid = {};
+  this.__myHashTableOfValuesKeyedByUuid = {};
+  this.__myChronologicalListOfRecords = [];
+  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  
+  this.__myListOfUsers = [];
+  this.__myHashTableOfUserAuthenticationInfo = {};
+  this.__myCurrentUser = null;
+};
+ 
+
+/**
+ * Initializes the instance variables for a newly created StubVirtualServer,
+ * and does the initial loading of at least the axiomatic items.
+ *
+ * @scope    public instance method
+ * @param    inWorld    The world that we provide data for. 
+ */
+StubVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
+  this.__initialize(inWorld);
+  this.__loadAxiomaticItems();
+};
+
+
+// -------------------------------------------------------------------
+// Methods for creating and changing items
+// -------------------------------------------------------------------
+
+/**
+ * Returns a newly created item.
+ *
+ * @scope    public instance method
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created item.
+ */
+StubVirtualServer.prototype.newItem = function (inObserver) {
+  var uuid = this.__getNewUuid();
+  var item = new Item(this.__myWorld, uuid);
+  item._initialize(inObserver);
+  this.__myHashTableOfItemsKeyedByUuid[uuid] = item;
+  this.__myChronologicalListOfNewlyCreatedRecords.push(item);
+  return item;
+};
+
+
+/**
+ * Returns a newly created value.
+ *
+ * @scope    public instance method
+ * @param    inItemOrValue    The item that this is a value of, or the old value that this value is replacing. 
+ * @param    inAttribute    The attribute that this value is assigned to. May be null. 
+ * @param    inContentData    The content datat to initialize the value with. 
+ * @return   A newly created value.
+ */
+StubVirtualServer.prototype.newValue = function (inItemOrValue, inAttribute, inContentData) {
+  var uuid = this.__getNewUuid();
+  var value = new Value(this.__myWorld, uuid);
+  value._initialize(inItemOrValue, inAttribute, inContentData);
+  this.__myHashTableOfValuesKeyedByUuid[uuid] = value;
+  this.__myChronologicalListOfNewlyCreatedRecords.push(value);
+  return value;
+};
+ 
+
+/**
+ * Returns a newly created ordinal.
+ *
+ * @scope    public instance method
+ * @param    inEntry    The entry that this is an ordinal for. 
+ * @param    inOrdinalNumber    The ordinal number itself. 
+ * @return   A newly created ordinal.
+ */
+StubVirtualServer.prototype.newOrdinal = function (inEntry, inOrdinalNumber) {
+  var ordinal = new Ordinal(inEntry, this.__myWorld.getCurrentUser(), inOrdinalNumber);
+  this.__myChronologicalListOfNewlyCreatedRecords.push(ordinal);
+  return ordinal;
+};
+
+
+/**
+ * Returns a newly created vote.
+ *
+ * @scope    public instance method
+ * @param    inEntry    The entry to attach this vote to. 
+ * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
+ * @return   A newly created vote.
+ */
+StubVirtualServer.prototype._newVote = function (inEntry, inRetainFlag) {
+  var vote = new Vote(inEntry, this.__myWorld.getCurrentUser(), inRetainFlag);
+  this.__myChronologicalListOfNewlyCreatedRecords.push(vote);
+  return vote;
+};
+
+
+// -------------------------------------------------------------------
+// Methods having to do with users
+// -------------------------------------------------------------------
+
+/**
+ * Creates a new item, where the new item represents a user of this datastore.
+ *
+ * @scope    public instance method
+ * @param    inName    A string, which will be assigned to the name attribute of the new item. 
+ * @param    inAuthentication    A string which will be used as the login password for the user. 
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created item representing a user.
+ */
+StubVirtualServer.prototype.newUser = function (inName, inAuthentication, inObserver) {
+  var newUser = this.newItem(inObserver);
+  this.__myListOfUsers.push(newUser);
+  this.__myHashTableOfUserAuthenticationInfo[newUser.getUniqueKeyString()] = inAuthentication;
+  return newUser;
+};
+
+
+/**
+ * Returns an list of all the items that represent users of this datastore.
+ *
+ * @scope    public instance method
+ * @return   A list of items.
+ */
+StubVirtualServer.prototype.getUsers = function () {
+  return this.__myListOfUsers;
+};
+
+
+/**
+ * Returns an item representing the user who is currently logged in.
+ *
+ * @scope    public instance method
+ * @return   An item representing the user who is currently logged in.
+ */
+StubVirtualServer.prototype.getCurrentUser = function () {
+  return this.__myCurrentUser;
+};
+
+
+// -------------------------------------------------------------------
+// Login and logout methods
+// -------------------------------------------------------------------
+
+/**
+ * Attempts to login a user.
+ *
+ * @scope    public instance method
+ * @param    inUser    The user to be logged in. 
+ * @param    inAuthentication    Authentication info for the user. 
+ * @return   True if we were able to log in the user. False if the login failed.
+ */
+StubVirtualServer.prototype.login = function (inUser, inAuthentication) {
+  
+  // Only one user can be logged in at once.  We consider it an error
+  // if you try to log in a new user before logging out the old one.
+  if (this.__myCurrentUser) {
+    Util.assert(false);
+  }
+  
+  var isKnownUser = Util.isObjectInSet(inUser, this.__myListOfUsers);
+  if (!isKnownUser) {
+    return false;
+  }
+
+  var realAuthentication = this.__getAuthenticationInfoForUser(inUser);
+  var successfulAuthentication = (realAuthentication == inAuthentication);
+  if (successfulAuthentication) {
+    this.__myCurrentUser = inUser;
+    return true;
+  } else {
+    return false;
+  }
+};
+
+
+/**
+ * Logs out the current user.
+ *
+ * @scope    public instance method
+ * @return   True if the current user was logged out. False if there was no current user logged in.
+ */
+StubVirtualServer.prototype.logout = function () {
+  if (this.__myCurrentUser) {
+    this.__myCurrentUser = null;
+    return true;
+  } else {
+    return false;
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Other public methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a UUID, returns the item identified by that UUID.
+ *
+ * @scope    public instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
+ * @return   The item identified by the given UUID.
+ */
+StubVirtualServer.prototype.getItemFromUuid = function (inUuid, inObserver) {
+  Util.assert(Util.isNumeric(inUuid));
+  
+  var item = this.__myHashTableOfItemsKeyedByUuid[inUuid];
+  if (item && inObserver) {
+    item.addObserver(inObserver);
+  }
+  return item;
+};
+
+
+/**
+ * Sends all the changes to the server, so that the server can record the
+ * changes.
+ *
+ * @scope    public instance method
+ */
+StubVirtualServer.saveChangesToServer = function () {
+  // The StubVirtualServer doesn't ever actually talk to a server.
+  // Other VirtualServer implementations would be expected to actually
+  // implement this method such that it saves changes to the server
+  var listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
+  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  return listOfChangesMade;
+};
+  
+
+// -------------------------------------------------------------------
+// Query methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a query item, this method returns a list of all the items that 
+ * match the query criteria.
+ *
+ * @scope    public instance method
+ * @param    inQuery    A query item. 
+ * @return   A list of items.
+ */
+StubVirtualServer.prototype.getListOfResultItemsForQuery = function (inQuery, inObserver) {
+  Util.assert(inQuery instanceof Item);
+  
+  var attributeCalledQueryMatchingCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var attributeCalledQueryMatchingItem = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+
+  var uuid = null;
+  var item = null;
+  var listOfQueryResultItems = null;
+  var listOfMatchingCategories = inQuery.getValuesForAttribute(attributeCalledQueryMatchingCategory);
+  var listOfMatchingItems = inQuery.getValuesForAttribute(attributeCalledQueryMatchingItem);
+  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
+  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
+
+  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
+
+  if (isItemMatchingQuery) {
+    listOfQueryResultItems = listOfMatchingItems;
+  }
+  
+  if (isCategoryMatchingQuery) {
+    listOfQueryResultItems = [];
+    // This is a wildly inefficient search.  But maybe it doesn't matter,
+    // because this code should all be replaced someday by server code.
+    for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
+      item = this.__myHashTableOfItemsKeyedByUuid[uuid];
+      if (!item.hasBeenDeleted()) {
+        var includeItem = true;
+        for (var key in listOfMatchingCategories) {
+          var category = listOfMatchingCategories[key];
+          if (includeItem && !(item.isInCategory(category))) {
+            includeItem = false;
+          }
+        }
+        if (includeItem) {
+          listOfQueryResultItems.push(item);
+        }
+      }
+    }
+  }
+  
+  if (!isItemMatchingQuery && !isCategoryMatchingQuery) {
+    listOfQueryResultItems = [];
+    for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
+      item = this.__myHashTableOfItemsKeyedByUuid[uuid];
+      if (!item.hasBeenDeleted()) {
+        listOfQueryResultItems.push(item);
+      }
+    }
+  }
+  
+  listOfQueryResultItems.sort(Entry.compareOrdinals);
+  return listOfQueryResultItems; 
+};
+
+
+
+/**
+ * Given an item and a query item, this method modifies the attributes 
+ * of the item so that when the query is next evaluated the item will be 
+ * included in query result list.
+ *
+ * @scope    public instance method
+ * @param    inItem    An item, which will be modified so that it matches the query. 
+ * @param    inQuery    A query item. 
+ */
+StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList = function (inItem, inQuery) {
+  Util.assert(inItem instanceof Item);
+  Util.assert(inQuery instanceof Item);
+
+  var attributeCalledQueryMatchingCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var attributeCalledQueryMatchingItem = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+
+  var listOfMatchingCategories = inQuery.getValuesForAttribute(attributeCalledQueryMatchingCategory);
+  var listOfMatchingItems = inQuery.getValuesForAttribute(attributeCalledQueryMatchingItem);
+  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
+  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
+
+  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
+
+  if (isItemMatchingQuery) {
+    inQuery.addAttributeValue(attributeCalledQueryMatchingItem, inItem);
+  }
+  
+  var attributeCalledCategory = this.__myWorld.getAttributeCalledCategory();
+  if (isCategoryMatchingQuery) {
+    for (var key in listOfMatchingCategories) {
+      var category = listOfMatchingCategories[key];
+      if (!(inItem.isInCategory(category))) {
+        inItem.addAttributeValue(attributeCalledCategory, category);
+      }
+    }
+  }
+};
+
+
+/**
+ * Given a category, this method returns a list of all the items that have been 
+ * assigned to that category.
+ *
+ * @scope    public instance method
+ * @param    inCategory    A category item. 
+ * @return   A list of items.
+ */
+StubVirtualServer.prototype.getListOfItemsInCategory = function (inCategory) {
+  Util.assert(inCategory instanceof Item);
+
+  var listOfItems = [];
+  for (var uuid in this.__myHashTableOfItemsKeyedByUuid) {
+    var item = this.__myHashTableOfItemsKeyedByUuid[uuid];
+    if (!item.hasBeenDeleted() && item.isInCategory(inCategory)) {
+      listOfItems.push(item);
+    }
+  }
+  listOfItems.sort(Entry.compareOrdinals);
+  return listOfItems; 
+};
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a UUID, returns the item or value identified by that UUID.
+ *
+ * @scope    private instance method
+ * @param    inUuid    The UUID of the item or value to be returned. 
+ * @return   The item or value identified by the given UUID.
+ */
+StubVirtualServer.prototype.__getEntryFromUuid = function (inUuid) {
+  var item = this.getItemFromUuid(inUuid);
+  if (item) {
+    return item;
+  } else {
+    return this.__myHashTableOfValuesKeyedByUuid[inUuid];
+  }
+};
+
+
+/**
+ * Creates a brand new UUID to allocate to an item or value.
+ *
+ * @scope    private instance method
+ * @return   A newly created UUID.
+ */
+StubVirtualServer.prototype.__getNewUuid = function () {
+  var newUuid = this.__myNextAvailableUuid;
+  this.__myNextAvailableUuid += 1;
+  return newUuid;
+};
+
+
+/**
+ * Given an item representing a user, return the authentication info
+ * associated with that user.
+ *
+ * @scope    private instance method
+ * @param    inUser    An item representing a user. 
+ * @return   The authentication info for the user.
+ */
+StubVirtualServer.prototype.__getAuthenticationInfoForUser = function (inUser) {
+  return this.__myHashTableOfUserAuthenticationInfo[inUser.getUniqueKeyString()];
+};
+
+
+/**
+ * Given a UUID, either (a) returns the existing item identified by that UUID, 
+ * or (b) creates an new item object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @return   The item identified by the given UUID.
+ */
+StubVirtualServer.prototype.__getItemFromUuidOrCreateNewItem = function (inUuid) {
+  var item = this.getItemFromUuid(inUuid);
+  if (!item) {
+    this.__myNextAvailableUuid = Math.max(this.__myNextAvailableUuid, (inUuid + 1));   
+    item = new Item(this.__myWorld, inUuid);
+    item._initialize();
+    this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
+    this.__myChronologicalListOfNewlyCreatedRecords.push(item);
+  }
+  return item;
+};
+
+
+/**
+ * Creates the basic items that needed in order to do anything else, 
+ * like the items for "name", "attribute", and "category".
+ *
+ * @scope    private instance method
+ */
+StubVirtualServer.prototype.__loadAxiomaticItems = function () {
+  var uuid;
+  var name;
+  var item;
+  var value;
+  
+  var axiomaticUser = this.newUser("Amy ex machina", "null");
+  this.__myCurrentUser = axiomaticUser;
+  
+  // associate display names with the UUIDs of all the attributes
+  var hashTableOfAttributeNamesKeyedByUuid = {};
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_NAME] = "Name";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SHORT_NAME] = "Short Name";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SUMMARY] = "Summary";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY] = "Body";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY] = "Category";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_USERSTAMP] = "Userstamp";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_TIMESTAMP] = "Timestamp";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SECTION] = "Section";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY] = "Query";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = "Matching Item";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_PLUGIN_NAME] = "Plugin Name";
+
+  // create all the Item objects for the attributes
+  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
+    this.__getItemFromUuidOrCreateNewItem(uuid);
+  }
+  
+  // associate display names with the UUIDs of all the categories
+  var hashTableOfCategoryNamesKeyedByUuid = {};
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_ATTRIBUTE] = "Attribute";
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_CATEGORY] = "Category";
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_PAGE] = "Page";
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_SECTION] = "Section";
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_QUERY] = "Query";
+
+  // create all the Item objects for the categories
+  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
+    this.__getItemFromUuidOrCreateNewItem(uuid);
+  }
+ 
+  // set the display names of all the attributes, and put them in the category called "Attribute"
+  var categoryCalledAttribute = this.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
+  var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
+  var attributeCalledCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
+  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
+    item = this.getItemFromUuid(uuid);
+    name = hashTableOfAttributeNamesKeyedByUuid[uuid];
+    item.addAttributeValue(attributeCalledName, name);
+    item.addAttributeValue(attributeCalledCategory, categoryCalledAttribute);
+  }
+  
+  // set the display names of all the categories, and put them in the category called "Category"
+  var categoryCalledCategory = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_CATEGORY);
+  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
+    item = this.getItemFromUuid(uuid);
+    name = hashTableOfCategoryNamesKeyedByUuid[uuid];
+    item.addAttributeValue(attributeCalledName, name);
+    item.addAttributeValue(attributeCalledCategory, categoryCalledCategory);
+  }
+  
+  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  this.__myCurrentUser = null;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/Value.js
===================================================================
--- trunk/source/model/Value.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/Value.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,270 @@
+/*****************************************************************************
+ Value.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Util.js
+//   Item.js
+//   World.js
+//   Entry.js
+// -------------------------------------------------------------------
+
+/**
+ * Instances of the Value class represent literal values, like strings
+ * and numbers.
+ *
+ * WARNING: This constructor method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * If you're writing code in a view class, instead of calling this
+ * constructor, call a method on Item, like item.addAttributeValue()
+ *
+ * @scope    protected instance constructor
+ * @param    inWorld    The world that this value is a part of. 
+ * @param    inUuid    The UUID for this value. 
+ */
+Value.prototype = new Entry();  // makes Value be a subclass of Entry
+function Value(inWorld, inUuid) {
+  this._Entry(inWorld, inUuid);
+ 
+  this.__myPreviousValue = null;
+  this.__myListOfSubsequentValues = [];
+  this.__myItem = null;
+
+  this.__myAttribute = null;
+  this.__myContentData = null;
+}
+
+
+/**
+ * Initializes a new value that has just been created by a user action.
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * This method is NOT used for setting the properties of values that
+ * are being rehydrated from a dehydrated JSON string.  For that, you
+ * need to call value.rehydrate();
+ *
+ * @scope    protected instance method
+ * @param    inItemOrValue    The item that this is a value of, or the old value that this value replaces. 
+ * @param    inAttribute    The attribute that this value is assigned to. May be null. 
+ * @param    inContentData    The content datat to initialize the value with. 
+ */
+Value.prototype._initialize = function (inItemOrValue, inAttribute, inContentData) {
+  this._initializeEntry();
+
+  if (inItemOrValue instanceof Value) {
+    this.__myPreviousValue = inItemOrValue;
+    this.__myItem = this.__myPreviousValue.getItem();
+    this.__myPreviousValue.__addSubsequentValue(this);
+  } else {
+    this.__myPreviousValue = null;
+    this.__myItem = inItemOrValue;
+  }
+  
+  this.__myAttribute = inAttribute;
+
+  if (Util.isString(inContentData)) {
+    this.__myContentData = Util.getCleanString(inContentData);
+  } else {
+    this.__myContentData = inContentData;
+  }
+};
+
+
+/**
+ * Sets the properties of a newly rehydrated value object.
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * This method should only be called from VirtualServer code that is
+ * rehydrating dehydrated value objects. 
+ *
+ * @scope    protected instance method
+ * @param    inItemOrValue    The item that this is a value of, or the old value that this value replaces. 
+ * @param    inAttribute    The attribute that this value is assigned to. May be null. 
+ * @param    inContentData    The content data to initialize the value with. 
+ * @param    inTimestamp    A Date object with the creation timestamp for this value. 
+ * @param    inUserstamp    The user who created this value. 
+ */
+Value.prototype._rehydrate = function (inItemOrValue, inAttribute, inContentData, inTimestamp, inUserstamp) {
+  this._rehydrateEntry(inTimestamp, inUserstamp);
+
+  if (inItemOrValue instanceof Value) {
+    this.__myPreviousValue = inItemOrValue;
+    this.__myItem = this.__myPreviousValue.getItem();
+    this.__myPreviousValue.__addSubsequentValue(this);
+  } else {
+    this.__myPreviousValue = null;
+    this.__myItem = inItemOrValue;
+  }
+
+  this.__myAttribute = inAttribute;
+  this.__myContentData = inContentData;
+
+  this.__myItem._addRehydratedValue(this);
+};
+
+
+// -------------------------------------------------------------------
+// Accessor methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the item that this is a value of.
+ *
+ * @scope    public instance method
+ * @return   The item that this is a value of.
+ */
+Value.prototype.getItem = function () {
+  return this.__myItem;
+};
+
+
+/**
+ * If this value was established as the replacement for a previous
+ * value, this method returns the previous value.
+ *
+ * @scope    public instance method
+ * @return   The previous value, which this value replaces. 
+ */
+Value.prototype.getPreviousValue = function () {
+  return this.__myPreviousValue;
+};
+
+
+/**
+ * Returns the attribute that this value was assigned to, if any.
+ *
+ * @scope    public instance method
+ * @return   An attribute item.
+ */
+Value.prototype.getAttribute = function () {
+  return this.__myAttribute;
+};
+
+
+/**
+ * Returns the content data that this value holds.
+ *
+ * @scope    public instance method
+ * @return   The content data this value was initialized to hold.
+ */
+Value.prototype.getContentData = function () {
+  return this.__myContentData;
+};
+
+
+/**
+ * Returns the content data of this value as a string.
+ *
+ * @scope    public instance method
+ * @return   A string representing the literal data in this value.
+ */
+Value.prototype.getDisplayString = function () {
+  var returnString = "";
+  if (this.__myContentData instanceof Item) {
+    returnString += this.__myContentData.getDisplayName();
+  } else {
+    returnString += this.__myContentData;
+  }
+  return returnString;
+};
+
+
+/**
+ * Returns a string describing the item.
+ *
+ * @scope    public instance method
+ * @return   A string with a description of the item.
+ */
+Value.prototype.toString = function () {
+  var returnString = "[Value #" + this.getUniqueKeyString() + 
+    " \"" + this.getDisplayString() + "\"" + "]";
+  return returnString;
+};
+
+
+/**
+ * Returns true if the value has been replaced by a subsequent value.
+ *
+ * @scope    public instance method
+ * @return   True if this value has been replaced. False if it has not.
+ */
+Value.prototype.hasBeenReplaced = function () {
+  var listOfValues = this.__myListOfSubsequentValues;
+
+  if (!listOfValues || listOfValues.length === 0) {
+    return false;
+  }
+  
+  var filter = this.getWorld().getRetrievalFilter();
+
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      return true;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      return false;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+};
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Called by a subsquent value, to tell this value that it has been replaced.
+ *
+ * @scope    private instance method
+ * @param    inValue    The value that replaces this one.
+ */
+Value.prototype.__addSubsequentValue = function (inValue) {
+  this.__myListOfSubsequentValues.push(inValue);
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/Vote.js
===================================================================
--- trunk/source/model/Vote.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/Vote.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,78 @@
+/*****************************************************************************
+ Vote.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   User.js
+//   Entry.js
+// -------------------------------------------------------------------
+
+/**
+ * Each instance of the Vote class keeps track of a vote to retain or delete
+ * an item or a value of an item.
+ *
+ * @scope    public instance constructor
+ * @param    inEntry    The item or value that this vote is attached to. 
+ * @param    inUser    The user who voted. 
+ * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
+ * @param    inTimestamp    Optional. The time the vote was made. 
+ */
+function Vote(inEntry, inUser, inRetainFlag, inTimestamp) {
+  this.__myEntry = inEntry;
+  this.__myUserstamp = inUser;
+  this.__myRetainFlag = inRetainFlag;
+  if (inTimestamp) {
+    this.__myTimestamp = inTimestamp;
+  } else {
+    this.__myTimestamp = new Date();
+  }
+  this.__myEntry._addVote(this);
+}
+
+Vote.prototype.getEntry = function () {
+  return this.__myEntry;
+};
+
+Vote.prototype.getTimestamp = function () {
+  return this.__myTimestamp;
+};
+
+Vote.prototype.getUserstamp = function () {
+  return this.__myUserstamp;
+};
+
+Vote.prototype.getRetainFlag = function () {
+  return this.__myRetainFlag;
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-04-17 17:03:33 UTC (rev 36)
+++ trunk/source/model/World.js	2005-04-25 04:33:45 UTC (rev 37)
@@ -0,0 +1,724 @@
+/*****************************************************************************
+ World.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Util.js
+//   Item.js
+//   StubVirtualServer.js
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// World public class constants
+// -------------------------------------------------------------------
+World.RETRIEVAL_FILTER_LAST_EDIT_WINS = "RETRIEVAL_FILTER_LAST_EDIT_WINS";
+World.RETRIEVAL_FILTER_SINGLE_USER = "RETRIEVAL_FILTER_SINGLE_USER";
+World.RETRIEVAL_FILTER_DEMOCRATIC = "RETRIEVAL_FILTER_DEMOCRATIC";
+World.RETRIEVAL_FILTER_UNABRIDGED = "RETRIEVAL_FILTER_UNABRIDGED";
+
+World.UUID_FOR_USER_AMY = 1;
+
+World.UUID_FOR_ATTRIBUTE_UUID = 100;
+World.UUID_FOR_ATTRIBUTE_NAME = 102;
+World.UUID_FOR_ATTRIBUTE_SHORT_NAME = 101;
+World.UUID_FOR_ATTRIBUTE_SUMMARY = 103;
+World.UUID_FOR_ATTRIBUTE_BODY = 104;
+World.UUID_FOR_ATTRIBUTE_CATEGORY = 105;
+World.UUID_FOR_ATTRIBUTE_ORDINAL = 113;
+World.UUID_FOR_ATTRIBUTE_USERSTAMP = 106;
+World.UUID_FOR_ATTRIBUTE_TIMESTAMP = 107;
+World.UUID_FOR_ATTRIBUTE_QUERY = 109;
+World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = 110;
+World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = 111;
+
+World.UUID_FOR_CATEGORY_BOOK = 141;      // here as an example only
+World.UUID_FOR_CATEGORY_MOVIE = 142;     // here as an example only
+World.UUID_FOR_CATEGORY_ATTRIBUTE = 143;
+World.UUID_FOR_CATEGORY_CATEGORY = 144;
+World.UUID_FOR_CATEGORY_QUERY = 147;
+
+
+// -------------------------------------------------------------------
+// World private class constants
+// -------------------------------------------------------------------
+World.__TUPLE_KEY_LIST = "list";
+World.__TUPLE_KEY_OBSERVERS = "observers";
+
+
+/**
+ * The World class represents a "world" of items.
+ *
+ * When the view code works with items, it accesses the items through the
+ * context of a "world".  Items exist within a world.  Users can login to
+ * a world to edit the items there.
+ *
+ * @scope    public instance constructor
+ * @param    inVirtualServer    Optional. The datastore that this world gets its data from. 
+ */
+function World(inVirtualServer) {
+  this.__myCurrentRetrievalFilter = World.RETRIEVAL_FILTER_LAST_EDIT_WINS;
+  if (inVirtualServer) {
+    this.__myVirtualServer = inVirtualServer;
+  } else {
+    this.__myVirtualServer = new StubVirtualServer();
+  }
+  this.__myVirtualServer.setWorldAndLoadAxiomaticItems();
+  
+  this.__myHashTableOfObserverListsKeyedByItemUuid = {};
+  this.__myListOfListObserverTuples = [];
+  
+  // load the axiomatic attributes
+  this.__myAttributeCalledName = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
+  this.__myAttributeCalledShortName = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SHORT_NAME);
+  this.__myAttributeCalledSummary = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
+  this.__myAttributeCalledCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
+  this.__myAttributeCalledOrdinal = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_ORDINAL);
+  this.__myAttributeCalledCreationUserstamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_USERSTAMP);
+  this.__myAttributeCalledCreationTimestamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_TIMESTAMP);
+  this.__myAttributeCalledQuery = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
+
+  // load the axiomatic categories
+  this.__myCategoryCalledAttribute = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
+  this.__myCategoryCalledCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_CATEGORY);
+  this.__myCategoryCalledQuery = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_QUERY);
+}
+
+
+// -------------------------------------------------------------------
+// Transaction Methods
+// -------------------------------------------------------------------
+
+/**
+ * Marks the beginning of a transaction.
+ *
+ * Each time you call beginTransaction() you open a new transaction, 
+ * which you need to close later using endTransation().  Transactions
+ * may be nested, but the beginTransaction and endTransation calls
+ * always need to come in pairs. 
+ *
+ * @scope    public instance method
+ */
+World.prototype.beginTransaction = function () {
+  this.__myCountOfNestedTransactions += 1;
+  // PENDING:
+  //   This is just a stub method for now.  Once we start implementing
+  //   support for transactions we'll have to put some real code here.
+};
+ 
+
+/**
+ * Marks the end of a transaction.
+ *
+ * @scope    public instance method
+ */
+World.prototype.endTransaction = function () {
+  this.__myCountOfNestedTransactions -= 1;
+  Util.assert(this.__myCountOfNestedTransactions >= 0);
+  // PENDING:
+  //   This is just a stub method for now.  Once we start implementing
+  //   support for transactions we'll have to put some real code here.
+  if (this.__myCountOfNestedTransactions === 0) {
+    // PENDING: 
+    // World.js should not depend on RootView.js like this.
+    // Instead, the view code should hand the world a "status display function"
+    // that the world can use to display status info.
+    var listOfChangesMade = this.__myVirtualServer.saveChangesToServer();
+    if (listOfChangesMade.length > 0) {
+      RootView.displayStatusBlurb(listOfChangesMade.length + " changes made");
+      this.__notifyObserversOfChanges(listOfChangesMade);
+    }
+  }
+};
+
+
+// ===================================================================
+// PENDING: Line of Completion. Beyond there be dragons...
+/**
+ * Sends notification messages to registered observers to let them know 
+ * about any new changes to items or lists that they're observers of.
+ *
+ * @scope    private instance method
+ * @param    inListOfNewlyCreatedRecords    A list of records representing the changes. 
+ */
+World.prototype.__notifyObserversOfChanges = function (inListOfNewlyCreatedRecords) {
+  var hashTableOfNewlyCreatedRecordsKeyedByItemUuid = {};
+  var key;
+  var uuid;
+  var item;
+  var observer;
+  var itemOrValue;
+  var listOfRecordsForItem;
+  
+  // Look at each of the newly created records to see what item it changes,
+  // and build a hash table that divides up the records based on the item
+  // being changed, so that we can easily find all the records that impact
+  // a given item.
+  for (key in inListOfNewlyCreatedRecords) {
+    var record = inListOfNewlyCreatedRecords[key];
+    item = null;
+    if (record instanceof Item) {
+      item = record;
+    }
+    if ((record instanceof Vote) || (record instanceof Ordinal)) {
+      itemOrValue = record.getEntry();
+      if (itemOrValue instanceof Item) {
+        item = itemOrValue;
+      }
+       if (itemOrValue instanceof Value) {
+        item = itemOrValue.getItem();
+      }
+    }
+    if (record instanceof Value) {
+      item = record.getItem();
+    }
+    if (item) {
+      listOfRecordsForItem = hashTableOfNewlyCreatedRecordsKeyedByItemUuid[item._getUuid()];
+      if (!listOfRecordsForItem) {
+        listOfRecordsForItem = [];
+        hashTableOfNewlyCreatedRecordsKeyedByItemUuid[item._getUuid()] = listOfRecordsForItem;
+      }
+      listOfRecordsForItem.push(record);
+    }
+  }
+  
+  // For each of the items that was impacted by some changes, find
+  // the observers of that item, and notify them of the changes.
+  for (uuid in hashTableOfNewlyCreatedRecordsKeyedByItemUuid) {
+    item = this.getItemFromUuid(uuid);
+    listOfRecordsForItem = hashTableOfNewlyCreatedRecordsKeyedByItemUuid[uuid];
+    var listOfObserversForItem = this.__myHashTableOfObserverListsKeyedByItemUuid[uuid];
+    for (key in listOfObserversForItem) {
+      observer = listOfObserversForItem[key];
+      if (Util.isFunction(observer)) {
+        observer.call(null, item, listOfRecordsForItem);
+      } else {
+        if (Util.isObject(observer)) {
+          observer.observedItemHasChanged(item, listOfRecordsForItem);
+        } else {
+          // We should never get here.  If we do, consider it an error.
+          Util.assert(false);
+        }
+      }
+    }
+  }
+  
+  // Look at all the observers who have registered interest in a 
+  // list of items rather than in an individual item.  For each of
+  // those observers, notify them of all the changes to all the items.
+  for (var ikey in this.__myListOfListObserverTuples) {
+    var observerTuple = this.__myListOfListObserverTuples[ikey];
+    var listBeingObserved = observerTuple[World.__TUPLE_KEY_LIST];
+    var setOfObservers = observerTuple[World.__TUPLE_KEY_OBSERVERS];
+    var listOfItemChangeReports = null;
+    for (key in listBeingObserved) {
+      item = listBeingObserved[key];
+      var changes = hashTableOfNewlyCreatedRecordsKeyedByItemUuid[item._getUuid()];
+      if (changes) {
+        var changeReportForItem = [item, changes];
+        if (!listOfItemChangeReports) {
+          listOfItemChangeReports = [];
+        }
+        listOfItemChangeReports.push(changeReportForItem);
+      }
+    }
+    if (listOfItemChangeReports) {
+      for (key in setOfObservers) {
+        observer = setOfObservers[key];
+        if (Util.isFunction(observer)) {
+          observer.call(null, listBeingObserved, listOfItemChangeReports);
+        } else {
+          if (Util.isObject(observer)) {
+            observer.observedListHasChanged(listBeingObserved, listOfItemChangeReports);
+          } else {
+            // We should never get here.  If we do, consider it an error.
+            Util.assert(false);
+          }
+        }
+      }
+    }
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Methods for the retrieval filters
+// -------------------------------------------------------------------
+
+/**
+ * Returns the retrieval filter that this world is currently using.
+ *
+ * @scope    public instance method
+ * @return   A string constant representing one of the three supported retrieval filters.
+ */
+World.prototype.getRetrievalFilter = function () {
+  return this.__myCurrentRetrievalFilter;
+};
+
+
+/**
+ * Sets the retrieval filter that this world will use.
+ *
+ * @scope    public instance method
+ * @param    inFilter    A string constant representing one of the three supported retrieval filters.
+ */
+World.prototype.setRetrievalFilter = function (inFilter) {
+  Util.assert(inFilter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS ||
+              inFilter == World.RETRIEVAL_FILTER_SINGLE_USER ||
+              inFilter == World.RETRIEVAL_FILTER_DEMOCRATIC ||
+              inFilter == World.RETRIEVAL_FILTER_UNABRIDGED);
+  this.__myCurrentRetrievalFilter = inFilter;
+};
+
+
+// -------------------------------------------------------------------
+// Accessor methods for axiomatic attributes
+// -------------------------------------------------------------------
+World.prototype.getAttributeCalledName = function () {
+  return this.__myAttributeCalledName;
+};
+
+World.prototype.getAttributeCalledShortName = function () {
+  return this.__myAttributeCalledShortName;
+};
+
+World.prototype.getAttributeCalledSummary = function () {
+  return this.__myAttributeCalledSummary;
+};
+
+World.prototype.getAttributeCalledCategory = function () {
+  return this.__myAttributeCalledCategory;
+};
+
+World.prototype.getAttributeCalledOrdinal = function () {
+  return this.__myAttributeCalledOrdinal;
+};
+
+World.prototype.getAttributeCalledCreationUserstamp = function () {
+  return this.__myAttributeCalledCreationUserstamp;
+};
+
+World.prototype.getAttributeCalledCreationTimestamp = function () {
+  return this.__myAttributeCalledCreationTimestamp;
+};
+
+World.prototype.getAttributeCalledQuery = function () {
+  return this.__myAttributeCalledQuery;
+};
+
+
+// -------------------------------------------------------------------
+// Accessor methods for axiomatic categories
+// -------------------------------------------------------------------
+World.prototype.getCategoryCalledAttribute = function () {
+  return this.__myCategoryCalledAttribute;
+};
+
+World.prototype.getCategoryCalledCategory = function () {
+  return this.__myCategoryCalledCategory;
+};
+
+World.prototype.getCategoryCalledQuery = function () {
+  return this.__myCategoryCalledQuery;
+};
+
+
+// -------------------------------------------------------------------
+// Login and logout methods
+// -------------------------------------------------------------------
+
+/**
+ * Attempts to login a user.
+ *
+ * @scope    public instance method
+ * @param    inUser    The user to be logged in. 
+ * @param    inAuthentication    Authentication info for the user. 
+ * @return   True if we were able to log in the user. False if the login failed.
+ */
+World.prototype.login = function (inUser, inAuthentication) {
+  return this.__myVirtualServer.login(inUser, inAuthentication);
+};
+
+
+/**
+ * Logs out the current user.
+ *
+ * @scope    public instance method
+ * @return   True if the current user was logged out. False if there was no current user logged in.
+ */
+World.prototype.logout = function () {
+  return this.__myVirtualServer.logout();
+};
+
+
+// -------------------------------------------------------------------
+// Methods having to do with users
+// -------------------------------------------------------------------
+
+/**
+ * Returns an list of all the items that represent users of this datastore.
+ *
+ * @scope    public instance method
+ * @return   A list of items.
+ */
+World.prototype.getUsers = function () {
+  var listOfUsers = this.__myVirtualServer.getUsers();
+  var filteredListOfUsers = [];
+  var user;
+  
+  var filter = this.getRetrievalFilter();
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      for (var key in listOfUsers) {
+        user = listOfUsers[key];
+        if (!user.hasBeenDeleted()) {
+          filteredListOfUsers.push(user);
+        }
+      }
+      break;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      filteredListOfUsers = listOfUsers;
+      break;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+
+  filteredListOfUsers.sort(Entry.compareOrdinals);
+  return filteredListOfUsers;
+};
+
+
+/**
+ * Returns an item representing the user who is currently logged in.
+ *
+ * @scope    public instance method
+ * @return   An item representing the user who is currently logged in.
+ */
+World.prototype.getCurrentUser = function () {
+  return this.__myVirtualServer.getCurrentUser();
+};
+
+
+/**
+ * Creates a new item, where the new item represents a user of this datastore.
+ *
+ * @scope    public instance method
+ * @param    inName    A string, which will be assigned to the name attribute of the new item. 
+ * @param    inAuthentication    A string which will be used as the login password for the user. 
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created item representing a user.
+ */
+World.prototype.newUser = function (inName, inAuthentication, inObserver) {
+  this.beginTransaction();
+  var newUser = this.__myVirtualServer.newUser(inName, inAuthentication, inObserver);
+  this.endTransaction();
+  return newUser;
+};
+
+
+// -------------------------------------------------------------------
+// Methods for creating and changing items
+// -------------------------------------------------------------------
+
+/**
+ * Returns a newly created item.
+ *
+ * @scope    public instance method
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created item.
+ */
+World.prototype.newItem = function (inObserver) {
+  this.beginTransaction();
+  var item = this.__myVirtualServer.newItem(inObserver);
+  this.endTransaction();
+  return item;
+};
+
+
+/**
+ * Returns a newly created value.
+ *
+ * @scope    public instance method
+ * @param    inItemOrValue    The item that this is a value of, or the old value that this value is replacing. 
+ * @param    inAttribute    The attribute that this value is assigned to. May be null. 
+ * @param    inContentData    The content datat to initialize the value with. 
+ * @return   A newly created value.
+ */
+World.prototype._newValue = function (inItemOrValue, inAttribute, inContentData) {
+  this.beginTransaction();
+  var value = this.__myVirtualServer.newValue(inItemOrValue, inAttribute, inContentData);
+  this.endTransaction();
+  return value;
+};
+
+
+/**
+ * Returns a newly created ordinal.
+ *
+ * @scope    protected instance method
+ * @param    inEntry    The entry that this is an ordinal for. 
+ * @param    inOrdinalNumber    The ordinal number itself. 
+ * @return   A newly created ordinal.
+ */
+World.prototype._newOrdinal = function (inEntry, inOrdinalNumber) {
+  this.beginTransaction();
+  var ordinal = this.__myVirtualServer.newOrdinal(inEntry, inOrdinalNumber);
+  this.endTransaction();
+  return ordinal;
+};
+
+
+/**
+ * Returns a newly created vote.
+ *
+ * @scope    protected instance method
+ * @param    inEntry    The entry to attach this vote to. 
+ * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
+ * @return   A newly created vote.
+ */
+World.prototype._newVote = function (inEntry, inRetainFlag) {
+  this.beginTransaction();
+  var vote = this.__myVirtualServer.newVote(inEntry, inRetainFlag);
+  this.endTransaction();
+  return vote;
+};
+
+
+/**
+ * Given a UUID, returns the item identified by that UUID.
+ *
+ * @scope    public instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
+ * @return   The item identified by the given UUID.
+ */
+World.prototype.getItemFromUuid = function (inUuid, inObserver) {
+  return (this.__myVirtualServer.getItemFromUuid(inUuid, inObserver));
+};
+
+
+// -------------------------------------------------------------------
+// Query methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a query item, this method returns a list of all the items that 
+ * match the query criteria.
+ *
+ * @scope    public instance method
+ * @param    inQuery    A query item. 
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A list of items.
+ */
+World.prototype.getListOfResultItemsForQuery = function (inQuery, inObserver) {
+  var listOfItems = this.__myVirtualServer.getListOfResultItemsForQuery(inQuery);
+  this.__addListObserver(listOfItems, inObserver);
+  return listOfItems;
+};
+
+
+/**
+ * Given an item and a query item, this method modifies the attributes 
+ * of the item so that when the query is next evaluated the item will be 
+ * included in query result list.
+ *
+ * @scope    public instance method
+ * @param    inItem    An item, which will be modified so that it matches the query. 
+ * @param    inQuery    A query item. 
+ */
+World.prototype.setItemToBeIncludedInQueryResultList = function (inItem, inQuery) {
+  this.__myVirtualServer.setItemToBeIncludedInQueryResultList(inItem, inQuery);
+};
+
+
+/**
+ * Given a category, this method returns a list of all the items that have been 
+ * assigned to that category.
+ *
+ * @scope    public instance method
+ * @param    inCategory    A category item. 
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A list of items.
+ */
+World.prototype.getListOfItemsInCategory = function (inCategory, inObserver) {
+  var listOfItems = this.__myVirtualServer.getListOfItemsInCategory(inCategory);
+  this.__addListObserver(listOfItems, inObserver);
+  return listOfItems;
+};
+
+
+/**
+ * Registers an object or method as an observer of a list, so that
+ * the observer will be notified when items in the list change.
+ *
+ * PENDING: 
+ * Really we should observe queries, not lists of items.  If a change
+ * to an item causes it to fall into the query result set, the observers
+ * of the query should be notified.
+ *
+ * @scope    private instance method
+ * @param    inList    The list of items to be observed. 
+ * @param    inObserver    An object or method to be registered as an observer of the item. 
+ */
+World.prototype.__addListObserver = function (inList, inObserver) {
+  var weNeedToMakeANewTupleForThisList = true;
+  var observerWasAdded = false;
+  var listOfTuples = this.__myListOfListObserverTuples;
+  for (var key in listOfTuples) {
+    var tuple = listOfTuples[key];
+    if (tuple[World.__TUPLE_KEY_LIST] == inList) {
+      weNeedToMakeANewTupleForThisList = false;
+      var setOfObservers = tuple[World.__TUPLE_KEY_OBSERVERS];
+      observerWasAdded = Util.addObjectToSet(inObserver, setOfObservers);
+    }
+  }
+  if (weNeedToMakeANewTupleForThisList) {
+    var newTuple = {};
+    newTuple[World.__TUPLE_KEY_LIST] = inList;
+    newTuple[World.__TUPLE_KEY_OBSERVERS] = [inObserver];
+    listOfTuples.push(newTuple);
+    observerWasAdded = true;
+  }
+  return observerWasAdded;
+};
+
+
+/**
+ * Removes an object or method from the set of observers of a list, so that 
+ * the observer will no longer be notified when items in the list change.
+ *
+ * @scope    public instance method
+ * @param    inList    The list of items that was being observed. 
+ * @param    inObserver    The object or method to be removed from the set of observers. 
+ */
+World.prototype.removeListObserver = function (inList, inObserver) {
+  var observerWasRemoved = false;
+  var listOfTuples = this.__myListOfListObserverTuples;
+  for (var key in listOfTuples) {
+    var tuple = listOfTuples[key];
+    if (tuple[World.__TUPLE_KEY_LIST] == inList) {
+      var setOfObservers = tuple[World.__TUPLE_KEY_OBSERVERS];
+      observerWasRemoved = Util.removeObjectFromSet(inObserver, setOfObservers);
+    }
+  }
+  return observerWasRemoved;
+};
+
+
+/**
+ * Registers an object or method as an observer of an item, so that
+ * the observer will be notified when the item changes.
+ *
+ * @scope    public instance method
+ * @param    inItem    The item to be observed. 
+ * @param    inObserver    An object or method to be registered as an observer of the item. 
+ */
+World.prototype.addItemObserver = function (inItem, inObserver) {
+  var observerList = this.__myHashTableOfObserverListsKeyedByItemUuid[inItem._getUuid()];
+  if (!observerList) {
+    observerList = [];
+    this.__myHashTableOfObserverListsKeyedByItemUuid[inItem._getUuid()] = observerList;
+  }
+  var observerWasAdded = Util.addObjectToSet(inObserver, observerList);
+  return observerWasAdded;
+};
+
+
+/**
+ * Removes an object or method from the set of observers of an item, so 
+ * that the observer will no longer be notified when the item changes.
+ *
+ * @scope    public instance method
+ * @param    inItem    The item that was being observed. 
+ * @param    inObserver    The object or method to be removed from the set of observers. 
+ */
+World.prototype.removeItemObserver = function (inItem, inObserver) {
+  var observerWasRemoved = false;
+  var observerList = this.__myHashTableOfObserverListsKeyedByItemUuid[inItem._getUuid()];
+  if (observerList) {
+    observerWasRemoved = Util.removeObjectFromSet(inObserver, observerList);
+  } 
+  return observerWasRemoved;
+};
+
+
+// -------------------------------------------------------------------
+// Code that should move up into the view layer
+// -------------------------------------------------------------------
+
+World.UUID_FOR_ATTRIBUTE_SECTION = 108;
+World.UUID_FOR_ATTRIBUTE_PLUGIN_NAME = 112;
+
+World.UUID_FOR_CATEGORY_PAGE = 145;
+World.UUID_FOR_CATEGORY_SECTION = 146;
+
+World.UUID_FOR_HOME_PAGE = 2000;
+
+/**
+ * Returns the page item to be used as the home page.
+ *
+ * @scope    public instance method
+ * @return   A page item.
+ */
+// PENDING: 
+// We should move this method up into the view code.
+// It shouldn't be down here in the model layer.
+World.prototype.getHomePage = function () {
+  return this.getItemFromUuid(World.UUID_FOR_HOME_PAGE);
+};
+
+
+/**
+ * Returns true if the given value is a function.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is a function.
+ */
+// PENDING: 
+// Need to move this up into Util.js.
+Util.isFunction = function (inValue) {
+  return ((typeof inValue) == "function");
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From mignon at sheep.berlios.de  Mon Apr 25 22:00:25 2005
From: mignon at sheep.berlios.de (Mignon Belongie at BerliOS)
Date: Mon, 25 Apr 2005 22:00:25 +0200
Subject: [openrecord-svn] r38 - trunk/source
Message-ID: <200504252000.j3PK0P9N001176@sheep.berlios.de>

Author: mignon
Date: 2005-04-25 22:00:25 +0200 (Mon, 25 Apr 2005)
New Revision: 38

Modified:
   trunk/source/Stevedore.js
Log:
Fixed a few typos.

Modified: trunk/source/Stevedore.js
===================================================================
--- trunk/source/Stevedore.js	2005-04-25 04:33:45 UTC (rev 37)
+++ trunk/source/Stevedore.js	2005-04-25 20:00:25 UTC (rev 38)
@@ -293,8 +293,8 @@
  * Marks the beginning of a transaction.
  *
  * Each time you call beginTransaction() you open a new transaction, 
- * which you need to close later using endTransation().  Transactions
- * may be nested, but the beginTransaction and endTransation calls
+ * which you need to close later using endTransaction().  Transactions
+ * may be nested, but the beginTransaction and endTransaction calls
  * always need to come in pairs. 
  *
  * @scope    public instance method
@@ -365,7 +365,7 @@
 
 
 /**
- * Loads the basic items that needed in order to anything else, like
+ * Loads the basic items needed in order to do anything else, like
  * the items for "name", "attribute", and "category".
  *
  * @scope    private instance method



From skinner at sheep.berlios.de  Wed Apr 27 00:59:21 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 27 Apr 2005 00:59:21 +0200
Subject: [openrecord-svn] r39 - in trunk/source: . model
Message-ID: <200504262259.j3QMxLdD002628@sheep.berlios.de>

Author: skinner
Date: 2005-04-27 00:59:20 +0200 (Wed, 27 Apr 2005)
New Revision: 39

Modified:
   trunk/source/Util.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/LintTest.html
   trunk/source/model/LintTest.js
   trunk/source/model/ModelTest.html
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
The new "model" code now passes its first three unit tests.

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/Util.js	2005-04-26 22:59:20 UTC (rev 39)
@@ -165,6 +165,40 @@
 };
 
 
+/**
+ * Registers a function to be used to report status messages to the user.
+ *
+ * @scope    public class method
+ * @param    inFunction    A function which takes a single string argument. 
+ */
+Util.setStatusReporter = function (inFunction) {
+  Util.ourStatusReporter = inFunction;
+};
+
+
+/**
+ * Reports a status message to the user.
+ *
+ * @scope    public class method
+ * @param    inMessage    A string with a status message.
+ */
+Util.displayStatusBlurb = function (inMessage) {
+  Util.ourStatusReporter(inMessage);
+};
+
+
+/**
+ * This defaultStatusReporter simply ignores the status report.
+ *
+ * @scope    public class method
+ * @param    inText    The status message to be reported. 
+ */
+Util.defaultStatusReporter = function (inText) {
+  // do nothing!
+};
+Util.ourStatusReporter = Util.defaultStatusReporter;
+
+
 // -------------------------------------------------------------------
 // Type checking methods
 // -------------------------------------------------------------------
@@ -381,7 +415,29 @@
   } 
 };
 
+
 // -------------------------------------------------------------------
+// File I/O methods
+// -------------------------------------------------------------------
+
+/**
+ * Given the URL of a file, returns the contents of the file as a text string.
+ *
+ * @scope    public class method
+ * @param    inUrl    A string with the URL of a file containing JavaScript code. 
+ * @return   A string containing the contents of the file.
+ */
+// PENDING: move this up into Util.js
+Util.getStringContentsOfFileAtURL = function (inUrl) {
+  var anXMLHttpRequestObject = new XMLHttpRequest();
+  anXMLHttpRequestObject.open("GET", inUrl, false);
+  anXMLHttpRequestObject.send(null);
+  var fileContents = anXMLHttpRequestObject.responseText;
+  return fileContents;
+};
+
+
+// -------------------------------------------------------------------
 // HTML document manipulation
 // -------------------------------------------------------------------
 

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/Entry.js	2005-04-26 22:59:20 UTC (rev 39)
@@ -45,7 +45,6 @@
  * @syntax   DO NOT CALL THIS CONSTRUCTOR
  */
 function Entry() {
-  throw new Error("Entry is an abstract superclass. You can't create instances of it.");
 }
 
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/Item.js	2005-04-26 22:59:20 UTC (rev 39)
@@ -287,9 +287,13 @@
  * @return   A string with a display name for the item.
  */
 Item.prototype.getDisplayName = function (inDefaultString) {
+  var displayName = inDefaultString || "(no name)";
   var listOfNameValues = this.getName();
-  var primaryName = listOfNameValues[0];
-  return primaryName.getDisplayString();
+  if (listOfNameValues.length > 0) {
+    var primaryName = listOfNameValues[0];
+    displayName = primaryName.getDisplayString();
+  }
+  return displayName;
 };
   
 

Modified: trunk/source/model/LintTest.html
===================================================================
--- trunk/source/model/LintTest.html	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/LintTest.html	2005-04-26 22:59:20 UTC (rev 39)
@@ -15,6 +15,7 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="../Util.js"></script>
     <script type="text/javascript" src="Ordinal.js"></script>
     <script type="text/javascript" src="Vote.js"></script>
     <script type="text/javascript" src="Entry.js"></script>

Modified: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/LintTest.js	2005-04-26 22:59:20 UTC (rev 39)
@@ -39,7 +39,7 @@
  * @param    inString    A string containing JavaScript code. 
  * @return   A boolean value. True if the code is good (according to jslint).
  */
-Lint.isCodeCleanInString = function(inString) {
+Lint.isCodeCleanInString = function (inString) {
   jslint.laxLineEnd = false;
   jslint.plusplus = true;
   jslint.cap = false;
@@ -57,23 +57,6 @@
 
 
 /**
- * Given the URL of a file, returns the contents of the file as a text string.
- *
- * @scope    public class method
- * @param    inUrl    A string with the URL of a file containing JavaScript code. 
- * @return   A string containing the contents of the file.
- */
-// PENDING: move this up into Util.js
-Util.getStringContentsOfFileAtURL = function (inUrl) {
-  var anXMLHttpRequestObject = new XMLHttpRequest();
-  anXMLHttpRequestObject.open("GET", inUrl, false);
-  anXMLHttpRequestObject.send(null);
-  var fileContents = anXMLHttpRequestObject.responseText;
-  return fileContents;
-};
-
-
-/**
  * Given the URL of a file containing JavaScript code, returns true if the code 
  * passes the lint tests.
  *
@@ -95,8 +78,13 @@
  * @param    inFileName    A string with the name of a file containing JavaScript code. 
  * @return   A boolean value. True if the code is good (according to jslint).
  */
+Lint.fooBar = function (inFileName) {
+  alert("in Lint.fooBar for " + inFileName);
+};
+
 Lint.isCodeCleanInFile = function (inFileName) {
-  var url  = "../../current/trunk/source/" + inFileName;
+  // alert("in Lint.isCodeCleanInFile for " + inFileName);
+  var url  = "../../current/trunk/source/model/" + inFileName;
   return Lint.isCodeCleanAtUrl(url);
 };
 
@@ -134,8 +122,7 @@
     "Value.js",
     "World.js",
     "StubVirtualServer.js",
-    "BigLumpVirtualServer.js",
-    "ModelTest.js"];
+    "BigLumpVirtualServer.js"];
   for (var key in listOfSourceCodeFiles) {
     var fileName = listOfSourceCodeFiles[key];
     assertTrue("jslint says " + fileName + " is clean", Lint.isCodeCleanInFile(fileName));
@@ -145,6 +132,7 @@
 function tearDown() {
 }
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/ModelTest.html
===================================================================
--- trunk/source/model/ModelTest.html	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/ModelTest.html	2005-04-26 22:59:20 UTC (rev 39)
@@ -15,6 +15,14 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../Util.js"></script>
+    <script type="text/javascript" src="Ordinal.js"></script>
+    <script type="text/javascript" src="Vote.js"></script>
+    <script type="text/javascript" src="Entry.js"></script>
+    <script type="text/javascript" src="Item.js"></script>
+    <script type="text/javascript" src="Value.js"></script>
+    <script type="text/javascript" src="World.js"></script>
+    <script type="text/javascript" src="StubVirtualServer.js"></script>
+    <script type="text/javascript" src="BigLumpVirtualServer.js"></script>
     <script type="text/javascript" src="ModelTest.js"></script>
   </head>
   

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/ModelTest.js	2005-04-26 22:59:20 UTC (rev 39)
@@ -64,6 +64,7 @@
   var userChris = world.newUser("Chris Kringle", passwordForChris);
   world.login(userChris, passwordForChris);
   assertTrue('Chris is logged in', world.getCurrentUser() == userChris);
+  world.logout();
   
   world.login(userJane, janesPassword);
   assertTrue('Jane is logged in', world.getCurrentUser() == userJane);
@@ -77,19 +78,22 @@
   var key;
   var item;
   var world = new World();
+  var listOfAssignedNames;
+  var nameValue;
   
   var listOfAttributes = [];
   listOfAttributes.push(world.getAttributeCalledName());
   listOfAttributes.push(world.getAttributeCalledShortName());
   listOfAttributes.push(world.getAttributeCalledSummary());
   listOfAttributes.push(world.getAttributeCalledCategory());
-  listOfAttributes.push(world.getAttributeCalledOrdinal());
-  listOfAttributes.push(world.getAttributeCalledCreationUserstamp());
-  listOfAttributes.push(world.getAttributeCalledCreationTimestamp());
   for (key in listOfAttributes) {
     item = listOfAttributes[key];
-    var attributeName = item.getName();
-    assertTrue('Every axiomatic attribute has a name', Util.isString(attributeName));
+    listOfAssignedNames = item.getName();
+    assertTrue('Every axiomatic attribute has an array of names', Util.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic attribute has one name assigned', listOfAssignedNames.length == 1);
+    nameValue = listOfAssignedNames[0];
+    assertTrue('Every axiomatic attribute has a name which is value', (nameValue instanceof Value));
+    assertTrue('Every value can be displayed as a string', Util.isString(nameValue.getDisplayString()));
   }
   
   var listOfCategories = [];
@@ -97,8 +101,12 @@
   listOfCategories.push(world.getCategoryCalledCategory());
   for (key in listOfCategories) {
     item = listOfCategories[key];
-    var categoryName = item.getName();
-    assertTrue('Every axiomatic category has a name', Util.isString(categoryName));
+    listOfAssignedNames = item.getName();
+    assertTrue('Every axiomatic category has an array of names', Util.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic category has one name assigned', listOfAssignedNames.length == 1);
+    nameValue = listOfAssignedNames[0];
+    assertTrue('Every axiomatic category has a name which is value', (nameValue instanceof Value));
+    assertTrue('Every value can be displayed as a string', Util.isString(nameValue.getDisplayString()));
   }
 }
 
@@ -106,9 +114,6 @@
 function testAdditionsAndRetrievals() {
   var world = new World();
   var nameAttribute = world.getAttributeCalledName();
-  var ordinalAttribute = world.getAttributeCalledOrdinal();
-  var userstampAttribute = world.getAttributeCalledCreationUserstamp();
-  var timestampAttribute = world.getAttributeCalledCreationTimestamp();
   
   var janesPassword = "jane's password";
   var listOfCharacters = null;
@@ -117,6 +122,7 @@
   var worldRetrievalFilter = null;
   var hasAll;
   
+  var tZero = new Date();
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
 
@@ -125,24 +131,40 @@
   var luck = starWars.addAttributeValue(characterAttribute, "Luck Skywalker");
   var c3po = starWars.addAttributeValue(characterAttribute, "C3PO");
   var r2d2 = starWars.addValue("R2D2");
+  assertTrue('"Star Wars" has not been deleted', !starWars.hasBeenDeleted());
+  assertTrue('"R2D2" has not been deleted', !r2d2.hasBeenDeleted());
+  assertTrue('"R2D2" has not been replaced', !r2d2.hasBeenReplaced());
+
   listOfCharacters = starWars.getValuesForAttribute(characterAttribute);
   hasAll = true;
   hasAll = hasAll &&  Util.isObjectInSet(luck, listOfCharacters);
   hasAll = hasAll &&  Util.isObjectInSet(c3po, listOfCharacters);
   assertTrue('"Star Wars" has characters: luck, c3po', hasAll);
   assertTrue('Exactly 2 characters in the star wars', listOfCharacters.length == 2);
+
   listOfValues = starWars.getValues();
   hasAll = true;
   hasAll = hasAll &&  Util.isObjectInSet(luck, listOfCharacters);
   hasAll = hasAll &&  Util.isObjectInSet(c3po, listOfCharacters);
-  hasAll = hasAll &&  Util.isObjectInSet(r2d2, listOfCharacters);
+  hasAll = hasAll &&  Util.isObjectInSet(r2d2, listOfValues);
   assertTrue('"Star Wars" has values: luck, c3po, r2d2', hasAll);  
+  
+  var ordinalA = starWars.getOrdinalNumberAtCreation();
+  var ordinalB = starWars.getOrdinalNumber();
+  assertTrue('"Star Wars" ordinal values match', ordinalA == ordinalB);  
+  
+  var starWarsTimestamp = starWars.getTimestamp();
+  var now = new Date();
+  // alert("now: " + now + "\nstar wars: " + starWarsTimestamp);
+  assertTrue('"Star Wars" has a timestamp in the past', now >= starWarsTimestamp);  
+  assertTrue('"Star Wars" was created after tZero', starWarsTimestamp >= tZero);  
+
+  var starWarsUserstamp = starWars.getUserstamp();
+  assertTrue('"Star Wars" was made by Jane', starWarsUserstamp == userJane);    
+
   listOfAttributes = starWars.getAttributes();
   hasAll = true;
   hasAll = hasAll &&  Util.isObjectInSet(nameAttribute, listOfAttributes);
-  hasAll = hasAll &&  Util.isObjectInSet(ordinalAttribute, listOfAttributes);
-  hasAll = hasAll &&  Util.isObjectInSet(userstampAttribute, listOfAttributes);
-  hasAll = hasAll &&  Util.isObjectInSet(timestampAttribute, listOfAttributes);
   hasAll = hasAll &&  Util.isObjectInSet(characterAttribute, listOfAttributes);
   assertTrue('"Star Wars" has all 5 expected attributes', hasAll);
   

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/StubVirtualServer.js	2005-04-26 22:59:20 UTC (rev 39)
@@ -94,15 +94,20 @@
  * Returns a newly created item.
  *
  * @scope    public instance method
+ * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
  * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item.
  */
-StubVirtualServer.prototype.newItem = function (inObserver) {
+StubVirtualServer.prototype.newItem = function (inName, inObserver) {
   var uuid = this.__getNewUuid();
   var item = new Item(this.__myWorld, uuid);
   item._initialize(inObserver);
   this.__myHashTableOfItemsKeyedByUuid[uuid] = item;
   this.__myChronologicalListOfNewlyCreatedRecords.push(item);
+  if (inName) { 
+    var attributeCalledName = this.__myWorld.getAttributeCalledName();
+    item.addAttributeValue(attributeCalledName, inName);
+  }
   return item;
 };
 
@@ -170,7 +175,7 @@
  * @return   A newly created item representing a user.
  */
 StubVirtualServer.prototype.newUser = function (inName, inAuthentication, inObserver) {
-  var newUser = this.newItem(inObserver);
+  var newUser = this.newItem(inName, inObserver);
   this.__myListOfUsers.push(newUser);
   this.__myHashTableOfUserAuthenticationInfo[newUser.getUniqueKeyString()] = inAuthentication;
   return newUser;
@@ -280,7 +285,7 @@
  *
  * @scope    public instance method
  */
-StubVirtualServer.saveChangesToServer = function () {
+StubVirtualServer.prototype.saveChangesToServer = function () {
   // The StubVirtualServer doesn't ever actually talk to a server.
   // Other VirtualServer implementations would be expected to actually
   // implement this method such that it saves changes to the server
@@ -511,8 +516,8 @@
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SUMMARY] = "Summary";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY] = "Body";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY] = "Category";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_USERSTAMP] = "Userstamp";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_TIMESTAMP] = "Timestamp";
+  // hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_USERSTAMP] = "Userstamp";
+  // hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_TIMESTAMP] = "Timestamp";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SECTION] = "Section";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY] = "Query";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-04-25 20:00:25 UTC (rev 38)
+++ trunk/source/model/World.js	2005-04-26 22:59:20 UTC (rev 39)
@@ -85,25 +85,26 @@
  * @param    inVirtualServer    Optional. The datastore that this world gets its data from. 
  */
 function World(inVirtualServer) {
+  this.__myCountOfNestedTransactions = 0;
+  this.__myHashTableOfObserverListsKeyedByItemUuid = {};
+  this.__myListOfListObserverTuples = [];
+
   this.__myCurrentRetrievalFilter = World.RETRIEVAL_FILTER_LAST_EDIT_WINS;
   if (inVirtualServer) {
     this.__myVirtualServer = inVirtualServer;
   } else {
     this.__myVirtualServer = new StubVirtualServer();
   }
-  this.__myVirtualServer.setWorldAndLoadAxiomaticItems();
+  this.__myVirtualServer.setWorldAndLoadAxiomaticItems(this);
   
-  this.__myHashTableOfObserverListsKeyedByItemUuid = {};
-  this.__myListOfListObserverTuples = [];
-  
   // load the axiomatic attributes
   this.__myAttributeCalledName = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
   this.__myAttributeCalledShortName = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SHORT_NAME);
   this.__myAttributeCalledSummary = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
   this.__myAttributeCalledCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
-  this.__myAttributeCalledOrdinal = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_ORDINAL);
-  this.__myAttributeCalledCreationUserstamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_USERSTAMP);
-  this.__myAttributeCalledCreationTimestamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_TIMESTAMP);
+  // this.__myAttributeCalledOrdinal = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_ORDINAL);
+  // this.__myAttributeCalledCreationUserstamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_USERSTAMP);
+  // this.__myAttributeCalledCreationTimestamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_TIMESTAMP);
   this.__myAttributeCalledQuery = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
 
   // load the axiomatic categories
@@ -153,7 +154,7 @@
     // that the world can use to display status info.
     var listOfChangesMade = this.__myVirtualServer.saveChangesToServer();
     if (listOfChangesMade.length > 0) {
-      RootView.displayStatusBlurb(listOfChangesMade.length + " changes made");
+      Util.displayStatusBlurb(listOfChangesMade.length + " changes made");
       this.__notifyObserversOfChanges(listOfChangesMade);
     }
   }
@@ -318,18 +319,6 @@
   return this.__myAttributeCalledCategory;
 };
 
-World.prototype.getAttributeCalledOrdinal = function () {
-  return this.__myAttributeCalledOrdinal;
-};
-
-World.prototype.getAttributeCalledCreationUserstamp = function () {
-  return this.__myAttributeCalledCreationUserstamp;
-};
-
-World.prototype.getAttributeCalledCreationTimestamp = function () {
-  return this.__myAttributeCalledCreationTimestamp;
-};
-
 World.prototype.getAttributeCalledQuery = function () {
   return this.__myAttributeCalledQuery;
 };
@@ -462,18 +451,38 @@
  * Returns a newly created item.
  *
  * @scope    public instance method
+ * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
  * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item.
  */
-World.prototype.newItem = function (inObserver) {
+World.prototype.newItem = function (inName, inObserver) {
   this.beginTransaction();
-  var item = this.__myVirtualServer.newItem(inObserver);
+  var item = this.__myVirtualServer.newItem(inName, inObserver);
   this.endTransaction();
   return item;
 };
 
 
 /**
+ * Returns a newly created attribute item.
+ *
+ * @scope    public instance method
+ * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created attribute item.
+ */
+World.prototype.newAttribute = function (inName, inObserver) {
+  this.beginTransaction();
+  var item = this.__myVirtualServer.newItem(inName, inObserver);
+  var attributeCalledCategory = this.getAttributeCalledCategory();
+  var categoryCalledAttribute = this.getCategoryCalledAttribute();
+  item.addAttributeValue(attributeCalledCategory, categoryCalledAttribute);
+  this.endTransaction();
+  return item;
+};
+
+
+/**
  * Returns a newly created value.
  *
  * @scope    public instance method



From skinner at sheep.berlios.de  Wed Apr 27 06:26:09 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 27 Apr 2005 06:26:09 +0200
Subject: [openrecord-svn] r40 - in trunk/source: . model
Message-ID: <200504270426.j3R4Q9Y0009130@sheep.berlios.de>

Author: skinner
Date: 2005-04-27 06:26:02 +0200 (Wed, 27 Apr 2005)
New Revision: 40

Modified:
   trunk/source/Util.js
   trunk/source/UtilTest.js
   trunk/source/model/BigLumpVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/ModelTest.js
   trunk/source/model/READ_ME.txt
   trunk/source/model/World.js
Log:
Added more unit tests, and fixed bugs so that the code passes the new tests.

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/Util.js	2005-04-27 04:26:02 UTC (rev 40)
@@ -318,6 +318,29 @@
 
 
 /**
+ * Returns true if each of the given objects is a member of the set.  
+ * 
+ * @scope    public class method
+ * @param    inArray    An array of objects to look for. 
+ * @param    inSet    The Array to look for the objects in. 
+ * @return   Returns true if each of the objects was found in the set.
+ */
+Util.areObjectsInSet = function (inArray, inSet) {
+  Util.assert(Util.isArray(inArray));
+  Util.assert(Util.isArray(inSet));
+  
+  for (var key in inArray) {
+    var object = inArray[key];
+    var objectIsInSet = Util.isObjectInSet(object, inSet);
+    if (!objectIsInSet) {
+      return false;
+    }
+  }
+  return true;
+};
+
+
+/**
  * Removes an object from an array.  
  * 
  * @scope    public class method

Modified: trunk/source/UtilTest.js
===================================================================
--- trunk/source/UtilTest.js	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/UtilTest.js	2005-04-27 04:26:02 UTC (rev 40)
@@ -50,14 +50,21 @@
 }
 
 function testMethodsThatOperateOnSets() {
-  var aSet = [];
+  var aTinySet = [];
   var theHobbit = UtilTestVars.theHobbit;
-  assertFalse('"The Hobbit" is not in an empty set', Util.isObjectInSet(theHobbit, aSet));
-  assertTrue('"The Hobbit" can be added to an empty set', Util.addObjectToSet(theHobbit, aSet));
-  assertTrue('"The Hobbit" is in the set after being added', Util.isObjectInSet(theHobbit, aSet));
-  assertTrue('"The Hobbit" can be removed from a set it is in', Util.removeObjectFromSet(theHobbit, aSet));
-  assertFalse('"The Hobbit" is no longer in a set it was removed from', Util.isObjectInSet(theHobbit, aSet));
-  assertFalse('"The Hobbit" can not be removed twice', Util.removeObjectFromSet(theHobbit, aSet));
+  assertFalse('"The Hobbit" is not in an empty set', Util.isObjectInSet(theHobbit, aTinySet));
+  assertTrue('"The Hobbit" can be added to an empty set', Util.addObjectToSet(theHobbit, aTinySet));
+  assertTrue('"The Hobbit" is in the set after being added', Util.isObjectInSet(theHobbit, aTinySet));
+  assertTrue('"The Hobbit" can be removed from a set it is in', Util.removeObjectFromSet(theHobbit, aTinySet));
+  assertFalse('"The Hobbit" is no longer in a set it was removed from', Util.isObjectInSet(theHobbit, aTinySet));
+  assertFalse('"The Hobbit" can not be removed twice', Util.removeObjectFromSet(theHobbit, aTinySet));
+
+  setNumber2 = [123, "456", 78.9, new Date(), theHobbit];
+  assertTrue('"The Hobbit" is in setNumber2', Util.isObjectInSet(theHobbit, setNumber2));
+  assertTrue('78.9 is in setNumber2', Util.isObjectInSet(78.9, setNumber2));
+  assertTrue('78.9 and "The Hobbit" is in setNumber2', Util.areObjectsInSet([78.9, theHobbit], setNumber2));
+  assertTrue('All members of setNumber2 are in setNumber2', Util.areObjectsInSet(setNumber2, setNumber2));
+  
 }
 
 function tearDown() {

Modified: trunk/source/model/BigLumpVirtualServer.js
===================================================================
--- trunk/source/model/BigLumpVirtualServer.js	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/model/BigLumpVirtualServer.js	2005-04-27 04:26:02 UTC (rev 40)
@@ -258,7 +258,7 @@
 
     var timestampString = contents[BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP];
     var userstampUuid = contents[BigLumpVirtualServer.JSON_MEMBER_USERSTAMP];
-    var timestamp = new Date(timestampString);
+    var timestamp = new Date(new Number(timestampString));
     var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
 
     if (dehydratedItem) {
@@ -399,7 +399,7 @@
       pickleString = '{ "' + BigLumpVirtualServer.JSON_MEMBER_TYPE + '": "' + typeString + '", "' + BigLumpVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ' }';
       listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_DATA + '": ' + pickleString + ',\n');
     }
-    listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().getUTCMilliseconds() + '",\n');
+    listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '",\n');
     listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '"}\n');
     listOfStrings.push('  }');
   }

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/model/Entry.js	2005-04-27 04:26:02 UTC (rev 40)
@@ -202,7 +202,7 @@
  * @return   A number.
  */
 Entry.prototype.getOrdinalNumberAtCreation = function () {
-  return (0 - this.__myCreationTimestamp.getUTCMilliseconds());
+  return (0 - this.__myCreationTimestamp.valueOf());
 };
 
 
@@ -322,9 +322,11 @@
   
   if (inEntryFirst) {
     firstOrdinalNumber = inEntryFirst.getOrdinalNumber();
+    alert("firstOrdinalNumber:" + firstOrdinalNumber);
   }
   if (inEntryThird) {
     thirdOrdinalNumber = inEntryThird.getOrdinalNumber();
+    alert("thirdOrdinalNumber:" + thirdOrdinalNumber);
   }
   
   if (firstOrdinalNumber && thirdOrdinalNumber) {

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/model/Item.js	2005-04-27 04:26:02 UTC (rev 40)
@@ -156,7 +156,8 @@
  * @return   The new replacement value object.
  */
 Item.prototype.replaceValue = function (inValue, inContentData) {
-  return this.replaceValueWithAttributeValue(inValue, null, inContentData);
+  var attribute = inValue.getAttribute();
+  return this.replaceValueWithAttributeValue(inValue, attribute, inContentData);
 };
 
 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/model/ModelTest.js	2005-04-27 04:26:02 UTC (rev 40)
@@ -30,10 +30,12 @@
  
 var ModelTestVars = null;
 
+
 function setUp() {
   ModelTestVars = {};
 }
 
+
 function testLoginLogout() {
   var world = new World();
   var listOfUsers;
@@ -123,11 +125,16 @@
   var hasAll;
   
   var tZero = new Date();
+  
+  
+  // operations done by Jane
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
 
   var characterAttribute = world.newAttribute("Characters");
   var starWars = world.newItem("Star Wars");
+  assertTrue('getDisplayName() works for "Star Wars"', (starWars.getDisplayName() == "Star Wars"));
+
   var luck = starWars.addAttributeValue(characterAttribute, "Luck Skywalker");
   var c3po = starWars.addAttributeValue(characterAttribute, "C3PO");
   var r2d2 = starWars.addValue("R2D2");
@@ -136,17 +143,12 @@
   assertTrue('"R2D2" has not been replaced', !r2d2.hasBeenReplaced());
 
   listOfCharacters = starWars.getValuesForAttribute(characterAttribute);
-  hasAll = true;
-  hasAll = hasAll &&  Util.isObjectInSet(luck, listOfCharacters);
-  hasAll = hasAll &&  Util.isObjectInSet(c3po, listOfCharacters);
+  hasAll = Util.areObjectsInSet([luck, c3po], listOfCharacters);
   assertTrue('"Star Wars" has characters: luck, c3po', hasAll);
   assertTrue('Exactly 2 characters in the star wars', listOfCharacters.length == 2);
 
   listOfValues = starWars.getValues();
-  hasAll = true;
-  hasAll = hasAll &&  Util.isObjectInSet(luck, listOfCharacters);
-  hasAll = hasAll &&  Util.isObjectInSet(c3po, listOfCharacters);
-  hasAll = hasAll &&  Util.isObjectInSet(r2d2, listOfValues);
+  hasAll = Util.areObjectsInSet([luck, c3po, r2d2], listOfValues);
   assertTrue('"Star Wars" has values: luck, c3po, r2d2', hasAll);  
   
   var ordinalA = starWars.getOrdinalNumberAtCreation();
@@ -163,10 +165,8 @@
   assertTrue('"Star Wars" was made by Jane', starWarsUserstamp == userJane);    
 
   listOfAttributes = starWars.getAttributes();
-  hasAll = true;
-  hasAll = hasAll &&  Util.isObjectInSet(nameAttribute, listOfAttributes);
-  hasAll = hasAll &&  Util.isObjectInSet(characterAttribute, listOfAttributes);
-  assertTrue('"Star Wars" has all 5 expected attributes', hasAll);
+  hasAll = Util.areObjectsInSet([nameAttribute, characterAttribute], listOfAttributes);
+  assertTrue('"Star Wars" has both expected attributes', hasAll);
   
   worldRetrievalFilter = world.getRetrievalFilter();
   assertTrue('Default retrieval filter is "last edit wins"', worldRetrievalFilter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS);
@@ -174,28 +174,149 @@
   var luke = starWars.replaceValue(luck, "Luke Skywalker");
   var previousValue = luke.getPreviousValue();
   assertTrue('"Luke" has the previous version "Luck"', previousValue !== null);
+  assertTrue('"Luck" has been replaced', luck.hasBeenReplaced());
+  assertTrue('"Luke" is a value in "Star Wars"', luck.getItem() == starWars);
 
+  listOfValues = starWars.getValues();
+  hasAll = Util.areObjectsInSet([luke, c3po, r2d2], listOfValues);
+  assertTrue('"Star Wars" has values: luke, c3po, r2d2', hasAll);  
+
+  listOfCharacters = starWars.getValuesForAttribute(characterAttribute);
+  hasAll = Util.areObjectsInSet([luke, c3po], listOfCharacters);
+  assertTrue('"Star Wars" has characters: luke, c3po', hasAll);
+  assertTrue('Exactly 2 characters in the star wars', listOfCharacters.length == 2);
+
   world.logout();
   
+  // operations done by Chris
   var passwordForChris = "Kringlishous!";
   var userChris = world.newUser("Chris Kringle", passwordForChris);
   world.login(userChris, passwordForChris);
 
   r2d2 = starWars.replaceValueWithAttributeValue(r2d2, characterAttribute, "R2D2");
-  var hasR2d2;
+  assertTrue('"R2D2" is now character', r2d2.getAttribute() == characterAttribute);
   
   listOfCharacters = starWars.getValuesForAttribute(characterAttribute);
-  hasR2d2 = Util.isObjectInSet(r2d2, listOfCharacters);
+  var hasR2d2 = Util.isObjectInSet(r2d2, listOfCharacters);
+  hasAll = Util.areObjectsInSet([luke, c3po, r2d2], listOfCharacters);
   assertTrue('Chris sees R2D2 as a character', hasR2d2);
+  assertTrue('Chris sees characters: luke, c3po, r2d2', hasAll);
+  assertTrue('Chris sees 3 characters in "Star Wars"', listOfCharacters.length == 3);
   
+  var attributeCalledName = world.getAttributeCalledName();
+  var theHobbit = world.newItem("The Hobbit");
+  theHobbit.addAttributeValue(attributeCalledName, "There and Back Again");
+  listOfValues = theHobbit.getValuesForAttribute(attributeCalledName);
+  assertTrue('"The Hobbit" has two names', listOfValues.length == 2);
+  assertTrue('getDisplayName() returns the first name', (starWars.getDisplayName() == "Star Wars"));
+  listOfNames = theHobbit.getName();
+  assertTrue('getContentData() returns a string', listOfNames[0].getContentData() == "The Hobbit");
+  hasAll = Util.areObjectsInSet(listOfNames, listOfValues);
+  hasAll = hasAll && Util.areObjectsInSet(listOfValues, listOfNames);
+  assertTrue('getName() matches getValuesForAttribute(attributeCalledName)', hasAll);
+  
   world.logout();
 }
 
 
+function testCategories() {
+  var world = new World();
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  var attributeCalledName = world.getAttributeCalledName();
+  var categoryCalledAttribute = world.getCategoryCalledAttribute();
+
+  var isInCategory;
+  isInCategory = attributeCalledName.isInCategory(categoryCalledAttribute);
+  assertTrue('The attribute "Name" is in the category "Attribute"', isInCategory);
+  isInCategory = categoryCalledAttribute.isInCategory(categoryCalledAttribute);
+  assertTrue('The category "Attribute" is NOT in the category "Attribute"', !isInCategory);
+  
+  var theHobbit = world.newItem("The Hobbit");
+  var theWisdomOfCrowds = world.newItem("The Wisdom of Crowds");
+  var theTransparentSociety = world.newItem("The Transparent Society");
+  isInCategory = theHobbit.isInCategory(categoryCalledAttribute);
+  assertTrue('"The Hobbit" is NOT in the category "Attribute"', !isInCategory);
+  
+  var categoryCalledBook = world.newCategory("Book");
+  isInCategory = theHobbit.isInCategory(categoryCalledBook);
+  assertTrue('"The Hobbit" is NOT in the category "Book"', !isInCategory);
+  
+  theHobbit.addAttributeValue(attributeCalledCategory, categoryCalledBook);
+  theWisdomOfCrowds.addAttributeValue(attributeCalledCategory, categoryCalledBook);
+  theTransparentSociety.addAttributeValue(attributeCalledCategory, categoryCalledBook);
+  isInCategory = theHobbit.isInCategory(categoryCalledBook);
+  assertTrue('"The Hobbit" is in the category "Book"', isInCategory);
+ 
+  var allBooks = world.getListOfItemsInCategory(categoryCalledBook);
+  var hasAll = Util.areObjectsInSet([theHobbit, theWisdomOfCrowds, theTransparentSociety], allBooks);
+  assertTrue('All three books are in the category "Book"', hasAll);
+  
+  world.logout();
+}
+
+
+function testOrdinals() {
+  var world = new World();
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+  
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  
+  var apple = world.newItem("Apple");
+  var cupcake = world.newItem("Cupcake");
+  var brownie = world.newItem("Brownie");  
+
+  var categoryCalledFood = world.newCategory("Food");
+  apple.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+  cupcake.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+  brownie.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+
+  var foodItems = world.getListOfItemsInCategory(categoryCalledFood);
+  assertTrue('Apple starts out first in the list"', foodItems[0] == apple);
+  assertTrue('Cupcake starts out second in the list"', foodItems[1] == cupcake);
+  assertTrue('Brownie starts out second in the list"', foodItems[2] == brownie);
+
+  // PENDING: this doesn't work yet
+  // 
+  // brownie.reorderBetween(apple, cupcake);
+  // foodItems = world.getListOfItemsInCategory(categoryCalledFood);
+  // assertTrue('Apple is now first in the list"', foodItems[0] == apple);
+  // assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
+  // assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
+  
+  world.logout();
+}
+  
+
 function tearDown() {
   ModelTestVars = null;
 }
 
+/*********************************************************************
+Methods that we don't yet have tests for:
+  
+  item.reorderBetween()
+  
+  item.hasBeenDeleted()
+  item.voteToDelete()
+  item.voteToRetain()
+  
+  item.addObserver()
+  item.removeObserver()
+  world.beginTransaction()
+  world.endTransaction()
+
+  world.getListOfResultItemsForQuery()
+  world.setItemToBeIncludedInQueryResultList()
+  world.removeObserverOfList()
+  
+*********************************************************************/
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/READ_ME.txt
===================================================================
--- trunk/source/model/READ_ME.txt	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/model/READ_ME.txt	2005-04-27 04:26:02 UTC (rev 40)
@@ -77,6 +77,8 @@
   world.newUser()
   
   world.newItem()
+  world.newAttribute()
+  world.newCategory()
   world.getListOfItemsInCategory()
   world.getListOfResultItemsForQuery()
   world.setItemToBeIncludedInQueryResultList()

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-04-26 22:59:20 UTC (rev 39)
+++ trunk/source/model/World.js	2005-04-27 04:26:02 UTC (rev 40)
@@ -464,12 +464,12 @@
 
 
 /**
- * Returns a newly created attribute item.
+ * Returns a newly created item representing an attribute.
  *
  * @scope    public instance method
  * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
  * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
- * @return   A newly created attribute item.
+ * @return   A newly created item representing an attribute.
  */
 World.prototype.newAttribute = function (inName, inObserver) {
   this.beginTransaction();
@@ -483,6 +483,25 @@
 
 
 /**
+ * Returns a newly created item representing a category.
+ *
+ * @scope    public instance method
+ * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
+ * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created item representing a category.
+ */
+World.prototype.newCategory = function (inName, inObserver) {
+  this.beginTransaction();
+  var item = this.__myVirtualServer.newItem(inName, inObserver);
+  var attributeCalledCategory = this.getAttributeCalledCategory();
+  var categoryCalledCategory = this.getCategoryCalledCategory();
+  item.addAttributeValue(attributeCalledCategory, categoryCalledCategory);
+  this.endTransaction();
+  return item;
+};
+
+
+/**
  * Returns a newly created value.
  *
  * @scope    public instance method
@@ -608,6 +627,10 @@
  * @param    inObserver    An object or method to be registered as an observer of the item. 
  */
 World.prototype.__addListObserver = function (inList, inObserver) {
+  var observerWasAdded = false;
+  if (!inObserver) {
+    return observerWasAdded;
+  }
   var weNeedToMakeANewTupleForThisList = true;
   var observerWasAdded = false;
   var listOfTuples = this.__myListOfListObserverTuples;



From skinner at sheep.berlios.de  Thu Apr 28 23:12:38 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 28 Apr 2005 23:12:38 +0200
Subject: [openrecord-svn] r41 - in trunk/source: . model scrap_yard
Message-ID: <200504282112.j3SLCcXl000400@sheep.berlios.de>

Author: skinner
Date: 2005-04-28 23:12:36 +0200 (Thu, 28 Apr 2005)
New Revision: 41

Added:
   trunk/source/model/TestSuite.html
   trunk/source/scrap_yard/
   trunk/source/scrap_yard/Timestamp.js
   trunk/source/scrap_yard/TimingTest.html
   trunk/source/scrap_yard/TimingTest.js
Modified:
   trunk/source/model/Entry.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
Added new scrap_yard directory, for misc. code that we want to keep but that doesn't belong in the app itself.
Added more unit tests for the data model code.

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/model/Entry.js	2005-04-28 21:12:36 UTC (rev 41)
@@ -202,7 +202,8 @@
  * @return   A number.
  */
 Entry.prototype.getOrdinalNumberAtCreation = function () {
-  return (0 - this.__myCreationTimestamp.valueOf());
+  // return (0 - this.__myCreationTimestamp.valueOf());
+  return (0 - this.__myUuid);
 };
 
 
@@ -228,6 +229,14 @@
   
   switch (filter) {
     case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      // APPROACH A: 
+      //   I tried this first, but it fails in the unit tests.
+      //   It fails because two objects will have identical timestamps if they
+      //   were created in the same millisecond.  One solution would be to
+      //   create a Timestamp class that offers sub-millisecond timestamp
+      //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
+      //   for now the simplest thing to do is just move on to APPROACH B:
+      /*
       var mostRecentOrdinal = this.__mySetOfOrdinals[0];
       for (key in this.__mySetOfOrdinals) {
         ordinal = this.__mySetOfOrdinals[key];
@@ -235,7 +244,14 @@
           mostRecentOrdinal = ordinal;
         }
       }
-      ordinalNumber = !mostRecentOrdinal.getOrdinalNumber();
+      */
+      
+      // APPROACH B: 
+      //   This works, provided __mySetOfOrdinals is always initialized in
+      //   chronological order.
+      var mostRecentOrdinal = this.__mySetOfOrdinals[this.__mySetOfOrdinals.length - 1];
+
+      ordinalNumber = mostRecentOrdinal.getOrdinalNumber();
       break;
     case World.RETRIEVAL_FILTER_SINGLE_USER:
       // PENDING: This still needs to be implemented.
@@ -276,6 +292,14 @@
   
   switch (filter) {
     case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      // APPROACH A: 
+      //   I tried this first, but it fails in the unit tests.
+      //   It fails because two objects will have identical timestamps if they
+      //   were created in the same millisecond.  One solution would be to
+      //   create a Timestamp class that offers sub-millisecond timestamp
+      //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
+      //   for now the simplest thing to do is just move on to APPROACH B:
+      /*
       var mostRecentVote = this.__mySetOfVotes[0];
       for (key in this.__mySetOfVotes) {
         vote = this.__mySetOfVotes[key];
@@ -283,6 +307,13 @@
           mostRecentVote = vote;
         }
       }
+      */
+      
+      // APPROACH B: 
+      //   This works, provided __mySetOfVotes is always initialized in
+      //   chronological order.
+      var mostRecentVote = this.__mySetOfVotes[this.__mySetOfVotes.length - 1];
+      
       hasBeenDeleted = !mostRecentVote.getRetainFlag();
       break;
     case World.RETRIEVAL_FILTER_SINGLE_USER:
@@ -318,15 +349,13 @@
   var firstOrdinalNumber = null;
   var secondOrdinalNumber = null;
   var thirdOrdinalNumber = null;
-  var arbitraryNumberToMoveUsUpOrDownSlightly = 100;
+  var arbitraryNumberToMoveUsUpOrDownSlightly = 0.01;
   
   if (inEntryFirst) {
     firstOrdinalNumber = inEntryFirst.getOrdinalNumber();
-    alert("firstOrdinalNumber:" + firstOrdinalNumber);
   }
   if (inEntryThird) {
     thirdOrdinalNumber = inEntryThird.getOrdinalNumber();
-    alert("thirdOrdinalNumber:" + thirdOrdinalNumber);
   }
   
   if (firstOrdinalNumber && thirdOrdinalNumber) {
@@ -338,7 +367,7 @@
   if (!firstOrdinalNumber && thirdOrdinalNumber) {
     secondOrdinalNumber = (firstOrdinalNumber + arbitraryNumberToMoveUsUpOrDownSlightly);
   }
-  
+
   this.getWorld()._newOrdinal(this, secondOrdinalNumber);
 };
 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/model/ModelTest.js	2005-04-28 21:12:36 UTC (rev 41)
@@ -281,42 +281,210 @@
   assertTrue('Cupcake starts out second in the list"', foodItems[1] == cupcake);
   assertTrue('Brownie starts out second in the list"', foodItems[2] == brownie);
 
-  // PENDING: this doesn't work yet
-  // 
-  // brownie.reorderBetween(apple, cupcake);
-  // foodItems = world.getListOfItemsInCategory(categoryCalledFood);
-  // assertTrue('Apple is now first in the list"', foodItems[0] == apple);
-  // assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
-  // assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
+  brownie.reorderBetween(apple, cupcake);
+  foodItems = world.getListOfItemsInCategory(categoryCalledFood);
+  assertTrue('Apple is now first in the list"', foodItems[0] == apple);
+  assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
+  assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
+
+  cupcake.reorderBetween(null, apple);
+  foodItems = world.getListOfItemsInCategory(categoryCalledFood);
+  assertTrue('Apple is now first in the list"', foodItems[0] == cupcake);
+  assertTrue('Brownie is now second in the list"', foodItems[1] == apple);
+  assertTrue('Cupcake is now third in the list"', foodItems[2] == brownie);
+
+  cupcake.reorderBetween(brownie, null);
+  foodItems = world.getListOfItemsInCategory(categoryCalledFood);
+  assertTrue('Apple is now first in the list"', foodItems[0] == apple);
+  assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
+  assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
   
   world.logout();
 }
+
   
+function testDeletion() {
+  var world = new World();
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+  
+  var hydrogen = world.newItem("Hydrogen");
+  var oxygen = world.newItem("Oxygen");
+  
+  assertTrue('Hydrogen starts out not having been deleted"', !hydrogen.hasBeenDeleted());
 
-function tearDown() {
-  ModelTestVars = null;
+  hydrogen.voteToDelete();
+  assertTrue('After a voteToDelete(), hydrogen hasBeenDeleted()"', hydrogen.hasBeenDeleted());
+  
+  hydrogen.voteToRetain();
+  assertTrue('After a voteToRetain(), hydrogen no longer hasBeenDeleted()', !hydrogen.hasBeenDeleted());
+
+  world.logout();
 }
 
-/*********************************************************************
-Methods that we don't yet have tests for:
+
+function testItemObservation() {
+  var world = new World();
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
   
-  item.reorderBetween()
+  var tokyo = world.newItem("Tokyo");
+  var seattle = world.newItem("Seattle");
   
-  item.hasBeenDeleted()
-  item.voteToDelete()
-  item.voteToRetain()
+  var changesObservedByObject = null;
+  var tokyoObserverObject = {};
+  tokyoObserverObject.observedItemHasChanged = function (inItem, inListOfRecords) {
+    changesObservedByObject = inListOfRecords;
+  };
+  tokyo.addObserver(tokyoObserverObject);
+
+  var changesObservedByFunction = null;
+  var tokyoObserverFunction = function (inItem, inListOfRecords) {
+    changesObservedByFunction = inListOfRecords;
+  };
+  tokyo.addObserver(tokyoObserverFunction);
   
-  item.addObserver()
-  item.removeObserver()
-  world.beginTransaction()
-  world.endTransaction()
+  seattle.voteToDelete();
+  assertTrue('tokyoObserverObject does not observe Seattle', (changesObservedByObject === null));
+  assertTrue('tokyoObserverFunction does not observe Seattle', (changesObservedByFunction === null));
 
-  world.getListOfResultItemsForQuery()
-  world.setItemToBeIncludedInQueryResultList()
-  world.removeObserverOfList()
+  tokyo.voteToDelete();
+  assertTrue('tokyoObserverObject does observe Tokyo', (changesObservedByObject != null));
+  assertTrue('tokyoObserverObject sees exactly one change', (changesObservedByObject.length == 1));
+  assertTrue('tokyoObserverFunction does observe Tokyo', (changesObservedByFunction != null));
+  assertTrue('tokyoObserverFunction sees exactly one change', (changesObservedByFunction.length == 1));
+
+  changesObservedByObject = null;
+  changesObservedByFunction = null;
+  world.beginTransaction();
+  tokyo.voteToRetain();
+  tokyo.addValue("Japan");
+  assertTrue('tokyoObserverObject does not yet see changes', (changesObservedByObject === null));
+  assertTrue('tokyoObserverFunction does not yet see changes', (changesObservedByFunction === null));
+  world.endTransaction();
+  assertTrue('tokyoObserverObject now sees changes', (changesObservedByObject != null));
+  assertTrue('tokyoObserverObject now sees two changes', (changesObservedByObject.length == 2));
+  assertTrue('tokyoObserverFunction now sees changes', (changesObservedByFunction != null));
+  assertTrue('tokyoObserverFunction now sees two changes', (changesObservedByFunction.length == 2));
+
+  changesObservedByObject = null;
+  changesObservedByFunction = null;
+  tokyo.removeObserver(tokyoObserverObject);
+  tokyo.removeObserver(tokyoObserverFunction);
+  tokyo.voteToDelete();
+  assertTrue('tokyoObserverObject no longer observes Tokyo', (changesObservedByObject === null));
+  assertTrue('tokyoObserverFunction no longer observes Tokyo', (changesObservedByFunction === null));
   
-*********************************************************************/
+  world.logout();
+}
 
+
+function testListObservation() {
+  var world = new World();
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  
+  var apple = world.newItem("Apple");
+  var brownie = world.newItem("Brownie");  
+  var cupcake = world.newItem("Cupcake");
+
+  var categoryCalledFood = world.newCategory("Food");
+  apple.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+  brownie.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+  cupcake.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+
+  var tokyo = world.newItem("Tokyo");
+  var seattle = world.newItem("Seattle");
+
+  var changesObservedByObject = null;
+  var foodObserverObject = {};
+  foodObserverObject.observedListHasChanged = function (inList, inListOfChangeReports) {
+    changesObservedByObject = inListOfChangeReports;
+  };
+  var foodItems = world.getListOfItemsInCategory(categoryCalledFood, foodObserverObject);
+
+  var changesObservedByFunction = null;
+  var foodObserverFunction = function (inList, inListOfChangeReports) {
+    changesObservedByFunction = inListOfChangeReports;
+  };
+  var alsoFoodItems = world.getListOfItemsInCategory(categoryCalledFood, foodObserverFunction);
+  
+  apple.addValue("Red");
+  assertTrue('foodObserverObject sees a change to apple', (changesObservedByObject != null));
+  assertTrue('foodObserverFunction sees a change to apple', (changesObservedByFunction != null));
+
+  changesObservedByObject = null;
+  changesObservedByFunction = null;
+  tokyo.addValue("Japan");
+  assertTrue('foodObserverObject does not see a change to tokyo', (changesObservedByObject === null));
+  assertTrue('foodObserverFunction does not see a change to tokyo', (changesObservedByFunction === null));
+
+  world.removeListObserver(foodItems, foodObserverObject);
+  world.removeListObserver(alsoFoodItems, foodObserverFunction);
+  brownie.addValue("Brown");
+  assertTrue('foodObserverObject no longer sees changes to food items', (changesObservedByObject === null));
+  assertTrue('foodObserverFunction no longer sees changes to food items', (changesObservedByFunction === null));
+  
+  world.logout();
+}
+
+
+function testQueries() {
+  var world = new World();
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+  
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  
+  var apple = world.newItem("Apple");
+  var brownie = world.newItem("Brownie");  
+  var cupcake = world.newItem("Cupcake");
+
+  var categoryCalledFood = world.newCategory("Food");
+  assertTrue('The category "Food" is an item', (categoryCalledFood instanceof Item));
+  apple.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+  brownie.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+  cupcake.addAttributeValue(attributeCalledCategory, categoryCalledFood);
+
+  var tokyo = world.newItem("Tokyo");
+  var seattle = world.newItem("Seattle");
+
+  var hasAll;
+  var queryForFoods = world.newQueryForItemsByCategory(categoryCalledFood);
+  var queryForCities = world.newQueryForSpecificItems([tokyo, seattle]);
+  
+  var listOfFoods = world.getListOfResultItemsForQuery(queryForFoods);
+  hasAll = Util.areObjectsInSet([apple, brownie, cupcake], listOfFoods);
+  assertTrue('Food query returns 3 foods', listOfFoods.length == 3);
+  assertTrue('Food query returns all 3 foods', hasAll);
+
+  var listOfCities = world.getListOfResultItemsForQuery(queryForCities);
+  hasAll = Util.areObjectsInSet([tokyo, seattle], listOfCities);
+  assertTrue('City query returns 2 cities', listOfCities.length == 2);
+  assertTrue('City query returns all cities', hasAll);
+
+  world.setItemToBeIncludedInQueryResultList(tokyo, queryForFoods);
+  assertTrue('Tokyo is now a food', tokyo.isInCategory(categoryCalledFood));
+
+  listOfFoods = world.getListOfResultItemsForQuery(queryForFoods);
+  hasAll = Util.areObjectsInSet([apple, brownie, cupcake, tokyo], listOfFoods);
+  assertTrue('Food query returns 4 foods', listOfFoods.length == 4);
+  assertTrue('Food query returns all 4 foods', hasAll);
+
+  world.logout();
+}
+
+function tearDown() {
+  ModelTestVars = null;
+}
+
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/model/StubVirtualServer.js	2005-04-28 21:12:36 UTC (rev 41)
@@ -154,7 +154,7 @@
  * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  * @return   A newly created vote.
  */
-StubVirtualServer.prototype._newVote = function (inEntry, inRetainFlag) {
+StubVirtualServer.prototype.newVote = function (inEntry, inRetainFlag) {
   var vote = new Vote(inEntry, this.__myWorld.getCurrentUser(), inRetainFlag);
   this.__myChronologicalListOfNewlyCreatedRecords.push(vote);
   return vote;
@@ -310,12 +310,13 @@
 StubVirtualServer.prototype.getListOfResultItemsForQuery = function (inQuery, inObserver) {
   Util.assert(inQuery instanceof Item);
   
-  var attributeCalledQueryMatchingCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var attributeCalledQueryMatchingItem = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  var attributeCalledQueryMatchingCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var attributeCalledQueryMatchingItem = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
 
   var uuid = null;
   var item = null;
-  var listOfQueryResultItems = null;
+  var key;
+  var listOfQueryResultItems = [];
   var listOfMatchingCategories = inQuery.getValuesForAttribute(attributeCalledQueryMatchingCategory);
   var listOfMatchingItems = inQuery.getValuesForAttribute(attributeCalledQueryMatchingItem);
   var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
@@ -324,19 +325,23 @@
   Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
 
   if (isItemMatchingQuery) {
-    listOfQueryResultItems = listOfMatchingItems;
+    for (key in listOfMatchingItems) {
+      var itemValue = listOfMatchingItems[key];
+      item = itemValue.getContentData();
+      listOfQueryResultItems.push(item);
+    }
   }
   
   if (isCategoryMatchingQuery) {
-    listOfQueryResultItems = [];
     // This is a wildly inefficient search.  But maybe it doesn't matter,
     // because this code should all be replaced someday by server code.
     for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
       item = this.__myHashTableOfItemsKeyedByUuid[uuid];
       if (!item.hasBeenDeleted()) {
         var includeItem = true;
-        for (var key in listOfMatchingCategories) {
-          var category = listOfMatchingCategories[key];
+        for (key in listOfMatchingCategories) {
+          var categoryValue = listOfMatchingCategories[key];
+          var category = categoryValue.getContentData();
           if (includeItem && !(item.isInCategory(category))) {
             includeItem = false;
           }
@@ -349,7 +354,6 @@
   }
   
   if (!isItemMatchingQuery && !isCategoryMatchingQuery) {
-    listOfQueryResultItems = [];
     for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
       item = this.__myHashTableOfItemsKeyedByUuid[uuid];
       if (!item.hasBeenDeleted()) {
@@ -377,8 +381,8 @@
   Util.assert(inItem instanceof Item);
   Util.assert(inQuery instanceof Item);
 
-  var attributeCalledQueryMatchingCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var attributeCalledQueryMatchingItem = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  var attributeCalledQueryMatchingCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var attributeCalledQueryMatchingItem = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
 
   var listOfMatchingCategories = inQuery.getValuesForAttribute(attributeCalledQueryMatchingCategory);
   var listOfMatchingItems = inQuery.getValuesForAttribute(attributeCalledQueryMatchingItem);
@@ -394,7 +398,8 @@
   var attributeCalledCategory = this.__myWorld.getAttributeCalledCategory();
   if (isCategoryMatchingQuery) {
     for (var key in listOfMatchingCategories) {
-      var category = listOfMatchingCategories[key];
+      var categoryValue = listOfMatchingCategories[key];
+      var category = categoryValue.getContentData();
       if (!(inItem.isInCategory(category))) {
         inItem.addAttributeValue(attributeCalledCategory, category);
       }

Added: trunk/source/model/TestSuite.html
===================================================================
--- trunk/source/model/TestSuite.html	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/model/TestSuite.html	2005-04-28 21:12:36 UTC (rev 41)
@@ -0,0 +1,96 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Data Model Test Suite</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestSuite(dataModelTestSuite());
+        return testSuite;
+      }
+      
+      function dataModelTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../current/trunk/source/model/ModelTest.html");
+        testSuite.addTestPage("../../current/trunk/source/model/LintTest.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>Data Model Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../../../third_party/jsunit/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/model/World.js	2005-04-28 21:12:36 UTC (rev 41)
@@ -106,6 +106,8 @@
   // this.__myAttributeCalledCreationUserstamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_USERSTAMP);
   // this.__myAttributeCalledCreationTimestamp = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_TIMESTAMP);
   this.__myAttributeCalledQuery = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
+  this.__myAttributeCalledQueryMatchingCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  this.__myAttributeCalledQueryMatchingItem = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
 
   // load the axiomatic categories
   this.__myCategoryCalledAttribute = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
@@ -323,7 +325,15 @@
   return this.__myAttributeCalledQuery;
 };
 
+World.prototype.getAttributeCalledQueryMatchingCategory = function () {
+  return this.__myAttributeCalledQueryMatchingCategory;
+};
 
+World.prototype.getAttributeCalledQueryMatchingItem = function () {
+  return this.__myAttributeCalledQueryMatchingItem;
+};
+
+
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic categories
 // -------------------------------------------------------------------
@@ -502,6 +512,72 @@
 
 
 /**
+ * Returns a newly created item representing a query.
+ *
+ * @scope    public instance method
+ * @param    inCategory    Optional. A category item, or an array of category items. 
+ * @return   A newly created item representing a query.
+ */
+World.prototype.newQueryForItemsByCategory = function (inCategory) {
+  this.beginTransaction();
+  var item = this.__myVirtualServer.newItem("A query");
+  var attributeCalledCategory = this.getAttributeCalledCategory();
+  var categoryCalledQuery = this.getCategoryCalledQuery();
+  item.addAttributeValue(attributeCalledCategory, categoryCalledQuery);
+
+  var attributeCalledQueryMatchingCategory = this.getAttributeCalledQueryMatchingCategory();
+  if (inCategory) {
+    if (inCategory instanceof Item) {
+      item.addAttributeValue(attributeCalledQueryMatchingCategory, inCategory);
+    }
+    if (Util.isArray(inCategory)) {
+      var listOfCategories = inCategory;
+      for (var key in listOfCategories) {
+        var category = listOfCategories[key];
+        item.addAttributeValue(attributeCalledQueryMatchingCategory, category);
+      }
+    }
+  }
+
+  this.endTransaction();
+  return item;
+};
+
+
+/**
+ * Returns a newly created item representing a query.
+ *
+ * @scope    public instance method
+ * @param    inItems    Optional. An item, or an array of items. 
+ * @return   A newly created item representing a query.
+ */
+World.prototype.newQueryForSpecificItems = function (inItems) {
+  this.beginTransaction();
+  var item = this.__myVirtualServer.newItem("A query");
+  var attributeCalledCategory = this.getAttributeCalledCategory();
+  var categoryCalledQuery = this.getCategoryCalledQuery();
+  item.addAttributeValue(attributeCalledCategory, categoryCalledQuery);
+
+  var attributeCalledQueryMatchingItem = this.getAttributeCalledQueryMatchingItem();
+  if (inItems) {
+    if (inItems instanceof Item) {
+      item.addAttributeValue(attributeCalledQueryMatchingItem, inItems);
+    }
+    if (Util.isArray(inItems)) {
+      var listOfItems = inItems;
+      for (var key in listOfItems) {
+        var matchingItem = listOfItems[key];
+        item.addAttributeValue(attributeCalledQueryMatchingItem, matchingItem);
+      }
+    }
+  }
+
+  this.endTransaction();
+  return item;
+};
+
+
+/**
  * Returns a newly created value.
  *
  * @scope    public instance method
@@ -632,7 +708,6 @@
     return observerWasAdded;
   }
   var weNeedToMakeANewTupleForThisList = true;
-  var observerWasAdded = false;
   var listOfTuples = this.__myListOfListObserverTuples;
   for (var key in listOfTuples) {
     var tuple = listOfTuples[key];

Added: trunk/source/scrap_yard/Timestamp.js
===================================================================
--- trunk/source/scrap_yard/Timestamp.js	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/scrap_yard/Timestamp.js	2005-04-28 21:12:36 UTC (rev 41)
@@ -0,0 +1,88 @@
+/*****************************************************************************
+ Timestamp.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Date
+// -------------------------------------------------------------------
+
+
+/**
+ * A Timestamp instance records when it was created.  Each Timestamp
+ * includes a Date object, which records the time in milliseconds since
+ * 1970.  In some use cases, thousands of Timestamp objects may be
+ * created within a single millisecond.  All of these Timestamps 
+ * will have Date objects with identical values.  To determine the
+ * sequence in which the Timestamps were created, we need each 
+ * Timestamp to have not only a Date object, but also a "sequence
+ * number".  Given two Timestamps with identical Date values, the 
+ * sequence number tells which was created first.
+ *
+ * @scope    public instance constructor
+ * @param    inDate    Optional. A Date object. 
+ * @param    inSubMillisecondSequenceNumber    Optional. A number. 
+ */
+function Timestamp(inDate, inSequenceNumber) {
+  if (inDate && inSubMillisecondSequenceNumber) {
+    // We're "rehydrating" an old Timestamp that we already know
+    // the internal state information of.
+    this.__myDate = inDate;
+    this.__mySequenceNumber = inSequenceNumber;
+  } else {
+    // We creating a brand new Timestamp, so we need to stamp it
+    // with the current time.
+    this.__myDate = new Date();
+    if (!Timestamp.__ourCurrentMillisecond) {
+      // This is the first Timestamp to ever be created
+      Timestamp.__ourCurrentMillisecond = this.__myDate.valueOf();
+      this.__mySequenceNumber = 1;
+      Timestamp.__ourNextAvailableSequenceNumber = 2;
+    } else {
+      var dateInMilliseconds = this.__myDate.valueOf();
+      if (dateInMilliseconds == Timestamp.__ourCurrentMillisecond) {
+        // We've already created a previous Timestamp in this same
+        // millisecond, so this new Timestamp needs a bigger 
+        // sequence number.
+        this.__mySequenceNumber = Timestamp.__ourNextAvailableSequenceNumber;
+        Timestamp.__ourNextAvailableSequenceNumber += 1;
+      } else {
+        // The last Timestamp we gave out happened long ago.
+        Timestamp.__ourCurrentMillisecond = dateInMilliseconds;
+        this.__mySequenceNumber = 1;
+        Timestamp.__ourNextAvailableSequenceNumber = 2;
+      }
+    }
+  }
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/scrap_yard/TimingTest.html
===================================================================
--- trunk/source/scrap_yard/TimingTest.html	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/scrap_yard/TimingTest.html	2005-04-28 21:12:36 UTC (rev 41)
@@ -0,0 +1,85 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>JavaScript timing tests</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../Util.js"></script>
+    <script type="text/javascript" src="../model/Entry.js"></script>
+    <script type="text/javascript" src="TimingTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>JavaScript timing tests</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../../../third_party/jsunit/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/source/scrap_yard/TimingTest.js
===================================================================
--- trunk/source/scrap_yard/TimingTest.js	2005-04-27 04:26:02 UTC (rev 40)
+++ trunk/source/scrap_yard/TimingTest.js	2005-04-28 21:12:36 UTC (rev 41)
@@ -0,0 +1,263 @@
+/*****************************************************************************
+ TimingTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+// Results from running this test, using Brian's Dell 4600:
+//  0   microseconds for EMPTY_LOOP
+// 16   microseconds for ARRAY_CREATION
+// 15   microseconds for OBJECT_CREATION
+// 14   microseconds for OBJECT_CREATION_WITH_STRINGS
+// 11   microseconds for DATE_CREATION
+//  2.3 microseconds for METHOD_CALL
+//  1.3 microseconds for GLOBAL_VARIABLE_LOOKUP
+//  1.2 microseconds for DATE_VALUEOF
+// 16    microseconds for ENTRY_COMPAREORDINALS
+
+// Results from a different test program, using Brian's Dell 4600:
+//  0.78 microseconds to create a new Array:   var a = [x, y];
+//  0.59 microseconds to create a new Object:  var o = {here: x, there: y};
+//  0.59 microseconds to create a new Object:  var o = {"here": x, "there": y};
+//  0.49 microseconds to create a new Date:    var d = new Date();
+//  0.18 microseconds to call a global method: noop();
+//  0.15 microseconds to look up a global:     ModelTestVars = null;
+//  0.06 microseconds to call Date.valueOf:    var foo = now.valueOf();
+//  0.88 microseconds to call compareOrdinals: var foo = Entry.compareOrdinals(e1, e2);
+
+var TEST_EMPTY_LOOP = "EMPTY_LOOP";
+var TEST_ARRAY_CREATION = "ARRAY_CREATION";
+var TEST_OBJECT_CREATION = "OBJECT_CREATION";
+var TEST_OBJECT_CREATION_WITH_STRINGS = "OBJECT_CREATION_WITH_STRINGS";
+var TEST_DATE_CREATION = "DATE_CREATION";
+var TEST_METHOD_CALL = "METHOD_CALL";
+var TEST_GLOBAL_VARIABLE_LOOKUP = "GLOBAL_VARIABLE_LOOKUP";
+var TEST_DATE_VALUEOF = "DATE_VALUEOF";
+var TEST_ENTRY_COMPAREORDINALS = "ENTRY_COMPAREORDINALS";
+
+function testTimes() {
+  var testName;
+  var hashTableOfOperationsPerMillisecondKeyedByTestName = {};
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_EMPTY_LOOP] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_ARRAY_CREATION] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_OBJECT_CREATION] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_OBJECT_CREATION_WITH_STRINGS] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_DATE_CREATION] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_METHOD_CALL] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_GLOBAL_VARIABLE_LOOKUP] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_DATE_VALUEOF] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_ENTRY_COMPAREORDINALS] = null;
+  for (testName in hashTableOfOperationsPerMillisecondKeyedByTestName) {
+    var opsPerMS = getOpsPerMS(testName);
+    hashTableOfOperationsPerMillisecondKeyedByTestName[testName] = opsPerMS;
+  }
+  var resultMessage = "";
+  for (testName in hashTableOfOperationsPerMillisecondKeyedByTestName) {
+    var opsPerMS = hashTableOfOperationsPerMillisecondKeyedByTestName[testName];
+    var emptyLoopsPerMS = hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_EMPTY_LOOP];
+    var microSecondsPerEmptyLoop = 1000 / emptyLoopsPerMS;
+    var microSecondsPerOperationGross = 1000 / opsPerMS;
+    var microSecondsPerOperationNet = microSecondsPerOperationGross - microSecondsPerEmptyLoop;
+    resultMessage += microSecondsPerOperationNet.toFixed(1) + " microseconds for " + testName + "\n";
+  }
+  
+  alert(resultMessage);
+}
+
+function noop() {
+  return 0;
+}
+
+function getOpsPerMS(inTestName) {
+
+  var numberOfMillisecondsWorthOfTrials = 500;
+  var operationsPerForLoopIteration = 10;
+  var numberOfForLoopIterations = 5;
+  var operationsPerWhileLoopIteration = numberOfForLoopIterations * operationsPerForLoopIteration;
+  var totalOperations = 0;
+  
+  if (inTestName == TEST_ENTRY_COMPAREORDINALS) {
+    var world = {};
+    world.getCurrentUser = function () { return this; };
+    var e1 = new Entry();
+    var e2 = new Entry();
+    e1._Entry(world, 1);
+    e2._Entry(world, 2);
+    e1._initializeEntry();
+    e2._initializeEntry();
+  }
+
+  var start = new Date();
+  var startMS = start.valueOf();
+  var nowMS = startMS;
+  var i;
+  var now;
+  var foo;
+  
+  while (nowMS == startMS) {
+    now = new Date();
+    nowMS = now.valueOf();
+  }
+  
+  startMS = nowMS;
+  
+  while ((nowMS - startMS) < numberOfMillisecondsWorthOfTrials) {
+    if (inTestName == TEST_EMPTY_LOOP) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        // empty: do nothing
+      }
+    }
+    if (inTestName == TEST_ARRAY_CREATION) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+        foo = [nowMS, startMS];
+      }
+    }
+    if (inTestName == TEST_OBJECT_CREATION) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+        foo = {now: nowMS, start: startMS};
+      }
+    }
+    if (inTestName == TEST_OBJECT_CREATION_WITH_STRINGS) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+        foo = {"now": nowMS, "start": startMS};
+      }
+    }
+    if (inTestName == TEST_DATE_CREATION) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+        foo = new Date();
+      }
+    }
+    if (inTestName == TEST_METHOD_CALL) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = noop();
+        foo = noop();
+        foo = noop();
+        foo = noop();
+        foo = noop();
+        foo = noop();
+        foo = noop();
+        foo = noop();
+        foo = noop();
+        foo = noop();
+      }
+    }
+    if (inTestName == TEST_GLOBAL_VARIABLE_LOOKUP) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+        foo = TEST_EMPTY_LOOP;
+      }
+    }
+    if (inTestName == TEST_DATE_VALUEOF) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+        foo = now.valueOf();
+      }
+    }
+    if (inTestName == TEST_ENTRY_COMPAREORDINALS) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+        foo = Entry.compareOrdinals(e1, e2);
+      }
+    }
+    now = new Date();
+    nowMS = now.valueOf();
+    totalOperations += operationsPerWhileLoopIteration;
+  }
+     
+//  now = new Date();
+//  nowMS = now.valueOf();   
+//  var elapsedMS = nowMS - startMS;
+//  var totalOperations = operationsPerForLoopIteration * numberOfForLoopIterations;
+//  var operationsPerMillisecond = totalOperations / elapsedMS;
+
+  var operationsPerMillisecond = totalOperations / numberOfMillisecondsWorthOfTrials;
+  return operationsPerMillisecond;  
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at sheep.berlios.de  Fri Apr 29 05:41:00 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 29 Apr 2005 05:41:00 +0200
Subject: [openrecord-svn] r42 - trunk/source/model
Message-ID: <200504290341.j3T3f0I8021539@sheep.berlios.de>

Author: skinner
Date: 2005-04-29 05:40:55 +0200 (Fri, 29 Apr 2005)
New Revision: 42

Added:
   trunk/source/model/2005_item_centric_list.json
Modified:
   trunk/source/model/BigLumpVirtualServer.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
More work on the new data model -- more unit tests, and changes to the code to make it pass the tests.

Added: trunk/source/model/2005_item_centric_list.json
===================================================================
--- trunk/source/model/2005_item_centric_list.json	2005-04-28 21:12:36 UTC (rev 41)
+++ trunk/source/model/2005_item_centric_list.json	2005-04-29 03:40:55 UTC (rev 42)
@@ -0,0 +1,428 @@
+{ "format": "2005_MARCH_ITEM_CENTRIC_LIST", 
+  "timestamp": "Thu Apr 14 2005 13:52:41 GMT-0700 (Pacific Standard Time)", 
+  "data": [
+  { "100": { "type": "Uuid", "value": 101 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Short Name" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 102 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Name" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 103 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Summary" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 104 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Body" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 105 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Category" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 106 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Userstamp" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 107 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Timestamp" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 108 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Section" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 109 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 110 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Matching Category" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 111 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Matching Item" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 112 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Plugin Name" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 143 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Attribute" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 144 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Category" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 145 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Page" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 146 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Section" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 147 },
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query" }, ],
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 2000 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
+    /* Short Name */   "101": [{ "type": "StringValue", "value": "1. Welcome!" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Welcome to the OpenRecord demo!" }, ],
+    /* Summary    */   "103": [{ "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3000 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
+    /* Short Name */   "101": [{ "type": "StringValue", "value": "2. Books" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Book Lists" }, ],
+    /* Summary    */   "103": [{ "type": "StringValue", "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed." }, ],
+    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 3010 }, { "type": "ForeignUuid", "value": 3020 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3010 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All Books" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3011 }, ],
+    /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a list of all the books in the repository." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3020 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "One Book" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Detail" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3021 }, ],
+    /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3011 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all books" }, ],
+    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 3104 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3021 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for one book" }, ],
+    /* Matching I */   "111": [{ "type": "ForeignUuid", "value": 3205 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3104 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Book" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3205 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "HTTP: The Definitive Guide" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Gourley and Brian Totty" }, ],
+    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "1565925092" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "O'Reilly" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3101 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Author" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3102 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Publisher" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3103 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "ISBN" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3201 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The Transparent Society" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Brin" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Perseus Publishing" }, ],
+    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0738201448" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3202 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The Hobbit" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "J.R.R. Tolkien" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "HarperCollins" }, { "type": "StringValue", "value": "Houghton Mifflin" }, ],
+    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0618002219" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3203 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The Wisdom of Crowds" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "James Surowiecki" }, ],
+    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0385503865" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Doubleday" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 3204 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "Patricia A. McDaniel" }, ],
+    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0814756778" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "NYU Press" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4000 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
+    /* Short Name */   "101": [{ "type": "StringValue", "value": "3. Bug List" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Bugs and Features to Implement" }, ],
+    /* Summary    */   "103": [{ "type": "StringValue", "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long." }, ],
+    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 4010 }, { "type": "ForeignUuid", "value": 4020 }, { "type": "ForeignUuid", "value": 4030 }, { "type": "ForeignUuid", "value": 4040 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4010 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All Features" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4011 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4020 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All Bugs" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4021 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4030 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs and Features" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4031 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4040 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4041 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4011 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all features" }, ],
+    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4102 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4021 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all bugs" }, ],
+    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4101 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4031 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all closed items" }, ],
+    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4103 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4041 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all closed bugs" }, ],
+    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4102 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Feature" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4101 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Bug" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4103 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Closed Tasks" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4201 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The browser's back button doesn't work after you click from page to page in the navbar." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4202 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4203 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4204 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "If an item has an attribute value with some HTML in it, like '&lt;cite&gt;', we incorrectly render it like '& lt;cite& gt;' instead of '&lt;cite&gt;'" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4205 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &lt; and &gt; and double-quotes" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4302 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, { "type": "ForeignUuid", "value": 4103 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible for a text string to contain a reference to an item" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4304 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible to assign items to categories -- allow for entering reference-values, not just string-values" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4305 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Allow for entering number-values, not just string-values" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4306 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Have table mode show multi-valued attributes" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4307 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "When you assign a value to an item, mark it with a timestamp" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4308 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Clean up all the code that assumes single-valued attributes -- search for '[0]'" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4309 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to create new pages" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4310 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to add a new section to a page" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4311 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Observable queries: all items, limited to a requested subset based on kind and category (e.g. 'All fiction books')" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4312 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Observable queries: limit results to just a requested subset of the attributes (e.g. just the names of the books)" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4313 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to edit the query of a section" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4314 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible to add new attributes to a table view" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4315 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4316 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4317 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Support for reference-values as well as string-values" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4318 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Write unit tests using jsunit" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4319 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Try to write a unit test that calls jslint" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4320 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, have controls to optionally show more detail" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4321 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc." }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4322 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, be able to group by category" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4323 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Table' plugin, be able to group by category" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4324 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to edit in outline mode" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 4325 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Set up a subversion server and have the OpenRecord code publicly available" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5000 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
+    /* Short Name */   "101": [{ "type": "StringValue", "value": "4. Charities" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Charities" }, ],
+    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 5010 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5010 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All Charities" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Bar Chart" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 5011 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5011 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all charities" }, ],
+    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 5101 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5101 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Charity" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5102 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "2003 Expenses (in $US million)" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5201 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The Global Fund for Women" }, ],
+    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 8.2 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5202 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Pathfinder International" }, ],
+    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 44.9 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5203 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The Global Fund to Fight AIDS, TB, and Malaria" }, ],
+    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 64.7 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5204 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The Gumption Memo" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "Brian Skinner" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Kinkos" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5205 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Deceit and Denial" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "Gerald Markowitz and David Rosner" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "University of California" }, ],
+    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0520240634" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5207 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5208 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 5209 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Make view.display() *not* re-create all the HTML every time" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 6000 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
+    /* Short Name */   "101": [{ "type": "StringValue", "value": "5. All Items" }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All Items" }, ],
+    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 6010 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 6010 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "All Items" }, ],
+    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
+    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 6011 }, ],
+  },
+  { "100": { "type": "Uuid", "value": 6011 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all items" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 6012 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "JavaScript: The Definitive Guide" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Flanagan" }, ],
+    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "O'Reilly" }, ],
+    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0596000480" }, ],
+  },
+  { "100": { "type": "Uuid", "value": 6013 },
+    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
+    /* Name       */   "102": [{ "type": "StringValue", "value": "The Two Towers" }, ],
+    /* Author     */   "3101": [{ "type": "StringValue", "value": "J.R.R. Tolkien" }, ],
+  }
+]}

Modified: trunk/source/model/BigLumpVirtualServer.js
===================================================================
--- trunk/source/model/BigLumpVirtualServer.js	2005-04-28 21:12:36 UTC (rev 41)
+++ trunk/source/model/BigLumpVirtualServer.js	2005-04-29 03:40:55 UTC (rev 42)
@@ -51,7 +51,7 @@
 BigLumpVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
 
 BigLumpVirtualServer.JSON_MEMBER_TYPE = "type";
-BigLumpVirtualServer.JSON_MEMBER_DATA = "value";
+BigLumpVirtualServer.JSON_MEMBER_VALUE = "value";
 BigLumpVirtualServer.JSON_TYPE_STRING_VALUE = "StringValue";
 BigLumpVirtualServer.JSON_TYPE_UUID = "Uuid";
 BigLumpVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
@@ -80,28 +80,29 @@
  * @scope    public instance constructor
  * @param    inJsonString    A JSON string literal representing the world of items. 
  */
-BigLumpVirtualServer.prototype = new StubBackingStore();  // makes BigLumpVirtualServer be a subclass of StubBackingStore
+BigLumpVirtualServer.prototype = new StubVirtualServer();  // makes BigLumpVirtualServer be a subclass of StubVirtualServer
 function BigLumpVirtualServer(inJsonString) {
   this.__myDehydratedWorld = inJsonString;
 }
 
 
-// -------------------------------------------------------------------
-// Private Methods
-// -------------------------------------------------------------------
-
 /**
- * Overrides the superclass method.  The BigLumpVirtualServer 
- * does not create axiomatic items from scratch, but instead loads all
- * the saved items, including the axiomatic items.
+ * Initializes the instance variables for a newly created BigLumpVirtualServer,
+ * and does the initial loading of at least the axiomatic items.
  *
- * @scope    private instance method
+ * @scope    public instance method
+ * @param    inWorld    The world that we provide data for. 
  */
-BigLumpVirtualServer.prototype.__loadAxiomaticItems = function () {
+BigLumpVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
+  this.__initialize(inWorld);
   this.__loadWorldFromJsonString(this.__myDehydratedWorld);
 };
-  
-  
+
+
+// -------------------------------------------------------------------
+// Private Methods
+// -------------------------------------------------------------------
+
 /**
  * Loads a world of items from a dehydrated JSON string.
  *
@@ -141,55 +142,69 @@
  * @param    inListOfItems    A JSON list of dehydrated items. 
  */
 BigLumpVirtualServer.prototype.__loadWorldFromOld2005MarchFormatList = function (inListOfItems) {
-  var listOfItems = inListOfItems;
+  var listOfDehydratedItems = inListOfItems;
   var uuid;
   var item;
   
   // Have the StubBackingStore load the axiomatic items, because it will
   // correctly set the creator of those items to be the axiomatic user.
-  this.__loadAxiomaticItems();
+  var listOfAxiomaticRecords = this.__loadAxiomaticItems();
   
+  var hashTableOfAxiomaticItemsKeyedByUuid = {};
+  for (var key in listOfAxiomaticRecords) {
+    var record = listOfAxiomaticRecords[key];
+    if (record instanceof Item) {
+      hashTableOfAxiomaticItemsKeyedByUuid[record._getUuid()] = record;
+    }
+  }
+  
+  this.__myWorld.beginTransaction();
   var guestUser = this.newUser("Guest", null);
   this.__myCurrentUser = guestUser;
-    
-  for (var listKey in listOfItems) {
-    var dehydratedItem = listOfItems[listKey];
+  
+  for (var listKey in listOfDehydratedItems) {
+    var dehydratedItem = listOfDehydratedItems[listKey];
     var dehydratedUuid = dehydratedItem[World.UUID_FOR_ATTRIBUTE_UUID];
-    uuid = dehydratedUuid[BigLumpVirtualServer.JSON_MEMBER_DATA];
-    item = this.__getItemFromUuidOrCreateNewItem(uuid);
-    for (var propertyKey in dehydratedItem) {
-      if (propertyKey != World.UUID_FOR_ATTRIBUTE_UUID) { 
-        var propertyValue = dehydratedItem[propertyKey];
-        var attributeUuid = propertyKey;
-        Util.assert(Util.isArray(propertyValue));
-        for (var valueKey in propertyValue) {
-          var valueObject = propertyValue[valueKey];
-          var valueType = valueObject[BigLumpVirtualServer.JSON_MEMBER_TYPE];
-          var valueValue = valueObject[BigLumpVirtualServer.JSON_MEMBER_DATA];
-          var finalValue = null;
-          switch (valueType) {
-            case BigLumpVirtualServer.JSON_TYPE_FOREIGN_UUID:
-              finalValue = this.__getItemFromUuidOrCreateNewItem(valueValue);
-              break;
-            case BigLumpVirtualServer.JSON_TYPE_STRING_VALUE:
-              finalValue = valueValue;
-              break;
-            case BigLumpVirtualServer.JSON_TYPE_NUMBER_VALUE:
-              finalValue = valueValue;
-              break;
+    uuid = dehydratedUuid[BigLumpVirtualServer.JSON_MEMBER_VALUE];
+    var axiomaticItem = hashTableOfAxiomaticItemsKeyedByUuid[uuid];
+    if (!axiomaticItem) {
+      item = this.__getItemFromUuidOrCreateNewItem(uuid);
+      Util.assert(item instanceof Item);
+      for (var propertyKey in dehydratedItem) {
+        if (propertyKey != World.UUID_FOR_ATTRIBUTE_UUID) { 
+          var propertyValue = dehydratedItem[propertyKey];
+          var attributeUuid = parseInt(propertyKey);
+          Util.assert(Util.isArray(propertyValue));
+          for (var valueKey in propertyValue) {
+            var valueObject = propertyValue[valueKey];
+            var valueType = valueObject[BigLumpVirtualServer.JSON_MEMBER_TYPE];
+            var valueValue = valueObject[BigLumpVirtualServer.JSON_MEMBER_VALUE];
+            var finalValue = null;
+            switch (valueType) {
+              case BigLumpVirtualServer.JSON_TYPE_FOREIGN_UUID:
+                finalValue = this.__getItemFromUuidOrCreateNewItem(valueValue);
+                break;
+              case BigLumpVirtualServer.JSON_TYPE_STRING_VALUE:
+                finalValue = valueValue;
+                break;
+              case BigLumpVirtualServer.JSON_TYPE_NUMBER_VALUE:
+                finalValue = valueValue;
+                break;
+            }
+            var attribute = this.getItemFromUuid(attributeUuid);
+            item.addAttributeValue(attribute, finalValue);
           }
-          var attribute = this.__getItemFromUuidOrCreateNewItem(attributeUuid);
-          item.addAttributeValue(attribute, finalValue);
         }
       }
     }
   }
-  
+
   for (var key in this.__myChronologicalListOfNewlyCreatedRecords) {
     var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
     this.__myChronologicalListOfRecords.push(newRecord);
   }
   this.__myChronologicalListOfNewlyCreatedRecords = [];
+  this.__myWorld.endTransaction();
   this.__myCurrentUser = null;
 };
 
@@ -295,9 +310,9 @@
       if (previousValueUuid) {
         previousValue = this.__getValueFromUuidOrBootstrapValue(previousValueUuid);
       }
-      var pickledData = dehydratedValue[BigLumpVirtualServer.JSON_MEMBER_DATA];
+      var pickledData = dehydratedValue[BigLumpVirtualServer.JSON_MEMBER_VALUE];
       var dataType = pickledData[BigLumpVirtualServer.JSON_MEMBER_TYPE];
-      var rawData = pickledData[BigLumpVirtualServer.JSON_MEMBER_DATA];
+      var rawData = pickledData[BigLumpVirtualServer.JSON_MEMBER_VALUE];
       var finalData = null;
       switch (dataType) {
         case BigLumpVirtualServer.JSON_TYPE_RELATED_UUID:
@@ -397,7 +412,7 @@
         valueString = contentData._getUuid();
       }
       pickleString = '{ "' + BigLumpVirtualServer.JSON_MEMBER_TYPE + '": "' + typeString + '", "' + BigLumpVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ' }';
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_DATA + '": ' + pickleString + ',\n');
+      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_VALUE + '": ' + pickleString + ',\n');
     }
     listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '",\n');
     listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '"}\n');
@@ -428,7 +443,13 @@
  * @scope    public instance method
  * @return   The list of changes made. 
  */
-BigLumpVirtualServer.saveChangesToServer = function () {
+BigLumpVirtualServer.prototype.saveChangesToServer = function () {
+  var listOfChangesMade;
+  if (this.__myChronologicalListOfNewlyCreatedRecords.length === 0) {
+    listOfChangesMade = [];
+    return listOfChangesMade;
+  }
+  
   var saveChanges = false;
   if (window.location) {
     if (window.location.protocol == "http:") {
@@ -451,7 +472,7 @@
     this.__myXMLHttpRequestObject.send(this.__getJsonStringRepresentingEntireWorld());
   }
   
-  var listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
+  listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
   this.__myChronologicalListOfNewlyCreatedRecords = [];
   return listOfChangesMade;
 };

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-04-28 21:12:36 UTC (rev 41)
+++ trunk/source/model/ModelTest.js	2005-04-29 03:40:55 UTC (rev 42)
@@ -480,6 +480,15 @@
   world.logout();
 }
 
+function testBigLumpVirtualServer() {
+  var fileName = "2005_item_centric_list.json";
+  var url = "../../current/trunk/source/model/" + fileName;
+  var fileContentString = Util.getStringContentsOfFileAtURL(url);
+  var bigLumpVirtualServer = new BigLumpVirtualServer(fileContentString);
+  var world = new World(bigLumpVirtualServer);
+}
+
+
 function tearDown() {
   ModelTestVars = null;
 }

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-04-28 21:12:36 UTC (rev 41)
+++ trunk/source/model/StubVirtualServer.js	2005-04-29 03:40:55 UTC (rev 42)
@@ -511,6 +511,7 @@
   var item;
   var value;
   
+  this.__myWorld.beginTransaction();
   var axiomaticUser = this.newUser("Amy ex machina", "null");
   this.__myCurrentUser = axiomaticUser;
   
@@ -567,8 +568,16 @@
     item.addAttributeValue(attributeCalledCategory, categoryCalledCategory);
   }
   
+  this.__myCurrentUser = null;
+
+  for (var key in this.__myChronologicalListOfNewlyCreatedRecords) {
+    var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
+    this.__myChronologicalListOfRecords.push(newRecord);
+  }
+  var listOfNewlyCreatedRecords = this.__myChronologicalListOfNewlyCreatedRecords;
   this.__myChronologicalListOfNewlyCreatedRecords = [];
-  this.__myCurrentUser = null;
+  this.__myWorld.endTransaction();
+  return listOfNewlyCreatedRecords;
 };
 
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-04-28 21:12:36 UTC (rev 41)
+++ trunk/source/model/World.js	2005-04-29 03:40:55 UTC (rev 42)
@@ -150,10 +150,6 @@
   //   This is just a stub method for now.  Once we start implementing
   //   support for transactions we'll have to put some real code here.
   if (this.__myCountOfNestedTransactions === 0) {
-    // PENDING: 
-    // World.js should not depend on RootView.js like this.
-    // Instead, the view code should hand the world a "status display function"
-    // that the world can use to display status info.
     var listOfChangesMade = this.__myVirtualServer.saveChangesToServer();
     if (listOfChangesMade.length > 0) {
       Util.displayStatusBlurb(listOfChangesMade.length + " changes made");



From skinner at sheep.berlios.de  Sat Apr 30 02:33:50 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 30 Apr 2005 02:33:50 +0200
Subject: [openrecord-svn] r43 - trunk/source/model
Message-ID: <200504300033.j3U0XoxF016532@sheep.berlios.de>

Author: skinner
Date: 2005-04-30 02:33:47 +0200 (Sat, 30 Apr 2005)
New Revision: 43

Added:
   trunk/source/model/save_lump.php
   trunk/source/model/test_data_2005_april_chronological_lump.json
   trunk/source/model/test_data_2005_march_item_centric_list.json
Removed:
   trunk/source/model/2005_item_centric_list.json
Modified:
   trunk/source/model/BigLumpVirtualServer.js
   trunk/source/model/Item.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/Value.js
   trunk/source/model/World.js
Log:
More data model unit tests.  More bug fixing.  The new data model can now load files that were saved in the old March format, and the new data model can save files in the new April format.  Next step is to be able to load files in the new April format.

Deleted: trunk/source/model/2005_item_centric_list.json
===================================================================
--- trunk/source/model/2005_item_centric_list.json	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/2005_item_centric_list.json	2005-04-30 00:33:47 UTC (rev 43)
@@ -1,428 +0,0 @@
-{ "format": "2005_MARCH_ITEM_CENTRIC_LIST", 
-  "timestamp": "Thu Apr 14 2005 13:52:41 GMT-0700 (Pacific Standard Time)", 
-  "data": [
-  { "100": { "type": "Uuid", "value": 101 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Short Name" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 102 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Name" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 103 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Summary" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 104 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Body" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 105 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Category" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 106 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Userstamp" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 107 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Timestamp" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 108 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Section" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 109 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 110 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Matching Category" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 111 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Matching Item" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 112 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Plugin Name" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 143 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Attribute" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 144 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Category" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 145 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Page" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 146 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Section" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 147 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 2000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "1. Welcome!" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Welcome to the OpenRecord demo!" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "2. Books" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Book Lists" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed." }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 3010 }, { "type": "ForeignUuid", "value": 3020 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Books" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3011 }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a list of all the books in the repository." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3020 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "One Book" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Detail" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3021 }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all books" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 3104 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3021 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for one book" }, ],
-    /* Matching I */   "111": [{ "type": "ForeignUuid", "value": 3205 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3104 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Book" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3205 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "HTTP: The Definitive Guide" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Gourley and Brian Totty" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "1565925092" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "O'Reilly" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3101 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Author" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3102 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Publisher" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3103 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "ISBN" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3201 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Transparent Society" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Brin" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Perseus Publishing" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0738201448" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3202 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Hobbit" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "J.R.R. Tolkien" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "HarperCollins" }, { "type": "StringValue", "value": "Houghton Mifflin" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0618002219" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3203 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Wisdom of Crowds" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "James Surowiecki" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0385503865" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Doubleday" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3204 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "Patricia A. McDaniel" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0814756778" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "NYU Press" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "3. Bug List" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Bugs and Features to Implement" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long." }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 4010 }, { "type": "ForeignUuid", "value": 4020 }, { "type": "ForeignUuid", "value": 4030 }, { "type": "ForeignUuid", "value": 4040 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Features" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4011 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4020 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Bugs" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4021 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4030 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs and Features" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4031 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4040 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4041 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all features" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4102 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4021 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all bugs" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4101 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4031 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all closed items" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4103 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4041 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all closed bugs" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4102 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Feature" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4101 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Bug" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4103 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Closed Tasks" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4201 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The browser's back button doesn't work after you click from page to page in the navbar." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4202 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4203 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4204 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "If an item has an attribute value with some HTML in it, like '&lt;cite&gt;', we incorrectly render it like '& lt;cite& gt;' instead of '&lt;cite&gt;'" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4205 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &lt; and &gt; and double-quotes" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4302 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, { "type": "ForeignUuid", "value": 4103 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible for a text string to contain a reference to an item" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4304 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible to assign items to categories -- allow for entering reference-values, not just string-values" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4305 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Allow for entering number-values, not just string-values" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4306 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Have table mode show multi-valued attributes" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4307 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "When you assign a value to an item, mark it with a timestamp" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4308 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Clean up all the code that assumes single-valued attributes -- search for '[0]'" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4309 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to create new pages" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4310 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to add a new section to a page" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4311 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Observable queries: all items, limited to a requested subset based on kind and category (e.g. 'All fiction books')" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4312 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Observable queries: limit results to just a requested subset of the attributes (e.g. just the names of the books)" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4313 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to edit the query of a section" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4314 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible to add new attributes to a table view" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4315 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4316 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4317 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Support for reference-values as well as string-values" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4318 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Write unit tests using jsunit" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4319 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Try to write a unit test that calls jslint" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4320 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, have controls to optionally show more detail" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4321 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4322 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, be able to group by category" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4323 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Table' plugin, be able to group by category" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4324 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to edit in outline mode" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4325 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Set up a subversion server and have the OpenRecord code publicly available" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "4. Charities" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Charities" }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 5010 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Charities" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Bar Chart" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 5011 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all charities" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 5101 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5101 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Charity" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5102 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "2003 Expenses (in $US million)" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5201 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Global Fund for Women" }, ],
-    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 8.2 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5202 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Pathfinder International" }, ],
-    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 44.9 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5203 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Global Fund to Fight AIDS, TB, and Malaria" }, ],
-    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 64.7 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5204 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Gumption Memo" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "Brian Skinner" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Kinkos" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5205 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Deceit and Denial" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "Gerald Markowitz and David Rosner" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "University of California" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0520240634" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5207 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5208 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5209 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make view.display() *not* re-create all the HTML every time" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "5. All Items" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Items" }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 6010 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Items" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 6011 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all items" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6012 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "JavaScript: The Definitive Guide" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Flanagan" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "O'Reilly" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0596000480" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6013 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Two Towers" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "J.R.R. Tolkien" }, ],
-  }
-]}

Modified: trunk/source/model/BigLumpVirtualServer.js
===================================================================
--- trunk/source/model/BigLumpVirtualServer.js	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/BigLumpVirtualServer.js	2005-04-30 00:33:47 UTC (rev 43)
@@ -58,7 +58,7 @@
 BigLumpVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
 BigLumpVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
 
-BigLumpVirtualServer.JSON_MEMBER_WUID = "Wuid";
+BigLumpVirtualServer.JSON_MEMBER_WUID = "uuid";
 
 BigLumpVirtualServer.JSON_MEMBER_ITEM_CLASS = "Item";
 BigLumpVirtualServer.JSON_MEMBER_VALUE_CLASS = "Value";
@@ -115,6 +115,7 @@
 BigLumpVirtualServer.prototype.__loadWorldFromJsonString = function (inJsonString) {
   Util.assert(Util.isString(inJsonString));
   var dehydratedWorld = null;
+  
   eval("dehydratedWorld = " + inJsonString + ";");
   Util.assert(Util.isObject(dehydratedWorld));
   
@@ -142,16 +143,36 @@
  * @param    inListOfItems    A JSON list of dehydrated items. 
  */
 BigLumpVirtualServer.prototype.__loadWorldFromOld2005MarchFormatList = function (inListOfItems) {
+
   var listOfDehydratedItems = inListOfItems;
+
+  var axiomaticItem;
+  var dehydratedItem;
+  var dehydratedUuid;
+  var item;
   var uuid;
-  var item;
+  var key;
   
   // Have the StubBackingStore load the axiomatic items, because it will
   // correctly set the creator of those items to be the axiomatic user.
   var listOfAxiomaticRecords = this.__loadAxiomaticItems();
   
+  // PENDING:   This method is slow
+  // 
+  // I did some timing tests on April 29, 2005. 
+  //
+  // Here's the summary:
+  //    15 milliseconds to call eval prior to getting to this method
+  //        called in __loadWorldFromJsonString: eval("dehydratedWorld = " + inJsonString + ";");
+  //   516 milliseconds to call this.__loadAxiomaticItems() before getting here
+  // 5,796 milliseconds for all the code from here to the end of the method
+  //
+  // I'm not sure why it's so slow, but we must be doing something that's
+  // needlessly stupid.  It should be possible to make this 10-times faster.
+  PENDINGstartTimer = new Date();
+  
   var hashTableOfAxiomaticItemsKeyedByUuid = {};
-  for (var key in listOfAxiomaticRecords) {
+  for (key in listOfAxiomaticRecords) {
     var record = listOfAxiomaticRecords[key];
     if (record instanceof Item) {
       hashTableOfAxiomaticItemsKeyedByUuid[record._getUuid()] = record;
@@ -162,14 +183,35 @@
   var guestUser = this.newUser("Guest", null);
   this.__myCurrentUser = guestUser;
   
-  for (var listKey in listOfDehydratedItems) {
-    var dehydratedItem = listOfDehydratedItems[listKey];
-    var dehydratedUuid = dehydratedItem[World.UUID_FOR_ATTRIBUTE_UUID];
+  // First, go through the whole list of dehydrated items.  Find all 
+  // the UUIDs for all the items, and make Item objects for all of them.
+  // After we've done this step, we'll know the next available UUID,
+  // so we can start assigning new UUIDs to the attribute values.
+  for (key in listOfDehydratedItems) {
+    dehydratedItem = listOfDehydratedItems[key];
+    dehydratedUuid = dehydratedItem[World.UUID_FOR_ATTRIBUTE_UUID];
     uuid = dehydratedUuid[BigLumpVirtualServer.JSON_MEMBER_VALUE];
-    var axiomaticItem = hashTableOfAxiomaticItemsKeyedByUuid[uuid];
+    axiomaticItem = hashTableOfAxiomaticItemsKeyedByUuid[uuid];
     if (!axiomaticItem) {
+      // We only need to rehydrate the non-axiomatic items.
+      // We rely on the StubBackingStore to have loaded the axiomatic items.
       item = this.__getItemFromUuidOrCreateNewItem(uuid);
       Util.assert(item instanceof Item);
+    }
+  }
+  
+  // We already have Item objects for all the items we're going to
+  // rehydrate.  Now we can add attributes to them.
+  for (key in listOfDehydratedItems) {
+    dehydratedItem = listOfDehydratedItems[key];
+    dehydratedUuid = dehydratedItem[World.UUID_FOR_ATTRIBUTE_UUID];
+    uuid = dehydratedUuid[BigLumpVirtualServer.JSON_MEMBER_VALUE];
+    axiomaticItem = hashTableOfAxiomaticItemsKeyedByUuid[uuid];
+    if (!axiomaticItem) {
+      // We only need to rehydrate the non-axiomatic items.
+      // We rely on the StubBackingStore to have loaded the axiomatic items.
+      item = this.__getItemFromUuidOrCreateNewItem(uuid);
+      Util.assert(item instanceof Item);
       for (var propertyKey in dehydratedItem) {
         if (propertyKey != World.UUID_FOR_ATTRIBUTE_UUID) { 
           var propertyValue = dehydratedItem[propertyKey];
@@ -199,13 +241,18 @@
     }
   }
 
-  for (var key in this.__myChronologicalListOfNewlyCreatedRecords) {
+  for (key in this.__myChronologicalListOfNewlyCreatedRecords) {
     var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
     this.__myChronologicalListOfRecords.push(newRecord);
   }
   this.__myChronologicalListOfNewlyCreatedRecords = [];
   this.__myWorld.endTransaction();
   this.__myCurrentUser = null;
+
+  PENDINGstopTimer = new Date();
+  PENDINGelapsedMS = PENDINGstopTimer.valueOf() - PENDINGstartTimer.valueOf();
+  // alert("__loadWorldFromOld2005MarchFormatList took " + PENDINGelapsedMS + " milliseconds");
+
 };
 
 
@@ -340,6 +387,25 @@
   
 
 /**
+ * Given a string, returns a copy of the string that is less than
+ * 25 characters long.
+ *
+ * @scope    public instance method
+ * @param    A string that may need truncating.
+ * @return   A string that is. 
+ */
+BigLumpVirtualServer.prototype.truncateString = function (inString) {
+  var maxLength = 30;
+  var ellipsis = "...";
+  if (inString.length > maxLength) {
+    return (inString.substring(0, (maxLength - ellipsis.length)) + ellipsis);
+  } else {
+    return inString;
+  }
+};
+
+
+/**
  * Returns a huge string, containing a JavaScript "object literal"
  * representation of the entire world.
  *
@@ -351,6 +417,9 @@
   var listOfStrings = [];
   var key;
   
+  var itemDisplayName;
+  var itemDisplayNameSubstring;
+  
   listOfStrings.push('// Repository dump, in JSON format' + '\n');
   listOfStrings.push('{ ');
   listOfStrings.push('"' + BigLumpVirtualServer.JSON_MEMBER_FORMAT + '": "' + BigLumpVirtualServer.JSON_FORMAT_2005_APRIL + '", ' + '\n');
@@ -359,41 +428,50 @@
   var firstEntry = true;
   for (key in this.__myChronologicalListOfRecords) {
     var record = this.__myChronologicalListOfRecords[key];
-    if (!firstEntry) {
+    if (firstEntry) {
+      firstEntry = false;
+    } else {
       listOfStrings.push(',\n');
+      listOfStrings.push('  // -----------------------------------------------------------------------\n');
     }
     if (record instanceof Item) {
       var item = record;
       listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_WUID + '": "' + item._getUuid() + '",\n');
+      itemDisplayNameSubstring = this.truncateString(item.getDisplayName());
+      listOfStrings.push('                             // ' + itemDisplayNameSubstring + '\n');
+      listOfStrings.push('           "' + BigLumpVirtualServer.JSON_MEMBER_WUID + '": "' + item._getUuid() + '",\n');
     }
     if (record instanceof Vote) {
       var vote = record;
-      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{');
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ENTRY + '": "' + vote.getEntry()._getUuid() + '",\n');
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '",\n');
+      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push('      "' + BigLumpVirtualServer.JSON_MEMBER_ENTRY + '": "' + vote.getEntry()._getUuid() + '",\n');
+      listOfStrings.push('      "' + BigLumpVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '",\n');
     }
     if (record instanceof Ordinal) {
       var ordinal = record;
-      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{');
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ENTRY + '": "' + ordinal.getEntry()._getUuid() + '",\n');
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '",\n');
+      listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push('      "' + BigLumpVirtualServer.JSON_MEMBER_ENTRY + '": "' + ordinal.getEntry()._getUuid() + '",\n');
+      listOfStrings.push('      "' + BigLumpVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '",\n');
     }
     if (record instanceof Value) {
       var value = record;
       listOfStrings.push('  { "' + BigLumpVirtualServer.JSON_MEMBER_VALUE_CLASS + '": ' + '{');
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_WUID + '": "' + value._getUuid() + '",\n');
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ITEM + '": "' + value.getItem()._getUuid() + '",\n');
+      var valueDisplayNameSubstring = this.truncateString(value.getDisplayString());
+      listOfStrings.push('                             // ' + valueDisplayNameSubstring + '\n');
+      listOfStrings.push('           "' + BigLumpVirtualServer.JSON_MEMBER_WUID + '": "' + value._getUuid() + '",\n');
       var attribute = value.getAttribute();
       if (attribute) {
         var attributeName = attribute.getDisplayName();
-        var attributeNameSubstring = (attributeName + '          ').substring(0, 10);
-        listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
-        listOfStrings.push(' /* ' + attributeNameSubstring + ' */ \n');
+        listOfStrings.push('      "' + BigLumpVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
+        var attributeNameSubstring = this.truncateString(attributeName);
+        listOfStrings.push('                // ' + attributeNameSubstring + '\n');
       }
+      listOfStrings.push('           "' + BigLumpVirtualServer.JSON_MEMBER_ITEM + '": "' + value.getItem()._getUuid() + '",');
+      itemDisplayNameSubstring = this.truncateString(value.getItem().getDisplayName());
+      listOfStrings.push('                // ' + itemDisplayNameSubstring + '\n');
       var previousValue = value.getPreviousValue();
       if (previousValue) {
-        listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousValue._getUuid() + '",\n');
+        listOfStrings.push('          "' + BigLumpVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousValue._getUuid() + '",\n');
       }
       var contentData = value.getContentData();
       var pickleString = "";
@@ -409,13 +487,17 @@
       }
       if (contentData instanceof Item) {
         typeString = BigLumpVirtualServer.JSON_TYPE_RELATED_UUID;
-        valueString = contentData._getUuid();
+        valueString = '"' + contentData._getUuid() + '"';
       }
       pickleString = '{ "' + BigLumpVirtualServer.JSON_MEMBER_TYPE + '": "' + typeString + '", "' + BigLumpVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ' }';
-      listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_VALUE + '": ' + pickleString + ',\n');
+      listOfStrings.push('          "' + BigLumpVirtualServer.JSON_MEMBER_VALUE + '": ' + pickleString + ',\n');
     }
-    listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '",\n');
-    listOfStrings.push('    "' + BigLumpVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '"}\n');
+    Util.assert(record.getUserstamp() !== null);
+    listOfStrings.push('      "' + BigLumpVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '",');
+    var userDisplayName = record.getUserstamp().getDisplayName();
+    var userDisplayNameSubstring = this.truncateString(userDisplayName);
+    listOfStrings.push('                // by (' + userDisplayNameSubstring + ')\n');
+    listOfStrings.push('      "' + BigLumpVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '" }\n');
     listOfStrings.push('  }');
   }
   listOfStrings.push("  ], \n");
@@ -424,7 +506,9 @@
   firstEntry = true;
   for (key in this.__myListOfUsers) {
     var user = this.__myListOfUsers[key];
-    if (!firstEntry) {
+    if (firstEntry) {
+      firstEntry = false;
+    } else {
       listOfStrings.push(', ');
     }
     listOfStrings.push('"' + user._getUuid() + '"');
@@ -441,11 +525,12 @@
  * changes.
  *
  * @scope    public instance method
+ * @param    inForceSave    Optional. Forces a save if set to true. 
  * @return   The list of changes made. 
  */
-BigLumpVirtualServer.prototype.saveChangesToServer = function () {
+BigLumpVirtualServer.prototype.saveChangesToServer = function (inForceSave) {
   var listOfChangesMade;
-  if (this.__myChronologicalListOfNewlyCreatedRecords.length === 0) {
+  if (!inForceSave && this.__myChronologicalListOfNewlyCreatedRecords.length === 0) {
     listOfChangesMade = [];
     return listOfChangesMade;
   }
@@ -465,10 +550,13 @@
     this.__myChronologicalListOfRecords.push(newRecord);
   }
   
+  this.__myXMLHttpRequestObject = this.__newXMLHttpRequestObject();
   if (saveChanges) {
-    var url = "save_changes.php";
+    var url = "save_lump.php";
+    // var url = "http://localhost:8080/openrecord/demo/current/trunk/source/model/" + "save_lump.php";
+    // var url = "http://localhost:8080/openrecord/demo/current/trunk/source/" + "save_changes.php";
     this.__myXMLHttpRequestObject.open("POST", url, true);
-    this.__myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/xml");
+    this.__myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
     this.__myXMLHttpRequestObject.send(this.__getJsonStringRepresentingEntireWorld());
   }
   
@@ -496,11 +584,14 @@
   if (newXMLHttpRequestObject) {
     var self = this;
     newXMLHttpRequestObject.onreadystatechange = function() {
-      window.alert("onreadystatechange:\n" +
-        "readyState: " + self.__myXMLHttpRequestObject.readyState + "\n" +
-        "status: " + self.__myXMLHttpRequestObject.status + "\n" +
-        "statusText: " + self.__myXMLHttpRequestObject.statusText + "\n" +
-        "responseText: " + self.__myXMLHttpRequestObject.responseText + "\n");
+      var statusText = self.__myXMLHttpRequestObject.statusText;
+      if (statusText != "OK") {
+        window.alert("onreadystatechange:\n" +
+          "readyState: " + self.__myXMLHttpRequestObject.readyState + "\n" +
+          "status: " + self.__myXMLHttpRequestObject.status + "\n" +
+          "statusText: " + self.__myXMLHttpRequestObject.statusText + "\n" +
+          "responseText: " + self.__myXMLHttpRequestObject.responseText + "\n");
+      }
     };
   }
   return newXMLHttpRequestObject;

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/Item.js	2005-04-30 00:33:47 UTC (rev 43)
@@ -112,12 +112,12 @@
  * list of values.
  *
  * @scope    public instance method
- * @param    inAttribute    The attribute to associate the value with. 
  * @param    inContentData    The content data to initialize the value to.
  * @return   A value object.
  */
 Item.prototype.addValue = function (inContentData) {
-  return this.addAttributeValue(null, inContentData);
+  var attributeCalledUnfiled = this.getWorld().getAttributeCalledUnfiled();
+  return this.addAttributeValue(attributeCalledUnfiled, inContentData);
 };
 
 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/ModelTest.js	2005-04-30 00:33:47 UTC (rev 43)
@@ -126,9 +126,10 @@
   
   var tZero = new Date();
   
-  
   // operations done by Jane
   var userJane = world.newUser("Jane Doe", janesPassword);
+  assertTrue('The user Jane created the user Jane', (userJane.getUserstamp() == userJane));
+   
   world.login(userJane, janesPassword);
 
   var characterAttribute = world.newAttribute("Characters");
@@ -481,11 +482,32 @@
 }
 
 function testBigLumpVirtualServer() {
-  var fileName = "2005_item_centric_list.json";
+  var fileName = "test_data_2005_march_item_centric_list.json";
   var url = "../../current/trunk/source/model/" + fileName;
   var fileContentString = Util.getStringContentsOfFileAtURL(url);
+  
+  // Create a World and a BigLumpVirtualServer, and have the 
+  // BigLumpVirtualServer rehydrate all the dehydrated items 
+  // contained in the fileContentString.  This tests whether
+  // the BigLumpVirtualServer bombs out when it tries to read
+  // the data from a 2005_MARCH_ITEM_CENTRIC_LIST
   var bigLumpVirtualServer = new BigLumpVirtualServer(fileContentString);
   var world = new World(bigLumpVirtualServer);
+  
+  // See if the BigLumpVirtualServer can save items to a
+  // string containing dehydrated items in the 
+  // format of a 2005_APRIL_CHRONOLOGICAL_LIST
+  var dehydratedWorld = bigLumpVirtualServer.__getJsonStringRepresentingEntireWorld();
+  
+  // See if the BigLumpVirtualServer can rehydrate all the
+  // dehydrated items from an 2005_APRIL_CHRONOLOGICAL_LIST
+  /*
+  PENDING:
+  var secondBigLumpVirtualServer = new BigLumpVirtualServer(dehydratedWorld);
+  var secondWorld = new World(secondBigLumpVirtualServer);
+  */
+  
+  // bigLumpVirtualServer.saveChangesToServer(true);
 }
 
 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/StubVirtualServer.js	2005-04-30 00:33:47 UTC (rev 43)
@@ -175,9 +175,15 @@
  * @return   A newly created item representing a user.
  */
 StubVirtualServer.prototype.newUser = function (inName, inAuthentication, inObserver) {
-  var newUser = this.newItem(inName, inObserver);
+  var newUser = this.newItem(null, inObserver);
+  newUser.__myCreationUserstamp = newUser;
   this.__myListOfUsers.push(newUser);
   this.__myHashTableOfUserAuthenticationInfo[newUser.getUniqueKeyString()] = inAuthentication;
+  if (inName) { 
+    var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
+    var value = newUser.addAttributeValue(attributeCalledName, inName);
+    value.__myCreationUserstamp = newUser;
+  }
   return newUser;
 };
 
@@ -512,7 +518,10 @@
   var value;
   
   this.__myWorld.beginTransaction();
-  var axiomaticUser = this.newUser("Amy ex machina", "null");
+  var axiomaticUser = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_USER_AMY);
+  axiomaticUser.__myCreationUserstamp = axiomaticUser;
+  this.__myListOfUsers.push(axiomaticUser);
+  this.__myHashTableOfUserAuthenticationInfo[axiomaticUser.getUniqueKeyString()] = null;
   this.__myCurrentUser = axiomaticUser;
   
   // associate display names with the UUIDs of all the attributes
@@ -529,6 +538,7 @@
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = "Matching Item";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_PLUGIN_NAME] = "Plugin Name";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED] = "Unfiled Value";
 
   // create all the Item objects for the attributes
   for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
@@ -548,9 +558,12 @@
     this.__getItemFromUuidOrCreateNewItem(uuid);
   }
  
-  // set the display names of all the attributes, and put them in the category called "Attribute"
+  // set the name of the axiomaticUser
+  var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
+  axiomaticUser.addAttributeValue(attributeCalledName, "Amy ex machina");
+  
+  // set the names of all the attributes, and put them in the category called "Attribute"
   var categoryCalledAttribute = this.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
-  var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
   var attributeCalledCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
   for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
     item = this.getItemFromUuid(uuid);
@@ -559,7 +572,7 @@
     item.addAttributeValue(attributeCalledCategory, categoryCalledAttribute);
   }
   
-  // set the display names of all the categories, and put them in the category called "Category"
+  // set the names of all the categories, and put them in the category called "Category"
   var categoryCalledCategory = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_CATEGORY);
   for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
     item = this.getItemFromUuid(uuid);

Modified: trunk/source/model/Value.js
===================================================================
--- trunk/source/model/Value.js	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/Value.js	2005-04-30 00:33:47 UTC (rev 43)
@@ -196,7 +196,7 @@
   if (this.__myContentData instanceof Item) {
     returnString += this.__myContentData.getDisplayName();
   } else {
-    returnString += this.__myContentData;
+    returnString += "" + this.__myContentData;
   }
   return returnString;
 };

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/World.js	2005-04-30 00:33:47 UTC (rev 43)
@@ -45,7 +45,7 @@
 World.RETRIEVAL_FILTER_DEMOCRATIC = "RETRIEVAL_FILTER_DEMOCRATIC";
 World.RETRIEVAL_FILTER_UNABRIDGED = "RETRIEVAL_FILTER_UNABRIDGED";
 
-World.UUID_FOR_USER_AMY = 1;
+World.UUID_FOR_USER_AMY = 100;
 
 World.UUID_FOR_ATTRIBUTE_UUID = 100;
 World.UUID_FOR_ATTRIBUTE_NAME = 102;
@@ -59,6 +59,7 @@
 World.UUID_FOR_ATTRIBUTE_QUERY = 109;
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = 110;
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = 111;
+World.UUID_FOR_ATTRIBUTE_UNFILED = 112;
 
 World.UUID_FOR_CATEGORY_BOOK = 141;      // here as an example only
 World.UUID_FOR_CATEGORY_MOVIE = 142;     // here as an example only
@@ -108,6 +109,7 @@
   this.__myAttributeCalledQuery = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
   this.__myAttributeCalledQueryMatchingCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
   this.__myAttributeCalledQueryMatchingItem = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  this.__myAttributeCalledUnfiled = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
 
   // load the axiomatic categories
   this.__myCategoryCalledAttribute = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
@@ -329,7 +331,11 @@
   return this.__myAttributeCalledQueryMatchingItem;
 };
 
+World.prototype.getAttributeCalledUnfiled = function () {
+  return this.__myAttributeCalledUnfiled;
+};
 
+
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic categories
 // -------------------------------------------------------------------

Added: trunk/source/model/save_lump.php
===================================================================
--- trunk/source/model/save_lump.php	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/save_lump.php	2005-04-30 00:33:47 UTC (rev 43)
@@ -0,0 +1,24 @@
+<?php
+$datastoreFilename = "2005_april_chronological_lump.json";
+$contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
+/* 
+$contentToWrite = "start " . $_POST["foo"] . " middle " . $_POST["foo"] . " end";
+*/
+if (is_writable($datastoreFilename)) {
+  echo "$datastoreFilename is writable.";
+  if ($fileHandle = fopen($datastoreFilename, "wb")) {
+    if (fwrite($fileHandle, $contentToWrite)) {
+      echo "Wrote to file ($datastoreFilename)";
+    } else {
+      echo "Unable to write to file ($datastoreFilename)";
+      exit;
+    }
+  } else {
+    echo "Unable to open file: $datastoreFilename";
+    exit("Unable to open file."); 
+  }
+} else {
+  echo "The file $datastoreFilename is not writable.";
+}
+?>
+

Added: trunk/source/model/test_data_2005_april_chronological_lump.json
===================================================================
--- trunk/source/model/test_data_2005_april_chronological_lump.json	2005-04-29 03:40:55 UTC (rev 42)
+++ trunk/source/model/test_data_2005_april_chronological_lump.json	2005-04-30 00:33:47 UTC (rev 43)
@@ -0,0 +1,2852 @@
+// Repository dump, in JSON format
+{ "format": "2005_APRIL_CHRONOLOGICAL_LIST", 
+  "timestamp": "Fri Apr 29 2005 17:04:23 GMT-0700 (Pacific Standard Time)", 
+  "data": [
+  { "Item": {                             // Amy ex machina
+           "uuid": "100",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Name
+           "uuid": "102",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Short Name
+           "uuid": "101",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Summary
+           "uuid": "103",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Body
+           "uuid": "104",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Category
+           "uuid": "105",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Section
+           "uuid": "108",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query
+           "uuid": "109",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Matching Category
+           "uuid": "110",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Matching Item
+           "uuid": "111",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Unfiled Value
+           "uuid": "112",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Attribute
+           "uuid": "143",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Category
+           "uuid": "144",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Page
+           "uuid": "145",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Section
+           "uuid": "146",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query
+           "uuid": "147",
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Amy ex machina
+           "uuid": "1471",
+      "attribute": "102",                // Name
+           "item": "100",                // Amy ex machina
+          "value": { "type": "StringValue", "value": "Amy ex machina" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Name
+           "uuid": "1472",
+      "attribute": "102",                // Name
+           "item": "102",                // Name
+          "value": { "type": "StringValue", "value": "Name" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1473",
+      "attribute": "105",                // Category
+           "item": "102",                // Name
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Short Name
+           "uuid": "1474",
+      "attribute": "102",                // Name
+           "item": "101",                // Short Name
+          "value": { "type": "StringValue", "value": "Short Name" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457328" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1475",
+      "attribute": "105",                // Category
+           "item": "101",                // Short Name
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Summary
+           "uuid": "1476",
+      "attribute": "102",                // Name
+           "item": "103",                // Summary
+          "value": { "type": "StringValue", "value": "Summary" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1477",
+      "attribute": "105",                // Category
+           "item": "103",                // Summary
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Body
+           "uuid": "1478",
+      "attribute": "102",                // Name
+           "item": "104",                // Body
+          "value": { "type": "StringValue", "value": "Body" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457375" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1479",
+      "attribute": "105",                // Category
+           "item": "104",                // Body
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "1480",
+      "attribute": "102",                // Name
+           "item": "105",                // Category
+          "value": { "type": "StringValue", "value": "Category" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1481",
+      "attribute": "105",                // Category
+           "item": "105",                // Category
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "1482",
+      "attribute": "102",                // Name
+           "item": "108",                // Section
+          "value": { "type": "StringValue", "value": "Section" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457421" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1483",
+      "attribute": "105",                // Category
+           "item": "108",                // Section
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "1484",
+      "attribute": "102",                // Name
+           "item": "109",                // Query
+          "value": { "type": "StringValue", "value": "Query" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457453" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1485",
+      "attribute": "105",                // Category
+           "item": "109",                // Query
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457453" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Matching Category
+           "uuid": "1486",
+      "attribute": "102",                // Name
+           "item": "110",                // Matching Category
+          "value": { "type": "StringValue", "value": "Matching Category" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457468" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1487",
+      "attribute": "105",                // Category
+           "item": "110",                // Matching Category
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Matching Item
+           "uuid": "1488",
+      "attribute": "102",                // Name
+           "item": "111",                // Matching Item
+          "value": { "type": "StringValue", "value": "Matching Item" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457500" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1489",
+      "attribute": "105",                // Category
+           "item": "111",                // Matching Item
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457500" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Unfiled Value
+           "uuid": "1490",
+      "attribute": "102",                // Name
+           "item": "112",                // Unfiled Value
+          "value": { "type": "StringValue", "value": "Unfiled Value" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457515" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1491",
+      "attribute": "105",                // Category
+           "item": "112",                // Unfiled Value
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "1492",
+      "attribute": "102",                // Name
+           "item": "143",                // Attribute
+          "value": { "type": "StringValue", "value": "Attribute" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457546" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "1493",
+      "attribute": "105",                // Category
+           "item": "143",                // Attribute
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "1494",
+      "attribute": "102",                // Name
+           "item": "144",                // Category
+          "value": { "type": "StringValue", "value": "Category" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "1495",
+      "attribute": "105",                // Category
+           "item": "144",                // Category
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Page
+           "uuid": "1496",
+      "attribute": "102",                // Name
+           "item": "145",                // Page
+          "value": { "type": "StringValue", "value": "Page" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457593" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "1497",
+      "attribute": "105",                // Category
+           "item": "145",                // Page
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457609" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "1498",
+      "attribute": "102",                // Name
+           "item": "146",                // Section
+          "value": { "type": "StringValue", "value": "Section" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457625" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "1499",
+      "attribute": "105",                // Category
+           "item": "146",                // Section
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457625" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "1500",
+      "attribute": "102",                // Name
+           "item": "147",                // Query
+          "value": { "type": "StringValue", "value": "Query" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "1501",
+      "attribute": "105",                // Category
+           "item": "147",                // Query
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "100",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Guest
+           "uuid": "1502",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457671" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Guest
+           "uuid": "1503",
+      "attribute": "102",                // Name
+           "item": "1502",                // Guest
+          "value": { "type": "StringValue", "value": "Guest" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457671" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Userstamp
+           "uuid": "106",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457687" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Timestamp
+           "uuid": "107",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Welcome to the OpenRecord d...
+           "uuid": "2000",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457718" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Book Lists
+           "uuid": "3000",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457718" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All Books
+           "uuid": "3010",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457734" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // One Book
+           "uuid": "3020",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457750" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for all books
+           "uuid": "3011",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457750" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for one book
+           "uuid": "3021",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457765" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Book
+           "uuid": "3104",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457781" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // HTTP: The Definitive Guide
+           "uuid": "3205",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457781" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Author
+           "uuid": "3101",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457796" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Publisher
+           "uuid": "3102",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457812" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // ISBN
+           "uuid": "3103",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457812" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Transparent Society
+           "uuid": "3201",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457828" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Hobbit
+           "uuid": "3202",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457843" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Wisdom of Crowds
+           "uuid": "3203",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Shrinking Violets and Caspa...
+           "uuid": "3204",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Bugs and Features to Implement
+           "uuid": "4000",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457875" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All Features
+           "uuid": "4010",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All Bugs
+           "uuid": "4020",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All 'Closed' Bugs and Features
+           "uuid": "4030",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All 'Closed' Bugs
+           "uuid": "4040",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for all features
+           "uuid": "4011",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for all bugs
+           "uuid": "4021",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457937" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for all closed items
+           "uuid": "4031",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457953" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for all closed bugs
+           "uuid": "4041",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457953" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Feature
+           "uuid": "4102",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Bug
+           "uuid": "4101",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457984" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Closed Tasks
+           "uuid": "4103",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819457984" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The browser's back button d...
+           "uuid": "4201",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458000" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // When editing an item in a t...
+           "uuid": "4202",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // After editing an item in a ...
+           "uuid": "4203",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // If an item has an attribute...
+           "uuid": "4204",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Store only 'clean' text in ...
+           "uuid": "4205",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458046" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Make it possible for a text...
+           "uuid": "4302",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Make it possible to assign ...
+           "uuid": "4304",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Allow for entering number-v...
+           "uuid": "4305",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458078" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Have table mode show multi-...
+           "uuid": "4306",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458093" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // When you assign a value to ...
+           "uuid": "4307",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458093" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Clean up all the code that ...
+           "uuid": "4308",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458109" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Be able to create new pages
+           "uuid": "4309",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458125" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Be able to add a new sectio...
+           "uuid": "4310",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458125" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Observable queries: all ite...
+           "uuid": "4311",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Observable queries: limit r...
+           "uuid": "4312",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Be able to edit the query o...
+           "uuid": "4313",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Make it possible to add new...
+           "uuid": "4314",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Figure out how to declare d...
+           "uuid": "4315",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // URLs with anchor-dot-notati...
+           "uuid": "4316",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Support for reference-value...
+           "uuid": "4317",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Write unit tests using jsunit
+           "uuid": "4318",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Try to write a unit test th...
+           "uuid": "4319",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // In 'Outline' plugin, have c...
+           "uuid": "4320",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Add 'Table' plugin controls...
+           "uuid": "4321",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // In 'Outline' plugin, be abl...
+           "uuid": "4322",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // In 'Table' plugin, be able ...
+           "uuid": "4323",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Be able to edit in outline ...
+           "uuid": "4324",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Set up a subversion server ...
+           "uuid": "4325",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458296" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Charities
+           "uuid": "5000",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458296" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All Charities
+           "uuid": "5010",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for all charities
+           "uuid": "5011",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458328" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Charity
+           "uuid": "5101",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458328" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // 2003 Expenses (in $US million)
+           "uuid": "5102",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Global Fund for Women
+           "uuid": "5201",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Pathfinder International
+           "uuid": "5202",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458375" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Global Fund to Fight AI...
+           "uuid": "5203",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458375" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Gumption Memo
+           "uuid": "5204",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Deceit and Denial
+           "uuid": "5205",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Have a 'Find' UI that does ...
+           "uuid": "5207",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Be able to 'delete' items (...
+           "uuid": "5208",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458421" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Make view.display() *not* r...
+           "uuid": "5209",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All Items
+           "uuid": "6000",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // All Items
+           "uuid": "6010",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458453" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Query for all items
+           "uuid": "6011",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458468" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // JavaScript: The Definitive ...
+           "uuid": "6012",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Two Towers
+           "uuid": "6013",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Userstamp
+           "uuid": "6014",
+      "attribute": "102",                // Name
+           "item": "106",                // Userstamp
+          "value": { "type": "StringValue", "value": "Userstamp" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458515" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "6015",
+      "attribute": "105",                // Category
+           "item": "106",                // Userstamp
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Timestamp
+           "uuid": "6016",
+      "attribute": "102",                // Name
+           "item": "107",                // Timestamp
+          "value": { "type": "StringValue", "value": "Timestamp" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "6017",
+      "attribute": "105",                // Category
+           "item": "107",                // Timestamp
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Page
+           "uuid": "6018",
+      "attribute": "105",                // Category
+           "item": "2000",                // Welcome to the OpenRecord d...
+          "value": { "type": "RelatedUuid", "value": "145" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458609" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 1. Welcome!
+           "uuid": "6019",
+      "attribute": "101",                // Short Name
+           "item": "2000",                // Welcome to the OpenRecord d...
+          "value": { "type": "StringValue", "value": "1. Welcome!" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458625" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Welcome to the OpenRecord d...
+           "uuid": "6020",
+      "attribute": "102",                // Name
+           "item": "2000",                // Welcome to the OpenRecord d...
+          "value": { "type": "StringValue", "value": "Welcome to the OpenRecord demo!" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // This web site is a demo of ...
+           "uuid": "6021",
+      "attribute": "103",                // Summary
+           "item": "2000",                // Welcome to the OpenRecord d...
+          "value": { "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Page
+           "uuid": "6022",
+      "attribute": "105",                // Category
+           "item": "3000",                // Book Lists
+          "value": { "type": "RelatedUuid", "value": "145" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458765" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 2. Books
+           "uuid": "6023",
+      "attribute": "101",                // Short Name
+           "item": "3000",                // Book Lists
+          "value": { "type": "StringValue", "value": "2. Books" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458781" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book Lists
+           "uuid": "6024",
+      "attribute": "102",                // Name
+           "item": "3000",                // Book Lists
+          "value": { "type": "StringValue", "value": "Book Lists" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458796" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // In the lists on this page, ...
+           "uuid": "6025",
+      "attribute": "103",                // Summary
+           "item": "3000",                // Book Lists
+          "value": { "type": "StringValue", "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458812" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Books
+           "uuid": "6026",
+      "attribute": "108",                // Section
+           "item": "3000",                // Book Lists
+          "value": { "type": "RelatedUuid", "value": "3010" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458828" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // One Book
+           "uuid": "6027",
+      "attribute": "108",                // Section
+           "item": "3000",                // Book Lists
+          "value": { "type": "RelatedUuid", "value": "3020" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458843" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6028",
+      "attribute": "105",                // Category
+           "item": "3010",                // All Books
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458875" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Books
+           "uuid": "6029",
+      "attribute": "102",                // Name
+           "item": "3010",                // All Books
+          "value": { "type": "StringValue", "value": "All Books" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Table
+           "uuid": "6030",
+      "attribute": "112",                // Unfiled Value
+           "item": "3010",                // All Books
+          "value": { "type": "StringValue", "value": "Table" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all books
+           "uuid": "6031",
+      "attribute": "109",                // Query
+           "item": "3010",                // All Books
+          "value": { "type": "RelatedUuid", "value": "3011" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // This section shows a list o...
+           "uuid": "6032",
+      "attribute": "103",                // Summary
+           "item": "3010",                // All Books
+          "value": { "type": "StringValue", "value": "This section shows a list of all the books in the repository." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458937" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6033",
+      "attribute": "105",                // Category
+           "item": "3020",                // One Book
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // One Book
+           "uuid": "6034",
+      "attribute": "102",                // Name
+           "item": "3020",                // One Book
+          "value": { "type": "StringValue", "value": "One Book" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819458984" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Detail
+           "uuid": "6035",
+      "attribute": "112",                // Unfiled Value
+           "item": "3020",                // One Book
+          "value": { "type": "StringValue", "value": "Detail" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459000" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for one book
+           "uuid": "6036",
+      "attribute": "109",                // Query
+           "item": "3020",                // One Book
+          "value": { "type": "RelatedUuid", "value": "3021" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // This section shows a just a...
+           "uuid": "6037",
+      "attribute": "103",                // Summary
+           "item": "3020",                // One Book
+          "value": { "type": "StringValue", "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459046" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6038",
+      "attribute": "105",                // Category
+           "item": "3011",                // Query for all books
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459078" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all books
+           "uuid": "6039",
+      "attribute": "102",                // Name
+           "item": "3011",                // Query for all books
+          "value": { "type": "StringValue", "value": "Query for all books" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459093" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6040",
+      "attribute": "110",                // Matching Category
+           "item": "3011",                // Query for all books
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459109" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6041",
+      "attribute": "105",                // Category
+           "item": "3021",                // Query for one book
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for one book
+           "uuid": "6042",
+      "attribute": "102",                // Name
+           "item": "3021",                // Query for one book
+          "value": { "type": "StringValue", "value": "Query for one book" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // HTTP: The Definitive Guide
+           "uuid": "6043",
+      "attribute": "111",                // Matching Item
+           "item": "3021",                // Query for one book
+          "value": { "type": "RelatedUuid", "value": "3205" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "6044",
+      "attribute": "105",                // Category
+           "item": "3104",                // Book
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6045",
+      "attribute": "102",                // Name
+           "item": "3104",                // Book
+          "value": { "type": "StringValue", "value": "Book" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6046",
+      "attribute": "105",                // Category
+           "item": "3205",                // HTTP: The Definitive Guide
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // HTTP: The Definitive Guide
+           "uuid": "6047",
+      "attribute": "102",                // Name
+           "item": "3205",                // HTTP: The Definitive Guide
+          "value": { "type": "StringValue", "value": "HTTP: The Definitive Guide" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // David Gourley and Brian Totty
+           "uuid": "6048",
+      "attribute": "3101",                // Author
+           "item": "3205",                // HTTP: The Definitive Guide
+          "value": { "type": "StringValue", "value": "David Gourley and Brian Totty" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 1565925092
+           "uuid": "6049",
+      "attribute": "3103",                // ISBN
+           "item": "3205",                // HTTP: The Definitive Guide
+          "value": { "type": "StringValue", "value": "1565925092" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459296" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // O'Reilly
+           "uuid": "6050",
+      "attribute": "3102",                // Publisher
+           "item": "3205",                // HTTP: The Definitive Guide
+          "value": { "type": "StringValue", "value": "O'Reilly" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "6051",
+      "attribute": "105",                // Category
+           "item": "3101",                // Author
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Author
+           "uuid": "6052",
+      "attribute": "102",                // Name
+           "item": "3101",                // Author
+          "value": { "type": "StringValue", "value": "Author" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "6053",
+      "attribute": "105",                // Category
+           "item": "3102",                // Publisher
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Publisher
+           "uuid": "6054",
+      "attribute": "102",                // Name
+           "item": "3102",                // Publisher
+          "value": { "type": "StringValue", "value": "Publisher" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "6055",
+      "attribute": "105",                // Category
+           "item": "3103",                // ISBN
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // ISBN
+           "uuid": "6056",
+      "attribute": "102",                // Name
+           "item": "3103",                // ISBN
+          "value": { "type": "StringValue", "value": "ISBN" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459453" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6057",
+      "attribute": "105",                // Category
+           "item": "3201",                // The Transparent Society
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459468" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The Transparent Society
+           "uuid": "6058",
+      "attribute": "102",                // Name
+           "item": "3201",                // The Transparent Society
+          "value": { "type": "StringValue", "value": "The Transparent Society" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // David Brin
+           "uuid": "6059",
+      "attribute": "3101",                // Author
+           "item": "3201",                // The Transparent Society
+          "value": { "type": "StringValue", "value": "David Brin" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459515" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Perseus Publishing
+           "uuid": "6060",
+      "attribute": "3102",                // Publisher
+           "item": "3201",                // The Transparent Society
+          "value": { "type": "StringValue", "value": "Perseus Publishing" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 0738201448
+           "uuid": "6061",
+      "attribute": "3103",                // ISBN
+           "item": "3201",                // The Transparent Society
+          "value": { "type": "StringValue", "value": "0738201448" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459546" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6062",
+      "attribute": "105",                // Category
+           "item": "3202",                // The Hobbit
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The Hobbit
+           "uuid": "6063",
+      "attribute": "102",                // Name
+           "item": "3202",                // The Hobbit
+          "value": { "type": "StringValue", "value": "The Hobbit" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459593" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // J.R.R. Tolkien
+           "uuid": "6064",
+      "attribute": "3101",                // Author
+           "item": "3202",                // The Hobbit
+          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459609" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // HarperCollins
+           "uuid": "6065",
+      "attribute": "3102",                // Publisher
+           "item": "3202",                // The Hobbit
+          "value": { "type": "StringValue", "value": "HarperCollins" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459625" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Houghton Mifflin
+           "uuid": "6066",
+      "attribute": "3102",                // Publisher
+           "item": "3202",                // The Hobbit
+          "value": { "type": "StringValue", "value": "Houghton Mifflin" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 0618002219
+           "uuid": "6067",
+      "attribute": "3103",                // ISBN
+           "item": "3202",                // The Hobbit
+          "value": { "type": "StringValue", "value": "0618002219" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6068",
+      "attribute": "105",                // Category
+           "item": "3203",                // The Wisdom of Crowds
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459687" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The Wisdom of Crowds
+           "uuid": "6069",
+      "attribute": "102",                // Name
+           "item": "3203",                // The Wisdom of Crowds
+          "value": { "type": "StringValue", "value": "The Wisdom of Crowds" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // James Surowiecki
+           "uuid": "6070",
+      "attribute": "3101",                // Author
+           "item": "3203",                // The Wisdom of Crowds
+          "value": { "type": "StringValue", "value": "James Surowiecki" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459718" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 0385503865
+           "uuid": "6071",
+      "attribute": "3103",                // ISBN
+           "item": "3203",                // The Wisdom of Crowds
+          "value": { "type": "StringValue", "value": "0385503865" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459750" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Doubleday
+           "uuid": "6072",
+      "attribute": "3102",                // Publisher
+           "item": "3203",                // The Wisdom of Crowds
+          "value": { "type": "StringValue", "value": "Doubleday" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459765" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6073",
+      "attribute": "105",                // Category
+           "item": "3204",                // Shrinking Violets and Caspa...
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459796" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Shrinking Violets and Caspa...
+           "uuid": "6074",
+      "attribute": "102",                // Name
+           "item": "3204",                // Shrinking Violets and Caspa...
+          "value": { "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459812" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Patricia A. McDaniel
+           "uuid": "6075",
+      "attribute": "3101",                // Author
+           "item": "3204",                // Shrinking Violets and Caspa...
+          "value": { "type": "StringValue", "value": "Patricia A. McDaniel" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459828" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 0814756778
+           "uuid": "6076",
+      "attribute": "3103",                // ISBN
+           "item": "3204",                // Shrinking Violets and Caspa...
+          "value": { "type": "StringValue", "value": "0814756778" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459843" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // NYU Press
+           "uuid": "6077",
+      "attribute": "3102",                // Publisher
+           "item": "3204",                // Shrinking Violets and Caspa...
+          "value": { "type": "StringValue", "value": "NYU Press" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Page
+           "uuid": "6078",
+      "attribute": "105",                // Category
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "RelatedUuid", "value": "145" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 3. Bug List
+           "uuid": "6079",
+      "attribute": "101",                // Short Name
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "StringValue", "value": "3. Bug List" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bugs and Features to Implement
+           "uuid": "6080",
+      "attribute": "102",                // Name
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "StringValue", "value": "Bugs and Features to Implement" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // This page is where I keep t...
+           "uuid": "6081",
+      "attribute": "103",                // Summary
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "StringValue", "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459953" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Features
+           "uuid": "6082",
+      "attribute": "108",                // Section
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "RelatedUuid", "value": "4010" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Bugs
+           "uuid": "6083",
+      "attribute": "108",                // Section
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "RelatedUuid", "value": "4020" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819459984" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All 'Closed' Bugs and Features
+           "uuid": "6084",
+      "attribute": "108",                // Section
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "RelatedUuid", "value": "4030" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460000" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All 'Closed' Bugs
+           "uuid": "6085",
+      "attribute": "108",                // Section
+           "item": "4000",                // Bugs and Features to Implement
+          "value": { "type": "RelatedUuid", "value": "4040" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6086",
+      "attribute": "105",                // Category
+           "item": "4010",                // All Features
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Features
+           "uuid": "6087",
+      "attribute": "102",                // Name
+           "item": "4010",                // All Features
+          "value": { "type": "StringValue", "value": "All Features" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460046" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Outline
+           "uuid": "6088",
+      "attribute": "112",                // Unfiled Value
+           "item": "4010",                // All Features
+          "value": { "type": "StringValue", "value": "Outline" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all features
+           "uuid": "6089",
+      "attribute": "109",                // Query
+           "item": "4010",                // All Features
+          "value": { "type": "RelatedUuid", "value": "4011" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6090",
+      "attribute": "105",                // Category
+           "item": "4020",                // All Bugs
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Bugs
+           "uuid": "6091",
+      "attribute": "102",                // Name
+           "item": "4020",                // All Bugs
+          "value": { "type": "StringValue", "value": "All Bugs" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Outline
+           "uuid": "6092",
+      "attribute": "112",                // Unfiled Value
+           "item": "4020",                // All Bugs
+          "value": { "type": "StringValue", "value": "Outline" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all bugs
+           "uuid": "6093",
+      "attribute": "109",                // Query
+           "item": "4020",                // All Bugs
+          "value": { "type": "RelatedUuid", "value": "4021" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6094",
+      "attribute": "105",                // Category
+           "item": "4030",                // All 'Closed' Bugs and Features
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All 'Closed' Bugs and Features
+           "uuid": "6095",
+      "attribute": "102",                // Name
+           "item": "4030",                // All 'Closed' Bugs and Features
+          "value": { "type": "StringValue", "value": "All 'Closed' Bugs and Features" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Outline
+           "uuid": "6096",
+      "attribute": "112",                // Unfiled Value
+           "item": "4030",                // All 'Closed' Bugs and Features
+          "value": { "type": "StringValue", "value": "Outline" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all closed items
+           "uuid": "6097",
+      "attribute": "109",                // Query
+           "item": "4030",                // All 'Closed' Bugs and Features
+          "value": { "type": "RelatedUuid", "value": "4031" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460328" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6098",
+      "attribute": "105",                // Category
+           "item": "4040",                // All 'Closed' Bugs
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All 'Closed' Bugs
+           "uuid": "6099",
+      "attribute": "102",                // Name
+           "item": "4040",                // All 'Closed' Bugs
+          "value": { "type": "StringValue", "value": "All 'Closed' Bugs" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Outline
+           "uuid": "6100",
+      "attribute": "112",                // Unfiled Value
+           "item": "4040",                // All 'Closed' Bugs
+          "value": { "type": "StringValue", "value": "Outline" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all closed bugs
+           "uuid": "6101",
+      "attribute": "109",                // Query
+           "item": "4040",                // All 'Closed' Bugs
+          "value": { "type": "RelatedUuid", "value": "4041" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6102",
+      "attribute": "105",                // Category
+           "item": "4011",                // Query for all features
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460421" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all features
+           "uuid": "6103",
+      "attribute": "102",                // Name
+           "item": "4011",                // Query for all features
+          "value": { "type": "StringValue", "value": "Query for all features" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6104",
+      "attribute": "110",                // Matching Category
+           "item": "4011",                // Query for all features
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460468" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6105",
+      "attribute": "105",                // Category
+           "item": "4021",                // Query for all bugs
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all bugs
+           "uuid": "6106",
+      "attribute": "102",                // Name
+           "item": "4021",                // Query for all bugs
+          "value": { "type": "StringValue", "value": "Query for all bugs" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460500" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6107",
+      "attribute": "110",                // Matching Category
+           "item": "4021",                // Query for all bugs
+          "value": { "type": "RelatedUuid", "value": "4101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6108",
+      "attribute": "105",                // Category
+           "item": "4031",                // Query for all closed items
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460546" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all closed items
+           "uuid": "6109",
+      "attribute": "102",                // Name
+           "item": "4031",                // Query for all closed items
+          "value": { "type": "StringValue", "value": "Query for all closed items" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Closed Tasks
+           "uuid": "6110",
+      "attribute": "110",                // Matching Category
+           "item": "4031",                // Query for all closed items
+          "value": { "type": "RelatedUuid", "value": "4103" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6111",
+      "attribute": "105",                // Category
+           "item": "4041",                // Query for all closed bugs
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460609" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all closed bugs
+           "uuid": "6112",
+      "attribute": "102",                // Name
+           "item": "4041",                // Query for all closed bugs
+          "value": { "type": "StringValue", "value": "Query for all closed bugs" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460625" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6113",
+      "attribute": "110",                // Matching Category
+           "item": "4041",                // Query for all closed bugs
+          "value": { "type": "RelatedUuid", "value": "4101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Closed Tasks
+           "uuid": "6114",
+      "attribute": "110",                // Matching Category
+           "item": "4041",                // Query for all closed bugs
+          "value": { "type": "RelatedUuid", "value": "4103" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "6115",
+      "attribute": "105",                // Category
+           "item": "4102",                // Feature
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460687" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6116",
+      "attribute": "102",                // Name
+           "item": "4102",                // Feature
+          "value": { "type": "StringValue", "value": "Feature" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "6117",
+      "attribute": "105",                // Category
+           "item": "4101",                // Bug
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460718" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6118",
+      "attribute": "102",                // Name
+           "item": "4101",                // Bug
+          "value": { "type": "StringValue", "value": "Bug" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460734" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "6119",
+      "attribute": "105",                // Category
+           "item": "4103",                // Closed Tasks
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460765" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Closed Tasks
+           "uuid": "6120",
+      "attribute": "102",                // Name
+           "item": "4103",                // Closed Tasks
+          "value": { "type": "StringValue", "value": "Closed Tasks" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460781" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6121",
+      "attribute": "105",                // Category
+           "item": "4201",                // The browser's back button d...
+          "value": { "type": "RelatedUuid", "value": "4101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460812" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The browser's back button d...
+           "uuid": "6122",
+      "attribute": "102",                // Name
+           "item": "4201",                // The browser's back button d...
+          "value": { "type": "StringValue", "value": "The browser's back button doesn't work after you click from page to page in the navbar." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460828" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6123",
+      "attribute": "105",                // Category
+           "item": "4202",                // When editing an item in a t...
+          "value": { "type": "RelatedUuid", "value": "4101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // When editing an item in a t...
+           "uuid": "6124",
+      "attribute": "102",                // Name
+           "item": "4202",                // When editing an item in a t...
+          "value": { "type": "StringValue", "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460875" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6125",
+      "attribute": "105",                // Category
+           "item": "4203",                // After editing an item in a ...
+          "value": { "type": "RelatedUuid", "value": "4101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // After editing an item in a ...
+           "uuid": "6126",
+      "attribute": "102",                // Name
+           "item": "4203",                // After editing an item in a ...
+          "value": { "type": "StringValue", "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6127",
+      "attribute": "105",                // Category
+           "item": "4204",                // If an item has an attribute...
+          "value": { "type": "RelatedUuid", "value": "4101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460937" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Closed Tasks
+           "uuid": "6128",
+      "attribute": "105",                // Category
+           "item": "4204",                // If an item has an attribute...
+          "value": { "type": "RelatedUuid", "value": "4103" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460953" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // If an item has an attribute...
+           "uuid": "6129",
+      "attribute": "102",                // Name
+           "item": "4204",                // If an item has an attribute...
+          "value": { "type": "StringValue", "value": "If an item has an attribute value with some HTML in it, like '&amp;lt;cite&amp;gt;', we incorrectly render it like '&amp; lt;cite&amp; gt;' instead of '&amp;lt;cite&amp;gt;'" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819460968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bug
+           "uuid": "6130",
+      "attribute": "105",                // Category
+           "item": "4205",                // Store only 'clean' text in ...
+          "value": { "type": "RelatedUuid", "value": "4101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461000" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Closed Tasks
+           "uuid": "6131",
+      "attribute": "105",                // Category
+           "item": "4205",                // Store only 'clean' text in ...
+          "value": { "type": "RelatedUuid", "value": "4103" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Store only 'clean' text in ...
+           "uuid": "6132",
+      "attribute": "102",                // Name
+           "item": "4205",                // Store only 'clean' text in ...
+          "value": { "type": "StringValue", "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &amp;lt; and &amp;gt; and double-quotes" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6133",
+      "attribute": "105",                // Category
+           "item": "4302",                // Make it possible for a text...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Closed Tasks
+           "uuid": "6134",
+      "attribute": "105",                // Category
+           "item": "4302",                // Make it possible for a text...
+          "value": { "type": "RelatedUuid", "value": "4103" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461078" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Make it possible for a text...
+           "uuid": "6135",
+      "attribute": "102",                // Name
+           "item": "4302",                // Make it possible for a text...
+          "value": { "type": "StringValue", "value": "Make it possible for a text string to contain a reference to an item" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461093" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6136",
+      "attribute": "105",                // Category
+           "item": "4304",                // Make it possible to assign ...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461125" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Make it possible to assign ...
+           "uuid": "6137",
+      "attribute": "102",                // Name
+           "item": "4304",                // Make it possible to assign ...
+          "value": { "type": "StringValue", "value": "Make it possible to assign items to categories -- allow for entering reference-values, not just string-values" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6138",
+      "attribute": "105",                // Category
+           "item": "4305",                // Allow for entering number-v...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Allow for entering number-v...
+           "uuid": "6139",
+      "attribute": "102",                // Name
+           "item": "4305",                // Allow for entering number-v...
+          "value": { "type": "StringValue", "value": "Allow for entering number-values, not just string-values" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6140",
+      "attribute": "105",                // Category
+           "item": "4306",                // Have table mode show multi-...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Have table mode show multi-...
+           "uuid": "6141",
+      "attribute": "102",                // Name
+           "item": "4306",                // Have table mode show multi-...
+          "value": { "type": "StringValue", "value": "Have table mode show multi-valued attributes" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6142",
+      "attribute": "105",                // Category
+           "item": "4307",                // When you assign a value to ...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // When you assign a value to ...
+           "uuid": "6143",
+      "attribute": "102",                // Name
+           "item": "4307",                // When you assign a value to ...
+          "value": { "type": "StringValue", "value": "When you assign a value to an item, mark it with a timestamp" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6144",
+      "attribute": "105",                // Category
+           "item": "4308",                // Clean up all the code that ...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461296" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Clean up all the code that ...
+           "uuid": "6145",
+      "attribute": "102",                // Name
+           "item": "4308",                // Clean up all the code that ...
+          "value": { "type": "StringValue", "value": "Clean up all the code that assumes single-valued attributes -- search for '[0]'" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6146",
+      "attribute": "105",                // Category
+           "item": "4309",                // Be able to create new pages
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Be able to create new pages
+           "uuid": "6147",
+      "attribute": "102",                // Name
+           "item": "4309",                // Be able to create new pages
+          "value": { "type": "StringValue", "value": "Be able to create new pages" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6148",
+      "attribute": "105",                // Category
+           "item": "4310",                // Be able to add a new sectio...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Be able to add a new sectio...
+           "uuid": "6149",
+      "attribute": "102",                // Name
+           "item": "4310",                // Be able to add a new sectio...
+          "value": { "type": "StringValue", "value": "Be able to add a new section to a page" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6150",
+      "attribute": "105",                // Category
+           "item": "4311",                // Observable queries: all ite...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Observable queries: all ite...
+           "uuid": "6151",
+      "attribute": "102",                // Name
+           "item": "4311",                // Observable queries: all ite...
+          "value": { "type": "StringValue", "value": "Observable queries: all items, limited to a requested subset based on kind and category (e.g. 'All fiction books')" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461453" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6152",
+      "attribute": "105",                // Category
+           "item": "4312",                // Observable queries: limit r...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Observable queries: limit r...
+           "uuid": "6153",
+      "attribute": "102",                // Name
+           "item": "4312",                // Observable queries: limit r...
+          "value": { "type": "StringValue", "value": "Observable queries: limit results to just a requested subset of the attributes (e.g. just the names of the books)" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6154",
+      "attribute": "105",                // Category
+           "item": "4313",                // Be able to edit the query o...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461515" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Be able to edit the query o...
+           "uuid": "6155",
+      "attribute": "102",                // Name
+           "item": "4313",                // Be able to edit the query o...
+          "value": { "type": "StringValue", "value": "Be able to edit the query of a section" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6156",
+      "attribute": "105",                // Category
+           "item": "4314",                // Make it possible to add new...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Make it possible to add new...
+           "uuid": "6157",
+      "attribute": "102",                // Name
+           "item": "4314",                // Make it possible to add new...
+          "value": { "type": "StringValue", "value": "Make it possible to add new attributes to a table view" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6158",
+      "attribute": "105",                // Category
+           "item": "4315",                // Figure out how to declare d...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461687" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Figure out how to declare d...
+           "uuid": "6159",
+      "attribute": "102",                // Name
+           "item": "4315",                // Figure out how to declare d...
+          "value": { "type": "StringValue", "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6160",
+      "attribute": "105",                // Category
+           "item": "4316",                // URLs with anchor-dot-notati...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461718" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // URLs with anchor-dot-notati...
+           "uuid": "6161",
+      "attribute": "102",                // Name
+           "item": "4316",                // URLs with anchor-dot-notati...
+          "value": { "type": "StringValue", "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461734" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6162",
+      "attribute": "105",                // Category
+           "item": "4317",                // Support for reference-value...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461765" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Support for reference-value...
+           "uuid": "6163",
+      "attribute": "102",                // Name
+           "item": "4317",                // Support for reference-value...
+          "value": { "type": "StringValue", "value": "Support for reference-values as well as string-values" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461781" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6164",
+      "attribute": "105",                // Category
+           "item": "4318",                // Write unit tests using jsunit
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461812" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Write unit tests using jsunit
+           "uuid": "6165",
+      "attribute": "102",                // Name
+           "item": "4318",                // Write unit tests using jsunit
+          "value": { "type": "StringValue", "value": "Write unit tests using jsunit" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461828" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6166",
+      "attribute": "105",                // Category
+           "item": "4319",                // Try to write a unit test th...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Try to write a unit test th...
+           "uuid": "6167",
+      "attribute": "102",                // Name
+           "item": "4319",                // Try to write a unit test th...
+          "value": { "type": "StringValue", "value": "Try to write a unit test that calls jslint" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461875" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6168",
+      "attribute": "105",                // Category
+           "item": "4320",                // In 'Outline' plugin, have c...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // In 'Outline' plugin, have c...
+           "uuid": "6169",
+      "attribute": "102",                // Name
+           "item": "4320",                // In 'Outline' plugin, have c...
+          "value": { "type": "StringValue", "value": "In 'Outline' plugin, have controls to optionally show more detail" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6170",
+      "attribute": "105",                // Category
+           "item": "4321",                // Add 'Table' plugin controls...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461953" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Add 'Table' plugin controls...
+           "uuid": "6171",
+      "attribute": "102",                // Name
+           "item": "4321",                // Add 'Table' plugin controls...
+          "value": { "type": "StringValue", "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819461968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6172",
+      "attribute": "105",                // Category
+           "item": "4322",                // In 'Outline' plugin, be abl...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462000" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // In 'Outline' plugin, be abl...
+           "uuid": "6173",
+      "attribute": "102",                // Name
+           "item": "4322",                // In 'Outline' plugin, be abl...
+          "value": { "type": "StringValue", "value": "In 'Outline' plugin, be able to group by category" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462000" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6174",
+      "attribute": "105",                // Category
+           "item": "4323",                // In 'Table' plugin, be able ...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // In 'Table' plugin, be able ...
+           "uuid": "6175",
+      "attribute": "102",                // Name
+           "item": "4323",                // In 'Table' plugin, be able ...
+          "value": { "type": "StringValue", "value": "In 'Table' plugin, be able to group by category" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462046" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6176",
+      "attribute": "105",                // Category
+           "item": "4324",                // Be able to edit in outline ...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462078" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Be able to edit in outline ...
+           "uuid": "6177",
+      "attribute": "102",                // Name
+           "item": "4324",                // Be able to edit in outline ...
+          "value": { "type": "StringValue", "value": "Be able to edit in outline mode" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462093" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6178",
+      "attribute": "105",                // Category
+           "item": "4325",                // Set up a subversion server ...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462125" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Set up a subversion server ...
+           "uuid": "6179",
+      "attribute": "102",                // Name
+           "item": "4325",                // Set up a subversion server ...
+          "value": { "type": "StringValue", "value": "Set up a subversion server and have the OpenRecord code publicly available" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Page
+           "uuid": "6180",
+      "attribute": "105",                // Category
+           "item": "5000",                // Charities
+          "value": { "type": "RelatedUuid", "value": "145" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 4. Charities
+           "uuid": "6181",
+      "attribute": "101",                // Short Name
+           "item": "5000",                // Charities
+          "value": { "type": "StringValue", "value": "4. Charities" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Charities
+           "uuid": "6182",
+      "attribute": "102",                // Name
+           "item": "5000",                // Charities
+          "value": { "type": "StringValue", "value": "Charities" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Charities
+           "uuid": "6183",
+      "attribute": "108",                // Section
+           "item": "5000",                // Charities
+          "value": { "type": "RelatedUuid", "value": "5010" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6184",
+      "attribute": "105",                // Category
+           "item": "5010",                // All Charities
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Charities
+           "uuid": "6185",
+      "attribute": "102",                // Name
+           "item": "5010",                // All Charities
+          "value": { "type": "StringValue", "value": "All Charities" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Bar Chart
+           "uuid": "6186",
+      "attribute": "112",                // Unfiled Value
+           "item": "5010",                // All Charities
+          "value": { "type": "StringValue", "value": "Bar Chart" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all charities
+           "uuid": "6187",
+      "attribute": "109",                // Query
+           "item": "5010",                // All Charities
+          "value": { "type": "RelatedUuid", "value": "5011" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6188",
+      "attribute": "105",                // Category
+           "item": "5011",                // Query for all charities
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all charities
+           "uuid": "6189",
+      "attribute": "102",                // Name
+           "item": "5011",                // Query for all charities
+          "value": { "type": "StringValue", "value": "Query for all charities" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Charity
+           "uuid": "6190",
+      "attribute": "110",                // Matching Category
+           "item": "5011",                // Query for all charities
+          "value": { "type": "RelatedUuid", "value": "5101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462375" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Category
+           "uuid": "6191",
+      "attribute": "105",                // Category
+           "item": "5101",                // Charity
+          "value": { "type": "RelatedUuid", "value": "144" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462406" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Charity
+           "uuid": "6192",
+      "attribute": "102",                // Name
+           "item": "5101",                // Charity
+          "value": { "type": "StringValue", "value": "Charity" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462421" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Attribute
+           "uuid": "6193",
+      "attribute": "105",                // Category
+           "item": "5102",                // 2003 Expenses (in $US million)
+          "value": { "type": "RelatedUuid", "value": "143" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 2003 Expenses (in $US million)
+           "uuid": "6194",
+      "attribute": "102",                // Name
+           "item": "5102",                // 2003 Expenses (in $US million)
+          "value": { "type": "StringValue", "value": "2003 Expenses (in $US million)" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462453" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Charity
+           "uuid": "6195",
+      "attribute": "105",                // Category
+           "item": "5201",                // The Global Fund for Women
+          "value": { "type": "RelatedUuid", "value": "5101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The Global Fund for Women
+           "uuid": "6196",
+      "attribute": "102",                // Name
+           "item": "5201",                // The Global Fund for Women
+          "value": { "type": "StringValue", "value": "The Global Fund for Women" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462500" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 8.2
+           "uuid": "6197",
+      "attribute": "5102",                // 2003 Expenses (in $US million)
+           "item": "5201",                // The Global Fund for Women
+          "value": { "type": "NumberValue", "value": 8.2 },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Charity
+           "uuid": "6198",
+      "attribute": "105",                // Category
+           "item": "5202",                // Pathfinder International
+          "value": { "type": "RelatedUuid", "value": "5101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462546" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Pathfinder International
+           "uuid": "6199",
+      "attribute": "102",                // Name
+           "item": "5202",                // Pathfinder International
+          "value": { "type": "StringValue", "value": "Pathfinder International" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 44.9
+           "uuid": "6200",
+      "attribute": "5102",                // 2003 Expenses (in $US million)
+           "item": "5202",                // Pathfinder International
+          "value": { "type": "NumberValue", "value": 44.9 },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Charity
+           "uuid": "6201",
+      "attribute": "105",                // Category
+           "item": "5203",                // The Global Fund to Fight AI...
+          "value": { "type": "RelatedUuid", "value": "5101" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462609" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The Global Fund to Fight AI...
+           "uuid": "6202",
+      "attribute": "102",                // Name
+           "item": "5203",                // The Global Fund to Fight AI...
+          "value": { "type": "StringValue", "value": "The Global Fund to Fight AIDS, TB, and Malaria" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462625" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 64.7
+           "uuid": "6203",
+      "attribute": "5102",                // 2003 Expenses (in $US million)
+           "item": "5203",                // The Global Fund to Fight AI...
+          "value": { "type": "NumberValue", "value": 64.7 },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6204",
+      "attribute": "105",                // Category
+           "item": "5204",                // The Gumption Memo
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462671" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The Gumption Memo
+           "uuid": "6205",
+      "attribute": "102",                // Name
+           "item": "5204",                // The Gumption Memo
+          "value": { "type": "StringValue", "value": "The Gumption Memo" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462687" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Brian Skinner
+           "uuid": "6206",
+      "attribute": "3101",                // Author
+           "item": "5204",                // The Gumption Memo
+          "value": { "type": "StringValue", "value": "Brian Skinner" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Kinkos
+           "uuid": "6207",
+      "attribute": "3102",                // Publisher
+           "item": "5204",                // The Gumption Memo
+          "value": { "type": "StringValue", "value": "Kinkos" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462734" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6208",
+      "attribute": "105",                // Category
+           "item": "5205",                // Deceit and Denial
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462765" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Deceit and Denial
+           "uuid": "6209",
+      "attribute": "102",                // Name
+           "item": "5205",                // Deceit and Denial
+          "value": { "type": "StringValue", "value": "Deceit and Denial" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462781" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Gerald Markowitz and David ...
+           "uuid": "6210",
+      "attribute": "3101",                // Author
+           "item": "5205",                // Deceit and Denial
+          "value": { "type": "StringValue", "value": "Gerald Markowitz and David Rosner" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462796" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // University of California
+           "uuid": "6211",
+      "attribute": "3102",                // Publisher
+           "item": "5205",                // Deceit and Denial
+          "value": { "type": "StringValue", "value": "University of California" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462812" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 0520240634
+           "uuid": "6212",
+      "attribute": "3103",                // ISBN
+           "item": "5205",                // Deceit and Denial
+          "value": { "type": "StringValue", "value": "0520240634" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462828" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6213",
+      "attribute": "105",                // Category
+           "item": "5207",                // Have a 'Find' UI that does ...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Have a 'Find' UI that does ...
+           "uuid": "6214",
+      "attribute": "102",                // Name
+           "item": "5207",                // Have a 'Find' UI that does ...
+          "value": { "type": "StringValue", "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462875" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6215",
+      "attribute": "105",                // Category
+           "item": "5208",                // Be able to 'delete' items (...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Be able to 'delete' items (...
+           "uuid": "6216",
+      "attribute": "102",                // Name
+           "item": "5208",                // Be able to 'delete' items (...
+          "value": { "type": "StringValue", "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Feature
+           "uuid": "6217",
+      "attribute": "105",                // Category
+           "item": "5209",                // Make view.display() *not* r...
+          "value": { "type": "RelatedUuid", "value": "4102" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462953" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Make view.display() *not* r...
+           "uuid": "6218",
+      "attribute": "102",                // Name
+           "item": "5209",                // Make view.display() *not* r...
+          "value": { "type": "StringValue", "value": "Make view.display() *not* re-create all the HTML every time" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819462968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Page
+           "uuid": "6219",
+      "attribute": "105",                // Category
+           "item": "6000",                // All Items
+          "value": { "type": "RelatedUuid", "value": "145" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463000" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 5. All Items
+           "uuid": "6220",
+      "attribute": "101",                // Short Name
+           "item": "6000",                // All Items
+          "value": { "type": "StringValue", "value": "5. All Items" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Items
+           "uuid": "6221",
+      "attribute": "102",                // Name
+           "item": "6000",                // All Items
+          "value": { "type": "StringValue", "value": "All Items" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Items
+           "uuid": "6222",
+      "attribute": "108",                // Section
+           "item": "6000",                // All Items
+          "value": { "type": "RelatedUuid", "value": "6010" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463046" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Section
+           "uuid": "6223",
+      "attribute": "105",                // Category
+           "item": "6010",                // All Items
+          "value": { "type": "RelatedUuid", "value": "146" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463078" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // All Items
+           "uuid": "6224",
+      "attribute": "102",                // Name
+           "item": "6010",                // All Items
+          "value": { "type": "StringValue", "value": "All Items" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Table
+           "uuid": "6225",
+      "attribute": "112",                // Unfiled Value
+           "item": "6010",                // All Items
+          "value": { "type": "StringValue", "value": "Table" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all items
+           "uuid": "6226",
+      "attribute": "109",                // Query
+           "item": "6010",                // All Items
+          "value": { "type": "RelatedUuid", "value": "6011" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query
+           "uuid": "6227",
+      "attribute": "105",                // Category
+           "item": "6011",                // Query for all items
+          "value": { "type": "RelatedUuid", "value": "147" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Query for all items
+           "uuid": "6228",
+      "attribute": "102",                // Name
+           "item": "6011",                // Query for all items
+          "value": { "type": "StringValue", "value": "Query for all items" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6229",
+      "attribute": "105",                // Category
+           "item": "6012",                // JavaScript: The Definitive ...
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // JavaScript: The Definitive ...
+           "uuid": "6230",
+      "attribute": "102",                // Name
+           "item": "6012",                // JavaScript: The Definitive ...
+          "value": { "type": "StringValue", "value": "JavaScript: The Definitive Guide" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // David Flanagan
+           "uuid": "6231",
+      "attribute": "3101",                // Author
+           "item": "6012",                // JavaScript: The Definitive ...
+          "value": { "type": "StringValue", "value": "David Flanagan" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // O'Reilly
+           "uuid": "6232",
+      "attribute": "3102",                // Publisher
+           "item": "6012",                // JavaScript: The Definitive ...
+          "value": { "type": "StringValue", "value": "O'Reilly" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463328" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // 0596000480
+           "uuid": "6233",
+      "attribute": "3103",                // ISBN
+           "item": "6012",                // JavaScript: The Definitive ...
+          "value": { "type": "StringValue", "value": "0596000480" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // Book
+           "uuid": "6234",
+      "attribute": "105",                // Category
+           "item": "6013",                // The Two Towers
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463375" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // The Two Towers
+           "uuid": "6235",
+      "attribute": "102",                // Name
+           "item": "6013",                // The Two Towers
+          "value": { "type": "StringValue", "value": "The Two Towers" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Value": {                             // J.R.R. Tolkien
+           "uuid": "6236",
+      "attribute": "3101",                // Author
+           "item": "6013",                // The Two Towers
+          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1114819463406" }
+  }  ], 
+  "users": ["100", "1502"]
+}
\ No newline at end of file

Copied: trunk/source/model/test_data_2005_march_item_centric_list.json (from rev 42, trunk/source/model/2005_item_centric_list.json)



From skinner at sheep.berlios.de  Sat Apr 30 03:21:21 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 30 Apr 2005 03:21:21 +0200
Subject: [openrecord-svn] r44 - trunk/documentation
Message-ID: <200504300121.j3U1LL5X023799@sheep.berlios.de>

Author: skinner
Date: 2005-04-30 03:21:20 +0200 (Sat, 30 Apr 2005)
New Revision: 44

Added:
   trunk/documentation/release_planning.txt
Log:
Started a release planning doc, with a list of possible user stories, and a list of tasks.

Added: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-04-30 00:33:47 UTC (rev 43)
+++ trunk/documentation/release_planning.txt	2005-04-30 01:21:20 UTC (rev 44)
@@ -0,0 +1,174 @@
+================================
+Release Planning
+   for release 0.1 of OpenRecord
+================================
+  
+Three iterations that last 1-month each?
+  1. May iteration
+  2. June iteration
+  3. July iteration
+  
+Release 0.1 at the start of August?
+
+
+
+
+===================================================
+"User Stories" to consider including in release 0.1
+===================================================
+ + A user can list of user stories, ordered by priority.
+
+ + A user can see a list of all known tasks.
+ + A user can see a list of all completed tasks.
+ + A user can see a list of the tasks that they have signed up for.
+ + A user can see everything that was ever saved.
+ + A user can see past versions of an item.
+ + A user can see the measured velocity for previous iterations.
+
+ + A user can log into the web site.
+ + A logged-in user can create items to track:
+    tasks, stories, bugs, iterations, and releases.
+ + A logged-in user can delete items (tasks, stories, bugs, etc.).
+ + A logged-in user can edit the attributes of a task, story, bug, etc.
+ + A logged-in user can assign a story to a release.
+ + A logged-in user can assign a task to an iteration.
+ + A logged-in user can sign up to do a task.
+ + A logged-in user can report a bug.
+ + A logged-in user can prioritize a story.
+ + Different users can prioritize stories differently.
+ 
+ + The data store is reliable. Users can trust that data won't be lost.
+ 
+
+ 
+ 
+===================================================
+Tasks
+===================================================
+
+---------------------------------------------------
+ + Figure out how to write unit tests for GUI code
+---------------------------------------------------
+ + BUG: Back button is broken
+    The browser's back button doesn't work after you click from 
+    page to page in the navbar.
+---------------------------------------------------
+ + BUG: problems with HTML in text strings
+    We still have some problems with handling text strings that 
+    have HTML in them. If an item has an attribute value with some 
+    HTML in it, like '<cite>', we incorrectly render it like 
+    '& lt;cite& gt;' instead of '<cite>'
+---------------------------------------------------
+ + Editable Detail Plugin
+    Make a new version of the current DetailPlugin.js.  The 
+    current one just lets the user view the attribute values, 
+    but we should make a better one that lets the user change 
+    the values, and add new values, and add new ad-hoc attributes.
+---------------------------------------------------
+ + List/Detail Combo Plugin
+    We could make a plugin that takes a list of items and
+    displays them in a format like what you see in a mail
+    reader or a news reader.  So you'd have some sort of
+    table-view on top, with one item per row, and then a
+    detail view below, to show more info about a single
+    item.  We could copy a lot of code from the current
+    TablePlugin.js and DetailPlugin.js, so it shouldn't be
+    too hard to make a simple read-only version.
+---------------------------------------------------
+ + Table Plugin with ad-hoc attributes
+    We should change the TablePlugin.js so that the user is
+    able to add new columns on the fly, where each new
+    column is for some new ad-hoc attribute.
+---------------------------------------------------
+ + Multi-valued attributes in table plugin
+    In the table plugin, right now if an attribute has
+    multiple values, the table plugin only shows the first
+    value, and only lets the user edit the first value. We
+    need to have the table plugin support multi-valued
+    attributes.
+---------------------------------------------------
+ + NavBar view
+    We should have a separate class for the NavBar view.
+    The NavBar should automatically update when the name of
+    a page changes, or when a new page gets added. The user
+    should be able to edit the NavBar itself to change the
+    name of a page or to create a new page. The user should
+    be able to drag the menu items up and down to re-order
+    the list.  For a drag-and-drop list example, see:
+    http://tool-man.org/examples/sorting.html
+---------------------------------------------------
+ + Be able to create new pages
+    The user should be able to create a new page in some
+    intuitive way.  Maybe by clicking on a "Add page"
+    button at the bottom of the NavBar, or something like that.
+---------------------------------------------------
+ + Be able to add a new section to a page
+    The user should be able to add a new section to a page.
+---------------------------------------------------
+ + Be able to edit the query of a section
+    The user should be able to see the query that's being
+    used to populate a section. In edit mode, the user
+    should be able to change the query criteria.
+---------------------------------------------------
+ + Support item references in table plugin
+    When editing an item in the table plugin, currently
+    everything you enter is treated as a string literal. If
+    you enter 'Book' in the column for 'Category', that
+    just creates a new string-value "Book", whereas it
+    should create an item reference to the category item
+    named "Book".
+---------------------------------------------------
+ + Be able to edit in outline mode
+    In the outline plugin, add code to handle editing. The
+    user should be able to add new items to an outline,
+    chagne existing items, indent existing items, etc.
+---------------------------------------------------
+ + Have Table plugin group by category
+    Make the Table plugin be about to to show groupings by
+    category. For example, in a table that shows a list of
+    cities, you might want to see them grouped by country.
+---------------------------------------------------
+ + Have Outline plugin group by category
+    Make the Outline plugin be able to show groupings by
+    category. For example, in an outline that shows a list of
+    cities, you might want to see them grouped by country.
+---------------------------------------------------
+ + In Outline plugin, show detail locally
+    When you click on the "more" link in an outline, the
+    detail information should show up on the current page,
+    within the current list item, rather than whisking you
+    away to a completely separate item detail page.
+---------------------------------------------------
+ + Table Plugin sorting, column changing
+   Add 'Table' plugin controls for row sorting, column
+   re-arranging, column hiding, etc.
+---------------------------------------------------
+ + add a login UI
+    Have a UI for logging in. Make sure the user is logged
+    in before allowing changes.
+---------------------------------------------------
+ + Draft a Contributor Agreement
+     We need to draft some sort of Contributor Agreement, like the Apache Contributor Agreement or the Python Contributor Agreement.
+     See:
+       http://www.apache.org/licenses/icla.txt
+       http://www.python.org/psf/contrib-form.html
+---------------------------------------------------
+ + Move this task list from here into OpenRecord!
+---------------------------------------------------
+ + search engine indexing
+    Figure out how to make sure that search engines like
+    Google are able to index all the "virtual" pages that 
+    OpenRecord serves.
+    I don't know just what's involved in making sure the search
+    engines can index a page.  That's something I'll have to
+    learn more about.  If I had to guess, I think we're going to
+    have to do two thing: (1) make each page have it's own real
+    URL, rather than using the #anchor tag scheme that
+    OpenRecord is using now, and (2) have the server generate
+    html pages that have all the content elements already in
+    place, rather than relying on client JavaScript to do all
+    the work.
+---------------------------------------------------
+
+
+



From skinner at sheep.berlios.de  Sat Apr 30 03:28:39 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 30 Apr 2005 03:28:39 +0200
Subject: [openrecord-svn] r45 - trunk/documentation
Message-ID: <200504300128.j3U1SdiR024435@sheep.berlios.de>

Author: skinner
Date: 2005-04-30 03:28:38 +0200 (Sat, 30 Apr 2005)
New Revision: 45

Modified:
   trunk/documentation/release_planning.txt
Log:
Thought of a few more tasks...

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-04-30 01:21:20 UTC (rev 44)
+++ trunk/documentation/release_planning.txt	2005-04-30 01:28:38 UTC (rev 45)
@@ -49,6 +49,12 @@
 ---------------------------------------------------
  + Figure out how to write unit tests for GUI code
 ---------------------------------------------------
+ + Have BigLumpVirtualServer.js be able to load April-2005-format chronological files
+---------------------------------------------------
+ + Create a new VirtualServer.js class that saves changes incrementally
+---------------------------------------------------
+ + Integrate the new data model code into the rest of the app
+---------------------------------------------------
  + BUG: Back button is broken
     The browser's back button doesn't work after you click from 
     page to page in the navbar.
@@ -155,6 +161,17 @@
 ---------------------------------------------------
  + Move this task list from here into OpenRecord!
 ---------------------------------------------------
+ + Consider moving from JavaDoc-style comments to reflection-based comments
+---------------------------------------------------
+ + Consider having a build system
+    A build system could:
+      * run unit tests
+      * run JSLint on the code
+      * compress the code by removing white space and comments
+      * compress the code by copying everything into a single file
+      * generate documentation
+      * remove Util.assert() statements from the code
+---------------------------------------------------
  + search engine indexing
     Figure out how to make sure that search engines like
     Google are able to index all the "virtual" pages that 



From skinner at sheep.berlios.de  Sat Apr 30 04:37:24 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 30 Apr 2005 04:37:24 +0200
Subject: [openrecord-svn] r46 - trunk/documentation
Message-ID: <200504300237.j3U2bOdr013046@sheep.berlios.de>

Author: skinner
Date: 2005-04-30 04:37:19 +0200 (Sat, 30 Apr 2005)
New Revision: 46

Modified:
   trunk/documentation/release_planning.txt
Log:
Entered more tasks into release_planning.txt.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-04-30 01:28:38 UTC (rev 45)
+++ trunk/documentation/release_planning.txt	2005-04-30 02:37:19 UTC (rev 46)
@@ -55,6 +55,22 @@
 ---------------------------------------------------
  + Integrate the new data model code into the rest of the app
 ---------------------------------------------------
+ + Refactor the code in Item.js so that values are stored per-attribute
+---------------------------------------------------
+ + Refactor the data model code so that categories cache their lists of items
+---------------------------------------------------
+ + Consider changing the class names in the data model, thusly:
+      Item.js --> Item.js
+      Entry.js --> IdentifiedRecord.js
+      Value.js --> Entry.js
+      Value.getContentData() --> Entry.getValue()
+    We might also want to add a class called Record.js, as an abstract
+    superclass for Vote, Ordinal, and IdentifiedRecord.
+---------------------------------------------------
+ + Figure out how to use the Venkman profiler, and see what's slow
+---------------------------------------------------
+ + Replace the current fake UUIDs with real UUIDs.
+---------------------------------------------------
  + BUG: Back button is broken
     The browser's back button doesn't work after you click from 
     page to page in the navbar.



