From skinner at berlios.de  Thu Dec  1 05:51:28 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Thu, 1 Dec 2005 05:51:28 +0100
Subject: [openrecord-svn] r385 - in trunk: documentation source source/view
Message-ID: <200512010451.jB14pSKK023972@sheep.berlios.de>

Author: skinner
Date: 2005-12-01 05:51:09 +0100 (Thu, 01 Dec 2005)
New Revision: 385

Modified:
   trunk/documentation/to_do_list.txt
   trunk/source/TablePlugin.js
   trunk/source/view/PluginView.js
   trunk/source/view/SectionView.js
Log:
Minor change to do lazy creation of layout-data-items. We now only create a new layout-data-item when we have layout data to save, rather than every time you create a new section or choose a new plugin view for a section.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-11-30 20:28:18 UTC (rev 384)
+++ trunk/documentation/to_do_list.txt	2005-12-01 04:51:09 UTC (rev 385)
@@ -65,7 +65,7 @@
        |          |         |  1. Research standard text representations for DateValues
        |          |         |  2. Make DateValue support date ranges
        |          |         |  3. Make ordinal value strings not grow long so quickly
-       |          |         |  4. Do lazy creation of layout data items
+brian  |          | 0.2  IED|  4. Do lazy creation of layout data items
        |          |         |  5. Make sure view code uses transactions
        |          |         |  6. Write concurrency tests 
        |          |         |  7. Ensure that PHP scripts and file I/O works for concurrent multi-user access

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-11-30 20:28:18 UTC (rev 384)
+++ trunk/source/TablePlugin.js	2005-12-01 04:51:09 UTC (rev 385)
@@ -158,11 +158,19 @@
  */
 orp.TablePlugin.prototype._getListOfColumns = function() {
   var world = this.getWorld();
-  var attributeTableColumns = world.getItemFromUuid(orp.TablePlugin.UUID.ATTRIBUTE_TABLE_COLUMNS);
-  var listOfTableColumnEntries = this._layout.getEntriesForAttribute(attributeTableColumns);
+  var useSavedListOfColumns = false;
   var displayAttributes = [];
   var anAttribute;
-  if (listOfTableColumnEntries.length > 0) {
+  
+  var layoutItem = this.getLayoutItem();
+  if (layoutItem) {
+    var attributeTableColumns = world.getItemFromUuid(orp.TablePlugin.UUID.ATTRIBUTE_TABLE_COLUMNS);
+    var listOfTableColumnEntries = layoutItem.getEntriesForAttribute(attributeTableColumns);
+    if (listOfTableColumnEntries.length > 0) {
+      useSavedListOfColumns = true;
+    }
+  }
+  if (useSavedListOfColumns) {
     // If we get here, it means this table has a saved list of user-selected
     // columns, and we just want to use that list.
     for (var i in listOfTableColumnEntries) {
@@ -175,7 +183,7 @@
     // user-selected columns, so we need to come up with a list.
     // We will build a list of display attributes by looking at all the items in 
     // the table and finding the union of all the attributes of those items.
-    var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+    var attributeCalledCategory = world.getAttributeCalledCategory();
     var hashTableOfAttributesKeyedByUuid = {};
     var attributeUuid;
     for (var j in this._listOfItems) {
@@ -194,7 +202,7 @@
       // If we have not yet identified any display attributes to use as
       // column headers, then we'll just use the "Name" attribute so that
       // our table will have at least one column.
-      var attributeCalledName = this.getWorld().getAttributeCalledName();
+      var attributeCalledName = world.getAttributeCalledName();
       attributeUuid = attributeCalledName.getUuid();
       hashTableOfAttributesKeyedByUuid[attributeUuid] = attributeCalledName;
     }
@@ -370,7 +378,10 @@
 
   // Now we need to save the new column order to the repository.
   var attributeTableColumns = world.getItemFromUuid(orp.TablePlugin.UUID.ATTRIBUTE_TABLE_COLUMNS);
-  var listOfTableColumnEntries = this._layout.getEntriesForAttribute(attributeTableColumns);
+  world.beginTransaction();
+  var createNewLayoutItemIfNecessary;
+  var layoutItem = this.getLayoutItem(createNewLayoutItemIfNecessary = true);
+  var listOfTableColumnEntries = layoutItem.getEntriesForAttribute(attributeTableColumns);
   if (listOfTableColumnEntries.length > 0) {
     // If we get here, it means this table has a saved list of user-selected
     // columns, and we just want to re-order that list.
@@ -405,16 +416,15 @@
       // the user dragged the column to the right
       this._displayAttributes.splice(indexOfDroppedOnAttribute, 0, draggedAttribute);
     }
-    world.beginTransaction();
     // alertString = "";
     for (var i in this._displayAttributes) {
       var attribute = this._displayAttributes[i];
-      this._layout.addEntry({attribute:attributeTableColumns, value:attribute});
+      layoutItem.addEntry({attribute:attributeTableColumns, value:attribute});
       // alertString += attribute.getDisplayString() + '\n';
     }
     // alert(alertString);
-    world.endTransaction();
   }
+  world.endTransaction();
   this.refresh();
 };
 
@@ -675,15 +685,6 @@
           attribute:attribute, 
           value:value, 
           inverseAttribute:inverseAttribute });
-/*
-        var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
-        if (inverseAttributeEntry) {
-          var inverseAttribute = inverseAttributeEntry.getValue(attribute);
-          newItem.addConnectionEntry(attribute, value, inverseAttribute);
-        } else {
-          newItem.addEntry({attribute:attribute, value:value});
-        }
-*/
       }
     }
   }
@@ -715,14 +716,20 @@
  */
 orp.TablePlugin.prototype._attributeEditorChanged = function(eventObject) {
   var attributeUuid = eventObject.target.value;
+  
   if (attributeUuid) {
-    var repository = this.getWorld();
-    var attributeTableColumns = repository.getItemFromUuid(orp.TablePlugin.UUID.ATTRIBUTE_TABLE_COLUMNS);
-    var entriesTableColumns = this._layout.getEntriesForAttribute(attributeTableColumns);
+    var world = this.getWorld();
+    world.beginTransaction();
+    
+    var createNewLayoutItemIfNecessary;
+    var layoutItem = this.getLayoutItem(createNewLayoutItemIfNecessary = true);
+    
+    var attributeTableColumns = world.getItemFromUuid(orp.TablePlugin.UUID.ATTRIBUTE_TABLE_COLUMNS);
+    var entriesTableColumns = layoutItem.getEntriesForAttribute(attributeTableColumns);
     var noStoredColumns = (entriesTableColumns.length === 0);
     var changedAttribute = this.getWorld().getItemFromUuid(attributeUuid);
-    var removeAttribute = orp.util.removeObjectFromSet(changedAttribute,this._displayAttributes);
-    var typeCalledItem = repository.getTypeCalledItem();
+    var removeAttribute = orp.util.removeObjectFromSet(changedAttribute, this._displayAttributes);
+    var typeCalledItem = world.getTypeCalledItem();
     if (removeAttribute) {
       for (var i in entriesTableColumns) {
         if (changedAttribute == entriesTableColumns[i].getValue()) {
@@ -736,13 +743,15 @@
     if (noStoredColumns) {
       for (i in this._displayAttributes) {
         var anAttribute = this._displayAttributes[i];
-        this._layout.addEntry({attribute:attributeTableColumns, value:anAttribute, type:typeCalledItem});
+        layoutItem.addEntry({attribute:attributeTableColumns, value:anAttribute, type:typeCalledItem});
       }
     } else {
       if (!removeAttribute) {
-        this._layout.addEntry({attribute:attributeTableColumns, value:changedAttribute, type:typeCalledItem});
+        layoutItem.addEntry({attribute:attributeTableColumns, value:changedAttribute, type:typeCalledItem});
       }
     }
+    world.endTransaction();
+    
     this._buildTable(true);
   }
 };

Modified: trunk/source/view/PluginView.js
===================================================================
--- trunk/source/view/PluginView.js	2005-11-30 20:28:18 UTC (rev 384)
+++ trunk/source/view/PluginView.js	2005-12-01 04:51:09 UTC (rev 385)
@@ -54,7 +54,7 @@
  * @param    superview    The superview for this view. 
  * @param    htmlElement    The HTMLElement to display this view in. 
  * @param    querySpec    The Query Spec item that provides the items for this PluginView to display
- * @param    layoutItem    ???. 
+ * @param    layoutItem    An item that this plugin view can use to store and retrieve any layout information, such as what columns to include in a chart. 
  * @syntax   var PluginView = new PluginView()
  */
 orp.view.PluginView = function(superview, htmlElement, querySpec, layoutItem, cssClassName) {
@@ -64,7 +64,7 @@
 
   this._querySpec = querySpec;
   this._queryRunner = this.getWorld().newQueryRunner(this._querySpec, this);
-  this._layout = layoutItem;
+  this._layoutItem = layoutItem;
   this._pluginItem = null;
 };
 
@@ -121,6 +121,27 @@
 
 
 /**
+ * Returns the layout item that this plugin view can use to store
+ * and retrieve any layout information the view wants to keep.  For
+ * example, a TableView might want to keep a list of the columns to
+ * be included in the table.
+ *
+ * @scope    public instance method
+ * @param    createFlag    Optional. Defaults to false. If true, and if there is no existing layout item, this method will try to create a new layout item for the plugin. 
+ * @return   A layout item.
+ */
+orp.view.PluginView.prototype.getLayoutItem = function(createFlag) {
+  if (createFlag && !this._layoutItem) {
+    var superview = this.getSuperview();
+    if (superview.createLayoutItemForPluginView) {
+      this._layoutItem = superview.createLayoutItemForPluginView(this);
+    }
+  }
+  return this._layoutItem;
+};
+
+
+/**
  * Does final clean-up.
  *
  * @scope    public instance method

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-11-30 20:28:18 UTC (rev 384)
+++ trunk/source/view/SectionView.js	2005-12-01 04:51:09 UTC (rev 385)
@@ -347,25 +347,19 @@
 
 
 /**
- * Returns layout data of this section for a particular plugin
- * Creates a the layout data item if doesn't exist
+ * Returns a layout item for this section for a particular plugin.
  *
  * @param    pluginTypeItem    An item representing a class of plugin
  * @return    layout data of this section for a particular plugin
  */
 orp.view.SectionView.prototype._getLayoutDataForPlugin = function(pluginTypeItem) {
-  var repository = this.getWorld();
-  var attributeLayoutData = repository.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_LAYOUT_DATA);
+  var world = this.getWorld();
+  var attributeLayoutData = world.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_LAYOUT_DATA);
   var entriesLayoutData = this._section.getEntriesForAttribute(attributeLayoutData);
-  var attributeAppliesToPlugin = repository.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_APPLIES_TO_PLUGIN);
+  var attributeAppliesToPlugin = world.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_APPLIES_TO_PLUGIN);
   if (entriesLayoutData) {
     for (var i=0; i < entriesLayoutData.length; ++i) {
-      var FIXME_OCT_7_2005_EXPERIMENT = true;
-      if (FIXME_OCT_7_2005_EXPERIMENT) {
-        var layoutItem = entriesLayoutData[i].getValue();
-      } else {
-        layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
-      }
+      var layoutItem = entriesLayoutData[i].getValue();
       var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attributeAppliesToPlugin);
       orp.lang.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
       if (entriesAppliesToPlugin[0].getValue() == pluginTypeItem) {
@@ -373,16 +367,28 @@
       }
     }
   }
+  return null;
+};
+
+
+/**
+ * Creates a layout item for this section for a particular plugin.
+ *
+ */
+orp.view.SectionView.prototype.createLayoutItemForPluginView = function(pluginView) {
+  var world = this.getWorld();
+  var pluginTypeItem = pluginView.getPluginItem();
   
-  // layoutData not found, so create the item
-  var categoryCalledLayoutData = repository.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_LAYOUT_DATA);
-  var attributeCalledSectionThisLayoutDataBelongsTo = repository.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_SECTION_THIS_LAYOUT_DATA_BELONGS_TO);
-  repository.beginTransaction();
-  layoutItem = repository.newItem("Layout data for " + pluginTypeItem.getDisplayString() + " of " + this._section.getDisplayString());
+  var categoryCalledLayoutData = world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_LAYOUT_DATA);
+  var attributeCalledSectionThisLayoutDataBelongsTo = world.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_SECTION_THIS_LAYOUT_DATA_BELONGS_TO);
+  var attributeAppliesToPlugin = world.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_APPLIES_TO_PLUGIN);
+  var attributeLayoutData = world.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_LAYOUT_DATA);
+  world.beginTransaction();
+  layoutItem = world.newItem("Layout data for " + pluginTypeItem.getDisplayString() + " of " + this._section.getDisplayString());
   layoutItem.assignToCategory(categoryCalledLayoutData);
   layoutItem.addEntry({attribute:attributeAppliesToPlugin, value:pluginTypeItem});
   this._section.addConnectionEntry(attributeLayoutData, layoutItem, attributeCalledSectionThisLayoutDataBelongsTo);
-  repository.endTransaction();
+  world.endTransaction();
   return layoutItem;
 };
 



From skinner at berlios.de  Sat Dec  3 04:58:16 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Sat, 3 Dec 2005 04:58:16 +0100
Subject: [openrecord-svn] r386 - trunk/documentation
Message-ID: <200512030358.jB33wGNH011103@sheep.berlios.de>

Author: skinner
Date: 2005-12-03 04:58:14 +0100 (Sat, 03 Dec 2005)
New Revision: 386

Added:
   trunk/documentation/data_model_api.txt
Log:
Started documentation for the data model API.

Added: trunk/documentation/data_model_api.txt
===================================================================
--- trunk/documentation/data_model_api.txt	2005-12-01 04:51:09 UTC (rev 385)
+++ trunk/documentation/data_model_api.txt	2005-12-03 03:58:14 UTC (rev 386)
@@ -0,0 +1,84 @@
+================================================================
+OpenRecord Data Model API
+================================================================
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+----------------------------------------------------------------
+
+
+----------------------------------------------------------------
+Examples of creating a new Item
+----------------------------------------------------------------
+var item   = world.newItem();
+var kermit = world.newItem("kermit");
+var utah   = world.newItem("Utah");
+var provo  = world.newItem("Provo");
+
+
+----------------------------------------------------------------
+Examples of creating a new Attribute
+----------------------------------------------------------------
+var color     = world.newAttribute("Fabric Color");
+var locatedIn = world.newAttribute("Located in");
+var cities    = world.newAttribute("Cities");
+var foo       = world.newAttribute();
+
+
+----------------------------------------------------------------
+Examples of adding an Entry to an Item
+----------------------------------------------------------------
+// example: adding two entries for the same attribute
+kermit.addEntry({attribute: color, value: "blue"});
+kermit.addEntry({attribute: color, value: "green"});
+
+// example: adding a value for no particular attribute
+kermit.addEntry({value: "green"});
+
+// example: creating an entry of different types
+item.addEntry({attribute: foo, value: "2004", type: typeNumber});
+item.addEntry({attribute: foo, value: "2004", type: typeDate});
+item.addEntry({attribute: foo, value: "2004", type: typeString});
+
+
+----------------------------------------------------------------
+Examples of adding an Entry that connects two Items
+----------------------------------------------------------------
+utah.addEntry({attribute: cities, value: provo, inverseAttribute: locatedIn});
+
+
+----------------------------------------------------------------
+Examples of replacing one Entry with a different Entry
+----------------------------------------------------------------
+// example: replacing an entry -- changing the value
+var blueEntry = item.addEntry({attribute: color, value: "blue"});
+item.replaceEntry({previousEntry: blueEntry, value: "green"});
+
+// example: replacing an entry -- changing the type
+var dateEntry = item.addEntry({value: "2004", type: typeDate});
+item.replaceEntry({previousEntry: dateEntry, value: "2004", type: typeNumber});
+
+// example: replacing an entry -- changing the attribute
+var blue = item.addEntry({attribute: color, value: "blue"});
+item.replaceEntry({attribute: eyeColor, previousEntry: blue});
+
+// example: replacing an entry -- "addEntry" as a synonym for "replaceEntry"
+var blueEntry = item.addEntry({attribute: color, value: "blue"});
+item.addEntry({previousEntry: blueEntry, value: "green"});
+
+
+----------------------------------------------------------------
+Examples of getting information about items
+----------------------------------------------------------------
+var listOfAttributes = kermit.getAttributes();
+for (var i in listOfAttributes) {
+  var attribute = listOfAttributes[i];
+  var attributeName = attribute.getDisplayString();
+  var listOfValues = kermit.getValuesForAttribute(attribute);
+  for (var j in listOfValues) {
+    var value = listOfValues[j];
+    alert('Kermit has a "' + attributeName + '" value of "' + value + '"');
+  }
+}
+
+



From skinner at berlios.de  Sat Dec  3 05:06:48 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Sat, 3 Dec 2005 05:06:48 +0100
Subject: [openrecord-svn] r387 - in trunk: documentation source/archive source/model source/util source/view tests/view
Message-ID: <200512030406.jB346m6l013656@sheep.berlios.de>

Author: skinner
Date: 2005-12-03 05:06:39 +0100 (Sat, 03 Dec 2005)
New Revision: 387

Modified:
   trunk/documentation/to_do_list.txt
   trunk/source/archive/JsonDeserializer.js
   trunk/source/archive/StubArchive.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/util/XmlConverter.js
   trunk/source/view/EntryView.js
   trunk/source/view/MultiEntriesView.js
   trunk/source/view/PageView.js
   trunk/source/view/SectionView.js
   trunk/tests/view/SectionViewConstructorTest.js
Log:
Deleted all the old code that had be disabled in "FIXME_OCT_7_2005" blocks.  Deleted some lingering remnants of the old data model API, and updated everything to use the new data model methods.  Added more value-checking logic to the _createNewEntry method on Item, so that a new entry is only created when it is not identical to the entry that it replaces.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/documentation/to_do_list.txt	2005-12-03 04:06:39 UTC (rev 387)
@@ -106,6 +106,8 @@
        |          |         | 14. Write one performance test that measures the time some code takes
        |          |         | 15. Convert UI code from DOM level 0 to DOM level 2
        |          |         | 16. Start process for doing ongoing code reviews
+       |          |         |     grep for ".getEntriesForAttribute(" and refactor to use ".getValuesForAttribute("
+       |          |         |     Maybe change all our indenting from spaces to tabs, to be in sync with dojo
 -------+----------+---------+----------------------------------------------
 
 

Modified: trunk/source/archive/JsonDeserializer.js
===================================================================
--- trunk/source/archive/JsonDeserializer.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/archive/JsonDeserializer.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -214,20 +214,7 @@
           var firstAttribute = archiveLoader.getItemFromUuidOrBootstrapItem(firstAttributeUuid);
           var secondAttribute = archiveLoader.getItemFromUuidOrBootstrapItem(secondAttributeUuid);
           
-          var FIXME_OCT_7_2005_EXPERIMENT = true;
-          if (FIXME_OCT_7_2005_EXPERIMENT) {
-            /* 
-            if (entryUuid == "e3320eb0-0c70-11da-beea-000c414ce854") {
-              alert("rehydrating Entry e3320eb0-0c70-11da-beea-000c414ce854");
-              // alert("dataType: " + dataType.getDisplayString());
-            }
-            */
-            entry._reviveConnection(firstItem, firstAttribute, secondItem, secondAttribute, previousEntry);
-          } else {
-            var pairOfItems = [firstItem, secondItem];
-            var pairOfAttributes = [firstAttribute, secondAttribute];
-            entry._revive(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
-          }
+          entry._reviveConnection(firstItem, firstAttribute, secondItem, secondAttribute, previousEntry);
         } else {
           itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
           item = archiveLoader.getItemFromUuidOrBootstrapItem(itemUuid);

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/archive/StubArchive.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -375,24 +375,15 @@
   var entry = new orp.model.Entry(this._world, uuid);
   entry._initializeConnection(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
 
-  var FIXME_OCT_7_2005_EXPERIMENT = true;
-  if (FIXME_OCT_7_2005_EXPERIMENT) {
-    var proxyOne = new orp.model.ProxyEntry(entry, itemOne, attributeOne, itemTwo, attributeTwo);
-    var proxyTwo = new orp.model.ProxyEntry(entry, itemTwo, attributeTwo, itemOne, attributeOne);
-    itemOne._addEntryToListOfEntriesForAttribute(proxyOne, attributeOne);
-    itemTwo._addEntryToListOfEntriesForAttribute(proxyTwo, attributeTwo);
-  } else {
-    itemOne._addEntryToListOfEntriesForAttribute(entry, attributeOne);
-    itemTwo._addEntryToListOfEntriesForAttribute(entry, attributeTwo);
-  }
+  var proxyOne = new orp.model.ProxyEntry(entry, itemOne, attributeOne, itemTwo, attributeTwo);
+  var proxyTwo = new orp.model.ProxyEntry(entry, itemTwo, attributeTwo, itemOne, attributeOne);
+  itemOne._addEntryToListOfEntriesForAttribute(proxyOne, attributeOne);
+  itemTwo._addEntryToListOfEntriesForAttribute(proxyTwo, attributeTwo);
 
   this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
   this._currentTransaction.addRecord(entry);
   
-  if (FIXME_OCT_7_2005_EXPERIMENT) {
-    entry = proxyOne;
-  }
-  return entry;
+  return proxyOne;
 };
 
 

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/model/Entry.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -224,24 +224,21 @@
  * @param    previousEntry    Optional. An old entry that this entry replaces. 
  */
 orp.model.Entry.prototype._reviveConnection = function(firstItem, firstAttribute, secondItem, secondAttribute, previousEntry) {
-  var FIXME_OCT_7_2005_EXPERIMENT = true;
-  if (FIXME_OCT_7_2005_EXPERIMENT) {
-    if (previousEntry) {
-      this._previousEntry = previousEntry;
-      this._previousEntry._addSubsequentEntry(this);
-    } else {
-      this._previousEntry = null;
-    }
-    this._item = [firstItem, secondItem];
-    this._attribute = [firstAttribute, secondAttribute];
-    this._value = null;
-    this._type = this.getWorld().getTypeCalledConnection();
-    
-    var firstProxy = new orp.model.ProxyEntry(this, firstItem, firstAttribute, secondItem, secondAttribute);
-    var secondProxy = new orp.model.ProxyEntry(this, secondItem, secondAttribute, firstItem, firstAttribute);
-    firstItem._addRevivedEntry(firstProxy, firstAttribute);
-    secondItem._addRevivedEntry(secondProxy, secondAttribute);
+  if (previousEntry) {
+    this._previousEntry = previousEntry;
+    this._previousEntry._addSubsequentEntry(this);
+  } else {
+    this._previousEntry = null;
   }
+  this._item = [firstItem, secondItem];
+  this._attribute = [firstAttribute, secondAttribute];
+  this._value = null;
+  this._type = this.getWorld().getTypeCalledConnection();
+  
+  var firstProxy = new orp.model.ProxyEntry(this, firstItem, firstAttribute, secondItem, secondAttribute);
+  var secondProxy = new orp.model.ProxyEntry(this, secondItem, secondAttribute, firstItem, firstAttribute);
+  firstItem._addRevivedEntry(firstProxy, firstAttribute);
+  secondItem._addRevivedEntry(secondProxy, secondAttribute);
 };
 
 
@@ -296,67 +293,6 @@
 
 
 /**
- * If this is a ConnectionEntry, given one of the two connected items, this
- * method returns the attribute that this entry was assigned to in that item.
- *
- * @scope    public instance method
- * @param    item    The item that this is an entry of. 
- * @return   An attribute item.
- */
-orp.model.Entry.prototype.getAttributeForItem = function(item) {
-  var FIXME_OCT_7_2005_EXPERIMENT = true;
-  if (FIXME_OCT_7_2005_EXPERIMENT) {
-    orp.lang.assert(false);  // we should never get called
-  } else {
-    if (this._item == item) {
-      return this._attribute;
-    }
-    if (dojo.lang.isArray(this._item)) {
-      if (this._item[0] == item) {
-        return this._attribute[0];
-      }
-      if (this._item[1] == item) {
-        return this._attribute[1];
-      }
-    }
-    return null;
-  }
-};
-
-
-/**
- * If this is a ConnectionEntry, given one of the two connected items, this
- * method returns the other connected item.
- *
- * @scope    public instance method
- * @param    item    The item that this is an entry of. 
- * @return   The item that is connected to the given item.
- */
-orp.model.Entry.prototype.getConnectedItem = function(item) {
-  var FIXME_OCT_7_2005_EXPERIMENT = true;
-  if (FIXME_OCT_7_2005_EXPERIMENT) {
-    orp.lang.assert(false);  // we should never get called
-  } else {
-    orp.lang.assert(item instanceof orp.model.Item);
-    if (this._item == item) {
-      if (this._type == this.getWorld().getTypeCalledItem()) {
-        return this._value;
-      }
-    }
-    if (dojo.lang.isArray(this._item)) {
-      if (this._item[0] == item) {
-        return this._item[1];
-      }
-      if (this._item[1] == item) {
-        return this._item[0];
-      }
-    }
-    return null;
-  }
-};
-
-
-/**
  * Returns the value that this entry holds.
  *
  * @scope    public instance method

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/model/Item.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -216,6 +216,7 @@
  */
 orp.model.Item.prototype._createNewEntry = function(previousEntry, attribute, value, type, inverseAttribute) {
   var newEntry;
+  var world = this.getWorld();
   
   if (inverseAttribute) {
     var otherItem = value;
@@ -225,10 +226,11 @@
     orp.lang.assert(otherItem instanceof orp.model.Item);
     orp.lang.assert(myAttribute instanceof orp.model.Item);
   
-    // If we've just been asked to replace the string "Foo" with the string "Foo",
+    // If we've just been asked to replace a connection to the item Foo with 
+    // an identical connection to the item Foo,
     // then don't even bother creating a new entry. 
     if (previousEntry) {
-      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
+      if (previousEntry.getType() == world.getTypeCalledConnection()) {
         var oldItem = previousEntry.getItem();
         var oldAttribute = previousEntry.getAttribute();
         var oldValue = previousEntry.getValue();
@@ -245,38 +247,84 @@
     // If we've just been asked to replace the string "Foo" with the string "Foo",
     // then don't even bother creating a new entry. 
     if (previousEntry) {
-      oldValue = previousEntry.getValue();
       oldAttribute = previousEntry.getAttribute();
+      if (oldAttribute == attribute) {
+        var typeCalledText = world.getTypeCalledText();
+        var typeCalledDate = world.getTypeCalledDate();
+        var typeCalledNumber = world.getTypeCalledNumber();
+        var typeCalledItem = world.getTypeCalledItem();
+        var typeCalledConnection = world.getTypeCalledConnection();
+        oldValue = previousEntry.getValue();
+        switch (previousEntry.getType()) {
+          case typeCalledText:
+            if (dojo.lang.isString(value) && (oldValue == value)) {
+              return null;
+            }
+            break;
+          case typeCalledDate:
+            if (value instanceof Date) {
+              if ((oldValue.valueOf() == value.valueOf()) &&
+                (oldValue._hasTime == value._hasTime) &&
+                (oldValue._hasDay == value._hasDay) && 
+                (oldValue._hasMonth == value._hasMonth)) {
+                return null;
+              }
+            }
+            break;
+          case typeCalledNumber:
+            if (dojo.lang.isNumber(value) && (oldValue == value)) {
+              return null;
+            }
+            break;
+          case typeCalledItem:
+            if ((value instanceof Item) && (oldValue == value)) {
+              return null;
+            }
+            break;
+          case typeCalledConnection:
+            if ((value instanceof Item) && (oldValue == value)) {
+              // FIXME: 
+              // need to do a slightly complicated check here
+              // we should re-factor this to combine it with the code
+              // above -- see: "if (inverseAttribute) {"
+            }
+            break;
+          default:
+            orp.lang.assert(false); // We should never get here
+            break;
+        }
+      }
+      // FIXME: this works for string values, but it doesn't work for date values
       if ((oldValue == value) && (oldAttribute == attribute)) {
         return null;
       }
     }
   }
   
-  this.getWorld().beginTransaction();
+  world.beginTransaction();
   if (this._provisionalFlag) {
     this._provisionalFlag = false;
-    this.getWorld()._provisionalItemJustBecameReal(this);
+    world._provisionalItemJustBecameReal(this);
   }
   if (inverseAttribute) {
     if (otherItem._provisionalFlag) {
       otherItem._provisionalFlag = false;
-      this.getWorld()._provisionalItemJustBecameReal(otherItem);
+      world._provisionalItemJustBecameReal(otherItem);
     }
     if (!otherAttribute) {
-      otherAttribute = this.getWorld().getAttributeCalledUnfiled();
+      otherAttribute = world.getAttributeCalledUnfiled();
     }
-    newEntry = this.getWorld()._newConnectionEntry(previousEntry, this, myAttribute, otherItem, otherAttribute);
+    newEntry = world._newConnectionEntry(previousEntry, this, myAttribute, otherItem, otherAttribute);
   } else {
-    newEntry = this.getWorld()._newEntry(this, previousEntry, attribute, value, type);
+    newEntry = world._newEntry(this, previousEntry, attribute, value, type);
   }
-  this.getWorld().endTransaction();
+  world.endTransaction();
   this._noteChanges(null);
   if (inverseAttribute) {
     otherItem._noteChanges(null);
     if (previousEntry) {
       previousEntry.getItem()._noteChanges(null);
-      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
+      if (previousEntry.getType() == world.getTypeCalledConnection()) {
         previousEntry.getValue()._noteChanges(null);
       }
     }
@@ -289,37 +337,45 @@
 /**
  * Creates a new entry object representing a connection between two
  * items.
- * For example, to make a Tolkien be the author of The Hobbit:
+ * For example, to make Tolkien be the author of The Hobbit:
  * <pre>
- *    theHobbit.addConnectionEntry(author, tolkien, booksAuthored);
+ *    theHobbit.addConnectionEntry({
+ *      attribute: author, 
+ *      value: tolkien,
+ *      inverseAttribute: booksAuthored });
  * </pre>
  * Or you could get exactly the same result by doing the reverse:
  * <pre>
- *    tolkien.addConnectionEntry(booksAuthored, theHobbit, author);
+ *    tolkien.addConnectionEntry({
+ *      attribute: booksAuthored, 
+ *      value: theHobbit,
+ *      inverseAttribute: author });
  * </pre>
  *
  * @scope    public instance method
- * @param    myAttribute    The attribute to assign the entry to. 
- * @param    otherItem    The item to create a connection to.
- * @param    otherAttribute    Optional. An attribute of the otherItem to assign the entry to on the otherItem.
+ * @namedParam    attribute    Optional. The attribute to assign the entry to. 
+ * @namedParam    value    The item to create a connection to.
+ * @namedParam    previousEntry    Optional. The old entry to be replaced.
+ * @namedParam    inverseAttribute    Optional. The attribute to use as the inverseAttribute of 'attribute'.
  * @return   The new entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-orp.model.Item.prototype.addConnectionEntry = function(myAttribute, otherItem, otherAttribute) {
+orp.model.Item.prototype.addConnectionEntry = function(namedParameters) {
+  orp.lang.assert(dojo.lang.isObject(namedParameters));
+
   var typeCalledConnection = this.getWorld().getTypeCalledConnection();
-  return this._createNewEntry(null, myAttribute, otherItem, typeCalledConnection, otherAttribute);
+  var type = namedParameters[orp.model.Item.NamedParameters.type];
+  if (type) {
+    orp.lang.assert(type == typeCalledConnection);
+  } else {
+    namedParameters[orp.model.Item.NamedParameters.type] = typeCalledConnection;
+  }
+  
+  return this.addEntry(namedParameters);
 };
 
 
-/**
- *
- */
-orp.model.Item.prototype.replaceEntryWithConnection = function(previousEntry, myAttribute, otherItem, otherAttribute) {
-  var typeCalledConnection = this.getWorld().getTypeCalledConnection();
-  return this._createNewEntry(previousEntry, myAttribute, otherItem, typeCalledConnection, otherAttribute);
-};
 
-
 /**
  * Given a category, this method puts the item in that category.
  *
@@ -329,7 +385,11 @@
 orp.model.Item.prototype.assignToCategory = function(category) {
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
-  this.addConnectionEntry(attributeCalledCategory, category, attributeCalledItemsInCategory);
+  this.addEntry({
+    attribute: attributeCalledCategory, 
+    value: category,
+    inverseAttribute: attributeCalledItemsInCategory });
+  // this.addConnectionEntry(attributeCalledCategory, category, attributeCalledItemsInCategory);
 };
 
 
@@ -580,15 +640,17 @@
 
 
 /**
- * Returns just the first entry of an item's attribute.
+ * Returns just the first entry of an item's attribute.  
+ * Returns null if the item does not have any entries for the given
+ * attribute.
  *
  * @scope    public instance method
  * @param    attribute    An item representing an attribute. 
- * @return   A string with a description of the item.
+ * @return   An Entry object, or null.
  */
 orp.model.Item.prototype.getSingleEntryFromAttribute = function(attribute) {
   var listOfEntries = this.getEntriesForAttribute(attribute);
-  if (listOfEntries) {
+  if (listOfEntries && (listOfEntries.length > 0)) {
     return listOfEntries[0];
   }
   return null;
@@ -596,16 +658,18 @@
 
 
 /**
- * Returns just the first entry of an item's attribute.
+ * Returns the value held in the first entry of an item's attribute. 
+ * Returns null if the item does not have any entries for the given
+ * attribute.
  *
  * @scope    public instance method
  * @param    attribute    An item representing an attribute. 
- * @return   A string with a description of the item.
+ * @return   A data value, or null.
  */
 orp.model.Item.prototype.getSingleValueFromAttribute = function(attribute) {
-  var listOfEntries = this.getEntriesForAttribute(attribute);
-  if (listOfEntries[0]) {
-    return listOfEntries[0].getValue();
+  var firstEntry = this.getSingleEntryFromAttribute(attribute);
+  if (firstEntry) {
+    return firstEntry.getValue();
   }
   return null;
 };

Modified: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/util/XmlConverter.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -319,13 +319,6 @@
         attribute: xmlToAttributeSpecifier._attribute, 
         value: value,
         inverseAttribute: xmlToAttributeSpecifier._inverseAttribute });
-/*
-      if (xmlToAttributeSpecifier._inverseAttribute) {
-        newItem.addConnectionEntry(xmlToAttributeSpecifier._attribute, value, xmlToAttributeSpecifier._inverseAttribute);
-      } else {
-        newItem.addEntry({attribute:xmlToAttributeSpecifier._attribute, value:value});
-      }
-*/
     }
     return;
   }

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/view/EntryView.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -71,12 +71,6 @@
 orp.view.EntryView = function(superview, htmlElement, item, attribute, entry, isMultiLine) {
   orp.lang.assert(item instanceof orp.model.Item);
   orp.lang.assert(attribute instanceof orp.model.Item); // PENDING need to check that attribute is an attribute
-  var FIXME_OCT_7_2005_EXPERIMENT = true;
-  if (FIXME_OCT_7_2005_EXPERIMENT) {
-    // could be an orp.model.Entry or an orp.model.ProxyEntry
-  } else {
-    orp.lang.assertTypeForOptionalValue(entry, orp.model.Entry);
-  }
   
   orp.view.View.call(this, superview, htmlElement, "EntryView");
 
@@ -478,17 +472,15 @@
     this.getWorld().beginTransaction();
     value = this._transformToExpectedType(value);
 
-    var oldValue = null;
-    if (this._entry) {oldValue = this._entry.getValue(this._item);}
-    if (oldValue != value) {
-      var attributeCalledInverseAttribute = this.getWorld().getAttributeCalledInverseAttribute();
-      var inverseAttributeEntry = this._attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
-      if (inverseAttributeEntry) {
-        var inverseAttr = inverseAttributeEntry.getValue(this._attribute);
-        this._entry = this._item.replaceEntryWithConnection(this._entry, this._attribute, value, inverseAttr);
-      } else {
-        this._entry = this._item.replaceEntry({previousEntry:this._entry, attribute:this._attribute, value:value});
-      }
+    var attributeCalledInverseAttribute = this.getWorld().getAttributeCalledInverseAttribute();
+    var inverseAttribute = this._attribute.getSingleValueFromAttribute(attributeCalledInverseAttribute);
+    var newEntry = this._item.replaceEntry({
+      previousEntry: this._entry, 
+      attribute: this._attribute, 
+      value: value,
+      inverseAttribute: inverseAttribute });
+    if (newEntry) {
+      this._entry = newEntry;
       var superview = this.getSuperview();
       if (this._isProvisional && superview._provisionalItemJustBecomeReal) {
         superview._provisionalItemJustBecomeReal(this._item);
@@ -498,6 +490,7 @@
       }
       this._setClassName();
     }
+
     this.getWorld().endTransaction();
   }
   this._restoreText(true); // call restore text in case item is transformed (e.g. Dates will be normalized)
@@ -514,13 +507,7 @@
     return this._provisionalText;
   }
   if (this._entry) {
-    var FIXME_OCT_7_2005_EXPERIMENT = true;
-    if (FIXME_OCT_7_2005_EXPERIMENT) {
-      var text = this._entry.getDisplayString();
-    } else {
-      // var text = this._item.getDisplayStringForEntry(this._entry);
-      text = this._item.getDisplayStringForEntry(this._entry);
-    }
+    var text = this._entry.getDisplayString();
     if (useNonBreakingSpaces) {
       var dataType = this._entry.getType();
       if (dataType != this.getWorld().getTypeCalledText()) {

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/view/MultiEntriesView.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -240,19 +240,19 @@
   if (!this.hasEntry(droppedEntry)) {
     var newEntry;
     if (droppedEntry.getType() == this.getWorld().getTypeCalledConnection()) {
-      var FIXME_OCT_7_2005_EXPERIMENT = true;
-      if (FIXME_OCT_7_2005_EXPERIMENT) {
-        var inverseItem = droppedEntry.getValue();
-        var inverseAttribute = droppedEntry.getInverseAttribute();
-        newEntry = this._item.replaceEntryWithConnection(droppedEntry, this._attribute, inverseItem, inverseAttribute);
-      } else {
-        var otherItem = droppedEntry.getConnectedItem(draggedEntryView._item);
-        var otherAttribute = droppedEntry.getAttributeForItem(otherItem);
-        newEntry = this._item.replaceEntryWithConnection(droppedEntry, this._attribute, otherItem, otherAttribute);
-      }
+      var inverseItem = droppedEntry.getValue();
+      var inverseAttribute = droppedEntry.getInverseAttribute();
+      newEntry = this._item.replaceEntry({
+        previousEntry: droppedEntry, 
+        attribute: this._attribute, 
+        value: inverseItem,
+        inverseAttribute: inverseAttribute });
     } else {
-      // newEntry = this._item.replaceEntry(droppedEntry, droppedEntry.getValue(), droppedEntry.getType());
-      newEntry = this._item.replaceEntry({previousEntry:droppedEntry, attribute:this._attribute, value:droppedEntry.getValue(), type:droppedEntry.getType()});
+      newEntry = this._item.replaceEntry({
+        previousEntry: droppedEntry, 
+        attribute: this._attribute, 
+        value: droppedEntry.getValue(), 
+        type: droppedEntry.getType() });
     }
     this._addEntryView(newEntry);
 

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/view/PageView.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -96,31 +96,39 @@
 // -------------------------------------------------------------------
 
 /**
- * Creates a new section in the repository
+ * Creates a new section in a page
  *
  * @scope    public class method
  * @param    inPage    The Page Item to insert the new section into
  */
-orp.view.PageView.newSection = function(repository, inPage) {
-  var attributeCalledQuerySpec = repository.getAttributeCalledQuerySpec();
-  var categoryCalledQuery = repository.getCategoryCalledQuery();
-  var attributeCalledPluginView = repository.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_PLUGIN_VIEW);
-  var attributeCalledSectionsInPage = repository.getItemFromUuid(orp.view.PageView.UUID.ATTRIBUTE_SECTIONS_IN_PAGE);
-  var attributeCalledPageThisSectionAppearsOn = repository.getItemFromUuid(orp.view.PageView.UUID.ATTRIBUTE_PAGE_THIS_SECTION_APPEARS_ON);
-  var attributeCalledSectionThisQueryBelongsTo = repository.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_SECTION_THIS_QUERY_BELONGS_TO);
-  var categoryCalledSection = repository.getItemFromUuid(orp.view.RootView.UUID.CATEGORY_SECTION);
-  var tablePluginView = repository.getItemFromUuid(orp.TablePlugin.UUID.PLUGIN_VIEW_TABLE);
+orp.view.PageView.newSection = function(world, inPage) {
+  var attributeCalledQuerySpec = world.getAttributeCalledQuerySpec();
+  var categoryCalledQuery = world.getCategoryCalledQuery();
+  var attributeCalledPluginView = world.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_PLUGIN_VIEW);
+  var attributeCalledSectionsInPage = world.getItemFromUuid(orp.view.PageView.UUID.ATTRIBUTE_SECTIONS_IN_PAGE);
+  var attributeCalledPageThisSectionAppearsOn = world.getItemFromUuid(orp.view.PageView.UUID.ATTRIBUTE_PAGE_THIS_SECTION_APPEARS_ON);
+  var attributeCalledSectionThisQueryBelongsTo = world.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_SECTION_THIS_QUERY_BELONGS_TO);
+  var categoryCalledSection = world.getItemFromUuid(orp.view.RootView.UUID.CATEGORY_SECTION);
+  var tablePluginView = world.getItemFromUuid(orp.TablePlugin.UUID.PLUGIN_VIEW_TABLE);
   
-  repository.beginTransaction();
-  var newSection = repository.newItem("New Section");
+  world.beginTransaction();
+  var newSection = world.newItem("New Section");
   newSection.assignToCategory(categoryCalledSection);
-  inPage.addConnectionEntry(attributeCalledSectionsInPage, newSection, attributeCalledPageThisSectionAppearsOn);
+  inPage.addEntry({
+    attribute: attributeCalledSectionsInPage, 
+    value: newSection,
+    inverseAttribute: attributeCalledPageThisSectionAppearsOn });
+  // inPage.addConnectionEntry(attributeCalledSectionsInPage, newSection, attributeCalledPageThisSectionAppearsOn);
   newSection.addEntry({attribute:attributeCalledPluginView, value:tablePluginView});
 
-  var newQuery = repository.newItem("New Query");
+  var newQuery = world.newItem("New Query");
   newQuery.assignToCategory(categoryCalledQuery);
-  newSection.addConnectionEntry(attributeCalledQuerySpec, newQuery, attributeCalledSectionThisQueryBelongsTo);
-  repository.endTransaction();
+  newSection.addEntry({
+    attribute: attributeCalledQuerySpec, 
+    value: newQuery,
+    inverseAttribute: attributeCalledSectionThisQueryBelongsTo });
+  // newSection.addConnectionEntry(attributeCalledQuerySpec, newQuery, attributeCalledSectionThisQueryBelongsTo);
+  world.endTransaction();
   return newSection;
 };
 
@@ -203,13 +211,7 @@
    
   for (var key in listOfEntriesForSections) {
     var entryForSection = listOfEntriesForSections[key];
-    var FIXME_OCT_7_2005_EXPERIMENT = true;
-    if (FIXME_OCT_7_2005_EXPERIMENT) {
-      var section = entryForSection.getValue();
-    } else {
-      // var section = entryForSection.getConnectedItem(this._pageItem);
-      section = entryForSection.getConnectedItem(this._pageItem);
-    }
+    var section = entryForSection.getValue();
     if (section) {
       if (PENDING_include_links_to_sections && sectionNavigatorDiv) {
         orp.view.View.appendNewElement(sectionNavigatorDiv, "a", null, {'href' : '#' + section.getUuidString()}, section.getDisplayName());

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/source/view/SectionView.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -170,9 +170,6 @@
   TEXT_FIELD_IN_TABLE_CELL: "text_field_in_table_cell",
   SELECTED: "selected",
   MORE_LINK: "more" };
-
-// orp.view.SectionView.elementId = {
-//  SELECT_MENU_PREFIX: "select_menu_" };
   
 // TablePlugin.UUID.ATTRIBUTE_TABLE_COLUMNS  = "0004010a-ce7f-11d9-8cd5-0011113ae5d6";
 // orp.view.EntryView.UUID.ATTRIBUTE_NOT_LOZENGE      = "0004010f-ce7f-11d9-8cd5-0011113ae5d6";
@@ -255,16 +252,7 @@
  */
 orp.view.SectionView.prototype.getQuerySpec = function() {
   var attributeCalledQuerySpec = this.getWorld().getAttributeCalledQuerySpec();
-  var queryEntry = this._section.getSingleEntryFromAttribute(attributeCalledQuerySpec);
-  if (queryEntry) {
-    var FIXME_OCT_7_2005_EXPERIMENT = true;
-    if (FIXME_OCT_7_2005_EXPERIMENT) {
-      return queryEntry.getValue();
-    } else {
-      return queryEntry.getConnectedItem(this._section);
-    }
-  }
-  return null;
+  return this._section.getSingleValueFromAttribute(attributeCalledQuerySpec);
 };
 
 
@@ -387,7 +375,10 @@
   layoutItem = world.newItem("Layout data for " + pluginTypeItem.getDisplayString() + " of " + this._section.getDisplayString());
   layoutItem.assignToCategory(categoryCalledLayoutData);
   layoutItem.addEntry({attribute:attributeAppliesToPlugin, value:pluginTypeItem});
-  this._section.addConnectionEntry(attributeLayoutData, layoutItem, attributeCalledSectionThisLayoutDataBelongsTo);
+  this._section.addEntry({
+    attribute: attributeLayoutData, 
+    value: layoutItem,
+    inverseAttribute: attributeCalledSectionThisLayoutDataBelongsTo });
   world.endTransaction();
   return layoutItem;
 };

Modified: trunk/tests/view/SectionViewConstructorTest.js
===================================================================
--- trunk/tests/view/SectionViewConstructorTest.js	2005-12-03 03:58:14 UTC (rev 386)
+++ trunk/tests/view/SectionViewConstructorTest.js	2005-12-03 04:06:39 UTC (rev 387)
@@ -184,10 +184,8 @@
   var bogusPluginItem = world.newItem("BogusPluginItem");
   bogusPluginItem.addEntry({attribute: world.getAttributeCalledClassName(),
                            value: "BogusPlugin"});
-  var uuid = orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW;
-  bogusPluginItem.addConnectionEntry(world.getAttributeCalledCategory(),
-                                     world.getItemFromUuid(uuid),
-                                     world.getAttributeCalledItemsInCategory());
+  var categoryCalledPluginView = world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW);
+  bogusPluginItem.assignToCategory(categoryCalledPluginView);
 
   var exceptionCaught = false;
   try {



From skinner at berlios.de  Tue Dec  6 02:19:17 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 6 Dec 2005 02:19:17 +0100
Subject: [openrecord-svn] r388 - in trunk/source/plugins: . create_new_plugin
Message-ID: <200512060119.jB61JHBs029557@sheep.berlios.de>

Author: skinner
Date: 2005-12-06 02:19:12 +0100 (Tue, 06 Dec 2005)
New Revision: 388

Added:
   trunk/source/plugins/create_new_plugin/
   trunk/source/plugins/create_new_plugin/create_new_plugin.html
   trunk/source/plugins/create_new_plugin/create_new_plugin.js
   trunk/source/plugins/create_new_plugin/create_new_plugin_template.js
Log:
Made the "create_new_plugin" folder, with an HTML/JavaScript tool for generating new plugins.

Added: trunk/source/plugins/create_new_plugin/create_new_plugin.html
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.html	2005-12-03 04:06:39 UTC (rev 387)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.html	2005-12-06 01:19:12 UTC (rev 388)
@@ -0,0 +1,58 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by
+   Brian Douglas Skinner <brian.skinner at gumption.org>
+   Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Create New Plugin for OpenRecord</title>
+    <script type="text/javascript" src="../../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="create_new_plugin.js"></script>
+  </head>
+  
+  <body>
+    <div>
+      <h1>OpenRecord Plugin Generator</h1>
+      <p>To create a new plugin, fill out this form and hit the button.</p>
+      <form>
+        ClassName: <input id="plugin_class_name" maxLength=250 value="MySuperFooView" size=50 /><br/>
+        Display Name: <input id="plugin_name" maxLength=250 value="Super Foo" size=50 /><br/>
+        Author: <input id="plugin_author" maxLength=250 value="Carol Coder" size=50 /><br/>
+        <input id="button" type="button" value="Create Plugin" />
+      </form>
+      <textarea id="output_area" rows="20" cols="80"></textarea>
+    </div>
+    
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+
+  </body>
+  
+</html>
+

Added: trunk/source/plugins/create_new_plugin/create_new_plugin.js
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-03 04:06:39 UTC (rev 387)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-06 01:19:12 UTC (rev 388)
@@ -0,0 +1,97 @@
+/*****************************************************************************
+ create_new_plugin.js
+ 
+******************************************************************************
+ Written in 2005 by 
+   Brian Douglas Skinner <brian.skinner at gumption.org>
+   Mignon Belongie
+
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+dojo.hostenv.setModulePrefix("orp", "../../../source"); // relative to dojo
+dojo.require("dojo.text.*");
+dojo.require("dojo.event.*");
+dojo.require("orp.uuid.TimeBasedUuid");
+
+function startHere() {
+  var createButton = document.getElementById("button");
+  dojo.event.connect(createButton, "onclick", userClickedOnButton);
+
+  var outputArea = document.getElementById("output_area");
+  outputArea.style.visibility = "hidden";
+}
+
+function userClickedOnButton() {
+  var classNameField = document.getElementById("plugin_class_name");
+  var nameField = document.getElementById("plugin_name");
+  var authorField = document.getElementById("plugin_author");
+  var outputArea = document.getElementById("output_area");
+  
+  var className = classNameField.value;
+  var name      = nameField.value;
+  var author    = authorField.value;
+
+  var generatedContents = generateContents(className, name, author);
+
+  outputArea.value = generatedContents;
+  outputArea.style.visibility = "visible";
+  // alert(generatedContents);
+  
+  // var uuid = new orp.uuid.TimeBasedUuid();
+  // alert(uuid);
+  
+  // var string = "     Just Foo    ";
+  // var trimmedString = dojo.text.trim(string);
+  // alert(trimmedString);
+}
+
+function generateContents(className, name, author) {
+  var templateFileContents = dojo.hostenv.getText("create_new_plugin_template.js");
+  var itemUuid = new orp.uuid.TimeBasedUuid();
+  var entryUuid1 = new orp.uuid.TimeBasedUuid();
+  var entryUuid2 = new orp.uuid.TimeBasedUuid();
+  var entryUuid3 = new orp.uuid.TimeBasedUuid();
+  var entryUuid4 = new orp.uuid.TimeBasedUuid();
+  
+  var intermediateResult = templateFileContents;
+  intermediateResult = intermediateResult.replace(/%\(AUTHOR\)/g, author);
+  intermediateResult = intermediateResult.replace(/%\(CLASS_NAME\)/g, className);
+  intermediateResult = intermediateResult.replace(/%\(DISPLAY_NAME\)/g, name);
+  intermediateResult = intermediateResult.replace(/%\(ITEM_UUID\)/g, itemUuid);
+  intermediateResult = intermediateResult.replace(/%\(ENTRY_UUID_1\)/g, entryUuid1);
+  intermediateResult = intermediateResult.replace(/%\(ENTRY_UUID_2\)/g, entryUuid2);
+  intermediateResult = intermediateResult.replace(/%\(ENTRY_UUID_3\)/g, entryUuid3);
+  intermediateResult = intermediateResult.replace(/%\(ENTRY_UUID_4\)/g, entryUuid4);
+  var finalString = intermediateResult;
+  
+  return finalString;
+}
+
+dojo.event.connect(window, "onload", startHere);
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/plugins/create_new_plugin/create_new_plugin_template.js
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin_template.js	2005-12-03 04:06:39 UTC (rev 387)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin_template.js	2005-12-06 01:19:12 UTC (rev 388)
@@ -0,0 +1,110 @@
+// %(CLASS_NAME).js
+// Written by %(AUTHOR)
+
+// Dojo Package System "provide" and "require" statements
+dojo.provide("orp.plugins.%(CLASS_NAME)");
+dojo.require("orp.view.PluginView");
+
+/**
+ * The %(CLASS_NAME) view displays a set of content items. 
+ *
+ * @scope    public instance constructor
+ * @extends  PluginView
+ * @param    superview    The View that serves as the superview for this view. 
+ * @param    htmlElement    The HTMLElement to display this view in. 
+ * @param    querySpec    The Query Spec item that provides the items for this PluginView to display
+ * @param    layoutItem    An item that can be used to store layout data (like table column order). 
+ */
+orp.plugins.%(CLASS_NAME) = function(superview, htmlElement, querySpec, layoutItem) {
+  orp.view.PluginView.call(this, superview, htmlElement, querySpec, layoutItem, "%(CLASS_NAME)");
+};
+
+dojo.inherits(orp.plugins.%(CLASS_NAME), orp.view.PluginView);  // makes %(CLASS_NAME) be a subclass of PluginView
+
+
+// -------------------------------------------------------------------
+// Register this plugin in the SectionView registry
+// -------------------------------------------------------------------
+orp.plugins.%(CLASS_NAME).UUID = "%(ITEM_UUID)";
+orp.view.SectionView.registerPlugin(orp.plugins.%(CLASS_NAME));
+
+
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the UUID of the item that represents this class of plugin.
+ *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin.
+ */
+orp.plugins.%(CLASS_NAME).getPluginItemUuid = function() {
+  return orp.plugins.%(CLASS_NAME).UUID;
+};
+
+/**
+ * Returns a list of anonymous objects representing Entries that describe the plugin.
+ *
+ * @scope    public class method
+ * @return   A list of anonymous objects representing Entries that describe the plugin.
+ */
+orp.plugins.%(CLASS_NAME).getEntriesForItemRepresentingPluginClass = function(pluginItem, world) {
+  return [
+    { uuid: "%(ENTRY_UUID_1)",
+      item: pluginItem,
+      attribute: world.getAttributeCalledName(),
+      value: "%(DISPLAY_NAME)" },
+    { uuid: "%(ENTRY_UUID_2)",
+      item: pluginItem,
+      attribute: world.getAttributeCalledShortName(),
+      value: "%(CLASS_NAME)" },
+    { uuid: "%(ENTRY_UUID_3)",
+      item: pluginItem,
+      attribute: world.getAttributeCalledClassName(),
+      value: "%(CLASS_NAME)" },
+    { uuid: "%(ENTRY_UUID_4)",
+      item: pluginItem,
+      attribute: world.getAttributeCalledCategory(),
+      inverseAttribute: world.getAttributeCalledItemsInCategory(),
+      value: world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW) }
+  ];
+};
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
+ * @scope    public instance method
+ * @return   A JavaScript class. 
+ */
+orp.plugins.%(CLASS_NAME).prototype.getClass = function() {
+  return orp.plugins.%(CLASS_NAME);
+};
+
+/**
+ * This method is called whenever the %(CLASS_NAME) plugin is used to
+ * display the results of a query.
+ *
+ * @scope    public instance method
+ */
+orp.plugins.%(CLASS_NAME).prototype.refresh = function() {
+  var listOfContentItems = this.fetchItems();
+  var outlineDiv = this.getHtmlElement();
+
+  // %(AUTHOR):
+  //  This is just example code.
+  //  You should replace the code below with your own code.
+  orp.view.View.removeChildrenOfElement(outlineDiv);
+  var ulElement = orp.view.View.appendNewElement(outlineDiv, "ul");
+  for (var i in listOfContentItems) {
+    var contentItem = listOfContentItems[i];
+    var liText = contentItem.getDisplayName("{no name}") + " ";
+    var liElement = orp.view.View.appendNewElement(ulElement, "li", null, null, liText);
+  }
+};
+
+// End of file



From mignon at berlios.de  Mon Dec 12 23:37:36 2005
From: mignon at berlios.de (mignon at BerliOS)
Date: Mon, 12 Dec 2005 23:37:36 +0100
Subject: [openrecord-svn] r389 - trunk/source/model
Message-ID: <200512122237.jBCMbaa0028607@sheep.berlios.de>

Author: mignon
Date: 2005-12-12 23:37:35 +0100 (Mon, 12 Dec 2005)
New Revision: 389

Modified:
   trunk/source/model/Item.js
Log:
fixed bug in orp.model.Item.prototype._createNewEntry

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-12-06 01:19:12 UTC (rev 388)
+++ trunk/source/model/Item.js	2005-12-12 22:37:35 UTC (rev 389)
@@ -277,12 +277,12 @@
             }
             break;
           case typeCalledItem:
-            if ((value instanceof Item) && (oldValue == value)) {
+            if ((value instanceof orp.model.Item) && (oldValue == value)) {
               return null;
             }
             break;
           case typeCalledConnection:
-            if ((value instanceof Item) && (oldValue == value)) {
+            if ((value instanceof orp.model.Item) && (oldValue == value)) {
               // FIXME: 
               // need to do a slightly complicated check here
               // we should re-factor this to combine it with the code



From skinner at berlios.de  Mon Dec 12 23:40:00 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Mon, 12 Dec 2005 23:40:00 +0100
Subject: [openrecord-svn] r390 - trunk/documentation
Message-ID: <200512122240.jBCMe0Ih028931@sheep.berlios.de>

Author: skinner
Date: 2005-12-12 23:40:00 +0100 (Mon, 12 Dec 2005)
New Revision: 390

Modified:
   trunk/documentation/to_do_history.txt
   trunk/documentation/to_do_list.txt
Log:
Updated to_do_list.txt and to_do_history.txt.  Closed the November iteration (iteration #7) and opened iteration #8.

Modified: trunk/documentation/to_do_history.txt
===================================================================
--- trunk/documentation/to_do_history.txt	2005-12-12 22:37:35 UTC (rev 389)
+++ trunk/documentation/to_do_history.txt	2005-12-12 22:40:00 UTC (rev 390)
@@ -400,5 +400,50 @@
 ################################################################################
 
 
+---------------------------------------------------------------------------
+   Tasks we originally identified for Iteration #7, in November 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+mignon | 0.25 IED | 0    IED|  5. Create a "view_plugins" directory
+mignon | 2    IED | 4    IED|  6. Automatically load ViewPlugins found in the plugins directory 
+brian  |          | 0.2  IED|  4. Do lazy creation of layout data items
+brian  |          | 0.1  IED| 26. Better time parsing e.g. 3pm
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for Iteration #7, in November 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+none?
+-------+----------+---------+----------------------------------------------
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #7
+          November 2005
+  November 7 to December 5, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+   3    = number of PLANNED tasks that were finished 
+   0    = number of ADDITIONAL tasks that were finished 
+  ~4.3  = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   4    = number of weeks in October iteration
+ ~ 1.1  = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #8                                ##
+##                                December 2005                               ##
+##                                                                            ##
+################################################################################
+################################################################################
+
+
 ...FIXME...
 

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-12 22:37:35 UTC (rev 389)
+++ trunk/documentation/to_do_list.txt	2005-12-12 22:40:00 UTC (rev 390)
@@ -45,15 +45,23 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
        |          |         |  1. Document the Data model public API
-brian  |          | (0.7+)  |  2. Try to convert one unit test over to the dojo jum framework
-       |          |         |  3. Rationalize the View API and document public API
-mignon | 1    IED |         |  4. Rationalize the ViewPlugin API
-mignon | 0.25 IED |         |  5. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 
-mignon | 2    IED |         |  6. Automatically load ViewPlugins found in the view_plugins directory 
-       |          |         |  7. Move DOM methods from orp.view.View.xxx to orp.dom.xxx
-       |          |         |  8. Make RootView subclass from View, or add comments explaining why it doesn't
-       |          |         |  9. Refactor our observer notification API (and implementation)
-       |          |         | 10. Try using Ant and the Dojo build system to build OpenRecord into a single-file 
+       |          |         |  2. Change the "node" used in the UUIDs for plugins
+       |          |         |  3. Add validation code to create_new_plugin.html to check the supplied ClassName
+       |          |         |  4. Add instructions on the create_new_plugin.html page
+       |          |         |  5. Add list of suggested plugins to the create_new_plugin.html page
+       |          |         |  6. Make the 4 original plugins conform to the new plugin API (if possible)
+       |          |         |  7. See if it's possible to simplify the plugin API
+       |          |         |  8. Change "TablePlugin" to "TableView", etc.
+       |          |         |  9. Move the 4 original plugins into the plugins folder
+       |          |         | 10. Remove BarChartView and Outline view from the axiomatic.json file
+       |          |         | 11. Make a HelloWorld plugin
+       |          |         | 12. Have Entry.toSting() return the Entry's UUID -- same for Item.toString()
+       |          |         | 13. Move DOM methods from orp.view.View.xxx to orp.dom.xxx
+       |          |         | 14. Make RootView subclass from View, or add comments explaining why it doesn't
+       |          |         | 15. Rationalize the View API and document public API
+brian  |          | (0.7+)  | 16. Try to convert one unit test over to the dojo jum framework
+       |          |         | 17. Refactor our observer notification API (and implementation)
+       |          |         | 18. Try using Ant and the Dojo build system to build OpenRecord into a single-file 
 -------+----------+---------+----------------------------------------------
 
 
@@ -65,10 +73,9 @@
        |          |         |  1. Research standard text representations for DateValues
        |          |         |  2. Make DateValue support date ranges
        |          |         |  3. Make ordinal value strings not grow long so quickly
-brian  |          | 0.2  IED|  4. Do lazy creation of layout data items
-       |          |         |  5. Make sure view code uses transactions
-       |          |         |  6. Write concurrency tests 
-       |          |         |  7. Ensure that PHP scripts and file I/O works for concurrent multi-user access
+       |          |         |  4. Make sure view code uses transactions
+       |          |         |  5. Write concurrency tests 
+       |          |         |  6. Ensure that PHP scripts and file I/O works for concurrent multi-user access
 -------+----------+---------+----------------------------------------------
 
 
@@ -133,7 +140,7 @@
        |          |         | 23. improve UI for creating a new page
        |          |         | 24. improve UI for adding a new section to a page
        |          |         | 25. UI to move/delete sections?
-brian  |          | 0.1  IED| 26. Better time parsing e.g. 3pm
+       |          |         | 26. 
        |          |         | 27. Have different documents use different style-sheets
        |          |         | 28. Wire up observers & keep views in sync
        |          |         | 29. Provide GUI feedback about what's editable



From mignon at berlios.de  Tue Dec 13 00:41:51 2005
From: mignon at berlios.de (mignon at BerliOS)
Date: Tue, 13 Dec 2005 00:41:51 +0100
Subject: [openrecord-svn] r391 - in trunk: documentation source/plugins/create_new_plugin
Message-ID: <200512122341.jBCNfpjk018576@sheep.berlios.de>

Author: mignon
Date: 2005-12-13 00:41:43 +0100 (Tue, 13 Dec 2005)
New Revision: 391

Modified:
   trunk/documentation/to_do_list.txt
   trunk/source/plugins/create_new_plugin/create_new_plugin.js
Log:
Added validation code to create_new_plugin.html to check the supplied ClassName.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-12 22:40:00 UTC (rev 390)
+++ trunk/documentation/to_do_list.txt	2005-12-12 23:41:43 UTC (rev 391)
@@ -46,7 +46,7 @@
 -------+----------+---------+----------------------------------------------
        |          |         |  1. Document the Data model public API
        |          |         |  2. Change the "node" used in the UUIDs for plugins
-       |          |         |  3. Add validation code to create_new_plugin.html to check the supplied ClassName
+mignon |          |    0.05 |  3. Add validation code to create_new_plugin.html to check the supplied ClassName
        |          |         |  4. Add instructions on the create_new_plugin.html page
        |          |         |  5. Add list of suggested plugins to the create_new_plugin.html page
        |          |         |  6. Make the 4 original plugins conform to the new plugin API (if possible)

Modified: trunk/source/plugins/create_new_plugin/create_new_plugin.js
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-12 22:40:00 UTC (rev 390)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-12 23:41:43 UTC (rev 391)
@@ -49,12 +49,20 @@
   var authorField = document.getElementById("plugin_author");
   var outputArea = document.getElementById("output_area");
   
+  var generatedContents;
+
   var className = classNameField.value;
-  var name      = nameField.value;
-  var author    = authorField.value;
+  if (className.match(/^[A-Z]\w*$/)) {
+    var name      = nameField.value;
+    var author    = authorField.value;
+    generatedContents = generateContents(className, name, author);
+  }
+  else {
+    generatedContents = "Error: ClassName must contain only alphanumeric characters " + 
+                        "and underscores, and must start with an uppercase letter.  " +
+                        "Example: MySuperFooView";
+  }
 
-  var generatedContents = generateContents(className, name, author);
-
   outputArea.value = generatedContents;
   outputArea.style.visibility = "visible";
   // alert(generatedContents);



From skinner at berlios.de  Tue Dec 13 01:05:55 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 01:05:55 +0100
Subject: [openrecord-svn] r392 - trunk/web_pages/content
Message-ID: <200512130005.jBD05tQw028981@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 01:05:31 +0100 (Tue, 13 Dec 2005)
New Revision: 392

Modified:
   trunk/web_pages/content/bookmarks.html
Log:
On the bookmarks.html page of the web site, added a note about Dabble DB supporting bi-directional connections between items.

Modified: trunk/web_pages/content/bookmarks.html
===================================================================
--- trunk/web_pages/content/bookmarks.html	2005-12-12 23:41:43 UTC (rev 391)
+++ trunk/web_pages/content/bookmarks.html	2005-12-13 00:05:31 UTC (rev 392)
@@ -43,9 +43,14 @@
       <dd>The Dabble web site currently (Nov 2005) only has a few screenshots,
       and doesn't have much written documentation.  So, it's hard to know quite
       what Dabble is, but judging by what is posted it certainly looks like
-      Dabble and OpenRecord are both trying to solve the same problems.  For 
-      more insight into Dabble, check out their weblog: 
-      <a href="http://smallthought.com/blog/" rel="external">Dabble weblog</a>
+      Dabble and OpenRecord are both trying to solve the same problems.  One
+      tidbit that's particularly interesting is that Dabble supports "inverse
+      fields" to "automatically track two-way relationships". For 
+      more insight into Dabble, check out their weblog 
+      <a href="http://smallthought.com/blog/" rel="external">Dabble weblog</a>,
+      or have a look at this 
+      <a href="http://solutionwatch.com/294/a-look-at-dabble-db/" rel="external">review on Solution Watch</a>.
+      
       </dd>
     </di>
     <di>



From skinner at berlios.de  Tue Dec 13 01:12:49 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 01:12:49 +0100
Subject: [openrecord-svn] r393 - trunk/documentation
Message-ID: <200512130012.jBD0Cngv030153@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 01:12:46 +0100 (Tue, 13 Dec 2005)
New Revision: 393

Modified:
   trunk/documentation/to_do_list.txt
Log:
Added one more task to the to_do_list.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-13 00:05:31 UTC (rev 392)
+++ trunk/documentation/to_do_list.txt	2005-12-13 00:12:46 UTC (rev 393)
@@ -84,6 +84,7 @@
 -------+----------+---------+----------------------------------------------
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
+       |          |         |  0. Switch to using Dojo-0.2.0, and have it live directly in .../third_party/dojo
        |          |         |  1. Attempt to embed an OpenRecord view in a MediaWiki page
        |          |         |  2. Have a server that supports repositories with thousands of items
        |          |         |  3. Look at replacing our notion of Views with Dojo's notion of widgets



From skinner at berlios.de  Tue Dec 13 01:33:49 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 01:33:49 +0100
Subject: [openrecord-svn] r394 - in trunk: documentation repositories source/archive source/model source/plugins/create_new_plugin
Message-ID: <200512130033.jBD0Xn3f008325@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 01:33:27 +0100 (Tue, 13 Dec 2005)
New Revision: 394

Modified:
   trunk/documentation/to_do_list.txt
   trunk/repositories/open_agenda.json
   trunk/source/archive/StubArchive.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/World.js
   trunk/source/plugins/create_new_plugin/create_new_plugin.js
Log:
Changed the "node" used in the UUIDs for plugins.  Added a new axiomatic user to the 2005_june_axiomatic_items.json file, to represent the user "Automatic Plugin Creator".  Gave the new user account a real MAC node instead of a pseudonode.  Changed create_new_plugin.js so that the Items and Entries for new plugins are created by the user Automatic Plugin Creator.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/documentation/to_do_list.txt	2005-12-13 00:33:27 UTC (rev 394)
@@ -45,8 +45,8 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
        |          |         |  1. Document the Data model public API
-       |          |         |  2. Change the "node" used in the UUIDs for plugins
-mignon |          |    0.05 |  3. Add validation code to create_new_plugin.html to check the supplied ClassName
+brian  |          | 0.1  IED|  2. Change the "node" used in the UUIDs for plugins
+mignon |          | 0.05 IED|  3. Add validation code to create_new_plugin.html to check the supplied ClassName
        |          |         |  4. Add instructions on the create_new_plugin.html page
        |          |         |  5. Add list of suggested plugins to the create_new_plugin.html page
        |          |         |  6. Make the 4 original plugins conform to the new plugin API (if possible)

Modified: trunk/repositories/open_agenda.json
===================================================================
--- trunk/repositories/open_agenda.json	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/repositories/open_agenda.json	2005-12-13 00:33:27 UTC (rev 394)
@@ -3131,4 +3131,35 @@
          "uuid": "bfd3dc10-4b3a-11da-87ec-000c414ce854",
        "record": "f1598550-0c6f-11da-beea-000c414ce854",
         "value": "11da0c6ff159855049dfc611cb5c6294"  }
-}
\ No newline at end of file
+},
+  // =======================================================================
+  { "Transaction": [
+{ "Item": { "uuid": "2fd62580-65f4-11da-ba24-cbd0c9855ce2" } },
+{ "Entry": {
+         "uuid": "2fd62581-65f4-11da-ba24-8e8c531e103c",
+         "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": "2fd62580-65f4-11da-ba24-cbd0c9855ce2",
+        "value": "Super Foo"  }
+},
+{ "Entry": {
+         "uuid": "2fd62582-65f4-11da-ba24-898097682846",
+         "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": "2fd62580-65f4-11da-ba24-cbd0c9855ce2",
+        "value": "MySuperFooView"  }
+},
+{ "Entry": {
+         "uuid": "2fd62583-65f4-11da-ba24-c25c7f602c54",
+         "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": "2fd62580-65f4-11da-ba24-cbd0c9855ce2",
+        "value": "MySuperFooView"  }
+},
+{ "Entry": {
+         "uuid": "2fd62584-65f4-11da-ba24-a27dc89f9af2",
+         "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": ["2fd62580-65f4-11da-ba24-cbd0c9855ce2", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
+    "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+}  ]
+  }
\ No newline at end of file

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/source/archive/StubArchive.js	2005-12-13 00:33:27 UTC (rev 394)
@@ -532,8 +532,10 @@
     return false;
   }
 
-  if (user.getUuidString() == orp.model.World.UUID.USER_AMY) {
-    // nobody is allowed to log in as the axiomatic user
+  if ((user.getUuidString() == orp.model.World.UUID.USER_AMY_GOD) ||
+      (user.getUuidString() == orp.model.World.UUID.USER_PLUGIN_GOD)) {
+    // nobody is allowed to log in as "Amy the Axiomatic User"
+    // nobody is allowed to log in as the "Otto the Automatic Plugin Creator"
     return false;
   }
   

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-12-13 00:33:27 UTC (rev 394)
@@ -3,10 +3,14 @@
   "records": [
   // =======================================================================
   { "Transaction": [  // Axiomatic items
-    { "Item": {                                               // User: Amy ex machina
+    { "Item": {                                               // User: Amy the Axiomatic User
              "uuid": "00001000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Item": {                                               // User: Otto the Automatic Plugin Creator
+             "uuid": "00001800-65f4-11da-ba24-0011111f4abe" }
+    },
+    // -----------------------------------------------------------------------
     { "Item": {                                               // Attribute: Name
              "uuid": "00001001-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -123,14 +127,22 @@
              "uuid": "00001214-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // "Amy ex machina"
+    { "Entry": {                                              // "Amy the Axiomatic User"
              "uuid": "0001000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // (Name)
-             "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // User: Amy ex machina
+             "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // User: Amy the Axiomatic User
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Amy ex machina" }
+            "value": "Amy the Axiomatic User" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Otto the Automatic Plugin Creator"
+             "uuid": "0001800a-65f4-11da-ba24-0011111f4abe",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // (Name)
+             "item": "00001800-65f4-11da-ba24-0011111f4abe",  // User: Otto the Automatic Plugin Creator
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Otto the Automatic Plugin Creator" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // "Name"
              "uuid": "0001001a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // (Name)

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/source/model/World.js	2005-12-13 00:33:27 UTC (rev 394)
@@ -106,7 +106,8 @@
   // NULL:                        "00000000-ce7f-11d9-8cd5-0011113ae5d6",
   // IDENTITY:                    "00000001-ce7f-11d9-8cd5-0011113ae5d6",
 
-  USER_AMY:                       "00001000-ce7f-11d9-8cd5-0011113ae5d6",
+  USER_AMY_GOD:                       "00001000-ce7f-11d9-8cd5-0011113ae5d6",
+  USER_PLUGIN_GOD:                    "00001800-65f4-11da-ba24-0011111f4abe",
 
   ATTRIBUTE_NAME:                     "00001001-ce7f-11d9-8cd5-0011113ae5d6",
   ATTRIBUTE_SHORT_NAME:               "00001002-ce7f-11d9-8cd5-0011113ae5d6",

Modified: trunk/source/plugins/create_new_plugin/create_new_plugin.js
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-13 00:33:27 UTC (rev 394)
@@ -34,6 +34,7 @@
 dojo.require("dojo.text.*");
 dojo.require("dojo.event.*");
 dojo.require("orp.uuid.TimeBasedUuid");
+dojo.require("orp.model.World");
 
 function startHere() {
   var createButton = document.getElementById("button");
@@ -56,32 +57,33 @@
     var name      = nameField.value;
     var author    = authorField.value;
     generatedContents = generateContents(className, name, author);
+  } else {
+    generatedContents = 'Error: ClassName must contain only alphanumeric characters ' + 
+                        'and underscores, and must start with an uppercase letter.  \n\n' +
+                        'Examples: \n' + 
+                        '  "MySuperFooView" is valid. \n' +
+                        '  "mySuperFooView" is not valid. \n' +
+                        '  "23 is a fine #" is not valid. \n';
   }
-  else {
-    generatedContents = "Error: ClassName must contain only alphanumeric characters " + 
-                        "and underscores, and must start with an uppercase letter.  " +
-                        "Example: MySuperFooView";
-  }
 
   outputArea.value = generatedContents;
   outputArea.style.visibility = "visible";
-  // alert(generatedContents);
-  
-  // var uuid = new orp.uuid.TimeBasedUuid();
-  // alert(uuid);
-  
-  // var string = "     Just Foo    ";
-  // var trimmedString = dojo.text.trim(string);
-  // alert(trimmedString);
 }
 
 function generateContents(className, name, author) {
   var templateFileContents = dojo.hostenv.getText("create_new_plugin_template.js");
-  var itemUuid = new orp.uuid.TimeBasedUuid();
-  var entryUuid1 = new orp.uuid.TimeBasedUuid();
-  var entryUuid2 = new orp.uuid.TimeBasedUuid();
-  var entryUuid3 = new orp.uuid.TimeBasedUuid();
-  var entryUuid4 = new orp.uuid.TimeBasedUuid();
+
+  // Get the 'node' from the UUID that identifies the axiomatic user account
+  // that we use for creating new plugins, "Otto the Automatic Plugin Creator"
+  var uuidForTheUserWhoCreatesPlugins = orp.model.World.UUID.USER_PLUGIN_GOD;
+  var arrayOfUuidParts = uuidForTheUserWhoCreatesPlugins.split('-');
+  var nodeForUserWhoCreatesPlugins = arrayOfUuidParts[4]; // the 'node' is part [4] of the UUID
+
+  var itemUuid   = new orp.uuid.TimeBasedUuid({node: nodeForUserWhoCreatesPlugins});
+  var entryUuid1 = new orp.uuid.TimeBasedUuid({node: nodeForUserWhoCreatesPlugins});
+  var entryUuid2 = new orp.uuid.TimeBasedUuid({node: nodeForUserWhoCreatesPlugins});
+  var entryUuid3 = new orp.uuid.TimeBasedUuid({node: nodeForUserWhoCreatesPlugins});
+  var entryUuid4 = new orp.uuid.TimeBasedUuid({node: nodeForUserWhoCreatesPlugins});
   
   var intermediateResult = templateFileContents;
   intermediateResult = intermediateResult.replace(/%\(AUTHOR\)/g, author);
@@ -97,9 +99,22 @@
   return finalString;
 }
 
-dojo.event.connect(window, "onload", startHere);
+// -----------------------------------------------------------
+// Register the startHere() function so that it will be called 
+// after the loading is done
 
+// this is an okay way
+dojo.addOnLoad(startHere); 
 
+// we can use connect(), if we've done a dojo.require("dojo.event.*");
+// dojo.event.connect(dojo, "loaded", startHere); 
+// dojo.event.connect(dojo, "loaded", someObject, "methodName"); 
+
+// don't do it this way -- the window will have loaded, but dojo may not have
+// dojo.event.connect(window, "onload", startHere); 
+//
+// -----------------------------------------------------------
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From skinner at berlios.de  Tue Dec 13 01:52:42 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 01:52:42 +0100
Subject: [openrecord-svn] r395 - in trunk: documentation source/plugins
Message-ID: <200512130052.jBD0qgC3017212@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 01:52:37 +0100 (Tue, 13 Dec 2005)
New Revision: 395

Added:
   trunk/source/plugins/HelloWorld.js
Modified:
   trunk/documentation/to_do_list.txt
Log:
Made a HelloWorld.js plugin

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-13 00:33:27 UTC (rev 394)
+++ trunk/documentation/to_do_list.txt	2005-12-13 00:52:37 UTC (rev 395)
@@ -54,7 +54,7 @@
        |          |         |  8. Change "TablePlugin" to "TableView", etc.
        |          |         |  9. Move the 4 original plugins into the plugins folder
        |          |         | 10. Remove BarChartView and Outline view from the axiomatic.json file
-       |          |         | 11. Make a HelloWorld plugin
+brian  |          | 0.05 IED| 11. Make a HelloWorld plugin
        |          |         | 12. Have Entry.toSting() return the Entry's UUID -- same for Item.toString()
        |          |         | 13. Move DOM methods from orp.view.View.xxx to orp.dom.xxx
        |          |         | 14. Make RootView subclass from View, or add comments explaining why it doesn't

Added: trunk/source/plugins/HelloWorld.js
===================================================================
--- trunk/source/plugins/HelloWorld.js	2005-12-13 00:33:27 UTC (rev 394)
+++ trunk/source/plugins/HelloWorld.js	2005-12-13 00:52:37 UTC (rev 395)
@@ -0,0 +1,100 @@
+// HelloWorld.js
+// Written by Brian Douglas Skinner
+
+// Dojo Package System "provide" and "require" statements
+dojo.provide("orp.plugins.HelloWorld");
+dojo.require("orp.view.PluginView");
+
+/**
+ * The HelloWorld view displays a set of content items. 
+ *
+ * @scope    public instance constructor
+ * @extends  PluginView
+ * @param    superview    The View that serves as the superview for this view. 
+ * @param    htmlElement    The HTMLElement to display this view in. 
+ * @param    querySpec    The Query Spec item that provides the items for this PluginView to display
+ * @param    layoutItem    An item that can be used to store layout data (like table column order). 
+ */
+orp.plugins.HelloWorld = function(superview, htmlElement, querySpec, layoutItem) {
+  orp.view.PluginView.call(this, superview, htmlElement, querySpec, layoutItem, "HelloWorld");
+};
+
+dojo.inherits(orp.plugins.HelloWorld, orp.view.PluginView);  // makes HelloWorld be a subclass of PluginView
+
+
+// -------------------------------------------------------------------
+// Register this plugin in the SectionView registry
+// -------------------------------------------------------------------
+orp.plugins.HelloWorld.UUID = "d53d6ce0-6b71-11da-bb5c-0011111f4abe";
+orp.view.SectionView.registerPlugin(orp.plugins.HelloWorld);
+
+
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the UUID of the item that represents this class of plugin.
+ *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin.
+ */
+orp.plugins.HelloWorld.getPluginItemUuid = function() {
+  return orp.plugins.HelloWorld.UUID;
+};
+
+/**
+ * Returns a list of anonymous objects representing Entries that describe the plugin.
+ *
+ * @scope    public class method
+ * @return   A list of anonymous objects representing Entries that describe the plugin.
+ */
+orp.plugins.HelloWorld.getEntriesForItemRepresentingPluginClass = function(pluginItem, world) {
+  return [
+    { uuid: "d53d6ce1-6b71-11da-bb5c-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledName(),
+      value: "Hello World" },
+    { uuid: "d53d6ce2-6b71-11da-bb5c-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledShortName(),
+      value: "HelloWorld" },
+    { uuid: "d53d6ce3-6b71-11da-bb5c-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledClassName(),
+      value: "HelloWorld" },
+    { uuid: "d53d6ce4-6b71-11da-bb5c-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledCategory(),
+      inverseAttribute: world.getAttributeCalledItemsInCategory(),
+      value: world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW) }
+  ];
+};
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
+ * @scope    public instance method
+ * @return   A JavaScript class. 
+ */
+orp.plugins.HelloWorld.prototype.getClass = function() {
+  return orp.plugins.HelloWorld;
+};
+
+/**
+ * This method is called whenever the HelloWorld plugin is used to
+ * display the results of a query.
+ *
+ * @scope    public instance method
+ */
+orp.plugins.HelloWorld.prototype.refresh = function() {
+  var outlineDiv = this.getHtmlElement();
+  outlineDiv.innerHTML = "<p>Hello World!</p>";
+};
+
+// End of file
+



From mignon at berlios.de  Tue Dec 13 03:17:15 2005
From: mignon at berlios.de (mignon at BerliOS)
Date: Tue, 13 Dec 2005 03:17:15 +0100
Subject: [openrecord-svn] r396 - in trunk: documentation source/plugins/create_new_plugin
Message-ID: <200512130217.jBD2HFee016499@sheep.berlios.de>

Author: mignon
Date: 2005-12-13 03:16:59 +0100 (Tue, 13 Dec 2005)
New Revision: 396

Added:
   trunk/source/plugins/create_new_plugin/plugin_suggestions.html
Modified:
   trunk/documentation/to_do_list.txt
   trunk/source/plugins/create_new_plugin/create_new_plugin.html
   trunk/source/plugins/create_new_plugin/create_new_plugin.js
Log:
Added instructions and suggestions for creating new plugins.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-13 00:52:37 UTC (rev 395)
+++ trunk/documentation/to_do_list.txt	2005-12-13 02:16:59 UTC (rev 396)
@@ -47,8 +47,8 @@
        |          |         |  1. Document the Data model public API
 brian  |          | 0.1  IED|  2. Change the "node" used in the UUIDs for plugins
 mignon |          | 0.05 IED|  3. Add validation code to create_new_plugin.html to check the supplied ClassName
-       |          |         |  4. Add instructions on the create_new_plugin.html page
-       |          |         |  5. Add list of suggested plugins to the create_new_plugin.html page
+mignon |          |0.125 IED|  4. Add instructions on the create_new_plugin.html page
+mignon |          |0.125 IED|  5. Add list of suggested plugins to the create_new_plugin.html page
        |          |         |  6. Make the 4 original plugins conform to the new plugin API (if possible)
        |          |         |  7. See if it's possible to simplify the plugin API
        |          |         |  8. Change "TablePlugin" to "TableView", etc.

Modified: trunk/source/plugins/create_new_plugin/create_new_plugin.html
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.html	2005-12-13 00:52:37 UTC (rev 395)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.html	2005-12-13 02:16:59 UTC (rev 396)
@@ -21,13 +21,16 @@
   <body>
     <div>
       <h1>OpenRecord Plugin Generator</h1>
-      <p>To create a new plugin, fill out this form and hit the button.</p>
+      <p>To create a new plugin, fill out this form and hit the button.  
+      (Here are some <a href="plugin_suggestions.html">ideas for plugins</a>
+      if you're looking for inspiration.)</p>
       <form>
         ClassName: <input id="plugin_class_name" maxLength=250 value="MySuperFooView" size=50 /><br/>
         Display Name: <input id="plugin_name" maxLength=250 value="Super Foo" size=50 /><br/>
         Author: <input id="plugin_author" maxLength=250 value="Carol Coder" size=50 /><br/>
         <input id="button" type="button" value="Create Plugin" />
       </form>
+      <span id="placeholder"></span>
       <textarea id="output_area" rows="20" cols="80"></textarea>
     </div>
     

Modified: trunk/source/plugins/create_new_plugin/create_new_plugin.js
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-13 00:52:37 UTC (rev 395)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-13 02:16:59 UTC (rev 396)
@@ -49,6 +49,10 @@
   var nameField = document.getElementById("plugin_name");
   var authorField = document.getElementById("plugin_author");
   var outputArea = document.getElementById("output_area");
+  var placeholder = document.getElementById("placeholder");
+  if (placeholder.hasChildNodes()) {
+    placeholder.removeChild(placeholder.firstChild);
+  }
   
   var generatedContents;
 
@@ -57,6 +61,13 @@
     var name      = nameField.value;
     var author    = authorField.value;
     generatedContents = generateContents(className, name, author);
+
+    var newElem = document.createElement("p");
+    var instructions = "Copy the text below into a file called " + className +
+                       ".js and put it in .../source/plugins.";
+    var newText = document.createTextNode(instructions);
+    newElem.appendChild(newText);
+    placeholder.appendChild(newElem);
   } else {
     generatedContents = 'Error: ClassName must contain only alphanumeric characters ' + 
                         'and underscores, and must start with an uppercase letter.  \n\n' +

Added: trunk/source/plugins/create_new_plugin/plugin_suggestions.html
===================================================================
--- trunk/source/plugins/create_new_plugin/plugin_suggestions.html	2005-12-13 00:52:37 UTC (rev 395)
+++ trunk/source/plugins/create_new_plugin/plugin_suggestions.html	2005-12-13 02:16:59 UTC (rev 396)
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by
+   Mignon Belongie
+   Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Suggestions for OpenRecord Plugins</title>
+  </head>
+  
+  <body>
+    <div>
+      <h3>Suggestions for OpenRecord Plugins</h3>
+      <ul>
+      <li> pivot table (<a href="mailto:brian.skinner at gumption.org">Brian Skinner</a>
+           has starter code available for the asking.)
+      <li> periodic table element
+      <li> scatter plot
+      <li> calendar
+      <li> item history
+      <li> animated history <a href="http://weblog.infoworld.com/udell/gems/umlaut.html">
+           (example by Jon Udell)</a>
+      <li> Gantt chart
+      <li> timeline <a href="http://meta.wikimedia.org/wiki/EasyTimeline">
+           (Wikimedia examples)</a>
+      </ul>
+    </div>
+    
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+
+  </body>
+  
+</html>
+



From skinner at berlios.de  Tue Dec 13 03:30:16 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 03:30:16 +0100
Subject: [openrecord-svn] r397 - in trunk: documentation source source/transcribers source/util tests tests/transcribers tests/util
Message-ID: <200512130230.jBD2UGgU021477@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 03:30:06 +0100 (Tue, 13 Dec 2005)
New Revision: 397

Added:
   trunk/source/transcribers/
   trunk/source/transcribers/XmlImporter.js
   trunk/tests/transcribers/
   trunk/tests/transcribers/LintTest.html
   trunk/tests/transcribers/LintTest.js
   trunk/tests/transcribers/TestSuite.html
   trunk/tests/transcribers/XmlConverterTest.js
   trunk/tests/transcribers/XmlImporterMultiplePassesTest.html
   trunk/tests/transcribers/XmlImporterMultiplePassesTest.js
   trunk/tests/transcribers/XmlImporterTest.html
   trunk/tests/transcribers/test_dependencies.html
   trunk/tests/transcribers/test_dependencies.js
Removed:
   trunk/source/util/XmlConverter.js
   trunk/tests/util/XmlConverterMultiplePassesTest.html
   trunk/tests/util/XmlConverterMultiplePassesTest.js
   trunk/tests/util/XmlConverterTest.html
   trunk/tests/util/XmlConverterTest.js
Modified:
   trunk/documentation/to_do_list.txt
   trunk/tests/TestSuite.html
   trunk/tests/util/LintTest.js
   trunk/tests/util/TestSuite.html
   trunk/tests/util/test_dependencies.js
Log:
Moved XmlConverter.js from util to transcribers, and renamed it to from XmlConverter to XmlImporter.  Had to create a transcribers folder first, and then move around a lot of unit test stuff.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/documentation/to_do_list.txt	2005-12-13 02:30:06 UTC (rev 397)
@@ -109,7 +109,7 @@
        |          |         |  9. Pick one file, and do a group code review on it
 brian  | 1    IED |         | 10. Rationalize our CSS style sheet approach
        |          |         | 11. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
-       |          |         | 12. move XmlConverter.js out of util, because it depends on model code
+brian  |          |         | 12. move XmlConverter.js out of util, because it depends on model code
        |          |         | 13. Write one unit test that tests GUI code
        |          |         | 14. Write one performance test that measures the time some code takes
        |          |         | 15. Convert UI code from DOM level 0 to DOM level 2

Copied: trunk/source/transcribers/XmlImporter.js (from rev 393, trunk/source/util/XmlConverter.js)
===================================================================
--- trunk/source/util/XmlConverter.js	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/source/transcribers/XmlImporter.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,361 @@
+/*****************************************************************************
+ XmlImporter.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.transcribers.XmlImporter");
+dojo.require("orp.model.World");
+dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
+// dojo.provide("orp.transcribers.XmlTextNodeToAttributeSpecifier");
+// dojo.provide("orp.transcribers.XmlAttributeToAttributeSpecifier");
+
+/**
+ * @param    tagPath    A sequence of nested XML tags (relative to an 'item-element'; see below).
+ * @param    attribute  Will be assigned a value for every text node whose path equals the tag path.
+ *
+ * @scope    public instance constructor
+ */
+orp.transcribers.XmlTextNodeToAttributeSpecifier = function(tagPath, attribute) {
+  orp.lang.assertType(tagPath, Array);
+  orp.lang.assert(attribute instanceof orp.model.Item);
+  this._tagPath = tagPath;
+  this._attribute = attribute;
+  var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
+  var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
+  this._listOfTypes = [];
+  for (j in listOfExpectedTypeEntries) {
+    var entry = listOfExpectedTypeEntries[j];
+    this._listOfTypes.push(entry.getValue());
+  }
+  var attributeCalledInverseAttribute = attribute.getWorld().getAttributeCalledInverseAttribute();
+  var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
+  this._inverseAttribute = inverseAttributeEntry? inverseAttributeEntry.getValue(attribute) : null;
+};
+
+
+/**
+ * @param    xmlAttributeName    Each value corresponding to the xmlAttributeName will be converted an entry of the current item.
+ * @param    attribute           The attribute of the created entries.
+ *
+ * @scope    public instance constructor
+ */
+orp.transcribers.XmlAttributeToAttributeSpecifier = function(xmlAttributeName, attribute) {
+  orp.lang.assert(attribute instanceof orp.model.Item);
+  this._xmlAttributeName = xmlAttributeName;
+  this._attribute = attribute;
+  var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
+  var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
+  this._listOfTypes = [];
+  for (j in listOfExpectedTypeEntries) {
+    var entry = listOfExpectedTypeEntries[j];
+    this._listOfTypes.push(entry.getValue());
+  }
+  var attributeCalledInverseAttribute = attribute.getWorld().getAttributeCalledInverseAttribute();
+  var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
+  this._inverseAttribute = inverseAttributeEntry? inverseAttributeEntry.getValue(attribute) : null;
+};
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
+/**
+ * The XmlImporter class knows how to load an XML file and make items
+ * out of specified parts of the data.
+ *
+ * @scope    public instance constructor
+ * @param    world             
+ * @param    url                                (of an XML file)
+ * @param    nameSpace                          If null, the name of the file will be used.
+ * @param    itemTagName                        Items will be made from elements with this tag name.
+ * @param    itemCategory                       If null, a new category is created from 'namespace' and 'itemTagName'.
+ */
+orp.transcribers.XmlImporter = function(world, url, nameSpace, itemTagName, itemCategory) {
+  orp.lang.assert(world instanceof orp.model.World);
+  var urlSeparators = new RegExp("\\.|\\/");
+  var urlParts = url.split(urlSeparators);
+  var len = urlParts.length;
+  orp.lang.assert(urlParts[len-1] == "xml");
+  if (!nameSpace) {
+    nameSpace = urlParts[len-2];
+  }
+  orp.lang.assertType(itemTagName, String);
+
+  var xmlDoc = document.implementation.createDocument("", "doc", null);
+  var objXMLHTTP = new XMLHttpRequest();
+  objXMLHTTP.open("GET", url, false);
+  objXMLHTTP.send(null);
+  xmlDoc = objXMLHTTP.responseXML;
+  this._itemElements = xmlDoc.getElementsByTagName(itemTagName);
+  if (itemCategory) {
+    this._itemCategory = itemCategory;
+  } else {
+    var itemCategoryName = nameSpace + ":" + itemTagName;
+    this._itemCategory = world.newCategory(itemCategoryName);
+  }
+  this._world = world;
+  this._nameSpace = nameSpace;
+};
+
+
+/**
+ * Returns the category that new items are assigned to.
+ * 
+ * @scope    public instance method
+ * @return   Returns the category that new items are assigned to.
+ */
+orp.transcribers.XmlImporter.prototype.getItemCategory = function() {
+  return this._itemCategory;
+};
+
+
+/**
+ * Given the URL of an XML file, a tag name used in the file, and optionally
+ * a list of tag paths, items are created from the elements with the given
+ * tag name ('item-elements') with attributes corresponding to the tag paths.  
+ * If no tag paths are specified, attributes will come from all direct children
+ * of item-elements with nodeType TEXT_NODE.  A category named nameSpace:itemTagName
+ * will be created and the new items assigned to it.
+ * 
+ * For example, if file.xml contains the following:
+ *
+ * <Food_Glossary>
+ * <Record id="22">
+ * <name>carrot</name><color>orange</color><flavor>sweet</flavor><vitamins><A>lots</A><C>lots</C></vitamins>
+ * </Record>
+ * <Record id="33">
+ * <name>cheese puff</name><color>orange</color><flavor>salty</flavor><vitamins><A>0.0</A><C>0.0</C></vitamins>
+ * </Record>
+ * <Record id="44">
+ * <name>radish</name><color>red</color><flavor>hot</flavor><vitamins><A>maybe</A><C>some</C></vitamins>
+ * </Record>
+ * </Food_Glossary>
+ * 
+ * then makeItemsFromXmlFile("file:.../file.xml", "food", "Record") would result
+ * in three items each with attributes called 'food:name', 'food:color' and 'food:flavor',
+ * while makeItemsFromXmlFile("file:.../file.xml", "food", "Record", [["name"], ["vitamins", "C"]) 
+ *                            [new orp.transcribers.XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()),
+ *                             new orp.transcribers.XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))],
+ *                             new orp.transcribers.XmlAttributeToAttributeSpecifier("id", world.newAttribute("Food ID"));
+ * would result in three items each with attributes called 'name', 'Vitamin C' and 'Food ID'.
+ * In both cases, the three items are assigned to the category food:Record.
+ *
+ * @scope    public instance method
+ * @param    xmlToAttributeSpecifiers           Array of type orp.transcribers.XmlTextNodeToAttributeSpecifier
+ * @param    xmlAttributeToAttributeSpecifiers  Array of type orp.transcribers.XmlAttributeToAttributeSpecifier
+ *
+ * @return   Returns an array of created items.
+ */
+orp.transcribers.XmlImporter.prototype.makeItemsFromXmlFile = function(xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
+  this._world.beginTransaction();
+  var listOfOutputItems = [];
+  if (!xmlToAttributeSpecifiers) {
+    listOfOutputItems = this._doDefaultConversion(this._world, this._nameSpace, this._itemElements, this._itemCategory);
+  }
+  else {
+    // orp.lang.assert(xmlToAttributeSpecifiers instanceof Array);
+    orp.lang.assertType(xmlToAttributeSpecifiers, Array);
+    orp.lang.assert(xmlToAttributeSpecifiers[0] instanceof orp.transcribers.XmlTextNodeToAttributeSpecifier);
+    for (var i = 0; i < this._itemElements.length; ++i) {
+      var newItem = this._world.newItem();
+      newItem.assignToCategory(this._itemCategory);
+      for (var j in xmlToAttributeSpecifiers) {
+        var tagPath = xmlToAttributeSpecifiers[j]._tagPath;
+        this._processElementTree(0, tagPath.length, this._itemElements[i], newItem, xmlToAttributeSpecifiers[j]);
+      }
+      if (xmlAttributeToAttributeSpecifiers) {
+        for (j in xmlAttributeToAttributeSpecifiers) {
+          var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
+          var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
+          if (xmlAttributeValue !== "") {
+            newItem.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
+          }
+        }
+      }
+      listOfOutputItems.push(newItem);
+    }
+  }
+  this._world.endTransaction();
+  return listOfOutputItems;
+};
+
+
+/**
+ * @scope    public instance method
+ * @param    equalitySpecifier                  type orp.transcribers.XmlTextNodeToAttributeSpecifier or orp.transcribers.XmlAttributeToAttributeSpecifier
+ * @param    xmlToAttributeSpecifiers           Array of type orp.transcribers.XmlTextNodeToAttributeSpecifier
+ * @param    xmlAttributeToAttributeSpecifiers  Array of type orp.transcribers.XmlAttributeToAttributeSpecifier
+ *
+ * @return   Returns an array of modified or created items.
+ */
+orp.transcribers.XmlImporter.prototype.makeOrModifyItemsFromXmlFile = function(equalitySpecifier, xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
+  var matchXmlAttribute;
+  if (equalitySpecifier instanceof orp.transcribers.XmlAttributeToAttributeSpecifier) {
+    matchXmlAttribute = true;
+    var xmlAttributeToMatch = equalitySpecifier._xmlAttributeName;
+  } else {
+    orp.lang.assert(equalitySpecifier instanceof orp.transcribers.XmlTextNodeToAttributeSpecifier,
+                "equalitySpecifier should be of type orp.transcribers.XmlTextNodeToAttributeSpecifier or orp.transcribers.XmlAttributeToAttributeSpecifier.");
+    matchXmlAttribute = false;
+    var xmlTagPathToMatch = equalitySpecifier._tagPath;
+  }
+  this._world.beginTransaction();
+  var itemsInItemCategory = this._world.getItemsInCategory(this._itemCategory);
+  var hash = {};
+  var matchString;
+  for (var j in itemsInItemCategory) {
+    matchString = itemsInItemCategory[j].getSingleEntryFromAttribute(equalitySpecifier._attribute);
+    if (matchString) {
+      hash[matchString.getValue()] = itemsInItemCategory[j];
+    }
+  }
+  var listOfOutputItems = [];
+  for (var i = 0; i < this._itemElements.length; ++i) {
+    itemElement = this._itemElements[i];
+    if (matchXmlAttribute) {
+      matchString = itemElement.getAttribute(xmlAttributeToMatch);
+    } else {
+      matchString = this._getTextForTagPath(itemElement, xmlTagPathToMatch);
+    }
+    var item;
+    if (hash[matchString]) {
+      item = hash[matchString];
+    } else {
+      item = this._world.newItem();
+      item.assignToCategory(this._itemCategory);
+      item.addEntry({attribute:equalitySpecifier._attribute, value:matchString});
+    }
+    for (j in xmlToAttributeSpecifiers) {
+      var tagPath = xmlToAttributeSpecifiers[j]._tagPath;
+      this._processElementTree(0, tagPath.length, this._itemElements[i], item, xmlToAttributeSpecifiers[j]);
+    }
+    if (xmlAttributeToAttributeSpecifiers) {
+      for (j in xmlAttributeToAttributeSpecifiers) {
+        var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
+        var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
+        if (xmlAttributeValue !== "") {
+          item.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
+        }
+      }
+    }
+    listOfOutputItems.push(item);
+  }
+  this._world.endTransaction();
+  return listOfOutputItems;
+};
+
+
+// -------------------------------------------------------------------
+// Private instance methods
+// -------------------------------------------------------------------
+
+/**
+ * @scope    private instance method
+ */
+orp.transcribers.XmlImporter.prototype._doDefaultConversion = function(world, nameSpace, itemElements, itemCategory) {
+  var listOfOutputItems = [];
+  var hashTableOfAttributesKeyedByName = [];
+  for (var i = 0; i < itemElements.length; ++i) {
+    var newItem = world.newItem();
+    newItem.assignToCategory(itemCategory);
+    e = itemElements[i];
+    for (var j = 0; j < e.childNodes.length; ++j) {
+      var node = e.childNodes[j];
+      if (node.nodeType == Node.ELEMENT_NODE && node.firstChild && node.firstChild.nodeType == Node.TEXT_NODE) {
+        var attrName = nameSpace + ":" + node.tagName;
+        var attr = hashTableOfAttributesKeyedByName[attrName];
+        if (!attr) {
+          attr = world.newAttribute(attrName);
+          hashTableOfAttributesKeyedByName[attrName] = attr;
+        }
+        newItem.addEntry({attribute:attr, value:node.firstChild.nodeValue});
+      }
+    }
+    listOfOutputItems.push(newItem);
+  }
+  return listOfOutputItems;
+};
+
+
+/**
+ * @scope    private instance method
+ */
+orp.transcribers.XmlImporter.prototype._processElementTree = function(level, maxLevel, node, newItem, xmlToAttributeSpecifier) {
+  if (level == maxLevel) {
+    if (node.childNodes && node.childNodes.length > 0 && node.childNodes[0].nodeType == Node.TEXT_NODE) {
+      value = this._world.transformValueToExpectedType(node.childNodes[0].nodeValue, xmlToAttributeSpecifier._listOfTypes);
+      newItem.addEntry({
+        attribute: xmlToAttributeSpecifier._attribute, 
+        value: value,
+        inverseAttribute: xmlToAttributeSpecifier._inverseAttribute });
+    }
+    return;
+  }
+  var tagName = xmlToAttributeSpecifier._tagPath[level];
+  var matchingElements = node.getElementsByTagName(tagName);
+  if (!matchingElements) {
+    return;
+  }
+  for (i in matchingElements) {
+    if (matchingElements[i].childNodes && matchingElements[i].childNodes.length > 0) {
+      this._processElementTree(level + 1, maxLevel, matchingElements[i], newItem, xmlToAttributeSpecifier);
+    }
+  }
+};
+
+
+/**
+ * @scope    private instance method
+ */
+orp.transcribers.XmlImporter.prototype._getTextForTagPath = function(itemElement, xmlTagPathToMatch) {
+  var node = itemElement;
+  for (var i in xmlTagPathToMatch) {
+    var tagName = xmlTagPathToMatch[i];
+    var matchingElements = node.getElementsByTagName(tagName);
+    if (!matchingElements) {
+      return null;
+    }
+    node = matchingElements[0];
+  }
+  if (node.childNodes && node.childNodes.length > 0 && node.childNodes[0].nodeType == Node.TEXT_NODE) {
+    return node.childNodes[0].nodeValue;
+  } else {
+    return null;
+  }
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Deleted: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/source/util/XmlConverter.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -1,361 +0,0 @@
-/*****************************************************************************
- XmlConverter.js
- 
-******************************************************************************
- Written in 2005 by Mignon Belongie
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.util.XmlConverter");
-dojo.require("orp.model.World");
-dojo.require("orp.util.Util");
-dojo.require("orp.lang.Lang");
-// dojo.provide("orp.util.XmlTextNodeToAttributeSpecifier");
-// dojo.provide("orp.util.XmlAttributeToAttributeSpecifier");
-
-/**
- * @param    tagPath    A sequence of nested XML tags (relative to an 'item-element'; see below).
- * @param    attribute  Will be assigned a value for every text node whose path equals the tag path.
- *
- * @scope    public instance constructor
- */
-orp.util.XmlTextNodeToAttributeSpecifier = function(tagPath, attribute) {
-  orp.lang.assertType(tagPath, Array);
-  orp.lang.assert(attribute instanceof orp.model.Item);
-  this._tagPath = tagPath;
-  this._attribute = attribute;
-  var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
-  var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
-  this._listOfTypes = [];
-  for (j in listOfExpectedTypeEntries) {
-    var entry = listOfExpectedTypeEntries[j];
-    this._listOfTypes.push(entry.getValue());
-  }
-  var attributeCalledInverseAttribute = attribute.getWorld().getAttributeCalledInverseAttribute();
-  var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
-  this._inverseAttribute = inverseAttributeEntry? inverseAttributeEntry.getValue(attribute) : null;
-};
-
-
-/**
- * @param    xmlAttributeName    Each value corresponding to the xmlAttributeName will be converted an entry of the current item.
- * @param    attribute           The attribute of the created entries.
- *
- * @scope    public instance constructor
- */
-orp.util.XmlAttributeToAttributeSpecifier = function(xmlAttributeName, attribute) {
-  orp.lang.assert(attribute instanceof orp.model.Item);
-  this._xmlAttributeName = xmlAttributeName;
-  this._attribute = attribute;
-  var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
-  var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
-  this._listOfTypes = [];
-  for (j in listOfExpectedTypeEntries) {
-    var entry = listOfExpectedTypeEntries[j];
-    this._listOfTypes.push(entry.getValue());
-  }
-  var attributeCalledInverseAttribute = attribute.getWorld().getAttributeCalledInverseAttribute();
-  var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
-  this._inverseAttribute = inverseAttributeEntry? inverseAttributeEntry.getValue(attribute) : null;
-};
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-
-/**
- * The XmlConverter class knows how to load an XML file and make items
- * out of specified parts of the data.
- *
- * @scope    public instance constructor
- * @param    world             
- * @param    url                                (of an XML file)
- * @param    nameSpace                          If null, the name of the file will be used.
- * @param    itemTagName                        Items will be made from elements with this tag name.
- * @param    itemCategory                       If null, a new category is created from 'namespace' and 'itemTagName'.
- */
-orp.util.XmlConverter = function(world, url, nameSpace, itemTagName, itemCategory) {
-  orp.lang.assert(world instanceof orp.model.World);
-  var urlSeparators = new RegExp("\\.|\\/");
-  var urlParts = url.split(urlSeparators);
-  var len = urlParts.length;
-  orp.lang.assert(urlParts[len-1] == "xml");
-  if (!nameSpace) {
-    nameSpace = urlParts[len-2];
-  }
-  orp.lang.assertType(itemTagName, String);
-
-  var xmlDoc = document.implementation.createDocument("", "doc", null);
-  var objXMLHTTP = new XMLHttpRequest();
-  objXMLHTTP.open("GET", url, false);
-  objXMLHTTP.send(null);
-  xmlDoc = objXMLHTTP.responseXML;
-  this._itemElements = xmlDoc.getElementsByTagName(itemTagName);
-  if (itemCategory) {
-    this._itemCategory = itemCategory;
-  } else {
-    var itemCategoryName = nameSpace + ":" + itemTagName;
-    this._itemCategory = world.newCategory(itemCategoryName);
-  }
-  this._world = world;
-  this._nameSpace = nameSpace;
-};
-
-
-/**
- * Returns the category that new items are assigned to.
- * 
- * @scope    public instance method
- * @return   Returns the category that new items are assigned to.
- */
-orp.util.XmlConverter.prototype.getItemCategory = function() {
-  return this._itemCategory;
-};
-
-
-/**
- * Given the URL of an XML file, a tag name used in the file, and optionally
- * a list of tag paths, items are created from the elements with the given
- * tag name ('item-elements') with attributes corresponding to the tag paths.  
- * If no tag paths are specified, attributes will come from all direct children
- * of item-elements with nodeType TEXT_NODE.  A category named nameSpace:itemTagName
- * will be created and the new items assigned to it.
- * 
- * For example, if file.xml contains the following:
- *
- * <Food_Glossary>
- * <Record id="22">
- * <name>carrot</name><color>orange</color><flavor>sweet</flavor><vitamins><A>lots</A><C>lots</C></vitamins>
- * </Record>
- * <Record id="33">
- * <name>cheese puff</name><color>orange</color><flavor>salty</flavor><vitamins><A>0.0</A><C>0.0</C></vitamins>
- * </Record>
- * <Record id="44">
- * <name>radish</name><color>red</color><flavor>hot</flavor><vitamins><A>maybe</A><C>some</C></vitamins>
- * </Record>
- * </Food_Glossary>
- * 
- * then makeItemsFromXmlFile("file:.../file.xml", "food", "Record") would result
- * in three items each with attributes called 'food:name', 'food:color' and 'food:flavor',
- * while makeItemsFromXmlFile("file:.../file.xml", "food", "Record", [["name"], ["vitamins", "C"]) 
- *                            [new orp.util.XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()),
- *                             new orp.util.XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))],
- *                             new orp.util.XmlAttributeToAttributeSpecifier("id", world.newAttribute("Food ID"));
- * would result in three items each with attributes called 'name', 'Vitamin C' and 'Food ID'.
- * In both cases, the three items are assigned to the category food:Record.
- *
- * @scope    public instance method
- * @param    xmlToAttributeSpecifiers           Array of type orp.util.XmlTextNodeToAttributeSpecifier
- * @param    xmlAttributeToAttributeSpecifiers  Array of type orp.util.XmlAttributeToAttributeSpecifier
- *
- * @return   Returns an array of created items.
- */
-orp.util.XmlConverter.prototype.makeItemsFromXmlFile = function(xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
-  this._world.beginTransaction();
-  var listOfOutputItems = [];
-  if (!xmlToAttributeSpecifiers) {
-    listOfOutputItems = this._doDefaultConversion(this._world, this._nameSpace, this._itemElements, this._itemCategory);
-  }
-  else {
-    // orp.lang.assert(xmlToAttributeSpecifiers instanceof Array);
-    orp.lang.assertType(xmlToAttributeSpecifiers, Array);
-    orp.lang.assert(xmlToAttributeSpecifiers[0] instanceof orp.util.XmlTextNodeToAttributeSpecifier);
-    for (var i = 0; i < this._itemElements.length; ++i) {
-      var newItem = this._world.newItem();
-      newItem.assignToCategory(this._itemCategory);
-      for (var j in xmlToAttributeSpecifiers) {
-        var tagPath = xmlToAttributeSpecifiers[j]._tagPath;
-        this._processElementTree(0, tagPath.length, this._itemElements[i], newItem, xmlToAttributeSpecifiers[j]);
-      }
-      if (xmlAttributeToAttributeSpecifiers) {
-        for (j in xmlAttributeToAttributeSpecifiers) {
-          var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
-          var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
-          if (xmlAttributeValue !== "") {
-            newItem.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
-          }
-        }
-      }
-      listOfOutputItems.push(newItem);
-    }
-  }
-  this._world.endTransaction();
-  return listOfOutputItems;
-};
-
-
-/**
- * @scope    public instance method
- * @param    equalitySpecifier                  type orp.util.XmlTextNodeToAttributeSpecifier or orp.util.XmlAttributeToAttributeSpecifier
- * @param    xmlToAttributeSpecifiers           Array of type orp.util.XmlTextNodeToAttributeSpecifier
- * @param    xmlAttributeToAttributeSpecifiers  Array of type orp.util.XmlAttributeToAttributeSpecifier
- *
- * @return   Returns an array of modified or created items.
- */
-orp.util.XmlConverter.prototype.makeOrModifyItemsFromXmlFile = function(equalitySpecifier, xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
-  var matchXmlAttribute;
-  if (equalitySpecifier instanceof orp.util.XmlAttributeToAttributeSpecifier) {
-    matchXmlAttribute = true;
-    var xmlAttributeToMatch = equalitySpecifier._xmlAttributeName;
-  } else {
-    orp.lang.assert(equalitySpecifier instanceof orp.util.XmlTextNodeToAttributeSpecifier,
-                "equalitySpecifier should be of type orp.util.XmlTextNodeToAttributeSpecifier or orp.util.XmlAttributeToAttributeSpecifier.");
-    matchXmlAttribute = false;
-    var xmlTagPathToMatch = equalitySpecifier._tagPath;
-  }
-  this._world.beginTransaction();
-  var itemsInItemCategory = this._world.getItemsInCategory(this._itemCategory);
-  var hash = {};
-  var matchString;
-  for (var j in itemsInItemCategory) {
-    matchString = itemsInItemCategory[j].getSingleEntryFromAttribute(equalitySpecifier._attribute);
-    if (matchString) {
-      hash[matchString.getValue()] = itemsInItemCategory[j];
-    }
-  }
-  var listOfOutputItems = [];
-  for (var i = 0; i < this._itemElements.length; ++i) {
-    itemElement = this._itemElements[i];
-    if (matchXmlAttribute) {
-      matchString = itemElement.getAttribute(xmlAttributeToMatch);
-    } else {
-      matchString = this._getTextForTagPath(itemElement, xmlTagPathToMatch);
-    }
-    var item;
-    if (hash[matchString]) {
-      item = hash[matchString];
-    } else {
-      item = this._world.newItem();
-      item.assignToCategory(this._itemCategory);
-      item.addEntry({attribute:equalitySpecifier._attribute, value:matchString});
-    }
-    for (j in xmlToAttributeSpecifiers) {
-      var tagPath = xmlToAttributeSpecifiers[j]._tagPath;
-      this._processElementTree(0, tagPath.length, this._itemElements[i], item, xmlToAttributeSpecifiers[j]);
-    }
-    if (xmlAttributeToAttributeSpecifiers) {
-      for (j in xmlAttributeToAttributeSpecifiers) {
-        var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
-        var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
-        if (xmlAttributeValue !== "") {
-          item.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
-        }
-      }
-    }
-    listOfOutputItems.push(item);
-  }
-  this._world.endTransaction();
-  return listOfOutputItems;
-};
-
-
-// -------------------------------------------------------------------
-// Private instance methods
-// -------------------------------------------------------------------
-
-/**
- * @scope    private instance method
- */
-orp.util.XmlConverter.prototype._doDefaultConversion = function(world, nameSpace, itemElements, itemCategory) {
-  var listOfOutputItems = [];
-  var hashTableOfAttributesKeyedByName = [];
-  for (var i = 0; i < itemElements.length; ++i) {
-    var newItem = world.newItem();
-    newItem.assignToCategory(itemCategory);
-    e = itemElements[i];
-    for (var j = 0; j < e.childNodes.length; ++j) {
-      var node = e.childNodes[j];
-      if (node.nodeType == Node.ELEMENT_NODE && node.firstChild && node.firstChild.nodeType == Node.TEXT_NODE) {
-        var attrName = nameSpace + ":" + node.tagName;
-        var attr = hashTableOfAttributesKeyedByName[attrName];
-        if (!attr) {
-          attr = world.newAttribute(attrName);
-          hashTableOfAttributesKeyedByName[attrName] = attr;
-        }
-        newItem.addEntry({attribute:attr, value:node.firstChild.nodeValue});
-      }
-    }
-    listOfOutputItems.push(newItem);
-  }
-  return listOfOutputItems;
-};
-
-
-/**
- * @scope    private instance method
- */
-orp.util.XmlConverter.prototype._processElementTree = function(level, maxLevel, node, newItem, xmlToAttributeSpecifier) {
-  if (level == maxLevel) {
-    if (node.childNodes && node.childNodes.length > 0 && node.childNodes[0].nodeType == Node.TEXT_NODE) {
-      value = this._world.transformValueToExpectedType(node.childNodes[0].nodeValue, xmlToAttributeSpecifier._listOfTypes);
-      newItem.addEntry({
-        attribute: xmlToAttributeSpecifier._attribute, 
-        value: value,
-        inverseAttribute: xmlToAttributeSpecifier._inverseAttribute });
-    }
-    return;
-  }
-  var tagName = xmlToAttributeSpecifier._tagPath[level];
-  var matchingElements = node.getElementsByTagName(tagName);
-  if (!matchingElements) {
-    return;
-  }
-  for (i in matchingElements) {
-    if (matchingElements[i].childNodes && matchingElements[i].childNodes.length > 0) {
-      this._processElementTree(level + 1, maxLevel, matchingElements[i], newItem, xmlToAttributeSpecifier);
-    }
-  }
-};
-
-
-/**
- * @scope    private instance method
- */
-orp.util.XmlConverter.prototype._getTextForTagPath = function(itemElement, xmlTagPathToMatch) {
-  var node = itemElement;
-  for (var i in xmlTagPathToMatch) {
-    var tagName = xmlTagPathToMatch[i];
-    var matchingElements = node.getElementsByTagName(tagName);
-    if (!matchingElements) {
-      return null;
-    }
-    node = matchingElements[0];
-  }
-  if (node.childNodes && node.childNodes.length > 0 && node.childNodes[0].nodeType == Node.TEXT_NODE) {
-    return node.childNodes[0].nodeValue;
-  } else {
-    return null;
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/TestSuite.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -30,6 +30,7 @@
         testSuite.addTestPage("../../../tests/util/TestSuite.html");
         testSuite.addTestPage("../../../tests/uuid/TestSuite.html");
         testSuite.addTestPage("../../../tests/model/TestSuite.html");
+        testSuite.addTestPage("../../../tests/transcribers/TestSuite.html");
         testSuite.addTestPage("../../../tests/archive/TestSuite.html");
         testSuite.addTestPage("../../../tests/storage/TestSuite.html");
         testSuite.addTestPage("../../../tests/view/TestSuite.html");

Added: trunk/tests/transcribers/LintTest.html
===================================================================
--- trunk/tests/transcribers/LintTest.html	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/transcribers/LintTest.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/transcribers/LintTest.js
===================================================================
--- trunk/tests/transcribers/LintTest.js	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/transcribers/LintTest.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,70 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "XmlImporter.js",
+    "XmlExporter.js"];
+  var prefix = "../../../source/transcribers/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/transcribers/TestSuite.html
===================================================================
--- trunk/tests/transcribers/TestSuite.html	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/transcribers/TestSuite.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,90 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Transcriber Test Suite</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestSuite(transcriberTestSuite());
+        return testSuite;
+      }
+      
+      function transcriberTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../../tests/transcribers/LintTest.html");
+        testSuite.addTestPage("../../../tests/transcribers/XmlImporterTest.html");
+        testSuite.addTestPage("../../../tests/transcribers/XmlImporterMultiplePassesTest.html");
+        testSuite.addTestPage("../../../tests/transcribers/test_dependencies.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>Util Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/transcribers/XmlConverterTest.js (from rev 393, trunk/tests/util/XmlConverterTest.js)
===================================================================
--- trunk/tests/util/XmlConverterTest.js	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/tests/transcribers/XmlConverterTest.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,233 @@
+/*****************************************************************************
+ XmlImporterTest.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie.
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+var world;
+var xmlImporter;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.require("orp.transcribers.XmlImporter");
+  dojo.require("orp.util.Util");
+  dojo.require("orp.archive.StubArchive");
+  dojo.require("orp.model.World");
+
+  XmlTextNodeToAttributeSpecifier = orp.transcribers.XmlTextNodeToAttributeSpecifier;
+  XmlAttributeToAttributeSpecifier = orp.transcribers.XmlAttributeToAttributeSpecifier;
+  XmlImporter = orp.transcribers.XmlImporter;
+
+  // var pathToTrunkDirectoryFromThisFile = "../../../";
+  pathToTrunkDirectoryFromThisFile = "../..";
+  
+  var archive = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
+  world = new orp.model.World(archive);
+  var annsPassword = "Ann's password";
+  var userAnn = world.newUser("Ann Doe", annsPassword);
+  world.login(userAnn, annsPassword);
+  var xmlFile = "../../../tests/util/food.xml";
+  xmlImporter = new XmlImporter(world, xmlFile, "food", "Record");
+}
+
+function tearDown() {
+  world.logout();
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDefaultConversionOfTagsToAttributes() {
+  var listOfItems = xmlImporter.makeItemsFromXmlFile();
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  var expectedNewCategory = null;
+  var listOfCategories = world.getCategories();
+  for (var i in listOfCategories) {
+    if (listOfCategories[i].getDisplayName() == "food:Record") {
+      expectedNewCategory = listOfCategories[i];
+      break;
+    }
+  }
+  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);  
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 4 attributes.', listOfAttributes.length == 4);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    hasAll = orp.util.areObjectsInSet(["food:name", "food:color", "food:flavor"], names);
+    assertTrue('Each item should have attributes called "food:name", "food:color" and "food:flavor".', hasAll);  
+  }
+}
+
+function testSimpleXmlToAttributeSpecifiers() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new orp.transcribers.XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], world.newAttribute("Flavor")));
+  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  var expectedNewCategory = null;
+  var listOfCategories = world.getCategories();
+  for (var i in listOfCategories) {
+    if (listOfCategories[i].getDisplayName() == "food:Record") {
+      expectedNewCategory = listOfCategories[i];
+      break;
+    }
+  }
+  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    assertTrue('Each item should have attributes called "Category", "Name" and "Flavor".', orp.util.areObjectsInSet(["Category", "Name", "Flavor"], names));
+  }
+}
+
+function testMultipleValuesForAnAttribute() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var flavorAttribute = world.newAttribute("Flavor");
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], flavorAttribute));
+  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    if (item.getDisplayName() == 'cheese puff') {
+      var cheesePuff = item;
+    } else if (item.getDisplayName() == 'carrot') {
+      var carrot = item;
+    }
+  }
+  var listOfFlavors = carrot.getEntriesForAttribute(flavorAttribute);
+  assertTrue("'carrot' should have exactly one flavor.", listOfFlavors.length == 1);
+  listOfFlavors = cheesePuff.getEntriesForAttribute(flavorAttribute);
+  assertTrue("'cheese puff' should have 2 flavors.", listOfFlavors.length == 2);
+  var flavorNames = [listOfFlavors[0].getValue(), listOfFlavors[1].getValue()];
+  assertTrue("'cheese puff' should have flavors called 'salty' and 'cheesy'.", orp.util.areObjectsInSet(['salty', 'cheesy'], flavorNames));
+}
+
+function testNestedXmlConversion() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
+  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    assertTrue('Each item should have attributes called "Category", "Name" and "Vitamin C".', orp.util.areObjectsInSet(["Category", "Name", "Vitamin C"], names));
+  }
+}
+
+function testXmlAttributeConversion() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var xmlAttributeToAttributeSpecifiers = new Array();
+  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", world.newAttribute("Food ID")));
+  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
+                                                      xmlAttributeToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  var listOfIds = [];
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+      if (listOfAttributes[j].getDisplayName() == "Food ID") {
+        listOfIds.push(item.getSingleEntryFromAttribute(listOfAttributes[j]).getValue());
+      }
+    }
+    assertTrue('Each item should have attributes called "Category", "Name" and "Food ID".', orp.util.areObjectsInSet(["Category", "Name", "Food ID"], names));
+  }
+  assertTrue('Values of the "Food ID" attribute should include "32", "47" and "114".', orp.util.areObjectsInSet(["32", "47", "114"], listOfIds));
+}
+
+function testExpectedType() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var colorAttribute = world.newAttribute("Color");
+  var foodColorCategory = world.newCategory("Food color");
+  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
+  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    var entryForColorAttribute = item.getSingleEntryFromAttribute(colorAttribute);
+    var valueOfColorAttribute = entryForColorAttribute.getValue();
+    assertTrue("The values of the color attribute should be in the category 'Food color'.", valueOfColorAttribute.isInCategory(foodColorCategory));
+  }
+}
+
+function testInverseAttribute() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var colorAttribute = world.newAttribute("Color");
+  var foodColorCategory = world.newCategory("Food Color");
+  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
+  var foodsOfThisColorCategory = world.newCategory("Foods of this color");
+  colorAttribute.addEntry({attribute:world.getAttributeCalledInverseAttribute(), value:foodsOfThisColorCategory});
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
+  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  var colorCategories = world.getItemsInCategory(foodColorCategory);
+  assertTrue('2 color categories should have been created', colorCategories.length == 2);
+  var red = colorCategories[0].getDisplayName() == 'red'? colorCategories[0] : colorCategories[1].getDisplayName() == 'red'? colorCategories[1] : null;
+  assertFalse('A color category named "red" should have been created', red == null);
+  var orange = colorCategories[0].getDisplayName() == 'orange'? colorCategories[0] : colorCategories[1].getDisplayName() == 'orange'? colorCategories[1] : null;
+  assertFalse('A color category named "orange" should have been created', orange == null);
+  var redFoods = red.getEntriesForAttribute(foodsOfThisColorCategory);
+  assertTrue('There should be one red food.', redFoods.length == 1);
+  var orangeFoods = orange.getEntriesForAttribute(foodsOfThisColorCategory);
+  assertTrue('There should be two orange foods.', orangeFoods.length == 2);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/tests/transcribers/XmlImporterMultiplePassesTest.html (from rev 393, trunk/tests/util/XmlConverterMultiplePassesTest.html)
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/tests/transcribers/XmlImporterMultiplePassesTest.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Additional unit tests for XmlImporter.js</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="XmlImporterMultiplePassesTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Additional unit tests for XmlImporter.js, testing multiple passes through an XML file.</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/transcribers/XmlImporterMultiplePassesTest.js (from rev 393, trunk/tests/util/XmlConverterMultiplePassesTest.js)
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-12-13 00:12:46 UTC (rev 393)
+++ trunk/tests/transcribers/XmlImporterMultiplePassesTest.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,148 @@
+/*****************************************************************************
+ XmlImporterMultiplePassesTest.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie.
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+var world;
+var foodIdAttribute;
+var itemCategory;
+var xmlImporterForSecondPass;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.require("orp.transcribers.XmlImporter");
+  dojo.require("orp.util.Util");
+  dojo.require("orp.archive.StubArchive");
+  dojo.require("orp.model.World");
+
+  XmlTextNodeToAttributeSpecifier = orp.transcribers.XmlTextNodeToAttributeSpecifier;
+  XmlAttributeToAttributeSpecifier = orp.transcribers.XmlAttributeToAttributeSpecifier;
+  XmlImporter = orp.transcribers.XmlImporter;
+  
+  // var pathToTrunkDirectoryFromThisFile = "../../../";
+  var pathToTrunkDirectoryFromThisFile = "../..";
+  
+  var archive = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
+  world = new orp.model.World(archive);
+  var annsPassword = "Ann's password";
+  var userAnn = world.newUser("Ann Doe", annsPassword);
+  world.login(userAnn, annsPassword);
+  var xmlFile = "../../../tests/util/food.xml";
+  var xmlImporter = new XmlImporter(world, xmlFile, "food", "Record");
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var xmlAttributeToAttributeSpecifiers = new Array();
+  foodIdAttribute = world.newAttribute("Food ID");
+  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute));
+  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
+                                                      xmlAttributeToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  itemCategory = xmlImporter.getItemCategory();
+  xmlImporterForSecondPass = new XmlImporter(world, xmlFile, null, "Record", itemCategory);
+}
+
+function tearDown() {
+  world.logout();
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testNewItemsNotCreatedForRecordsWithMatchingXmlAttribute() {
+  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
+  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
+  var listOfModifiedItems = xmlImporterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
+  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
+}
+
+function testNewItemsNotCreatedForRecordsWithMatchingXmlTextNode() {
+  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
+  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
+  var listOfModifiedItems = xmlImporterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
+  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
+}
+
+function testNewItemCreatedForRecordWithNonMatchingXmlTextNode() {
+  var firstItem = world.getItemsInCategory(itemCategory)[0];
+  var nameEntry = firstItem.getSingleEntryFromAttribute(world.getAttributeCalledName());
+  firstItem.replaceEntry({previousEntry:nameEntry, value:"parsnip"});
+
+  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
+  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
+  var listOfModifiedItems = xmlImporterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  var itemsInItemCategory = world.getItemsInCategory(itemCategory);
+  assertTrue('The category "itemCategory" should now have exactly 4 items.', itemsInItemCategory.length == 4);
+  var names = [];
+  for (var i in itemsInItemCategory) {
+    names.push(itemsInItemCategory[i].getDisplayName());
+  }
+  hasAll = orp.util.areObjectsInSet(["carrot", "cheese puff", "radish", "parsnip"], names);
+  assertTrue('Item names should include "carrot", "cheese puff", "radish" and "parsnip".', hasAll);  
+}
+
+function testModifiedItemsHaveAllExpectedAttributes() {
+  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
+  var xmlTextNodeToAttributeSpecifiers = new Array();
+  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "A"], world.newAttribute("Vitamin A")));
+  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
+  var listOfModifiedItems = xmlImporterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  for (var i in listOfModifiedItems) {
+    var item = listOfModifiedItems[i];
+    assertTrue('Each item should be in the category "itemCategory".', item.isInCategory(itemCategory));
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 5 attributes.', listOfAttributes.length == 5);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    hasAll = orp.util.areObjectsInSet(["Category", "Name", "Food ID", "Vitamin A", "Vitamin C"], names);
+    assertTrue('Each item should have attributes called "Category", "Name", "Food ID", "Vitamin A" and "Vitamin C".', hasAll);  
+  }
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/tests/transcribers/XmlImporterTest.html (from rev 393, trunk/tests/util/XmlConverterTest.html)

Added: trunk/tests/transcribers/test_dependencies.html
===================================================================
--- trunk/tests/transcribers/test_dependencies.html	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/transcribers/test_dependencies.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Dependency tests for the orp.transcriber package</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="test_dependencies.js"></script>
+  </head>
+  
+  <body>
+    <h1>Dependency tests for the orp.transcriber package</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/transcribers/test_dependencies.js
===================================================================
--- trunk/tests/transcribers/test_dependencies.js	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/transcribers/test_dependencies.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -0,0 +1,60 @@
+/*****************************************************************************
+ test_dependencies.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.transcribers.XmlImporter");
+  dojo.require("orp.transcribers.XmlExporter");
+}
+
+function tearDown() {
+  UtilTestVars = null;
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDependencies() {
+  var expectedOrpPackages = ["lang", "util", "uuid", "model", "archive", "storage", "transcribers"];
+  assertTrue("Only orp.lang, orp.util, orp.model, and orp.transcriber are defined", orp.util.hasExactlyTheseProperties(orp, expectedOrpPackages));
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/util/LintTest.js
===================================================================
--- trunk/tests/util/LintTest.js	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/util/LintTest.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -58,8 +58,7 @@
     "CsvParser.js",
     "DateValue.js",
     "LintTool.js",
-    "Util.js",
-    "XmlConverter.js"];
+    "Util.js"];
   var prefix = "../../../source/util/";
   var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
   var message = "Lint check \n" + errorReport;

Modified: trunk/tests/util/TestSuite.html
===================================================================
--- trunk/tests/util/TestSuite.html	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/util/TestSuite.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -27,8 +27,6 @@
         testSuite.addTestPage("../../../tests/util/DateValueTest.html");
         testSuite.addTestPage("../../../tests/util/LintTest.html");
         testSuite.addTestPage("../../../tests/util/UtilTest.html");
-        testSuite.addTestPage("../../../tests/util/XmlConverterTest.html");
-        testSuite.addTestPage("../../../tests/util/XmlConverterMultiplePassesTest.html");
         testSuite.addTestPage("../../../tests/util/test_dependencies.html");
         return testSuite;
       }

Deleted: trunk/tests/util/XmlConverterMultiplePassesTest.html
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -1,76 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Additional unit tests for XmlConverter.js</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="XmlConverterMultiplePassesTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Additional unit tests for XmlConverter.js, testing multiple passes through an XML file.</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>You should be able to run these unit tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/tests/util/XmlConverterMultiplePassesTest.js
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -1,148 +0,0 @@
-/*****************************************************************************
- XmlConverterMultiplePassesTest.js
- 
-******************************************************************************
- Written in 2005 by Mignon Belongie.
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-var world;
-var foodIdAttribute;
-var itemCategory;
-var xmlConverterForSecondPass;
-
-// -------------------------------------------------------------------
-// setUp and tearDown
-// -------------------------------------------------------------------
-
-function setUp() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.require("orp.util.XmlConverter");
-  dojo.require("orp.util.Util");
-  dojo.require("orp.archive.StubArchive");
-  dojo.require("orp.model.World");
-
-  XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
-  XmlAttributeToAttributeSpecifier = orp.util.XmlAttributeToAttributeSpecifier;
-  XmlConverter = orp.util.XmlConverter;
-  
-  // var pathToTrunkDirectoryFromThisFile = "../../../";
-  var pathToTrunkDirectoryFromThisFile = "../..";
-  
-  var archive = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
-  world = new orp.model.World(archive);
-  var annsPassword = "Ann's password";
-  var userAnn = world.newUser("Ann Doe", annsPassword);
-  world.login(userAnn, annsPassword);
-  var xmlFile = "../../../tests/util/food.xml";
-  var xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var xmlAttributeToAttributeSpecifiers = new Array();
-  foodIdAttribute = world.newAttribute("Food ID");
-  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
-                                                      xmlAttributeToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  itemCategory = xmlConverter.getItemCategory();
-  xmlConverterForSecondPass = new XmlConverter(world, xmlFile, null, "Record", itemCategory);
-}
-
-function tearDown() {
-  world.logout();
-}
-
-
-// -------------------------------------------------------------------
-// Test functions
-// -------------------------------------------------------------------
-
-function testNewItemsNotCreatedForRecordsWithMatchingXmlAttribute() {
-  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
-  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
-  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
-}
-
-function testNewItemsNotCreatedForRecordsWithMatchingXmlTextNode() {
-  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
-  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
-  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
-}
-
-function testNewItemCreatedForRecordWithNonMatchingXmlTextNode() {
-  var firstItem = world.getItemsInCategory(itemCategory)[0];
-  var nameEntry = firstItem.getSingleEntryFromAttribute(world.getAttributeCalledName());
-  firstItem.replaceEntry({previousEntry:nameEntry, value:"parsnip"});
-
-  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
-  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  var itemsInItemCategory = world.getItemsInCategory(itemCategory);
-  assertTrue('The category "itemCategory" should now have exactly 4 items.', itemsInItemCategory.length == 4);
-  var names = [];
-  for (var i in itemsInItemCategory) {
-    names.push(itemsInItemCategory[i].getDisplayName());
-  }
-  hasAll = orp.util.areObjectsInSet(["carrot", "cheese puff", "radish", "parsnip"], names);
-  assertTrue('Item names should include "carrot", "cheese puff", "radish" and "parsnip".', hasAll);  
-}
-
-function testModifiedItemsHaveAllExpectedAttributes() {
-  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
-  var xmlTextNodeToAttributeSpecifiers = new Array();
-  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "A"], world.newAttribute("Vitamin A")));
-  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  for (var i in listOfModifiedItems) {
-    var item = listOfModifiedItems[i];
-    assertTrue('Each item should be in the category "itemCategory".', item.isInCategory(itemCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 5 attributes.', listOfAttributes.length == 5);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    hasAll = orp.util.areObjectsInSet(["Category", "Name", "Food ID", "Vitamin A", "Vitamin C"], names);
-    assertTrue('Each item should have attributes called "Category", "Name", "Food ID", "Vitamin A" and "Vitamin C".', hasAll);  
-  }
-}
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/tests/util/XmlConverterTest.html
===================================================================
--- trunk/tests/util/XmlConverterTest.html	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/util/XmlConverterTest.html	2005-12-13 02:30:06 UTC (rev 397)
@@ -1,76 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests for XmlConverter.js</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="XmlConverterTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests for XmlConverter.js</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>You should be able to run these unit tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/tests/util/XmlConverterTest.js
===================================================================
--- trunk/tests/util/XmlConverterTest.js	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/util/XmlConverterTest.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -1,233 +0,0 @@
-/*****************************************************************************
- XmlConverterTest.js
- 
-******************************************************************************
- Written in 2005 by Mignon Belongie.
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-var world;
-var xmlConverter;
-
-// -------------------------------------------------------------------
-// setUp and tearDown
-// -------------------------------------------------------------------
-
-function setUp() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.require("orp.util.XmlConverter");
-  dojo.require("orp.util.Util");
-  dojo.require("orp.archive.StubArchive");
-  dojo.require("orp.model.World");
-
-  XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
-  XmlAttributeToAttributeSpecifier = orp.util.XmlAttributeToAttributeSpecifier;
-  XmlConverter = orp.util.XmlConverter;
-
-  // var pathToTrunkDirectoryFromThisFile = "../../../";
-  pathToTrunkDirectoryFromThisFile = "../..";
-  
-  var archive = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
-  world = new orp.model.World(archive);
-  var annsPassword = "Ann's password";
-  var userAnn = world.newUser("Ann Doe", annsPassword);
-  world.login(userAnn, annsPassword);
-  var xmlFile = "../../../tests/util/food.xml";
-  xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
-}
-
-function tearDown() {
-  world.logout();
-}
-
-
-// -------------------------------------------------------------------
-// Test functions
-// -------------------------------------------------------------------
-
-function testDefaultConversionOfTagsToAttributes() {
-  var listOfItems = xmlConverter.makeItemsFromXmlFile();
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var expectedNewCategory = null;
-  var listOfCategories = world.getCategories();
-  for (var i in listOfCategories) {
-    if (listOfCategories[i].getDisplayName() == "food:Record") {
-      expectedNewCategory = listOfCategories[i];
-      break;
-    }
-  }
-  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);  
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 4 attributes.', listOfAttributes.length == 4);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    hasAll = orp.util.areObjectsInSet(["food:name", "food:color", "food:flavor"], names);
-    assertTrue('Each item should have attributes called "food:name", "food:color" and "food:flavor".', hasAll);  
-  }
-}
-
-function testSimpleXmlToAttributeSpecifiers() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new orp.util.XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], world.newAttribute("Flavor")));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var expectedNewCategory = null;
-  var listOfCategories = world.getCategories();
-  for (var i in listOfCategories) {
-    if (listOfCategories[i].getDisplayName() == "food:Record") {
-      expectedNewCategory = listOfCategories[i];
-      break;
-    }
-  }
-  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Flavor".', orp.util.areObjectsInSet(["Category", "Name", "Flavor"], names));
-  }
-}
-
-function testMultipleValuesForAnAttribute() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var flavorAttribute = world.newAttribute("Flavor");
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], flavorAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    if (item.getDisplayName() == 'cheese puff') {
-      var cheesePuff = item;
-    } else if (item.getDisplayName() == 'carrot') {
-      var carrot = item;
-    }
-  }
-  var listOfFlavors = carrot.getEntriesForAttribute(flavorAttribute);
-  assertTrue("'carrot' should have exactly one flavor.", listOfFlavors.length == 1);
-  listOfFlavors = cheesePuff.getEntriesForAttribute(flavorAttribute);
-  assertTrue("'cheese puff' should have 2 flavors.", listOfFlavors.length == 2);
-  var flavorNames = [listOfFlavors[0].getValue(), listOfFlavors[1].getValue()];
-  assertTrue("'cheese puff' should have flavors called 'salty' and 'cheesy'.", orp.util.areObjectsInSet(['salty', 'cheesy'], flavorNames));
-}
-
-function testNestedXmlConversion() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Vitamin C".', orp.util.areObjectsInSet(["Category", "Name", "Vitamin C"], names));
-  }
-}
-
-function testXmlAttributeConversion() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var xmlAttributeToAttributeSpecifiers = new Array();
-  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", world.newAttribute("Food ID")));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
-                                                      xmlAttributeToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var listOfIds = [];
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-      if (listOfAttributes[j].getDisplayName() == "Food ID") {
-        listOfIds.push(item.getSingleEntryFromAttribute(listOfAttributes[j]).getValue());
-      }
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Food ID".', orp.util.areObjectsInSet(["Category", "Name", "Food ID"], names));
-  }
-  assertTrue('Values of the "Food ID" attribute should include "32", "47" and "114".', orp.util.areObjectsInSet(["32", "47", "114"], listOfIds));
-}
-
-function testExpectedType() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var colorAttribute = world.newAttribute("Color");
-  var foodColorCategory = world.newCategory("Food color");
-  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var entryForColorAttribute = item.getSingleEntryFromAttribute(colorAttribute);
-    var valueOfColorAttribute = entryForColorAttribute.getValue();
-    assertTrue("The values of the color attribute should be in the category 'Food color'.", valueOfColorAttribute.isInCategory(foodColorCategory));
-  }
-}
-
-function testInverseAttribute() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var colorAttribute = world.newAttribute("Color");
-  var foodColorCategory = world.newCategory("Food Color");
-  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
-  var foodsOfThisColorCategory = world.newCategory("Foods of this color");
-  colorAttribute.addEntry({attribute:world.getAttributeCalledInverseAttribute(), value:foodsOfThisColorCategory});
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  var colorCategories = world.getItemsInCategory(foodColorCategory);
-  assertTrue('2 color categories should have been created', colorCategories.length == 2);
-  var red = colorCategories[0].getDisplayName() == 'red'? colorCategories[0] : colorCategories[1].getDisplayName() == 'red'? colorCategories[1] : null;
-  assertFalse('A color category named "red" should have been created', red == null);
-  var orange = colorCategories[0].getDisplayName() == 'orange'? colorCategories[0] : colorCategories[1].getDisplayName() == 'orange'? colorCategories[1] : null;
-  assertFalse('A color category named "orange" should have been created', orange == null);
-  var redFoods = red.getEntriesForAttribute(foodsOfThisColorCategory);
-  assertTrue('There should be one red food.', redFoods.length == 1);
-  var orangeFoods = orange.getEntriesForAttribute(foodsOfThisColorCategory);
-  assertTrue('There should be two orange foods.', orangeFoods.length == 2);
-}
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/tests/util/test_dependencies.js
===================================================================
--- trunk/tests/util/test_dependencies.js	2005-12-13 02:16:59 UTC (rev 396)
+++ trunk/tests/util/test_dependencies.js	2005-12-13 02:30:06 UTC (rev 397)
@@ -42,7 +42,6 @@
   dojo.require("orp.util.CsvParser");
   dojo.require("orp.util.DateValue");
   dojo.require("orp.util.LintTool");
-  // dojo.require("orp.util.XmlConverter");  // FIX_ME: need to move XmlConverter out of util
 }
 
 function tearDown() {



From skinner at berlios.de  Tue Dec 13 03:33:23 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 03:33:23 +0100
Subject: [openrecord-svn] r398 - trunk/tests/transcribers
Message-ID: <200512130233.jBD2XNWd022722@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 03:33:18 +0100 (Tue, 13 Dec 2005)
New Revision: 398

Added:
   trunk/tests/transcribers/XmlImporterTest.js
Removed:
   trunk/tests/transcribers/XmlConverterTest.js
Modified:
   trunk/tests/transcribers/XmlImporterTest.html
Log:
Renamed XmlConverterTest.js to be XmlImporterTest.js

Deleted: trunk/tests/transcribers/XmlConverterTest.js
===================================================================
--- trunk/tests/transcribers/XmlConverterTest.js	2005-12-13 02:30:06 UTC (rev 397)
+++ trunk/tests/transcribers/XmlConverterTest.js	2005-12-13 02:33:18 UTC (rev 398)
@@ -1,233 +0,0 @@
-/*****************************************************************************
- XmlImporterTest.js
- 
-******************************************************************************
- Written in 2005 by Mignon Belongie.
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-var world;
-var xmlImporter;
-
-// -------------------------------------------------------------------
-// setUp and tearDown
-// -------------------------------------------------------------------
-
-function setUp() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.require("orp.transcribers.XmlImporter");
-  dojo.require("orp.util.Util");
-  dojo.require("orp.archive.StubArchive");
-  dojo.require("orp.model.World");
-
-  XmlTextNodeToAttributeSpecifier = orp.transcribers.XmlTextNodeToAttributeSpecifier;
-  XmlAttributeToAttributeSpecifier = orp.transcribers.XmlAttributeToAttributeSpecifier;
-  XmlImporter = orp.transcribers.XmlImporter;
-
-  // var pathToTrunkDirectoryFromThisFile = "../../../";
-  pathToTrunkDirectoryFromThisFile = "../..";
-  
-  var archive = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
-  world = new orp.model.World(archive);
-  var annsPassword = "Ann's password";
-  var userAnn = world.newUser("Ann Doe", annsPassword);
-  world.login(userAnn, annsPassword);
-  var xmlFile = "../../../tests/util/food.xml";
-  xmlImporter = new XmlImporter(world, xmlFile, "food", "Record");
-}
-
-function tearDown() {
-  world.logout();
-}
-
-
-// -------------------------------------------------------------------
-// Test functions
-// -------------------------------------------------------------------
-
-function testDefaultConversionOfTagsToAttributes() {
-  var listOfItems = xmlImporter.makeItemsFromXmlFile();
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var expectedNewCategory = null;
-  var listOfCategories = world.getCategories();
-  for (var i in listOfCategories) {
-    if (listOfCategories[i].getDisplayName() == "food:Record") {
-      expectedNewCategory = listOfCategories[i];
-      break;
-    }
-  }
-  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);  
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 4 attributes.', listOfAttributes.length == 4);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    hasAll = orp.util.areObjectsInSet(["food:name", "food:color", "food:flavor"], names);
-    assertTrue('Each item should have attributes called "food:name", "food:color" and "food:flavor".', hasAll);  
-  }
-}
-
-function testSimpleXmlToAttributeSpecifiers() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new orp.transcribers.XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], world.newAttribute("Flavor")));
-  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var expectedNewCategory = null;
-  var listOfCategories = world.getCategories();
-  for (var i in listOfCategories) {
-    if (listOfCategories[i].getDisplayName() == "food:Record") {
-      expectedNewCategory = listOfCategories[i];
-      break;
-    }
-  }
-  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Flavor".', orp.util.areObjectsInSet(["Category", "Name", "Flavor"], names));
-  }
-}
-
-function testMultipleValuesForAnAttribute() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var flavorAttribute = world.newAttribute("Flavor");
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], flavorAttribute));
-  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    if (item.getDisplayName() == 'cheese puff') {
-      var cheesePuff = item;
-    } else if (item.getDisplayName() == 'carrot') {
-      var carrot = item;
-    }
-  }
-  var listOfFlavors = carrot.getEntriesForAttribute(flavorAttribute);
-  assertTrue("'carrot' should have exactly one flavor.", listOfFlavors.length == 1);
-  listOfFlavors = cheesePuff.getEntriesForAttribute(flavorAttribute);
-  assertTrue("'cheese puff' should have 2 flavors.", listOfFlavors.length == 2);
-  var flavorNames = [listOfFlavors[0].getValue(), listOfFlavors[1].getValue()];
-  assertTrue("'cheese puff' should have flavors called 'salty' and 'cheesy'.", orp.util.areObjectsInSet(['salty', 'cheesy'], flavorNames));
-}
-
-function testNestedXmlConversion() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
-  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Vitamin C".', orp.util.areObjectsInSet(["Category", "Name", "Vitamin C"], names));
-  }
-}
-
-function testXmlAttributeConversion() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var xmlAttributeToAttributeSpecifiers = new Array();
-  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", world.newAttribute("Food ID")));
-  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
-                                                      xmlAttributeToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var listOfIds = [];
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-      if (listOfAttributes[j].getDisplayName() == "Food ID") {
-        listOfIds.push(item.getSingleEntryFromAttribute(listOfAttributes[j]).getValue());
-      }
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Food ID".', orp.util.areObjectsInSet(["Category", "Name", "Food ID"], names));
-  }
-  assertTrue('Values of the "Food ID" attribute should include "32", "47" and "114".', orp.util.areObjectsInSet(["32", "47", "114"], listOfIds));
-}
-
-function testExpectedType() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var colorAttribute = world.newAttribute("Color");
-  var foodColorCategory = world.newCategory("Food color");
-  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
-  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var entryForColorAttribute = item.getSingleEntryFromAttribute(colorAttribute);
-    var valueOfColorAttribute = entryForColorAttribute.getValue();
-    assertTrue("The values of the color attribute should be in the category 'Food color'.", valueOfColorAttribute.isInCategory(foodColorCategory));
-  }
-}
-
-function testInverseAttribute() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var colorAttribute = world.newAttribute("Color");
-  var foodColorCategory = world.newCategory("Food Color");
-  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
-  var foodsOfThisColorCategory = world.newCategory("Foods of this color");
-  colorAttribute.addEntry({attribute:world.getAttributeCalledInverseAttribute(), value:foodsOfThisColorCategory});
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
-  var listOfItems = xmlImporter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  var colorCategories = world.getItemsInCategory(foodColorCategory);
-  assertTrue('2 color categories should have been created', colorCategories.length == 2);
-  var red = colorCategories[0].getDisplayName() == 'red'? colorCategories[0] : colorCategories[1].getDisplayName() == 'red'? colorCategories[1] : null;
-  assertFalse('A color category named "red" should have been created', red == null);
-  var orange = colorCategories[0].getDisplayName() == 'orange'? colorCategories[0] : colorCategories[1].getDisplayName() == 'orange'? colorCategories[1] : null;
-  assertFalse('A color category named "orange" should have been created', orange == null);
-  var redFoods = red.getEntriesForAttribute(foodsOfThisColorCategory);
-  assertTrue('There should be one red food.', redFoods.length == 1);
-  var orangeFoods = orange.getEntriesForAttribute(foodsOfThisColorCategory);
-  assertTrue('There should be two orange foods.', orangeFoods.length == 2);
-}
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/tests/transcribers/XmlImporterTest.html
===================================================================
--- trunk/tests/transcribers/XmlImporterTest.html	2005-12-13 02:30:06 UTC (rev 397)
+++ trunk/tests/transcribers/XmlImporterTest.html	2005-12-13 02:33:18 UTC (rev 398)
@@ -11,15 +11,15 @@
 -->
 
   <head>
-    <title>Unit tests for XmlConverter.js</title>
+    <title>Unit tests for XmlImporter.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="XmlConverterTest.js"></script>
+    <script type="text/javascript" src="XmlImporterTest.js"></script>
   </head>
   
   <body>
-    <h1>Unit tests for XmlConverter.js</h1>
+    <h1>Unit tests for XmlImporter.js</h1>
 
     <p>This page is used to run unit tests for the JavaScript code in the 
     OpenRecord project.</p>

Copied: trunk/tests/transcribers/XmlImporterTest.js (from rev 397, trunk/tests/transcribers/XmlConverterTest.js)



From skinner at berlios.de  Tue Dec 13 04:12:15 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 04:12:15 +0100
Subject: [openrecord-svn] r399 - trunk/repositories
Message-ID: <200512130312.jBD3CFqq005029@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 04:12:12 +0100 (Tue, 13 Dec 2005)
New Revision: 399

Modified:
   trunk/repositories/open_agenda.json
Log:
Fixed open_agenda.json repository file to not reference the dummy MySuperFooView plugin.

Modified: trunk/repositories/open_agenda.json
===================================================================
--- trunk/repositories/open_agenda.json	2005-12-13 02:33:18 UTC (rev 398)
+++ trunk/repositories/open_agenda.json	2005-12-13 03:12:12 UTC (rev 399)
@@ -3134,32 +3134,32 @@
 },
   // =======================================================================
   { "Transaction": [
-{ "Item": { "uuid": "2fd62580-65f4-11da-ba24-cbd0c9855ce2" } },
+{ "Item": { "uuid": "d53d6ce0-6b71-11da-bb5c-0011111f4abe" } },
 { "Entry": {
-         "uuid": "2fd62581-65f4-11da-ba24-8e8c531e103c",
+         "uuid": "d53d6ce1-6b71-11da-bb5c-0011111f4abe",
          "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
     "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
-         "item": "2fd62580-65f4-11da-ba24-cbd0c9855ce2",
-        "value": "Super Foo"  }
+         "item": "d53d6ce0-6b71-11da-bb5c-0011111f4abe",
+        "value": "Hello World"  }
 },
 { "Entry": {
-         "uuid": "2fd62582-65f4-11da-ba24-898097682846",
+         "uuid": "d53d6ce2-6b71-11da-bb5c-0011111f4abe",
          "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
     "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
-         "item": "2fd62580-65f4-11da-ba24-cbd0c9855ce2",
-        "value": "MySuperFooView"  }
+         "item": "d53d6ce0-6b71-11da-bb5c-0011111f4abe",
+        "value": "HelloWorld"  }
 },
 { "Entry": {
-         "uuid": "2fd62583-65f4-11da-ba24-c25c7f602c54",
+         "uuid": "d53d6ce3-6b71-11da-bb5c-0011111f4abe",
          "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
     "attribute": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",
-         "item": "2fd62580-65f4-11da-ba24-cbd0c9855ce2",
-        "value": "MySuperFooView"  }
+         "item": "d53d6ce0-6b71-11da-bb5c-0011111f4abe",
+        "value": "HelloWorld"  }
 },
 { "Entry": {
-         "uuid": "2fd62584-65f4-11da-ba24-a27dc89f9af2",
+         "uuid": "d53d6ce4-6b71-11da-bb5c-0011111f4abe",
          "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
-         "item": ["2fd62580-65f4-11da-ba24-cbd0c9855ce2", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
+         "item": ["d53d6ce0-6b71-11da-bb5c-0011111f4abe", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
     "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
 }  ]
   }
\ No newline at end of file



From skinner at berlios.de  Tue Dec 13 06:06:50 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 13 Dec 2005 06:06:50 +0100
Subject: [openrecord-svn] r400 - in trunk: documentation source/plugins source/plugins/create_new_plugin source/view
Message-ID: <200512130506.jBD56o0u000628@sheep.berlios.de>

Author: skinner
Date: 2005-12-13 06:06:45 +0100 (Tue, 13 Dec 2005)
New Revision: 400

Added:
   trunk/source/plugins/DetailWithAttributionView.js
Modified:
   trunk/documentation/to_do_list.txt
   trunk/source/plugins/create_new_plugin/create_new_plugin_template.js
   trunk/source/view/SectionView.js
Log:
Created new plugin DetailWithAttributionView.js.  Made minor changes to SectionView.js and create_new_plugin_template.js.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-13 03:12:12 UTC (rev 399)
+++ trunk/documentation/to_do_list.txt	2005-12-13 05:06:45 UTC (rev 400)
@@ -109,7 +109,7 @@
        |          |         |  9. Pick one file, and do a group code review on it
 brian  | 1    IED |         | 10. Rationalize our CSS style sheet approach
        |          |         | 11. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
-brian  |          |         | 12. move XmlConverter.js out of util, because it depends on model code
+brian  |          | 0.2  IED| 12. move XmlConverter.js out of util, because it depends on model code
        |          |         | 13. Write one unit test that tests GUI code
        |          |         | 14. Write one performance test that measures the time some code takes
        |          |         | 15. Convert UI code from DOM level 0 to DOM level 2

Added: trunk/source/plugins/DetailWithAttributionView.js
===================================================================
--- trunk/source/plugins/DetailWithAttributionView.js	2005-12-13 03:12:12 UTC (rev 399)
+++ trunk/source/plugins/DetailWithAttributionView.js	2005-12-13 05:06:45 UTC (rev 400)
@@ -0,0 +1,174 @@
+// DetailWithAttributionView.js
+// Created in 2005 by
+//   Brian Douglas Skinner <brian.skinner at gumption.org>
+//   Mignon Belongie
+
+// Dojo Package System "provide" and "require" statements
+dojo.provide("orp.plugins.DetailWithAttributionView");
+dojo.require("orp.view.PluginView");
+
+/**
+ * The DetailWithAttributionView view displays a set of content items. 
+ *
+ * @scope    public instance constructor
+ * @extends  PluginView
+ * @param    superview    The View that serves as the superview for this view. 
+ * @param    htmlElement    The HTMLElement to display this view in. 
+ * @param    querySpec    The Query Spec item that provides the items for this PluginView to display
+ * @param    layoutItem    An item that can be used to store layout data (like table column order). 
+ */
+orp.plugins.DetailWithAttributionView = function(superview, htmlElement, querySpec, layoutItem) {
+  orp.view.PluginView.call(this, superview, htmlElement, querySpec, layoutItem, "DetailWithAttributionView");
+};
+
+dojo.inherits(orp.plugins.DetailWithAttributionView, orp.view.PluginView);  // makes DetailWithAttributionView be a subclass of PluginView
+
+
+// -------------------------------------------------------------------
+// Register this plugin in the SectionView registry
+// -------------------------------------------------------------------
+orp.plugins.DetailWithAttributionView.UUID = "e0f7b540-6b8a-11da-b1ed-0011111f4abe";
+orp.view.SectionView.registerPlugin(orp.plugins.DetailWithAttributionView);
+
+
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the UUID of the item that represents this class of plugin.
+ *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin.
+ */
+orp.plugins.DetailWithAttributionView.getPluginItemUuid = function() {
+  return orp.plugins.DetailWithAttributionView.UUID;
+};
+
+/**
+ * Returns a list of anonymous objects representing Entries that describe the plugin.
+ *
+ * @scope    public class method
+ * @return   A list of anonymous objects representing Entries that describe the plugin.
+ */
+orp.plugins.DetailWithAttributionView.getEntriesForItemRepresentingPluginClass = function(pluginItem, world) {
+  return [
+    { uuid: "e0f7b541-6b8a-11da-b1ed-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledName(),
+      value: "Detail View (with creator and time)" },
+    { uuid: "e0f7b542-6b8a-11da-b1ed-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledShortName(),
+      value: "DetailWithAttributionView" },
+    { uuid: "e0f7b543-6b8a-11da-b1ed-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledClassName(),
+      value: "DetailWithAttributionView" },
+    { uuid: "e0f7b544-6b8a-11da-b1ed-0011111f4abe",
+      item: pluginItem,
+      attribute: world.getAttributeCalledCategory(),
+      inverseAttribute: world.getAttributeCalledItemsInCategory(),
+      value: world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW) }
+  ];
+};
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
+ * @scope    public instance method
+ * @return   A JavaScript class. 
+ */
+orp.plugins.DetailWithAttributionView.prototype.getClass = function() {
+  return orp.plugins.DetailWithAttributionView;
+};
+
+/**
+ * This method is called whenever the DetailWithAttributionView plugin is used to
+ * display the results of a query.
+ *
+ * @scope    public instance method
+ */
+orp.plugins.DetailWithAttributionView.prototype.refresh = function() {
+  var listOfContentItems = this.fetchItems();
+  var outlineDiv = this.getHtmlElement();
+  orp.view.View.removeChildrenOfElement(outlineDiv);
+
+  for (var i in listOfContentItems) {
+    var contentItem = listOfContentItems[i];
+    this.createTableForItem(contentItem);
+    orp.view.View.appendNewElement(this.getHtmlElement(),"p",null,null,'\u00a0'); // unicode for &nbsp;
+  }
+};
+
+
+/**
+ * Given an item to be display, returns a string with XHTML to display
+ * the item.
+ *
+ * @scope    public instance method
+ * @param    inItem    An item to be displayed. 
+ * @return   A string containing the XHTML to display the item.
+ */
+orp.plugins.DetailWithAttributionView.prototype.createTableForItem = function (inItem) {
+  orp.lang.assert(inItem instanceof orp.model.Item);
+  
+  var attributeCalledName = this.getWorld().getAttributeCalledName();
+  
+  var itemTable = orp.view.View.appendNewElement(this.getHtmlElement(),"table", orp.view.SectionView.cssClass.SIMPLE_TABLE);
+
+  var tableRow = orp.view.View.appendNewElement(itemTable, "tr");
+  orp.view.View.appendNewElement(tableRow, "td", orp.view.SectionView.cssClass.TITLE, null, "Attribute");
+  orp.view.View.appendNewElement(tableRow, "td", orp.view.SectionView.cssClass.TITLE, null, "Value");
+  orp.view.View.appendNewElement(tableRow, "td", orp.view.SectionView.cssClass.TITLE, null, "Creator");
+  orp.view.View.appendNewElement(tableRow, "td", orp.view.SectionView.cssClass.TITLE, null, "Timestamp");
+  
+  this.createRowForAttribute(inItem, attributeCalledName, itemTable);
+  
+  var listOfAttributes = inItem.getAttributes();
+  for (var key in listOfAttributes) { 
+    var attribute = listOfAttributes[key];
+    if (attribute != attributeCalledName) {
+      this.createRowForAttribute(inItem, attribute, itemTable);
+    }
+  }
+
+  var tableRow = orp.view.View.appendNewElement(itemTable, "tr");
+  orp.view.View.appendNewElement(tableRow, "td", null, {colspan: "2"}, "<this item>");
+  orp.view.View.appendNewElement(tableRow, "td", orp.view.SectionView.cssClass.TITLE, null, inItem.getUserstamp().getDisplayString());
+  orp.view.View.appendNewElement(tableRow, "td", orp.view.SectionView.cssClass.TITLE, null, inItem.getCreationDate().toLocaleString());
+};
+
+orp.plugins.DetailWithAttributionView.prototype.createRowForAttribute = function (item, attribute, htmlTableElement, cssClass) {
+  var tableRow = orp.view.View.appendNewElement(htmlTableElement, "tr");
+  var cssLine = orp.view.SectionView.cssClass.LABEL + " " + orp.view.SectionView.cssClass.PLAIN;
+  var listOfEntries = item.getEntriesForAttribute(attribute);
+  var i;
+
+  var columnOneCell = orp.view.View.appendNewElement(tableRow, "td", cssLine, null, attribute.getDisplayName());
+  var columnTwoCell = orp.view.View.appendNewElement(tableRow, "td", cssClass, null);
+  for (i in listOfEntries) {
+    var entry = listOfEntries[i];
+    orp.view.View.appendNewTextNode(columnTwoCell, entry.getDisplayString());
+    orp.view.View.appendNewElement(columnTwoCell, "br");
+  }
+  var columnThreeCell = orp.view.View.appendNewElement(tableRow, "td", cssClass, null);
+  for (i in listOfEntries) {
+    var entry = listOfEntries[i];
+    orp.view.View.appendNewTextNode(columnThreeCell, entry.getUserstamp().getDisplayString());
+    orp.view.View.appendNewElement(columnThreeCell, "br");
+  }
+  var columnFourCell = orp.view.View.appendNewElement(tableRow, "td", cssClass, null);
+  for (i in listOfEntries) {
+    var entry = listOfEntries[i];
+    orp.view.View.appendNewTextNode(columnFourCell, entry.getCreationDate().toLocaleString());
+    orp.view.View.appendNewElement(columnFourCell, "br");
+  }
+};
+
+// End of file
+

Modified: trunk/source/plugins/create_new_plugin/create_new_plugin_template.js
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin_template.js	2005-12-13 03:12:12 UTC (rev 399)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin_template.js	2005-12-13 05:06:45 UTC (rev 400)
@@ -1,5 +1,5 @@
 // %(CLASS_NAME).js
-// Written by %(AUTHOR)
+// Created by %(AUTHOR)
 
 // Dojo Package System "provide" and "require" statements
 dojo.provide("orp.plugins.%(CLASS_NAME)");

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-12-13 03:12:12 UTC (rev 399)
+++ trunk/source/view/SectionView.js	2005-12-13 05:06:45 UTC (rev 400)
@@ -319,12 +319,13 @@
     optionElement.selected = (selectedPluginClass == pluginClass);
     optionElement.value = pluginClass.getPluginItemUuid();
     var pluginItem = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
-    optionElement.text = pluginItem.getDisplayString();
+    optionElement.text = pluginItem.getDisplayName();
     dojo.event.connect(optionElement, "onclick", this, "clickOnPluginSelectionMenu");
   }
-  orp.view.View.appendNewTextNode(controlArea," of items whose ");
+  orp.view.View.appendNewElement(controlArea,"br");
+  orp.view.View.appendNewTextNode(controlArea,"Include items whose ");
   this._queryEditSpan = orp.view.View.appendNewElement(controlArea, "span");
-  orp.view.View.appendNewTextNode(controlArea,".");
+  // orp.view.View.appendNewTextNode(controlArea,".");
 
   // create a div element for the plugin class to use
   this._pluginDiv = orp.view.View.appendNewElement(sectionDiv, "div");



From skinner at berlios.de  Thu Dec 15 04:05:36 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Thu, 15 Dec 2005 04:05:36 +0100
Subject: [openrecord-svn] r402 - trunk/documentation
Message-ID: <200512150305.jBF35adm017614@sheep.berlios.de>

Author: skinner
Date: 2005-12-15 04:05:15 +0100 (Thu, 15 Dec 2005)
New Revision: 402

Modified:
   trunk/documentation/to_do_list.txt
Log:
Added to_do_list.txt task about making a screencast.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-15 03:04:12 UTC (rev 401)
+++ trunk/documentation/to_do_list.txt	2005-12-15 03:05:15 UTC (rev 402)
@@ -90,6 +90,7 @@
        |          |         |  3. Look at replacing our notion of Views with Dojo's notion of widgets
        |          |         |  4. Run in IE as well as Firefox
        |          |         |  5. Add support for repository merging
+       |          |         |  6. Use Camtesia Studio to create a screencast about OpenRecord (and plugins)
 -------+----------+---------+----------------------------------------------
 
 



From skinner at berlios.de  Thu Dec 15 04:04:16 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Thu, 15 Dec 2005 04:04:16 +0100
Subject: [openrecord-svn] r401 - trunk/repositories
Message-ID: <200512150304.jBF34Gfi016879@sheep.berlios.de>

Author: skinner
Date: 2005-12-15 04:04:12 +0100 (Thu, 15 Dec 2005)
New Revision: 401

Modified:
   trunk/repositories/open_agenda.json
Log:
Checking in a version of the open_agenda.json repository that has the DetailWithAttributionView plugin installed.

Modified: trunk/repositories/open_agenda.json
===================================================================
--- trunk/repositories/open_agenda.json	2005-12-13 05:06:45 UTC (rev 400)
+++ trunk/repositories/open_agenda.json	2005-12-15 03:04:12 UTC (rev 401)
@@ -3162,4 +3162,35 @@
          "item": ["d53d6ce0-6b71-11da-bb5c-0011111f4abe", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
     "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
 }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+{ "Item": { "uuid": "e0f7b540-6b8a-11da-b1ed-0011111f4abe" } },
+{ "Entry": {
+         "uuid": "e0f7b541-6b8a-11da-b1ed-0011111f4abe",
+         "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": "e0f7b540-6b8a-11da-b1ed-0011111f4abe",
+        "value": "Detail View (with creator and time)"  }
+},
+{ "Entry": {
+         "uuid": "e0f7b542-6b8a-11da-b1ed-0011111f4abe",
+         "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": "e0f7b540-6b8a-11da-b1ed-0011111f4abe",
+        "value": "DetailWithAttributionView"  }
+},
+{ "Entry": {
+         "uuid": "e0f7b543-6b8a-11da-b1ed-0011111f4abe",
+         "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": "e0f7b540-6b8a-11da-b1ed-0011111f4abe",
+        "value": "DetailWithAttributionView"  }
+},
+{ "Entry": {
+         "uuid": "e0f7b544-6b8a-11da-b1ed-0011111f4abe",
+         "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+         "item": ["e0f7b540-6b8a-11da-b1ed-0011111f4abe", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
+    "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+}  ]
   }
\ No newline at end of file



From skinner at berlios.de  Fri Dec 16 22:07:02 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Fri, 16 Dec 2005 22:07:02 +0100
Subject: [openrecord-svn] r403 - trunk/source/transcribers
Message-ID: <200512162107.jBGL72kX003265@sheep.berlios.de>

Author: skinner
Date: 2005-12-16 22:07:01 +0100 (Fri, 16 Dec 2005)
New Revision: 403

Added:
   trunk/source/transcribers/XmlExporter.js
Log:
ooops, forgot to check in XmlExporter.js last time.

Added: trunk/source/transcribers/XmlExporter.js
===================================================================
--- trunk/source/transcribers/XmlExporter.js	2005-12-15 03:05:15 UTC (rev 402)
+++ trunk/source/transcribers/XmlExporter.js	2005-12-16 21:07:01 UTC (rev 403)
@@ -0,0 +1,54 @@
+/*****************************************************************************
+ XmlExporter.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.transcribers.XmlExporter");
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
+/**
+ * The XmlExporter class knows how to take a set of items and serialize
+ * them to an XML file.
+ *
+ * @scope    public instance constructor
+ */
+orp.transcribers.XmlExporter = function() {
+  dojo.unimplemented("orp.transcribers.XmlExporter");
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at berlios.de  Mon Dec 19 07:40:06 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Mon, 19 Dec 2005 07:40:06 +0100
Subject: [openrecord-svn] r404 - trunk/third_party/dojo
Message-ID: <200512190640.jBJ6e6Op005211@sheep.berlios.de>

Author: skinner
Date: 2005-12-19 07:39:55 +0100 (Mon, 19 Dec 2005)
New Revision: 404

Removed:
   trunk/third_party/dojo/dojo-rev1759/
Log:
Deleted entire /third_party/dojo/dojo-rev1759 directory.



From skinner at berlios.de  Mon Dec 19 07:56:37 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Mon, 19 Dec 2005 07:56:37 +0100
Subject: [openrecord-svn] r406 - in trunk: documentation source source/archive tests tests/archive tests/dojo tests/dom tests/lang tests/model tests/storage tests/tests_of_external_code tests/transcribers tests/util tests/uuid tests/view
Message-ID: <200512190656.jBJ6ubFC013379@sheep.berlios.de>

Author: skinner
Date: 2005-12-19 07:56:03 +0100 (Mon, 19 Dec 2005)
New Revision: 406

Modified:
   trunk/documentation/to_do_list.txt
   trunk/source/OpenRecordLoader.js
   trunk/source/OpenRecordLoaderStepThree.js
   trunk/source/archive/StubArchive.js
   trunk/tests/LintTest.html
   trunk/tests/LintTest.js
   trunk/tests/archive/LintTest.html
   trunk/tests/archive/LintTest.js
   trunk/tests/archive/test_dependencies.html
   trunk/tests/archive/test_dependencies.js
   trunk/tests/dojo/SimpleDojoTest.html
   trunk/tests/dojo/SimpleDojoTest.js
   trunk/tests/dom/test_dom.html
   trunk/tests/dom/test_dom.js
   trunk/tests/lang/LangTest.html
   trunk/tests/lang/LangTest.js
   trunk/tests/model/LintTest.html
   trunk/tests/model/LintTest.js
   trunk/tests/model/ModelTest.html
   trunk/tests/model/ModelTest.js
   trunk/tests/model/RepositoryWritingTest.html
   trunk/tests/model/RepositoryWritingTest.js
   trunk/tests/model/TestReorderingForSpecialCases.html
   trunk/tests/model/TestReorderingForSpecialCases.js
   trunk/tests/model/TestReorderingForTypicalOrdinals.html
   trunk/tests/model/TestReorderingForTypicalOrdinals.js
   trunk/tests/model/test_AfterLogin.html
   trunk/tests/model/test_AfterLogin.js
   trunk/tests/model/test_BeforeLogin.html
   trunk/tests/model/test_BeforeLogin.js
   trunk/tests/model/test_SequentialUsers.html
   trunk/tests/model/test_SequentialUsers.js
   trunk/tests/model/test_dependencies.html
   trunk/tests/model/test_dependencies.js
   trunk/tests/storage/DirectoryReadingTest.html
   trunk/tests/storage/DirectoryReadingTest.js
   trunk/tests/storage/LintTest.html
   trunk/tests/storage/LintTest.js
   trunk/tests/storage/StorageTest.html
   trunk/tests/storage/StorageTest.js
   trunk/tests/storage/test_dependencies.html
   trunk/tests/storage/test_dependencies.js
   trunk/tests/tests_of_external_code/TimingTest.html
   trunk/tests/tests_of_external_code/TimingTest.js
   trunk/tests/transcribers/LintTest.html
   trunk/tests/transcribers/LintTest.js
   trunk/tests/transcribers/XmlImporterMultiplePassesTest.html
   trunk/tests/transcribers/XmlImporterMultiplePassesTest.js
   trunk/tests/transcribers/XmlImporterTest.html
   trunk/tests/transcribers/XmlImporterTest.js
   trunk/tests/transcribers/test_dependencies.html
   trunk/tests/transcribers/test_dependencies.js
   trunk/tests/util/CsvParserTest.html
   trunk/tests/util/CsvParserTest.js
   trunk/tests/util/DateValueTest.html
   trunk/tests/util/DateValueTest.js
   trunk/tests/util/LintTest.html
   trunk/tests/util/LintTest.js
   trunk/tests/util/UtilTest.html
   trunk/tests/util/UtilTest.js
   trunk/tests/util/test_dependencies.html
   trunk/tests/util/test_dependencies.js
   trunk/tests/uuid/LintTest.html
   trunk/tests/uuid/LintTest.js
   trunk/tests/uuid/UuidTest.html
   trunk/tests/uuid/UuidTest.js
   trunk/tests/view/LintTest.html
   trunk/tests/view/LintTest.js
   trunk/tests/view/SectionViewConstructorTest.html
   trunk/tests/view/SectionViewConstructorTest.js
Log:
Updated the OpenRecord source code and unit tests to point to the new dojo 0.2.0 code (now in .../third_party/dojo/ instead of .../third_party/dojo/dojo-rev1759).  Also, for the few files that use the dojo.crypto.MD5 code, converted them over to use the new MD5 API.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/documentation/to_do_list.txt	2005-12-19 06:56:03 UTC (rev 406)
@@ -84,7 +84,7 @@
 -------+----------+---------+----------------------------------------------
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
-       |          |         |  0. Switch to using Dojo-0.2.0, and have it live directly in .../third_party/dojo
+brian  |          | 0.3  IED|  0. Switch to using Dojo-0.2.0, and have it live directly in .../third_party/dojo
        |          |         |  1. Attempt to embed an OpenRecord view in a MediaWiki page
        |          |         |  2. Have a server that supports repositories with thousands of items
        |          |         |  3. Look at replacing our notion of Views with Dojo's notion of widgets

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/source/OpenRecordLoader.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -94,7 +94,7 @@
 
 orp.loader.loadStylesheet("source/base_style.css");
 
-orp.loader.loadScript("third_party/dojo/dojo-rev1759/dojo.js");
+orp.loader.loadScript("third_party/dojo/dojo.js");
 orp.loader.loadScript("third_party/scriptaculous/prototype.js");
 orp.loader.loadScript("third_party/scriptaculous/effects.js");
 orp.loader.loadScript("third_party/scriptaculous/dragdrop.js");

Modified: trunk/source/OpenRecordLoaderStepThree.js
===================================================================
--- trunk/source/OpenRecordLoaderStepThree.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/source/OpenRecordLoaderStepThree.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -28,7 +28,7 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
-dojo.hostenv.setModulePrefix("orp", "../../../source");  // path relative to dojo
+dojo.hostenv.setModulePrefix("orp", "../../source");  // relative to dojo.js
 
 dojo.require("orp.model.World");
 dojo.require("orp.view.RootView");

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/source/archive/StubArchive.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -33,7 +33,8 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.archive.StubArchive");
 dojo.provide("orp.archive.ArchiveLoader");
-dojo.require("dojo.crypto.*");
+dojo.require("dojo.crypto");
+dojo.require("dojo.crypto.MD5");
 dojo.require("orp.model.World");
 dojo.require("orp.model.Item");
 dojo.require("orp.model.Entry");
@@ -468,7 +469,8 @@
   var md5Authentication = null;
   if (authentication) {
     // md5Authentication = orp.util.hex_md5(authentication);
-    md5Authentication = dojo.crypto.toBinHex(dojo.crypto.MD5.compute(authentication));
+    // md5Authentication = dojo.crypto.toBinHex(dojo.crypto.MD5.compute(authentication));
+    md5Authentication = dojo.crypto.MD5.compute(authentication, dojo.crypto.outputTypes.Hex);
   }
   this._hashTableOfUserAuthenticationInfo[newUser.getUuid()] = md5Authentication;
 
@@ -542,7 +544,8 @@
   var md5hashOfPassword = null;
   if (password) {
     // md5hashOfPassword = orp.util.hex_md5(password);
-    md5hashOfPassword = dojo.crypto.toBinHex(dojo.crypto.MD5.compute(password));
+    // md5hashOfPassword = dojo.crypto.toBinHex(dojo.crypto.MD5.compute(password));
+    md5hashOfPassword = dojo.crypto.MD5.compute(password, dojo.crypto.outputTypes.Hex);
   }
   var realAuthentication = this.getAuthenticationInfoForUser(user);
   var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);

Modified: trunk/tests/LintTest.html
===================================================================
--- trunk/tests/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/LintTest.js
===================================================================
--- trunk/tests/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -34,8 +34,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../../source");
+  dojo.setModulePrefix("dojo", "../../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../../source"); // relative to dojo.js?
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/archive/LintTest.html
===================================================================
--- trunk/tests/archive/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/archive/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/archive/LintTest.js
===================================================================
--- trunk/tests/archive/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/archive/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/archive/test_dependencies.html
===================================================================
--- trunk/tests/archive/test_dependencies.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/archive/test_dependencies.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Dependency tests for the orp.archive package</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_dependencies.js"></script>
   </head>
   

Modified: trunk/tests/archive/test_dependencies.js
===================================================================
--- trunk/tests/archive/test_dependencies.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/archive/test_dependencies.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -35,8 +35,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.archive.JsonFormat");
   dojo.require("orp.archive.JsonSerializer");
   dojo.require("orp.archive.JsonDeserializer");

Modified: trunk/tests/dojo/SimpleDojoTest.html
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/dojo/SimpleDojoTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit test - Dojo code availability</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="SimpleDojoTest.js"></script>
   </head>
   

Modified: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -33,7 +33,13 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.setModulePrefix("dojo", "../../dojo/src");  // relative to testRunner.html
+  // alert("Dojo version: " + dojo.version.toString()); // "Dojo version: 0.2.0 (2540)"
+  // alert("dojo.hostenv.getBaseScriptUri() = " + dojo.hostenv.getBaseScriptUri());
+    // "dojo.hostenv.getBaseScriptUri() = ../../third_party/dojo/"
+  dojo.require("dojo.lang.*");
+  dojo.require("dojo.text.*");
+  dojo.require("dojo.crypto.MD5");
 }
 
 function tearDown() {
@@ -46,21 +52,12 @@
 // -------------------------------------------------------------------
 
 function testDojoTextTrim() {
-  // alert("Dojo version: " + dojo.version.toString()); 
-    // Dojo version: 0.1.0 (1321)
-  // alert("dojo.hostenv.getBaseScriptUri() = " + dojo.hostenv.getBaseScriptUri());
-    // dojo.hostenv.getBaseScriptUri() = ../../third_party/dojo/dojo-0.1.0
-
-  dojo.require("dojo.text.*");
-
   var string = "     Just Foo    ";
   var trimmedString = dojo.text.trim(string);
   assertTrue("'Just Foo' remains after trimming.", trimmedString == "Just Foo");
 }
 
 function testDojoLang() {
-  dojo.require("dojo.lang.*");
-
   assertTrue("'Iggy Pop' is a string.", dojo.lang.isString("Iggy Pop"));
 }
 
@@ -80,8 +77,6 @@
 }
 
 function testMD5() {
-  dojo.require("dojo.crypto.*");
-
   var whenInTheCourse = "When in the course of human events: d41d8cd98f00b204e9800998ecf8427e";
   var theQuickBrownFox = "The quick brown fox jumps over the lazy dog";
   var theRainInSpain = "The rain in Spain falls mainly on the plain.";
@@ -98,7 +93,8 @@
 // -------------------------------------------------------------------
 
 function getHexMD5(string) {
-  return dojo.crypto.toBinHex(dojo.crypto.MD5.compute(string));
+  // return dojo.crypto.toBinHex(dojo.crypto.MD5.compute(string));
+  return dojo.crypto.MD5.compute(string, dojo.crypto.outputTypes.Hex);
 }
 
 

Modified: trunk/tests/dom/test_dom.html
===================================================================
--- trunk/tests/dom/test_dom.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/dom/test_dom.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for orp.dom</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_dom.js"></script>
   </head>
   

Modified: trunk/tests/dom/test_dom.js
===================================================================
--- trunk/tests/dom/test_dom.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/dom/test_dom.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -34,8 +34,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.dom");
 }
 

Modified: trunk/tests/lang/LangTest.html
===================================================================
--- trunk/tests/lang/LangTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/lang/LangTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for Lang.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="LangTest.js"></script>
   </head>
   

Modified: trunk/tests/lang/LangTest.js
===================================================================
--- trunk/tests/lang/LangTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/lang/LangTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -34,8 +34,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.hostenv.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.lang.Lang");
 }
 

Modified: trunk/tests/model/LintTest.html
===================================================================
--- trunk/tests/model/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/model/LintTest.js
===================================================================
--- trunk/tests/model/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/model/ModelTest.html
===================================================================
--- trunk/tests/model/ModelTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/ModelTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for the data model</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="ModelTest.js"></script>
   </head>
   

Modified: trunk/tests/model/ModelTest.js
===================================================================
--- trunk/tests/model/ModelTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/ModelTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -45,8 +45,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.model.World");
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.util.DateValue");

Modified: trunk/tests/model/RepositoryWritingTest.html
===================================================================
--- trunk/tests/model/RepositoryWritingTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/RepositoryWritingTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -12,7 +12,7 @@
     <title>Test writing to repositories</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="RepositoryWritingTest.js"></script>
   </head>
   

Modified: trunk/tests/model/RepositoryWritingTest.js
===================================================================
--- trunk/tests/model/RepositoryWritingTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/RepositoryWritingTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -41,8 +41,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.archive.DeltaArchive");
   dojo.require("orp.model.World");
 

Modified: trunk/tests/model/TestReorderingForSpecialCases.html
===================================================================
--- trunk/tests/model/TestReorderingForSpecialCases.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/TestReorderingForSpecialCases.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -12,7 +12,7 @@
     <title>Test reordering of items for special cases of the corresponding ordinals (via a mock)</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="TestReorderingForSpecialCases.js"></script>
   </head>

Modified: trunk/tests/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/tests/model/TestReorderingForSpecialCases.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/TestReorderingForSpecialCases.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -48,8 +48,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");
 

Modified: trunk/tests/model/TestReorderingForTypicalOrdinals.html
===================================================================
--- trunk/tests/model/TestReorderingForTypicalOrdinals.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/TestReorderingForTypicalOrdinals.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -12,7 +12,7 @@
     <title>Test reordering items with typical ordinals (via a mock)</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="TestReorderingForTypicalOrdinals.js"></script>
   </head>

Modified: trunk/tests/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -52,8 +52,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");
   

Modified: trunk/tests/model/test_AfterLogin.html
===================================================================
--- trunk/tests/model/test_AfterLogin.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_AfterLogin.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for the data model</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_AfterLogin.js"></script>
   </head>
   

Modified: trunk/tests/model/test_AfterLogin.js
===================================================================
--- trunk/tests/model/test_AfterLogin.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_AfterLogin.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -46,8 +46,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.model.World");
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.util.DateValue");

Modified: trunk/tests/model/test_BeforeLogin.html
===================================================================
--- trunk/tests/model/test_BeforeLogin.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_BeforeLogin.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for the data model</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_BeforeLogin.js"></script>
   </head>
   

Modified: trunk/tests/model/test_BeforeLogin.js
===================================================================
--- trunk/tests/model/test_BeforeLogin.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_BeforeLogin.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -45,8 +45,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.model.World");
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.util.DateValue");

Modified: trunk/tests/model/test_SequentialUsers.html
===================================================================
--- trunk/tests/model/test_SequentialUsers.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_SequentialUsers.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for the data model</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_SequentialUsers.js"></script>
   </head>
   

Modified: trunk/tests/model/test_SequentialUsers.js
===================================================================
--- trunk/tests/model/test_SequentialUsers.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_SequentialUsers.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -45,8 +45,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.model.World");
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.util.DateValue");

Modified: trunk/tests/model/test_dependencies.html
===================================================================
--- trunk/tests/model/test_dependencies.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_dependencies.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Dependency tests for the orp.model package</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_dependencies.js"></script>
   </head>
   

Modified: trunk/tests/model/test_dependencies.js
===================================================================
--- trunk/tests/model/test_dependencies.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/model/test_dependencies.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -35,8 +35,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.model.ContentRecord");
   dojo.require("orp.model.Entry");
   dojo.require("orp.model.Item");

Modified: trunk/tests/storage/DirectoryReadingTest.html
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/DirectoryReadingTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -12,7 +12,7 @@
     <title>Test reading directories</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="DirectoryReadingTest.js"></script>
   </head>
   

Modified: trunk/tests/storage/DirectoryReadingTest.js
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/DirectoryReadingTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -33,8 +33,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.storage.directoryList");
   dojo.require("orp.util.Util");
   orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION = "../..";

Modified: trunk/tests/storage/LintTest.html
===================================================================
--- trunk/tests/storage/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/storage/LintTest.js
===================================================================
--- trunk/tests/storage/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/storage/StorageTest.html
===================================================================
--- trunk/tests/storage/StorageTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/StorageTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -12,7 +12,7 @@
     <title>Test writing to repositories</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="StorageTest.js"></script>
   </head>
   

Modified: trunk/tests/storage/StorageTest.js
===================================================================
--- trunk/tests/storage/StorageTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/StorageTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -38,8 +38,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.Util");
   dojo.require("orp.storage.FileProtocolStorage");
   dojo.require("orp.storage.HttpProtocolStorage");

Modified: trunk/tests/storage/test_dependencies.html
===================================================================
--- trunk/tests/storage/test_dependencies.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/test_dependencies.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Dependency tests for the orp.storage package</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_dependencies.js"></script>
   </head>
   

Modified: trunk/tests/storage/test_dependencies.js
===================================================================
--- trunk/tests/storage/test_dependencies.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/storage/test_dependencies.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -35,8 +35,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.storage.Storage");
   dojo.require("orp.storage.FakeStorage");
   dojo.require("orp.storage.FileProtocolStorage");

Modified: trunk/tests/tests_of_external_code/TimingTest.html
===================================================================
--- trunk/tests/tests_of_external_code/TimingTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/tests_of_external_code/TimingTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>JavaScript timing tests</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="TimingTest.js"></script>
   </head>
   

Modified: trunk/tests/tests_of_external_code/TimingTest.js
===================================================================
--- trunk/tests/tests_of_external_code/TimingTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/tests_of_external_code/TimingTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -78,8 +78,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.Util");
 }
 

Modified: trunk/tests/transcribers/LintTest.html
===================================================================
--- trunk/tests/transcribers/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/transcribers/LintTest.js
===================================================================
--- trunk/tests/transcribers/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/transcribers/XmlImporterMultiplePassesTest.html
===================================================================
--- trunk/tests/transcribers/XmlImporterMultiplePassesTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/XmlImporterMultiplePassesTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Additional unit tests for XmlImporter.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="XmlImporterMultiplePassesTest.js"></script>
   </head>
   

Modified: trunk/tests/transcribers/XmlImporterMultiplePassesTest.js
===================================================================
--- trunk/tests/transcribers/XmlImporterMultiplePassesTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/XmlImporterMultiplePassesTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -38,8 +38,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.transcribers.XmlImporter");
   dojo.require("orp.util.Util");
   dojo.require("orp.archive.StubArchive");

Modified: trunk/tests/transcribers/XmlImporterTest.html
===================================================================
--- trunk/tests/transcribers/XmlImporterTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/XmlImporterTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for XmlImporter.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="XmlImporterTest.js"></script>
   </head>
   

Modified: trunk/tests/transcribers/XmlImporterTest.js
===================================================================
--- trunk/tests/transcribers/XmlImporterTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/XmlImporterTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -36,8 +36,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.transcribers.XmlImporter");
   dojo.require("orp.util.Util");
   dojo.require("orp.archive.StubArchive");

Modified: trunk/tests/transcribers/test_dependencies.html
===================================================================
--- trunk/tests/transcribers/test_dependencies.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/test_dependencies.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Dependency tests for the orp.transcriber package</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_dependencies.js"></script>
   </head>
   

Modified: trunk/tests/transcribers/test_dependencies.js
===================================================================
--- trunk/tests/transcribers/test_dependencies.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/transcribers/test_dependencies.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -35,8 +35,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.transcribers.XmlImporter");
   dojo.require("orp.transcribers.XmlExporter");
 }

Modified: trunk/tests/util/CsvParserTest.html
===================================================================
--- trunk/tests/util/CsvParserTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/CsvParserTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for CsvParser.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="CsvParserTest.js"></script>
   </head>
   

Modified: trunk/tests/util/CsvParserTest.js
===================================================================
--- trunk/tests/util/CsvParserTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/CsvParserTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -36,8 +36,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("dojo.lang.*");
   dojo.require("orp.util.CsvParser");
 

Modified: trunk/tests/util/DateValueTest.html
===================================================================
--- trunk/tests/util/DateValueTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/DateValueTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for DateValue.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="DateValueTest.js"></script>
   </head>
   

Modified: trunk/tests/util/DateValueTest.js
===================================================================
--- trunk/tests/util/DateValueTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/DateValueTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -36,8 +36,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.Util");
   dojo.require("orp.util.DateValue");
   // TestVars = {};

Modified: trunk/tests/util/LintTest.html
===================================================================
--- trunk/tests/util/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/util/LintTest.js
===================================================================
--- trunk/tests/util/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/util/UtilTest.html
===================================================================
--- trunk/tests/util/UtilTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/UtilTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for Util.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="UtilTest.js"></script>
   </head>
   

Modified: trunk/tests/util/UtilTest.js
===================================================================
--- trunk/tests/util/UtilTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/UtilTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -38,8 +38,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.Util");
   dojo.require("dojo.lang.*");
   UtilTestVars = {};

Modified: trunk/tests/util/test_dependencies.html
===================================================================
--- trunk/tests/util/test_dependencies.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/test_dependencies.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Dependency tests for the orp.util package</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="test_dependencies.js"></script>
   </head>
   

Modified: trunk/tests/util/test_dependencies.js
===================================================================
--- trunk/tests/util/test_dependencies.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/util/test_dependencies.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -35,8 +35,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.Util");
   dojo.require("orp.util.Cookie");
   dojo.require("orp.util.CsvParser");

Modified: trunk/tests/uuid/LintTest.html
===================================================================
--- trunk/tests/uuid/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/uuid/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/uuid/LintTest.js
===================================================================
--- trunk/tests/uuid/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/uuid/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/uuid/UuidTest.html
===================================================================
--- trunk/tests/uuid/UuidTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/uuid/UuidTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests for UUIDs</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="UuidTest.js"></script>
   </head>
   

Modified: trunk/tests/uuid/UuidTest.js
===================================================================
--- trunk/tests/uuid/UuidTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/uuid/UuidTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -39,8 +39,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.uuid.factory");
   dojo.require("orp.uuid.Uuid");
   dojo.require("orp.uuid.RandomUuid");

Modified: trunk/tests/view/LintTest.html
===================================================================
--- trunk/tests/view/LintTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/view/LintTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/view/LintTest.js
===================================================================
--- trunk/tests/view/LintTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/view/LintTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.util.LintTool");
 }
 

Modified: trunk/tests/view/SectionViewConstructorTest.html
===================================================================
--- trunk/tests/view/SectionViewConstructorTest.html	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/view/SectionViewConstructorTest.html	2005-12-19 06:56:03 UTC (rev 406)
@@ -12,7 +12,7 @@
     <title>Test SectionView Constructor</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="SectionViewConstructorTest.js"></script>
   </head>

Modified: trunk/tests/view/SectionViewConstructorTest.js
===================================================================
--- trunk/tests/view/SectionViewConstructorTest.js	2005-12-19 06:46:30 UTC (rev 405)
+++ trunk/tests/view/SectionViewConstructorTest.js	2005-12-19 06:56:03 UTC (rev 406)
@@ -49,8 +49,8 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
+  dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");
   dojo.require("orp.view.SectionView");



From skinner at berlios.de  Tue Dec 20 00:00:34 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Tue, 20 Dec 2005 00:00:34 +0100
Subject: [openrecord-svn] r407 - trunk/source/plugins/create_new_plugin
Message-ID: <200512192300.jBJN0YTa014704@sheep.berlios.de>

Author: skinner
Date: 2005-12-20 00:00:34 +0100 (Tue, 20 Dec 2005)
New Revision: 407

Modified:
   trunk/source/plugins/create_new_plugin/create_new_plugin.html
   trunk/source/plugins/create_new_plugin/create_new_plugin.js
Log:
Updated create_new_plugin.html and create_new_plugin.js to point to the new dojo 0.2.0 code (now in .../third_party/dojo/ instead of .../third_party/dojo/dojo-rev1759).

Modified: trunk/source/plugins/create_new_plugin/create_new_plugin.html
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.html	2005-12-19 06:56:03 UTC (rev 406)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.html	2005-12-19 23:00:34 UTC (rev 407)
@@ -14,7 +14,7 @@
 
   <head>
     <title>Create New Plugin for OpenRecord</title>
-    <script type="text/javascript" src="../../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../../third_party/dojo/dojo.js"></script>
     <script type="text/javascript" src="create_new_plugin.js"></script>
   </head>
   

Modified: trunk/source/plugins/create_new_plugin/create_new_plugin.js
===================================================================
--- trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-19 06:56:03 UTC (rev 406)
+++ trunk/source/plugins/create_new_plugin/create_new_plugin.js	2005-12-19 23:00:34 UTC (rev 407)
@@ -30,7 +30,7 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
-dojo.hostenv.setModulePrefix("orp", "../../../source"); // relative to dojo
+dojo.setModulePrefix("orp", "../../source"); // relative to dojo.js
 dojo.require("dojo.text.*");
 dojo.require("dojo.event.*");
 dojo.require("orp.uuid.TimeBasedUuid");



From skinner at berlios.de  Wed Dec 21 00:45:15 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Wed, 21 Dec 2005 00:45:15 +0100
Subject: [openrecord-svn] r408 - trunk/documentation
Message-ID: <200512202345.jBKNjF9U004420@sheep.berlios.de>

Author: skinner
Date: 2005-12-21 00:45:12 +0100 (Wed, 21 Dec 2005)
New Revision: 408

Modified:
   trunk/documentation/to_do_list.txt
Log:
Added task to to_do_list.txt

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-12-19 23:00:34 UTC (rev 407)
+++ trunk/documentation/to_do_list.txt	2005-12-20 23:45:12 UTC (rev 408)
@@ -85,6 +85,9 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
 brian  |          | 0.3  IED|  0. Switch to using Dojo-0.2.0, and have it live directly in .../third_party/dojo
+       |          |         |     Instead of having a copy of dojo in our SVN archive, link to dojo using SVN "externals"
+                                    see http://svnbook.red-bean.com/en/1.1/ch07s04.html
+                                    see section 5.2.4 of http://tortoisesvn.sourceforge.net/docs/nightly/TortoiseSVN_en.pdf
        |          |         |  1. Attempt to embed an OpenRecord view in a MediaWiki page
        |          |         |  2. Have a server that supports repositories with thousands of items
        |          |         |  3. Look at replacing our notion of Views with Dojo's notion of widgets



From skinner at berlios.de  Wed Dec 21 01:30:46 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Wed, 21 Dec 2005 01:30:46 +0100
Subject: [openrecord-svn] r409 - in trunk: source/uuid tests/uuid
Message-ID: <200512210030.jBL0UkF4022365@sheep.berlios.de>

Author: skinner
Date: 2005-12-21 01:30:33 +0100 (Wed, 21 Dec 2005)
New Revision: 409

Added:
   trunk/source/uuid/__package__.js
Modified:
   trunk/tests/uuid/UuidTest.js
Log:
Added a __package__.js file for the uuid package, and updated the unit tests to use it.

Added: trunk/source/uuid/__package__.js
===================================================================
--- trunk/source/uuid/__package__.js	2005-12-20 23:45:12 UTC (rev 408)
+++ trunk/source/uuid/__package__.js	2005-12-21 00:30:33 UTC (rev 409)
@@ -0,0 +1,10 @@
+dojo.kwCompoundRequire({
+	common: [
+		"orp.uuid.factory",
+		"orp.uuid.Uuid",
+		"orp.uuid.RandomUuid",
+		"orp.uuid.TimeBasedUuid"
+	]
+});
+dojo.hostenv.moduleLoaded("orp.uuid.*");
+

Modified: trunk/tests/uuid/UuidTest.js
===================================================================
--- trunk/tests/uuid/UuidTest.js	2005-12-20 23:45:12 UTC (rev 408)
+++ trunk/tests/uuid/UuidTest.js	2005-12-21 00:30:33 UTC (rev 409)
@@ -41,10 +41,7 @@
 function setUp() {
   dojo.setModulePrefix("dojo", "../../dojo/src"); // relative to testRunner.html
   dojo.setModulePrefix("orp", "../../../source"); // relative to dojo.js
-  dojo.require("orp.uuid.factory");
-  dojo.require("orp.uuid.Uuid");
-  dojo.require("orp.uuid.RandomUuid");
-  dojo.require("orp.uuid.TimeBasedUuid");
+  dojo.require("orp.uuid.*");
   dojo.require("dojo.lang.*");
 
   Uuid = orp.uuid.Uuid;
@@ -189,7 +186,7 @@
   uuid4 = uuid4.toString();
 
   assertTrue("uuid1 != uuid2", uuid1 != uuid2);
-  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
+  assertTrue("uuid2 != uuid3", uuid1 != uuid3);
   
   var arrayOfParts = uuid1.split("-");
   var section4 = arrayOfParts[4];



