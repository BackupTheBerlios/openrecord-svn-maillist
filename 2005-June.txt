From skinner at sheep.berlios.de  Wed Jun  1 00:25:14 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 1 Jun 2005 00:25:14 +0200
Subject: [openrecord-svn] r98 - in trunk/source: . model
Message-ID: <200505312225.j4VMPEpO004573@sheep.berlios.de>

Author: skinner
Date: 2005-06-01 00:25:14 +0200 (Wed, 01 Jun 2005)
New Revision: 98

Modified:
   trunk/source/TablePlugin.js
   trunk/source/Util.js
   trunk/source/model/StubVirtualServer.js
Log:
Changed StubVirtualServer so that a "null query" returns a list of zero items, instead of returning a list of all items in the repository.  Changed TablePlugin so that even if query result set has zero items, the table still at least shows an empty column for the "Name" attribute. 

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-05-31 21:51:09 UTC (rev 97)
+++ trunk/source/TablePlugin.js	2005-05-31 22:25:14 UTC (rev 98)
@@ -155,6 +155,11 @@
   }
   this._hashTableOfEntries = hashTableOfEntries;
   this._hashTableOfAttributes = hashTableOfAttributes;
+  if (Util.lengthOfHashTable(this._hashTableOfAttributes) < 1) {
+    var attributeCalledName = this.getWorld().getAttributeCalledName();
+    var key = attributeCalledName.getUniqueKeyString();
+    this._hashTableOfAttributes[key] = attributeCalledName;
+  }
 };
 
 

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-05-31 21:51:09 UTC (rev 97)
+++ trunk/source/Util.js	2005-05-31 22:25:14 UTC (rev 98)
@@ -416,20 +416,42 @@
   return true;
 };
 
+
 /**
+ * Returns the number of values in a hash table. 
+ * 
+ * @scope    public class method
+ * @param    inHashTable   A hashTable containing values.
+ * @return   The number of values in inHashTable.
+ */
+Util.lengthOfHashTable = function(inHashTable) {
+  Util.assert(Util.isHashTable(inHashTable));
+  var count = 0;
+  for (var key in inHashTable) {
+    count += 1;
+  }
+  return count;
+};
+
+
+/**
  * Return the values of a HashTable in the form of an Array
  * Analogous to Python hash.values() 
  * 
  * @scope    public class method
- * @param    inHashTable   hashTable to be worked on
- * @return   values of a HashTable in the form of an Array
+ * @param    inHashTable   A hashTable containing values.
+ * @return   An array containing the values that are in inHashTable.
  */
 Util.hashTableValues = function(inHashTable) {
   Util.assert(Util.isHashTable(inHashTable));
   var returnArray = [];
-  for (var key in inHashTable) {returnArray.push(inHashTable[key]);}
+  for (var key in inHashTable) {
+    returnArray.push(inHashTable[key]);
+  }
   return returnArray;
 };
+
+
 // -------------------------------------------------------------------
 // Methods for doing encryption
 // -------------------------------------------------------------------

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-05-31 21:51:09 UTC (rev 97)
+++ trunk/source/model/StubVirtualServer.js	2005-05-31 22:25:14 UTC (rev 98)
@@ -471,12 +471,14 @@
   }
   
   if (!isItemMatchingQuery && !isCategoryMatchingQuery) {
+    /*
     for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
       item = this.__myHashTableOfItemsKeyedByUuid[uuid];
       if (!item.hasBeenDeleted()) {
         listOfQueryResultItems.push(item);
       }
     }
+    */
   }
   
   listOfQueryResultItems.sort(IdentifiedRecord.compareOrdinals);



From skinner at sheep.berlios.de  Wed Jun  1 00:30:11 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 1 Jun 2005 00:30:11 +0200
Subject: [openrecord-svn] r99 - trunk/source
Message-ID: <200505312230.j4VMUBq2005785@sheep.berlios.de>

Author: skinner
Date: 2005-06-01 00:30:11 +0200 (Wed, 01 Jun 2005)
New Revision: 99

Modified:
   trunk/source/RootView.js
Log:
Minor bug fix to get RootView to redisplay the NavbarView.

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-05-31 22:25:14 UTC (rev 98)
+++ trunk/source/RootView.js	2005-05-31 22:30:11 UTC (rev 99)
@@ -411,8 +411,8 @@
 RootView.prototype._displayNavbar = function () {
   if (!this.navbarView) {
     this.navbarView = new NavbarView(this, this.myNavbarDivElement);
-    this.navbarView.refresh();
   }
+  this.navbarView.refresh();
 };
 
 



From mignon at sheep.berlios.de  Wed Jun  1 00:54:36 2005
From: mignon at sheep.berlios.de (Mignon Belongie at BerliOS)
Date: Wed, 1 Jun 2005 00:54:36 +0200
Subject: [openrecord-svn] r100 - in trunk/source: . model
Message-ID: <200505312254.j4VMsaEA002641@sheep.berlios.de>

Author: mignon
Date: 2005-06-01 00:54:34 +0200 (Wed, 01 Jun 2005)
New Revision: 100

Modified:
   trunk/source/LoginView.js
   trunk/source/SectionView.js
   trunk/source/model/Item.js
   trunk/source/model/StubVirtualServer.js
Log:
Added selection box for querying on a category.

Modified: trunk/source/LoginView.js
===================================================================
--- trunk/source/LoginView.js	2005-05-31 22:30:11 UTC (rev 99)
+++ trunk/source/LoginView.js	2005-05-31 22:54:34 UTC (rev 100)
@@ -274,8 +274,6 @@
   this._rebuildView();
 };
 
-// Chih-Chao Lam
-// Mignon Belongie
 /**
  * Called when the user clicks on the "Create New Account" button.
  *

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-05-31 22:30:11 UTC (rev 99)
+++ trunk/source/SectionView.js	2005-05-31 22:54:34 UTC (rev 100)
@@ -220,6 +220,17 @@
   }
   var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
   var selectedPluginName = this.mySection.getSingleStringValueFromAttribute(attributeCalledPluginName);
+  var attributeCalledQueryMatchingCategory = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var listOfMatchingCategories = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingCategory);
+  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
+  var selectedCategoryName = isCategoryMatchingQuery? listOfMatchingCategories[0].getValue().getDisplayName() : "no category selected";
+  var isEmptyQuery = false;
+  if (!isCategoryMatchingQuery) {
+    var attributeCalledQueryMatchingItem = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+    var listOfMatchingItems = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingItem);
+    var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
+    isEmptyQuery = !isItemMatchingQuery;
+  }
   this.myListOfContentItems = this.getListOfContentItems();
   if (!this.myListOfContentItems) {
     return;
@@ -241,18 +252,34 @@
   // PENDING: We shouldn't call the private method _getUuid()
   var selectMenuId = SectionView.ELEMENT_ID_SELECT_MENU_PREFIX + this.mySection._getUuid();
   var selectElement = View.createAndAppendElement(outerDiv, "select", RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL, selectMenuId);
+  var optionElement;
+  var listener;
   selectElement.setAttribute("name", selectMenuId);
   selectElement.setAttribute(SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER, this.mySectionNumber);
   for (var pluginName in SectionView.ourHashTableOfPluginClassesKeyedByPluginName) {
-    var optionElement = View.createAndAppendElement(selectElement, "option");
+    optionElement = View.createAndAppendElement(selectElement, "option");
     optionElement.selected = (selectedPluginName == pluginName);
     optionElement.setAttribute("value", pluginName);
     // Util.addEventListener(optionElement, "click", SectionView.clickOnPluginSelectionMenu);
-    var listener = this; 
+    listener = this; 
     Util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
     optionElement.innerHTML = pluginName;
   }
 
+  if (isCategoryMatchingQuery || isEmptyQuery) {
+    var querySelectElement = View.createAndAppendElement(outerDiv, "select", RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL);
+    var listOfCategories = this.getWorld().getCategories();
+    for (var key in listOfCategories) {
+      var category = listOfCategories[key];
+      optionElement = View.createAndAppendElement(querySelectElement, "option");
+      optionElement.selected = (selectedCategoryName == category.getDisplayName());
+      optionElement.setAttribute("value", category._getUuid());
+      listener = this; 
+      Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
+      optionElement.innerHTML = category.getDisplayName();
+    }
+  }
+
   // create a div element for the plugin class to use
   this._myPluginDiv = View.createAndAppendElement(outerDiv, "div");
   this._myPlugin = this.getPluginFromPluginName(selectedPluginName, this._myPluginDiv);
@@ -299,6 +326,53 @@
 };
 
 
+/**
+ * Called when the user clicks on a control for selecting a category for a query.
+ * Called from an HTML option element within an HTML select element.
+ *
+ * @scope    public instance method
+ * @param    inEventObject    An event object. 
+ */
+SectionView.prototype.clickOnQueryCategorySelectionMenu = function (inEventObject) {
+  var eventObject = inEventObject || window.event;
+  var optionElement = Util.getTargetFromEvent(eventObject);
+  // PENDING: We could replace the lines above with "var optionElement = this;"
+  // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
+  
+  var selectElement = optionElement.parentNode;
+  var newChoiceUuid = optionElement.value;
+  var newQueryMatchingCategory = this.getWorld().getItemFromUuid(newChoiceUuid);
+  var newChoiceName = newQueryMatchingCategory.getDisplayName();
+  
+  var attributeCalledQueryMatchingCategory = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var listOfMatchingCategories = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingCategory);
+  var currentQueryMatchingCategoryEntry = listOfMatchingCategories.length > 0? listOfMatchingCategories[0] : null;
+  var currentQueryMatchingCategory = listOfMatchingCategories.length > 0? listOfMatchingCategories[0].getValue() : null;
+  var currentCategoryName = currentQueryMatchingCategory? currentQueryMatchingCategory.getDisplayName() : "none";
+ 
+  if (currentCategoryName == newChoiceName) {
+    return;
+  } else {
+    if (currentQueryMatchingCategory) {
+      this.getQuery().replaceEntry(currentQueryMatchingCategoryEntry, newQueryMatchingCategory);
+    } else {
+      this.getQuery().addEntryForAttribute(attributeCalledQueryMatchingCategory, newQueryMatchingCategory);
+    }
+    var pluginName = this._myPlugin.getPluginName();
+    this._myPlugin.endOfLife();
+    this._myPlugin = this.getPluginFromPluginName(pluginName, this._myPluginDiv);
+    var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
+    var pluginNameEntries = this.mySection.getEntriesForAttribute(attributeCalledPluginName);
+    if (pluginNameEntries && pluginNameEntries[0]) {
+      var oldEntry = pluginNameEntries[0];
+      this.mySection.replaceEntry(oldEntry, pluginName);
+    } else {
+      this.mySection.addEntryForAttribute(attributeCalledPluginName, pluginName);
+    }
+    this.refresh();
+  }
+};
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-05-31 22:30:11 UTC (rev 99)
+++ trunk/source/model/Item.js	2005-05-31 22:54:34 UTC (rev 100)
@@ -222,6 +222,7 @@
  * @return   A list of entry objects.
  */
 Item.prototype.getEntriesForAttribute = function (inAttribute) {
+  Util.assert(inAttribute instanceof IdentifiedRecord);
   var listOfEntriesForAttribute = this.__myHashTableOfEntryListsKeyedByAttributeUuid[inAttribute._getUuid()];
   if (!listOfEntriesForAttribute) {
     listOfEntriesForAttribute = [];

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-05-31 22:30:11 UTC (rev 99)
+++ trunk/source/model/StubVirtualServer.js	2005-05-31 22:54:34 UTC (rev 100)
@@ -470,17 +470,6 @@
     }
   }
   
-  if (!isItemMatchingQuery && !isCategoryMatchingQuery) {
-    /*
-    for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
-      item = this.__myHashTableOfItemsKeyedByUuid[uuid];
-      if (!item.hasBeenDeleted()) {
-        listOfQueryResultItems.push(item);
-      }
-    }
-    */
-  }
-  
   listOfQueryResultItems.sort(IdentifiedRecord.compareOrdinals);
   return listOfQueryResultItems; 
 };



From skinner at sheep.berlios.de  Wed Jun  1 03:54:35 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 1 Jun 2005 03:54:35 +0200
Subject: [openrecord-svn] r101 - trunk/source/model
Message-ID: <200506010154.j511sZNi014925@sheep.berlios.de>

Author: skinner
Date: 2005-06-01 03:54:34 +0200 (Wed, 01 Jun 2005)
New Revision: 101

Modified:
   trunk/source/model/Item.js
Log:
minor tweak

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-05-31 22:54:34 UTC (rev 100)
+++ trunk/source/model/Item.js	2005-06-01 01:54:34 UTC (rev 101)
@@ -222,7 +222,7 @@
  * @return   A list of entry objects.
  */
 Item.prototype.getEntriesForAttribute = function (inAttribute) {
-  Util.assert(inAttribute instanceof IdentifiedRecord);
+  Util.assert(inAttribute instanceof Item);
   var listOfEntriesForAttribute = this.__myHashTableOfEntryListsKeyedByAttributeUuid[inAttribute._getUuid()];
   if (!listOfEntriesForAttribute) {
     listOfEntriesForAttribute = [];
@@ -315,6 +315,7 @@
   return this.__myProvisionalFlag;
 };
 
+
 /**
  * Returns a display name for the item.
  *



From skinner at sheep.berlios.de  Wed Jun  1 20:09:12 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 1 Jun 2005 20:09:12 +0200
Subject: [openrecord-svn] r102 - trunk/source/model
Message-ID: <200506011809.j51I9CNI030408@sheep.berlios.de>

Author: skinner
Date: 2005-06-01 20:09:11 +0200 (Wed, 01 Jun 2005)
New Revision: 102

Modified:
   trunk/source/model/DeltaVirtualServer.js
Log:
Changed the annoying failed-to-save alert box so that it only pops up once.

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-01 01:54:34 UTC (rev 101)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-01 18:09:11 UTC (rev 102)
@@ -91,6 +91,7 @@
 function DeltaVirtualServer(inJsonRepositoryString, inJsonUserList) {
   this._myDehydratedWorld = inJsonRepositoryString;
   this._myDehydratedUserList = inJsonUserList;
+  this._myHasEverFailedToSaveFlag = false;
 }
 
 
@@ -640,7 +641,10 @@
       saveChanges = true;
     }
     if (window.location.protocol == "file:") {
-      window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
+      if (!this._myHasEverFailedToSaveFlag) {
+        window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
+        this._myHasEverFailedToSaveFlag = true;
+      }
     }
   }
   



From skinner at sheep.berlios.de  Wed Jun  1 21:48:43 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 1 Jun 2005 21:48:43 +0200
Subject: [openrecord-svn] r103 - in trunk/source: . model
Message-ID: <200506011948.j51JmhGX002425@sheep.berlios.de>

Author: skinner
Date: 2005-06-01 21:48:42 +0200 (Wed, 01 Jun 2005)
New Revision: 103

Added:
   trunk/source/LintTool.js
Modified:
   trunk/source/LintTest.html
   trunk/source/LintTest.js
   trunk/source/Util.js
   trunk/source/model/LintTest.html
   trunk/source/model/LintTest.js
Log:
Refactored code for lint tests, and improved the lint test error reporting.

Modified: trunk/source/LintTest.html
===================================================================
--- trunk/source/LintTest.html	2005-06-01 18:09:11 UTC (rev 102)
+++ trunk/source/LintTest.html	2005-06-01 19:48:42 UTC (rev 103)
@@ -16,6 +16,7 @@
     <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="Util.js"></script>
+    <script type="text/javascript" src="LintTool.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>
   

Modified: trunk/source/LintTest.js
===================================================================
--- trunk/source/LintTest.js	2005-06-01 18:09:11 UTC (rev 102)
+++ trunk/source/LintTest.js	2005-06-01 19:48:42 UTC (rev 103)
@@ -28,70 +28,13 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
-var Lint = {};
 
-
-/**
- * Given a string containing JavaScript code, returns true if the code passes 
- * the lint tests.
- *
- * @scope    public class method
- * @param    inString    A string containing JavaScript code. 
- * @return   A boolean value. True if the code is good (according to jslint).
- */
-Lint.isCodeCleanInString = function(inString) {
-  jslint.laxLineEnd = false;
-  jslint.plusplus = true;
-  jslint.cap = false;
-  jslint.jscript = false;
-  jslint(inString);
-  var report = jslint.report();
-  var jslingIsOkay = (report.substr(0, 2) == 'ok');
-  var noTabs = (inString.indexOf("\t") == -1);
-  var noBackspaces = (inString.indexOf("\b") == -1);
-  var noCarriageReturns = (inString.indexOf("\r") == -1);
-  var noFormFeeds = (inString.indexOf("\f") == -1);
-  var allClean = jslingIsOkay && noTabs && noBackspaces && noCarriageReturns && noFormFeeds;
-  return (allClean);
-}; 
-
-
-/**
- * Given the URL of a file containing JavaScript code, returns true if the code 
- * passes the lint tests.
- *
- * @scope    public class method
- * @param    inUrl    A string with the URL of a file containing JavaScript code. 
- * @return   A boolean value. True if the code is good (according to jslint).
- */
-Lint.isCodeCleanAtUrl = function(inUrl) {
-  var anXMLHttpRequestObject = new XMLHttpRequest();
-  anXMLHttpRequestObject.open("GET", inUrl, false);
-  anXMLHttpRequestObject.send(null);
-  var fileContents = anXMLHttpRequestObject.responseText;
-  return Lint.isCodeCleanInString(fileContents);
-};
-
-
-/**
- * Given the name of a file containing JavaScript code, returns true if the 
- * code passes the lint tests.
- *
- * @scope    public class method
- * @param    inFileName    A string with the name of a file containing JavaScript code. 
- * @return   A boolean value. True if the code is good (according to jslint).
- */
-Lint.isCodeCleanInFile = function(inFileName) {
-  var url  = "../../../source/" + inFileName;
-  return Lint.isCodeCleanAtUrl(url);
-};
-
 function setUp() {
 }
 
 function testJsLintOnGoodCodeFragment() {
   var textToRunLintOn = "function iggy() { var pop = 'no fun'; }";
-  assertTrue("jslint says clean code is clean", Lint.isCodeCleanInString(textToRunLintOn));
+  assertTrue("jslint says clean code is clean", !LintTool.getErrorReportForCodeInString(textToRunLintOn));
 }
 
 function testJsLintOnBadCodeFragment() {
@@ -106,14 +49,15 @@
   // isCodeCleanInString() method should catch
   var badFragmentThree = "function iggy() \r { var pop = 'no fun'; } ";
   
-  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentOne));
-  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentTwo));
-  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentThree));
+  assertFalse("jslint says dirty code is dirty", !LintTool.getErrorReportForCodeInString(badFragmentOne));
+  assertFalse("jslint says dirty code is dirty", !LintTool.getErrorReportForCodeInString(badFragmentTwo));
+  assertFalse("jslint says dirty code is dirty", !LintTool.getErrorReportForCodeInString(badFragmentThree));
 }
 
 function testJsLintOnOpenRecordCode() {
   var listOfSourceCodeFiles = [
     "Util.js",
+    "LintTool.js",
     "View.js",
     "RootView.js",
     "ItemView.js",
@@ -128,10 +72,10 @@
     "BarChartPlugin.js",
     "demo_page.js",
     "UtilTest.js"];
-  for (var key in listOfSourceCodeFiles) {
-    var fileName = listOfSourceCodeFiles[key];
-    assertTrue("jslint says " + fileName + " is clean", Lint.isCodeCleanInFile(fileName));
-  }
+  var prefix = "../../../source/";
+  var errorReport = LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
 }
 
 function tearDown() {

Added: trunk/source/LintTool.js
===================================================================
--- trunk/source/LintTool.js	2005-06-01 18:09:11 UTC (rev 102)
+++ trunk/source/LintTool.js	2005-06-01 19:48:42 UTC (rev 103)
@@ -0,0 +1,150 @@
+/*****************************************************************************
+ LintTool.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+/**
+ * The LintTool class is just a thin wrapper around Douglas Crockford's
+ * JSLint utility.
+ *
+ * There is no need to ever call this constructor.  All the LintTool
+ * methods are class methods, not instance methods, and the only 
+ * reason this constructor exists is to cause the name "LintTool"
+ * to be a globally-scoped class name, which the class methods 
+ * can then be attached to.
+ *
+ * @scope    public instance constructor
+ * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ */
+function LintTool() {
+  throw new Error("LintTool is a static class. You can't create instances of it.");
+}
+
+
+// -------------------------------------------------------------------
+// String manipulation methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a string containing JavaScript code, returns null if the code passes 
+ * the lint tests.
+ *
+ * @scope    public class method
+ * @param    inString    A string containing JavaScript code. 
+ * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
+ */
+LintTool.getErrorReportForCodeInString = function (inString) {
+  var errorMessage = "";
+
+  // call jslint, and see if it reported errors
+  jslint.laxLineEnd = false;
+  jslint.plusplus = true;
+  jslint.cap = false;
+  jslint.jscript = false;
+  jslint(inString);
+  var report = jslint.report();
+  var jslintIsOkay = (report.substr(0, 2) == 'ok');
+  if (!jslintIsOkay) {
+    errorMessage = report + '\n';
+  }
+  
+  // now check for tabs, backspaces, etc.
+  var noTabs = (inString.indexOf("\t") == -1);
+  if (!noTabs) {
+    errorMessage += "There are tab characters in the file." + '\n';
+  }
+  var noBackspaces = (inString.indexOf("\b") == -1);
+  if (!noBackspaces) {
+    errorMessage += "There are backspace characters in the file." + '\n';
+  }
+  var noCarriageReturns = (inString.indexOf("\r") == -1);
+  if (!noCarriageReturns) {
+    errorMessage += "There are carriage return characters in the file." + '\n';
+  }
+  var noFormFeeds = (inString.indexOf("\f") == -1);
+  if (!noCarriageReturns) {
+    errorMessage += "There are carriage return characters in the file." + '\n';
+  }
+  // var allClean = jslintIsOkay && noTabs && noBackspaces && noCarriageReturns && noFormFeeds;
+  return errorMessage;
+}; 
+
+
+/**
+ * Given the URL of a file containing JavaScript code, returns null if the code passes 
+ * the lint tests.
+ *
+ * @scope    public class method
+ * @param    inUrl    A string with the URL of a file containing JavaScript code. 
+ * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
+ */
+LintTool.getErrorReportForCodeAtUrl = function (inUrl) {
+  var fileContents = Util.getStringContentsOfFileAtURL(inUrl);
+  return LintTool.getErrorReportForCodeInString(fileContents);
+};
+
+        
+/**
+ * Given a list of file names, this method runs lint tests on all the files and 
+ * returns null if the code passes the lint tests.
+ *
+ * @scope    public class method
+ * @param    inListOfFilenames    A list of filename strings. 
+ * @param    inPath    Optional.  A path prefix string to prepend to the filename strings. 
+ * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
+ */
+LintTool.getErrorReportFromListOfFilesnames = function (inListOfFilenames, inPath) {
+  Util.assert(Util.isArray(inListOfFilenames));
+  if (inPath) {
+    Util.assert(Util.isString(inPath));
+  } else {
+    inPath = "";
+  }
+  
+  var aggregateErrorReport = "";
+  var separatorLine = "_____________________________________" + "\n";
+  for (var key in inListOfFilenames) {
+    var filename = inListOfFilenames[key];
+    var url = inPath + filename;
+    var errorReportForFile = LintTool.getErrorReportForCodeAtUrl(url);
+    if (errorReportForFile) {
+      var message = separatorLine + filename + "\n" + errorReportForFile;
+      aggregateErrorReport += message;
+    }
+  }
+  if (aggregateErrorReport) {
+    aggregateErrorReport += separatorLine;
+  }
+  return aggregateErrorReport;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-01 18:09:11 UTC (rev 102)
+++ trunk/source/Util.js	2005-06-01 19:48:42 UTC (rev 103)
@@ -779,7 +779,6 @@
 };
 
 
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/LintTest.html
===================================================================
--- trunk/source/model/LintTest.html	2005-06-01 18:09:11 UTC (rev 102)
+++ trunk/source/model/LintTest.html	2005-06-01 19:48:42 UTC (rev 103)
@@ -16,6 +16,7 @@
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="../Util.js"></script>
+    <script type="text/javascript" src="../LintTool.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>
   

Modified: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-06-01 18:09:11 UTC (rev 102)
+++ trunk/source/model/LintTest.js	2005-06-01 19:48:42 UTC (rev 103)
@@ -28,87 +28,10 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
-var Lint = {};
 
-
-/**
- * Given a string containing JavaScript code, returns true if the code passes 
- * the lint tests.
- *
- * @scope    public class method
- * @param    inString    A string containing JavaScript code. 
- * @return   A boolean value. True if the code is good (according to jslint).
- */
-Lint.isCodeCleanInString = function (inString) {
-  jslint.laxLineEnd = false;
-  jslint.plusplus = true;
-  jslint.cap = false;
-  jslint.jscript = false;
-  jslint(inString);
-  var report = jslint.report();
-  var jslingIsOkay = (report.substr(0, 2) == 'ok');
-  var noTabs = (inString.indexOf("\t") == -1);
-  var noBackspaces = (inString.indexOf("\b") == -1);
-  var noCarriageReturns = (inString.indexOf("\r") == -1);
-  var noFormFeeds = (inString.indexOf("\f") == -1);
-  var allClean = jslingIsOkay && noTabs && noBackspaces && noCarriageReturns && noFormFeeds;
-  return (allClean);
-}; 
-
-
-/**
- * Given the URL of a file containing JavaScript code, returns true if the code 
- * passes the lint tests.
- *
- * @scope    public class method
- * @param    inUrl    A string with the URL of a file containing JavaScript code. 
- * @return   A boolean value. True if the code is good (according to jslint).
- */
-Lint.isCodeCleanAtUrl = function (inUrl) {
-  var fileContents = Util.getStringContentsOfFileAtURL(inUrl);
-  return Lint.isCodeCleanInString(fileContents);
-};
-
-
-/**
- * Given the name of a file containing JavaScript code, returns true if the 
- * code passes the lint tests.
- *
- * @scope    public class method
- * @param    inFileName    A string with the name of a file containing JavaScript code. 
- * @return   A boolean value. True if the code is good (according to jslint).
- */
-Lint.isCodeCleanInFile = function (inFileName) {
-  // alert("in Lint.isCodeCleanInFile for " + inFileName);
-  var url  = "../../../source/model/" + inFileName;
-  return Lint.isCodeCleanAtUrl(url);
-};
-
 function setUp() {
 }
 
-function testJsLintOnGoodCodeFragment() {
-  var textToRunLintOn = "function iggy() { var pop = 'no fun'; }";
-  assertTrue("jslint says clean code is clean", Lint.isCodeCleanInString(textToRunLintOn));
-}
-
-function testJsLintOnBadCodeFragment() {
-  // badFragmentOne has THIS_SYMBOL_IS_BAD, which JSLint should catch
-  var badFragmentOne = "function iggy() { var pop = 'no fun'; } THIS_SYMBOL_IS_BAD";
-
-  // badFragmentTwo has tab characters in it, which our own isCodeCleanInString()
-  // method should catch
-  var badFragmentTwo = "function iggy()		{ var pop = 'no fun'; } ";
-  
-  // badFragmentThree has a carriage return character in it, which our own 
-  // isCodeCleanInString() method should catch
-  var badFragmentThree = "function iggy() \r { var pop = 'no fun'; } ";
-  
-  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentOne));
-  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentTwo));
-  assertFalse("jslint says dirty code is dirty", Lint.isCodeCleanInString(badFragmentThree));
-}
-
 function testJsLintOnOpenRecordCode() {
   var listOfSourceCodeFiles = [
     "Ordinal.js",
@@ -119,10 +42,10 @@
     "World.js",
     "StubVirtualServer.js",
     "DeltaVirtualServer.js"];
-  for (var key in listOfSourceCodeFiles) {
-    var fileName = listOfSourceCodeFiles[key];
-    assertTrue("jslint says " + fileName + " is clean", Lint.isCodeCleanInFile(fileName));
-  }
+  var prefix = "../../../source/model/";
+  var errorReport = LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
 }
 
 function tearDown() {



From skinner at sheep.berlios.de  Thu Jun  2 00:45:08 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 2 Jun 2005 00:45:08 +0200
Subject: [openrecord-svn] r104 - trunk/source/model
Message-ID: <200506012245.j51Mj87P001177@sheep.berlios.de>

Author: skinner
Date: 2005-06-02 00:45:05 +0200 (Thu, 02 Jun 2005)
New Revision: 104

Modified:
   trunk/source/model/READ_ME.txt
   trunk/source/model/World.js
Log:
minor clean-up

Modified: trunk/source/model/READ_ME.txt
===================================================================
--- trunk/source/model/READ_ME.txt	2005-06-01 19:48:42 UTC (rev 103)
+++ trunk/source/model/READ_ME.txt	2005-06-01 22:45:05 UTC (rev 104)
@@ -1,16 +1,14 @@
 ================================================================
-Experimental Data Model Framework
+Data Model Framework
 ================================================================
  Copyright rights relinquished under the Creative Commons  
  Public Domain Dedication:
     http://creativecommons.org/licenses/publicdomain/
 ----------------------------------------------------------------
 
-This directory, named "model", contains 8 or 10 JavaScript classes.  Together these JavaScript classes form an experimental data model framework.  
+This directory, named "model", contains 8 or 10 JavaScript classes.  Together these JavaScript classes form the data model framework.  
 
-This isn't a finished product, just a sort of experimental prototype, or maybe an extreme programming "spike solution".  Right now this is still a work in progress.  The code doesn't run yet, it doesn't pass its unit tests, and it isn't as clean and tidy as I would like it to be.  But all the pieces are in place, and there's enough detail here to give you a good sense of what this solution would look like.
 
-
 ---------------------------------
 Terminology
 ---------------------------------
@@ -68,6 +66,7 @@
   entry.getValue()
   entry.getAttribute()
   entry.getItem()
+  entry.getDisplayString()
 
   entry.reorderBetween()
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-01 19:48:42 UTC (rev 103)
+++ trunk/source/model/World.js	2005-06-01 22:45:05 UTC (rev 104)
@@ -319,6 +319,49 @@
 };
 
 
+/**
+ * Given a list of items, returns a filtered list based on the
+ * retrieval filter currently set for this world.
+ *
+ * @scope    public instance method
+ * @return   A list of items that made it through the filter.
+ */
+World.prototype._getFilteredList = function(unfilteredList) {
+  var filteredList = [];
+  var item;
+  
+  var filter = this.getRetrievalFilter();
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      for (var key in unfilteredList) {
+        item = unfilteredList[key];
+        if (!item.hasBeenDeleted()) {
+          filteredList.push(item);
+        }
+      }
+      break;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      filteredList = unfilteredList;
+      break;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+
+  filteredList.sort(IdentifiedRecord.compareOrdinals);
+  return filteredList;
+};
+
+
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic attributes
 // -------------------------------------------------------------------
@@ -407,54 +450,14 @@
  * Returns an list of all the items that represent users of this datastore.
  *
  * @scope    public instance method
- * @return   A list of items.
+ * @return   A list of items that represent users.
  */
 World.prototype.getUsers = function () {
   var listOfUsers = this.__myVirtualServer.getUsers();
   return this._getFilteredList(listOfUsers);
 };
 
-World.prototype.getCategories = function () {
-  var listOfCategories = this.__myVirtualServer.getCategories();
-  return this._getFilteredList(listOfCategories);
-};
 
-World.prototype._getFilteredList = function(unfilteredList) {
-  var filteredList = [];
-  var item;
-  
-  var filter = this.getRetrievalFilter();
-  switch (filter) {
-    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
-      for (var key in unfilteredList) {
-        item = unfilteredList[key];
-        if (!item.hasBeenDeleted()) {
-          filteredList.push(item);
-        }
-      }
-      break;
-    case World.RETRIEVAL_FILTER_SINGLE_USER:
-      // PENDING: This still needs to be implemented.
-      Util.assert(false);
-      break;
-    case World.RETRIEVAL_FILTER_DEMOCRATIC:
-      // PENDING: This still needs to be implemented.
-      Util.assert(false);
-      break;
-    case World.RETRIEVAL_FILTER_UNABRIDGED:
-      filteredList = unfilteredList;
-      break;
-    default:
-      // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
-      break;
-  }
-
-  filteredList.sort(IdentifiedRecord.compareOrdinals);
-  return filteredList;
-};
-
-
 /**
  * Returns an item representing the user who is currently logged in.
  *
@@ -753,6 +756,22 @@
 
 
 /**
+ * Returns an list of all the items that represent categories.
+ *
+ * @scope    public instance method
+ * @return   A list of items that represent categories.
+ */
+World.prototype.getCategories = function () {
+  var listOfCategories = this.__myVirtualServer.getCategories();
+  return this._getFilteredList(listOfCategories);
+};
+
+
+// -------------------------------------------------------------------
+// Observer methods
+// -------------------------------------------------------------------
+
+/**
  * Registers an object or method as an observer of a list, so that
  * the observer will be notified when items in the list change.
  *
@@ -849,6 +868,7 @@
   return observerWasRemoved;
 };
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From chaolam at sheep.berlios.de  Thu Jun  2 02:23:43 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 2 Jun 2005 02:23:43 +0200
Subject: [openrecord-svn] r105 - trunk/source/repositories/demo_page
Message-ID: <200506020023.j520Nh7m015083@sheep.berlios.de>

Author: chaolam
Date: 2005-06-02 02:23:38 +0200 (Thu, 02 Jun 2005)
New Revision: 105

Modified:
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
changed authors to be multi-entries

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-01 22:45:05 UTC (rev 104)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 00:23:38 UTC (rev 105)
@@ -2876,4 +2876,42 @@
           "value": { "type": "StringValue", "value": "Mignon Belongie" },
       "userstamp": "6243",                // by (Mignon Belongie)
       "timestamp": "1117056699906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Gerald Markowitz
+           "uuid": "f8c087f9-5138-4e10-8485-9b2126e57609",
+      "attribute": "3101",                // Author
+           "item": "5205",                // Deceit and Denial
+   "previousEntry": "6210",
+          "value": { "type": "StringValue", "value": "Gerald Markowitz" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117671538895" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Rosner
+           "uuid": "f084c367-6557-4c43-8f8d-1e07cfde6622",
+      "attribute": "3101",                // Author
+           "item": "5205",                // Deceit and Denial
+          "value": { "type": "StringValue", "value": "David Rosner" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117671585098" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Gourley
+           "uuid": "f16a265e-9414-4be3-8bf9-520a55804c78",
+      "attribute": "3101",                // Author
+           "item": "3205",                // HTTP: The Definitive Guide
+   "previousEntry": "6048",
+          "value": { "type": "StringValue", "value": "David Gourley" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117671604544" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Brian Totty
+           "uuid": "0745be22-94c8-4983-8993-7b0023fdf5a3",
+      "attribute": "3101",                // Author
+           "item": "3205",                // HTTP: The Definitive Guide
+          "value": { "type": "StringValue", "value": "Brian Totty" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117671612418" }
   }
\ No newline at end of file



From chaolam at sheep.berlios.de  Thu Jun  2 02:51:53 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 2 Jun 2005 02:51:53 +0200
Subject: [openrecord-svn] r106 - in trunk/source: . model repositories/demo_page
Message-ID: <200506020051.j520prkJ025111@sheep.berlios.de>

Author: chaolam
Date: 2005-06-02 02:51:46 +0200 (Thu, 02 Jun 2005)
New Revision: 106

Added:
   trunk/source/MultiEntriesView.js
Modified:
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/Util.js
   trunk/source/base_style.css
   trunk/source/demo_page.html
   trunk/source/model/Item.js
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
1) Added multi-entry support, primarily for TablePlugin, but hopefully usable in other plugins too
2) Added concept of selecting a row (currently only in edit mode)
3) Use "alt-return" to add new entry

Lots of subtle new issues need to resolved
Also, need to add ability to delete entries (and items)

Added: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/MultiEntriesView.js	2005-06-02 00:51:46 UTC (rev 106)
@@ -0,0 +1,227 @@
+/*****************************************************************************
+ MultiEntries.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Chih-Chao Lam <chao at cs.stanford.edu>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   repository.js
+//   util.js
+//   TextView.js
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// MultiEntriesView public class constants
+// -------------------------------------------------------------------
+MultiEntriesView.SEPARATOR = " ? ";
+MultiEntriesView.SEPARATOR_COLOR = '#999999';
+
+/**
+ * An instance of MultiEntriesView can be placed in any parent container View
+ * to display and (if in edit mode) edit multi-lines of text
+ *
+ * @scope    public instance constructor
+ * @extends  View
+ * @param    theSuperview    The view that this view is nested in. 
+ * @param    theItem         The Item to be displayed and edited by this view. 
+ * @param    theAttribute    The attribute of the item to be displayed.
+ * @param    theElement      The HTMLElement to display the HTML in. 
+ * @param    theClassType    A string that gives a class name to assign to the HTML element. 
+ * @param    isMultiLine     a boolean indicating if text view is single line or multi-line
+ */
+MultiEntriesView.prototype = new View();  // makes MultiEntriesView be a subclass of View
+function MultiEntriesView(theSuperview, theElement, theItem, theAttribute, theClassType) {
+  Util.assert(theItem instanceof Item);
+  //Util.assert(theAttribute instanceof Attribute); PENDING need to check that attribute is an attribute
+  
+  this.setSuperview(theSuperview);
+  this.setHTMLElement(theElement);
+  this._item = theItem;
+  this._attribute = theAttribute;
+  this._className = theClassType;
+}
+
+
+/**
+ * Updates the HTML elements in this view to reflect any changes in 
+ * the item's attribute values.
+ *
+ * @scope    public instance method
+ */
+MultiEntriesView.prototype.refresh = function() {
+  if (!this._myHasEverBeenDisplayedFlag) {
+    this._buildView();
+  } else {
+  // if (weHaveBeenNotifiedOfChangesTo(this._item)) {
+  //   var newText = getNewValueFrom(this._item);
+  //   this.textNode.data = newText;
+  // }
+  }
+};
+
+
+MultiEntriesView.prototype.noLongerProvisional = function() {
+  Util.assert(this._entryViews.length == 1); // provisional item should only have one entry
+  for (var i=0; i < this._entryViews.length; ++i) {
+    this._entryViews[i].noLongerProvisional();
+  }
+};
+
+MultiEntriesView.prototype.select = function(inSelectFirst) {
+  var index = inSelectFirst ? 0 : this._entryViews.length - 1;
+  this._entryViews[index].startEditing();
+};
+
+MultiEntriesView.prototype.setSuggestions = function(suggestionList) {
+  for (var i=0; i < this._entryViews.length; ++i) {
+    this._entryViews[i].setSuggestions(suggestionList);
+  }
+};
+
+MultiEntriesView.prototype.setKeyPressFunction = function(keyPressFunction) {
+  Util.assert(keyPressFunction instanceof Function);
+  this._keyPressFunction = keyPressFunction;
+};
+
+/**
+ * Sets a function to be used when onclick is called to the TextView
+ *
+ * @scope    public instance method
+ * @param    inEventObject    An event object. 
+ */
+MultiEntriesView.prototype.setClickFunction = function(inClickFunction) {
+  Util.assert(inClickFunction instanceof Function);
+  this._clickFunction = inClickFunction;
+};
+
+MultiEntriesView.prototype._handleClick = function(inEvent, inTextView) {
+  if (this._clickFunction && this._clickFunction(inEvent, inTextView)) {
+    return true;
+  }
+  return false;
+};
+
+MultiEntriesView.prototype._handleOwnClick = function(inEvent) {
+  var lastEntry = this._entryViews[this._entryViews.length-1];
+  if (this._handleClick(inEvent, lastEntry)) {return true;}
+  lastEntry.startEditing();
+};
+
+
+MultiEntriesView.prototype._keyPressOnEditField = function(inEvent, inTextView) {
+  Util.assert(inTextView instanceof TextView);
+  var asciiValueOfKey = inEvent.keyCode;
+  var move, doCreateNewEntry;
+  switch (asciiValueOfKey) {
+    case Util.ASCII_VALUE_FOR_LEFT_ARROW: move = -1; break;
+    case Util.ASCII_VALUE_FOR_RIGHT_ARROW: move = 1; break;
+    case Util.ASCII_VALUE_FOR_RETURN: doCreateNewEntry = inEvent.altKey; break;
+    default: move = 0; break;
+  }
+  if (doCreateNewEntry) {
+    inTextView.stopEditing();
+    this._addSeparator();
+    this._addEntryView(null).startEditing();
+    return true;
+  }
+  if (move != 0) {
+    var index = Util.getArrayIndex(this._entryViews, inTextView);
+    Util.assert(index != -1);
+    index += move;
+    if (index >= 0 && index < this._entryViews.length) {
+      inTextView.stopEditing();
+      this._entryViews[index].startEditing();
+      return true;
+    }
+  }
+  if (this._keyPressFunction && this._keyPressFunction(inEvent, inTextView)) {
+    return true;
+  }
+  return false;
+};
+
+
+MultiEntriesView.prototype._addEntryView = function(inEntry) {
+  var spanElt = document.createElement("span");
+  var aTextView = new TextView(this, spanElt, this._item, this._attribute, inEntry, this._className);
+  this._entryViews.push(aTextView);
+  aTextView.refresh();
+  this.getHTMLElement().appendChild(spanElt);
+  if (this.isInEditMode()) {
+    var listener = this;
+    aTextView.setKeyPressFunction(function (evt, aTxtView) {return listener._keyPressOnEditField(evt, aTxtView);});
+    aTextView.setClickFunction(function (evt, aTxtView) {return listener._handleClick(evt, aTxtView);});
+  }
+  return aTextView;
+};
+
+MultiEntriesView.prototype._addSeparator = function() {
+  var spanElt = document.createElement("span");
+  spanElt.appendChild(document.createTextNode(MultiEntriesView.SEPARATOR));
+  spanElt.style.color = MultiEntriesView.SEPARATOR_COLOR;
+  this.getHTMLElement().appendChild(spanElt);
+  return spanElt;
+};
+
+/**
+ * Re-creates all the HTML for the MultiEntriesView, and hands the HTML to the 
+ * browser to be re-drawn.
+ *
+ * @scope    public instance method
+ */
+MultiEntriesView.prototype._buildView = function() {
+  var htmlElement = this.getHTMLElement();
+  htmlElement.innerHTML = '';
+  this._entryViews = [];
+  
+  var entries = this._item.getEntriesForAttribute(this._attribute);
+  if (this._item.isProvisional() || entries.length == 0) {
+    this._addEntryView(null);
+  }
+  else {
+    for (var i=0; i<entries.length; ++i) {
+      var anEntry = entries[i];
+      this._addEntryView(anEntry);
+      if (i < (entries.length-1)) { this._addSeparator();}
+    }
+  }
+  
+  if (this.isInEditMode()) {
+    htmlElement.onclick = this._handleOwnClick.bindAsEventListener(this);
+  } 
+  this._myHasEverBeenDisplayedFlag = true;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------
\ No newline at end of file

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/PageView.js	2005-06-02 00:51:46 UTC (rev 106)
@@ -123,12 +123,12 @@
   var pageDivElement = this.getHTMLElement();
   
   var headerElement = View.createAndAppendElement(pageDivElement, "h1");
-  this._myHeaderText = new TextView(this, headerElement, this.myPage,
-    attributeCalledName, SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
+  this._myHeaderText = new TextView(this, headerElement, this.myPage, attributeCalledName,
+    this.myPage.getSingleEntryFromAttribute(attributeCalledName), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
 
   var summaryViewDiv = View.createAndAppendElement(pageDivElement, "div");
-  this._myPageSummaryView = new TextView(this, summaryViewDiv, this.myPage,
-    attributeCalledSummary, SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
+  this._myPageSummaryView = new TextView(this, summaryViewDiv, this.myPage, attributeCalledSummary,
+    this.myPage.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
 
   // add <div> elements for each of the sections on the page
   // and create a new SectionView for each section

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/SectionView.js	2005-06-02 00:51:46 UTC (rev 106)
@@ -241,11 +241,12 @@
   var headerH2 = View.createAndAppendElement(outerDiv, "h2");
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   var attributeCalledSummary = this.getWorld().getAttributeCalledSummary();
-  this._myHeaderView = new TextView(this, headerH2, this.mySection,
-    attributeCalledName, SectionView.ELEMENT_CLASS_TEXT_VIEW);
+  this._myHeaderView = new TextView(this, headerH2, this.mySection, attributeCalledName,
+    this.mySection.getSingleEntryFromAttribute(attributeCalledName),
+    SectionView.ELEMENT_CLASS_TEXT_VIEW);
   var summaryDiv = View.createAndAppendElement(outerDiv, "div");
-  this._mySectionSummaryView = new TextView(this, summaryDiv, this.mySection,
-    attributeCalledSummary, SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
+  this._mySectionSummaryView = new TextView(this, summaryDiv, this.mySection, attributeCalledSummary,
+    this.mySection.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
   View.createAndAppendElement(outerDiv, "p");
 
   // create the plugin editing controls, if we're in edit mode

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/TablePlugin.js	2005-06-02 00:51:46 UTC (rev 106)
@@ -208,7 +208,7 @@
   var oldProvisionalRow = this.myTable.rows[this._listOfItems.length];
   for (var i=0; i < oldProvisionalRow.cells.length; ++i) {
     var aCell = oldProvisionalRow.cells[i];
-    aCell.or_textView.noLongerProvisional();
+    aCell.or_entriesView.noLongerProvisional();
   }
 
   // create new provisional item now that old one has become real
@@ -314,14 +314,14 @@
 TablePlugin.prototype._insertCell = function(row, col, item, attribute) {
   var aCell = row.insertCell(col);
   aCell.className = this.myCellClass;
-  var aTextView = new TextView(this, aCell, item, attribute, this.myCellClass);
-  aCell.or_textView = aTextView;
-  aTextView.refresh();
+  var multiEntriesView = new MultiEntriesView(this, aCell, item,attribute, this.myCellClass);
+  aCell.or_entriesView = multiEntriesView;
+  multiEntriesView.refresh();
   if (this.isInEditMode()) {
-    //aCell.onkeypress = this.keyPressOnEditField.bindAsEventListener(this, aTextView);
+    multiEntriesView.setSuggestions(this._hashTableOfEntries[attribute.getUniqueKeyString()]);
     var listener = this;
-    aTextView.setSuggestions(this._hashTableOfEntries[attribute.getUniqueKeyString()]);
-    aTextView.setKeyPressFunction(function (evt, aTxtView) {listener.keyPressOnEditField(evt, aTxtView);});
+    multiEntriesView.setKeyPressFunction(function (evt, aTxtView) {return listener.keyPressOnEditField(evt, aTxtView);});
+    multiEntriesView.setClickFunction(function (evt, aTxtView) {return listener._handleClick(evt, aTxtView);});
   }
 };
 
@@ -351,7 +351,17 @@
   this._buildTable();
 };
   
-
+TablePlugin.prototype._handleClick = function (inEventObject, aTextView) {
+  var rowElement = aTextView.getSuperview().getHTMLElement().parentNode; // textView -> multiEntriesView -> cellElment -> rowElement
+  Util.assert(rowElement instanceof HTMLTableRowElement);
+  if (rowElement != this._lastSelectedRow) {
+    if (this._lastSelectedRow) {this._lastSelectedRow.style.background = "rgb(100%,100%,100%)";}
+    this._lastSelectedRow = rowElement;
+    rowElement.style.background = "rgb(100%,100%,0%)";
+    return true;
+  }
+  return false;
+};
 /**
  * Called when the user types a character when editing a table cell. 
  *
@@ -402,10 +412,10 @@
     Util.isArray(this._listOfItems);
     
     // line below needs to be called here i.e. early because stopping an edit may change a provisional item
-    // to become a "real" one thereby  creating new row for the next provisional item
+    // to become a "real" one thereby  creating new row for the next provisional item, e.g. this._listOfItems changes
     aTextView.stopEditing();
 
-    var cellElement = aTextView.getHTMLElement();
+    var cellElement = aTextView.getSuperview().getHTMLElement(); // textView's multiEntriesView's
     var userHitReturnInLastRow = false;
     var shiftBy;
     var numCols = this._numberOfColumns;
@@ -442,17 +452,8 @@
       nextCell = nextRow.cells[cellElement.cellIndex];
     }
     
-    var nextTextView = nextCell.or_textView;
-    nextTextView.startEditing();
-/*    if (userHitReturnInLastRow && tablePlugin.myNewItemCreatedFlag) {
-      tablePlugin.myNewItemCreatedFlag = false;
-      tablePlugin.refresh();
-      tablePlugin.startEditingInCellForNewItemAtColumn(cellDelegate.myColumnNumber);
-    } else {
-      if (nextCell) {
-        TablePlugin.startEditingInCell(nextCell);
-      }
-    } */
+    var nextMultiEntryView = nextCell.or_entriesView;
+    nextMultiEntryView.select(move != MOVE_LEFT);
   }
   return !move;
 };

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/TextView.js	2005-06-02 00:51:46 UTC (rev 106)
@@ -59,22 +59,26 @@
  * @param    isMultiLine     a boolean indicating if text view is single line or multi-line
  */
 TextView.prototype = new View();  // makes TextView be a subclass of View
-function TextView(theSuperview, theElement, theItem, theAttribute, theClassType, isMultiLine) {
-  Util.assert(theItem instanceof Item);
+function TextView(theSuperview, inElement, inItem, inAttribute, inEntry, inClassName, isMultiLine) {
+  Util.assert((!inEntry) || inEntry instanceof Entry);
+  Util.assert(inItem instanceof Item);
+  Util.assert(inAttribute instanceof Item);
   //Util.assert(theAttribute instanceof Attribute); PENDING need to check that attribute is an attribute
   
   this.setSuperview(theSuperview);
-  this.setHTMLElement(theElement);
-  this._item = theItem;
-  this._attribute = theAttribute;
+  this.setHTMLElement(inElement);
+  inElement.style.width = inElement.style.height = "100%"; // make this element expand to fill parent element where possible
+  this._item = inItem;
+  this._attribute = inAttribute;
+  this._entry = inEntry;
   this._editField = null;
-  this._classType = theClassType;
+  this._className = inClassName;
   this._isMultiLine = isMultiLine;
   this._isEditing = false;
   this._proxyOnKeyFunction = null;
   
-  this._isProvisional = this._item.isProvisional();
-  if (this._isProvisional) {this._provisionalText = this._attribute.getDisplayName();}
+  this._isProvisional = inItem.isProvisional();
+  if (this._isProvisional) {this._provisionalText = inAttribute.getDisplayName();}
   
 }
 
@@ -112,18 +116,13 @@
  * Re-creates all the HTML for the TextView, and hands the HTML to the 
  * browser to be re-drawn.
  *
- * @scope    public instance method
+ * @scope    private instance method
  */
 TextView.prototype._buildView = function() {
   var htmlElement = this.getHTMLElement();
   htmlElement.innerHTML = '';
   
-  var textString = this._isProvisional ? this._provisionalText :
-    this._item.getSingleStringValueFromAttribute(this._attribute);
-  // PENDING: need to deal with multi valued attrs
-  // for (var i in textList) {
-  //   textString = textList[i] + "\n" + textString;
-  // };
+  var textString = this._getText();
   
   if (this._isProvisional) {
     this._oldColor = htmlElement.style.color;
@@ -155,7 +154,7 @@
         editField.type = 'text';
       }
       this._editField = editField;
-      editField.className = this._classType;
+      editField.className = this._className;
       var listener = this; 
       editField.onblur = this.onBlur.bindAsEventListener(this);
       editField.onkeypress = this.onKeyPress.bindAsEventListener(this);
@@ -163,8 +162,8 @@
       editField.onfocus = this.onFocus.bindAsEventListener(this);
       editField.defaultValue = this._isProvisional ? '' : this.textNode.data;
     }
-    editField.style.width = this.getHTMLElement().offsetWidth + "px";    
-    editField.style.height = (this.getHTMLElement().offsetHeight) + "px";
+    //editField.style.width = this.getHTMLElement().offsetWidth + "px";    
+    //editField.style.height = (this.getHTMLElement().offsetHeight) + "px";
     
     this._setupSuggestionBox();
     this.getHTMLElement().replaceChild(editField, this.textNode);
@@ -175,11 +174,90 @@
 };
 
 
+/**
+ * Called when it's time to stop editing and save the changes.
+ *
+ * @scope    public instance method
+ */
+TextView.prototype.stopEditing = function() {
+  if (this._isEditing) {
+    var newText = this._editField.value;
+    var stillProvisional = this._isProvisional && newText === '';
+    var htmlElement = this.getHTMLElement();
+
+    this._isEditing = false;
+
+    if (this._suggestionBox) {this._suggestionBox._blurOnInputField();}
+    if (stillProvisional) {
+      newText = this._provisionalText;
+    }
+    this.textNode.data = newText;
+    this._suggestionBox = null;
+    this.getHTMLElement().replaceChild(this.textNode, this._editField);
+
+    // we need this _writeText() to be after all display related code, because this may trigger an observer call
+    if (!stillProvisional) { this._writeText(newText); }
+  }
+};
+
+
+/**
+ * Writes edited text back into item entry of repository
+ *
+ * @scope    private instance method
+ * @param    inText    text to be written. 
+ */
+TextView.prototype._writeText = function(inText) {
+  if (this._entry) {
+    var oldText = this._entry.getDisplayString();
+    if (oldText != inText) {
+      this._entry = this._item.replaceEntry(this._entry,inText);
+    }
+  }
+  else if (inText !== '') {
+    this._entry = this._item.addEntryForAttribute(this._attribute, inText);
+  }
+};
+
+/**
+ * Returns text string for TextView to be displaying and editing
+ *
+ * @scope    private instance method
+ */
+TextView.prototype._getText = function() {
+  if (this._isProvisional) {return this._provisionalText;}
+  if (this._entry) {return this._entry.getDisplayString();}
+  return '';
+};
+
+/**
+ * Restores the original text before this editing session
+ *
+ * @scope    private instance method
+ */
+TextView.prototype._restoreText = function() {
+  Util.assert(this._isEditing);
+  var oldText = (this._entry) ?  this._entry.getDisplayString() : '';
+  this._editField.value = oldText;
+  this._editField.select();
+};
+
 // -------------------------------------------------------------------
 // Event handler methods
 // -------------------------------------------------------------------
 
 /**
+ * Sets a function to be used when onclick is called to the TextView
+ *
+ * @scope    public instance method
+ * @param    inEventObject    An event object. 
+ */
+TextView.prototype.setClickFunction = function(inClickFunction) {
+  Util.assert(inClickFunction instanceof Function);
+  this._clickFunction = inClickFunction;
+};
+
+/**
  * Called when the user clicks on the text.
  *
  * Handles the mouse click event on text view. Called by listener.
@@ -188,6 +266,9 @@
  * @param    inEventObject    An event object. 
  */
 TextView.prototype.onClick = function(inEventObject) {
+  if (this._clickFunction && this._clickFunction(inEventObject, this)) {
+    return true;
+  }
   if (this.isInEditMode()) {
     this.startEditing();
   }
@@ -212,45 +293,6 @@
 
 
 /**
- * Called when it's time to stop editing and save the changes.
- *
- * @scope    public instance method
- */
-TextView.prototype.stopEditing = function() {
-  if (this._isEditing) {
-    var newText = this._editField.value;
-    var stillProvisional = this._isProvisional && newText === '';
-    var htmlElement = this.getHTMLElement();
-    
-    this._isEditing = false;
-  
-    if (this._suggestionBox) {this._suggestionBox._blurOnInputField();}
-    if (stillProvisional) {
-      newText = this._provisionalText;
-    }
-    this.textNode.data = newText;
-    this._suggestionBox = null;
-    this.getHTMLElement().replaceChild(this.textNode, this._editField);
-    
-    // we need this block to be after all display related code, because this may trigger an observer call
-    if (!stillProvisional) {
-      // write out new entry for attribute
-      // PENDING: need to properly handle multi-valued attributes
-      var listOfEntries = this._item.getEntriesForAttribute(this._attribute);
-      if (listOfEntries && listOfEntries[0]) {
-        var oldEntry = listOfEntries[0];
-        this._item.replaceEntry(oldEntry, newText);
-      } else {
-        if (newText) {
-          this._item.addEntryForAttribute(this._attribute, newText);
-        }
-      }
-    }
-  }
-};
-
-
-/**
  * Sets a function to be used when onkeypress is called to the TextView
  *
  * @scope    public instance method
@@ -271,6 +313,10 @@
  * @param    inEventObject    An event object. 
  */
 TextView.prototype.onKeyPress = function(inEventObject) {
+  if (inEventObject.keyCode == Util.ASCII_VALUE_FOR_ESCAPE) {
+    this._restoreText();
+    return true;
+  }
   if (this._keyPressFunction && this._keyPressFunction(inEventObject, this)) {
     return true;
   }
@@ -321,6 +367,8 @@
   if (this._isProvisional) {
     this._isProvisional = false;
     this.getHTMLElement().style.color = this._oldColor;
+    // need to set line below because _writeText() hasn't returned an entry yet
+    this._entry = this._item.getSingleEntryFromAttribute(this._attribute); 
     this._buildView();
   }
 };

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/Util.js	2005-06-02 00:51:46 UTC (rev 106)
@@ -324,6 +324,17 @@
 
 
 // -------------------------------------------------------------------
+// Methods that operate on Arrays
+// -------------------------------------------------------------------
+
+Util.getArrayIndex = function(inArray, inElt) {
+  for (i=0; i<inArray.length; ++i) {
+    if (inArray[i] == inElt) {return i;}
+  }
+  return -1;
+};
+
+// -------------------------------------------------------------------
 // Methods that operate on Sets
 // -------------------------------------------------------------------
 

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/base_style.css	2005-06-02 00:51:46 UTC (rev 106)
@@ -466,9 +466,9 @@
   background: rgb(100%, 100%, 40%);
 }
 
-.editmode .simple_table td:hover {
+/*.editmode .simple_table td:hover {
   background: rgb(100%, 100%, 70%);
-}
+}*/
 
 td.newitem {
   /* background: rgb(100%,100%,50%); */

Modified: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/demo_page.html	2005-06-02 00:51:46 UTC (rev 106)
@@ -23,6 +23,7 @@
     <script type="text/javascript" src="PageView.js"></script>
     <script type="text/javascript" src="SectionView.js"></script>
     <script type="text/javascript" src="LoginView.js"></script>
+    <script type="text/javascript" src="MultiEntriesView.js"></script>
     <script type="text/javascript" src="NavbarView.js"></script>
     <script type="text/javascript" src="TextView.js"></script>
     <script type="text/javascript" src="TablePlugin.js"></script>

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/model/Item.js	2005-06-02 00:51:46 UTC (rev 106)
@@ -358,25 +358,33 @@
 
 
 /**
- * Returns just the first value of an item's attribute.
+ * Returns just the first entry of an item's attribute.
  *
  * @scope    public instance method
  * @return   A string with a description of the item.
  */
-Item.prototype.getSingleStringValueFromAttribute = function (inAttribute) {
+Item.prototype.getSingleEntryFromAttribute = function (inAttribute) {
   var listOfEntries = this.getEntriesForAttribute(inAttribute);
-  var singleStringValue = "";
   if (listOfEntries) {
-    firstEntry = listOfEntries[0];
-    if (firstEntry) {
-      singleStringValue = firstEntry.getDisplayString();
-    }
+    return listOfEntries[0];
   }
-  return singleStringValue;
+  return null;
 };
 
 
 /**
+ * Returns just the first entry's display string of an item's attribute.
+ *
+ * @scope    public instance method
+ * @return   A string with a description of the item.
+ */
+Item.prototype.getSingleStringValueFromAttribute = function (inAttribute) {
+  var singleEntry = this.getSingleEntryFromAttribute(inAttribute);
+  if (singleEntry) {return singleEntry.getDisplayString();}
+  return "";
+};
+
+/**
  * Returns a string describing the item.
  *
  * @scope    public instance method

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 00:23:38 UTC (rev 105)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 00:51:46 UTC (rev 106)
@@ -2914,4 +2914,226 @@
           "value": { "type": "StringValue", "value": "Brian Totty" },
       "userstamp": "6241",                // by (Chih-Chao Lam)
       "timestamp": "1117671612418" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // guessing it's Harper Collins
+           "uuid": "3cd67e90-d29f-4ec7-8312-66d22733f0a0",
+      "attribute": "3102",                // Publisher
+           "item": "6013",                // The Two Towers
+          "value": { "type": "StringValue", "value": "guessing it's Harper Collins" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672001627" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // don't know
+           "uuid": "9bc86406-fc95-447d-8a23-22944b1b20da",
+      "attribute": "3103",                // ISBN
+           "item": "6013",                // The Two Towers
+          "value": { "type": "StringValue", "value": "don't know" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672009181" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "b47b1562-97a6-496e-8a89-402eb91d9b88",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "d384d951-40d7-4678-87c3-5ddd7cd4828e",                // demonstration
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672018323" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // demonstration
+           "uuid": "d384d951-40d7-4678-87c3-5ddd7cd4828e",
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117671979087" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // demonstration
+           "uuid": "8958b17a-4da1-44b0-8f1c-8ef78c28616b",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "d384d951-40d7-4678-87c3-5ddd7cd4828e",                // demonstration
+          "value": { "type": "StringValue", "value": "demonstration" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672018314" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Section
+           "uuid": "86dc0f87-0bb1-4c9d-8a41-9a35ff7fe320",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "3011",                // Query for all books
+   "previousEntry": "6040",
+          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672026735" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Page
+           "uuid": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096166" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Page
+           "uuid": "3d083924-ae60-4a08-8c18-98c6fa8b7fed",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
+          "value": { "type": "StringValue", "value": "New Page" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096167" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Page
+           "uuid": "fecffd1c-eccd-40c0-8418-2487e42b948f",
+      "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
+           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
+          "value": { "type": "StringValue", "value": "New Page" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096168" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Page
+           "uuid": "949c7430-57f7-4b7b-8b2b-e11c4f1d03f1",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
+          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096169" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // This is a new page.
+           "uuid": "f94cf799-52f6-4e00-8e6d-9e2d20a369d4",
+      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
+           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
+          "value": { "type": "StringValue", "value": "This is a new page." },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096170" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Section
+           "uuid": "4b58b203-f336-494c-86db-5c26803d8f09",
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096170" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Section
+           "uuid": "bbc43d46-a772-41c2-83a6-7b0c659980dc",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
+          "value": { "type": "StringValue", "value": "New Section" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Section
+           "uuid": "650aa423-d1e0-40eb-86f7-33c9cc3d3850",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
+          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096172" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Section
+           "uuid": "eefb08d5-8a9a-4bac-8a23-c76c61e2829c",
+      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
+           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
+          "value": { "type": "RelatedUuid", "value": "4b58b203-f336-494c-86db-5c26803d8f09" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096172" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Table
+           "uuid": "2489beba-ff2a-4ba3-8e5b-de77c487a99f",
+      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
+          "value": { "type": "StringValue", "value": "Table" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096173" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Query
+           "uuid": "e09578c6-245e-46f9-8ec7-c25ba5338ade",
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096174" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Query
+           "uuid": "f6a102de-af42-4ef2-891b-e4f4646df91d",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
+          "value": { "type": "StringValue", "value": "New Query" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096174" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Query
+           "uuid": "fc803064-8a4f-4a5d-819f-e022fd6c1a0f",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
+          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096175" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Query
+           "uuid": "19f95d46-3bdb-43ae-87aa-1d8754f0a90e",
+      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
+           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
+          "value": { "type": "RelatedUuid", "value": "e09578c6-245e-46f9-8ec7-c25ba5338ade" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672096176" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // 8. This a my new page
+           "uuid": "3de0f489-3453-4438-88f6-5ecf05a27acb",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // 8. This a my new page
+   "previousEntry": "3d083924-ae60-4a08-8c18-98c6fa8b7fed",
+          "value": { "type": "StringValue", "value": "8. This a my new page" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672110813" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "82e0fc45-d336-4355-85d9-508801f6a05f",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672117647" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "299531b0-b0b8-44c4-8f40-1d5fc84ee138",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
+   "previousEntry": "82e0fc45-d336-4355-85d9-508801f6a05f",
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672181749" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "ba7f9419-c1b0-420b-8c84-873df262cfd0",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "5834a624-cdfa-4289-8a39-a1a569b0b8d2",                // Triage Status
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672195133" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Triage Status
+           "uuid": "5834a624-cdfa-4289-8a39-a1a569b0b8d2",
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672181859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Triage Status
+           "uuid": "3062af7e-624a-4135-8432-7361a1206a8a",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "5834a624-cdfa-4289-8a39-a1a569b0b8d2",                // Triage Status
+          "value": { "type": "StringValue", "value": "Triage Status" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117672195124" }
   }
\ No newline at end of file



From chaolam at sheep.berlios.de  Thu Jun  2 03:20:28 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 2 Jun 2005 03:20:28 +0200
Subject: [openrecord-svn] r107 - trunk/source/repositories/demo_page
Message-ID: <200506020120.j521KSPs014973@sheep.berlios.de>

Author: chaolam
Date: 2005-06-02 03:20:23 +0200 (Thu, 02 Jun 2005)
New Revision: 107

Modified:
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
Fixed repository back


Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 00:51:46 UTC (rev 106)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 01:20:23 UTC (rev 107)
@@ -3136,4 +3136,14 @@
           "value": { "type": "StringValue", "value": "Triage Status" },
       "userstamp": "6241",                // by (Chih-Chao Lam)
       "timestamp": "1117672195124" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "4b88732c-df0b-4391-82a3-14b76f74657b",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "3011",                // Query for all books
+   "previousEntry": "86dc0f87-0bb1-4c9d-8a41-9a35ff7fe320",
+          "value": { "type": "RelatedUuid", "value": "3104" },
+      "userstamp": "6241",                // by (Chih-Chao Lam)
+      "timestamp": "1117675180521" }
   }
\ No newline at end of file



From chaolam at sheep.berlios.de  Thu Jun  2 03:31:51 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 2 Jun 2005 03:31:51 +0200
Subject: [openrecord-svn] r108 - trunk/source
Message-ID: <200506020131.j521VpgI016275@sheep.berlios.de>

Author: chaolam
Date: 2005-06-02 03:31:39 +0200 (Thu, 02 Jun 2005)
New Revision: 108

Modified:
   trunk/source/MultiEntriesView.js
Log:
Prevent textview from getting edited if not table row is not selected


Modified: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-02 01:20:23 UTC (rev 107)
+++ trunk/source/MultiEntriesView.js	2005-06-02 01:31:39 UTC (rev 108)
@@ -133,7 +133,7 @@
 MultiEntriesView.prototype._handleOwnClick = function(inEvent) {
   var lastEntry = this._entryViews[this._entryViews.length-1];
   if (this._handleClick(inEvent, lastEntry)) {return true;}
-  lastEntry.startEditing();
+  if (inEvent.target == this.getHTMLElement()) {lastEntry.startEditing();}
 };
 
 



From chaolam at sheep.berlios.de  Thu Jun  2 03:40:50 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 2 Jun 2005 03:40:50 +0200
Subject: [openrecord-svn] r109 - trunk/source/repositories/demo_page
Message-ID: <200506020140.j521eoi4018153@sheep.berlios.de>

Author: chaolam
Date: 2005-06-02 03:40:48 +0200 (Thu, 02 Jun 2005)
New Revision: 109

Modified:
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
reverting repository, accidentally added several unintended entries

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 01:31:39 UTC (rev 108)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 01:40:48 UTC (rev 109)
@@ -2914,236 +2914,4 @@
           "value": { "type": "StringValue", "value": "Brian Totty" },
       "userstamp": "6241",                // by (Chih-Chao Lam)
       "timestamp": "1117671612418" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // guessing it's Harper Collins
-           "uuid": "3cd67e90-d29f-4ec7-8312-66d22733f0a0",
-      "attribute": "3102",                // Publisher
-           "item": "6013",                // The Two Towers
-          "value": { "type": "StringValue", "value": "guessing it's Harper Collins" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672001627" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // don't know
-           "uuid": "9bc86406-fc95-447d-8a23-22944b1b20da",
-      "attribute": "3103",                // ISBN
-           "item": "6013",                // The Two Towers
-          "value": { "type": "StringValue", "value": "don't know" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672009181" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "b47b1562-97a6-496e-8a89-402eb91d9b88",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "d384d951-40d7-4678-87c3-5ddd7cd4828e",                // demonstration
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672018323" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // demonstration
-           "uuid": "d384d951-40d7-4678-87c3-5ddd7cd4828e",
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117671979087" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // demonstration
-           "uuid": "8958b17a-4da1-44b0-8f1c-8ef78c28616b",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "d384d951-40d7-4678-87c3-5ddd7cd4828e",                // demonstration
-          "value": { "type": "StringValue", "value": "demonstration" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672018314" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "86dc0f87-0bb1-4c9d-8a41-9a35ff7fe320",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-           "item": "3011",                // Query for all books
-   "previousEntry": "6040",
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672026735" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Page
-           "uuid": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096166" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Page
-           "uuid": "3d083924-ae60-4a08-8c18-98c6fa8b7fed",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
-          "value": { "type": "StringValue", "value": "New Page" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096167" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Page
-           "uuid": "fecffd1c-eccd-40c0-8418-2487e42b948f",
-      "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
-          "value": { "type": "StringValue", "value": "New Page" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096168" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "949c7430-57f7-4b7b-8b2b-e11c4f1d03f1",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096169" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This is a new page.
-           "uuid": "f94cf799-52f6-4e00-8e6d-9e2d20a369d4",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
-          "value": { "type": "StringValue", "value": "This is a new page." },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096170" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Section
-           "uuid": "4b58b203-f336-494c-86db-5c26803d8f09",
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096170" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Section
-           "uuid": "bbc43d46-a772-41c2-83a6-7b0c659980dc",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
-          "value": { "type": "StringValue", "value": "New Section" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "650aa423-d1e0-40eb-86f7-33c9cc3d3850",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096172" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Section
-           "uuid": "eefb08d5-8a9a-4bac-8a23-c76c61e2829c",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // New Page
-          "value": { "type": "RelatedUuid", "value": "4b58b203-f336-494c-86db-5c26803d8f09" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096172" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Table
-           "uuid": "2489beba-ff2a-4ba3-8e5b-de77c487a99f",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
-          "value": { "type": "StringValue", "value": "Table" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096173" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Query
-           "uuid": "e09578c6-245e-46f9-8ec7-c25ba5338ade",
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096174" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Query
-           "uuid": "f6a102de-af42-4ef2-891b-e4f4646df91d",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
-          "value": { "type": "StringValue", "value": "New Query" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096174" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "fc803064-8a4f-4a5d-819f-e022fd6c1a0f",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096175" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Query
-           "uuid": "19f95d46-3bdb-43ae-87aa-1d8754f0a90e",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "4b58b203-f336-494c-86db-5c26803d8f09",                // New Section
-          "value": { "type": "RelatedUuid", "value": "e09578c6-245e-46f9-8ec7-c25ba5338ade" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672096176" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 8. This a my new page
-           "uuid": "3de0f489-3453-4438-88f6-5ecf05a27acb",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "cbfca6bc-4328-4f0f-851c-36be71f3cd5d",                // 8. This a my new page
-   "previousEntry": "3d083924-ae60-4a08-8c18-98c6fa8b7fed",
-          "value": { "type": "StringValue", "value": "8. This a my new page" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672110813" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "82e0fc45-d336-4355-85d9-508801f6a05f",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672117647" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "299531b0-b0b8-44c4-8f40-1d5fc84ee138",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-           "item": "e09578c6-245e-46f9-8ec7-c25ba5338ade",                // New Query
-   "previousEntry": "82e0fc45-d336-4355-85d9-508801f6a05f",
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672181749" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "ba7f9419-c1b0-420b-8c84-873df262cfd0",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5834a624-cdfa-4289-8a39-a1a569b0b8d2",                // Triage Status
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672195133" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Triage Status
-           "uuid": "5834a624-cdfa-4289-8a39-a1a569b0b8d2",
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672181859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Triage Status
-           "uuid": "3062af7e-624a-4135-8432-7361a1206a8a",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5834a624-cdfa-4289-8a39-a1a569b0b8d2",                // Triage Status
-          "value": { "type": "StringValue", "value": "Triage Status" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117672195124" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "4b88732c-df0b-4391-82a3-14b76f74657b",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-           "item": "3011",                // Query for all books
-   "previousEntry": "86dc0f87-0bb1-4c9d-8a41-9a35ff7fe320",
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117675180521" }
   }
\ No newline at end of file



From skinner at sheep.berlios.de  Thu Jun  2 05:56:17 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 2 Jun 2005 05:56:17 +0200
Subject: [openrecord-svn] r110 - in trunk/source: . model
Message-ID: <200506020356.j523uHeF005003@sheep.berlios.de>

Author: skinner
Date: 2005-06-02 05:56:11 +0200 (Thu, 02 Jun 2005)
New Revision: 110

Modified:
   trunk/source/NavbarView.js
   trunk/source/RootView.js
   trunk/source/model/World.js
Log:
Minor change so that nav-bar menu names reflect page names for new pages.

Modified: trunk/source/NavbarView.js
===================================================================
--- trunk/source/NavbarView.js	2005-06-02 01:40:48 UTC (rev 109)
+++ trunk/source/NavbarView.js	2005-06-02 03:56:11 UTC (rev 110)
@@ -89,6 +89,9 @@
   for (var key in listOfPages) {
     var page = listOfPages[key];
     var menuText = page.getSingleStringValueFromAttribute(attributeCalledShortName);
+    if (!menuText) {
+      menuText = page.getDisplayName();
+    }
     var menuUrl = rootView.getUrlForItem(page);
     listOfStrings.push("<li class=\"menu_item\"><a href=\"" + menuUrl + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
   }

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-02 01:40:48 UTC (rev 109)
+++ trunk/source/RootView.js	2005-06-02 03:56:11 UTC (rev 110)
@@ -352,7 +352,7 @@
 RootView.prototype.newPage = function () {
   this.getWorld().beginTransaction();
   var newPage = this.getWorld().newItem("New Page");
-  var shortName = this.getWorld().getAttributeCalledShortName();
+  // var shortName = this.getWorld().getAttributeCalledShortName();
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var attributeCalledQuery = this.getWorld().getAttributeCalledQuery();
   var categoryCalledQuery = this.getWorld().getCategoryCalledQuery();
@@ -361,7 +361,7 @@
   var attributeCalledSection = this.getWorld().getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTION);
   var categoryCalledPage = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
   var categoryCalledSection = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_SECTION);
-  newPage.addEntryForAttribute(shortName, "New Page");
+  // newPage.addEntryForAttribute(shortName, "New Page");
   newPage.addEntryForAttribute(attributeCalledCategory, categoryCalledPage);
   newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
   var newSection = this.getWorld().newItem("New Section");

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-02 01:40:48 UTC (rev 109)
+++ trunk/source/model/World.js	2005-06-02 03:56:11 UTC (rev 110)
@@ -46,29 +46,6 @@
 World.RETRIEVAL_FILTER_UNABRIDGED = "RETRIEVAL_FILTER_UNABRIDGED";
 
 // World.UUID_FOR_ATTRIBUTE_UUID = 100;
-/*
-World.UUID_FOR_USER_AMY = 100;
-
-World.UUID_FOR_ATTRIBUTE_NAME = 102;
-World.UUID_FOR_ATTRIBUTE_SHORT_NAME = 101;
-World.UUID_FOR_ATTRIBUTE_SUMMARY = 103;
-World.UUID_FOR_ATTRIBUTE_BODY = 104;
-World.UUID_FOR_ATTRIBUTE_CATEGORY = 105;
-World.UUID_FOR_ATTRIBUTE_ORDINAL = 113;
-World.UUID_FOR_ATTRIBUTE_USERSTAMP = 106;
-World.UUID_FOR_ATTRIBUTE_TIMESTAMP = 107;
-World.UUID_FOR_ATTRIBUTE_QUERY = 109;
-World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = 110;
-World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = 111;
-World.UUID_FOR_ATTRIBUTE_UNFILED = 112;
-
-World.UUID_FOR_CATEGORY_BOOK = 141;      // here as an example only
-World.UUID_FOR_CATEGORY_MOVIE = 142;     // here as an example only
-World.UUID_FOR_CATEGORY_ATTRIBUTE = 143;
-World.UUID_FOR_CATEGORY_CATEGORY = 144;
-World.UUID_FOR_CATEGORY_QUERY = 147;
-*/
-
 // "00000000-ce7f-11d9-8cd5-0011113ae5d6";
 
 World.UUID_FOR_USER_AMY              = "00000100-ce7f-11d9-8cd5-0011113ae5d6";



From skinner at sheep.berlios.de  Thu Jun  2 08:16:42 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 2 Jun 2005 08:16:42 +0200
Subject: [openrecord-svn] r111 - in trunk/source: . model repositories/demo_page
Message-ID: <200506020616.j526Gg2u009088@sheep.berlios.de>

Author: skinner
Date: 2005-06-02 08:16:32 +0200 (Thu, 02 Jun 2005)
New Revision: 111

Modified:
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
Added data model support for expected data types.

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-02 03:56:11 UTC (rev 110)
+++ trunk/source/PageView.js	2005-06-02 06:16:32 UTC (rev 111)
@@ -84,7 +84,11 @@
  */
 PageView.prototype.getPageTitle = function () {
   var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
-  return this.myPage.getSingleStringValueFromAttribute(attributeCalledShortName);
+  var pageTitle = this.myPage.getSingleStringValueFromAttribute(attributeCalledShortName);
+  if (!pageTitle) {
+    pageTitle = this.myPage.getDisplayName();
+  }
+  return pageTitle;
 };
 
   

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-02 03:56:11 UTC (rev 110)
+++ trunk/source/RootView.js	2005-06-02 06:16:32 UTC (rev 111)
@@ -331,7 +331,7 @@
 RootView.prototype.display = function () {
   Util.assert(this._myCurrentContentView instanceof Object);
 
-  document.title = this._myCurrentContentView.getPageTitle() + " - openagenda.org";
+  document.title = this._myCurrentContentView.getPageTitle() + " - openrecord.org";
   this._myRootDiv.className = (this.isInEditMode()) ? RootView.ELEMENT_CLASS_EDIT_MODE : RootView.ELEMENT_CLASS_VIEW_MODE;
   this._displayLoginSpan();
   this._displayNavbar();

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-02 03:56:11 UTC (rev 110)
+++ trunk/source/model/StubVirtualServer.js	2005-06-02 06:16:32 UTC (rev 111)
@@ -633,6 +633,7 @@
   var name;
   var item;
   var entry;
+  var key;
   
   this.__myWorld.beginTransaction();
   var axiomaticUser = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_USER_AMY);
@@ -643,17 +644,16 @@
   
   // associate display names with the UUIDs of all the attributes
   var hashTableOfAttributeNamesKeyedByUuid = {};
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_NAME] = "Name";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SHORT_NAME] = "Short Name";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SUMMARY] = "Summary";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY] = "Body";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY] = "Category";
-  // hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SECTION] = "Section";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY] = "Query";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_NAME]          = "Name";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SHORT_NAME]    = "Short Name";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SUMMARY]       = "Summary";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY]          = "Body";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY]      = "Category";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY]         = "Query";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = "Matching Item";
-  // hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_PLUGIN_NAME] = "Plugin Name";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED] = "Unfiled Entry";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED]       = "Unfiled Entry";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE] = "Expected Type";
 
   // create all the Item objects for the attributes
   for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
@@ -663,28 +663,65 @@
   // associate display names with the UUIDs of all the categories
   var hashTableOfCategoryNamesKeyedByUuid = {};
   hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_ATTRIBUTE] = "Attribute";
-  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_CATEGORY] = "Category";
-  // hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_PAGE] = "Page";
-  // hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_SECTION] = "Section";
-  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_QUERY] = "Query";
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_CATEGORY]  = "Category";
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_QUERY]     = "Query";
+  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_TYPE]      = "Type";
 
   // create all the Item objects for the categories
   for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
     this.__getItemFromUuidOrCreateNewItem(uuid);
   }
  
+  // associate display names with the UUIDs of all the types
+  var hashTableOfTypeNamesKeyedByUuid = {};
+  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_TEXT]       = "Text";
+  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_NUMBER]     = "Number";
+  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_DATE]       = "Date";
+  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_CHECK_MARK] = "Check Mark";
+  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_URL]        = "Url";
+  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_ITEM]       = "Item";
+  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_ANYTHING]   = "Anything";
+  
+  // create all the Item objects for the types
+  for (uuid in hashTableOfTypeNamesKeyedByUuid) {
+    this.__getItemFromUuidOrCreateNewItem(uuid);
+  }
+  
+  // associate expected data types with the UUIDs of some of the attributes
+  var hashTableOfExpectedTypesKeyedByUuid = {};
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_NAME]          = [World.UUID_FOR_TYPE_TEXT];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SHORT_NAME]    = [World.UUID_FOR_TYPE_TEXT];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SUMMARY]       = [World.UUID_FOR_TYPE_TEXT];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY]          = [World.UUID_FOR_TYPE_TEXT];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY]      = [World.UUID_FOR_CATEGORY_CATEGORY];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY]         = [World.UUID_FOR_CATEGORY_QUERY];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = [World.UUID_FOR_CATEGORY_CATEGORY];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = [World.UUID_FOR_TYPE_ITEM];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED]       = [World.UUID_FOR_TYPE_ANYTHING];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE] = [World.UUID_FOR_CATEGORY_TYPE, World.UUID_FOR_CATEGORY_CATEGORY];
+
+  var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
+
   // set the name of the axiomaticUser
-  var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
   axiomaticUser.addEntryForAttribute(attributeCalledName, "Amy ex machina");
   
-  // set the names of all the attributes, and put them in the category called "Attribute"
+  // set the names of all the attributes, 
+  // and put them in the category called "Attribute"
+  // and set their expected data types
   var categoryCalledAttribute = this.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
   var attributeCalledCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
+  var attributeCalledExpectedType = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
   for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
     item = this.getItemFromUuid(uuid);
     name = hashTableOfAttributeNamesKeyedByUuid[uuid];
     item.addEntryForAttribute(attributeCalledName, name);
     item.addEntryForAttribute(attributeCalledCategory, categoryCalledAttribute);
+    var listOfExpectedTypes = hashTableOfExpectedTypesKeyedByUuid[uuid];
+    for (key in listOfExpectedTypes) {
+      var uuidOfExpectedType = listOfExpectedTypes[key];
+      expectedType = this.getItemFromUuid(uuidOfExpectedType);
+      item.addEntryForAttribute(attributeCalledExpectedType, expectedType);
+    }
   }
   
   // set the names of all the categories, and put them in the category called "Category"
@@ -695,10 +732,19 @@
     item.addEntryForAttribute(attributeCalledName, name);
     item.addEntryForAttribute(attributeCalledCategory, categoryCalledCategory);
   }
-  
+
+  // set the names of all the types, and put them in the category called "Type"
+  var categoryCalledType = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_TYPE);
+  for (uuid in hashTableOfTypeNamesKeyedByUuid) {
+    item = this.getItemFromUuid(uuid);
+    name = hashTableOfTypeNamesKeyedByUuid[uuid];
+    item.addEntryForAttribute(attributeCalledName, name);
+    item.addEntryForAttribute(attributeCalledCategory, categoryCalledType);
+  }
+
   this.__myCurrentUser = null;
 
-  for (var key in this.__myChronologicalListOfNewlyCreatedRecords) {
+  for (key in this.__myChronologicalListOfNewlyCreatedRecords) {
     var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
     this.__myChronologicalListOfRecords.push(newRecord);
   }

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-02 03:56:11 UTC (rev 110)
+++ trunk/source/model/World.js	2005-06-02 06:16:32 UTC (rev 111)
@@ -45,27 +45,37 @@
 World.RETRIEVAL_FILTER_DEMOCRATIC = "RETRIEVAL_FILTER_DEMOCRATIC";
 World.RETRIEVAL_FILTER_UNABRIDGED = "RETRIEVAL_FILTER_UNABRIDGED";
 
-// World.UUID_FOR_ATTRIBUTE_UUID = 100;
-// "00000000-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_USER_AMY              = "00000100-ce7f-11d9-8cd5-0011113ae5d6";
+World.NULL_UUID                        = "00000000-ce7f-11d9-8cd5-0011113ae5d6";
+World.IDENTITY_UUID                    = "00000001-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_ATTRIBUTE_NAME        = "00000101-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_SHORT_NAME  = "00000102-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_SUMMARY     = "00000103-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_BODY        = "00000104-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_CATEGORY    = "00000105-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY       = "00000106-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_USER_AMY                = "00000100-ce7f-11d9-8cd5-0011113ae5d6";
+
+World.UUID_FOR_ATTRIBUTE_NAME          = "00000101-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_SHORT_NAME    = "00000102-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_SUMMARY       = "00000103-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_BODY          = "00000104-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_CATEGORY      = "00000105-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY         = "00000106-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = "00000107-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = "00000108-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_UNFILED     = "00000109-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_UNFILED       = "00000109-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE = "0000010a-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_CATEGORY_BOOK         = "0000010e-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
-World.UUID_FOR_CATEGORY_MOVIE        = "0000010f-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
-World.UUID_FOR_CATEGORY_ATTRIBUTE    = "00000110-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_CATEGORY     = "00000111-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_QUERY        = "00000112-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_BOOK           = "0000010e-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
+World.UUID_FOR_CATEGORY_MOVIE          = "0000010f-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
+World.UUID_FOR_CATEGORY_ATTRIBUTE      = "00000110-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_CATEGORY       = "00000111-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_QUERY          = "00000112-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_TYPE           = "00000113-ce7f-11d9-8cd5-0011113ae5d6";
 
+World.UUID_FOR_TYPE_TEXT               = "00000120-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_NUMBER             = "00000121-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_DATE               = "00000122-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_CHECK_MARK         = "00000123-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_URL                = "00000124-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_ITEM               = "00000130-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_ANYTHING           = "00000140-ce7f-11d9-8cd5-0011113ae5d6";
 
 // -------------------------------------------------------------------
 // World private class constants
@@ -82,35 +92,50 @@
  * a world to edit the items there.
  *
  * @scope    public instance constructor
- * @param    inVirtualServer    Optional. The datastore that this world gets its data from. 
+ * @param    virtualServer    Optional. The datastore that this world gets its data from. 
  */
-function World(inVirtualServer) {
-  this.__myCountOfNestedTransactions = 0;
-  this.__myHashTableOfObserverListsKeyedByItemUuid = {};
-  this.__myListOfListObserverTuples = [];
+function World(virtualServer) {
+  this._countOfNestedTransactions = 0;
+  this._hashTableOfObserverListsKeyedByItemUuid = {};
+  this._listOfListObserverTuples = [];
 
-  this.__myCurrentRetrievalFilter = World.RETRIEVAL_FILTER_LAST_EDIT_WINS;
-  if (inVirtualServer) {
-    this.__myVirtualServer = inVirtualServer;
+  this._currentRetrievalFilter = World.RETRIEVAL_FILTER_LAST_EDIT_WINS;
+
+  var server;
+  if (virtualServer) {
+    server = virtualServer;
   } else {
-    this.__myVirtualServer = new StubVirtualServer();
+    server = new StubVirtualServer();
   }
-  this.__myVirtualServer.setWorldAndLoadAxiomaticItems(this);
+  this._virtualServer = server;
+
+  server.setWorldAndLoadAxiomaticItems(this);
   
   // load the axiomatic attributes
-  this.__myAttributeCalledName = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
-  this.__myAttributeCalledShortName = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SHORT_NAME);
-  this.__myAttributeCalledSummary = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
-  this.__myAttributeCalledCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
-  this.__myAttributeCalledQuery = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
-  this.__myAttributeCalledQueryMatchingCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  this.__myAttributeCalledQueryMatchingItem = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
-  this.__myAttributeCalledUnfiled = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
+  this._attributeCalledName                  = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
+  this._attributeCalledShortName             = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SHORT_NAME);
+  this._attributeCalledSummary               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
+  this._attributeCalledCategory              = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
+  this._attributeCalledQuery                 = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
+  this._attributeCalledQueryMatchingCategory = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  this._attributeCalledQueryMatchingItem     = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  this._attributeCalledUnfiled               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
+  this._attributeCalledExpectedType          = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
 
   // load the axiomatic categories
-  this.__myCategoryCalledAttribute = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
-  this.__myCategoryCalledCategory = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_CATEGORY);
-  this.__myCategoryCalledQuery = this.__myVirtualServer.getItemFromUuid(World.UUID_FOR_CATEGORY_QUERY);
+  this._categoryCalledAttribute   = server.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
+  this._categoryCalledCategory    = server.getItemFromUuid(World.UUID_FOR_CATEGORY_CATEGORY);
+  this._categoryCalledQuery       = server.getItemFromUuid(World.UUID_FOR_CATEGORY_QUERY);
+  this._categoryCalledType        = server.getItemFromUuid(World.UUID_FOR_CATEGORY_TYPE);
+
+  // load the axiomatic types
+  this._typeCalledText      = server.getItemFromUuid(World.UUID_FOR_TYPE_TEXT);
+  this._typeCalledNumber    = server.getItemFromUuid(World.UUID_FOR_TYPE_NUMBER);
+  this._typeCalledDate      = server.getItemFromUuid(World.UUID_FOR_TYPE_DATE);
+  this._typeCalledCheckMark = server.getItemFromUuid(World.UUID_FOR_TYPE_CHECK_MARK);
+  this._typeCalledUrl       = server.getItemFromUuid(World.UUID_FOR_TYPE_URL);
+  this._typeCalledItem      = server.getItemFromUuid(World.UUID_FOR_TYPE_ITEM);
+  this._typeCalledAnything  = server.getItemFromUuid(World.UUID_FOR_TYPE_ANYTHING);
 }
 
 
@@ -128,8 +153,8 @@
  *
  * @scope    public instance method
  */
-World.prototype.beginTransaction = function () {
-  this.__myCountOfNestedTransactions += 1;
+World.prototype.beginTransaction = function() {
+  this._countOfNestedTransactions += 1;
   // PENDING:
   //   This is just a stub method for now.  Once we start implementing
   //   support for transactions we'll have to put some real code here.
@@ -141,17 +166,17 @@
  *
  * @scope    public instance method
  */
-World.prototype.endTransaction = function () {
-  this.__myCountOfNestedTransactions -= 1;
-  Util.assert(this.__myCountOfNestedTransactions >= 0);
+World.prototype.endTransaction = function() {
+  this._countOfNestedTransactions -= 1;
+  Util.assert(this._countOfNestedTransactions >= 0);
   // PENDING:
   //   This is just a stub method for now.  Once we start implementing
   //   support for transactions we'll have to put some real code here.
-  if (this.__myCountOfNestedTransactions === 0) {
-    var listOfChangesMade = this.__myVirtualServer.saveChangesToServer();
+  if (this._countOfNestedTransactions === 0) {
+    var listOfChangesMade = this._virtualServer.saveChangesToServer();
     if (listOfChangesMade.length > 0) {
       Util.displayStatusBlurb(listOfChangesMade.length + " changes made");
-      this.__notifyObserversOfChanges(listOfChangesMade);
+      this._notifyObserversOfChanges(listOfChangesMade);
     }
   }
 };
@@ -164,9 +189,9 @@
  * about any new changes to items or lists that they're observers of.
  *
  * @scope    private instance method
- * @param    inListOfNewlyCreatedRecords    A list of records representing the changes. 
+ * @param    listOfNewlyCreatedRecords    A list of records representing the changes. 
  */
-World.prototype.__notifyObserversOfChanges = function (inListOfNewlyCreatedRecords) {
+World.prototype._notifyObserversOfChanges = function(listOfNewlyCreatedRecords) {
   var hashTableOfNewlyCreatedRecordsKeyedByItemUuid = {};
   var key;
   var uuid;
@@ -179,8 +204,8 @@
   // and build a hash table that divides up the records based on the item
   // being changed, so that we can easily find all the records that impact
   // a given item.
-  for (key in inListOfNewlyCreatedRecords) {
-    var record = inListOfNewlyCreatedRecords[key];
+  for (key in listOfNewlyCreatedRecords) {
+    var record = listOfNewlyCreatedRecords[key];
     item = null;
     if (record instanceof Item) {
       item = record;
@@ -212,7 +237,7 @@
   for (uuid in hashTableOfNewlyCreatedRecordsKeyedByItemUuid) {
     item = this.getItemFromUuid(uuid);
     listOfRecordsForItem = hashTableOfNewlyCreatedRecordsKeyedByItemUuid[uuid];
-    var listOfObserversForItem = this.__myHashTableOfObserverListsKeyedByItemUuid[uuid];
+    var listOfObserversForItem = this._hashTableOfObserverListsKeyedByItemUuid[uuid];
     for (key in listOfObserversForItem) {
       observer = listOfObserversForItem[key];
       if (Util.isFunction(observer)) {
@@ -231,8 +256,8 @@
   // Look at all the observers who have registered interest in a 
   // list of items rather than in an individual item.  For each of
   // those observers, notify them of all the changes to all the items.
-  for (var ikey in this.__myListOfListObserverTuples) {
-    var observerTuple = this.__myListOfListObserverTuples[ikey];
+  for (var ikey in this._listOfListObserverTuples) {
+    var observerTuple = this._listOfListObserverTuples[ikey];
     var listBeingObserved = observerTuple[World.__TUPLE_KEY_LIST];
     var setOfObservers = observerTuple[World.__TUPLE_KEY_OBSERVERS];
     var listOfItemChangeReports = null;
@@ -276,8 +301,8 @@
  * @scope    public instance method
  * @return   A string constant representing one of the three supported retrieval filters.
  */
-World.prototype.getRetrievalFilter = function () {
-  return this.__myCurrentRetrievalFilter;
+World.prototype.getRetrievalFilter = function() {
+  return this._currentRetrievalFilter;
 };
 
 
@@ -285,14 +310,14 @@
  * Sets the retrieval filter that this world will use.
  *
  * @scope    public instance method
- * @param    inFilter    A string constant representing one of the three supported retrieval filters.
+ * @param    filter    A string constant representing one of the three supported retrieval filters.
  */
-World.prototype.setRetrievalFilter = function (inFilter) {
-  Util.assert(inFilter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS ||
-              inFilter == World.RETRIEVAL_FILTER_SINGLE_USER ||
-              inFilter == World.RETRIEVAL_FILTER_DEMOCRATIC ||
-              inFilter == World.RETRIEVAL_FILTER_UNABRIDGED);
-  this.__myCurrentRetrievalFilter = inFilter;
+World.prototype.setRetrievalFilter = function(filter) {
+  Util.assert(filter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS ||
+              filter == World.RETRIEVAL_FILTER_SINGLE_USER ||
+              filter == World.RETRIEVAL_FILTER_DEMOCRATIC ||
+              filter == World.RETRIEVAL_FILTER_UNABRIDGED);
+  this._currentRetrievalFilter = filter;
 };
 
 
@@ -342,56 +367,97 @@
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic attributes
 // -------------------------------------------------------------------
-World.prototype.getAttributeCalledName = function () {
-  return this.__myAttributeCalledName;
+World.prototype.getAttributeCalledName = function() {
+  return this._attributeCalledName;
 };
 
-World.prototype.getAttributeCalledShortName = function () {
-  return this.__myAttributeCalledShortName;
+World.prototype.getAttributeCalledShortName = function() {
+  return this._attributeCalledShortName;
 };
 
-World.prototype.getAttributeCalledSummary = function () {
-  return this.__myAttributeCalledSummary;
+World.prototype.getAttributeCalledSummary = function() {
+  return this._attributeCalledSummary;
 };
 
-World.prototype.getAttributeCalledCategory = function () {
-  return this.__myAttributeCalledCategory;
+World.prototype.getAttributeCalledCategory = function() {
+  return this._attributeCalledCategory;
 };
 
-World.prototype.getAttributeCalledQuery = function () {
-  return this.__myAttributeCalledQuery;
+World.prototype.getAttributeCalledQuery = function() {
+  return this._attributeCalledQuery;
 };
 
-World.prototype.getAttributeCalledQueryMatchingCategory = function () {
-  return this.__myAttributeCalledQueryMatchingCategory;
+World.prototype.getAttributeCalledQueryMatchingCategory = function() {
+  return this._attributeCalledQueryMatchingCategory;
 };
 
-World.prototype.getAttributeCalledQueryMatchingItem = function () {
-  return this.__myAttributeCalledQueryMatchingItem;
+World.prototype.getAttributeCalledQueryMatchingItem = function() {
+  return this._attributeCalledQueryMatchingItem;
 };
 
-World.prototype.getAttributeCalledUnfiled = function () {
-  return this.__myAttributeCalledUnfiled;
+World.prototype.getAttributeCalledUnfiled = function() {
+  return this._attributeCalledUnfiled;
 };
 
+World.prototype.getAttributeCalledExpectedType = function() {
+  return this._attributeCalledExpectedType;
+};
 
+
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic categories
 // -------------------------------------------------------------------
-World.prototype.getCategoryCalledAttribute = function () {
-  return this.__myCategoryCalledAttribute;
+World.prototype.getCategoryCalledAttribute = function() {
+  return this._categoryCalledAttribute;
 };
 
-World.prototype.getCategoryCalledCategory = function () {
-  return this.__myCategoryCalledCategory;
+World.prototype.getCategoryCalledCategory = function() {
+  return this._categoryCalledCategory;
 };
 
-World.prototype.getCategoryCalledQuery = function () {
-  return this.__myCategoryCalledQuery;
+World.prototype.getCategoryCalledQuery = function() {
+  return this._categoryCalledQuery;
 };
 
+World.prototype.getCategoryCalledType = function() {
+  return this._categoryCalledType;
+};
 
+
 // -------------------------------------------------------------------
+// Accessor methods for axiomatic categories
+// -------------------------------------------------------------------
+World.prototype.getTypeCalledText = function() {
+  return this._typeCalledText;
+};
+
+World.prototype.getTypeCalledNumber = function() {
+  return this._typeCalledNumber;
+};
+
+World.prototype.getTypeCalledDate = function() {
+  return this._typeCalledDate;
+};
+
+World.prototype.getTypeCalledCheckMark = function() {
+  return this._typeCalledCheckMark;
+};
+
+World.prototype.getTypeCalledUrl = function() {
+  return this._typeCalledUrl;
+};
+
+World.prototype.getTypeCalledItem = function() {
+  return this._typeCalledItem;
+};
+
+World.prototype.getTypeCalledAnything = function() {
+  return this._typeCalledAnything;
+};
+
+
+
+// -------------------------------------------------------------------
 // Login and logout methods
 // -------------------------------------------------------------------
 
@@ -399,12 +465,12 @@
  * Attempts to login a user.
  *
  * @scope    public instance method
- * @param    inUser    The user to be logged in. 
- * @param    inAuthentication    Authentication info for the user. 
+ * @param    user    The user to be logged in. 
+ * @param    authentication    Authentication info for the user. 
  * @return   True if we were able to log in the user. False if the login failed.
  */
-World.prototype.login = function (inUser, inAuthentication) {
-  return this.__myVirtualServer.login(inUser, inAuthentication);
+World.prototype.login = function(user, authentication) {
+  return this._virtualServer.login(user, authentication);
 };
 
 
@@ -414,8 +480,8 @@
  * @scope    public instance method
  * @return   True if the current user was logged out. False if there was no current user logged in.
  */
-World.prototype.logout = function () {
-  return this.__myVirtualServer.logout();
+World.prototype.logout = function() {
+  return this._virtualServer.logout();
 };
 
 
@@ -429,8 +495,8 @@
  * @scope    public instance method
  * @return   A list of items that represent users.
  */
-World.prototype.getUsers = function () {
-  var listOfUsers = this.__myVirtualServer.getUsers();
+World.prototype.getUsers = function() {
+  var listOfUsers = this._virtualServer.getUsers();
   return this._getFilteredList(listOfUsers);
 };
 
@@ -441,8 +507,8 @@
  * @scope    public instance method
  * @return   An item representing the user who is currently logged in.
  */
-World.prototype.getCurrentUser = function () {
-  return this.__myVirtualServer.getCurrentUser();
+World.prototype.getCurrentUser = function() {
+  return this._virtualServer.getCurrentUser();
 };
 
 
@@ -450,15 +516,15 @@
  * Creates a new item, where the new item represents a user of this datastore.
  *
  * @scope    public instance method
- * @param    inName    A string, which will be assigned to the name attribute of the new item. 
- * @param    inAuthentication    A string which will be used as the login password for the user. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    name    A string, which will be assigned to the name attribute of the new item. 
+ * @param    authentication    A string which will be used as the login password for the user. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item representing a user.
  * @throws   Throws an Error if a user is logged in.
  */
-World.prototype.newUser = function (inName, inAuthentication, inObserver) {
+World.prototype.newUser = function(name, authentication, observer) {
   this.beginTransaction();
-  var newUser = this.__myVirtualServer.newUser(inName, inAuthentication, inObserver);
+  var newUser = this._virtualServer.newUser(name, authentication, observer);
   this.endTransaction();
   return newUser;
 };
@@ -472,14 +538,14 @@
  * Returns a newly created item.
  *
  * @scope    public instance method
- * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    name    Optional. A string, which will be assigned to the name attribute of the new item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item.
  * @throws   Throws an Error if no user is logged in.
  */
-World.prototype.newItem = function (inName, inObserver) {
+World.prototype.newItem = function(name, observer) {
   this.beginTransaction();
-  var item = this.__myVirtualServer.newItem(inName, inObserver);
+  var item = this._virtualServer.newItem(name, observer);
   this.endTransaction();
   return item;
 };
@@ -493,12 +559,12 @@
  * an entry is set for one of the item's attributes.
  *
  * @scope    public instance method
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created provisional item.
  * @throws   Throws an Error if no user is logged in.
  */
-World.prototype.newProvisionalItem = function (inObserver) {
-  return this.__myVirtualServer.newProvisionalItem(inObserver);
+World.prototype.newProvisionalItem = function(observer) {
+  return this._virtualServer.newProvisionalItem(observer);
 };
 
 
@@ -506,10 +572,10 @@
  * Records the fact that a provisional item just became real.
  *
  * @scope    package instance method
- * @param    inItem    The item that was provisional and just became real. 
+ * @param    item    The item that was provisional and just became real. 
  */
-World.prototype._provisionalItemJustBecameReal = function (inItem) {
-  this.__myVirtualServer._provisionalItemJustBecameReal(inItem);
+World.prototype._provisionalItemJustBecameReal = function(item) {
+  this._virtualServer._provisionalItemJustBecameReal(item);
 };
 
 
@@ -517,14 +583,14 @@
  * Returns a newly created item representing an attribute.
  *
  * @scope    public instance method
- * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    name    Optional. A string, which will be assigned to the name attribute of the new item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item representing an attribute.
  * @throws   Throws an Error if no user is logged in.
  */
-World.prototype.newAttribute = function (inName, inObserver) {
+World.prototype.newAttribute = function(name, observer) {
   this.beginTransaction();
-  var item = this.__myVirtualServer.newItem(inName, inObserver);
+  var item = this._virtualServer.newItem(name, observer);
   var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledAttribute = this.getCategoryCalledAttribute();
   item.addEntryForAttribute(attributeCalledCategory, categoryCalledAttribute);
@@ -537,14 +603,14 @@
  * Returns a newly created item representing a category.
  *
  * @scope    public instance method
- * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    name    Optional. A string, which will be assigned to the name attribute of the new item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item representing a category.
  * @throws   Throws an Error if no user is logged in.
  */
-World.prototype.newCategory = function (inName, inObserver) {
+World.prototype.newCategory = function(name, observer) {
   this.beginTransaction();
-  var item = this.__myVirtualServer.newItem(inName, inObserver);
+  var item = this._virtualServer.newItem(name, observer);
   var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledCategory = this.getCategoryCalledCategory();
   item.addEntryForAttribute(attributeCalledCategory, categoryCalledCategory);
@@ -557,25 +623,27 @@
  * Returns a newly created item representing a query.
  *
  * @scope    public instance method
- * @param    inCategory    Optional. A category item, or an array of category items. 
+ * @param    category    Optional. A category item, or an array of category items. 
  * @return   A newly created item representing a query.
  */
-World.prototype.newQueryForItemsByCategory = function (inCategory) {
+World.prototype.newQueryForItemsByCategory = function(categoryOrListOfCategories) {
   this.beginTransaction();
-  var item = this.__myVirtualServer.newItem("A query");
+  var item = this._virtualServer.newItem("A query");
   var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledQuery = this.getCategoryCalledQuery();
   item.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
 
   var attributeCalledQueryMatchingCategory = this.getAttributeCalledQueryMatchingCategory();
-  if (inCategory) {
-    if (inCategory instanceof Item) {
-      item.addEntryForAttribute(attributeCalledQueryMatchingCategory, inCategory);
+  var category;
+  if (categoryOrListOfCategories) {
+    if (categoryOrListOfCategories instanceof Item) {
+      category = categoryOrListOfCategories;
+      item.addEntryForAttribute(attributeCalledQueryMatchingCategory, category);
     }
-    if (Util.isArray(inCategory)) {
-      var listOfCategories = inCategory;
+    if (Util.isArray(categoryOrListOfCategories)) {
+      var listOfCategories = categoryOrListOfCategories;
       for (var key in listOfCategories) {
-        var category = listOfCategories[key];
+        category = listOfCategories[key];
         item.addEntryForAttribute(attributeCalledQueryMatchingCategory, category);
       }
     }
@@ -590,23 +658,23 @@
  * Returns a newly created item representing a query.
  *
  * @scope    public instance method
- * @param    inItems    Optional. An item, or an array of items. 
+ * @param    itemOrListOfItems    Optional. An item, or an array of items. 
  * @return   A newly created item representing a query.
  */
-World.prototype.newQueryForSpecificItems = function (inItems) {
+World.prototype.newQueryForSpecificItems = function(itemOrListOfItems) {
   this.beginTransaction();
-  var item = this.__myVirtualServer.newItem("A query");
+  var item = this._virtualServer.newItem("A query");
   var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledQuery = this.getCategoryCalledQuery();
   item.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
 
   var attributeCalledQueryMatchingItem = this.getAttributeCalledQueryMatchingItem();
-  if (inItems) {
-    if (inItems instanceof Item) {
-      item.addEntryForAttribute(attributeCalledQueryMatchingItem, inItems);
+  if (itemOrListOfItems) {
+    if (itemOrListOfItems instanceof Item) {
+      item.addEntryForAttribute(attributeCalledQueryMatchingItem, itemOrListOfItems);
     }
-    if (Util.isArray(inItems)) {
-      var listOfItems = inItems;
+    if (Util.isArray(itemOrListOfItems)) {
+      var listOfItems = itemOrListOfItems;
       for (var key in listOfItems) {
         var matchingItem = listOfItems[key];
         item.addEntryForAttribute(attributeCalledQueryMatchingItem, matchingItem);
@@ -623,14 +691,14 @@
  * Returns a newly created entry.
  *
  * @scope    public instance method
- * @param    inItemOrEntry    The item that this is a entry of, or the old entry that this entry is replacing. 
- * @param    inAttribute    The attribute that this entry is assigned to. May be null. 
- * @param    inValue    The value to initialize the entry with. 
+ * @param    itemOrEntry    The item that this is a entry of, or the old entry that this entry is replacing. 
+ * @param    attribute    The attribute that this entry is assigned to. May be null. 
+ * @param    value    The value to initialize the entry with. 
  * @return   A newly created entry.
  */
-World.prototype._newEntry = function (inItemOrEntry, inAttribute, inValue) {
+World.prototype._newEntry = function(itemOrEntry, attribute, value) {
   this.beginTransaction();
-  var entry = this.__myVirtualServer.newEntry(inItemOrEntry, inAttribute, inValue);
+  var entry = this._virtualServer.newEntry(itemOrEntry, attribute, value);
   this.endTransaction();
   return entry;
 };
@@ -640,13 +708,13 @@
  * Returns a newly created ordinal.
  *
  * @scope    protected instance method
- * @param    inIdentifiedRecord    The identifiedRecord that this is an ordinal for. 
- * @param    inOrdinalNumber    The ordinal number itself. 
+ * @param    identifiedRecord    The identifiedRecord that this is an ordinal for. 
+ * @param    ordinalNumber    The ordinal number itself. 
  * @return   A newly created ordinal.
  */
-World.prototype._newOrdinal = function (inIdentifiedRecord, inOrdinalNumber) {
+World.prototype._newOrdinal = function(identifiedRecord, ordinalNumber) {
   this.beginTransaction();
-  var ordinal = this.__myVirtualServer.newOrdinal(inIdentifiedRecord, inOrdinalNumber);
+  var ordinal = this._virtualServer.newOrdinal(identifiedRecord, ordinalNumber);
   this.endTransaction();
   return ordinal;
 };
@@ -656,13 +724,13 @@
  * Returns a newly created vote.
  *
  * @scope    protected instance method
- * @param    inIdentifiedRecord    The identifiedRecord to attach this vote to. 
- * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
+ * @param    identifiedRecord    The identifiedRecord to attach this vote to. 
+ * @param    retainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  * @return   A newly created vote.
  */
-World.prototype._newVote = function (inIdentifiedRecord, inRetainFlag) {
+World.prototype._newVote = function(identifiedRecord, retainFlag) {
   this.beginTransaction();
-  var vote = this.__myVirtualServer.newVote(inIdentifiedRecord, inRetainFlag);
+  var vote = this._virtualServer.newVote(identifiedRecord, retainFlag);
   this.endTransaction();
   return vote;
 };
@@ -672,12 +740,12 @@
  * Given a UUID, returns the item identified by that UUID.
  *
  * @scope    public instance method
- * @param    inUuid    The UUID of the item to be returned. 
- * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
+ * @param    uuid    The UUID of the item to be returned. 
+ * @param    observer    Optional. An object to be registered as an observer of the returned item. 
  * @return   The item identified by the given UUID.
  */
-World.prototype.getItemFromUuid = function (inUuid, inObserver) {
-  return (this.__myVirtualServer.getItemFromUuid(inUuid, inObserver));
+World.prototype.getItemFromUuid = function(uuid, observer) {
+  return (this._virtualServer.getItemFromUuid(uuid, observer));
 };
 
 
@@ -690,13 +758,13 @@
  * match the query criteria.
  *
  * @scope    public instance method
- * @param    inQuery    A query item. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    query    A query item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A list of items.
  */
-World.prototype.getResultItemsForQuery = function (inQuery, inObserver) {
-  var listOfItems = this.__myVirtualServer.getResultItemsForQuery(inQuery);
-  this.__addListObserver(listOfItems, inObserver);
+World.prototype.getResultItemsForQuery = function(query, observer) {
+  var listOfItems = this._virtualServer.getResultItemsForQuery(query);
+  this.__addListObserver(listOfItems, observer);
   return listOfItems;
 };
 
@@ -707,12 +775,12 @@
  * included in query result list.
  *
  * @scope    public instance method
- * @param    inItem    An item, which will be modified so that it matches the query. 
- * @param    inQuery    A query item. 
+ * @param    item    An item, which will be modified so that it matches the query. 
+ * @param    query    A query item. 
  * @throws   Throws an Error if no user is logged in.
  */
-World.prototype.setItemToBeIncludedInQueryResultList = function (inItem, inQuery) {
-  this.__myVirtualServer.setItemToBeIncludedInQueryResultList(inItem, inQuery);
+World.prototype.setItemToBeIncludedInQueryResultList = function(item, query) {
+  this._virtualServer.setItemToBeIncludedInQueryResultList(item, query);
 };
 
 
@@ -721,13 +789,13 @@
  * assigned to that category.
  *
  * @scope    public instance method
- * @param    inCategory    A category item. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    category    A category item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A list of items.
  */
-World.prototype.getItemsInCategory = function (inCategory, inObserver) {
-  var listOfItems = this.__myVirtualServer.getItemsInCategory(inCategory);
-  this.__addListObserver(listOfItems, inObserver);
+World.prototype.getItemsInCategory = function(category, observer) {
+  var listOfItems = this._virtualServer.getItemsInCategory(category);
+  this.__addListObserver(listOfItems, observer);
   return listOfItems;
 };
 
@@ -738,8 +806,8 @@
  * @scope    public instance method
  * @return   A list of items that represent categories.
  */
-World.prototype.getCategories = function () {
-  var listOfCategories = this.__myVirtualServer.getCategories();
+World.prototype.getCategories = function() {
+  var listOfCategories = this._virtualServer.getCategories();
   return this._getFilteredList(listOfCategories);
 };
 
@@ -758,28 +826,28 @@
  * of the query should be notified.
  *
  * @scope    private instance method
- * @param    inList    The list of items to be observed. 
- * @param    inObserver    An object or method to be registered as an observer of the item. 
+ * @param    listOfItems    The list of items to be observed. 
+ * @param    observer    An object or method to be registered as an observer of the item. 
  */
-World.prototype.__addListObserver = function (inList, inObserver) {
+World.prototype.__addListObserver = function(listOfItems, observer) {
   var observerWasAdded = false;
-  if (!inObserver) {
+  if (!observer) {
     return observerWasAdded;
   }
   var weNeedToMakeANewTupleForThisList = true;
-  var listOfTuples = this.__myListOfListObserverTuples;
+  var listOfTuples = this._listOfListObserverTuples;
   for (var key in listOfTuples) {
     var tuple = listOfTuples[key];
-    if (tuple[World.__TUPLE_KEY_LIST] == inList) {
+    if (tuple[World.__TUPLE_KEY_LIST] == listOfItems) {
       weNeedToMakeANewTupleForThisList = false;
       var setOfObservers = tuple[World.__TUPLE_KEY_OBSERVERS];
-      observerWasAdded = Util.addObjectToSet(inObserver, setOfObservers);
+      observerWasAdded = Util.addObjectToSet(observer, setOfObservers);
     }
   }
   if (weNeedToMakeANewTupleForThisList) {
     var newTuple = {};
-    newTuple[World.__TUPLE_KEY_LIST] = inList;
-    newTuple[World.__TUPLE_KEY_OBSERVERS] = [inObserver];
+    newTuple[World.__TUPLE_KEY_LIST] = listOfItems;
+    newTuple[World.__TUPLE_KEY_OBSERVERS] = [observer];
     listOfTuples.push(newTuple);
     observerWasAdded = true;
   }
@@ -792,17 +860,17 @@
  * the observer will no longer be notified when items in the list change.
  *
  * @scope    public instance method
- * @param    inList    The list of items that was being observed. 
- * @param    inObserver    The object or method to be removed from the set of observers. 
+ * @param    listOfItems    The list of items that was being observed. 
+ * @param    observer    The object or method to be removed from the set of observers. 
  */
-World.prototype.removeListObserver = function (inList, inObserver) {
+World.prototype.removeListObserver = function(listOfItems, observer) {
   var observerWasRemoved = false;
-  var listOfTuples = this.__myListOfListObserverTuples;
+  var listOfTuples = this._listOfListObserverTuples;
   for (var key in listOfTuples) {
     var tuple = listOfTuples[key];
-    if (tuple[World.__TUPLE_KEY_LIST] == inList) {
+    if (tuple[World.__TUPLE_KEY_LIST] == listOfItems) {
       var setOfObservers = tuple[World.__TUPLE_KEY_OBSERVERS];
-      observerWasRemoved = Util.removeObjectFromSet(inObserver, setOfObservers);
+      observerWasRemoved = Util.removeObjectFromSet(observer, setOfObservers);
     }
   }
   return observerWasRemoved;
@@ -814,16 +882,16 @@
  * the observer will be notified when the item changes.
  *
  * @scope    public instance method
- * @param    inItem    The item to be observed. 
- * @param    inObserver    An object or method to be registered as an observer of the item. 
+ * @param    item    The item to be observed. 
+ * @param    observer    An object or method to be registered as an observer of the item. 
  */
-World.prototype.addItemObserver = function (inItem, inObserver) {
-  var observerList = this.__myHashTableOfObserverListsKeyedByItemUuid[inItem._getUuid()];
+World.prototype.addItemObserver = function(item, observer) {
+  var observerList = this._hashTableOfObserverListsKeyedByItemUuid[item._getUuid()];
   if (!observerList) {
     observerList = [];
-    this.__myHashTableOfObserverListsKeyedByItemUuid[inItem._getUuid()] = observerList;
+    this._hashTableOfObserverListsKeyedByItemUuid[item._getUuid()] = observerList;
   }
-  var observerWasAdded = Util.addObjectToSet(inObserver, observerList);
+  var observerWasAdded = Util.addObjectToSet(observer, observerList);
   return observerWasAdded;
 };
 
@@ -833,14 +901,14 @@
  * that the observer will no longer be notified when the item changes.
  *
  * @scope    public instance method
- * @param    inItem    The item that was being observed. 
- * @param    inObserver    The object or method to be removed from the set of observers. 
+ * @param    item    The item that was being observed. 
+ * @param    observer    The object or method to be removed from the set of observers. 
  */
-World.prototype.removeItemObserver = function (inItem, inObserver) {
+World.prototype.removeItemObserver = function(item, observer) {
   var observerWasRemoved = false;
-  var observerList = this.__myHashTableOfObserverListsKeyedByItemUuid[inItem._getUuid()];
+  var observerList = this._hashTableOfObserverListsKeyedByItemUuid[item._getUuid()];
   if (observerList) {
-    observerWasRemoved = Util.removeObjectFromSet(inObserver, observerList);
+    observerWasRemoved = Util.removeObjectFromSet(observer, observerList);
   } 
   return observerWasRemoved;
 };

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 03:56:11 UTC (rev 110)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 06:16:32 UTC (rev 111)
@@ -37,12 +37,6 @@
       "timestamp": "1114819457203" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Section
-           "uuid": "00000300-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457203" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // Query
            "uuid": "00000106-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
@@ -67,10 +61,10 @@
       "timestamp": "1114819457234" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Plugin Name
-           "uuid": "00000400-ce7f-11d9-8cd5-0011113ae5d6",
+  { "Item": {                             // Expected Type
+           "uuid": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457240" }
+      "timestamp": "1114819457234" }
   },
   // -----------------------------------------------------------------------
   { "Item": {                             // Attribute
@@ -85,24 +79,84 @@
       "timestamp": "1114819457250" }
   },
   // -----------------------------------------------------------------------
+  { "Item": {                             // Query
+           "uuid": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Type
+           "uuid": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Text
+           "uuid": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Number
+           "uuid": "00000121-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Date
+           "uuid": "00000122-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Check Mark
+           "uuid": "00000123-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // URL
+           "uuid": "00000124-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Item
+           "uuid": "00000125-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Anything
+           "uuid": "00000126-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457281" }
+  },
+  // -----------------------------------------------------------------------
   { "Item": {                             // Page
            "uuid": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457265" }
+      "timestamp": "1114819457282" }
   },
   // -----------------------------------------------------------------------
   { "Item": {                             // Section
-           "uuid": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
+           "uuid": "00000300-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457265" }
+      "timestamp": "1114819457300" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Query
-           "uuid": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
+  { "Item": {                             // Plugin Name
+           "uuid": "00000400-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
+      "timestamp": "1114819457301" }
   },
   // -----------------------------------------------------------------------
+  { "Item": {                             // Section
+           "uuid": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457265" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Amy ex machina
            "uuid": "1471",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -130,6 +184,15 @@
       "timestamp": "1114819457312" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Text
+           "uuid": "1473888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Short Name
            "uuid": "1474",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -148,6 +211,15 @@
       "timestamp": "1114819457343" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Text
+           "uuid": "1475888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
+          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Summary
            "uuid": "1476",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -166,6 +238,15 @@
       "timestamp": "1114819457359" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Text
+           "uuid": "1477888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
+          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Body
            "uuid": "1478",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -184,6 +265,15 @@
       "timestamp": "1114819457390" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Text
+           "uuid": "1479888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000104-ce7f-11d9-8cd5-0011113ae5d6",                // Body
+          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Category
            "uuid": "1480",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -202,24 +292,15 @@
       "timestamp": "1114819457406" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "1482",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-          "value": { "type": "StringValue", "value": "Section" },
+  { "Entry": {                             // Category
+           "uuid": "1481888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457421" }
+      "timestamp": "1114819457312" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1483",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457437" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Query
            "uuid": "1484",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -238,6 +319,15 @@
       "timestamp": "1114819457453" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Query
+           "uuid": "1485888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
+          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Matching Category
            "uuid": "1486",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -256,6 +346,15 @@
       "timestamp": "1114819457484" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "1487888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Matching Item
            "uuid": "1488",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -274,6 +373,15 @@
       "timestamp": "1114819457500" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Item
+           "uuid": "1489888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
+          "value": { "type": "RelatedUuid", "value": "00000130-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Unfiled Entry
            "uuid": "1490",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -292,24 +400,51 @@
       "timestamp": "1114819457531" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Plugin Name
-           "uuid": "1469",
+  { "Entry": {                             // Anything
+           "uuid": "14891888",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "00000109-ce7f-11d9-8cd5-0011113ae5d6",                // Unfiled Entry
+          "value": { "type": "RelatedUuid", "value": "00000140-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Expected Type
+           "uuid": "88803",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-          "value": { "type": "StringValue", "value": "Plugin Name" },
+           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+          "value": { "type": "StringValue", "value": "Expected Type" },
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457537" }
+      "timestamp": "1114819457515" }
   },
   // -----------------------------------------------------------------------
   { "Entry": {                             // Attribute
-           "uuid": "1470",
+           "uuid": "88804",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
           "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457543" }
+      "timestamp": "1114819457531" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88804007",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "88804008",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457312" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Attribute
            "uuid": "1492",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -346,6 +481,173 @@
       "timestamp": "1114819457578" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Query
+           "uuid": "1500",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
+          "value": { "type": "StringValue", "value": "Query" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "1501",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000113-ce7f-11d9-8cd5-0011113ae5d6",                // Type
+          "value": { "type": "StringValue", "value": "Type" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "88802",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000113-ce7f-11d9-8cd5-0011113ae5d6",                // Type
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+
+  
+  
+  
+  
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Text
+           "uuid": "88801200",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000120-ce7f-11d9-8cd5-0011113ae5d6",                // Text
+          "value": { "type": "StringValue", "value": "Text" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801201",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000120-ce7f-11d9-8cd5-0011113ae5d6",                // Text
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Number
+           "uuid": "88801210",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000121-ce7f-11d9-8cd5-0011113ae5d6",                // Number
+          "value": { "type": "StringValue", "value": "Number" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801211",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000121-ce7f-11d9-8cd5-0011113ae5d6",                // Number
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Date
+           "uuid": "88801220",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000122-ce7f-11d9-8cd5-0011113ae5d6",                // Date
+          "value": { "type": "StringValue", "value": "Date" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801221",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000122-ce7f-11d9-8cd5-0011113ae5d6",                // Date
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Check Mark
+           "uuid": "88801230",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000123-ce7f-11d9-8cd5-0011113ae5d6",                // Check Mark
+          "value": { "type": "StringValue", "value": "Check Mark" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801231",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000123-ce7f-11d9-8cd5-0011113ae5d6",                // Check Mark
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // URL
+           "uuid": "88801240",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000124-ce7f-11d9-8cd5-0011113ae5d6",                // URL
+          "value": { "type": "StringValue", "value": "URL" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801241",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000124-ce7f-11d9-8cd5-0011113ae5d6",                // URL
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Item
+           "uuid": "88801300",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000130-ce7f-11d9-8cd5-0011113ae5d6",                // Item
+          "value": { "type": "StringValue", "value": "Item" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801301",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000130-ce7f-11d9-8cd5-0011113ae5d6",                // Item
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Anything
+           "uuid": "88801400",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000140-ce7f-11d9-8cd5-0011113ae5d6",                // Anything
+          "value": { "type": "StringValue", "value": "Anything" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457640" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Type
+           "uuid": "88801401",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000140-ce7f-11d9-8cd5-0011113ae5d6",                // Anything
+          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457656" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Page
            "uuid": "1496",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
@@ -365,39 +667,57 @@
   },
   // -----------------------------------------------------------------------
   { "Entry": {                             // Section
-           "uuid": "1498",
+           "uuid": "1482",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
+           "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
           "value": { "type": "StringValue", "value": "Section" },
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457625" }
+      "timestamp": "1114819457421" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1499",
+  { "Entry": {                             // Attribute
+           "uuid": "1483",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
+          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457625" }
+      "timestamp": "1114819457437" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "1500",
+  { "Entry": {                             // Plugin Name
+           "uuid": "1469",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-          "value": { "type": "StringValue", "value": "Query" },
+           "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+          "value": { "type": "StringValue", "value": "Plugin Name" },
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
+      "timestamp": "1114819457537" }
   },
   // -----------------------------------------------------------------------
+  { "Entry": {                             // Attribute
+           "uuid": "1470",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457543" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Section
+           "uuid": "1498",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
+          "value": { "type": "StringValue", "value": "Section" },
+      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
+      "timestamp": "1114819457625" }
+  },
+  // -----------------------------------------------------------------------
   { "Entry": {                             // Category
-           "uuid": "1501",
+           "uuid": "1499",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
+           "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
           "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
+      "timestamp": "1114819457625" }
   },
   // -----------------------------------------------------------------------
   { "Item": {                             // Guest



From skinner at sheep.berlios.de  Thu Jun  2 08:34:02 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 2 Jun 2005 08:34:02 +0200
Subject: [openrecord-svn] r112 - trunk/source
Message-ID: <200506020634.j526Y2Lw001731@sheep.berlios.de>

Author: skinner
Date: 2005-06-02 08:34:00 +0200 (Thu, 02 Jun 2005)
New Revision: 112

Modified:
   trunk/source/SectionView.js
   trunk/source/base_style.css
Log:
An early experiment with a new look for the SectionView editing controls.

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-02 06:16:32 UTC (rev 111)
+++ trunk/source/SectionView.js	2005-06-02 06:34:00 UTC (rev 112)
@@ -249,10 +249,14 @@
     this.mySection.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
   View.createAndAppendElement(outerDiv, "p");
 
-  // create the plugin editing controls, if we're in edit mode
+  // create the editing controls, if we're in edit mode
+  var controlArea = View.createAndAppendElement(outerDiv, "p", RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL);
+  var textShowMeA = document.createTextNode("Show me a ");
+  controlArea.appendChild(textShowMeA);
+
   // PENDING: We shouldn't call the private method _getUuid()
   var selectMenuId = SectionView.ELEMENT_ID_SELECT_MENU_PREFIX + this.mySection._getUuid();
-  var selectElement = View.createAndAppendElement(outerDiv, "select", RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL, selectMenuId);
+  var selectElement = View.createAndAppendElement(controlArea, "select", null, selectMenuId);
   var optionElement;
   var listener;
   selectElement.setAttribute("name", selectMenuId);
@@ -266,9 +270,12 @@
     Util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
     optionElement.innerHTML = pluginName;
   }
+  
+  var textOf = document.createTextNode(" of ");
+  controlArea.appendChild(textOf);
 
   if (isCategoryMatchingQuery || isEmptyQuery) {
-    var querySelectElement = View.createAndAppendElement(outerDiv, "select", RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL);
+    var querySelectElement = View.createAndAppendElement(controlArea, "select");
     var listOfCategories = this.getWorld().getCategories();
     for (var key in listOfCategories) {
       var category = listOfCategories[key];
@@ -279,8 +286,14 @@
       Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
       optionElement.innerHTML = category.getDisplayName();
     }
+  } else {
+    var textTheGiven = document.createTextNode(" the given");
+    controlArea.appendChild(textTheGiven);
   }
 
+  var textItems = document.createTextNode(" items.");
+  controlArea.appendChild(textItems);
+
   // create a div element for the plugin class to use
   this._myPluginDiv = View.createAndAppendElement(outerDiv, "div");
   this._myPlugin = this.getPluginFromPluginName(selectedPluginName, this._myPluginDiv);

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-06-02 06:16:32 UTC (rev 111)
+++ trunk/source/base_style.css	2005-06-02 06:34:00 UTC (rev 112)
@@ -233,6 +233,7 @@
 }
 
 div.editmode .edit_mode_only_control {
+  background-color: rgb(100%, 100%, 40%);
   display: block;
 }
 



From chaolam at sheep.berlios.de  Thu Jun  2 20:22:08 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 2 Jun 2005 20:22:08 +0200
Subject: [openrecord-svn] r113 - trunk/documentation
Message-ID: <200506021822.j52IM8Z8008555@sheep.berlios.de>

Author: chaolam
Date: 2005-06-02 20:22:08 +0200 (Thu, 02 Jun 2005)
New Revision: 113

Modified:
   trunk/documentation/release_planning.txt
Log:
working on add a new section

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-02 06:34:00 UTC (rev 112)
+++ trunk/documentation/release_planning.txt	2005-06-02 18:22:08 UTC (rev 113)
@@ -86,9 +86,8 @@
 Brian  |   done   | 2   ied | Convert UI code to use new data model
        |  High    |         | UI for entering a number literal (instead of a string literal) in a table
        |  High    |         | UI for entering references to categories or to other items
-       | Medium   |         | UI for adding a new section to a page
+Chao   | Medium   |0.5 ied  | UI for adding a new section to a page
        | Medium   |         | UI for editing the query that a section uses
-       | Medium   |         | UI for editing the query that a section uses
        | Medium   |         | Verify/fix the bug that happens when you call the PHP server code with no POST data
 Brian  |   done   | 0   ied | Replace the Edit/Save button with a Lock/Unlock UI; automatically save changes as they happen
 Brian  |   done   | 1   ied | Replace the BigLumpVirtualServer with an DeltaVirtualServer; Change PHP code to append to the data file



From skinner at sheep.berlios.de  Thu Jun  2 21:04:40 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 2 Jun 2005 21:04:40 +0200
Subject: [openrecord-svn] r114 - in trunk/source: . model repositories/demo_page
Message-ID: <200506021904.j52J4eeb013354@sheep.berlios.de>

Author: skinner
Date: 2005-06-02 21:04:37 +0200 (Thu, 02 Jun 2005)
New Revision: 114

Modified:
   trunk/source/MultiEntriesView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/base_style.css
   trunk/source/model/Item.js
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
New changes mostly for having expected data types for attributes, and having the table plugin look at the expected data types and decide when to offer suggestion boxes and when not to.

Modified: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-02 18:22:08 UTC (rev 113)
+++ trunk/source/MultiEntriesView.js	2005-06-02 19:04:37 UTC (rev 114)
@@ -45,6 +45,7 @@
 MultiEntriesView.SEPARATOR = " ? ";
 MultiEntriesView.SEPARATOR_COLOR = '#999999';
 
+
 /**
  * An instance of MultiEntriesView can be placed in any parent container View
  * to display and (if in edit mode) edit multi-lines of text
@@ -89,6 +90,9 @@
 };
 
 
+/**
+ *
+ */
 MultiEntriesView.prototype.noLongerProvisional = function() {
   Util.assert(this._entryViews.length == 1); // provisional item should only have one entry
   for (var i=0; i < this._entryViews.length; ++i) {
@@ -96,22 +100,35 @@
   }
 };
 
+
+/**
+ *
+ */
 MultiEntriesView.prototype.select = function(inSelectFirst) {
   var index = inSelectFirst ? 0 : this._entryViews.length - 1;
   this._entryViews[index].startEditing();
 };
 
+
+/**
+ *
+ */
 MultiEntriesView.prototype.setSuggestions = function(suggestionList) {
   for (var i=0; i < this._entryViews.length; ++i) {
     this._entryViews[i].setSuggestions(suggestionList);
   }
 };
 
+
+/**
+ *
+ */
 MultiEntriesView.prototype.setKeyPressFunction = function(keyPressFunction) {
   Util.assert(keyPressFunction instanceof Function);
   this._keyPressFunction = keyPressFunction;
 };
 
+
 /**
  * Sets a function to be used when onclick is called to the TextView
  *
@@ -123,6 +140,10 @@
   this._clickFunction = inClickFunction;
 };
 
+
+/**
+ *
+ */
 MultiEntriesView.prototype._handleClick = function(inEvent, inTextView) {
   if (this._clickFunction && this._clickFunction(inEvent, inTextView)) {
     return true;
@@ -130,6 +151,10 @@
   return false;
 };
 
+
+/**
+ *
+ */
 MultiEntriesView.prototype._handleOwnClick = function(inEvent) {
   var lastEntry = this._entryViews[this._entryViews.length-1];
   if (this._handleClick(inEvent, lastEntry)) {return true;}
@@ -137,6 +162,9 @@
 };
 
 
+/**
+ *
+ */
 MultiEntriesView.prototype._keyPressOnEditField = function(inEvent, inTextView) {
   Util.assert(inTextView instanceof TextView);
   var asciiValueOfKey = inEvent.keyCode;
@@ -170,6 +198,9 @@
 };
 
 
+/**
+ *
+ */
 MultiEntriesView.prototype._addEntryView = function(inEntry) {
   var spanElt = document.createElement("span");
   var aTextView = new TextView(this, spanElt, this._item, this._attribute, inEntry, this._className);
@@ -184,6 +215,10 @@
   return aTextView;
 };
 
+
+/**
+ *
+ */
 MultiEntriesView.prototype._addSeparator = function() {
   var spanElt = document.createElement("span");
   spanElt.appendChild(document.createTextNode(MultiEntriesView.SEPARATOR));
@@ -192,6 +227,7 @@
   return spanElt;
 };
 
+
 /**
  * Re-creates all the HTML for the MultiEntriesView, and hands the HTML to the 
  * browser to be re-drawn.

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-02 18:22:08 UTC (rev 113)
+++ trunk/source/SectionView.js	2005-06-02 19:04:37 UTC (rev 114)
@@ -106,6 +106,7 @@
   this._myPluginDiv = null;
   this._mySectionSummaryView = null;
   this._myHeaderView = null;
+  this._queryEditSpan = null;
 }
 
 
@@ -178,6 +179,7 @@
   return this.myListOfContentItems;
 };
 
+
 /**
  * Returns query associated to this section.
  *
@@ -190,6 +192,7 @@
   return (listOfEntries && listOfEntries[0]) ? listOfEntries[0].getValue() : null;
 };
 
+
 /**
  * Updates the HTML elements in this view to reflect any changes in 
  * the data, and tells the sub-views to refresh themselves too.
@@ -201,6 +204,7 @@
     this.doInitialDisplay();
   } else {
     // refresh the <h2> element with the value: this.mySection.getDisplayName();  
+    this._refreshQueryEditSpan();
     this._mySectionSummaryView.refresh();
     this._myPlugin.refresh();
     this._myHeaderView.refresh();
@@ -220,17 +224,7 @@
   }
   var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
   var selectedPluginName = this.mySection.getSingleStringValueFromAttribute(attributeCalledPluginName);
-  var attributeCalledQueryMatchingCategory = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var listOfMatchingCategories = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingCategory);
-  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
-  var selectedCategoryName = isCategoryMatchingQuery? listOfMatchingCategories[0].getValue().getDisplayName() : "no category selected";
-  var isEmptyQuery = false;
-  if (!isCategoryMatchingQuery) {
-    var attributeCalledQueryMatchingItem = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
-    var listOfMatchingItems = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingItem);
-    var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
-    isEmptyQuery = !isItemMatchingQuery;
-  }
+
   this.myListOfContentItems = this.getListOfContentItems();
   if (!this.myListOfContentItems) {
     return;
@@ -274,34 +268,64 @@
   var textOf = document.createTextNode(" of ");
   controlArea.appendChild(textOf);
 
+  this._queryEditSpan = View.createAndAppendElement(controlArea, "span");
+  // this._refreshQueryEditSpan();
+
+  var textItems = document.createTextNode(" items.");
+  controlArea.appendChild(textItems);
+
+  // create a div element for the plugin class to use
+  this._myPluginDiv = View.createAndAppendElement(outerDiv, "div");
+  this._myPlugin = this.getPluginFromPluginName(selectedPluginName, this._myPluginDiv);
+  this._myHasEverBeenDisplayedFlag = true;
+  this.refresh();
+};
+
+
+/**
+ * Re-creates all the HTML for the SectionView, and hands the HTML to the 
+ * browser to be re-drawn.
+ *
+ */
+SectionView.prototype._refreshQueryEditSpan = function () {
+  this._queryEditSpan.innerHTML = '';
+  
+  var attributeCalledQueryMatchingCategory = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
+  var listOfMatchingCategories = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingCategory);
+  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
+  var selectedCategoryName = isCategoryMatchingQuery ? listOfMatchingCategories[0].getValue().getDisplayName() : "no category selected";
+
+  var isEmptyQuery = false;
+  if (!isCategoryMatchingQuery) {
+    var attributeCalledQueryMatchingItem = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+    var listOfMatchingItems = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingItem);
+    var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
+    isEmptyQuery = !isItemMatchingQuery;
+  }
+  
   if (isCategoryMatchingQuery || isEmptyQuery) {
-    var querySelectElement = View.createAndAppendElement(controlArea, "select");
+    var listener = this; 
+    var querySelectElement = View.createAndAppendElement(this._queryEditSpan, "select");
     var listOfCategories = this.getWorld().getCategories();
+    var optionElement = View.createAndAppendElement(querySelectElement, "option");
+    optionElement.setAttribute("value", null);
+    Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
+    optionElement.innerHTML = "(none)";
     for (var key in listOfCategories) {
       var category = listOfCategories[key];
       optionElement = View.createAndAppendElement(querySelectElement, "option");
       optionElement.selected = (selectedCategoryName == category.getDisplayName());
       optionElement.setAttribute("value", category._getUuid());
-      listener = this; 
       Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
       optionElement.innerHTML = category.getDisplayName();
     }
   } else {
     var textTheGiven = document.createTextNode(" the given");
-    controlArea.appendChild(textTheGiven);
+    this._queryEditSpan.appendChild(textTheGiven);
   }
+};
 
-  var textItems = document.createTextNode(" items.");
-  controlArea.appendChild(textItems);
 
-  // create a div element for the plugin class to use
-  this._myPluginDiv = View.createAndAppendElement(outerDiv, "div");
-  this._myPlugin = this.getPluginFromPluginName(selectedPluginName, this._myPluginDiv);
-  this._myHasEverBeenDisplayedFlag = true;
-  this.refresh();
-};
-  
-
 // -------------------------------------------------------------------
 // Event handler methods
 // -------------------------------------------------------------------

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-02 18:22:08 UTC (rev 113)
+++ trunk/source/TablePlugin.js	2005-06-02 19:04:37 UTC (rev 114)
@@ -124,6 +124,7 @@
  * @scope    private instance method
  */
 TablePlugin.prototype._buildAttributeHash = function() {
+  var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var hashTableOfAttributes = {};
   var hashTableOfEntries = {};
@@ -138,20 +139,27 @@
         
         // build entries representing this attribute in this table 
         // PENDING we may only want to do this for certain attributes
-        if (!hashTableOfEntries[attributeKeyString]) {
-          hashTableOfEntries[attributeKeyString] = {};
-        }
         var itemEntries = contentItem.getEntriesForAttribute(attribute);
-        for (var entryKey in itemEntries) {
-          var entry = itemEntries[entryKey];
-          hashTableOfEntries[attributeKeyString][entry.getUniqueKeyString()] = entry;
+        if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
+          hashTableOfEntries[attributeKeyString] = this._getSuggestedItemsForAttribute(attribute);
+        } else {
+          if (!hashTableOfEntries[attributeKeyString]) {
+            hashTableOfEntries[attributeKeyString] = {};
+          }
+          for (var entryKey in itemEntries) {
+            var entry = itemEntries[entryKey];
+            hashTableOfEntries[attributeKeyString][entry.getUniqueKeyString()] = entry;
+          }
         }
       }
     }
   }
   
-  for (attributeKey in hashTableOfEntries) {
-    hashTableOfEntries[attributeKey] = Util.hashTableValues(hashTableOfEntries[attributeKey]);
+  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
+  } else {
+    for (attributeKey in hashTableOfEntries) {
+      hashTableOfEntries[attributeKey] = Util.hashTableValues(hashTableOfEntries[attributeKey]);
+    }
   }
   this._hashTableOfEntries = hashTableOfEntries;
   this._hashTableOfAttributes = hashTableOfAttributes;
@@ -164,6 +172,50 @@
 
 
 /**
+ *
+ */
+TablePlugin.prototype._getSuggestedItemsForAttribute = function(attribute) {
+  var listOfSuggestedItems = [];
+  var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
+  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
+    var key;
+    var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
+    var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+    var attributeCalledExpectedType = this.getWorld().getAttributeCalledExpectedType();
+    var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
+    var listOfCategories = [];
+    for (key in listOfExpectedTypeEntries) {
+      var expectedTypeEntry = listOfExpectedTypeEntries[key];
+      var expectedType = expectedTypeEntry.getValue();
+      if (expectedType.isInCategory(categoryCalledCategory)) {
+        listOfCategories.push(expectedType);
+      }
+      /* WRONG -- DELETE ME
+      var listOfCategoryEntriesForExpectedType = expectedType.getEntriesForAttribute(attributeCalledCategory);
+      var categoryEntryForExpectedType = listOfCategoryEntriesForExpectedType[0]; // PENDING: should look at whole list, not just element 0
+      var categoryForExpectedType = categoryEntryForExpectedType.getValue();
+      if (categoryForExpectedType.isInCategory(categoryCalledCategory)) {
+        listOfCategories.push(categoryForExpectedType);
+      }
+      */
+    }
+    for (key in listOfCategories) {
+      var category = listOfCategories[key];
+      var listOfItems = this.getWorld().getItemsInCategory(category);
+      for (keyToo in listOfItems) {
+        var item = listOfItems[keyToo];
+        Util.addObjectToSet(item, listOfSuggestedItems);
+      }
+    }
+  }
+  if (listOfSuggestedItems.length === 0) {
+    listOfSuggestedItems = null;
+  }
+  return listOfSuggestedItems;
+};
+
+
+/**
  * Inserts a table row at rowNum given contentItem
  *
  * @scope    private instance method
@@ -178,6 +230,7 @@
   return aRow;
 };
 
+
 /**
  * Constructs the table body 
  *
@@ -198,6 +251,10 @@
   }
 };
 
+
+/**
+ *
+ */
 TablePlugin.prototype.observedItemHasChanged = function(item) {
   // called when a provisional item becomes a real item
   item.removeObserver(this); //now that provisional item is real, we stop observing it
@@ -216,6 +273,7 @@
   var aRow = this._insertRow(newItem, this._listOfItems.length+1, true);
 };
 
+
 /**
  * Constructs the table header 
  *
@@ -232,7 +290,8 @@
     var headerStr = attribute.getDisplayName();
     aCell.appendChild(document.createTextNode(headerStr));
     if (this._sortAttribute == attribute) {
-      aCell.appendChild(this.getSortIcon());}
+      aCell.appendChild(this.getSortIcon());
+    }
     aCell.onclick = this.clickOnHeader.bindAsEventListener(this, attribute);
     
     headerRow.appendChild(aCell);
@@ -314,7 +373,7 @@
 TablePlugin.prototype._insertCell = function(row, col, item, attribute) {
   var aCell = row.insertCell(col);
   aCell.className = this.myCellClass;
-  var multiEntriesView = new MultiEntriesView(this, aCell, item,attribute, this.myCellClass);
+  var multiEntriesView = new MultiEntriesView(this, aCell, item, attribute, this.myCellClass);
   aCell.or_entriesView = multiEntriesView;
   multiEntriesView.refresh();
   if (this.isInEditMode()) {

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-02 18:22:08 UTC (rev 113)
+++ trunk/source/TextView.js	2005-06-02 19:04:37 UTC (rev 114)
@@ -78,11 +78,15 @@
   this._proxyOnKeyFunction = null;
   
   this._isProvisional = inItem.isProvisional();
-  if (this._isProvisional) {this._provisionalText = inAttribute.getDisplayName();}
-  
+  if (this._isProvisional) {
+    this._provisionalText = inAttribute.getDisplayName();
+  }
 }
 
 
+/**
+ *
+ */
 TextView.prototype._setupSuggestionBox = function() {
   if (this._suggestions) {
     var suggestionBox = new AttributeSuggestionBox(this._editField, this._suggestions);
@@ -90,10 +94,15 @@
   }
 };
 
+
+/**
+ *
+ */
 TextView.prototype.setSuggestions = function(suggestionList) {
   this._suggestions = suggestionList;
 };
 
+
 /**
  * Updates the HTML elements in this view to reflect any changes in 
  * the item's attribute values.
@@ -106,7 +115,7 @@
   } else {
   // if (weHaveBeenNotifiedOfChangesTo(this._item)) {
   //   var newText = getNewValueFrom(this._item);
-  //   this.textNode.data = newText;
+  //   this._textNode.data = newText;
   // }
   }
 };
@@ -128,8 +137,8 @@
     this._oldColor = htmlElement.style.color;
     htmlElement.style.color = TextView.PROVISIONAL_COLOR;
   }
-  this.textNode = document.createTextNode(textString);
-  htmlElement.appendChild(this.textNode);
+  this._textNode = document.createTextNode(textString);
+  htmlElement.appendChild(this._textNode);
 
   htmlElement.onclick =  this.onClick.bindAsEventListener(this);
     
@@ -160,13 +169,13 @@
       editField.onkeypress = this.onKeyPress.bindAsEventListener(this);
       editField.onkeyup = this.onKeyUp.bindAsEventListener(this);
       editField.onfocus = this.onFocus.bindAsEventListener(this);
-      editField.defaultValue = this._isProvisional ? '' : this.textNode.data;
+      editField.defaultValue = this._isProvisional ? '' : this._textNode.data;
     }
     //editField.style.width = this.getHTMLElement().offsetWidth + "px";    
     //editField.style.height = (this.getHTMLElement().offsetHeight) + "px";
     
     this._setupSuggestionBox();
-    this.getHTMLElement().replaceChild(editField, this.textNode);
+    this.getHTMLElement().replaceChild(editField, this._textNode);
     editField.select();
     //editField.focus();
     this._isEditing = true;
@@ -181,44 +190,60 @@
  */
 TextView.prototype.stopEditing = function() {
   if (this._isEditing) {
+    var newValue;
+    if (this._suggestionBox) {
+      newValue = this._suggestionBox.getSelectedItem();
+    }
+    if (!newValue) {
+      newValue = this._editField.value;
+    }
     var newText = this._editField.value;
-    var stillProvisional = this._isProvisional && newText === '';
+    var stillProvisional = this._isProvisional && !newValue;
     var htmlElement = this.getHTMLElement();
 
     this._isEditing = false;
 
-    if (this._suggestionBox) {this._suggestionBox._blurOnInputField();}
+    if (this._suggestionBox) {
+      this._suggestionBox._blurOnInputField();
+    }
     if (stillProvisional) {
-      newText = this._provisionalText;
+      newValue = this._provisionalText;
     }
-    this.textNode.data = newText;
+    var newValueDisplayString = "";
+    if (Util.isString(newValue)) {
+      newValueDisplayString = newValue;
+    }
+    if (newValue instanceof Item) {
+      newValueDisplayString = newValue.getDisplayName();
+    }
+    this._textNode.data = newValueDisplayString;
     this._suggestionBox = null;
-    this.getHTMLElement().replaceChild(this.textNode, this._editField);
+    this.getHTMLElement().replaceChild(this._textNode, this._editField);
 
-    // we need this _writeText() to be after all display related code, because this may trigger an observer call
-    if (!stillProvisional) { this._writeText(newText); }
+    // we need this _writeValue() to be after all display related code, because this may trigger an observer call
+    if (!stillProvisional) { this._writeValue(newValue); }
   }
 };
 
 
 /**
- * Writes edited text back into item entry of repository
+ * Writes edited value back into item entry of repository.
  *
  * @scope    private instance method
- * @param    inText    text to be written. 
+ * @param    value    The new value to be saved. 
  */
-TextView.prototype._writeText = function(inText) {
+TextView.prototype._writeValue = function(value) {
   if (this._entry) {
-    var oldText = this._entry.getDisplayString();
-    if (oldText != inText) {
-      this._entry = this._item.replaceEntry(this._entry,inText);
+    var oldValue = this._entry.getValue();
+    if (oldValue != value) {
+      this._entry = this._item.replaceEntry(this._entry, value);
     }
+  } else if (value) {
+    this._entry = this._item.addEntryForAttribute(this._attribute, value);
   }
-  else if (inText !== '') {
-    this._entry = this._item.addEntryForAttribute(this._attribute, inText);
-  }
 };
 
+
 /**
  * Returns text string for TextView to be displaying and editing
  *
@@ -230,6 +255,7 @@
   return '';
 };
 
+
 /**
  * Restores the original text before this editing session
  *
@@ -242,6 +268,7 @@
   this._editField.select();
 };
 
+
 // -------------------------------------------------------------------
 // Event handler methods
 // -------------------------------------------------------------------
@@ -257,6 +284,7 @@
   this._clickFunction = inClickFunction;
 };
 
+
 /**
  * Called when the user clicks on the text.
  *
@@ -274,10 +302,17 @@
   }
 };
 
+
+/**
+ *
+ */
 TextView.prototype.onFocus = function(inEventObject) {
-  if (this._suggestionBox) {this._suggestionBox._focusOnInputField(inEventObject);}
+  if (this._suggestionBox) {
+    this._suggestionBox._focusOnInputField(inEventObject);
+  }
 };
 
+
 /**
  * Called when focus leaves the text view.
  *
@@ -296,16 +331,23 @@
  * Sets a function to be used when onkeypress is called to the TextView
  *
  * @scope    public instance method
- * @param    inEventObject    An event object. 
+ * @param    keyPressFunction    A function. 
  */
 TextView.prototype.setKeyPressFunction = function(keyPressFunction) {
   this._keyPressFunction = keyPressFunction;
 };
 
+
+/**
+ *
+ */
 TextView.prototype.onKeyUp = function(inEventObject) {
-  if (this._suggestionBox) {this._suggestionBox._keyPressOnInputField(inEventObject);}
+  if (this._suggestionBox) {
+    this._suggestionBox._keyPressOnInputField(inEventObject);
+  }
 };
 
+
 /**
  * Called when the user types in editField
  *
@@ -363,11 +405,15 @@
   */
 };
 
+
+/**
+ *
+ */
 TextView.prototype.noLongerProvisional = function() {
   if (this._isProvisional) {
     this._isProvisional = false;
     this.getHTMLElement().style.color = this._oldColor;
-    // need to set line below because _writeText() hasn't returned an entry yet
+    // need to set line below because _writeValue() hasn't returned an entry yet
     this._entry = this._item.getSingleEntryFromAttribute(this._attribute); 
     this._buildView();
   }
@@ -376,10 +422,15 @@
 // -------------------------------------------------------------------
 // Suggestion box methods
 // -------------------------------------------------------------------
-function AttributeSuggestionBox(inHTMLInputField, inListOfEntries) {
+
+/**
+ *
+ */
+function AttributeSuggestionBox(inHTMLInputField, listOfItems) {
   this._myInputField = inHTMLInputField;
-  this._myListOfEntries = inListOfEntries.sort(AttributeSuggestionBox.compareEntryDisplayNames);
-
+  this._listOfSuggestedItems = listOfItems.sort(AttributeSuggestionBox._compareItemDisplayNames);
+  this._selectedItem = null;
+  
   this._myAttributeSuggestionBoxDivElement = document.createElement('div');
   // this._myAttributeSuggestionBoxDivElement.style.visibility = "hidden";
   this._myAttributeSuggestionBoxDivElement.style.zIndex = 11;
@@ -392,9 +443,21 @@
   //this._keyPressOnInputField();
 }
 
-AttributeSuggestionBox.compareEntryDisplayNames = function (inEntryOne, inEntryTwo) {
-  var displayNameOne = inEntryOne.getDisplayString();
-  var displayNameTwo = inEntryTwo.getDisplayString();
+
+/**
+ *
+ */
+AttributeSuggestionBox.prototype.getSelectedItem = function () {
+  return this._selectedItem;
+};
+
+
+/**
+ *
+ */
+AttributeSuggestionBox._compareItemDisplayNames = function (itemOne, itemTwo) {
+  var displayNameOne = itemOne.getDisplayName();
+  var displayNameTwo = itemTwo.getDisplayName();
   if (displayNameOne == displayNameTwo) {
     return 0;
   } else {
@@ -402,46 +465,64 @@
   }
 };
 
+
+/**
+ *
+ */
 AttributeSuggestionBox.prototype._focusOnInputField = function (inEventObject) {
   //this._myInputField.value = "";
   this._redisplayAttributeSuggestionBox();
 };
 
 
+/**
+ *
+ */
 AttributeSuggestionBox.prototype._keyPressOnInputField = function (inEventObject) {
   this._redisplayAttributeSuggestionBox();
 };
 
 
+/**
+ *
+ */
 AttributeSuggestionBox.prototype._blurOnInputField = function () {
   // make the suggestion box disappear
   this._myAttributeSuggestionBoxDivElement.style.display = "none";
 };
 
 
-AttributeSuggestionBox.prototype._clickOnSelection = function (inEventObject, inString) {
-  this._myInputField.value = inString;
+/**
+ *
+ */
+AttributeSuggestionBox.prototype._clickOnSelection = function (inEventObject, item) {
+  this._selectedItem = item;
+  this._myInputField.value = item.getDisplayName();  // PENDING: need to pass back the item, not a string
 };
 
 
+/**
+ *
+ */
 AttributeSuggestionBox.prototype._redisplayAttributeSuggestionBox = function () {
   var partialInputString = this._myInputField.value;
-  var listOfMatchingStrings = [];
+  var listOfMatchingItems = [];
   var key;
+  var item;
 
-  for (key in this._myListOfEntries) {
-    var entry = this._myListOfEntries[key];
-    var lowerCaseEntryString = entry.getDisplayString().toLowerCase();
+  for (key in this._listOfSuggestedItems) {
+    item = this._listOfSuggestedItems[key];
+    var lowerCaseEntryString = item.getDisplayName().toLowerCase();
     var lowerCaseInputString = partialInputString.toLowerCase();
     var numberOfCharactersToCompare = lowerCaseInputString.length;
     var shortEntryString = lowerCaseEntryString.substring(0, numberOfCharactersToCompare);
     if (shortEntryString == lowerCaseInputString) {
       // we have a match!
-      listOfMatchingStrings.push(entry.getDisplayString());
+      listOfMatchingItems.push(item);
     }
   }
 
-  if (listOfMatchingStrings.length === 0) {
+  if (listOfMatchingItems.length === 0) {
     // make the suggestion box disappear
     this._myAttributeSuggestionBoxDivElement.style.display = "none";
   } else {
@@ -449,13 +530,13 @@
     var table = document.createElement('table');
     var rowNumber = 0;
     var columnNumber = 0;
-    for (key in listOfMatchingStrings) {
-      var string = listOfMatchingStrings[key];
-      var textNode = document.createTextNode(string);
+    for (key in listOfMatchingItems) {
+      item = listOfMatchingItems[key];
+      var textNode = document.createTextNode(item.getDisplayName());
       var row = table.insertRow(rowNumber);
       var cell = row.insertCell(columnNumber);
       cell.appendChild(textNode);
-      cell.onmousedown = this._clickOnSelection.bindAsEventListener(this, string);
+      cell.onmousedown = this._clickOnSelection.bindAsEventListener(this, item);
       rowNumber += 1;
     }
     this._myAttributeSuggestionBoxDivElement.appendChild(table);

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-06-02 18:22:08 UTC (rev 113)
+++ trunk/source/base_style.css	2005-06-02 19:04:37 UTC (rev 114)
@@ -232,8 +232,11 @@
   float: right;
 }
 
+div.editmode p.edit_mode_only_control {
+  background-color: rgb(100%, 100%, 40%);
+}
+
 div.editmode .edit_mode_only_control {
-  background-color: rgb(100%, 100%, 40%);
   display: block;
 }
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-02 18:22:08 UTC (rev 113)
+++ trunk/source/model/Item.js	2005-06-02 19:04:37 UTC (rev 114)
@@ -396,8 +396,9 @@
   var listOfCategories = this.getEntriesForAttribute(attributeCategory);
   for (var key in listOfCategories) {
     var category = listOfCategories[key];
-    Util.assert(category instanceof Item);
-    returnString += "(" + category.getDisplayName() + ")";
+    if (category instanceof Item) {
+      returnString += "(" + category.getDisplayName() + ")";
+    }
   }
   returnString += " \"" + this.getDisplayName() + "\"" + "]";
   return returnString; 

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 18:22:08 UTC (rev 113)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 19:04:37 UTC (rev 114)
@@ -516,11 +516,6 @@
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
-
-  
-  
-  
-  
   // -----------------------------------------------------------------------
   { "Entry": {                             // Text
            "uuid": "88801200",
@@ -771,7 +766,7 @@
       "timestamp": "1114819457765" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Book
+  { "Item": {                             // Old Book
            "uuid": "3104",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819457781" }
@@ -933,72 +928,6 @@
       "timestamp": "1114819458062" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Make it possible to assign ...
-           "uuid": "4304",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Allow for entering number-v...
-           "uuid": "4305",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Have table mode show multi-...
-           "uuid": "4306",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // When you assign a value to ...
-           "uuid": "4307",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Clean up all the code that ...
-           "uuid": "4308",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458109" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to create new pages
-           "uuid": "4309",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to add a new sectio...
-           "uuid": "4310",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Observable queries: all ite...
-           "uuid": "4311",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Observable queries: limit r...
-           "uuid": "4312",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to edit the query o...
-           "uuid": "4313",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Make it possible to add new...
-           "uuid": "4314",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458171" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // Figure out how to declare d...
            "uuid": "4315",
       "userstamp": "1502",                // by (Guest)
@@ -1143,24 +1072,6 @@
       "timestamp": "1114819458437" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // All Items
-           "uuid": "6000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Items
-           "uuid": "6010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all items
-           "uuid": "6011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458468" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // JavaScript: The Definitive ...
            "uuid": "6012",
       "userstamp": "1502",                // by (Guest)
@@ -1371,7 +1282,7 @@
       "timestamp": "1114819459093" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6040",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "3011",                // Query for all books
@@ -1402,7 +1313,7 @@
            "uuid": "6043",
       "attribute": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
            "item": "3021",                // Query for one book
-          "value": { "type": "RelatedUuid", "value": "3205" },
+          "value": { "type": "RelatedUuid", "value": "bc9d5cce-99f7-42ad-85dc-36491cac46ba" },
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459171" }
   },
@@ -1410,22 +1321,22 @@
   { "Entry": {                             // Category
            "uuid": "6044",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3104",                // Book
+           "item": "3104",                // Old Book
           "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459203" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6045",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3104",                // Book
-          "value": { "type": "StringValue", "value": "Book" },
+           "item": "3104",                // Old Book
+          "value": { "type": "StringValue", "value": "Old Book" },
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459218" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6046",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3205",                // HTTP: The Definitive Guide
@@ -1524,7 +1435,7 @@
       "timestamp": "1114819459453" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6057",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3201",                // The Transparent Society
@@ -1569,7 +1480,7 @@
       "timestamp": "1114819459546" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6062",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3202",                // The Hobbit
@@ -1623,7 +1534,7 @@
       "timestamp": "1114819459656" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6068",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3203",                // The Wisdom of Crowds
@@ -1668,7 +1579,7 @@
       "timestamp": "1114819459765" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6073",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3204",                // Shrinking Violets and Caspa...
@@ -2236,204 +2147,6 @@
   },
   // -----------------------------------------------------------------------
   { "Entry": {                             // Feature
-           "uuid": "6136",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4304",                // Make it possible to assign ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make it possible to assign ...
-           "uuid": "6137",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4304",                // Make it possible to assign ...
-          "value": { "type": "StringValue", "value": "Make it possible to assign items to categories -- allow for entering reference-values, not just string-values" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6138",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4305",                // Allow for entering number-v...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Allow for entering number-v...
-           "uuid": "6139",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4305",                // Allow for entering number-v...
-          "value": { "type": "StringValue", "value": "Allow for entering number-values, not just string-values" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6140",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4306",                // Have table mode show multi-...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Have table mode show multi-...
-           "uuid": "6141",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4306",                // Have table mode show multi-...
-          "value": { "type": "StringValue", "value": "Have table mode show multi-valued attributes" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6142",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4307",                // When you assign a value to ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // When you assign a value to ...
-           "uuid": "6143",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4307",                // When you assign a value to ...
-          "value": { "type": "StringValue", "value": "When you assign a value to an item, mark it with a timestamp" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6144",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4308",                // Clean up all the code that ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Clean up all the code that ...
-           "uuid": "6145",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4308",                // Clean up all the code that ...
-          "value": { "type": "StringValue", "value": "Clean up all the code that assumes single-valued attributes -- search for '[0]'" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6146",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4309",                // Be able to create new pages
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to create new pages
-           "uuid": "6147",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4309",                // Be able to create new pages
-          "value": { "type": "StringValue", "value": "Be able to create new pages" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6148",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4310",                // Be able to add a new sectio...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to add a new sectio...
-           "uuid": "6149",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4310",                // Be able to add a new sectio...
-          "value": { "type": "StringValue", "value": "Be able to add a new section to a page" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6150",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4311",                // Observable queries: all ite...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Observable queries: all ite...
-           "uuid": "6151",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4311",                // Observable queries: all ite...
-          "value": { "type": "StringValue", "value": "Observable queries: all items, limited to a requested subset based on kind and category (e.g. 'All fiction books')" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6152",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4312",                // Observable queries: limit r...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Observable queries: limit r...
-           "uuid": "6153",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4312",                // Observable queries: limit r...
-          "value": { "type": "StringValue", "value": "Observable queries: limit results to just a requested subset of the attributes (e.g. just the names of the books)" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6154",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4313",                // Be able to edit the query o...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to edit the query o...
-           "uuid": "6155",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4313",                // Be able to edit the query o...
-          "value": { "type": "StringValue", "value": "Be able to edit the query of a section" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6156",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4314",                // Make it possible to add new...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make it possible to add new...
-           "uuid": "6157",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4314",                // Make it possible to add new...
-          "value": { "type": "StringValue", "value": "Make it possible to add new attributes to a table view" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
            "uuid": "6158",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4315",                // Figure out how to declare d...
@@ -2847,7 +2560,7 @@
       "timestamp": "1114819462640" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6204",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5204",                // The Gumption Memo
@@ -2883,7 +2596,7 @@
       "timestamp": "1114819462734" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6208",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5205",                // Deceit and Denial
@@ -2982,97 +2695,7 @@
       "timestamp": "1114819462968" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6219",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "6000",                // All Items
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 5. All Items
-           "uuid": "6220",
-      "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "item": "6000",                // All Items
-          "value": { "type": "StringValue", "value": "5. All Items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Items
-           "uuid": "6221",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6000",                // All Items
-          "value": { "type": "StringValue", "value": "All Items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Items
-           "uuid": "6222",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "6000",                // All Items
-          "value": { "type": "RelatedUuid", "value": "6010" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6223",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "6010",                // All Items
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Items
-           "uuid": "6224",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6010",                // All Items
-          "value": { "type": "StringValue", "value": "All Items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Table
-           "uuid": "6225",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "6010",                // All Items
-          "value": { "type": "StringValue", "value": "Table" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all items
-           "uuid": "6226",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "6010",                // All Items
-          "value": { "type": "RelatedUuid", "value": "6011" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6227",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "6011",                // Query for all items
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all items
-           "uuid": "6228",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6011",                // Query for all items
-          "value": { "type": "StringValue", "value": "Query for all items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6229",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "6012",                // JavaScript: The Definitive ...
@@ -3117,7 +2740,7 @@
       "timestamp": "1114819463343" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
+  { "Entry": {                             // Old Book
            "uuid": "6234",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "6013",                // The Two Towers
@@ -3234,4 +2857,1271 @@
           "value": { "type": "StringValue", "value": "Brian Totty" },
       "userstamp": "6241",                // by (Chih-Chao Lam)
       "timestamp": "1117671612418" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Page
+           "uuid": "8cbddbd1-368e-45d6-88ec-39690e9331a0",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Page
+           "uuid": "54f4bd36-a6d7-4c00-8e3a-891183a307e9",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
+          "value": { "type": "StringValue", "value": "New Page" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Page
+           "uuid": "462800a1-83d5-4fb3-853b-1bc9d5c83150",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
+          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // This is a new page.
+           "uuid": "7ffbc5c1-e179-4f49-808c-8562c502529b",
+      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
+           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
+          "value": { "type": "StringValue", "value": "This is a new page." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Section
+           "uuid": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Section
+           "uuid": "a642b640-8897-4711-8bf1-60ce3627649d",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
+          "value": { "type": "StringValue", "value": "New Section" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Section
+           "uuid": "bdb9dacf-66c8-4575-8cc5-5b84423c9dc0",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
+          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Section
+           "uuid": "fba77cc2-0ee8-4d27-8970-d80a100120c2",
+      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
+           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
+          "value": { "type": "RelatedUuid", "value": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Table
+           "uuid": "41399161-e055-4881-82ca-96a985b4d3c1",
+      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
+          "value": { "type": "StringValue", "value": "Table" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Query
+           "uuid": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Query
+           "uuid": "2a11573b-2c42-448b-8a52-1c5e80497f98",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+          "value": { "type": "StringValue", "value": "New Query" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Query
+           "uuid": "ef65a730-3850-4d41-854e-c4b01fa87914",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Query
+           "uuid": "c9ea5105-e1c3-4a9c-83a7-aa66e9d40599",
+      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
+           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
+          "value": { "type": "RelatedUuid", "value": "d634981c-c10d-4526-8b8f-fcc8bd3077d3" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735225265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735265703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Book
+           "uuid": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735265765" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "56985ffa-10d4-45b3-8e0d-130b1436d04e",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",                // Book
+          "value": { "type": "StringValue", "value": "Book" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735275890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "075574a1-6e33-4df1-86b8-b4a63a2427ed",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",                // Book
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735275890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Publisher
+           "uuid": "ea435816-c5c0-482b-8850-5651fbfaad12",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735275906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "8600bd8f-ca00-4126-841a-2484c069f6fb",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "ea435816-c5c0-482b-8850-5651fbfaad12",                // Publisher
+          "value": { "type": "StringValue", "value": "Publisher" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735285140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "b9846b93-fbd8-402f-8f23-933a3d2bb3a2",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "ea435816-c5c0-482b-8850-5651fbfaad12",                // Publisher
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735285140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Category
+           "uuid": "4eed673e-c224-44db-8a2b-9e72998c6d00",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "4952a8fd-5bb8-44f9-8c11-12801a41b189",                // Person
+          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735288437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Person
+           "uuid": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735285140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "7043b8ad-3bdf-4a0a-867f-d4523ebc77a1",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "4952a8fd-5bb8-44f9-8c11-12801a41b189",                // Person
+          "value": { "type": "StringValue", "value": "Person" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735288437" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Attribute
+           "uuid": "f9afff15-663e-4b45-8d62-bf2297ec0fe7",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+   "previousEntry": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
+          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735336265" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Published by
+           "uuid": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735412984" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Published by
+           "uuid": "9c5d6ea2-80fa-4e7a-81e5-342332c1c15a",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+          "value": { "type": "StringValue", "value": "Published by" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735433734" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Attribute
+           "uuid": "8dc501b8-0150-4fe8-8a86-b275955bc868",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735433734" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "ba275354-35bd-4b33-876f-00d738cad5ea",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735436750" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Attribute
+           "uuid": "f1301a57-c78c-4f51-88ae-76d0d927d932",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735443890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Written by
+           "uuid": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735433750" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Written by
+           "uuid": "4ad6a276-6dda-4bc6-8be0-ee9cf7524852",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+          "value": { "type": "StringValue", "value": "Written by" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735443890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "723176f0-9a10-4a69-8b06-4150f8cf575f",
+      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
+           "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735449609" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "a11a8ac9-08d4-460b-8cfe-23ea90b04f7e",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+   "previousEntry": "f9afff15-663e-4b45-8d62-bf2297ec0fe7",
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735470703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // J.R.R. Tolkien
+           "uuid": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735470750" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // J.R.R. Tolkien
+           "uuid": "48905153-87af-4aa7-860e-19c6aae90286",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",                // J.R.R. Tolkien
+          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735489703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "12b8ea06-5c10-4b72-807c-55bedb008a1d",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",                // J.R.R. Tolkien
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735489703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "a88ec17e-1371-4c51-8d9f-ec2498c517da",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "de981d0d-16fd-430a-82d1-4d60d87e64e3",                // David Brin
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735503187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // David Brin
+           "uuid": "de981d0d-16fd-430a-82d1-4d60d87e64e3",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735489703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Brin
+           "uuid": "63416b27-606d-49b7-8dac-761b10022911",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "de981d0d-16fd-430a-82d1-4d60d87e64e3",                // David Brin
+          "value": { "type": "StringValue", "value": "David Brin" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735503171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "aee1b28e-103e-4693-89a4-294ad2807b04",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",                // David Gourley
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735662250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // David Gourley
+           "uuid": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735503187" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Gourley
+           "uuid": "128051d3-a821-4cea-864d-280a70b0fb46",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",                // David Gourley
+          "value": { "type": "StringValue", "value": "David Gourley" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735662250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Brian Totty
+           "uuid": "d678b21e-1434-459e-83f0-c7c8c6213d36",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735662250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Brian Totty
+           "uuid": "3dd26484-4b9c-4b28-8eca-ace451138e0c",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "d678b21e-1434-459e-83f0-c7c8c6213d36",                // Brian Totty
+          "value": { "type": "StringValue", "value": "Brian Totty" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735665218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "d91825da-f16d-4162-8c34-b59766506957",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "d678b21e-1434-459e-83f0-c7c8c6213d36",                // Brian Totty
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735665218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "b5a28733-cab5-47c0-81bd-34c8f6691e98",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",                // James Surowiecki
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735676015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // James Surowiecki
+           "uuid": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735665218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // James Surowiecki
+           "uuid": "946be1e1-7ca0-45d7-8926-9071c8687abf",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",                // James Surowiecki
+          "value": { "type": "StringValue", "value": "James Surowiecki" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735676015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Patricia McDaniel
+           "uuid": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735676015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Patricia McDaniel
+           "uuid": "abe384b4-5db4-4317-8de9-637cf301917a",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",                // Patricia McDaniel
+          "value": { "type": "StringValue", "value": "Patricia McDaniel" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735684140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "75751349-c78c-41bc-8fc2-6d1c7d1cbd38",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",                // Patricia McDaniel
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735684140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Gerald Markowitz
+           "uuid": "1d9030cd-3659-42a1-8627-196644d6deb1",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735684156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Gerald Markowitz
+           "uuid": "b7bab2ca-aac7-46d2-8710-419ac4e69a6e",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "1d9030cd-3659-42a1-8627-196644d6deb1",                // Gerald Markowitz
+          "value": { "type": "StringValue", "value": "Gerald Markowitz" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735693234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "3c5836d5-4fc1-4ccf-8eea-faaf0184c084",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "1d9030cd-3659-42a1-8627-196644d6deb1",                // Gerald Markowitz
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735693234" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // David Rosner
+           "uuid": "b5620dda-b123-409c-8f92-c8fcf318d4e5",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735693250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Rosner
+           "uuid": "ec8039f7-cdd3-4c23-8bad-e6ada9be27f7",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "b5620dda-b123-409c-8f92-c8fcf318d4e5",                // David Rosner
+          "value": { "type": "StringValue", "value": "David Rosner" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735700140" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "5f957996-8db3-47ff-829d-96df96237e65",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "b5620dda-b123-409c-8f92-c8fcf318d4e5",                // David Rosner
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735700156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // David Flanagan
+           "uuid": "11106568-0dfe-4bb8-8574-8a30b2874b25",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735700156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Flanagan
+           "uuid": "61939bd6-2903-4f01-89a5-538a1cd2769f",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "11106568-0dfe-4bb8-8574-8a30b2874b25",                // David Flanagan
+          "value": { "type": "StringValue", "value": "David Flanagan" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735705218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "80c6fdb1-9852-49e6-825a-ed151113b7ac",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "11106568-0dfe-4bb8-8574-8a30b2874b25",                // David Flanagan
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735705218" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "5cceee12-d202-46ac-8724-0474ba4860ae",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+   "previousEntry": "a11a8ac9-08d4-460b-8cfe-23ea90b04f7e",
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735713015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "639d46b7-8479-4cb1-89c1-b5b338de5d86",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",                // O'Reilly
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735718921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // O'Reilly
+           "uuid": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735713062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // O'Reilly
+           "uuid": "c23a5be3-924c-446f-8bcd-40eb46e1af83",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",                // O'Reilly
+          "value": { "type": "StringValue", "value": "O'Reilly" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735718906" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "3543b8aa-33e1-4974-8d6b-ba1041c99548",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",                // Perseus Publishing
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735728843" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Perseus Publishing
+           "uuid": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735718921" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Perseus Publishing
+           "uuid": "7812b147-bf2f-4e4a-8db0-05d173e79df0",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",                // Perseus Publishing
+          "value": { "type": "StringValue", "value": "Perseus Publishing" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735728843" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // HarperCollins
+           "uuid": "32b872e6-5f78-484e-8bd9-6e12d48fd266",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735728859" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // HarperCollins
+           "uuid": "d0911998-ef56-405e-81e8-56176f14deaa",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "32b872e6-5f78-484e-8bd9-6e12d48fd266",                // HarperCollins
+          "value": { "type": "StringValue", "value": "HarperCollins" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735733328" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "f262e255-5f33-4b02-8981-e0293a870042",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "32b872e6-5f78-484e-8bd9-6e12d48fd266",                // HarperCollins
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735733343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Doubleday
+           "uuid": "fef1fb5a-d03d-490b-8396-f599d68652aa",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735733343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Doubleday
+           "uuid": "597e97a5-7c35-4135-83e1-51fba8bd6c03",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "fef1fb5a-d03d-490b-8396-f599d68652aa",                // Doubleday
+          "value": { "type": "StringValue", "value": "Doubleday" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735736468" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "2df70b86-1b15-4178-8eca-e65ccab69a13",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "fef1fb5a-d03d-490b-8396-f599d68652aa",                // Doubleday
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735736468" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // NYU Press
+           "uuid": "81a0fa22-0432-4f6e-822d-4e11caefa730",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735736484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // NYU Press
+           "uuid": "5a0b9077-4df7-4909-85db-5328546e3456",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "81a0fa22-0432-4f6e-822d-4e11caefa730",                // NYU Press
+          "value": { "type": "StringValue", "value": "NYU Press" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735740015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "745cd21b-b190-4521-8d26-82eb3656a1ae",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "81a0fa22-0432-4f6e-822d-4e11caefa730",                // NYU Press
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735740015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // University of California
+           "uuid": "774bf718-823a-4284-86d2-d24a334786af",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735740015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // University of California
+           "uuid": "c25ad76b-9a12-4b7b-852a-531b767bba76",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "774bf718-823a-4284-86d2-d24a334786af",                // University of California
+          "value": { "type": "StringValue", "value": "University of California" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735752015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "fd2066e5-b876-4241-8c22-f7208af4ec85",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "774bf718-823a-4284-86d2-d24a334786af",                // University of California
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735752031" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "cd9b4dfb-6fec-4f0f-815b-e0a2ae2ac7c3",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+   "previousEntry": "5cceee12-d202-46ac-8724-0474ba4860ae",
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735771046" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // HTTP: The Definitive Guide
+           "uuid": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735771093" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // HTTP: The Definitive Guide
+           "uuid": "f19bf2d2-2a53-41ba-84e7-c9d5b82d908e",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
+          "value": { "type": "StringValue", "value": "HTTP: The Definitive Guide" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735778156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "d9360e8b-d892-49d4-8b2a-a4651ac92eb5",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735778156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "5bd72c4e-90b9-487e-8c65-77dae04c9a2b",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735780703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Hobbit
+           "uuid": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735778156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // The Hobbit
+           "uuid": "43c67130-8b68-4d84-8883-83655c6b3c9f",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
+          "value": { "type": "StringValue", "value": "The Hobbit" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735780703" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Wisdom of Crowds
+           "uuid": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735780718" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // The Wisdom of Crowds
+           "uuid": "e9bf97a2-302a-498c-853e-505b66b8ca37",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
+          "value": { "type": "StringValue", "value": "The Wisdom of Crowds" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735788562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "a756ff74-be71-4870-8e30-09658e4d70f6",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735788578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Transparent Society
+           "uuid": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735788578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // The Transparent Society
+           "uuid": "66a95e67-5721-4711-83c0-2cfffffcfcd9",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
+          "value": { "type": "StringValue", "value": "The Transparent Society" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735798062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "38ca0209-7651-41ba-8f43-12b20273c614",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735798062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Brin
+           "uuid": "38ca0210-7651-41ba-8f43-12b20273c614",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
+          "value": { "type": "RelatedUuid", "value": "de981d0d-16fd-430a-82d1-4d60d87e64e3" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735798062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Perseus Publishing
+           "uuid": "38ca0211-7651-41ba-8f43-12b20273c614",
+      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
+          "value": { "type": "RelatedUuid", "value": "0f4132ec-fabd-4857-8c26-1f842d3d94b3" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117735798062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // J.R.R. Tolkien
+           "uuid": "ca3d4029-6e05-4079-8012-1dbe4dac5b94",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
+          "value": { "type": "RelatedUuid", "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736236500" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // HarperCollins
+           "uuid": "1b5dc73a-34fb-4909-8f83-b7cadfa58d07",
+      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
+          "value": { "type": "RelatedUuid", "value": "32b872e6-5f78-484e-8bd9-6e12d48fd266" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736261015" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Gourley
+           "uuid": "0a4d47fa-ffe2-409a-8590-50d527b159cd",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
+          "value": { "type": "RelatedUuid", "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736305546" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Gourley
+           "uuid": "21e55207-dc7d-4dd5-86fc-da5ca9bbb20e",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
+   "previousEntry": "0a4d47fa-ffe2-409a-8590-50d527b159cd",
+          "value": { "type": "StringValue", "value": "David Gourley" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736311578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // J.R.R. Tolkien
+           "uuid": "58dc3820-a73a-4d1d-8f45-b6954ec5d16d",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
+   "previousEntry": "ca3d4029-6e05-4079-8012-1dbe4dac5b94",
+          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736313546" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Brian Totty
+           "uuid": "5610ec06-b4e9-4eeb-867b-dad8b0073636",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
+          "value": { "type": "StringValue", "value": "Brian Totty" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736335578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // O'Reilly
+           "uuid": "bac5ec21-422a-4a5f-82f2-0518ab052b9e",
+      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
+          "value": { "type": "RelatedUuid", "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736353671" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Gourley
+           "uuid": "fb9d3ea1-fa9f-4bf4-8aab-ff7a50e2e062",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
+   "previousEntry": "21e55207-dc7d-4dd5-86fc-da5ca9bbb20e",
+          "value": { "type": "RelatedUuid", "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736369546" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // James Surowiecki
+           "uuid": "d9677f00-4c56-46f9-84c1-f5df896c1058",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
+          "value": { "type": "RelatedUuid", "value": "9f47f559-d9b7-4b68-8dae-96a26cf2f232" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736379671" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Doubleday
+           "uuid": "db17fade-a60b-463d-8f29-d9de909c3d35",
+      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
+          "value": { "type": "RelatedUuid", "value": "fef1fb5a-d03d-490b-8396-f599d68652aa" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736389781" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "d5326b0b-1228-4232-8a6e-d8be50b1af97",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736411390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Shrinking Violets and Caspa...
+           "uuid": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736231890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Shrinking Violets and Caspa...
+           "uuid": "426fdd09-3112-4be6-8998-d77fcba475b9",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
+          "value": { "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736411375" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Patricia McDaniel
+           "uuid": "2fd80172-7c5c-45ba-8bc0-d6d212b4816c",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
+          "value": { "type": "RelatedUuid", "value": "2a0a9a32-210a-429f-868d-3b015d3ae9ac" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736413562" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // NYU Press
+           "uuid": "ccc919f4-ba3a-4524-80ce-eaeda75880b2",
+      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
+          "value": { "type": "RelatedUuid", "value": "81a0fa22-0432-4f6e-822d-4e11caefa730" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736417593" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "bd1df12b-d9bf-4e57-8853-ae955baf296e",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736429578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // Deceit and Denial
+           "uuid": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736411390" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Deceit and Denial
+           "uuid": "9608e7de-7ec0-49ae-8425-aac277cef1ac",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
+          "value": { "type": "StringValue", "value": "Deceit and Denial" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736429578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Gerald Markowitz
+           "uuid": "cb5ea4e5-9d95-4a19-8959-a6fa702178e5",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
+          "value": { "type": "RelatedUuid", "value": "1d9030cd-3659-42a1-8627-196644d6deb1" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736431937" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Gerald Markowitz
+           "uuid": "14f04804-8252-4ff7-81d0-7de53b90db8d",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
+   "previousEntry": "cb5ea4e5-9d95-4a19-8959-a6fa702178e5",
+          "value": { "type": "StringValue", "value": "Gerald Markowitz" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736438968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // D
+           "uuid": "cb57a1ef-d238-4400-8ab0-7714d39cdc62",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
+          "value": { "type": "StringValue", "value": "D" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736444109" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Rosner
+           "uuid": "7675c038-d911-4e6e-80aa-280bdb3833d1",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
+   "previousEntry": "cb57a1ef-d238-4400-8ab0-7714d39cdc62",
+          "value": { "type": "StringValue", "value": "David Rosner" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736451250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // University of California
+           "uuid": "dd9e8536-b688-433f-806b-b6e5e5786f2f",
+      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
+          "value": { "type": "RelatedUuid", "value": "774bf718-823a-4284-86d2-d24a334786af" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736460250" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "113eaca6-0936-476b-81c8-8275583d0ad6",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736474109" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // JavaScript: The Definitive ...
+           "uuid": "0378913e-e5c9-48c0-835a-b839edee467f",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736429578" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // JavaScript: The Definitive ...
+           "uuid": "6835a402-d069-4565-88c1-1e6f577f0744",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
+          "value": { "type": "StringValue", "value": "JavaScript: The Definitive Guide" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736474109" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // David Flanagan
+           "uuid": "09a9c592-7e0b-4bc1-8397-0a1596915793",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
+          "value": { "type": "RelatedUuid", "value": "11106568-0dfe-4bb8-8574-8a30b2874b25" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736475484" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // O'Reilly
+           "uuid": "a6b5975a-7298-4fab-89cd-1c7455d47272",
+      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
+           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
+          "value": { "type": "RelatedUuid", "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736479968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // The Two Towers
+           "uuid": "933227ee-bda7-4924-81ac-94c018d35503",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736474109" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // The Two Towers
+           "uuid": "41ec5e1b-5c19-45c2-8028-22037b49dbbb",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
+          "value": { "type": "StringValue", "value": "The Two Towers" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736492531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "7788e6bc-2c93-40cc-885c-312a17551a11",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736492531" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // J.R.R. Tolkien
+           "uuid": "99ee41ff-85d7-4744-827f-cc0e81017df6",
+      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
+           "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
+          "value": { "type": "RelatedUuid", "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736496203" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Book
+           "uuid": "0515ceef-33b9-477b-8ebf-66a3d0baf174",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "3011",                // Query for all books
+   "previousEntry": "6040",
+          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736561171" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // People
+           "uuid": "42c6eae2-97f7-4a40-869d-f3a1b994b8ce",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // People
+   "previousEntry": "54f4bd36-a6d7-4c00-8e3a-891183a307e9",
+          "value": { "type": "StringValue", "value": "People" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736688156" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Person
+           "uuid": "ff73a3d6-7155-44cb-89e9-33a89404f203",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
+   "previousEntry": "cd9b4dfb-6fec-4f0f-815b-e0a2ae2ac7c3",
+          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736701343" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // All People
+           "uuid": "a7e79a1c-c971-4e25-8479-e0394ea63dd3",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // All People
+   "previousEntry": "a642b640-8897-4711-8bf1-60ce3627649d",
+          "value": { "type": "StringValue", "value": "All People" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736711968" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Outline
+           "uuid": "03af3557-c06e-4c43-86e5-a5b69d370cf7",
+      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // All People
+   "previousEntry": "41399161-e055-4881-82ca-96a985b4d3c1",
+          "value": { "type": "StringValue", "value": "Outline" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736715750" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // This is a page for keeping ...
+           "uuid": "af0ade8e-5ece-404e-84de-7a004ddf1d35",
+      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
+           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // People
+   "previousEntry": "7ffbc5c1-e179-4f49-808c-8562c502529b",
+          "value": { "type": "StringValue", "value": "This is a page for keeping track of people." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736738984" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Page
+           "uuid": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Page
+           "uuid": "ac20c09b-027c-4cf7-8d1d-c571b577d026",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
+          "value": { "type": "StringValue", "value": "New Page" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Page
+           "uuid": "bb94fce5-d490-45c8-8ae0-49ebe7aab3fc",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
+          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // This is a new page.
+           "uuid": "a831f70d-fd95-468a-8a0a-31a5937cbcd3",
+      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
+           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
+          "value": { "type": "StringValue", "value": "This is a new page." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Section
+           "uuid": "38e3da07-957f-40a2-894d-f3636aed7c23",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Section
+           "uuid": "5737311c-2d52-4354-8a85-6a404e947fd9",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
+          "value": { "type": "StringValue", "value": "New Section" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Section
+           "uuid": "ee6af493-b200-4d26-8b88-2b641cd6fa80",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
+          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Section
+           "uuid": "3107a69d-8e86-4afe-8ec7-e82c95f9fcae",
+      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
+           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
+          "value": { "type": "RelatedUuid", "value": "38e3da07-957f-40a2-894d-f3636aed7c23" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Table
+           "uuid": "0a8d7e91-ca14-49a4-8064-e5eabe133b78",
+      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
+          "value": { "type": "StringValue", "value": "Table" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Item": {                             // New Query
+           "uuid": "e30ba726-d976-46fb-88ac-7f5e841a6b43",
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Query
+           "uuid": "02b28988-dd13-4ffb-8933-bb6c5b9d2822",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
+          "value": { "type": "StringValue", "value": "New Query" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Query
+           "uuid": "d3b32b1d-0f22-439e-85ff-f069e4d76bff",
+      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
+           "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
+          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // New Query
+           "uuid": "f8fd9872-3806-42c8-886f-78cdb53299ad",
+      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
+           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
+          "value": { "type": "RelatedUuid", "value": "e30ba726-d976-46fb-88ac-7f5e841a6b43" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736745062" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publisher
+           "uuid": "414b2c92-ded7-4071-8ff3-af2468ec665b",
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
+          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736753953" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Outline
+           "uuid": "5e715995-f16d-4021-87b6-43f674fa7380",
+      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
+           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
+   "previousEntry": "0a8d7e91-ca14-49a4-8064-e5eabe133b78",
+          "value": { "type": "StringValue", "value": "Outline" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736756890" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // Publishers
+           "uuid": "f37b2702-5e6a-4bc7-84b6-8d89e0b75e9a",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // Publishers
+   "previousEntry": "ac20c09b-027c-4cf7-8d1d-c571b577d026",
+          "value": { "type": "StringValue", "value": "Publishers" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736763359" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // This is a page for keeping ...
+           "uuid": "10c45258-cdb0-44ac-8605-002ce083c43e",
+      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
+           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // Publishers
+   "previousEntry": "a831f70d-fd95-468a-8a0a-31a5937cbcd3",
+          "value": { "type": "StringValue", "value": "This is a page for keeping track of publishers." },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736780078" }
+  },
+  // -----------------------------------------------------------------------
+  { "Entry": {                             // All Publishers
+           "uuid": "e3bf3e14-e8f4-43e2-866c-121c5ab70c0b",
+      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
+           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // All Publishers
+   "previousEntry": "5737311c-2d52-4354-8a85-6a404e947fd9",
+          "value": { "type": "StringValue", "value": "All Publishers" },
+      "userstamp": "1502",                // by (Guest)
+      "timestamp": "1117736787093" }
   }
\ No newline at end of file



From skinner at sheep.berlios.de  Thu Jun  2 21:31:13 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 2 Jun 2005 21:31:13 +0200
Subject: [openrecord-svn] r115 - trunk/source/repositories/demo_page
Message-ID: <200506021931.j52JVDMq015405@sheep.berlios.de>

Author: skinner
Date: 2005-06-02 21:31:12 +0200 (Thu, 02 Jun 2005)
New Revision: 115

Modified:
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
Cleaned 600 lines of cruft out of the repository.

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 19:04:37 UTC (rev 114)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-02 19:31:12 UTC (rev 115)
@@ -766,60 +766,6 @@
       "timestamp": "1114819457765" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Old Book
-           "uuid": "3104",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // HTTP: The Definitive Guide
-           "uuid": "3205",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Author
-           "uuid": "3101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Publisher
-           "uuid": "3102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // ISBN
-           "uuid": "3103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Transparent Society
-           "uuid": "3201",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Hobbit
-           "uuid": "3202",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457843" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Wisdom of Crowds
-           "uuid": "3203",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Shrinking Violets and Caspa...
-           "uuid": "3204",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457859" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // Bugs and Features to Implement
            "uuid": "4000",
       "userstamp": "1502",                // by (Guest)
@@ -1042,18 +988,6 @@
       "timestamp": "1114819458375" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // The Gumption Memo
-           "uuid": "5204",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Deceit and Denial
-           "uuid": "5205",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458406" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // Have a 'Find' UI that does ...
            "uuid": "5207",
       "userstamp": "1502",                // by (Guest)
@@ -1072,18 +1006,6 @@
       "timestamp": "1114819458437" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // JavaScript: The Definitive ...
-           "uuid": "6012",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Two Towers
-           "uuid": "6013",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458484" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Page
            "uuid": "6018",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
@@ -1282,15 +1204,6 @@
       "timestamp": "1114819459093" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6040",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-           "item": "3011",                // Query for all books
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459109" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Query
            "uuid": "6041",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
@@ -1318,312 +1231,6 @@
       "timestamp": "1114819459171" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6044",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3104",                // Old Book
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6045",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3104",                // Old Book
-          "value": { "type": "StringValue", "value": "Old Book" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6046",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HTTP: The Definitive Guide
-           "uuid": "6047",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "HTTP: The Definitive Guide" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Gourley and Brian Totty
-           "uuid": "6048",
-      "attribute": "3101",                // Author
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "David Gourley and Brian Totty" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 1565925092
-           "uuid": "6049",
-      "attribute": "3103",                // ISBN
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "1565925092" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // O'Reilly
-           "uuid": "6050",
-      "attribute": "3102",                // Publisher
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "O'Reilly" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6051",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3101",                // Author
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Author
-           "uuid": "6052",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3101",                // Author
-          "value": { "type": "StringValue", "value": "Author" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6053",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3102",                // Publisher
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "6054",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3102",                // Publisher
-          "value": { "type": "StringValue", "value": "Publisher" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6055",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3103",                // ISBN
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // ISBN
-           "uuid": "6056",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3103",                // ISBN
-          "value": { "type": "StringValue", "value": "ISBN" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6057",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Transparent Society
-           "uuid": "6058",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "The Transparent Society" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Brin
-           "uuid": "6059",
-      "attribute": "3101",                // Author
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "David Brin" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Perseus Publishing
-           "uuid": "6060",
-      "attribute": "3102",                // Publisher
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "Perseus Publishing" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0738201448
-           "uuid": "6061",
-      "attribute": "3103",                // ISBN
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "0738201448" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6062",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3202",                // The Hobbit
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Hobbit
-           "uuid": "6063",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "The Hobbit" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459593" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "6064",
-      "attribute": "3101",                // Author
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HarperCollins
-           "uuid": "6065",
-      "attribute": "3102",                // Publisher
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "HarperCollins" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Houghton Mifflin
-           "uuid": "6066",
-      "attribute": "3102",                // Publisher
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "Houghton Mifflin" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0618002219
-           "uuid": "6067",
-      "attribute": "3103",                // ISBN
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "0618002219" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6068",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Wisdom of Crowds
-           "uuid": "6069",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "The Wisdom of Crowds" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // James Surowiecki
-           "uuid": "6070",
-      "attribute": "3101",                // Author
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "James Surowiecki" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0385503865
-           "uuid": "6071",
-      "attribute": "3103",                // ISBN
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "0385503865" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Doubleday
-           "uuid": "6072",
-      "attribute": "3102",                // Publisher
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "Doubleday" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6073",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Shrinking Violets and Caspa...
-           "uuid": "6074",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Patricia A. McDaniel
-           "uuid": "6075",
-      "attribute": "3101",                // Author
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "Patricia A. McDaniel" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0814756778
-           "uuid": "6076",
-      "attribute": "3103",                // ISBN
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "0814756778" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459843" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // NYU Press
-           "uuid": "6077",
-      "attribute": "3102",                // Publisher
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "NYU Press" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459859" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Page
            "uuid": "6078",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
@@ -2560,87 +2167,6 @@
       "timestamp": "1114819462640" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6204",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Gumption Memo
-           "uuid": "6205",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "StringValue", "value": "The Gumption Memo" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Brian Skinner
-           "uuid": "6206",
-      "attribute": "3101",                // Author
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "StringValue", "value": "Brian Skinner" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Kinkos
-           "uuid": "6207",
-      "attribute": "3102",                // Publisher
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "StringValue", "value": "Kinkos" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6208",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Deceit and Denial
-           "uuid": "6209",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "Deceit and Denial" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Gerald Markowitz and David ...
-           "uuid": "6210",
-      "attribute": "3101",                // Author
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "Gerald Markowitz and David Rosner" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // University of California
-           "uuid": "6211",
-      "attribute": "3102",                // Publisher
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "University of California" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0520240634
-           "uuid": "6212",
-      "attribute": "3103",                // ISBN
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "0520240634" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462828" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Feature
            "uuid": "6213",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
@@ -2695,87 +2221,7 @@
       "timestamp": "1114819462968" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6229",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463265" }
-  },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // JavaScript: The Definitive ...
-           "uuid": "6230",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "JavaScript: The Definitive Guide" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Flanagan
-           "uuid": "6231",
-      "attribute": "3101",                // Author
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "David Flanagan" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // O'Reilly
-           "uuid": "6232",
-      "attribute": "3102",                // Publisher
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "O'Reilly" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0596000480
-           "uuid": "6233",
-      "attribute": "3103",                // ISBN
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "0596000480" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Old Book
-           "uuid": "6234",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "6013",                // The Two Towers
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Two Towers
-           "uuid": "6235",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6013",                // The Two Towers
-          "value": { "type": "StringValue", "value": "The Two Towers" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "6236",
-      "attribute": "3101",                // Author
-           "item": "6013",                // The Two Towers
-          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463406" }
-  },
-  // =======================================================================
-  { "Entry": {                             // none
-           "uuid": "6238",
-      "attribute": "3103",                // ISBN
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "StringValue", "value": "none" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117000646421" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // Brian Douglas Skinner
            "uuid": "6239",
       "userstamp": "6239",                // by (Brian Douglas Skinner)
@@ -2821,44 +2267,6 @@
       "timestamp": "1117056699906" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Gerald Markowitz
-           "uuid": "f8c087f9-5138-4e10-8485-9b2126e57609",
-      "attribute": "3101",                // Author
-           "item": "5205",                // Deceit and Denial
-   "previousEntry": "6210",
-          "value": { "type": "StringValue", "value": "Gerald Markowitz" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117671538895" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Rosner
-           "uuid": "f084c367-6557-4c43-8f8d-1e07cfde6622",
-      "attribute": "3101",                // Author
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "David Rosner" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117671585098" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Gourley
-           "uuid": "f16a265e-9414-4be3-8bf9-520a55804c78",
-      "attribute": "3101",                // Author
-           "item": "3205",                // HTTP: The Definitive Guide
-   "previousEntry": "6048",
-          "value": { "type": "StringValue", "value": "David Gourley" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117671604544" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Brian Totty
-           "uuid": "0745be22-94c8-4983-8993-7b0023fdf5a3",
-      "attribute": "3101",                // Author
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "Brian Totty" },
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117671612418" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // New Page
            "uuid": "8cbddbd1-368e-45d6-88ec-39690e9331a0",
       "userstamp": "1502",                // by (Guest)
@@ -3913,7 +3321,6 @@
            "uuid": "0515ceef-33b9-477b-8ebf-66a3d0baf174",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "3011",                // Query for all books
-   "previousEntry": "6040",
           "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736561171" }



From chaolam at sheep.berlios.de  Fri Jun  3 06:32:37 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Fri, 3 Jun 2005 06:32:37 +0200
Subject: [openrecord-svn] r116 - in trunk: documentation source
Message-ID: <200506030432.j534WbaA007076@sheep.berlios.de>

Author: chaolam
Date: 2005-06-03 06:32:21 +0200 (Fri, 03 Jun 2005)
New Revision: 116

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/TablePlugin.js
Log:
Added "new section" capability in edit mode.
Some minor clean-up.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-02 19:31:12 UTC (rev 115)
+++ trunk/documentation/release_planning.txt	2005-06-03 04:32:21 UTC (rev 116)
@@ -104,7 +104,9 @@
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
  Chao  |   done   | 0   ied | Re-implement UI for entering a new row in a table (1.5 ied actual)
+ Chao  |   done   |         | Refactor TablePlugin to DOM Level 2 (1.5 ied actual)
 Brian  |   done   | 1   ied | Ensure that UUIDs are unique in multi-user use case
+Chao   |   Medium | 1   ied | Refactor plugin class, pass a query to plugin, create Plugin base class
 -------+----------+---------+----------------------------------------------
 
 
@@ -114,8 +116,8 @@
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
 Mignon |   Low    |         | Generate time-based UUIDs ("version 1" UUIDs)
-Chao   | High     | 1   ied | Allow users to view multiple entries in a table plugin cell
-Chao   | High     | 2   ied | Allow users to enter/edit multiple entries in a table plugin cell
+Chao   | Done     | 1   ied | Allow users to view multiple entries in a table plugin cell (0.5 ied actual)
+Chao   | Done     | 2   ied | Allow users to enter/edit multiple entries in a table plugin cell (1 ied actual)
 -------+----------+---------+----------------------------------------------
  
 

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-02 19:31:12 UTC (rev 115)
+++ trunk/source/PageView.js	2005-06-03 04:32:21 UTC (rev 116)
@@ -48,6 +48,31 @@
 //PageView.UUID_FOR_ATTRIBUTE_SECTION = 108;
 PageView.UUID_FOR_ATTRIBUTE_SECTION = "00000300-ce7f-11d9-8cd5-0011113ae5d6";
 
+/**
+ * Creates a new section in the repository
+ * @scope public function
+ * @param inPage  Page Item to insert new section
+ * @param isNewTransaction  should new section be wrapped in a transaction?
+ */
+PageView.newSection = function (repository, inPage, isNewTransaction) {
+  var attributeCalledCategory = repository.getAttributeCalledCategory();
+  var attributeCalledQuery = repository.getAttributeCalledQuery();
+  var categoryCalledQuery = repository.getCategoryCalledQuery();
+  var attributeCalledPluginName = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
+  var attributeCalledSection = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTION);
+  var categoryCalledSection = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_SECTION);
+  
+  if (isNewTransaction) {repository.beginTransaction();}
+  var newSection = repository.newItem("New Section");
+  newSection.addEntryForAttribute(attributeCalledCategory, categoryCalledSection);
+  inPage.addEntryForAttribute(attributeCalledSection, newSection);
+  newSection.addEntryForAttribute(attributeCalledPluginName, SectionView.PLUGIN_TABLE);
+  var newQuery = repository.newItem("New Query");
+  newQuery.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
+  newSection.addEntryForAttribute(attributeCalledQuery, newQuery);
+  if (isNewTransaction) {repository.endTransaction();}
+  return newSection;
+};
 
 /**
  * The RootView uses an instance of a PageView to display a Page in the
@@ -108,6 +133,7 @@
       var sectionView = this.myListOfSectionViews[key];      
       sectionView.refresh();
     }
+    this._refreshEditModeControls();
   }
 };
 
@@ -142,16 +168,84 @@
   for (var key in listOfEntriesForSections) {
     var entryForSection = listOfEntriesForSections[key];
     var section = entryForSection.getValue();
-    var sectionViewDiv = View.createAndAppendElement(pageDivElement, "div");
-    var sectionView = new SectionView(this, sectionViewDiv, section, sectionNumber);
-    sectionNumber += 1;
-    this.myListOfSectionViews.push(sectionView);
+    this._buildNewSection(section);
   }
+  this._wasInEditMode = this.isInEditMode();
+  if (this._wasInEditMode) {this._buildEditControls();}
   this._myHasEverBeenDisplayedFlag = true;
   this.refresh();
 };
 
+/**
+ * Creates a new section in this page.
+ *
+ * @param  inSection newSection item
+ * @param  inBeforeElt (optional) if specified, section view to be inserted before this elt
+ * @scope    private instance method
+ */
+PageView.prototype._buildNewSection = function(inSection, inBeforeElt) {
+  var pageDivElement = this.getHTMLElement();
+  var sectionViewDiv = document.createElement("div");
+  var sectionView = new SectionView(this, sectionViewDiv, inSection, this.myListOfSectionViews.length);
+  if (inBeforeElt) {
+    pageDivElement.insertBefore(sectionViewDiv, inBeforeElt);
+  }
+  else {
+    pageDivElement.appendChild(sectionViewDiv);
+  }
+  this.myListOfSectionViews.push(sectionView);
+  return sectionView;
+}
 
+/**
+ * Called when the user clicks on the "New Section" button.
+ *
+ * @scope    private instance method
+ */
+PageView.prototype._addNewSection = function() {
+  var newSection = PageView.newSection(this.getWorld(), this.myPage ,true);
+  this._buildNewSection(newSection, this._editModeDiv).refresh();
+};
+
+/**
+ * Create the "new section" button in EditMode.
+ *
+ * @scope    private instance method
+ */
+PageView.prototype._buildEditControls = function() {
+  if (!this._editModeDiv) {
+    var pageDivElement = this.getHTMLElement();
+    this._editModeDiv = View.createAndAppendElement(pageDivElement, "div", SectionView.ELEMENT_CLASS_SECTION);
+    View.createAndAppendElement(this._editModeDiv,"br");
+    var editButton = View.createAndAppendElement(this._editModeDiv, "input", 
+      RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL);
+    editButton.type = "Button";
+    editButton.value = "New Section";
+    editButton.onclick = this._addNewSection.bindAsEventListener(this);
+  }
+  else {
+    this._editModeDiv.display = "Block";
+  }
+};
+
+/**
+ * Called when edit controls need to be refreshed
+ *
+ * @scope    private instance method
+ */
+PageView.prototype._refreshEditModeControls = function() {
+  if (this._wasInEditMode != this.isInEditMode()) {
+    this._wasInEditMode = this.isInEditMode();
+    if (this.isInEditMode()) {
+      this._buildEditControls();
+    }
+    else {
+      this.getHTMLElement().removeChild(this._editModeDiv);
+      //Pending: why does hiding _editModeDiv still leave a blue line, gotta ask Brian about CSS
+      this._editModeDiv = null;
+    }
+  }
+};
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-02 19:31:12 UTC (rev 115)
+++ trunk/source/RootView.js	2005-06-03 04:32:21 UTC (rev 116)
@@ -350,28 +350,18 @@
  * @return   The newly created page item.
  */
 RootView.prototype.newPage = function () {
-  this.getWorld().beginTransaction();
-  var newPage = this.getWorld().newItem("New Page");
-  // var shortName = this.getWorld().getAttributeCalledShortName();
-  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
-  var attributeCalledQuery = this.getWorld().getAttributeCalledQuery();
-  var categoryCalledQuery = this.getWorld().getCategoryCalledQuery();
-  var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
-  var attributeCalledSummary = this.getWorld().getAttributeCalledSummary();
-  var attributeCalledSection = this.getWorld().getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTION);
-  var categoryCalledPage = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
-  var categoryCalledSection = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_SECTION);
+  var repository = this.getWorld();
+  repository.beginTransaction();
+  var newPage = repository.newItem("New Page");
+  // var shortName = repository.getAttributeCalledShortName();
+  var attributeCalledCategory = repository.getAttributeCalledCategory();
+  var attributeCalledSummary = repository.getAttributeCalledSummary();
+  var categoryCalledPage = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
   // newPage.addEntryForAttribute(shortName, "New Page");
   newPage.addEntryForAttribute(attributeCalledCategory, categoryCalledPage);
   newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
-  var newSection = this.getWorld().newItem("New Section");
-  newSection.addEntryForAttribute(attributeCalledCategory, categoryCalledSection);
-  newPage.addEntryForAttribute(attributeCalledSection, newSection);
-  newSection.addEntryForAttribute(attributeCalledPluginName, SectionView.PLUGIN_TABLE);
-  var newQuery = this.getWorld().newItem("New Query");
-  newQuery.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
-  newSection.addEntryForAttribute(attributeCalledQuery, newQuery);
-  this.getWorld().endTransaction();
+  PageView.newSection(repository,newPage,false);
+  repository.endTransaction();
   
   this.myHashTableOfPagesKeyedByUuid[newPage._getUuid()] = newPage;
   

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-02 19:31:12 UTC (rev 115)
+++ trunk/source/TablePlugin.js	2005-06-03 04:32:21 UTC (rev 116)
@@ -339,12 +339,9 @@
  * @scope    public instance method
  */
 TablePlugin.prototype.refresh = function () {
-  if (!this._myHasEverBeenDisplayedFlag) {
-    this._buildTable();
-  } else {
-    var a = 1;
+  // PENDING new table is constantly rebuilt currently
   // PENDING new content model with observable queries
-  }
+  this._buildTable();
 };
 
 



From chaolam at sheep.berlios.de  Fri Jun  3 07:26:07 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Fri, 3 Jun 2005 07:26:07 +0200
Subject: [openrecord-svn] r117 - trunk/source
Message-ID: <200506030526.j535Q74M009354@sheep.berlios.de>

Author: chaolam
Date: 2005-06-03 07:25:58 +0200 (Fri, 03 Jun 2005)
New Revision: 117

Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/ItemView.js
   trunk/source/OutlinePlugin.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/demo_page.html
Log:
1) Added base ORPlugin class (Plugin is a reserved word in Javascript, so I couldn't use "Plugin" as class name)
2) Refactored plugins, so that they don't depend on their superclasses to get queries or items for display

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-06-03 04:32:21 UTC (rev 116)
+++ trunk/source/BarChartPlugin.js	2005-06-03 05:25:58 UTC (rev 117)
@@ -53,10 +53,9 @@
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var barChart = new BarChartPlugin()
  */
-BarChartPlugin.prototype = new View();  // makes BarChartPlugin be a subclass of View
-function BarChartPlugin(inSectionView, inHTMLElement) {
-  this.setSuperview(inSectionView);
-  this.setHTMLElement(inHTMLElement);
+BarChartPlugin.prototype = new ORPlugin();  // makes BarChartPlugin be a subclass of View
+function BarChartPlugin(inSuperview, inHTMLElement,inQuery) {
+  ORPlugin.call(this,inSuperview,inHTMLElement,inQuery);
 }
 
 
@@ -89,8 +88,7 @@
   var hashTableOfAttributesKeyedByAttributeKey = {};
   
   // for each attribute, count the number of items where that attribute has a numeric value
-  // PENDING: how do we know our superview responds to getListOfContentItems()? 
-  var listOfContentItems = this.getSuperview().getListOfContentItems();
+  var listOfContentItems = this.fetchItems();
   for (var iKey in listOfContentItems) {
     contentItem = listOfContentItems[iKey];
     var listOfAttributesForItem = contentItem.getAttributes();
@@ -186,16 +184,6 @@
 };
 
 
-/**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-BarChartPlugin.prototype.endOfLife = function () {
-  this.getHTMLElement().innerHTML = "";
-};
-
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-06-03 04:32:21 UTC (rev 116)
+++ trunk/source/DetailPlugin.js	2005-06-03 05:25:58 UTC (rev 117)
@@ -52,10 +52,9 @@
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var detailPlugin = new DetailPlugin()
  */
-DetailPlugin.prototype = new View();  // makes DetailPlugin be a subclass of View
-function DetailPlugin(inSuperView, inHTMLElement) {
-  this.setSuperview(inSuperView);
-  this.setHTMLElement(inHTMLElement);  
+DetailPlugin.prototype = new ORPlugin();  // makes DetailPlugin be a subclass of View
+function DetailPlugin(inSuperView, inHTMLElement,inQuery) {
+  ORPlugin.call(this,inSuperView,inHTMLElement,inQuery);
 }
 
 
@@ -80,8 +79,7 @@
   var listOfStrings = [];
 
   // for each content item, add its HTML representation to the output
-  // PENDING: how do we know our superview responds to getListOfContentItems()? 
-  var listOfContentItems = this.getSuperview().getListOfContentItems();
+  var listOfContentItems = this.fetchItems();
   for (var contentItemKey in listOfContentItems) {
     var contentItem = listOfContentItems[contentItemKey];
     listOfStrings.push(this.getXhtmlTableForItem(contentItem));
@@ -95,16 +93,6 @@
 
 
 /**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-DetailPlugin.prototype.endOfLife = function () {
-  this.getHTMLElement().innerHTML = "";
-};
-
-
-/**
  * Given an item to be display, returns a string with XHTML to display
  * the item.
  *

Modified: trunk/source/ItemView.js
===================================================================
--- trunk/source/ItemView.js	2005-06-03 04:32:21 UTC (rev 116)
+++ trunk/source/ItemView.js	2005-06-03 05:25:58 UTC (rev 117)
@@ -69,21 +69,7 @@
   this.myPlugin = null;
 }
 
-
 /**
- * Returns a list with a single content item in it.
- *
- * @scope    public instance method
- * @return   A list with one item in it.
- */
-ItemView.prototype.getListOfContentItems = function () {
-  var listOfContentItems = [];
-  listOfContentItems.push(this.myItem);
-  return listOfContentItems;
-};
-
-
-/**
  * Returns a string that gives the name of the page.
  *
  * @scope    public instance method
@@ -120,7 +106,7 @@
 
   // let the detailPlugin add its own content
   var detailPluginElement = document.getElementById(detailDivId);
-  this.myPlugin = new DetailPlugin(this, detailPluginElement);
+  this.myPlugin = new DetailPlugin(this, detailPluginElement,[this.myItem]);
   this.myPlugin.refresh();
 };
 

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-06-03 04:32:21 UTC (rev 116)
+++ trunk/source/OutlinePlugin.js	2005-06-03 05:25:58 UTC (rev 117)
@@ -51,10 +51,9 @@
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var outline = new OutlinePlugin()
  */
-OutlinePlugin.prototype = new View();  // makes OutlinePlugin be a subclass of View
-function OutlinePlugin(inSectionView, inHTMLElement) {
-  this.setSuperview(inSectionView);
-  this.setHTMLElement(inHTMLElement);
+OutlinePlugin.prototype = new ORPlugin();  // makes OutlinePlugin be a subclass of View
+function OutlinePlugin(inSectionView, inHTMLElement,inQuery) {
+  ORPlugin.call(this,inSectionView,inHTMLElement,inQuery);
 }
 
 
@@ -76,7 +75,7 @@
  * @scope    public instance method
  */
 OutlinePlugin.prototype.refresh = function () {
-  var listOfContentItems = this.getSuperview().getListOfContentItems();
+  var listOfContentItems = this.fetchItems();
   var outlineDiv = this.getHTMLElement();
   outlineDiv.innerHTML = "";
   var ulElement = View.createAndAppendElement(outlineDiv, "ul");
@@ -98,16 +97,6 @@
 };
 
 
-/**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-OutlinePlugin.prototype.endOfLife = function () {
-  this.getHTMLElement().innerHTML = "";
-};
-
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-03 04:32:21 UTC (rev 116)
+++ trunk/source/SectionView.js	2005-06-03 05:25:58 UTC (rev 117)
@@ -100,7 +100,6 @@
   this.setHTMLElement(inHTMLElement);
   this.mySection = inSection;
   this.mySectionNumber = inSectionNumber;
-  this.myListOfContentItems = this.getListOfContentItems();
 
   this._myPlugin = null;
   this._myPluginDiv = null;
@@ -159,28 +158,7 @@
   return newPlugin;
 };
 
-
 /**
- * Returns a list of content items to be displayed in this SectionView.
- *
- * @deprecated WILL BE REMOVED ONCE ALL PLUGINS ARE CONVERTED TO RECEIVE A QUERY
- * @scope    public instance method
- * @return   A list of content items.
- */
-SectionView.prototype.getListOfContentItems = function () {
-  var attributeCalledQuery = this.getWorld().getAttributeCalledQuery();
-  var listOfEntries = this.mySection.getEntriesForAttribute(attributeCalledQuery);
-  if (listOfEntries && listOfEntries[0]) {
-    var query = listOfEntries[0].getValue();
-    this.myListOfContentItems = this.getWorld().getResultItemsForQuery(query); 
-  } else {
-    this.myListOfContentItems = [];
-  }
-  return this.myListOfContentItems;
-};
-
-
-/**
  * Returns query associated to this section.
  *
  * @scope    public instance method
@@ -225,11 +203,6 @@
   var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
   var selectedPluginName = this.mySection.getSingleStringValueFromAttribute(attributeCalledPluginName);
 
-  this.myListOfContentItems = this.getListOfContentItems();
-  if (!this.myListOfContentItems) {
-    return;
-  }
-
   var sectionDiv = this.getHTMLElement();
   var outerDiv = View.createAndAppendElement(sectionDiv, "div", SectionView.ELEMENT_CLASS_SECTION);
   var headerH2 = View.createAndAppendElement(outerDiv, "h2");

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-03 04:32:21 UTC (rev 116)
+++ trunk/source/TablePlugin.js	2005-06-03 05:25:58 UTC (rev 117)
@@ -62,16 +62,14 @@
  * @param    inSectionView    The SectionView that this TablePlugin will appears in. 
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  */
-TablePlugin.prototype = new View();  // makes TablePlugin be a subclass of View
-function TablePlugin(inSectionView, inHTMLElement, inQuery, inCellPrefix, inClassType, inCellClass) {
-  this.setSuperview(inSectionView);
-  this.setHTMLElement(inHTMLElement);  
+TablePlugin.prototype = new ORPlugin();  // makes TablePlugin be a subclass of View
+function TablePlugin(inSectionView, inHTMLElement, inQuery) {
+  ORPlugin.call(this,inSectionView,inHTMLElement,inQuery);
 
   // PENDING should probably make this independent of sectionview
-  this.myClass = inClassType || SectionView.ELEMENT_CLASS_SIMPLE_TABLE;
-  this.myCellClass = inCellClass || SectionView.ELEMENT_CLASS_PLAIN;
+  this.myClass = SectionView.ELEMENT_CLASS_SIMPLE_TABLE;
+  this.myCellClass = SectionView.ELEMENT_CLASS_PLAIN;
   this.myTable = null;
-  this._query = inQuery;
   this._sortAttribute = null;
   this._ascendingOrder = true;
 }
@@ -106,18 +104,7 @@
   return -ascendingInt;
 };
 
-
 /**
- * Gets the list of content items to display.
- *
- * @scope    PENDING
- */
-TablePlugin.prototype.fetchItems = function() {
-  this._listOfItems = this._query ? this.getWorld().getResultItemsForQuery(this._query) : [];
-};
-
-
-/**
  * Creates a hashtable containing all the attributes of the content items 
  * in this table.  Finds the union of the attribute lists of all the content items.
  *
@@ -383,16 +370,6 @@
 
 
 /**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-TablePlugin.prototype.endOfLife = function () {
-  this.getHTMLElement().innerHTML = "";
-};
-
-
-/**
  * Called when the user clicks on table header. Resorts table accordingly.
  * 
  * @scope    public class method

Modified: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-03 04:32:21 UTC (rev 116)
+++ trunk/source/demo_page.html	2005-06-03 05:25:58 UTC (rev 117)
@@ -26,6 +26,7 @@
     <script type="text/javascript" src="MultiEntriesView.js"></script>
     <script type="text/javascript" src="NavbarView.js"></script>
     <script type="text/javascript" src="TextView.js"></script>
+    <script type="text/javascript" src="ORPlugin.js"></script>
     <script type="text/javascript" src="TablePlugin.js"></script>
     <script type="text/javascript" src="OutlinePlugin.js"></script>
     <script type="text/javascript" src="DetailPlugin.js"></script>



From chaolam at sheep.berlios.de  Fri Jun  3 08:56:33 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Fri, 3 Jun 2005 08:56:33 +0200
Subject: [openrecord-svn] r118 - trunk/source
Message-ID: <200506030656.j536uXEn010518@sheep.berlios.de>

Author: chaolam
Date: 2005-06-03 08:56:31 +0200 (Fri, 03 Jun 2005)
New Revision: 118

Modified:
   trunk/source/PageView.js
Log:
oops, forgot to run LintTest on this :(

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-03 05:25:58 UTC (rev 117)
+++ trunk/source/PageView.js	2005-06-03 06:56:31 UTC (rev 118)
@@ -195,7 +195,7 @@
   }
   this.myListOfSectionViews.push(sectionView);
   return sectionView;
-}
+};
 
 /**
  * Called when the user clicks on the "New Section" button.



From chaolam at sheep.berlios.de  Fri Jun  3 20:09:57 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Fri, 3 Jun 2005 20:09:57 +0200
Subject: [openrecord-svn] r119 - trunk/source
Message-ID: <200506031809.j53I9vSl001588@sheep.berlios.de>

Author: chaolam
Date: 2005-06-03 20:09:56 +0200 (Fri, 03 Jun 2005)
New Revision: 119

Added:
   trunk/source/ORPlugin.js
Log:


Added: trunk/source/ORPlugin.js
===================================================================
--- trunk/source/ORPlugin.js	2005-06-03 06:56:31 UTC (rev 118)
+++ trunk/source/ORPlugin.js	2005-06-03 18:09:56 UTC (rev 119)
@@ -0,0 +1,99 @@
+/*****************************************************************************
+ ORPlugin.js
+
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   World.js
+//   Util.js
+// -------------------------------------------------------------------
+
+
+
+
+/**
+ * A ORPlugin display one or more content items. 
+ *
+ * @scope    public instance constructor
+ * @extends  View
+ * @param    inSuperView    The superview for this view. 
+ * @param    inHTMLElement    The HTMLElement to display this view in. 
+ * @param    inQuery  Query that produces the items for this ORPlugin to display
+ * @syntax   var ORPlugin = new ORPlugin()
+ */
+ORPlugin.prototype = new View();  // makes ORPlugin be a subclass of View
+function ORPlugin(inSuperView, inHTMLElement,inQuery) {
+  if (!inSuperView) {return;} // initial call that subclasses of ORPlugins make without parameters
+  this.setSuperview(inSuperView);
+  this.setHTMLElement(inHTMLElement);
+  this._query = inQuery;
+}
+
+
+/**
+ * Gets the list of content items to display.
+ *
+ * @scope    PENDING
+ */
+ORPlugin.prototype.fetchItems = function() {
+  if (Util.isArray(this._query)) {
+    //PENDING hack to allow Plugin to support list of items or query
+    this._listOfItems = this._query;
+  }
+  else {
+    this._listOfItems = this._query ? this.getWorld().getResultItemsForQuery(this._query) : [];
+  }
+  return this._listOfItems;
+};
+
+/**
+ * Returns the registered name of this ORPlugin.
+ *
+ * @scope    public instance method
+ * @return   A string.
+ */
+ORPlugin.prototype.getPluginName = function () {
+  Util.assert(false);
+};
+
+
+/**
+ * Does final clean-up.
+ *
+ * @scope    public instance method
+ */
+ORPlugin.prototype.endOfLife = function () {
+  this.getHTMLElement().innerHTML = "";
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at sheep.berlios.de  Fri Jun  3 21:31:56 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 3 Jun 2005 21:31:56 +0200
Subject: [openrecord-svn] r120 - trunk/documentation
Message-ID: <200506031931.j53JVuxL009044@sheep.berlios.de>

Author: skinner
Date: 2005-06-03 21:31:56 +0200 (Fri, 03 Jun 2005)
New Revision: 120

Modified:
   trunk/documentation/release_planning.txt
Log:
Marked "done" by a bunch of tasks!

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-03 18:09:56 UTC (rev 119)
+++ trunk/documentation/release_planning.txt	2005-06-03 19:31:56 UTC (rev 120)
@@ -76,24 +76,24 @@
 -------+----------+---------+----------------------------------------------
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
-Mignon |  High    | 1   ied | UI for adding an attribute to an item
-       |          |         | UI for setting the expected data type of an attribute
-Mignon |  High    | 1   ied | UI for creating a new category
-Mignon |  High    | 1   ied | UI for deleting a row from a table 
+Mignon | High     | 1   ied | UI for adding an attribute to an item
+Brian  |    done? |         | UI for setting the expected data type of an attribute
+Mignon |    done  | 1   ied | UI for creating a new category
+Mignon | High     | 1   ied | UI for deleting a row from a table 
  Chao  |   done   | 1.5 ied | UI for logging in and logging out; cookies and auto-login; display of who you're logged in as
  Chao  |   done   | 0.5 ied | UI to sort a table when you click on a column header (2 ied, needed to refactor TablePlugin to DOM level 2)
 Brian  |   done   | 1   ied | Data model: change "Value" to "Entry"; refactor entries to be per-attribute
 Brian  |   done   | 2   ied | Convert UI code to use new data model
-       |  High    |         | UI for entering a number literal (instead of a string literal) in a table
-       |  High    |         | UI for entering references to categories or to other items
-Chao   | Medium   |0.5 ied  | UI for adding a new section to a page
-       | Medium   |         | UI for editing the query that a section uses
+       | High     |         | UI for entering a number literal (instead of a string literal) in a table
+Brian  |    done? |         | UI for entering references to categories or to other items
+ Chao  |    done  |0.5 ied  | UI for adding a new section to a page
+Mignon |    done? |         | UI for editing the query that a section uses
        | Medium   |         | Verify/fix the bug that happens when you call the PHP server code with no POST data
 Brian  |   done   | 0   ied | Replace the Edit/Save button with a Lock/Unlock UI; automatically save changes as they happen
 Brian  |   done   | 1   ied | Replace the BigLumpVirtualServer with an DeltaVirtualServer; Change PHP code to append to the data file
-       |   Low    |         | Convert UI code from DOM level 0 to DOM level 2
-       |   Low    |         | Write a plugin view that calculates and displays the measured project velocity
-       |   Low    |         | UI for creating a new page
+       | Low      |         | Convert UI code from DOM level 0 to DOM level 2
+       | Low      |         | Write a plugin view that calculates and displays the measured project velocity
+Mignon |   done   |         | UI for creating a new page
  Chao  |   done   |         | UI for creating a new user
 -------+----------+---------+----------------------------------------------
  
@@ -106,7 +106,7 @@
  Chao  |   done   | 0   ied | Re-implement UI for entering a new row in a table (1.5 ied actual)
  Chao  |   done   |         | Refactor TablePlugin to DOM Level 2 (1.5 ied actual)
 Brian  |   done   | 1   ied | Ensure that UUIDs are unique in multi-user use case
-Chao   |   Medium | 1   ied | Refactor plugin class, pass a query to plugin, create Plugin base class
+ Chao  |   done   | 1   ied | Refactor plugin class, pass a query to plugin, create Plugin base class
 -------+----------+---------+----------------------------------------------
 
 
@@ -115,9 +115,9 @@
 -------+----------+---------+----------------------------------------------
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
-Mignon |   Low    |         | Generate time-based UUIDs ("version 1" UUIDs)
-Chao   | Done     | 1   ied | Allow users to view multiple entries in a table plugin cell (0.5 ied actual)
-Chao   | Done     | 2   ied | Allow users to enter/edit multiple entries in a table plugin cell (1 ied actual)
+Mignon | Low      |         | Generate time-based UUIDs ("version 1" UUIDs)
+Chao   |   done   | 1   ied | Allow users to view multiple entries in a table plugin cell (0.5 ied actual)
+Chao   |   done   | 2   ied | Allow users to enter/edit multiple entries in a table plugin cell (1 ied actual)
 -------+----------+---------+----------------------------------------------
  
 



From chaolam at sheep.berlios.de  Sun Jun  5 02:01:06 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Sun, 5 Jun 2005 02:01:06 +0200
Subject: [openrecord-svn] r121 - trunk/source
Message-ID: <200506050001.j55016qk027757@sheep.berlios.de>

Author: chaolam
Date: 2005-06-05 02:00:43 +0200 (Sun, 05 Jun 2005)
New Revision: 121

Modified:
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
Log:
1) Added experimental UI for adding/removing an attribute column from a TablePlugin

2) When saving a TextView whose expected type of attribute is a Category, formerly plain text strings are instead saved as new items, whose category is the expected category specified by the attribute

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-03 19:31:56 UTC (rev 120)
+++ trunk/source/SectionView.js	2005-06-05 00:00:43 UTC (rev 121)
@@ -361,9 +361,7 @@
   var currentQueryMatchingCategory = listOfMatchingCategories.length > 0? listOfMatchingCategories[0].getValue() : null;
   var currentCategoryName = currentQueryMatchingCategory? currentQueryMatchingCategory.getDisplayName() : "none";
  
-  if (currentCategoryName == newChoiceName) {
-    return;
-  } else {
+  if (currentCategoryName != newChoiceName) {
     if (currentQueryMatchingCategory) {
       this.getQuery().replaceEntry(currentQueryMatchingCategoryEntry, newQueryMatchingCategory);
     } else {

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-03 19:31:56 UTC (rev 120)
+++ trunk/source/TablePlugin.js	2005-06-05 00:00:43 UTC (rev 121)
@@ -203,6 +203,30 @@
 
 
 /**
+ * Builds editor to add/remove attribute columns of table
+ *
+ * @scope    private instance method
+ */
+TablePlugin.prototype._buildAttributeEditor = function() {
+  var htmlElt = this.getHTMLElement();
+  View.createAndAppendElement(htmlElt,"br");
+  var selectElt = View.createAndAppendElement(htmlElt,"select");
+  var categoryCalledAttribute = this.getWorld().getCategoryCalledAttribute();
+  var listOfAttributes = this.getWorld().getItemsInCategory(categoryCalledAttribute);
+  var optionElt = View.createAndAppendElement(selectElt,"option");
+  optionElt.text = "Add new attribute:";
+  for (var i = 0; i < listOfAttributes.length; ++i) {
+    var optionElt = View.createAndAppendElement(selectElt,"option");
+    var attributeUuid = listOfAttributes[i].getUniqueKeyString();
+    if (this._hashTableOfAttributes[attributeUuid]) {optionElt.text = '*';}
+    optionElt.text += listOfAttributes[i].getDisplayName();
+    optionElt.value = attributeUuid;
+    optionElt.onclick = this._attributeEditorChanged.bindAsEventListener(this);
+  }
+  this._selectElement = selectElt;
+};
+
+/**
  * Inserts a table row at rowNum given contentItem
  *
  * @scope    private instance method
@@ -291,18 +315,18 @@
 /**
  * Re-creates all the HTML for the TablePlugin, and hands the HTML to the 
  * browser to be re-drawn.
- *
+ * @param inDontRebuildHas, if true does not refetch query and rebuild attribute hash table
  * @scope    public instance method
  */
-TablePlugin.prototype._buildTable = function() {
+TablePlugin.prototype._buildTable = function(inDontRebuildHash) {
   // get list of items and attributes
-  this.fetchItems();
-  this._buildAttributeHash();
+  if (!inDontRebuildHash) {
+    this.fetchItems();
+    this._buildAttributeHash();
+  }
   
   //create new table, remove old table if already exists
-  if (this.myTable) {
-    this._myHTMLElement.removeChild(this.myTable); 
-  }
+  this._myHTMLElement.innerHTML = '';
   this.myTable = document.createElement("table");
   this.myTable.className = this.myClass;
   
@@ -316,6 +340,8 @@
   this._buildTableBody();
   
   this._myHTMLElement.appendChild(this.myTable);
+  
+  if (this.isInEditMode()) {this._buildAttributeEditor();}
 };
 
 
@@ -384,6 +410,27 @@
   this._buildTable();
 };
   
+/**
+ * Called when the user clicks on attribute editor item, either to add or remove attribute column
+ * 
+ * @scope    private class method
+ */
+TablePlugin.prototype._attributeEditorChanged = function (inEventObject) {
+  var attributeUuid = inEventObject.target.value;
+  if (attributeUuid) {
+    var toRemove = this._hashTableOfAttributes[attributeUuid] != null;
+    if (toRemove) {
+      delete this._hashTableOfAttributes[attributeUuid];
+      this._hashTableOfEntries[attributeUuid] = [];
+    }
+    else {
+      this._hashTableOfAttributes[attributeUuid] = this.getWorld().getItemFromUuid(attributeUuid);
+      this._hashTableOfEntries[attributeUuid] = []; //PENDING need to set this to right attribute
+    }
+    this._buildTable(true)
+  }
+};
+
 TablePlugin.prototype._handleClick = function (inEventObject, aTextView) {
   var rowElement = aTextView.getSuperview().getHTMLElement().parentNode; // textView -> multiEntriesView -> cellElment -> rowElement
   Util.assert(rowElement instanceof HTMLTableRowElement);
@@ -395,6 +442,8 @@
   }
   return false;
 };
+
+
 /**
  * Called when the user types a character when editing a table cell. 
  *

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-03 19:31:56 UTC (rev 120)
+++ trunk/source/TextView.js	2005-06-05 00:00:43 UTC (rev 121)
@@ -99,6 +99,7 @@
  *
  */
 TextView.prototype.setSuggestions = function(suggestionList) {
+  if (suggestionList) {Util.assert(Util.isArray(suggestionList));}
   this._suggestions = suggestionList;
 };
 
@@ -213,7 +214,7 @@
     if (Util.isString(newValue)) {
       newValueDisplayString = newValue;
     }
-    if (newValue instanceof Item) {
+    else if (newValue instanceof Item) {
       newValueDisplayString = newValue.getDisplayName();
     }
     this._textNode.data = newValueDisplayString;
@@ -225,14 +226,48 @@
   }
 };
 
-
 /**
+ * Given a value, this function uses hints form this item's attribute to transform
+ * the value to one more suitable for the model. 
+ * 
+ * For now, all this function does is check to see if expected type of attribute is a 
+ * type of category, and if it does not expect a plain text value then transform plain
+ * text to a new item belonging to expected category.
+ *
+ * @scope    private instance method
+ * @param    value    The new value to be saved. 
+ */
+TextView.prototype._transformToExpectedType = function(value) {
+if (value && Util.isString(value)) {
+    var repository = this.getWorld();
+    var attributeCalledExpectedType = repository.getAttributeCalledExpectedType();
+    var listOfExpectedTypeEntries = this._attribute.getEntriesForAttribute(attributeCalledExpectedType);
+    var categoryCalledCategory = repository.getCategoryCalledCategory();
+    var typeCalledText = repository.getTypeCalledText();
+    if (listOfExpectedTypeEntries) {
+      var expectsText = false;
+      var expectedCategory = null;
+      for (i=0; i<listOfExpectedTypeEntries.length; ++i) {
+        var aType = listOfExpectedTypeEntries[i].getValue();
+        if (aType.isInCategory(categoryCalledCategory)) {expectedCategory = aType;}
+        if (aType == typeCalledText) {expectsText = true;}
+      }
+      if ((expectedCategory) && !expectsText) {
+        var value = repository.newItem(value);
+        value.addEntryForAttribute(repository.getAttributeCalledCategory(),expectedCategory);
+      }
+    }
+  }
+  return value;
+};
+/**
  * Writes edited value back into item entry of repository.
  *
  * @scope    private instance method
  * @param    value    The new value to be saved. 
  */
 TextView.prototype._writeValue = function(value) {
+  value = this._transformToExpectedType(value);
   if (this._entry) {
     var oldValue = this._entry.getValue();
     if (oldValue != value) {
@@ -448,6 +483,14 @@
  *
  */
 AttributeSuggestionBox.prototype.getSelectedItem = function () {
+  if (!this._selectedItem) {
+    // check if typed item is identical to suggested item
+    var editValue = this._myInputField.value;
+    for (var i = 0; i < this._listOfSuggestedItems.length; ++i) {
+      var item = this._listOfSuggestedItems[i];
+      if (editValue == item.getDisplayName()) {return item;}
+    }
+  }
   return this._selectedItem;
 };
 



From chaolam at sheep.berlios.de  Sun Jun  5 02:10:59 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Sun, 5 Jun 2005 02:10:59 +0200
Subject: [openrecord-svn] r122 - trunk/source
Message-ID: <200506050010.j550AxAZ032121@sheep.berlios.de>

Author: chaolam
Date: 2005-06-05 02:10:54 +0200 (Sun, 05 Jun 2005)
New Revision: 122

Modified:
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
Log:
Oops, forgot to run unit tests
Brian, the new script with line numbers to errors is great! :)

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-05 00:00:43 UTC (rev 121)
+++ trunk/source/TablePlugin.js	2005-06-05 00:10:54 UTC (rev 122)
@@ -216,7 +216,7 @@
   var optionElt = View.createAndAppendElement(selectElt,"option");
   optionElt.text = "Add new attribute:";
   for (var i = 0; i < listOfAttributes.length; ++i) {
-    var optionElt = View.createAndAppendElement(selectElt,"option");
+    optionElt = View.createAndAppendElement(selectElt,"option");
     var attributeUuid = listOfAttributes[i].getUniqueKeyString();
     if (this._hashTableOfAttributes[attributeUuid]) {optionElt.text = '*';}
     optionElt.text += listOfAttributes[i].getDisplayName();
@@ -418,8 +418,7 @@
 TablePlugin.prototype._attributeEditorChanged = function (inEventObject) {
   var attributeUuid = inEventObject.target.value;
   if (attributeUuid) {
-    var toRemove = this._hashTableOfAttributes[attributeUuid] != null;
-    if (toRemove) {
+    if (this._hashTableOfAttributes[attributeUuid]) {
       delete this._hashTableOfAttributes[attributeUuid];
       this._hashTableOfEntries[attributeUuid] = [];
     }
@@ -427,7 +426,7 @@
       this._hashTableOfAttributes[attributeUuid] = this.getWorld().getItemFromUuid(attributeUuid);
       this._hashTableOfEntries[attributeUuid] = []; //PENDING need to set this to right attribute
     }
-    this._buildTable(true)
+    this._buildTable(true);
   }
 };
 

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-05 00:00:43 UTC (rev 121)
+++ trunk/source/TextView.js	2005-06-05 00:10:54 UTC (rev 122)
@@ -253,7 +253,7 @@
         if (aType == typeCalledText) {expectsText = true;}
       }
       if ((expectedCategory) && !expectsText) {
-        var value = repository.newItem(value);
+        value = repository.newItem(value);
         value.addEntryForAttribute(repository.getAttributeCalledCategory(),expectedCategory);
       }
     }



From skinner at sheep.berlios.de  Sun Jun  5 03:27:25 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sun, 5 Jun 2005 03:27:25 +0200
Subject: [openrecord-svn] r123 - trunk/documentation
Message-ID: <200506050127.j551RPM5003095@sheep.berlios.de>

Author: skinner
Date: 2005-06-05 03:27:22 +0200 (Sun, 05 Jun 2005)
New Revision: 123

Modified:
   trunk/documentation/release_planning.txt
Log:
Added to list of tasks to consider for Iteration #2.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-05 00:10:54 UTC (rev 122)
+++ trunk/documentation/release_planning.txt	2005-06-05 01:27:22 UTC (rev 123)
@@ -69,28 +69,28 @@
 Tasks we need to do for the release 0.1 user stories
 =======================================================
 
-ied == an "ideal engineering day", with just coding, and no distractions
+IED == an "ideal engineering day", with just coding, and no distractions
 
 ---------------------------------------------------------------------------
    Tasks we originally identified for release 0.1, back on May 2, 2005
 -------+----------+---------+----------------------------------------------
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
-Mignon | High     | 1   ied | UI for adding an attribute to an item
+ Chao  |    done? | 1   IED | UI for adding an attribute to an item
 Brian  |    done? |         | UI for setting the expected data type of an attribute
-Mignon |    done  | 1   ied | UI for creating a new category
-Mignon | High     | 1   ied | UI for deleting a row from a table 
- Chao  |   done   | 1.5 ied | UI for logging in and logging out; cookies and auto-login; display of who you're logged in as
- Chao  |   done   | 0.5 ied | UI to sort a table when you click on a column header (2 ied, needed to refactor TablePlugin to DOM level 2)
-Brian  |   done   | 1   ied | Data model: change "Value" to "Entry"; refactor entries to be per-attribute
-Brian  |   done   | 2   ied | Convert UI code to use new data model
+Mignon |    done  | 1   IED | UI for creating a new category
+Mignon | High     | 1   IED | UI for deleting a row from a table 
+ Chao  |   done   | 1.5 IED | UI for logging in and logging out; cookies and auto-login; display of who you're logged in as
+ Chao  |   done   | 0.5 IED | UI to sort a table when you click on a column header (2 ied, needed to refactor TablePlugin to DOM level 2)
+Brian  |   done   | 1   IED | Data model: change "Value" to "Entry"; refactor entries to be per-attribute
+Brian  |   done   | 2   IED | Convert UI code to use new data model
        | High     |         | UI for entering a number literal (instead of a string literal) in a table
 Brian  |    done? |         | UI for entering references to categories or to other items
- Chao  |    done  |0.5 ied  | UI for adding a new section to a page
+ Chao  |    done  | 0.5 IED | UI for adding a new section to a page
 Mignon |    done? |         | UI for editing the query that a section uses
        | Medium   |         | Verify/fix the bug that happens when you call the PHP server code with no POST data
-Brian  |   done   | 0   ied | Replace the Edit/Save button with a Lock/Unlock UI; automatically save changes as they happen
-Brian  |   done   | 1   ied | Replace the BigLumpVirtualServer with an DeltaVirtualServer; Change PHP code to append to the data file
+Brian  |   done   | 0   IED | Replace the Edit/Save button with a Lock/Unlock UI; automatically save changes as they happen
+Brian  |   done   | 1   IED | Replace the BigLumpVirtualServer with an DeltaVirtualServer; Change PHP code to append to the data file
        | Low      |         | Convert UI code from DOM level 0 to DOM level 2
        | Low      |         | Write a plugin view that calculates and displays the measured project velocity
 Mignon |   done   |         | UI for creating a new page
@@ -103,10 +103,10 @@
 -------+----------+---------+----------------------------------------------
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
- Chao  |   done   | 0   ied | Re-implement UI for entering a new row in a table (1.5 ied actual)
- Chao  |   done   |         | Refactor TablePlugin to DOM Level 2 (1.5 ied actual)
-Brian  |   done   | 1   ied | Ensure that UUIDs are unique in multi-user use case
- Chao  |   done   | 1   ied | Refactor plugin class, pass a query to plugin, create Plugin base class
+ Chao  |   done   | 0   IED | Re-implement UI for entering a new row in a table (1.5 IED actual)
+ Chao  |   done   |         | Refactor TablePlugin to DOM Level 2 (1.5 IED actual)
+Brian  |   done   | 1   IED | Ensure that UUIDs are unique in multi-user use case
+ Chao  |   done   | 1   IED | Refactor plugin class, pass a query to plugin, create Plugin base class
 -------+----------+---------+----------------------------------------------
 
 
@@ -116,11 +116,79 @@
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
 Mignon | Low      |         | Generate time-based UUIDs ("version 1" UUIDs)
-Chao   |   done   | 1   ied | Allow users to view multiple entries in a table plugin cell (0.5 ied actual)
-Chao   |   done   | 2   ied | Allow users to enter/edit multiple entries in a table plugin cell (1 ied actual)
+Chao   |   done   | 1   IED | Allow users to view multiple entries in a table plugin cell (0.5 IED actual)
+Chao   |   done   | 2   IED | Allow users to enter/edit multiple entries in a table plugin cell (1 IED actual)
+Chao   |   done   |         | Have Escape key undo current editing in active field
+Chao   |   done   |         | In table columns where the expected type is a Category, when the user enters text, create a new item with that name and category
 -------+----------+---------+----------------------------------------------
- 
 
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+Summary of Iteration #1, May 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  15    = number of PLANNED tasks that were finished 
+   4    = number of HIDDEN tasks that were finished 
+  15?   = total estimated IEDs for PLANNED tasks that were finished
+   5    = number of weeks in May
+   3.0? = Velocity (in estimated IEDs per week)
+
+   
+   
+---------------------------------------------------------------------------
+   Tasks that we might want to do during Iteration #2, in June 2005
+-------+----------+---------+----------------------------------------------
+Who    | Priority | Estimate| Task
+-------+----------+---------+----------------------------------------------
+       |          |         |  1. Switch data model to use time-based UUIDs for timestamps & userstamps
+       |          |         |  2. Get data model to pass the ordinal unit tests again
+       |          |         |  3. Create provisional item/entry pair in correct order
+       |          |         |  4. Make sure view code uses transactions (e.g. PageView.newSection)
+       |          |         |  5. Store transaction info in repository
+       |          |         |  6. Ensure that PHP scripts and file I/O works for concurrent multi-user access
+       |          |         |  7. Don't allow \n in page name or summary fields
+       |          |         |  8. BUG: problems with newlines and HTML characters in text strings
+       |          |         |  9. Move to better persistent representation for queries
+       |          |         | 10. Add data model support for bi-directional references
+-------+----------+---------+----------------------------------------------
+       |          |         | 11. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
+       |          |         | 12. Display Navbar pages in the right order
+       |          |         | 13. Arrow keys in SuggestionBox
+       |          |         | 14. Arrow keys in Table View
+       |          |         | 15. Have text-entries and reference-entries look different
+       |          |         | 16. Change UI so that non-literal entries are immutable
+       |          |         | 17. Implement a good URL-to-content mapping, such that URLs won't go bad in future releases
+       |          |         | 18. Provide GUI feedback about what's editable
+       |          |         | 19. Reach consensus on (colors, padding, and borders) and then implement
+-------+----------+---------+----------------------------------------------
+       |          |         | 20. Wire up observers & keep views in sync
+       |          |         | 21. Rationalize our CSS style sheets
+       |          |         | 22. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
+       |          |         | 23. Rationalize the View api and document public api
+       |          |         | 24. Document the Data model public api
+       |          |         | 25. Check for incorrect dependencies (e.g. a Util dependency on model code)
+       |          |         | 26. Create directories "util", "view", "plugin"
+       |          |         | 27. Add support for saving content when used from a file:// URL
+       |          |         | 28. Add support for repository merging
+       |          |         | 29. Add a Query.js class, and/or an Attribute.js class
+-------+----------+---------+----------------------------------------------
+       |          |         | 30. Drag and drop to re-order pages in the Navbar
+       |          |         | 31. Drag and drop to re-order columns in table view
+       |          |         | 32. Drag and drop to re-order rows in table view
+       |          |         | 33. Have explicit save instead of (or in addition to) autosave
+       |          |         | 34. Be able to cancel out of creating a new account
+       |          |         | 35. Save view layout choice and user preferences
+       |          |         | 36. BUG: back button is broken
+       |          |         | 37. BUG: "Waiting for localhost..."
+       |          |         | 38. BUG: "Node was not found" exception in TextView/LoginView?
+       |          |         | 39. Do some testing to find other existing bugs
+-------+----------+---------+----------------------------------------------
+       |          |         | 40. Do code reviews
+       |          |         | 41. Write some unit tests for GUI code
+       |          |         | 42. Write performance tests 
+       |          |         | 43. Write concurrency tests 
+       |          |         | 44. Write scalability tests 
+
        
        
 =======================================================
@@ -213,15 +281,7 @@
     able to add new columns on the fly, where each new
     column is for some new ad-hoc attribute.
 ---------------------------------------------------
- + Multi-valued attributes in table plugin
-    In the table plugin, right now if an attribute has
-    multiple values, the table plugin only shows the first
-    value, and only lets the user edit the first value. We
-    need to have the table plugin support multi-valued
-    attributes.
----------------------------------------------------
  + NavBar view
-    We should have a separate class for the NavBar view.
     The NavBar should automatically update when the name of
     a page changes, or when a new page gets added. The user
     should be able to edit the NavBar itself to change the
@@ -230,24 +290,6 @@
     the list.  For a drag-and-drop list example, see:
     http://tool-man.org/examples/sorting.html
 ---------------------------------------------------
- + Be able to create new pages
-    The user should be able to create a new page in some
-    intuitive way.  Maybe by clicking on a "Add page"
-    button at the bottom of the NavBar, or something like that.
----------------------------------------------------
- + Be able to edit the query of a section
-    The user should be able to see the query that's being
-    used to populate a section. In edit mode, the user
-    should be able to change the query criteria.
----------------------------------------------------
- + Support item references in table plugin
-    When editing an item in the table plugin, currently
-    everything you enter is treated as a string literal. If
-    you enter 'Book' in the column for 'Category', that
-    just creates a new string-value "Book", whereas it
-    should create an item reference to the category item
-    named "Book".
----------------------------------------------------
  + Be able to edit in outline mode
     In the outline plugin, add code to handle editing. The
     user should be able to add new items to an outline,
@@ -269,9 +311,9 @@
     within the current list item, rather than whisking you
     away to a completely separate item detail page.
 ---------------------------------------------------
- + Table Plugin sorting, column changing
-   Add 'Table' plugin controls for row sorting, column
-   re-arranging, column hiding, etc.
+ + Table Plugin column order
+   Add 'Table' plugin controls for column re-arranging, 
+   column hiding, etc.
 ---------------------------------------------------
  + Draft a Contributor Agreement
      We need to draft some sort of Contributor Agreement, like the Apache Contributor Agreement or the Python Contributor Agreement.
@@ -314,10 +356,6 @@
     Need to figure out a consistent "style" for using style sheets applicable
     to the way we architect our view widgets
 ---------------------------------------------------
- + Bug: Extra cell padding when editing table cells
-    Figure out why swapping between editField and textNode is causing 
-    slight visual padding
----------------------------------------------------
  + Need to rationalize View api and document public api
     - wire up superview/subview after creation of subview
     - get rid of display()
@@ -330,12 +368,6 @@
 ---------------------------------------------------
  + Q: How exactly should entering new items UI work? Not clear when an item is saved
 ---------------------------------------------------
- + Escape key
-    When the user is typing in a field, if they press the Escape key we  
-    should undo anything they've done, and revert the field to its orginal 
-    state.  To see what this should feel like, try hitting Escape in the 
-    Firefox URL field after you've made done some typing.
----------------------------------------------------
  + UI design/improvement for:
     - toggle for "edit"/"view" or "editable"/"locked"
     - adding a row to a table



From mignon at sheep.berlios.de  Mon Jun  6 09:00:50 2005
From: mignon at sheep.berlios.de (Mignon Belongie at BerliOS)
Date: Mon, 6 Jun 2005 09:00:50 +0200
Subject: [openrecord-svn] r124 - trunk/source
Message-ID: <200506060700.j5670oLu027037@sheep.berlios.de>

Author: mignon
Date: 2005-06-06 09:00:46 +0200 (Mon, 06 Jun 2005)
New Revision: 124

Modified:
   trunk/source/Util.js
   trunk/source/UtilTest.js
Log:
Got Util.generateTimeBasedUuid working and added lots of related tests.

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-05 01:27:22 UTC (rev 123)
+++ trunk/source/Util.js	2005-06-06 07:00:46 UTC (rev 124)
@@ -69,12 +69,15 @@
 // Util.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
 Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;
 
+Util.HEX_RADIX = 16;
 
 // -------------------------------------------------------------------
 // Util global class variables
 // -------------------------------------------------------------------
-Util._ourUuidPsuedoNodeString = null;
+Util._ourUuidPseudoNodeString = null;
 Util._ourUuidClockSeqString = null;
+Util._ourDateValueOfPreviousUuid = null;
+Util._ourNextIntraMillisecondIncrement = 0;
 
 // -------------------------------------------------------------------
 // String manipulation methods
@@ -307,7 +310,10 @@
  * @return   A boolean value. True if inValue is an array.
  */
 Util.isArray = function (inValue) {
-  return (inValue && ((typeof inValue) == "object") && (inValue.constructor == Array));
+  if (!inValue) {
+    return false;
+  }
+  return (((typeof inValue) == "object") && (inValue.constructor == Array));
 };
 
 
@@ -486,8 +492,7 @@
   // PENDING: 
   // This isn't really random.  We should find some source of real 
   // randomness, and feed it to an MD5 hash algorithm.     
-  var hexRadix = 16;
-  var eightCharacterString = Util.getRandom32bitNumber().toString(hexRadix);
+  var eightCharacterString = Util.getRandom32bitNumber().toString(Util.HEX_RADIX);
   while (eightCharacterString.length < 8) {
     eightCharacterString = "0" + eightCharacterString;
   }
@@ -519,7 +524,90 @@
   return result;
 };
 
+Util.carry = function(a) {
+  a[2] += a[3] >>> 16;
+  a[3] &= 0xFFFF;
+  a[1] += a[2] >>> 16;
+  a[2] &= 0xFFFF;
+  a[0] += a[1] >>> 16;
+  a[1] &= 0xFFFF;
+  Util.assert((a[0] >>> 16) === 0);
+};
 
+Util.get64bitArrayFromFloat = function(x) {
+  var result = new Array(0, 0, 0, 0);
+  result[3] = x % 0x10000;
+  x -= result[3];
+  x /= 0x10000;
+  result[2] = x % 0x10000;
+  x -= result[2];
+  x /= 0x10000;
+  result[1] = x % 0x10000;
+  x -= result[1];
+  x /= 0x10000;
+  result[0] = x;
+  return result;
+};
+
+Util.addTwo64bitArrays = function(a, b) {
+  Util.assert(Util.isArray(a));
+  Util.assert(a.length == 4);
+  Util.assert(Util.isArray(b));
+  Util.assert(b.length == 4);
+  var result = new Array(0, 0, 0, 0);
+  result[3] = a[3] + b[3];
+  result[2] = a[2] + b[2];
+  result[1] = a[1] + b[1];
+  result[0] = a[0] + b[0];
+  Util.carry(result);
+  return result;
+};
+
+Util.multiplyTwo64bitArrays = function(a, b) {
+  Util.assert(Util.isArray(a));
+  Util.assert(a.length == 4);
+  Util.assert(Util.isArray(b));
+  Util.assert(b.length == 4);
+  var overflow = false;
+  if (a[0] * b[0] !== 0) { overflow = true; }
+  if (a[0] * b[1] !== 0) { overflow = true; }
+  if (a[0] * b[2] !== 0) { overflow = true; }
+  if (a[1] * b[0] !== 0) { overflow = true; }
+  if (a[1] * b[1] !== 0) { overflow = true; }
+  if (a[2] * b[0] !== 0) { overflow = true; }
+  Util.assert(!overflow);
+  
+  var result = new Array(0, 0, 0, 0);
+  result[0] += a[0] * b[3];
+  Util.carry(result);
+  result[0] += a[1] * b[2];
+  Util.carry(result);
+  result[0] += a[2] * b[1];
+  Util.carry(result);
+  result[0] += a[3] * b[0];
+  Util.carry(result);
+  result[1] += a[1] * b[3];
+  Util.carry(result);
+  result[1] += a[2] * b[2];
+  Util.carry(result);
+  result[1] += a[3] * b[1];
+  Util.carry(result);
+  result[2] += a[2] * b[3];
+  Util.carry(result);
+  result[2] += a[3] * b[2];
+  Util.carry(result);
+  result[3] += a[3] * b[3];
+  Util.carry(result);
+  return result;
+};
+
+Util.padWithLeadingZeros = function(string, desiredLength) {
+  while (string.length < desiredLength) {
+    string = "0" + string;
+  }
+  return string;
+};
+
 /**
  * Generates a time-based UUID, meaning a "version 1" UUID.  JavaScript
  * code running in a browser doesn't have access to the IEEE 802.3 address
@@ -537,72 +625,69 @@
  * @scope    public class method
  * @return   Returns a 36 character string, which will look something like "3B12F1DF-5232-1804-897E-917BF397618A".
  */
-Util.generateTimeBasedUuid = function () {
-  if (!Util._ourUuidPsuedoNodeString) {
-    var partOne = Util.getRandomEightCharacterHexString();
-    var partTwo = Util.getRandomEightCharacterHexString();
-    var sixteenCharacterHexString = partOne + partTwo;
-    var pseudonodeIndicatorBit = "8"; // 8 == binary2hex("1000")
-    Util._ourUuidPsuedoNodeString = pseudonodeIndicatorBit + sixteenCharacterHexString.substring(0, 11);
+Util.generateTimeBasedUuid = function(pseudoNode) {
+  Util.assert(!pseudoNode || Util.isString(pseudoNode));  
+  if (pseudoNode) {
+    Util.assert(pseudoNode.length == 12);  
   }
-  
+  else {
+    if (!Util._ourUuidPseudoNodeString) {
+      var pseudoNodeIndicatorBit = 0x8000;
+      var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
+      var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(Util.HEX_RADIX);
+      Util._ourUuidPseudoNodeString = leftmost4HexCharacters + Util.getRandomEightCharacterHexString();
+    }
+    pseudoNode = Util._ourUuidPseudoNodeString;
+  }
   if (!Util._ourUuidClockSeqString) {
-    var variantCodeForDCEUuids = "8"; // 8 == binary2hex("1000")
-    var eightCharacterHexString = Util.getRandomEightCharacterHexString();
-    Util._ourUuidClockSeqString = variantCodeForDCEUuids + eightCharacterHexString.substring(0, 3);
+    var variantCodeForDCEUuids = 0x8000; // 10--------------, i.e. uses only first two of 16 bits.
+    var random14bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 14) );
+    Util._ourUuidClockSeqString = (variantCodeForDCEUuids | random14bitNumber).toString(Util.HEX_RADIX);
   }
+
+  var now = new Date();
+  var nowArray = Util.get64bitArrayFromFloat(now.valueOf());
+  var arraySecondsPerHour = Util.get64bitArrayFromFloat(60 * 60);
+  var arrayHoursBetween1582and1970 = Util.get64bitArrayFromFloat(Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS);
+  var arraySecondsBetween1582and1970 = Util.multiplyTwo64bitArrays(arrayHoursBetween1582and1970, arraySecondsPerHour);
+  var arrayMillisecondsPerSecond = Util.get64bitArrayFromFloat(1000);
+  var arrayMillisecondsBetween1582and1970 = Util.multiplyTwo64bitArrays(arraySecondsBetween1582and1970, arrayMillisecondsPerSecond);
+  var arrayMillisecondsSince1970 = nowArray;
+  var arrayMillisecondsSince1582 = Util.addTwo64bitArrays(arrayMillisecondsBetween1582and1970, arrayMillisecondsSince1970);
+  var arrayMicrosecondsPerMillisecond = Util.get64bitArrayFromFloat(1000);
+  var arrayMicrosecondsSince1582 = Util.multiplyTwo64bitArrays(arrayMillisecondsSince1582, arrayMicrosecondsPerMillisecond);
+  var arrayHundredNanosecondIntervalsPerMicrosecond = Util.get64bitArrayFromFloat(10);
+  var arrayHundredNanosecondIntervalsSince1582 = Util.multiplyTwo64bitArrays(arrayMicrosecondsSince1582, arrayHundredNanosecondIntervalsPerMicrosecond);
   
-  // Ideally, what we would like to do is just say:
-  //   var now = new Date();
-  //   var millisecondsPerSecond = 1000;
-  //
-  //   var millisecondsSince1970 = now.valueOf();
-  //   var secondsBetween1852and1970 = Util.GREGORIAN_CHANGE_OFFSET_IN_SECONDS;
-  //   var millisecondsBetween1852and1970 = secondsBetween1852and1970 * millisecondsPerSecond;
-  //   var millisecondsSince1852 = millisecondsBetween1852and1970 + millisecondsSince1970;
-  // 
-  //   var microsecondsPerMilliseconds = 1000;
-  //   var microsecondsSince1852 = millisecondsSince1852 * microsecondsPerMilliseconds;
-  //   var hundredNanosecondIntervalsPerMicroseconds = 10;
-  //   var hundredNanosecondIntervalsSince1852 = microsecondsSince1852 * hundredNanosecondIntervalsPerMicroseconds;
-  // 
-  //   var hexRadix = 16;
-  //   var hexTimeString = hundredNanosecondIntervalsSince1852.toString(hexRadix);
-  //   Util.assert(hexTimeString.length == 15);
-  //   var hexTimeHigh = hexTimeString.substring(0, 3);
-  //   var hexTimeMid = hexTimeString.substring(3, 7);
-  //   var hexTimeLow = hexTimeString.substring(7, 15);
-  // 
-  // However, that won't work, because JavaScript only has 32-bit ints and
-  // 64-bit floats, so it's only good at doing math with numbers that are
-  // roughly on the order of 10^10, or 10^15.  The number that we're trying
-  // to arrive at, hundredNanosecondIntervalsSince1852, will be about 10^17.
-  // So, to do the math, we'll have to break big numbers down into parts,
-  // and do the operations piecemeal.  For a good example of this, see
-  // the safe_add() method on line 182 of .../trunk/third_party/md5/md5.js
-  var hexTimeHigh = "NOT";
-  var hexTimeMid = "OKAY";
-  var hexTimeLow = "PENDING:";
+  if (now.valueOf() == Util._ourDateValueOfPreviousUuid) {
+    arrayHundredNanosecondIntervalsSince1582[3] += Util._ourNextIntraMillisecondIncrement;
+    Util.carry(arrayHundredNanosecondIntervalsSince1582);
+    Util._ourNextIntraMillisecondIncrement += 1;
+    if (Util._ourNextIntraMillisecondIncrement == 10000) {
+      while (now.valueOf() == Util._ourDateValueOfPreviousUuid) {
+        now = new Date();
+      }
+    }
+  }
+  else {
+    Util._ourDateValueOfPreviousUuid = now.valueOf();
+    Util._ourNextIntraMillisecondIncrement = 1;
+  }
   
+  var hexTimeLowLeftHalf  = arrayHundredNanosecondIntervalsSince1582[2].toString(Util.HEX_RADIX);
+  var hexTimeLowRightHalf = arrayHundredNanosecondIntervalsSince1582[3].toString(Util.HEX_RADIX);
+  var hexTimeLow = Util.padWithLeadingZeros(hexTimeLowLeftHalf, 4) + Util.padWithLeadingZeros(hexTimeLowRightHalf, 4);
+  var hexTimeMid = arrayHundredNanosecondIntervalsSince1582[1].toString(Util.HEX_RADIX);
+  hexTimeMid = Util.padWithLeadingZeros(hexTimeMid, 4);
+  var hexTimeHigh = arrayHundredNanosecondIntervalsSince1582[0].toString(Util.HEX_RADIX);
+  hexTimeHigh = Util.padWithLeadingZeros(hexTimeHigh, 3);
   var hyphen = "-";
-  var versionCodeForTimeBasedUuids = "1"; // 8 == binary2hex("0001")
+  var versionCodeForTimeBasedUuids = "1"; // binary2hex("0001")
   var resultUuid = hexTimeLow + hyphen + hexTimeMid + hyphen +
         versionCodeForTimeBasedUuids + hexTimeHigh + hyphen +
-        Util._ourUuidClockSeqString + hyphen + Util._ourUuidPsuedoNodeString;
-        
-  /*
-  var now = new Date();
-  var millisecondsSince1970 = now.valueOf();
-  var millisecondsPerHour = 3600000; 
-  var hoursSince1970 = millisecondsSince1970 / millisecondsPerHour;
-  var wholeHoursSince1970 = Math.floor(hoursSince1970);
-  var partialHoursSince1970inMS = millisecondsSince1970 - (wholeHoursSince1970 * millisecondsPerHour);
-  var foo = partialHoursSince1970inMS / millisecondsPerHour;
-  alert(hoursSince1970 + "\n" + wholeHoursSince1970 + "\n" + foo);
-  var hoursSince1582 = Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS + wholeHoursSince1970;
-  */
-  
-  return null;
+        Util._ourUuidClockSeqString + hyphen + pseudoNode;
+//alert(resultUuid);
+  return resultUuid;
 };
 
 

Modified: trunk/source/UtilTest.js
===================================================================
--- trunk/source/UtilTest.js	2005-06-05 01:27:22 UTC (rev 123)
+++ trunk/source/UtilTest.js	2005-06-06 07:00:46 UTC (rev 124)
@@ -74,38 +74,146 @@
   assertTrue('md5 of longString is correct', (Util.hex_md5(longString) == "4d694e03af399831c6f0c1f1bcc2fc93"));
 }
 
-function testMethodsForWorkingWithUuids() {
+function testGet64bitArrayFromFloat() {
+  var x = Math.pow(2, 63) + Math.pow(2, 15);
+  var result = Util.get64bitArrayFromFloat(x);
+  assertTrue("result[0] == 0x8000", result[0] === 0x8000);
+  assertTrue("result[1] == 0x0000", result[1] === 0x0000);
+  assertTrue("result[2] == 0x0000", result[2] === 0x0000);
+  assertTrue("result[3] == 0x8000", result[3] === 0x8000);
   
-  var uuidString = Util.generateRandomUuid();
-  assertTrue('UUIDs have 36 characters', (uuidString.length == 36));
+  var date = new Date();
+  x = date.valueOf();
+  result = Util.get64bitArrayFromFloat(x);
+  var reconstructedFloat = result[0];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[1];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[2];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[3];
+  
+  assertTrue("reconstructedFloat === x", reconstructedFloat === x);
+}
 
+function testAddTwo64bitArrays() {
+  var a = [0x0000, 0x0000, 0x0000, 0x0001];
+  var b = [0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF];
+  var result = Util.addTwo64bitArrays(a, b);
+  assert(result[0] === 0x1000);
+  assert(result[1] === 0x0000);
+  assert(result[2] === 0x0000);
+  assert(result[3] === 0x0000);
+  
+  a = [0x4000, 0x8000, 0x8000, 0x8000];
+  b = [0x8000, 0x8000, 0x8000, 0x8000];
+  result = Util.addTwo64bitArrays(a, b);
+  assert(result[0] === 0xC001);
+  assert(result[1] === 0x0001);
+  assert(result[2] === 0x0001);
+  assert(result[3] === 0x0000);
+  
+  a = [7, 6, 2, 5];
+  b = [1, 0, 3, 4];
+  result = Util.addTwo64bitArrays(a, b);
+  assert(result[0] === 8);
+  assert(result[1] === 6);
+  assert(result[2] === 5);
+  assert(result[3] === 9);  
+}  
+
+function testMultiplyTwo64bitArrays() {
+  var a = [     0, 0x0000, 0x0000, 0x0003];
+  var b = [0x1111, 0x1234, 0x0000, 0xFFFF];
+  var result = Util.multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0x3333);
+  assert(result[1] === 0x369C);
+  assert(result[2] === 0x0002);
+  assert(result[3] === 0xFFFD);
+  
+  a = [0, 0, 0, 5];
+  b = [0, 0, 0, 4];
+  result = Util.multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0);
+  assert(result[1] === 0);
+  assert(result[2] === 0);
+  assert(result[3] === 20);  
+  
+  a = [0, 0, 2, 5];
+  b = [0, 0, 3, 4];
+  result = Util.multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0);
+  assert(result[1] === 6);
+  assert(result[2] === 23);
+  assert(result[3] === 20);  
+}  
+
+function subtestOnUuid(uuid) {
+  assertTrue('UUIDs have 36 characters', (uuid.length == 36));
+
   var validCharacters = "0123456789abcedfABCDEF-";
   var character;
   var position;
   for (var i = 0; i < 36; ++i) {
-    character = uuidString.charAt(i);
+    character = uuid.charAt(i);
     position = validCharacters.indexOf(character);
     assertTrue('UUIDs have only valid characters', (position != -1));
   }
   
-  var arrayOfParts = uuidString.split("-");
-  assertTrue('UUIDs have 5 sections separated by 4 hypens', (arrayOfParts.length == 5));
+  var arrayOfParts = uuid.split("-");
+  assertTrue('UUIDs have 5 sections separated by 4 hyphens', (arrayOfParts.length == 5));
   assertTrue('Section 0 has 8 characters', (arrayOfParts[0].length == 8));
   assertTrue('Section 1 has 4 characters', (arrayOfParts[1].length == 4));
   assertTrue('Section 2 has 4 characters', (arrayOfParts[2].length == 4));
   assertTrue('Section 3 has 4 characters', (arrayOfParts[3].length == 4));
   assertTrue('Section 4 has 8 characters', (arrayOfParts[4].length == 12));
   
+  var section3 = arrayOfParts[3];
+  var hex3 = parseInt(section3, Util.HEX_RADIX);
+  var binaryString = hex3.toString(2);
+  assertTrue("first bit of section 3 is 1", binaryString.charAt(0) == '1');
+  assertTrue("second bit of section 3 is 0", binaryString.charAt(1) == '0');
+  
+  var section4 = arrayOfParts[4];
+  var firstChar = section4.charAt(0);
+  var hexFirstChar = parseInt(firstChar, Util.HEX_RADIX);
+  binaryString = hexFirstChar.toString(2);
+  assertTrue("first bit of section 4 is 1", binaryString.charAt(0) == '1');
+}
+
+function testMethodsForWorkingWithRandomUuids() {
+  var uuid1 = Util.generateRandomUuid();
+  subtestOnUuid(uuid1);
+  var uuid2 = Util.generateRandomUuid();
+  subtestOnUuid(uuid2);
+  
+  var arrayOfParts = uuid1.split("-");
   var section2 = arrayOfParts[2];
   assertTrue('Section 2 starts with a 4', (section2.charAt(0) == "4"));
   
-  var section3 = arrayOfParts[3];
-  var validCharactersForStartOfSection3 = "89abAB";
-  character = section3.charAt(0);
-  position = validCharactersForStartOfSection3.indexOf(character);
-  assertTrue('Section 3 starts with 8, 9, A, or B', (position != -1));
+  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
+}
+
+function testMethodsForWorkingWithTimeBasedUuids() {
+  var uuid1 = Util.generateTimeBasedUuid();
+  subtestOnUuid(uuid1);
+  var uuid2 = Util.generateTimeBasedUuid();
+  subtestOnUuid(uuid2);
+  var uuid3 = Util.generateTimeBasedUuid();
+  subtestOnUuid(uuid3);
+
+  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
+  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
   
-  // var uuidString = Util.generateTimeBasedUuid();
+  var arrayOfParts = uuid1.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
+
+  var uuid4 = Util.generateTimeBasedUuid("123456789ABC");
+  subtestOnUuid(uuid4);
+  arrayOfParts = uuid4.split("-");
+  var section4 = arrayOfParts[4];
+  assertTrue('Section 4 = pseudoNode input', section4 == "123456789ABC");
 }
 
 function tearDown() {



From skinner at sheep.berlios.de  Mon Jun  6 19:00:00 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Mon, 6 Jun 2005 19:00:00 +0200
Subject: [openrecord-svn] r125 - in trunk: documentation source
Message-ID: <200506061700.j56H00aL029986@sheep.berlios.de>

Author: skinner
Date: 2005-06-06 18:59:56 +0200 (Mon, 06 Jun 2005)
New Revision: 125

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/ORPlugin.js
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/Util.js
   trunk/source/UtilTest.js
Log:
Just added some comment lines.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-06 07:00:46 UTC (rev 124)
+++ trunk/documentation/release_planning.txt	2005-06-06 16:59:56 UTC (rev 125)
@@ -115,7 +115,7 @@
 -------+----------+---------+----------------------------------------------
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
-Mignon | Low      |         | Generate time-based UUIDs ("version 1" UUIDs)
+Mignon |   done   |         | Generate time-based UUIDs ("version 1" UUIDs)
 Chao   |   done   | 1   IED | Allow users to view multiple entries in a table plugin cell (0.5 IED actual)
 Chao   |   done   | 2   IED | Allow users to enter/edit multiple entries in a table plugin cell (1 IED actual)
 Chao   |   done   |         | Have Escape key undo current editing in active field
@@ -140,6 +140,8 @@
 -------+----------+---------+----------------------------------------------
 Who    | Priority | Estimate| Task
 -------+----------+---------+----------------------------------------------
+       |          |         |     Have identifiedRecord.getTimestamp() get the time from the UUID 
+       |          |         |     Have identifiedRecord.getUserstamp() get the user from the UUID
        |          |         |  1. Switch data model to use time-based UUIDs for timestamps & userstamps
        |          |         |  2. Get data model to pass the ordinal unit tests again
        |          |         |  3. Create provisional item/entry pair in correct order

Modified: trunk/source/ORPlugin.js
===================================================================
--- trunk/source/ORPlugin.js	2005-06-06 07:00:46 UTC (rev 124)
+++ trunk/source/ORPlugin.js	2005-06-06 16:59:56 UTC (rev 125)
@@ -2,7 +2,8 @@
  ORPlugin.js
 
 ******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+ Written in 2005 by 
+    Chih-Chao Lam <chao at cs.stanford.edu>
 
  Copyright rights relinquished under the Creative Commons  
  Public Domain Dedication:

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-06 07:00:46 UTC (rev 124)
+++ trunk/source/PageView.js	2005-06-06 16:59:56 UTC (rev 125)
@@ -2,7 +2,9 @@
  PageView.js
  
 ******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Chih-Chao Lam <chao at cs.stanford.edu>
   
  Copyright rights relinquished under the Creative Commons  
  Public Domain Dedication:

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-06 07:00:46 UTC (rev 124)
+++ trunk/source/SectionView.js	2005-06-06 16:59:56 UTC (rev 125)
@@ -2,7 +2,10 @@
  SectionView.js
  
 ******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Chih-Chao Lam <chao at cs.stanford.edu>
+    Mignon Belongie
   
  Copyright rights relinquished under the Creative Commons  
  Public Domain Dedication:
@@ -367,9 +370,19 @@
     } else {
       this.getQuery().addEntryForAttribute(attributeCalledQueryMatchingCategory, newQueryMatchingCategory);
     }
+    // I think we need these next 3 lines in to make sure the view gets updated  
+    // to reflect the new query.  When we get a chance we should probably do 
+    // some refactoring so that the plugin can register as an observer of the
+    // query item, and then the plugin itself can know what to do when the
+    // query item changes.  
     var pluginName = this._myPlugin.getPluginName();
     this._myPlugin.endOfLife();
     this._myPlugin = this.getPluginFromPluginName(pluginName, this._myPluginDiv);
+
+    // PENDING:
+    // These next 8 lines look like a mistake.  Maybe they're a result of a 
+    // copy & paste error.  I think we can just delete them, but I'm not brave
+    // enough right now!
     var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
     var pluginNameEntries = this.mySection.getEntriesForAttribute(attributeCalledPluginName);
     if (pluginNameEntries && pluginNameEntries[0]) {
@@ -378,6 +391,7 @@
     } else {
       this.mySection.addEntryForAttribute(attributeCalledPluginName, pluginName);
     }
+
     this.refresh();
   }
 };

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-06 07:00:46 UTC (rev 124)
+++ trunk/source/Util.js	2005-06-06 16:59:56 UTC (rev 125)
@@ -5,6 +5,7 @@
  Written in 2005 by 
     Brian Douglas Skinner <brian.skinner at gumption.org>
     Chih-Chao Lam <chao at cs.stanford.edu>
+    Mignon Belongie
   
  Copyright rights relinquished under the Creative Commons  
  Public Domain Dedication:
@@ -664,8 +665,19 @@
     Util.carry(arrayHundredNanosecondIntervalsSince1582);
     Util._ourNextIntraMillisecondIncrement += 1;
     if (Util._ourNextIntraMillisecondIncrement == 10000) {
+      // If we've gotten to here, it means we've already generated 10,000
+      // UUIDs in this single milliseconds, which is the most that the UUID
+      // timestamp field allows for.  The only thing to do now is just sit
+      // and wait for a fraction of a millisecond, so that we're working
+      // with a different millisecond value in the timestamp field.
       while (now.valueOf() == Util._ourDateValueOfPreviousUuid) {
         now = new Date();
+        // PENDING:
+        // There's a bug here, isn't there?  Now that have a fresh new 
+        // "now" value, we can get a generate a valid timestamp, but we
+        // don't actually do that.  Don't we now need to go back up 30
+        // lines, and start over with all the work to calculate
+        // arrayHundredNanosecondIntervalsSince1582 ?
       }
     }
   }

Modified: trunk/source/UtilTest.js
===================================================================
--- trunk/source/UtilTest.js	2005-06-06 07:00:46 UTC (rev 124)
+++ trunk/source/UtilTest.js	2005-06-06 16:59:56 UTC (rev 125)
@@ -2,7 +2,9 @@
  UtilTest.js
  
 ******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
   
  Copyright rights relinquished under the Creative Commons  
  Public Domain Dedication:



From skinner at sheep.berlios.de  Tue Jun  7 07:07:29 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 7 Jun 2005 07:07:29 +0200
Subject: [openrecord-svn] r126 - trunk/source
Message-ID: <200506070507.j5757TuV016132@sheep.berlios.de>

Author: skinner
Date: 2005-06-07 07:07:24 +0200 (Tue, 07 Jun 2005)
New Revision: 126

Modified:
   trunk/source/Util.js
Log:
Doh!  I was wrong.  Again.  Just removed my comment about the possible timing bug.

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-06 16:59:56 UTC (rev 125)
+++ trunk/source/Util.js	2005-06-07 05:07:24 UTC (rev 126)
@@ -667,17 +667,12 @@
     if (Util._ourNextIntraMillisecondIncrement == 10000) {
       // If we've gotten to here, it means we've already generated 10,000
       // UUIDs in this single milliseconds, which is the most that the UUID
-      // timestamp field allows for.  The only thing to do now is just sit
-      // and wait for a fraction of a millisecond, so that we're working
-      // with a different millisecond value in the timestamp field.
+      // timestamp field allows for.  So now we'll just sit here and wait
+      // for a fraction of a millisecond, so as to ensure that the next 
+      // time this method is called there will be a different millisecond 
+      // value in the timestamp field.
       while (now.valueOf() == Util._ourDateValueOfPreviousUuid) {
         now = new Date();
-        // PENDING:
-        // There's a bug here, isn't there?  Now that have a fresh new 
-        // "now" value, we can get a generate a valid timestamp, but we
-        // don't actually do that.  Don't we now need to go back up 30
-        // lines, and start over with all the work to calculate
-        // arrayHundredNanosecondIntervalsSince1582 ?
       }
     }
   }



From skinner at sheep.berlios.de  Wed Jun  8 02:03:17 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 8 Jun 2005 02:03:17 +0200
Subject: [openrecord-svn] r127 - trunk/documentation
Message-ID: <200506080003.j5803H1R020941@sheep.berlios.de>

Author: skinner
Date: 2005-06-08 02:03:04 +0200 (Wed, 08 Jun 2005)
New Revision: 127

Modified:
   trunk/documentation/release_planning.txt
Log:
edited list of upcoming tasks to reflect decisions from the meeting on monday

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-07 05:07:24 UTC (rev 126)
+++ trunk/documentation/release_planning.txt	2005-06-08 00:03:04 UTC (rev 127)
@@ -125,71 +125,102 @@
 
 
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-Summary of Iteration #1, May 2005
+     Summary of Iteration #1
+            May 2005
+      May 2 to June 6, 2005
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-  15    = number of PLANNED tasks that were finished 
+  14    = number of PLANNED tasks that were finished 
    4    = number of HIDDEN tasks that were finished 
-  15?   = total estimated IEDs for PLANNED tasks that were finished
-   5    = number of weeks in May
-   3.0? = Velocity (in estimated IEDs per week)
+   5    = number of ADDITIONAL tasks that were finished 
+ ~19   = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   5    = number of weeks in May iteration
+ ~ 3.8 = Velocity (in estimated IEDs per week)
 
+ 
+ 
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #2
+            June 2005
+     June 6 to June 27, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+        = number of PLANNED tasks that were finished 
+        = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   3    = number of weeks in June iteration
+        = Velocity (in estimated IEDs per week)
+
    
-   
+        
 ---------------------------------------------------------------------------
    Tasks that we might want to do during Iteration #2, in June 2005
 -------+----------+---------+----------------------------------------------
-Who    | Priority | Estimate| Task
+Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
-       |          |         |     Have identifiedRecord.getTimestamp() get the time from the UUID 
-       |          |         |     Have identifiedRecord.getUserstamp() get the user from the UUID
-       |          |         |  1. Switch data model to use time-based UUIDs for timestamps & userstamps
-       |          |         |  2. Get data model to pass the ordinal unit tests again
-       |          |         |  3. Create provisional item/entry pair in correct order
-       |          |         |  4. Make sure view code uses transactions (e.g. PageView.newSection)
-       |          |         |  5. Store transaction info in repository
-       |          |         |  6. Ensure that PHP scripts and file I/O works for concurrent multi-user access
-       |          |         |  7. Don't allow \n in page name or summary fields
-       |          |         |  8. BUG: problems with newlines and HTML characters in text strings
-       |          |         |  9. Move to better persistent representation for queries
+       |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
+       |          |         |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
+       |          |         |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
+       |          |         |  4. Store transaction info in repository
+       |          |         |  5. UI for deleting a row from a table
+       |          |         |  6. Create provisional item/entry pair in correct order
+       |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
+       |          |         |  8. UI for entering a number literal (instead of a string literal) in a table
+       |          |         |  9. UI for entering a date literal in a table (and data model support)
        |          |         | 10. Add data model support for bi-directional references
+       |          |         | 11. Move to better persistent representation for queries
+       |          |         | 12. Make sure view code uses transactions
+       |          |         | 13. Deal with \n in page name or summary fields
+       |          |         | 14. BUG: problems with newlines and HTML characters in text strings
+       |          |         | 15. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
 -------+----------+---------+----------------------------------------------
-       |          |         | 11. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
-       |          |         | 12. Display Navbar pages in the right order
-       |          |         | 13. Arrow keys in SuggestionBox
-       |          |         | 14. Arrow keys in Table View
-       |          |         | 15. Have text-entries and reference-entries look different
-       |          |         | 16. Change UI so that non-literal entries are immutable
-       |          |         | 17. Implement a good URL-to-content mapping, such that URLs won't go bad in future releases
-       |          |         | 18. Provide GUI feedback about what's editable
-       |          |         | 19. Reach consensus on (colors, padding, and borders) and then implement
+       |          |         | 16. Have text-entries and reference-entries look different
+       |          |         | 17. Write one unit test that tests GUI code
+       |          |         | 18. Write one performance test that measures the time some code takes
+       |          |         | 19. Pick one file, and do a group code review on it
+       |          |         | 20. Rationalize our CSS style sheets
+       |          |         | 21. Provide GUI feedback about what's editable
+       |          |         | 22. Reach consensus on (colors, padding, and borders) and then implement
+       |          |         | 23. Get data model to pass the ordinal unit tests again
+       |          |         | 24. Display Navbar pages in the right order
+       |          |         | 25. Arrow keys in SuggestionBox
+       |          |         | 26. Arrow keys in Table View
+       |          |         | 27. Change UI so that non-literal entries are immutable
+       |          |         | 28. Implement a good URL-to-content mapping, such that URLs won't go bad in future releases
+       |          |         | 29. Convert UI code from DOM level 0 to DOM level 2
+       |          |         | 30. Have identifiedRecord.getTimestamp() get the time from the UUID 
 -------+----------+---------+----------------------------------------------
-       |          |         | 20. Wire up observers & keep views in sync
-       |          |         | 21. Rationalize our CSS style sheets
-       |          |         | 22. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
-       |          |         | 23. Rationalize the View api and document public api
-       |          |         | 24. Document the Data model public api
-       |          |         | 25. Check for incorrect dependencies (e.g. a Util dependency on model code)
-       |          |         | 26. Create directories "util", "view", "plugin"
-       |          |         | 27. Add support for saving content when used from a file:// URL
-       |          |         | 28. Add support for repository merging
-       |          |         | 29. Add a Query.js class, and/or an Attribute.js class
+       |          |         | 31. Wire up observers & keep views in sync
+       |          |         | 32. improve UI for adding an attribute to an item
+       |          |         | 33. improve UI for setting the expected data type of an attribute
+       |          |         | 34. improve UI for creating a new category
+       |          |         | 35. improve UI for entering references to categories or to other items
+       |          |         | 36. improve UI for creating a new page
+       |          |         | 37. improve UI for adding a new section to a page
+       |          |         | 38. improve UI for creating a new user
+       |          |         | 39. improve UI for editing the query that a section uses
+       |          |         | 40. Have edit mode look like view mode, and remove the "Edit" button
+       |          |         | 41. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
+       |          |         | 42. Rationalize the View api and document public api
+       |          |         | 43. Document the Data model public api
+       |          |         | 44. Check for incorrect dependencies (e.g. a Util dependency on model code)
+       |          |         | 45. Create directories "util", "view", "plugin"
 -------+----------+---------+----------------------------------------------
-       |          |         | 30. Drag and drop to re-order pages in the Navbar
-       |          |         | 31. Drag and drop to re-order columns in table view
-       |          |         | 32. Drag and drop to re-order rows in table view
-       |          |         | 33. Have explicit save instead of (or in addition to) autosave
-       |          |         | 34. Be able to cancel out of creating a new account
-       |          |         | 35. Save view layout choice and user preferences
-       |          |         | 36. BUG: back button is broken
-       |          |         | 37. BUG: "Waiting for localhost..."
-       |          |         | 38. BUG: "Node was not found" exception in TextView/LoginView?
-       |          |         | 39. Do some testing to find other existing bugs
+       |          |         | 46. Add support for saving content when used from a file:// URL
+       |          |         | 47. Add support for repository merging
+       |          |         | 48. Add a Query.js class, and/or an Attribute.js class
+       |          |         | 49. BUG: back button is broken
+       |          |         | 50. BUG: "Waiting for localhost..."
+       |          |         | 51. BUG: "Node was not found" exception in TextView/LoginView?
+       |          |         | 52. Do some testing to find other existing bugs
+       |          |         | 53. Drag and drop to re-order pages in the Navbar
+       |          |         | 54. Drag and drop to re-order columns in table view
+       |          |         | 55. Drag and drop to re-order rows in table view
+       |          |         | 56. Have explicit save instead of (or in addition to) autosave
+       |          |         | 57. Be able to cancel out of creating a new account
+       |          |         | 58. Save view layout choice and user preferences
+       |          |         | 59. Do code reviews
+       |          |         | 60. Write concurrency tests 
+       |          |         | 61. Write scalability tests 
+       |          |         | 62. Ensure that PHP scripts and file I/O works for concurrent multi-user access
 -------+----------+---------+----------------------------------------------
-       |          |         | 40. Do code reviews
-       |          |         | 41. Write some unit tests for GUI code
-       |          |         | 42. Write performance tests 
-       |          |         | 43. Write concurrency tests 
-       |          |         | 44. Write scalability tests 
 
        
        



From mimi at osafoundation.org  Wed Jun  8 03:20:59 2005
From: mimi at osafoundation.org (Mimi Yin)
Date: Tue, 7 Jun 2005 18:20:59 -0700
Subject: [openrecord-svn] rationalizing outline view with a table
Message-ID: <AE756694-938C-4EEB-88DB-8B3209C84515@osafoundation.org>

Hi Brian,

After our meeting today, I thought a little more about how to make  
outline view and table view one in the same thing such that users can  
start out by creating data in an outline (which is an extremely  
intuitive way to go about structuring data) without regretting it  
afterwards.

Katie, I've cc:d you because you were the one who brought this to my  
attention.

Omni-outlineralso conflates an outline view with a table...however as  
we discussed, it runs into a few problems:

1. If you try to sort by a column (ie. status = Done), because items  
are organized in a hierarchical tree, the user can never really see  
all of their Done items clumped together because Omni-Outliner  
refuses to break the tree. So the best you can do is sort by the top  
node, which wouldn't get you very far.

Dinner party (Now)
     Albertson's (Now)
         Fontina (Now)
         Sparkling apple juice (Later)
         Scallions (Now)
         Marjoram (Now)
         Swordfish (Now)
         Lime (Now)
         Wine (Later)
     Order flowers (Done)
     Wash napkins (Done)
     Look up Jamie's allergies (Now)

Restock spices (Later)
     Marjoram (Now)
     Cinnamon (Later)
     Nutmeg (Later)

2. Omni-outliner also doesn't understand about a single item living  
in multiple places (ie. Marjoram lives in both Dinner  
party>>Albertson's AND Restock spices.

Proposal: What if...You could sort for real thereby flattening out  
the hierarchy. However, from any item in the list, you can open up  
the thread or hierarchy that the item belongs to.

Step 1: I've sorted the hierarchical tree above by status, therby  
flattening the tree into a plain list.

Dinner party (Now)
Albertson's (Now)
Fontina (Now)
Scallions (Now)
+ Marjoram (Now)
Swordfish (Now)
Lime (Now)
Look up Jamie's allergies (Now)
Sparkling apple juice (Later)
Wine (Later)
Restock spices (Later)
Cinnamon (Later)
Nutmeg (Later)
Order flowers (Done)
Wash napkins (Done)



Step 2: I've opened the item Marjoram so I can see its hierarchical  
context.

Dinner party (Now)
Albertson's (Now)
Fontina (Now)
Scallions (Now)

Dinner party (Now)
     Albertson's (Now)
         Fontina (Now)
         Sparkling apple juice (Later)
         Scallions (Now)
       - Marjoram (Now)
         Swordfish (Now)
         Lime (Now)
         Wine (Later)
     Order flowers (Done)
     Wash napkins (Done)
     Look up Jamie's allergies (Now)

Swordfish (Now)
Lime (Now)
Look up Jamie's allergies (Now)
Sparkling apple juice (Later)
Wine (Later)
Restock spices (Later)
Cinnamon (Later)
Nutmeg (Later)
Order flowers (Done)
Wash napkins (Done)


Step 3: The item Marjoram actually belongs to more than 1 tree. Here,  
I've chosen to view it in the context of the Dinner party tree.

Dinner party (Now)
Albertson's (Now)
Fontina (Now)
Scallions (Now)

Restock spices (Later)
   - Marjoram (Now)
     Cinnamon (Later)
     Nutmeg (Later

Swordfish (Now)
Lime (Now)
Look up Jamie's allergies (Now)
Sparkling apple juice (Later)
Wine (Later)
Restock spices (Later)
Cinnamon (Later)
Nutmeg (Later)
Order flowers (Done)
Wash napkins (Done)

This is sort of like clusters in Chandler, the only tweak is that  
these would be hierarchical clusters.


-------------- next part --------------
An HTML attachment was scrubbed...
URL: <https://lists.berlios.de/pipermail/openrecord-svn/attachments/20050607/fc5d44a8/attachment.html>

From chaolam at sheep.berlios.de  Thu Jun  9 04:29:38 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 9 Jun 2005 04:29:38 +0200
Subject: [openrecord-svn] r128 - trunk/documentation
Message-ID: <200506090229.j592TcG9006482@sheep.berlios.de>

Author: chaolam
Date: 2005-06-09 04:29:38 +0200 (Thu, 09 Jun 2005)
New Revision: 128

Modified:
   trunk/documentation/release_planning.txt
Log:


Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-08 00:03:04 UTC (rev 127)
+++ trunk/documentation/release_planning.txt	2005-06-09 02:29:38 UTC (rev 128)
@@ -162,8 +162,8 @@
        |          |         |  5. UI for deleting a row from a table
        |          |         |  6. Create provisional item/entry pair in correct order
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
-       |          |         |  8. UI for entering a number literal (instead of a string literal) in a table
-       |          |         |  9. UI for entering a date literal in a table (and data model support)
+chao   |0.5       |         |  8. UI for entering a number literal (instead of a string literal) in a table
+chao   |1         |         |  9. UI for entering a date literal in a table (and data model support)
        |          |         | 10. Add data model support for bi-directional references
        |          |         | 11. Move to better persistent representation for queries
        |          |         | 12. Make sure view code uses transactions



From skinner at sheep.berlios.de  Sat Jun 11 00:55:35 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 11 Jun 2005 00:55:35 +0200
Subject: [openrecord-svn] r130 - trunk/source
Message-ID: <200506102255.j5AMtZnd001953@sheep.berlios.de>

Author: skinner
Date: 2005-06-11 00:55:22 +0200 (Sat, 11 Jun 2005)
New Revision: 130

Modified:
   trunk/source/Util.js
   trunk/source/UtilTest.js
Log:
minor tweaks

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-10 21:37:34 UTC (rev 129)
+++ trunk/source/Util.js	2005-06-10 22:55:22 UTC (rev 130)
@@ -646,6 +646,11 @@
     Util._ourUuidClockSeqString = (variantCodeForDCEUuids | random14bitNumber).toString(Util.HEX_RADIX);
   }
 
+  // Maybe someday think about trying to make the code more readable to
+  // newcomers by creating a class called "WholeNumber" that encapsulates
+  // the methods and data structures for working with these arrays that 
+  // hold 4 16-bit numbers?  And then these variables below have names  
+  // like "wholeSecondsPerHour" rather than "arraySecondsPerHour"?
   var now = new Date();
   var nowArray = Util.get64bitArrayFromFloat(now.valueOf());
   var arraySecondsPerHour = Util.get64bitArrayFromFloat(60 * 60);

Modified: trunk/source/UtilTest.js
===================================================================
--- trunk/source/UtilTest.js	2005-06-10 21:37:34 UTC (rev 129)
+++ trunk/source/UtilTest.js	2005-06-10 22:55:22 UTC (rev 130)
@@ -195,7 +195,50 @@
 }
 
 function testMethodsForWorkingWithTimeBasedUuids() {
+  var uuid1 = Util.generateTimeBasedUuid();
+  var uuid2 = Util.generateTimeBasedUuid();
+  var uuid3 = Util.generateTimeBasedUuid();
+  
+  subtestOnUuid(uuid1);
+  subtestOnUuid(uuid2);
+  subtestOnUuid(uuid3);
+
+  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
+  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
+  
+  var arrayOfParts = uuid1.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
+
+  var section4 = arrayOfParts[4];
+  var firstChar = section4.charAt(0);
+  var hexFirstChar = parseInt(firstChar, Util.HEX_RADIX);
+  binaryString = hexFirstChar.toString(2);
+  var firstBit;
+  if (binaryString.length == 4) {
+    firstBit = binaryString.charAt(0);
+  } else {
+    firstBit = '0';
+  }
+  // alert("firstChar = " + firstChar + "\n as number = " + hexFirstChar + 
+  //      "\n in binary = " + binaryString + "\n first bit = " + firstBit);
+  assertTrue("first bit of section 4 is 1", firstBit == '1');
+
+  var uuid4 = Util.generateTimeBasedUuid("123456789ABC");
+  subtestOnUuid(uuid4);
+  arrayOfParts = uuid4.split("-");
+  section4 = arrayOfParts[4];
+  assertTrue('Section 4 = pseudoNode input', section4 == "123456789ABC");
+
+  /* 
+  // Old code that Brian wrote to try to get a sense of how
+  // many UUIDs we can create in a single millisecond 
   var array = [];
+  var now = new Date();
+  var then = new Date();
+  while (now.valueOf() == then.valueOf()) {
+    then = new Date();
+  }
   array.push(Util.generateTimeBasedUuid());
   array.push(Util.generateTimeBasedUuid());
   array.push(Util.generateTimeBasedUuid());
@@ -220,7 +263,7 @@
   array.push(Util.generateTimeBasedUuid());
   array.push(Util.generateTimeBasedUuid());
   array.push(Util.generateTimeBasedUuid());
-  /* alert(array[0] + "\n" + 
+  alert(array[0] + "\n" + 
         array[1] + "\n" + 
         array[2] + "\n" + 
         array[3] + "\n" + 
@@ -241,44 +284,6 @@
         array[18] + "\n" + 
         array[19] + "\n");
   */
-  
-  // var now = new Date();
-  var uuid1 = Util.generateTimeBasedUuid();
-  var uuid2 = Util.generateTimeBasedUuid();
-  var uuid3 = Util.generateTimeBasedUuid();
-  // var then = new Date();
-  // alert(now.valueOf() + "\n" +  then.valueOf());
-  
-  subtestOnUuid(uuid1);
-  subtestOnUuid(uuid2);
-  subtestOnUuid(uuid3);
-
-  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
-  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
-  
-  var arrayOfParts = uuid1.split("-");
-  var section2 = arrayOfParts[2];
-  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
-
-  var section4 = arrayOfParts[4];
-  var firstChar = section4.charAt(0);
-  var hexFirstChar = parseInt(firstChar, Util.HEX_RADIX);
-  binaryString = hexFirstChar.toString(2);
-  var firstBit;
-  if (binaryString.length == 4) {
-    firstBit = binaryString.charAt(0);
-  } else {
-    firstBit = '0';
-  }
-  // alert("firstChar = " + firstChar + "\n as number = " + hexFirstChar + 
-  //      "\n in binary = " + binaryString + "\n first bit = " + firstBit);
-  assertTrue("first bit of section 4 is 1", firstBit == '1');
-
-  var uuid4 = Util.generateTimeBasedUuid("123456789ABC");
-  subtestOnUuid(uuid4);
-  arrayOfParts = uuid4.split("-");
-  section4 = arrayOfParts[4];
-  assertTrue('Section 4 = pseudoNode input', section4 == "123456789ABC");
 }
 
 function tearDown() {



From skinner at sheep.berlios.de  Sat Jun 11 04:23:17 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 11 Jun 2005 04:23:17 +0200
Subject: [openrecord-svn] r131 - trunk/source/repositories/demo_page
Message-ID: <200506110223.j5B2NHnt011580@sheep.berlios.de>

Author: skinner
Date: 2005-06-11 04:23:15 +0200 (Sat, 11 Jun 2005)
New Revision: 131

Modified:
   trunk/source/repositories/demo_page/2005_may_user_list.json
Log:
no user #100 anymore

Modified: trunk/source/repositories/demo_page/2005_may_user_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_user_list.json	2005-06-10 22:55:22 UTC (rev 130)
+++ trunk/source/repositories/demo_page/2005_may_user_list.json	2005-06-11 02:23:15 UTC (rev 131)
@@ -1,7 +1,6 @@
 // User list, in JSON format
 { "format": "2005_MAY_USER_LIST", 
   "users": [
-    { "uuid": "100", "password": null },
     { "uuid": "1502", "password": "084e0343a0486ff05530df6c705c8bb4" },
     { "uuid": "6239", "password": "92eb5ffee6ae2fec3ad71c777531578f" },
     { "uuid": "6241", "password": null },



From skinner at sheep.berlios.de  Sat Jun 11 04:23:54 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 11 Jun 2005 04:23:54 +0200
Subject: [openrecord-svn] r132 - trunk/documentation
Message-ID: <200506110223.j5B2Nswx011626@sheep.berlios.de>

Author: skinner
Date: 2005-06-11 04:23:51 +0200 (Sat, 11 Jun 2005)
New Revision: 132

Modified:
   trunk/documentation/release_planning.txt
Log:
signing up!

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-11 02:23:15 UTC (rev 131)
+++ trunk/documentation/release_planning.txt	2005-06-11 02:23:51 UTC (rev 132)
@@ -158,12 +158,12 @@
        |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
        |          |         |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
        |          |         |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
-       |          |         |  4. Store transaction info in repository
+brian  | 0.5  IED |         |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
-       |          |         |  6. Create provisional item/entry pair in correct order
+brian  | 0    IED | 0       |  6. Create provisional item/entry pair in correct order
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
-chao   |0.5       |         |  8. UI for entering a number literal (instead of a string literal) in a table
-chao   |1         |         |  9. UI for entering a date literal in a table (and data model support)
+chao   | 0.5  IED |         |  8. UI for entering a number literal (instead of a string literal) in a table
+chao   | 1    IED |         |  9. UI for entering a date literal in a table (and data model support)
        |          |         | 10. Add data model support for bi-directional references
        |          |         | 11. Move to better persistent representation for queries
        |          |         | 12. Make sure view code uses transactions



From skinner at sheep.berlios.de  Sat Jun 11 05:06:55 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 11 Jun 2005 05:06:55 +0200
Subject: [openrecord-svn] r133 - in trunk: documentation source/model
Message-ID: <200506110306.j5B36tYt017443@sheep.berlios.de>

Author: skinner
Date: 2005-06-11 05:06:53 +0200 (Sat, 11 Jun 2005)
New Revision: 133

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
a few small changes

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-11 02:23:51 UTC (rev 132)
+++ trunk/documentation/release_planning.txt	2005-06-11 03:06:53 UTC (rev 133)
@@ -160,7 +160,7 @@
        |          |         |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
 brian  | 0.5  IED |         |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
-brian  | 0    IED | 0       |  6. Create provisional item/entry pair in correct order
+brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
 chao   | 0.5  IED |         |  8. UI for entering a number literal (instead of a string literal) in a table
 chao   | 1    IED |         |  9. UI for entering a date literal in a table (and data model support)

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-11 02:23:51 UTC (rev 132)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-11 03:06:53 UTC (rev 133)
@@ -103,7 +103,7 @@
  * @param    inWorld    The world that we provide data for. 
  */
 DeltaVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
-  this.__initialize(inWorld);
+  this._initialize(inWorld);
   this._loadWorldFromJsonStrings(this._myDehydratedWorld, this._myDehydratedUserList);
 };
 
@@ -145,129 +145,10 @@
   Util.assert(Util.isArray(listOfUsers));
 
   this.__loadWorldFromListOfRecordsAndUsers(listOfRecords, listOfUsers);
-  
-  /* DELETE_ME:
-  var fileFormat = dehydratedWorld[DeltaVirtualServer.JSON_MEMBER_FORMAT];
-  if (fileFormat == DeltaVirtualServer.JSON_FORMAT_2005_MARCH) {
-    // this is an old file format, circa 2005-March-16
-    var listOfItems = dehydratedWorld[DeltaVirtualServer.JSON_MEMBER_DATA];
-    Util.assert(Util.isArray(listOfItems));
-    this.__loadWorldFromOld2005MarchFormatList(listOfItems);
-  } else {
-    // this is newer file format, circa 2005-April-21
-    Util.assert(fileFormat == DeltaVirtualServer.JSON_FORMAT_2005_APRIL);
-    var listOfRecords = dehydratedWorld[DeltaVirtualServer.JSON_MEMBER_DATA];
-    var listOfUsers = dehydratedWorld[DeltaVirtualServer.JSON_MEMBER_USERS];
-    Util.assert(Util.isArray(listOfRecords));
-    this.__loadWorldFromListOfRecordsAndUsers(listOfRecords, listOfUsers);
-  }
-  */
 };
   
 
 /**
- * Loads a world of items from a dehydrated list of items.
- *
- * @scope    private instance method
- * @param    inListOfItems    A JSON list of dehydrated items. 
- */
-/*
-DeltaVirtualServer.prototype.__loadWorldFromOld2005MarchFormatList = function (inListOfItems) {
-
-  var listOfDehydratedItems = inListOfItems;
-
-  var axiomaticItem;
-  var dehydratedItem;
-  var dehydratedUuid;
-  var item;
-  var uuid;
-  var key;
-  
-  // Have the StubBackingStore load the axiomatic items, because it will
-  // correctly set the creator of those items to be the axiomatic user.
-  var listOfAxiomaticRecords = this.__loadAxiomaticItems();
-  
-  var hashTableOfAxiomaticItemsKeyedByUuid = {};
-  for (key in listOfAxiomaticRecords) {
-    var record = listOfAxiomaticRecords[key];
-    if (record instanceof Item) {
-      hashTableOfAxiomaticItemsKeyedByUuid[record._getUuid()] = record;
-    }
-  }
-  
-  this.__myWorld.beginTransaction();
-  var guestUser = this.newUser("Guest", null);
-  this.__myCurrentUser = guestUser;
-  
-  // First, go through the whole list of dehydrated items.  Find all 
-  // the UUIDs for all the items, and make Item objects for all of them.
-  // After we've done this step, we'll know the next available UUID,
-  // so we can start assigning new UUIDs to the attribute entries.
-  for (key in listOfDehydratedItems) {
-    dehydratedItem = listOfDehydratedItems[key];
-    dehydratedUuid = dehydratedItem[World.UUID_FOR_ATTRIBUTE_UUID];
-    uuid = dehydratedUuid[DeltaVirtualServer.JSON_MEMBER_VALUE];
-    axiomaticItem = hashTableOfAxiomaticItemsKeyedByUuid[uuid];
-    if (!axiomaticItem) {
-      // We only need to rehydrate the non-axiomatic items.
-      // We rely on the StubBackingStore to have loaded the axiomatic items.
-      item = this.__getItemFromUuidOrCreateNewItem(uuid);
-      Util.assert(item instanceof Item);
-    }
-  }
-  
-  // We already have Item objects for all the items we're going to
-  // rehydrate.  Now we can add attributes to them.
-  for (key in listOfDehydratedItems) {
-    dehydratedItem = listOfDehydratedItems[key];
-    dehydratedUuid = dehydratedItem[World.UUID_FOR_ATTRIBUTE_UUID];
-    uuid = dehydratedUuid[DeltaVirtualServer.JSON_MEMBER_VALUE];
-    axiomaticItem = hashTableOfAxiomaticItemsKeyedByUuid[uuid];
-    if (!axiomaticItem) {
-      // We only need to rehydrate the non-axiomatic items.
-      // We rely on the StubBackingStore to have loaded the axiomatic items.
-      item = this.__getItemFromUuidOrCreateNewItem(uuid);
-      Util.assert(item instanceof Item);
-      for (var propertyKey in dehydratedItem) {
-        if (propertyKey != World.UUID_FOR_ATTRIBUTE_UUID) { 
-          var propertyValue = dehydratedItem[propertyKey];
-          var attributeUuid = parseInt(propertyKey);
-          Util.assert(Util.isArray(propertyValue));
-          for (var entryKey in propertyValue) {
-            var entryObject = propertyValue[entryKey];
-            var valueType = entryObject[DeltaVirtualServer.JSON_MEMBER_TYPE];
-            var valueValue = entryObject[DeltaVirtualServer.JSON_MEMBER_VALUE];
-            var finalValue = null;
-            switch (valueType) {
-              case DeltaVirtualServer.JSON_TYPE_FOREIGN_UUID:
-                finalValue = this.__getItemFromUuidOrCreateNewItem(valueValue);
-                break;
-              case DeltaVirtualServer.JSON_TYPE_STRING_VALUE:
-                finalValue = valueValue;
-                break;
-              case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE:
-                finalValue = valueValue;
-                break;
-            }
-            var attribute = this.getItemFromUuid(attributeUuid);
-            item.addEntryForAttribute(attribute, finalValue);
-          }
-        }
-      }
-    }
-  }
-
-  for (key in this.__myChronologicalListOfNewlyCreatedRecords) {
-    var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
-    this.__myChronologicalListOfRecords.push(newRecord);
-  }
-  this.__myChronologicalListOfNewlyCreatedRecords = [];
-  this.__myWorld.endTransaction();
-  this.__myCurrentUser = null;
-};
-*/
-
-/**
  * Given a UUID, either (a) returns the existing item identified by that UUID, 
  * or (b) creates an new item object, set its UUID, and returns that object.
  *
@@ -369,14 +250,14 @@
     if (dehydratedVote) {
       var retainFlag = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG];
       identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
-      identifiedRecord = this.__getIdentifiedRecordFromUuid(identifiedRecordUuid);
+      identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
       var vote = new Vote(identifiedRecord, userstamp, retainFlag, timestamp);
       this.__myChronologicalListOfRecords.push(vote);
     }
     if (dehydratedOrdinal) {
       var ordinalNumber = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
       identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
-      identifiedRecord = this.__getIdentifiedRecordFromUuid(identifiedRecordUuid);
+      identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
       var ordinal = new Ordinal(identifiedRecord, userstamp, ordinalNumber, timestamp);
       this.__myChronologicalListOfRecords.push(ordinal);
     }
@@ -508,7 +389,7 @@
       listOfStrings.push('                // ' + itemDisplayNameSubstring + '\n');
       var previousEntry = entry.getPreviousEntry();
       if (previousEntry) {
-        listOfStrings.push('   "' + DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
+        listOfStrings.push('  "' + DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
       }
       var contentData = entry.getValue();
       var pickleString = "";
@@ -625,12 +506,12 @@
  * changes.
  *
  * @scope    public instance method
- * @param    inForceSave    Optional. Forces a save if set to true. 
+ * @param    forceSave    Optional. Forces a save if set to true. 
  * @return   The list of changes made. 
  */
-DeltaVirtualServer.prototype.saveChangesToServer = function (inForceSave) {
+DeltaVirtualServer.prototype.saveChangesToServer = function (forceSave) {
   var listOfChangesMade;
-  if (!inForceSave && this.__myChronologicalListOfNewlyCreatedRecords.length === 0) {
+  if (!forceSave && this.__myChronologicalListOfNewlyCreatedRecords.length === 0) {
     listOfChangesMade = [];
     return listOfChangesMade;
   }

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-11 02:23:51 UTC (rev 132)
+++ trunk/source/model/StubVirtualServer.js	2005-06-11 03:06:53 UTC (rev 133)
@@ -58,9 +58,12 @@
  * @scope    private instance method
  * @param    inWorld    The world that we provide data for. 
  */
-StubVirtualServer.prototype.__initialize = function (inWorld) {
+StubVirtualServer.prototype._initialize = function (inWorld) {
   this.__myWorld = inWorld;
   
+  this._countOfNestedTransactions = 0;
+  this._currentTransaction = null;
+
   // this.__myNextAvailableUuid = 1;
   this.__myHashTableOfItemsKeyedByUuid = {};
   this.__myHashTableOfEntriesKeyedByUuid = {};
@@ -81,29 +84,58 @@
  * @param    inWorld    The world that we provide data for. 
  */
 StubVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
-  this.__initialize(inWorld);
-  this.__loadAxiomaticItems();
+  this._initialize(inWorld);
+  this._loadAxiomaticItems();
 };
 
 
 // -------------------------------------------------------------------
-// Methods for creating and changing items
+// Transaction Methods
 // -------------------------------------------------------------------
 
 /**
- * Throws an Error if there is no user currently logged in.
+ * Marks the beginning of a transaction.
  *
- * @scope    private instance method
- * @throws   Throws an Error if no user is logged in.
+ * Each time you call beginTransaction() you open a new transaction, 
+ * which you need to close later using endTransaction().  Transactions
+ * may be nested, but the beginTransaction and endTransaction calls
+ * always need to come in pairs. 
+ *
+ * @scope    public instance method
  */
-StubVirtualServer.prototype._throwErrorIfNoUserIsLoggedIn = function () {
-  if (!this.__myCurrentUser) {
-    var error = new Error("No user is logged in.  You can't write to the repository when nobody is logged in.");
-    throw error;
+StubVirtualServer.prototype.beginTransaction = function() {
+  if (this._countOfNestedTransactions === 0) {
+    // PENDING: create a new transaction object
+    // this._currentTransaction = new Transaction();
   }
+  this._countOfNestedTransactions += 1;
 };
+ 
 
+/**
+ * Marks the end of a transaction.
+ *
+ * @scope    public instance method
+ */
+StubVirtualServer.prototype.endTransaction = function() {
+  this._countOfNestedTransactions -= 1;
+  Util.assert(this._countOfNestedTransactions >= 0);
 
+  if (this._countOfNestedTransactions === 0) {
+    var listOfChangesMade = this.saveChangesToServer();
+    if (listOfChangesMade.length > 0) {
+      // alert(listOfChangesMade.length + " changes made");
+      // Util.displayStatusBlurb(listOfChangesMade.length + " changes made");
+      this.__myWorld._notifyObserversOfChanges(listOfChangesMade);
+    }
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Methods for creating and changing items
+// -------------------------------------------------------------------
+
 /**
  * Returns a newly created item.
  *
@@ -152,7 +184,7 @@
  * @return   A newly created item.
  */
 StubVirtualServer.prototype._createNewItem = function (inObserver, inProvisionalFlag) {
-  var uuid = this.__getNewUuid();
+  var uuid = this._getNewUuid();
   var item = new Item(this.__myWorld, uuid);
   item._initialize(inObserver, inProvisionalFlag);
   this.__myHashTableOfItemsKeyedByUuid[uuid] = item;
@@ -186,7 +218,7 @@
  */
 StubVirtualServer.prototype.newEntry = function (inItemOrEntry, inAttribute, inValue) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var uuid = this.__getNewUuid();
+  var uuid = this._getNewUuid();
   var entry = new Entry(this.__myWorld, uuid);
   entry._initialize(inItemOrEntry, inAttribute, inValue);
   var item = inItemOrEntry instanceof Item ? inItemOrEntry : inItemOrEntry.getItem();
@@ -283,6 +315,10 @@
   return this.__myListOfUsers;
 };
 
+
+/**
+ *
+ */
 StubVirtualServer.prototype.getCategories = function () {
   var listOfCategories = [];
   for (var key in this.__myHashTableOfItemsKeyedByUuid) {
@@ -295,6 +331,7 @@
   return listOfCategories;
 };
 
+
 /**
  * Returns an item representing the user who is currently logged in.
  *
@@ -340,7 +377,7 @@
   if (inPassword) {
     md5hashOfPassword = Util.hex_md5(inPassword);
   }
-  var realAuthentication = this.__getAuthenticationInfoForUser(inUser);
+  var realAuthentication = this._getAuthenticationInfoForUser(inUser);
   var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);
   
   // PENDING: temporary hack
@@ -544,13 +581,27 @@
 // -------------------------------------------------------------------
 
 /**
+ * Throws an Error if there is no user currently logged in.
+ *
+ * @scope    private instance method
+ * @throws   Throws an Error if no user is logged in.
+ */
+StubVirtualServer.prototype._throwErrorIfNoUserIsLoggedIn = function () {
+  if (!this.__myCurrentUser) {
+    var error = new Error("No user is logged in.  You can't write to the repository when nobody is logged in.");
+    throw error;
+  }
+};
+
+
+/**
  * Given a UUID, returns the item or entry identified by that UUID.
  *
  * @scope    private instance method
  * @param    inUuid    The UUID of the item or entry to be returned. 
  * @return   The item or entry identified by the given UUID.
  */
-StubVirtualServer.prototype.__getIdentifiedRecordFromUuid = function (inUuid) {
+StubVirtualServer.prototype._getIdentifiedRecordFromUuid = function (inUuid) {
   var item = this.getItemFromUuid(inUuid);
   if (item) {
     return item;
@@ -566,7 +617,7 @@
  * @scope    private instance method
  * @return   A newly created UUID.
  */
-StubVirtualServer.prototype.__getNewUuid = function () {
+StubVirtualServer.prototype._getNewUuid = function () {
   // var newUuid = this.__myNextAvailableUuid;
   // this.__myNextAvailableUuid += 1;
   var newUuid = Util.generateRandomUuid();
@@ -582,7 +633,7 @@
  * @param    inUser    An item representing a user. 
  * @return   The authentication info for the user.
  */
-StubVirtualServer.prototype.__getAuthenticationInfoForUser = function (inUser) {
+StubVirtualServer.prototype._getAuthenticationInfoForUser = function (inUser) {
   return this.__myHashTableOfUserAuthenticationInfo[inUser.getUniqueKeyString()];
 };
 
@@ -595,7 +646,7 @@
  * @param    inUuid    The UUID of the item to be returned. 
  * @return   The item identified by the given UUID.
  */
-StubVirtualServer.prototype.__getItemFromUuidOrCreateNewItem = function (inUuid) {
+StubVirtualServer.prototype._getItemFromUuidOrCreateNewItem = function (inUuid) {
   var item = this.getItemFromUuid(inUuid);
   if (!item) {
     /*
@@ -628,7 +679,7 @@
  *
  * @scope    private instance method
  */
-StubVirtualServer.prototype.__loadAxiomaticItems = function () {
+StubVirtualServer.prototype._loadAxiomaticItems = function () {
   var uuid;
   var name;
   var item;
@@ -636,7 +687,7 @@
   var key;
   
   this.__myWorld.beginTransaction();
-  var axiomaticUser = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_USER_AMY);
+  var axiomaticUser = this._getItemFromUuidOrCreateNewItem(World.UUID_FOR_USER_AMY);
   axiomaticUser.__myCreationUserstamp = axiomaticUser;
   this.__myListOfUsers.push(axiomaticUser);
   this.__myHashTableOfUserAuthenticationInfo[axiomaticUser.getUniqueKeyString()] = null;
@@ -657,7 +708,7 @@
 
   // create all the Item objects for the attributes
   for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
-    this.__getItemFromUuidOrCreateNewItem(uuid);
+    this._getItemFromUuidOrCreateNewItem(uuid);
   }
   
   // associate display names with the UUIDs of all the categories
@@ -669,7 +720,7 @@
 
   // create all the Item objects for the categories
   for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
-    this.__getItemFromUuidOrCreateNewItem(uuid);
+    this._getItemFromUuidOrCreateNewItem(uuid);
   }
  
   // associate display names with the UUIDs of all the types
@@ -684,7 +735,7 @@
   
   // create all the Item objects for the types
   for (uuid in hashTableOfTypeNamesKeyedByUuid) {
-    this.__getItemFromUuidOrCreateNewItem(uuid);
+    this._getItemFromUuidOrCreateNewItem(uuid);
   }
   
   // associate expected data types with the UUIDs of some of the attributes
@@ -725,7 +776,7 @@
   }
   
   // set the names of all the categories, and put them in the category called "Category"
-  var categoryCalledCategory = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_CATEGORY);
+  var categoryCalledCategory = this._getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_CATEGORY);
   for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
     item = this.getItemFromUuid(uuid);
     name = hashTableOfCategoryNamesKeyedByUuid[uuid];
@@ -734,7 +785,7 @@
   }
 
   // set the names of all the types, and put them in the category called "Type"
-  var categoryCalledType = this.__getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_TYPE);
+  var categoryCalledType = this._getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_TYPE);
   for (uuid in hashTableOfTypeNamesKeyedByUuid) {
     item = this.getItemFromUuid(uuid);
     name = hashTableOfTypeNamesKeyedByUuid[uuid];

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-11 02:23:51 UTC (rev 132)
+++ trunk/source/model/World.js	2005-06-11 03:06:53 UTC (rev 133)
@@ -95,7 +95,6 @@
  * @param    virtualServer    Optional. The datastore that this world gets its data from. 
  */
 function World(virtualServer) {
-  this._countOfNestedTransactions = 0;
   this._hashTableOfObserverListsKeyedByItemUuid = {};
   this._listOfListObserverTuples = [];
 
@@ -154,10 +153,7 @@
  * @scope    public instance method
  */
 World.prototype.beginTransaction = function() {
-  this._countOfNestedTransactions += 1;
-  // PENDING:
-  //   This is just a stub method for now.  Once we start implementing
-  //   support for transactions we'll have to put some real code here.
+  this._virtualServer.beginTransaction();
 };
  
 
@@ -167,23 +163,10 @@
  * @scope    public instance method
  */
 World.prototype.endTransaction = function() {
-  this._countOfNestedTransactions -= 1;
-  Util.assert(this._countOfNestedTransactions >= 0);
-  // PENDING:
-  //   This is just a stub method for now.  Once we start implementing
-  //   support for transactions we'll have to put some real code here.
-  if (this._countOfNestedTransactions === 0) {
-    var listOfChangesMade = this._virtualServer.saveChangesToServer();
-    if (listOfChangesMade.length > 0) {
-      Util.displayStatusBlurb(listOfChangesMade.length + " changes made");
-      this._notifyObserversOfChanges(listOfChangesMade);
-    }
-  }
+  this._virtualServer.endTransaction();
 };
 
 
-// ===================================================================
-// PENDING: Line of Completion. Beyond there be dragons...
 /**
  * Sends notification messages to registered observers to let them know 
  * about any new changes to items or lists that they're observers of.



From chaolam at sheep.berlios.de  Tue Jun 14 03:34:13 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Tue, 14 Jun 2005 03:34:13 +0200
Subject: [openrecord-svn] r135 - in trunk: documentation source source/model source/repositories/demo_page
Message-ID: <200506140134.j5E1YDIn028123@sheep.berlios.de>

Author: chaolam
Date: 2005-06-14 03:34:10 +0200 (Tue, 14 Jun 2005)
New Revision: 135

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/MultiEntriesView.js
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/Util.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
1) TablePlugin navigation small mods
2) Added support for Dates in TextView & DeltaVirtualServer
3) Changed format of json entries 

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/documentation/release_planning.txt	2005-06-14 01:34:10 UTC (rev 135)
@@ -223,7 +223,6 @@
 -------+----------+---------+----------------------------------------------
 
        
-       
 =======================================================
 Categories and Attributes we might use for release 0.1
 =======================================================
@@ -444,4 +443,13 @@
       location: "file:///K:/www/htdocs/openrecord/demo/current/trunk/source/TextView.js Line: 221"]
       line: 0
     
+===========================       
+Issues for post iteration#2
+===========================       
++ How should we rename "VirtualServer"?
++ How should we interoperate with other repositories(openrecord + other sources of data)?
++ Should we rename "World"?
++ Should we adopt "Globals" convention for JSLint?
++ Should we get rid of semi-colon checking in JSLint?
 
+

Modified: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/MultiEntriesView.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -140,7 +140,17 @@
   this._clickFunction = inClickFunction;
 };
 
+/**
+ * Returns width for TextView edit field to set
+ * HACK: See http://lists.berlios.de/pipermail/openrecord-dev/2005-June/000120.html
+ *
+ * @scope    public instance method
+ */
 
+MultiEntriesView.prototype.getTextViewWidth = function() {
+  return this._myHTMLElement.offsetWidth;
+};
+
 /**
  *
  */
@@ -172,7 +182,13 @@
   switch (asciiValueOfKey) {
     case Util.ASCII_VALUE_FOR_LEFT_ARROW: move = -1; break;
     case Util.ASCII_VALUE_FOR_RIGHT_ARROW: move = 1; break;
-    case Util.ASCII_VALUE_FOR_RETURN: doCreateNewEntry = inEvent.altKey; break;
+    case Util.ASCII_VALUE_FOR_RETURN:
+      if (inEvent.altKey) {
+        doCreateNewEntry = true;
+        break;
+      }
+      if (inTextView != this._entryViews[this._entryViews.length-1]) {move=1;}
+      break;
     default: move = 0; break;
   }
   if (doCreateNewEntry) {
@@ -203,10 +219,11 @@
  */
 MultiEntriesView.prototype._addEntryView = function(inEntry) {
   var spanElt = document.createElement("span");
+  spanElt.style.width = '100%';
   var aTextView = new TextView(this, spanElt, this._item, this._attribute, inEntry, this._className);
   this._entryViews.push(aTextView);
+  this.getHTMLElement().appendChild(spanElt);
   aTextView.refresh();
-  this.getHTMLElement().appendChild(spanElt);
   if (this.isInEditMode()) {
     var listener = this;
     aTextView.setKeyPressFunction(function (evt, aTxtView) {return listener._keyPressOnEditField(evt, aTxtView);});

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/PageView.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -56,7 +56,7 @@
  * @param inPage  Page Item to insert new section
  * @param isNewTransaction  should new section be wrapped in a transaction?
  */
-PageView.newSection = function (repository, inPage, isNewTransaction) {
+PageView.newSection = function (repository, inPage) {
   var attributeCalledCategory = repository.getAttributeCalledCategory();
   var attributeCalledQuery = repository.getAttributeCalledQuery();
   var categoryCalledQuery = repository.getCategoryCalledQuery();
@@ -64,7 +64,7 @@
   var attributeCalledSection = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTION);
   var categoryCalledSection = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_SECTION);
   
-  if (isNewTransaction) {repository.beginTransaction();}
+  repository.beginTransaction();
   var newSection = repository.newItem("New Section");
   newSection.addEntryForAttribute(attributeCalledCategory, categoryCalledSection);
   inPage.addEntryForAttribute(attributeCalledSection, newSection);
@@ -72,7 +72,7 @@
   var newQuery = repository.newItem("New Query");
   newQuery.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
   newSection.addEntryForAttribute(attributeCalledQuery, newQuery);
-  if (isNewTransaction) {repository.endTransaction();}
+  repository.endTransaction();
   return newSection;
 };
 
@@ -205,7 +205,7 @@
  * @scope    private instance method
  */
 PageView.prototype._addNewSection = function() {
-  var newSection = PageView.newSection(this.getWorld(), this.myPage ,true);
+  var newSection = PageView.newSection(this.getWorld(), this.myPage);
   this._buildNewSection(newSection, this._editModeDiv).refresh();
 };
 

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/RootView.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -360,7 +360,7 @@
   // newPage.addEntryForAttribute(shortName, "New Page");
   newPage.addEntryForAttribute(attributeCalledCategory, categoryCalledPage);
   newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
-  PageView.newSection(repository,newPage,false);
+  PageView.newSection(repository,newPage);
   repository.endTransaction();
   
   this.myHashTableOfPagesKeyedByUuid[newPage._getUuid()] = newPage;

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/TablePlugin.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -189,7 +189,7 @@
     for (key in listOfCategories) {
       var category = listOfCategories[key];
       var listOfItems = this.getWorld().getItemsInCategory(category);
-      for (keyToo in listOfItems) {
+      for (var keyToo in listOfItems) {
         var item = listOfItems[keyToo];
         Util.addObjectToSet(item, listOfSuggestedItems);
       }
@@ -409,8 +409,24 @@
   }
   this._buildTable();
 };
-  
+
 /**
+ * Called when the user clicks on table header. Resorts table accordingly.
+ * 
+ * @scope    public class method
+ */
+TablePlugin.prototype.selectRow = function (rowElement) {
+  Util.assert(rowElement instanceof HTMLTableRowElement);
+  if (rowElement != this._lastSelectedRow) {
+    if (this._lastSelectedRow) {this._lastSelectedRow.style.background = "rgb(100%,100%,100%)";}
+    this._lastSelectedRow = rowElement;
+    rowElement.style.background = "rgb(100%,100%,0%)";
+    return true;
+  }
+  return false;
+};
+ 
+/**
  * Called when the user clicks on attribute editor item, either to add or remove attribute column
  * 
  * @scope    private class method
@@ -432,14 +448,7 @@
 
 TablePlugin.prototype._handleClick = function (inEventObject, aTextView) {
   var rowElement = aTextView.getSuperview().getHTMLElement().parentNode; // textView -> multiEntriesView -> cellElment -> rowElement
-  Util.assert(rowElement instanceof HTMLTableRowElement);
-  if (rowElement != this._lastSelectedRow) {
-    if (this._lastSelectedRow) {this._lastSelectedRow.style.background = "rgb(100%,100%,100%)";}
-    this._lastSelectedRow = rowElement;
-    rowElement.style.background = "rgb(100%,100%,0%)";
-    return true;
-  }
-  return false;
+  return this.selectRow(rowElement);
 };
 
 
@@ -530,6 +539,7 @@
         userHitReturnInLastRow = true;
       }
       var nextRow = this.myTable.rows[nextRowNumber];
+      this.selectRow(nextRow);
       nextCell = nextRow.cells[cellElement.cellIndex];
     }
     

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/TextView.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -67,7 +67,8 @@
   
   this.setSuperview(theSuperview);
   this.setHTMLElement(inElement);
-  inElement.style.width = inElement.style.height = "100%"; // make this element expand to fill parent element where possible
+  //inElement.style.width =
+  inElement.style.height = "100%"; // make this element expand to fill parent element where possible
   this._item = inItem;
   this._attribute = inAttribute;
   this._entry = inEntry;
@@ -109,7 +110,7 @@
  * the item's attribute values.
  *
  * @scope    public instance method
- */
+*/
 TextView.prototype.refresh = function() {
   if (!this._myHasEverBeenDisplayedFlag) {
     this._buildView();
@@ -172,6 +173,11 @@
       editField.onfocus = this.onFocus.bindAsEventListener(this);
       editField.defaultValue = this._isProvisional ? '' : this._textNode.data;
     }
+    
+    if (this._mySuperview.getTextViewWidth) {
+      //editField.style.width = this._mySuperview.getTextViewWidth() + "px";
+      editField.size = 1;
+    }
     //editField.style.width = this.getHTMLElement().offsetWidth + "px";    
     //editField.style.height = (this.getHTMLElement().offsetHeight) + "px";
     
@@ -244,18 +250,36 @@
     var listOfExpectedTypeEntries = this._attribute.getEntriesForAttribute(attributeCalledExpectedType);
     var categoryCalledCategory = repository.getCategoryCalledCategory();
     var typeCalledText = repository.getTypeCalledText();
+    var typeCalledDate = repository.getTypeCalledDate();
+    var typeCalledNumber = repository.getTypeCalledNumber();
     if (listOfExpectedTypeEntries) {
-      var expectsText = false;
-      var expectedCategory = null;
       for (i=0; i<listOfExpectedTypeEntries.length; ++i) {
         var aType = listOfExpectedTypeEntries[i].getValue();
-        if (aType.isInCategory(categoryCalledCategory)) {expectedCategory = aType;}
-        if (aType == typeCalledText) {expectsText = true;}
+        switch (aType) {
+          case typeCalledText:
+            return value;
+          case typeCalledNumber:
+            var floatVal = parseFloat(value);
+            if (floatVal != NaN) {return floatVal;}
+            break;
+          case typeCalledDate:
+            var dateVal = Date.parse(value);
+            if (dateVal != NaN) {return new Date(value);}
+            break;
+          default:
+            if (aType.isInCategory(categoryCalledCategory)) {
+              value = repository.newItem(value);
+              value.addEntryForAttribute(repository.getAttributeCalledCategory(),aType);
+              if (this._suggestions) {
+                // add to new item to suggestion list if list is present
+                // PENDING: should this be using an observer instead?
+                Util.addObjectToSet(value, this._suggestions);
+              }
+              return value;
+            }
+            break;
+        }
       }
-      if ((expectedCategory) && !expectsText) {
-        value = repository.newItem(value);
-        value.addEntryForAttribute(repository.getAttributeCalledCategory(),expectedCategory);
-      }
     }
   }
   return value;

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/Util.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -179,7 +179,7 @@
       }
       stackString = stackList.join("\n");
 
-      Util.ourErrorReporter("An assert statement failed.\nThe method Util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
+      Util.ourErrorReporter("An assert statement failed with mesg: \n" + inMessage + " \nThe method Util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
     }
   } else {
     Util.ourErrorReporter("An assert statement went sour.\nThe method Util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
@@ -304,6 +304,18 @@
 
 
 /**
+ * Returns true if the given value is a Date.
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is aDate.
+ */
+Util.isDate = function (inValue) {
+  return (inValue instanceof Date);
+};
+
+
+/**
  * Returns true if the given value is an array.
  *
  * @scope    public class method

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -61,6 +61,9 @@
 DeltaVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
 DeltaVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
 DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
+DeltaVirtualServer.JSON_TYPE_DATE_VALUE = "DateValue";
+DeltaVirtualServer.JSON_TYPE_CHECKMARK_VALUE = "CheckMarkValue";
+DeltaVirtualServer.JSON_TYPE_URL_VALUE = "UrlValue";
 
 DeltaVirtualServer.JSON_MEMBER_WUID = "uuid";
 DeltaVirtualServer.JSON_MEMBER_PASSWORD = "password";
@@ -104,10 +107,36 @@
  */
 DeltaVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
   this._initialize(inWorld);
+  this._buildTypeHashTable();
   this._loadWorldFromJsonStrings(this._myDehydratedWorld, this._myDehydratedUserList);
 };
 
+DeltaVirtualServer.prototype._buildTypeHashTable = function () {
+  var text      = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_TEXT);
+  var number    = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_NUMBER);
+  var dateType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_DATE);
+  var checkMark = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CHECK_MARK);
+  var url       = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_URL);
+  var itemType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_ITEM);
+  
+  /*
+  var text = this.getWorld().getTypeCalledText();
+  var number = this.getWorld().getTypeCalledNumber();
+  var dateType = this.getWorld().getTypeCalledDate();
+  var checkMark = this.getWorld().getTypeCalledCheckMark();
+  var url = this.getWorld().getTypeCalledUrl();
+  var itemType = this.getWorld().getTypeCalledItem();
+  */
 
+  this._myHashTableOfTypesKeyedByToken = {};
+  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_STRING_VALUE] = text;
+  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE] = number;
+  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_DATE_VALUE] = dateType;
+  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
+  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_URL_VALUE] = url;
+  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_RELATED_UUID] = itemType;
+};
+
 // -------------------------------------------------------------------
 // Private Methods
 // -------------------------------------------------------------------
@@ -275,11 +304,11 @@
       if (previousEntryUuid) {
         previousEntry = this.__getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
       }
-      var pickledData = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_VALUE];
-      var dataType = pickledData[DeltaVirtualServer.JSON_MEMBER_TYPE];
-      var rawData = pickledData[DeltaVirtualServer.JSON_MEMBER_VALUE];
+      var rawData = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_VALUE];
+      var dataTypeToken = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_TYPE];
+      var dataType = this._getTypeFromTypeToken(dataTypeToken);
       var finalData = null;
-      switch (dataType) {
+      switch (dataTypeToken) {
         case DeltaVirtualServer.JSON_TYPE_RELATED_UUID:
           finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
           break;
@@ -289,10 +318,13 @@
         case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE:
           finalData = rawData;
           break;
+        case DeltaVirtualServer.JSON_TYPE_Date_VALUE:
+          finalData = new Date(rawData);
+          break;
       }
       var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
       var itemOrEntry = previousEntry || item;
-      entry._rehydrate(itemOrEntry, attribute, finalData, timestamp, userstamp);
+      entry._rehydrate(itemOrEntry, attribute, finalData, timestamp, userstamp, dataType);
       this.__myChronologicalListOfRecords.push(entry);
     }
   }
@@ -328,7 +360,21 @@
   }
 };
 
+DeltaVirtualServer.prototype._getTypeTokenFromType = function (inType) {
 
+  for (var token in this._myHashTableOfTypesKeyedByToken) {
+    typeItem = this._myHashTableOfTypesKeyedByToken[token];
+    if (inType == typeItem) {
+      return token;
+    }
+  }
+  Util.assert(false, "no such type: " + inType.getDisplayName());
+};
+
+DeltaVirtualServer.prototype._getTypeFromTypeToken = function (inToken) {
+  return this._myHashTableOfTypesKeyedByToken[inToken];
+};
+
 /**
  * Returns a big string, containing JavaScript "object literal"
  * representations of the records.
@@ -392,23 +438,28 @@
         listOfStrings.push('  "' + DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
       }
       var contentData = entry.getValue();
-      var pickleString = "";
-      var typeString = null;
+      var entryType = entry.getType();
+      var typeToken = this._getTypeTokenFromType(entryType);
+      listOfStrings.push('           "' + DeltaVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
+      
       var valueString = null;
-      if (Util.isNumber(contentData)) {
-        typeString = DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE;
-        valueString = contentData;
+      switch (typeToken) {
+        case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE: 
+          valueString = contentData;
+          break;
+        case DeltaVirtualServer.JSON_TYPE_STRING_VALUE: 
+          valueString = '"' + contentData + '"';
+          break;
+        case DeltaVirtualServer.JSON_TYPE_DATE_VALUE: 
+          valueString = '"' + contentData.toString() + '"';
+          break;
+        case DeltaVirtualServer.JSON_TYPE_RELATED_UUID: 
+          valueString = '"' + contentData._getUuid() + '"';
+          break;
+        default:
+          Util.assert(false, "no such type: " + typeToken);
       }
-      if (Util.isString(contentData)) {
-        typeString = DeltaVirtualServer.JSON_TYPE_STRING_VALUE;
-        valueString = '"' + contentData + '"';
-      }
-      if (contentData instanceof Item) {
-        typeString = DeltaVirtualServer.JSON_TYPE_RELATED_UUID;
-        valueString = '"' + contentData._getUuid() + '"';
-      }
-      pickleString = '{ "' + DeltaVirtualServer.JSON_MEMBER_TYPE + '": "' + typeString + '", "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ' }';
-      listOfStrings.push('          "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + pickleString + ',\n');
+      listOfStrings.push('          "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ',\n');
     }
     Util.assert(record.getUserstamp() !== null);
     listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '",');

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/model/Entry.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -61,6 +61,7 @@
 
   this.__myAttribute = null;
   this.__myValue = null;
+  this._myType = null;
 }
 
 
@@ -78,8 +79,9 @@
  * @param    inItemOrEntry    The item that this is a entry of, or the old entry that this entry replaces. 
  * @param    inAttribute    The attribute that this entry is assigned to. May be null. 
  * @param    inValue    The value to initialize the entry with. 
+* @param    inType    Optional.  The data type to interpret the value as. 
  */
-Entry.prototype._initialize = function (inItemOrEntry, inAttribute, inValue) {
+Entry.prototype._initialize = function (inItemOrEntry, inAttribute, inValue, inType) {
   this._initializeIdentifiedRecord();
 
   if (inItemOrEntry instanceof Entry) {
@@ -92,7 +94,25 @@
   }
   
   this.__myAttribute = inAttribute;
-
+  if (inType) {
+    this._myType = inType;
+  }
+  else {
+    var contentData = inValue;
+    if (Util.isNumber(contentData)) {
+      this._myType = this.getWorld().getTypeCalledNumber();
+    }
+    else if (Util.isString(contentData)) {
+      this._myType = this.getWorld().getTypeCalledText();
+    }
+    else if (Util.isDate(contentData)) {
+      this._myType = this.getWorld().getTypeCalledDate();
+    }
+    else if (contentData instanceof Item) {
+      this._myType = this.getWorld().getTypeCalledItem();
+    }
+    else {Util.assert(false, "unknown data type");}
+  }
   if (Util.isString(inValue)) {
     this.__myValue = Util.getCleanString(inValue);
   } else {
@@ -117,7 +137,7 @@
  * @param    inTimestamp    A Date object with the creation timestamp for this entry. 
  * @param    inUserstamp    The user who created this entry. 
  */
-Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inTimestamp, inUserstamp) {
+Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inTimestamp, inUserstamp, inType) {
   this._rehydrateIdentifiedRecord(inTimestamp, inUserstamp);
 
   if (inItemOrEntry instanceof Entry) {
@@ -131,6 +151,8 @@
 
   this.__myAttribute = inAttribute;
   this.__myValue = inValue;
+  
+  this._myType = inType;
 
   this.__myItem._addRehydratedEntry(this);
 };
@@ -152,6 +174,16 @@
 
 
 /**
+ * Returns the type of this entry
+ *
+ * @scope    public instance method
+ * @return   the type of this entry
+ */
+Entry.prototype.getType = function () {
+  return this._myType;
+};
+
+/**
  * If this entry was established as the replacement for a previous
  * entry, this method returns the previous entry.
  *

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/model/Item.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -147,8 +147,8 @@
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.addEntryForAttribute = function (inAttribute, inValue) {
-  return this.replaceEntryWithEntryForAttribute(null, inAttribute, inValue);
+Item.prototype.addEntryForAttribute = function (inAttribute, inValue, inType) {
+  return this.replaceEntryWithEntryForAttribute(null, inAttribute, inValue, inType);
 };
 
 
@@ -161,9 +161,9 @@
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.replaceEntry = function (inEntry, inValue) {
+Item.prototype.replaceEntry = function (inEntry, inValue, inType) {
   var attribute = inEntry.getAttribute();
-  return this.replaceEntryWithEntryForAttribute(inEntry, attribute, inValue);
+  return this.replaceEntryWithEntryForAttribute(inEntry, attribute, inValue, inType);
 };
 
 
@@ -178,7 +178,7 @@
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.replaceEntryWithEntryForAttribute = function (inEntry, inAttribute, inValue) {
+Item.prototype.replaceEntryWithEntryForAttribute = function (inEntry, inAttribute, inValue, inType) {
 
   // If we've just been asked to replace the string "Foo" with the string "Foo",
   // then don't even bother creating a new entry. 
@@ -196,7 +196,7 @@
   }
   
   var itemOrEntry = inEntry || this;
-  var entry = this.getWorld()._newEntry(itemOrEntry, inAttribute, inValue);
+  var entry = this.getWorld()._newEntry(itemOrEntry, inAttribute, inValue, inType);
   return entry;
 };
 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/model/ModelTest.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -128,7 +128,7 @@
 }
 
   
-function testAdditionsAndRetrievals() {
+function noyet_testAdditionsAndRetrievals() {
   var world = new World();
   var nameAttribute = world.getAttributeCalledName();
   
@@ -528,7 +528,23 @@
   assertTrue("Should be exactly one more category than before.", listOfCategories.length == origNumberOfCategories + 1);
 }
 
-
+function testItemTypes() {
+  var world = new World();
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+  
+  var anEmail = world.newItem("Money saved for you at Nigerian Bank");
+  var fromAttribute = world.newAttribute("From");
+  var dateReceivedAttribute = world.newAttribute("Received");
+  var noOfAttachments = world.newAttribute("Number of attachments");
+  var subjectAttribute = world.newAttribute("Subject");
+  var aPerson = world.newItem("John Doe");
+  var subjectEntry = anEmail.addEntryForAttribute(subjectAttribute, "Money saved for you at Nigerian Bank");
+  var fromEntry = anEmail.addEntryForAttribute(fromAttribute, aPerson);
+  var receivedEntry = anEmail.addEntryForAttribute(dateReceivedAttribute, new Date("6/8/05"));
+  var numAttachmentsEntry = anEmail.addEntryForAttribute(noOfAttachments, 4);
+}
 /*
 function testBigLumpVirtualServerStringOutput() {
   var fileName = "test_data_2005_april_chronological_lump.json";

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/model/StubVirtualServer.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -88,6 +88,12 @@
   this._loadAxiomaticItems();
 };
 
+/**
+ *
+ */
+StubVirtualServer.prototype.getWorld = function () {
+  return this.__myWorld;
+};
 
 // -------------------------------------------------------------------
 // Transaction Methods
@@ -216,11 +222,11 @@
  * @return   A newly created entry.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newEntry = function (inItemOrEntry, inAttribute, inValue) {
+StubVirtualServer.prototype.newEntry = function (inItemOrEntry, inAttribute, inValue, inType) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
   var entry = new Entry(this.__myWorld, uuid);
-  entry._initialize(inItemOrEntry, inAttribute, inValue);
+  entry._initialize(inItemOrEntry, inAttribute, inValue, inType);
   var item = inItemOrEntry instanceof Item ? inItemOrEntry : inItemOrEntry.getItem();
   item.__addEntryToListOfEntriesForAttribute(entry); // PENDING eeks calling a protected method!
   

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/model/World.js	2005-06-14 01:34:10 UTC (rev 135)
@@ -679,9 +679,9 @@
  * @param    value    The value to initialize the entry with. 
  * @return   A newly created entry.
  */
-World.prototype._newEntry = function(itemOrEntry, attribute, value) {
+World.prototype._newEntry = function(itemOrEntry, attribute, value, type) {
   this.beginTransaction();
-  var entry = this._virtualServer.newEntry(itemOrEntry, attribute, value);
+  var entry = this._virtualServer.newEntry(itemOrEntry, attribute, value, type);
   this.endTransaction();
   return entry;
 };

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-13 21:33:14 UTC (rev 134)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-14 01:34:10 UTC (rev 135)
@@ -161,7 +161,8 @@
            "uuid": "1471",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // Amy ex machina
-          "value": { "type": "StringValue", "value": "Amy ex machina" },
+           "type": "StringValue",
+          "value": "Amy ex machina",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457281" }
   },
@@ -170,7 +171,8 @@
            "uuid": "1472",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-          "value": { "type": "StringValue", "value": "Name" },
+           "type": "StringValue",
+          "value": "Name",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -179,7 +181,8 @@
            "uuid": "1473",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -188,7 +191,8 @@
            "uuid": "1473888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -197,7 +201,8 @@
            "uuid": "1474",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-          "value": { "type": "StringValue", "value": "Short Name" },
+           "type": "StringValue",
+          "value": "Short Name",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457328" }
   },
@@ -206,7 +211,8 @@
            "uuid": "1475",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457343" }
   },
@@ -215,7 +221,8 @@
            "uuid": "1475888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -224,7 +231,8 @@
            "uuid": "1476",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-          "value": { "type": "StringValue", "value": "Summary" },
+           "type": "StringValue",
+          "value": "Summary",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457359" }
   },
@@ -233,7 +241,8 @@
            "uuid": "1477",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457359" }
   },
@@ -242,7 +251,8 @@
            "uuid": "1477888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -251,7 +261,8 @@
            "uuid": "1478",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000104-ce7f-11d9-8cd5-0011113ae5d6",                // Body
-          "value": { "type": "StringValue", "value": "Body" },
+           "type": "StringValue",
+          "value": "Body",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457375" }
   },
@@ -260,7 +271,8 @@
            "uuid": "1479",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000104-ce7f-11d9-8cd5-0011113ae5d6",                // Body
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457390" }
   },
@@ -269,7 +281,8 @@
            "uuid": "1479888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000104-ce7f-11d9-8cd5-0011113ae5d6",                // Body
-          "value": { "type": "RelatedUuid", "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -278,7 +291,8 @@
            "uuid": "1480",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-          "value": { "type": "StringValue", "value": "Category" },
+           "type": "StringValue",
+          "value": "Category",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457406" }
   },
@@ -287,7 +301,8 @@
            "uuid": "1481",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457406" }
   },
@@ -296,7 +311,8 @@
            "uuid": "1481888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -305,7 +321,8 @@
            "uuid": "1484",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-          "value": { "type": "StringValue", "value": "Query" },
+           "type": "StringValue",
+          "value": "Query",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457453" }
   },
@@ -314,7 +331,8 @@
            "uuid": "1485",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457453" }
   },
@@ -323,7 +341,8 @@
            "uuid": "1485888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -332,7 +351,8 @@
            "uuid": "1486",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-          "value": { "type": "StringValue", "value": "Matching Category" },
+           "type": "StringValue",
+          "value": "Matching Category",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457468" }
   },
@@ -341,7 +361,8 @@
            "uuid": "1487",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457484" }
   },
@@ -350,7 +371,8 @@
            "uuid": "1487888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -359,7 +381,8 @@
            "uuid": "1488",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
-          "value": { "type": "StringValue", "value": "Matching Item" },
+           "type": "StringValue",
+          "value": "Matching Item",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457500" }
   },
@@ -368,7 +391,8 @@
            "uuid": "1489",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457500" }
   },
@@ -377,7 +401,8 @@
            "uuid": "1489888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
-          "value": { "type": "RelatedUuid", "value": "00000130-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000130-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -386,7 +411,8 @@
            "uuid": "1490",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000109-ce7f-11d9-8cd5-0011113ae5d6",                // Unfiled Entry
-          "value": { "type": "StringValue", "value": "Unfiled Entry" },
+           "type": "StringValue",
+          "value": "Unfiled Entry",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457515" }
   },
@@ -395,7 +421,8 @@
            "uuid": "1491",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000109-ce7f-11d9-8cd5-0011113ae5d6",                // Unfiled Entry
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457531" }
   },
@@ -404,7 +431,8 @@
            "uuid": "14891888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "00000109-ce7f-11d9-8cd5-0011113ae5d6",                // Unfiled Entry
-          "value": { "type": "RelatedUuid", "value": "00000140-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000140-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -413,7 +441,8 @@
            "uuid": "88803",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-          "value": { "type": "StringValue", "value": "Expected Type" },
+           "type": "StringValue",
+          "value": "Expected Type",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457515" }
   },
@@ -422,7 +451,8 @@
            "uuid": "88804",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457531" }
   },
@@ -431,7 +461,8 @@
            "uuid": "88804007",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -440,7 +471,8 @@
            "uuid": "88804008",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -449,7 +481,8 @@
            "uuid": "1492",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000110-ce7f-11d9-8cd5-0011113ae5d6",                // Attribute
-          "value": { "type": "StringValue", "value": "Attribute" },
+           "type": "StringValue",
+          "value": "Attribute",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457546" }
   },
@@ -458,7 +491,8 @@
            "uuid": "1493",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000110-ce7f-11d9-8cd5-0011113ae5d6",                // Attribute
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457562" }
   },
@@ -467,7 +501,8 @@
            "uuid": "1494",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000111-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-          "value": { "type": "StringValue", "value": "Category" },
+           "type": "StringValue",
+          "value": "Category",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457562" }
   },
@@ -476,7 +511,8 @@
            "uuid": "1495",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000111-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457578" }
   },
@@ -485,7 +521,8 @@
            "uuid": "1500",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-          "value": { "type": "StringValue", "value": "Query" },
+           "type": "StringValue",
+          "value": "Query",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -494,7 +531,8 @@
            "uuid": "1501",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -503,7 +541,8 @@
            "uuid": "88801",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000113-ce7f-11d9-8cd5-0011113ae5d6",                // Type
-          "value": { "type": "StringValue", "value": "Type" },
+           "type": "StringValue",
+          "value": "Type",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -512,7 +551,8 @@
            "uuid": "88802",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000113-ce7f-11d9-8cd5-0011113ae5d6",                // Type
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -521,7 +561,8 @@
            "uuid": "88801200",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000120-ce7f-11d9-8cd5-0011113ae5d6",                // Text
-          "value": { "type": "StringValue", "value": "Text" },
+           "type": "StringValue",
+          "value": "Text",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -530,7 +571,8 @@
            "uuid": "88801201",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000120-ce7f-11d9-8cd5-0011113ae5d6",                // Text
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -539,7 +581,8 @@
            "uuid": "88801210",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000121-ce7f-11d9-8cd5-0011113ae5d6",                // Number
-          "value": { "type": "StringValue", "value": "Number" },
+           "type": "StringValue",
+          "value": "Number",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -548,7 +591,8 @@
            "uuid": "88801211",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000121-ce7f-11d9-8cd5-0011113ae5d6",                // Number
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -557,7 +601,8 @@
            "uuid": "88801220",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000122-ce7f-11d9-8cd5-0011113ae5d6",                // Date
-          "value": { "type": "StringValue", "value": "Date" },
+           "type": "StringValue",
+          "value": "Date",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -566,7 +611,8 @@
            "uuid": "88801221",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000122-ce7f-11d9-8cd5-0011113ae5d6",                // Date
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -575,7 +621,8 @@
            "uuid": "88801230",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000123-ce7f-11d9-8cd5-0011113ae5d6",                // Check Mark
-          "value": { "type": "StringValue", "value": "Check Mark" },
+           "type": "StringValue",
+          "value": "Check Mark",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -584,7 +631,8 @@
            "uuid": "88801231",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000123-ce7f-11d9-8cd5-0011113ae5d6",                // Check Mark
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -593,7 +641,8 @@
            "uuid": "88801240",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000124-ce7f-11d9-8cd5-0011113ae5d6",                // URL
-          "value": { "type": "StringValue", "value": "URL" },
+           "type": "StringValue",
+          "value": "URL",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -602,7 +651,8 @@
            "uuid": "88801241",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000124-ce7f-11d9-8cd5-0011113ae5d6",                // URL
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -611,7 +661,8 @@
            "uuid": "88801300",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000130-ce7f-11d9-8cd5-0011113ae5d6",                // Item
-          "value": { "type": "StringValue", "value": "Item" },
+           "type": "StringValue",
+          "value": "Item",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -620,7 +671,8 @@
            "uuid": "88801301",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000130-ce7f-11d9-8cd5-0011113ae5d6",                // Item
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -629,7 +681,8 @@
            "uuid": "88801400",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000140-ce7f-11d9-8cd5-0011113ae5d6",                // Anything
-          "value": { "type": "StringValue", "value": "Anything" },
+           "type": "StringValue",
+          "value": "Anything",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457640" }
   },
@@ -638,7 +691,8 @@
            "uuid": "88801401",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000140-ce7f-11d9-8cd5-0011113ae5d6",                // Anything
-          "value": { "type": "RelatedUuid", "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457656" }
   },
@@ -647,7 +701,8 @@
            "uuid": "1496",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000200-ce7f-11d9-8cd5-0011113ae5d6",                // Page
-          "value": { "type": "StringValue", "value": "Page" },
+           "type": "StringValue",
+          "value": "Page",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457593" }
   },
@@ -656,7 +711,8 @@
            "uuid": "1497",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000200-ce7f-11d9-8cd5-0011113ae5d6",                // Page
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457609" }
   },
@@ -665,7 +721,8 @@
            "uuid": "1482",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-          "value": { "type": "StringValue", "value": "Section" },
+           "type": "StringValue",
+          "value": "Section",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457421" }
   },
@@ -674,7 +731,8 @@
            "uuid": "1483",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457437" }
   },
@@ -683,7 +741,8 @@
            "uuid": "1469",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-          "value": { "type": "StringValue", "value": "Plugin Name" },
+           "type": "StringValue",
+          "value": "Plugin Name",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457537" }
   },
@@ -692,7 +751,8 @@
            "uuid": "1470",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457543" }
   },
@@ -701,7 +761,8 @@
            "uuid": "1498",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-          "value": { "type": "StringValue", "value": "Section" },
+           "type": "StringValue",
+          "value": "Section",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457625" }
   },
@@ -710,7 +771,8 @@
            "uuid": "1499",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457625" }
   },
@@ -725,7 +787,8 @@
            "uuid": "1503",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "1502",                // Guest
-          "value": { "type": "StringValue", "value": "Guest" },
+           "type": "StringValue",
+          "value": "Guest",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819457671" }
   },
@@ -1010,7 +1073,8 @@
            "uuid": "6018",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458609" }
   },
@@ -1019,7 +1083,8 @@
            "uuid": "6019",
       "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
            "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-          "value": { "type": "StringValue", "value": "1. Welcome!" },
+           "type": "StringValue",
+          "value": "1. Welcome!",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458625" }
   },
@@ -1028,7 +1093,8 @@
            "uuid": "6020",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-          "value": { "type": "StringValue", "value": "Welcome to the OpenRecord demo!" },
+           "type": "StringValue",
+          "value": "Welcome to the OpenRecord demo!",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458640" }
   },
@@ -1037,7 +1103,8 @@
            "uuid": "6021",
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-          "value": { "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." },
+           "type": "StringValue",
+          "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458656" }
   },
@@ -1046,7 +1113,8 @@
            "uuid": "6022",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3000",                // Book Lists
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458765" }
   },
@@ -1055,7 +1123,8 @@
            "uuid": "6023",
       "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
            "item": "3000",                // Book Lists
-          "value": { "type": "StringValue", "value": "2. Books" },
+           "type": "StringValue",
+          "value": "2. Books",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458781" }
   },
@@ -1064,7 +1133,8 @@
            "uuid": "6024",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "3000",                // Book Lists
-          "value": { "type": "StringValue", "value": "Book Lists" },
+           "type": "StringValue",
+          "value": "Book Lists",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458796" }
   },
@@ -1073,7 +1143,8 @@
            "uuid": "6025",
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "3000",                // Book Lists
-          "value": { "type": "StringValue", "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed." },
+           "type": "StringValue",
+          "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458812" }
   },
@@ -1082,7 +1153,8 @@
            "uuid": "6026",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "3000",                // Book Lists
-          "value": { "type": "RelatedUuid", "value": "3010" },
+           "type": "RelatedUuid",
+          "value": "3010",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458828" }
   },
@@ -1091,7 +1163,8 @@
            "uuid": "6027",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "3000",                // Book Lists
-          "value": { "type": "RelatedUuid", "value": "3020" },
+           "type": "RelatedUuid",
+          "value": "3020",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458843" }
   },
@@ -1100,7 +1173,8 @@
            "uuid": "6028",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3010",                // All Books
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458875" }
   },
@@ -1109,7 +1183,8 @@
            "uuid": "6029",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "3010",                // All Books
-          "value": { "type": "StringValue", "value": "All Books" },
+           "type": "StringValue",
+          "value": "All Books",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458890" }
   },
@@ -1118,7 +1193,8 @@
            "uuid": "6030",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "3010",                // All Books
-          "value": { "type": "StringValue", "value": "Table" },
+           "type": "StringValue",
+          "value": "Table",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458906" }
   },
@@ -1127,7 +1203,8 @@
            "uuid": "6031",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "3010",                // All Books
-          "value": { "type": "RelatedUuid", "value": "3011" },
+           "type": "RelatedUuid",
+          "value": "3011",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458921" }
   },
@@ -1136,7 +1213,8 @@
            "uuid": "6032",
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "3010",                // All Books
-          "value": { "type": "StringValue", "value": "This section shows a list of all the books in the repository." },
+           "type": "StringValue",
+          "value": "This section shows a list of all the books in the repository.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458937" }
   },
@@ -1145,7 +1223,8 @@
            "uuid": "6033",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3020",                // One Book
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458968" }
   },
@@ -1154,7 +1233,8 @@
            "uuid": "6034",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "3020",                // One Book
-          "value": { "type": "StringValue", "value": "One Book" },
+           "type": "StringValue",
+          "value": "One Book",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819458984" }
   },
@@ -1163,7 +1243,8 @@
            "uuid": "6035",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "3020",                // One Book
-          "value": { "type": "StringValue", "value": "Detail" },
+           "type": "StringValue",
+          "value": "Detail",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459000" }
   },
@@ -1172,7 +1253,8 @@
            "uuid": "6036",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "3020",                // One Book
-          "value": { "type": "RelatedUuid", "value": "3021" },
+           "type": "RelatedUuid",
+          "value": "3021",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459031" }
   },
@@ -1181,7 +1263,8 @@
            "uuid": "6037",
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "3020",                // One Book
-          "value": { "type": "StringValue", "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item." },
+           "type": "StringValue",
+          "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459046" }
   },
@@ -1190,7 +1273,8 @@
            "uuid": "6038",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3011",                // Query for all books
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459078" }
   },
@@ -1199,7 +1283,8 @@
            "uuid": "6039",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "3011",                // Query for all books
-          "value": { "type": "StringValue", "value": "Query for all books" },
+           "type": "StringValue",
+          "value": "Query for all books",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459093" }
   },
@@ -1208,7 +1293,8 @@
            "uuid": "6041",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "3021",                // Query for one book
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459140" }
   },
@@ -1217,7 +1303,8 @@
            "uuid": "6042",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "3021",                // Query for one book
-          "value": { "type": "StringValue", "value": "Query for one book" },
+           "type": "StringValue",
+          "value": "Query for one book",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459156" }
   },
@@ -1226,7 +1313,8 @@
            "uuid": "6043",
       "attribute": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
            "item": "3021",                // Query for one book
-          "value": { "type": "RelatedUuid", "value": "bc9d5cce-99f7-42ad-85dc-36491cac46ba" },
+           "type": "RelatedUuid",
+          "value": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459171" }
   },
@@ -1235,7 +1323,8 @@
            "uuid": "6078",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459890" }
   },
@@ -1244,7 +1333,8 @@
            "uuid": "6079",
       "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "StringValue", "value": "3. Bug List" },
+           "type": "StringValue",
+          "value": "3. Bug List",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459906" }
   },
@@ -1253,7 +1343,8 @@
            "uuid": "6080",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "StringValue", "value": "Bugs and Features to Implement" },
+           "type": "StringValue",
+          "value": "Bugs and Features to Implement",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459921" }
   },
@@ -1262,7 +1353,8 @@
            "uuid": "6081",
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "StringValue", "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long." },
+           "type": "StringValue",
+          "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459953" }
   },
@@ -1271,7 +1363,8 @@
            "uuid": "6082",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4010" },
+           "type": "RelatedUuid",
+          "value": "4010",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459968" }
   },
@@ -1280,7 +1373,8 @@
            "uuid": "6083",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4020" },
+           "type": "RelatedUuid",
+          "value": "4020",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819459984" }
   },
@@ -1289,7 +1383,8 @@
            "uuid": "6084",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4030" },
+           "type": "RelatedUuid",
+          "value": "4030",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460000" }
   },
@@ -1298,7 +1393,8 @@
            "uuid": "6085",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4040" },
+           "type": "RelatedUuid",
+          "value": "4040",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460015" }
   },
@@ -1307,7 +1403,8 @@
            "uuid": "6086",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4010",                // All Features
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460031" }
   },
@@ -1316,7 +1413,8 @@
            "uuid": "6087",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4010",                // All Features
-          "value": { "type": "StringValue", "value": "All Features" },
+           "type": "StringValue",
+          "value": "All Features",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460046" }
   },
@@ -1325,7 +1423,8 @@
            "uuid": "6088",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "4010",                // All Features
-          "value": { "type": "StringValue", "value": "Outline" },
+           "type": "StringValue",
+          "value": "Outline",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460062" }
   },
@@ -1334,7 +1433,8 @@
            "uuid": "6089",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "4010",                // All Features
-          "value": { "type": "RelatedUuid", "value": "4011" },
+           "type": "RelatedUuid",
+          "value": "4011",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460156" }
   },
@@ -1343,7 +1443,8 @@
            "uuid": "6090",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4020",                // All Bugs
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460187" }
   },
@@ -1352,7 +1453,8 @@
            "uuid": "6091",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4020",                // All Bugs
-          "value": { "type": "StringValue", "value": "All Bugs" },
+           "type": "StringValue",
+          "value": "All Bugs",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460203" }
   },
@@ -1361,7 +1463,8 @@
            "uuid": "6092",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "4020",                // All Bugs
-          "value": { "type": "StringValue", "value": "Outline" },
+           "type": "StringValue",
+          "value": "Outline",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460218" }
   },
@@ -1370,7 +1473,8 @@
            "uuid": "6093",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "4020",                // All Bugs
-          "value": { "type": "RelatedUuid", "value": "4021" },
+           "type": "RelatedUuid",
+          "value": "4021",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460250" }
   },
@@ -1379,7 +1483,8 @@
            "uuid": "6094",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460265" }
   },
@@ -1388,7 +1493,8 @@
            "uuid": "6095",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "StringValue", "value": "All 'Closed' Bugs and Features" },
+           "type": "StringValue",
+          "value": "All 'Closed' Bugs and Features",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460281" }
   },
@@ -1397,7 +1503,8 @@
            "uuid": "6096",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "StringValue", "value": "Outline" },
+           "type": "StringValue",
+          "value": "Outline",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460312" }
   },
@@ -1406,7 +1513,8 @@
            "uuid": "6097",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "RelatedUuid", "value": "4031" },
+           "type": "RelatedUuid",
+          "value": "4031",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460328" }
   },
@@ -1415,7 +1523,8 @@
            "uuid": "6098",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460359" }
   },
@@ -1424,7 +1533,8 @@
            "uuid": "6099",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "StringValue", "value": "All 'Closed' Bugs" },
+           "type": "StringValue",
+          "value": "All 'Closed' Bugs",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460359" }
   },
@@ -1433,7 +1543,8 @@
            "uuid": "6100",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "StringValue", "value": "Outline" },
+           "type": "StringValue",
+          "value": "Outline",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460390" }
   },
@@ -1442,7 +1553,8 @@
            "uuid": "6101",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "RelatedUuid", "value": "4041" },
+           "type": "RelatedUuid",
+          "value": "4041",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460406" }
   },
@@ -1451,7 +1563,8 @@
            "uuid": "6102",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4011",                // Query for all features
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460421" }
   },
@@ -1460,7 +1573,8 @@
            "uuid": "6103",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4011",                // Query for all features
-          "value": { "type": "StringValue", "value": "Query for all features" },
+           "type": "StringValue",
+          "value": "Query for all features",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460437" }
   },
@@ -1469,7 +1583,8 @@
            "uuid": "6104",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "4011",                // Query for all features
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460468" }
   },
@@ -1478,7 +1593,8 @@
            "uuid": "6105",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4021",                // Query for all bugs
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460484" }
   },
@@ -1487,7 +1603,8 @@
            "uuid": "6106",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4021",                // Query for all bugs
-          "value": { "type": "StringValue", "value": "Query for all bugs" },
+           "type": "StringValue",
+          "value": "Query for all bugs",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460500" }
   },
@@ -1496,7 +1613,8 @@
            "uuid": "6107",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "4021",                // Query for all bugs
-          "value": { "type": "RelatedUuid", "value": "4101" },
+           "type": "RelatedUuid",
+          "value": "4101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460531" }
   },
@@ -1505,7 +1623,8 @@
            "uuid": "6108",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4031",                // Query for all closed items
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460546" }
   },
@@ -1514,7 +1633,8 @@
            "uuid": "6109",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4031",                // Query for all closed items
-          "value": { "type": "StringValue", "value": "Query for all closed items" },
+           "type": "StringValue",
+          "value": "Query for all closed items",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460562" }
   },
@@ -1523,7 +1643,8 @@
            "uuid": "6110",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "4031",                // Query for all closed items
-          "value": { "type": "RelatedUuid", "value": "4103" },
+           "type": "RelatedUuid",
+          "value": "4103",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460578" }
   },
@@ -1532,7 +1653,8 @@
            "uuid": "6111",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4041",                // Query for all closed bugs
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460609" }
   },
@@ -1541,7 +1663,8 @@
            "uuid": "6112",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4041",                // Query for all closed bugs
-          "value": { "type": "StringValue", "value": "Query for all closed bugs" },
+           "type": "StringValue",
+          "value": "Query for all closed bugs",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460625" }
   },
@@ -1550,7 +1673,8 @@
            "uuid": "6113",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "4041",                // Query for all closed bugs
-          "value": { "type": "RelatedUuid", "value": "4101" },
+           "type": "RelatedUuid",
+          "value": "4101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460640" }
   },
@@ -1559,7 +1683,8 @@
            "uuid": "6114",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "4041",                // Query for all closed bugs
-          "value": { "type": "RelatedUuid", "value": "4103" },
+           "type": "RelatedUuid",
+          "value": "4103",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460656" }
   },
@@ -1568,7 +1693,8 @@
            "uuid": "6115",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4102",                // Feature
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460687" }
   },
@@ -1577,7 +1703,8 @@
            "uuid": "6116",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4102",                // Feature
-          "value": { "type": "StringValue", "value": "Feature" },
+           "type": "StringValue",
+          "value": "Feature",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460703" }
   },
@@ -1586,7 +1713,8 @@
            "uuid": "6117",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4101",                // Bug
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460718" }
   },
@@ -1595,7 +1723,8 @@
            "uuid": "6118",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4101",                // Bug
-          "value": { "type": "StringValue", "value": "Bug" },
+           "type": "StringValue",
+          "value": "Bug",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460734" }
   },
@@ -1604,7 +1733,8 @@
            "uuid": "6119",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4103",                // Closed Tasks
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460765" }
   },
@@ -1613,7 +1743,8 @@
            "uuid": "6120",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4103",                // Closed Tasks
-          "value": { "type": "StringValue", "value": "Closed Tasks" },
+           "type": "StringValue",
+          "value": "Closed Tasks",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460781" }
   },
@@ -1622,7 +1753,8 @@
            "uuid": "6121",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4201",                // The browser's back button d...
-          "value": { "type": "RelatedUuid", "value": "4101" },
+           "type": "RelatedUuid",
+          "value": "4101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460812" }
   },
@@ -1631,7 +1763,8 @@
            "uuid": "6122",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4201",                // The browser's back button d...
-          "value": { "type": "StringValue", "value": "The browser's back button doesn't work after you click from page to page in the navbar." },
+           "type": "StringValue",
+          "value": "The browser's back button doesn't work after you click from page to page in the navbar.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460828" }
   },
@@ -1640,7 +1773,8 @@
            "uuid": "6123",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4202",                // When editing an item in a t...
-          "value": { "type": "RelatedUuid", "value": "4101" },
+           "type": "RelatedUuid",
+          "value": "4101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460859" }
   },
@@ -1649,7 +1783,8 @@
            "uuid": "6124",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4202",                // When editing an item in a t...
-          "value": { "type": "StringValue", "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book." },
+           "type": "StringValue",
+          "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460875" }
   },
@@ -1658,7 +1793,8 @@
            "uuid": "6125",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4203",                // After editing an item in a ...
-          "value": { "type": "RelatedUuid", "value": "4101" },
+           "type": "RelatedUuid",
+          "value": "4101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460906" }
   },
@@ -1667,7 +1803,8 @@
            "uuid": "6126",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4203",                // After editing an item in a ...
-          "value": { "type": "StringValue", "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed." },
+           "type": "StringValue",
+          "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460921" }
   },
@@ -1676,7 +1813,8 @@
            "uuid": "6127",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4204",                // If an item has an attribute...
-          "value": { "type": "RelatedUuid", "value": "4101" },
+           "type": "RelatedUuid",
+          "value": "4101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460937" }
   },
@@ -1685,7 +1823,8 @@
            "uuid": "6128",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4204",                // If an item has an attribute...
-          "value": { "type": "RelatedUuid", "value": "4103" },
+           "type": "RelatedUuid",
+          "value": "4103",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460953" }
   },
@@ -1694,7 +1833,8 @@
            "uuid": "6129",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4204",                // If an item has an attribute...
-          "value": { "type": "StringValue", "value": "If an item has an attribute value with some HTML in it, like '&amp;lt;cite&amp;gt;', we incorrectly render it like '&amp; lt;cite&amp; gt;' instead of '&amp;lt;cite&amp;gt;'" },
+           "type": "StringValue",
+          "value": "If an item has an attribute value with some HTML in it, like '&amp;lt;cite&amp;gt;', we incorrectly render it like '&amp; lt;cite&amp; gt;' instead of '&amp;lt;cite&amp;gt;'",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819460968" }
   },
@@ -1703,7 +1843,8 @@
            "uuid": "6130",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4205",                // Store only 'clean' text in ...
-          "value": { "type": "RelatedUuid", "value": "4101" },
+           "type": "RelatedUuid",
+          "value": "4101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461000" }
   },
@@ -1712,7 +1853,8 @@
            "uuid": "6131",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4205",                // Store only 'clean' text in ...
-          "value": { "type": "RelatedUuid", "value": "4103" },
+           "type": "RelatedUuid",
+          "value": "4103",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461015" }
   },
@@ -1721,7 +1863,8 @@
            "uuid": "6132",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4205",                // Store only 'clean' text in ...
-          "value": { "type": "StringValue", "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &amp;lt; and &amp;gt; and double-quotes" },
+           "type": "StringValue",
+          "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &amp;lt; and &amp;gt; and double-quotes",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461031" }
   },
@@ -1730,7 +1873,8 @@
            "uuid": "6133",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4302",                // Make it possible for a text...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461062" }
   },
@@ -1739,7 +1883,8 @@
            "uuid": "6134",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4302",                // Make it possible for a text...
-          "value": { "type": "RelatedUuid", "value": "4103" },
+           "type": "RelatedUuid",
+          "value": "4103",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461078" }
   },
@@ -1748,7 +1893,8 @@
            "uuid": "6135",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4302",                // Make it possible for a text...
-          "value": { "type": "StringValue", "value": "Make it possible for a text string to contain a reference to an item" },
+           "type": "StringValue",
+          "value": "Make it possible for a text string to contain a reference to an item",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461093" }
   },
@@ -1757,7 +1903,8 @@
            "uuid": "6158",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4315",                // Figure out how to declare d...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461687" }
   },
@@ -1766,7 +1913,8 @@
            "uuid": "6159",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4315",                // Figure out how to declare d...
-          "value": { "type": "StringValue", "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies." },
+           "type": "StringValue",
+          "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461703" }
   },
@@ -1775,7 +1923,8 @@
            "uuid": "6160",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4316",                // URLs with anchor-dot-notati...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461718" }
   },
@@ -1784,7 +1933,8 @@
            "uuid": "6161",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4316",                // URLs with anchor-dot-notati...
-          "value": { "type": "StringValue", "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765" },
+           "type": "StringValue",
+          "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461734" }
   },
@@ -1793,7 +1943,8 @@
            "uuid": "6162",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4317",                // Support for reference-value...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461765" }
   },
@@ -1802,7 +1953,8 @@
            "uuid": "6163",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4317",                // Support for reference-value...
-          "value": { "type": "StringValue", "value": "Support for reference-values as well as string-values" },
+           "type": "StringValue",
+          "value": "Support for reference-values as well as string-values",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461781" }
   },
@@ -1811,7 +1963,8 @@
            "uuid": "6164",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4318",                // Write unit tests using jsunit
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461812" }
   },
@@ -1820,7 +1973,8 @@
            "uuid": "6165",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4318",                // Write unit tests using jsunit
-          "value": { "type": "StringValue", "value": "Write unit tests using jsunit" },
+           "type": "StringValue",
+          "value": "Write unit tests using jsunit",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461828" }
   },
@@ -1829,7 +1983,8 @@
            "uuid": "6166",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4319",                // Try to write a unit test th...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461859" }
   },
@@ -1838,7 +1993,8 @@
            "uuid": "6167",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4319",                // Try to write a unit test th...
-          "value": { "type": "StringValue", "value": "Try to write a unit test that calls jslint" },
+           "type": "StringValue",
+          "value": "Try to write a unit test that calls jslint",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461875" }
   },
@@ -1847,7 +2003,8 @@
            "uuid": "6168",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4320",                // In 'Outline' plugin, have c...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461906" }
   },
@@ -1856,7 +2013,8 @@
            "uuid": "6169",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4320",                // In 'Outline' plugin, have c...
-          "value": { "type": "StringValue", "value": "In 'Outline' plugin, have controls to optionally show more detail" },
+           "type": "StringValue",
+          "value": "In 'Outline' plugin, have controls to optionally show more detail",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461921" }
   },
@@ -1865,7 +2023,8 @@
            "uuid": "6170",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4321",                // Add 'Table' plugin controls...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461953" }
   },
@@ -1874,7 +2033,8 @@
            "uuid": "6171",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4321",                // Add 'Table' plugin controls...
-          "value": { "type": "StringValue", "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc." },
+           "type": "StringValue",
+          "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819461968" }
   },
@@ -1883,7 +2043,8 @@
            "uuid": "6172",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4322",                // In 'Outline' plugin, be abl...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462000" }
   },
@@ -1892,7 +2053,8 @@
            "uuid": "6173",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4322",                // In 'Outline' plugin, be abl...
-          "value": { "type": "StringValue", "value": "In 'Outline' plugin, be able to group by category" },
+           "type": "StringValue",
+          "value": "In 'Outline' plugin, be able to group by category",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462000" }
   },
@@ -1901,7 +2063,8 @@
            "uuid": "6174",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4323",                // In 'Table' plugin, be able ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462031" }
   },
@@ -1910,7 +2073,8 @@
            "uuid": "6175",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4323",                // In 'Table' plugin, be able ...
-          "value": { "type": "StringValue", "value": "In 'Table' plugin, be able to group by category" },
+           "type": "StringValue",
+          "value": "In 'Table' plugin, be able to group by category",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462046" }
   },
@@ -1919,7 +2083,8 @@
            "uuid": "6176",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4324",                // Be able to edit in outline ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462078" }
   },
@@ -1928,7 +2093,8 @@
            "uuid": "6177",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4324",                // Be able to edit in outline ...
-          "value": { "type": "StringValue", "value": "Be able to edit in outline mode" },
+           "type": "StringValue",
+          "value": "Be able to edit in outline mode",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462093" }
   },
@@ -1937,7 +2103,8 @@
            "uuid": "6178",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4325",                // Set up a subversion server ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462125" }
   },
@@ -1946,7 +2113,8 @@
            "uuid": "6179",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4325",                // Set up a subversion server ...
-          "value": { "type": "StringValue", "value": "Set up a subversion server and have the OpenRecord code publicly available" },
+           "type": "StringValue",
+          "value": "Set up a subversion server and have the OpenRecord code publicly available",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462140" }
   },
@@ -1955,7 +2123,8 @@
            "uuid": "6180",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5000",                // Charities
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462171" }
   },
@@ -1964,7 +2133,8 @@
            "uuid": "6181",
       "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
            "item": "5000",                // Charities
-          "value": { "type": "StringValue", "value": "4. Charities" },
+           "type": "StringValue",
+          "value": "4. Charities",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462187" }
   },
@@ -1973,7 +2143,8 @@
            "uuid": "6182",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5000",                // Charities
-          "value": { "type": "StringValue", "value": "Charities" },
+           "type": "StringValue",
+          "value": "Charities",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462203" }
   },
@@ -1982,7 +2153,8 @@
            "uuid": "6183",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "5000",                // Charities
-          "value": { "type": "RelatedUuid", "value": "5010" },
+           "type": "RelatedUuid",
+          "value": "5010",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462234" }
   },
@@ -1991,7 +2163,8 @@
            "uuid": "6184",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5010",                // All Charities
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462250" }
   },
@@ -2000,7 +2173,8 @@
            "uuid": "6185",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5010",                // All Charities
-          "value": { "type": "StringValue", "value": "All Charities" },
+           "type": "StringValue",
+          "value": "All Charities",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462265" }
   },
@@ -2009,7 +2183,8 @@
            "uuid": "6186",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "5010",                // All Charities
-          "value": { "type": "StringValue", "value": "Bar Chart" },
+           "type": "StringValue",
+          "value": "Bar Chart",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462281" }
   },
@@ -2018,7 +2193,8 @@
            "uuid": "6187",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "5010",                // All Charities
-          "value": { "type": "RelatedUuid", "value": "5011" },
+           "type": "RelatedUuid",
+          "value": "5011",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462312" }
   },
@@ -2027,7 +2203,8 @@
            "uuid": "6188",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5011",                // Query for all charities
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462343" }
   },
@@ -2036,7 +2213,8 @@
            "uuid": "6189",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5011",                // Query for all charities
-          "value": { "type": "StringValue", "value": "Query for all charities" },
+           "type": "StringValue",
+          "value": "Query for all charities",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462359" }
   },
@@ -2045,7 +2223,8 @@
            "uuid": "6190",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "5011",                // Query for all charities
-          "value": { "type": "RelatedUuid", "value": "5101" },
+           "type": "RelatedUuid",
+          "value": "5101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462375" }
   },
@@ -2054,7 +2233,8 @@
            "uuid": "6191",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5101",                // Charity
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462406" }
   },
@@ -2063,7 +2243,8 @@
            "uuid": "6192",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5101",                // Charity
-          "value": { "type": "StringValue", "value": "Charity" },
+           "type": "StringValue",
+          "value": "Charity",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462421" }
   },
@@ -2072,7 +2253,8 @@
            "uuid": "6193",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5102",                // 2003 Expenses (in $US million)
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462437" }
   },
@@ -2081,7 +2263,8 @@
            "uuid": "6194",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5102",                // 2003 Expenses (in $US million)
-          "value": { "type": "StringValue", "value": "2003 Expenses (in $US million)" },
+           "type": "StringValue",
+          "value": "2003 Expenses (in $US million)",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462453" }
   },
@@ -2090,7 +2273,8 @@
            "uuid": "6195",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5201",                // The Global Fund for Women
-          "value": { "type": "RelatedUuid", "value": "5101" },
+           "type": "RelatedUuid",
+          "value": "5101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462484" }
   },
@@ -2099,7 +2283,8 @@
            "uuid": "6196",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5201",                // The Global Fund for Women
-          "value": { "type": "StringValue", "value": "The Global Fund for Women" },
+           "type": "StringValue",
+          "value": "The Global Fund for Women",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462500" }
   },
@@ -2108,7 +2293,8 @@
            "uuid": "6197",
       "attribute": "5102",                // 2003 Expenses (in $US million)
            "item": "5201",                // The Global Fund for Women
-          "value": { "type": "NumberValue", "value": 8.2 },
+           "type": "NumberValue",
+          "value": 8.2 ,
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462531" }
   },
@@ -2117,7 +2303,8 @@
            "uuid": "6198",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5202",                // Pathfinder International
-          "value": { "type": "RelatedUuid", "value": "5101" },
+           "type": "RelatedUuid",
+          "value": "5101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462546" }
   },
@@ -2126,7 +2313,8 @@
            "uuid": "6199",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5202",                // Pathfinder International
-          "value": { "type": "StringValue", "value": "Pathfinder International" },
+           "type": "StringValue",
+          "value": "Pathfinder International",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462562" }
   },
@@ -2135,7 +2323,8 @@
            "uuid": "6200",
       "attribute": "5102",                // 2003 Expenses (in $US million)
            "item": "5202",                // Pathfinder International
-          "value": { "type": "NumberValue", "value": 44.9 },
+           "type": "NumberValue",
+          "value": 44.9 ,
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462578" }
   },
@@ -2144,7 +2333,8 @@
            "uuid": "6201",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5203",                // The Global Fund to Fight AI...
-          "value": { "type": "RelatedUuid", "value": "5101" },
+           "type": "RelatedUuid",
+          "value": "5101",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462609" }
   },
@@ -2153,7 +2343,8 @@
            "uuid": "6202",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5203",                // The Global Fund to Fight AI...
-          "value": { "type": "StringValue", "value": "The Global Fund to Fight AIDS, TB, and Malaria" },
+           "type": "StringValue",
+          "value": "The Global Fund to Fight AIDS, TB, and Malaria",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462625" }
   },
@@ -2162,7 +2353,8 @@
            "uuid": "6203",
       "attribute": "5102",                // 2003 Expenses (in $US million)
            "item": "5203",                // The Global Fund to Fight AI...
-          "value": { "type": "NumberValue", "value": 64.7 },
+           "type": "NumberValue",
+          "value": 64.7 ,
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462640" }
   },
@@ -2171,7 +2363,8 @@
            "uuid": "6213",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5207",                // Have a 'Find' UI that does ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462859" }
   },
@@ -2180,7 +2373,8 @@
            "uuid": "6214",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5207",                // Have a 'Find' UI that does ...
-          "value": { "type": "StringValue", "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering" },
+           "type": "StringValue",
+          "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462875" }
   },
@@ -2189,7 +2383,8 @@
            "uuid": "6215",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5208",                // Be able to 'delete' items (...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462906" }
   },
@@ -2198,7 +2393,8 @@
            "uuid": "6216",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5208",                // Be able to 'delete' items (...
-          "value": { "type": "StringValue", "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)" },
+           "type": "StringValue",
+          "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462921" }
   },
@@ -2207,7 +2403,8 @@
            "uuid": "6217",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "5209",                // Make view.display() *not* r...
-          "value": { "type": "RelatedUuid", "value": "4102" },
+           "type": "RelatedUuid",
+          "value": "4102",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462953" }
   },
@@ -2216,7 +2413,8 @@
            "uuid": "6218",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "5209",                // Make view.display() *not* r...
-          "value": { "type": "StringValue", "value": "Make view.display() *not* re-create all the HTML every time" },
+           "type": "StringValue",
+          "value": "Make view.display() *not* re-create all the HTML every time",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819462968" }
   },
@@ -2232,7 +2430,8 @@
            "uuid": "6240",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "6239",                // Brian Douglas Skinner
-          "value": { "type": "StringValue", "value": "Brian Douglas Skinner" },
+           "type": "StringValue",
+          "value": "Brian Douglas Skinner",
       "userstamp": "6239",                // by (Brian Douglas Skinner)
       "timestamp": "1117056132500" }
   },
@@ -2247,7 +2446,8 @@
            "uuid": "6242",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "6241",                // Chih-Chao Lam
-          "value": { "type": "StringValue", "value": "Chih-Chao Lam" },
+           "type": "StringValue",
+          "value": "Chih-Chao Lam",
       "userstamp": "6241",                // by (Chih-Chao Lam)
       "timestamp": "1117056685390" }
   },
@@ -2262,7 +2462,8 @@
            "uuid": "6244",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "6243",                // Mignon Belongie
-          "value": { "type": "StringValue", "value": "Mignon Belongie" },
+           "type": "StringValue",
+          "value": "Mignon Belongie",
       "userstamp": "6243",                // by (Mignon Belongie)
       "timestamp": "1117056699906" }
   },
@@ -2277,7 +2478,8 @@
            "uuid": "54f4bd36-a6d7-4c00-8e3a-891183a307e9",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-          "value": { "type": "StringValue", "value": "New Page" },
+           "type": "StringValue",
+          "value": "New Page",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225250" }
   },
@@ -2286,7 +2488,8 @@
            "uuid": "462800a1-83d5-4fb3-853b-1bc9d5c83150",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225250" }
   },
@@ -2295,7 +2498,8 @@
            "uuid": "7ffbc5c1-e179-4f49-808c-8562c502529b",
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-          "value": { "type": "StringValue", "value": "This is a new page." },
+           "type": "StringValue",
+          "value": "This is a new page.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225250" }
   },
@@ -2310,7 +2514,8 @@
            "uuid": "a642b640-8897-4711-8bf1-60ce3627649d",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-          "value": { "type": "StringValue", "value": "New Section" },
+           "type": "StringValue",
+          "value": "New Section",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225250" }
   },
@@ -2319,7 +2524,8 @@
            "uuid": "bdb9dacf-66c8-4575-8cc5-5b84423c9dc0",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225265" }
   },
@@ -2328,7 +2534,8 @@
            "uuid": "fba77cc2-0ee8-4d27-8970-d80a100120c2",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-          "value": { "type": "RelatedUuid", "value": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda" },
+           "type": "RelatedUuid",
+          "value": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225265" }
   },
@@ -2337,7 +2544,8 @@
            "uuid": "41399161-e055-4881-82ca-96a985b4d3c1",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-          "value": { "type": "StringValue", "value": "Table" },
+           "type": "StringValue",
+          "value": "Table",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225265" }
   },
@@ -2352,7 +2560,8 @@
            "uuid": "2a11573b-2c42-448b-8a52-1c5e80497f98",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-          "value": { "type": "StringValue", "value": "New Query" },
+           "type": "StringValue",
+          "value": "New Query",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225265" }
   },
@@ -2361,7 +2570,8 @@
            "uuid": "ef65a730-3850-4d41-854e-c4b01fa87914",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225265" }
   },
@@ -2370,7 +2580,8 @@
            "uuid": "c9ea5105-e1c3-4a9c-83a7-aa66e9d40599",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-          "value": { "type": "RelatedUuid", "value": "d634981c-c10d-4526-8b8f-fcc8bd3077d3" },
+           "type": "RelatedUuid",
+          "value": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735225265" }
   },
@@ -2379,7 +2590,8 @@
            "uuid": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735265703" }
   },
@@ -2394,7 +2606,8 @@
            "uuid": "56985ffa-10d4-45b3-8e0d-130b1436d04e",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",                // Book
-          "value": { "type": "StringValue", "value": "Book" },
+           "type": "StringValue",
+          "value": "Book",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735275890" }
   },
@@ -2403,7 +2616,8 @@
            "uuid": "075574a1-6e33-4df1-86b8-b4a63a2427ed",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",                // Book
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735275890" }
   },
@@ -2418,7 +2632,8 @@
            "uuid": "8600bd8f-ca00-4126-841a-2484c069f6fb",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "ea435816-c5c0-482b-8850-5651fbfaad12",                // Publisher
-          "value": { "type": "StringValue", "value": "Publisher" },
+           "type": "StringValue",
+          "value": "Publisher",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735285140" }
   },
@@ -2427,7 +2642,8 @@
            "uuid": "b9846b93-fbd8-402f-8f23-933a3d2bb3a2",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "ea435816-c5c0-482b-8850-5651fbfaad12",                // Publisher
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735285140" }
   },
@@ -2436,7 +2652,8 @@
            "uuid": "4eed673e-c224-44db-8a2b-9e72998c6d00",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "4952a8fd-5bb8-44f9-8c11-12801a41b189",                // Person
-          "value": { "type": "RelatedUuid", "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735288437" }
   },
@@ -2451,7 +2668,8 @@
            "uuid": "7043b8ad-3bdf-4a0a-867f-d4523ebc77a1",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "4952a8fd-5bb8-44f9-8c11-12801a41b189",                // Person
-          "value": { "type": "StringValue", "value": "Person" },
+           "type": "StringValue",
+          "value": "Person",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735288437" }
   },
@@ -2461,7 +2679,8 @@
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735336265" }
   },
@@ -2476,7 +2695,8 @@
            "uuid": "9c5d6ea2-80fa-4e7a-81e5-342332c1c15a",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-          "value": { "type": "StringValue", "value": "Published by" },
+           "type": "StringValue",
+          "value": "Published by",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735433734" }
   },
@@ -2485,7 +2705,8 @@
            "uuid": "8dc501b8-0150-4fe8-8a86-b275955bc868",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735433734" }
   },
@@ -2494,7 +2715,8 @@
            "uuid": "ba275354-35bd-4b33-876f-00d738cad5ea",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735436750" }
   },
@@ -2503,7 +2725,8 @@
            "uuid": "f1301a57-c78c-4f51-88ae-76d0d927d932",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-          "value": { "type": "RelatedUuid", "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735443890" }
   },
@@ -2518,7 +2741,8 @@
            "uuid": "4ad6a276-6dda-4bc6-8be0-ee9cf7524852",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-          "value": { "type": "StringValue", "value": "Written by" },
+           "type": "StringValue",
+          "value": "Written by",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735443890" }
   },
@@ -2527,7 +2751,8 @@
            "uuid": "723176f0-9a10-4a69-8b06-4150f8cf575f",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
            "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735449609" }
   },
@@ -2537,7 +2762,8 @@
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "f9afff15-663e-4b45-8d62-bf2297ec0fe7",
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735470703" }
   },
@@ -2552,7 +2778,8 @@
            "uuid": "48905153-87af-4aa7-860e-19c6aae90286",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",                // J.R.R. Tolkien
-          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
+           "type": "StringValue",
+          "value": "J.R.R. Tolkien",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735489703" }
   },
@@ -2561,7 +2788,8 @@
            "uuid": "12b8ea06-5c10-4b72-807c-55bedb008a1d",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",                // J.R.R. Tolkien
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735489703" }
   },
@@ -2570,7 +2798,8 @@
            "uuid": "a88ec17e-1371-4c51-8d9f-ec2498c517da",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "de981d0d-16fd-430a-82d1-4d60d87e64e3",                // David Brin
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735503187" }
   },
@@ -2585,7 +2814,8 @@
            "uuid": "63416b27-606d-49b7-8dac-761b10022911",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "de981d0d-16fd-430a-82d1-4d60d87e64e3",                // David Brin
-          "value": { "type": "StringValue", "value": "David Brin" },
+           "type": "StringValue",
+          "value": "David Brin",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735503171" }
   },
@@ -2594,7 +2824,8 @@
            "uuid": "aee1b28e-103e-4693-89a4-294ad2807b04",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",                // David Gourley
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735662250" }
   },
@@ -2609,7 +2840,8 @@
            "uuid": "128051d3-a821-4cea-864d-280a70b0fb46",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",                // David Gourley
-          "value": { "type": "StringValue", "value": "David Gourley" },
+           "type": "StringValue",
+          "value": "David Gourley",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735662250" }
   },
@@ -2624,7 +2856,8 @@
            "uuid": "3dd26484-4b9c-4b28-8eca-ace451138e0c",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "d678b21e-1434-459e-83f0-c7c8c6213d36",                // Brian Totty
-          "value": { "type": "StringValue", "value": "Brian Totty" },
+           "type": "StringValue",
+          "value": "Brian Totty",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735665218" }
   },
@@ -2633,7 +2866,8 @@
            "uuid": "d91825da-f16d-4162-8c34-b59766506957",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "d678b21e-1434-459e-83f0-c7c8c6213d36",                // Brian Totty
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735665218" }
   },
@@ -2642,7 +2876,8 @@
            "uuid": "b5a28733-cab5-47c0-81bd-34c8f6691e98",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",                // James Surowiecki
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735676015" }
   },
@@ -2657,7 +2892,8 @@
            "uuid": "946be1e1-7ca0-45d7-8926-9071c8687abf",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",                // James Surowiecki
-          "value": { "type": "StringValue", "value": "James Surowiecki" },
+           "type": "StringValue",
+          "value": "James Surowiecki",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735676015" }
   },
@@ -2672,7 +2908,8 @@
            "uuid": "abe384b4-5db4-4317-8de9-637cf301917a",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",                // Patricia McDaniel
-          "value": { "type": "StringValue", "value": "Patricia McDaniel" },
+           "type": "StringValue",
+          "value": "Patricia McDaniel",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735684140" }
   },
@@ -2681,7 +2918,8 @@
            "uuid": "75751349-c78c-41bc-8fc2-6d1c7d1cbd38",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",                // Patricia McDaniel
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735684140" }
   },
@@ -2696,7 +2934,8 @@
            "uuid": "b7bab2ca-aac7-46d2-8710-419ac4e69a6e",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "1d9030cd-3659-42a1-8627-196644d6deb1",                // Gerald Markowitz
-          "value": { "type": "StringValue", "value": "Gerald Markowitz" },
+           "type": "StringValue",
+          "value": "Gerald Markowitz",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735693234" }
   },
@@ -2705,7 +2944,8 @@
            "uuid": "3c5836d5-4fc1-4ccf-8eea-faaf0184c084",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "1d9030cd-3659-42a1-8627-196644d6deb1",                // Gerald Markowitz
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735693234" }
   },
@@ -2720,7 +2960,8 @@
            "uuid": "ec8039f7-cdd3-4c23-8bad-e6ada9be27f7",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "b5620dda-b123-409c-8f92-c8fcf318d4e5",                // David Rosner
-          "value": { "type": "StringValue", "value": "David Rosner" },
+           "type": "StringValue",
+          "value": "David Rosner",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735700140" }
   },
@@ -2729,7 +2970,8 @@
            "uuid": "5f957996-8db3-47ff-829d-96df96237e65",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "b5620dda-b123-409c-8f92-c8fcf318d4e5",                // David Rosner
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735700156" }
   },
@@ -2744,7 +2986,8 @@
            "uuid": "61939bd6-2903-4f01-89a5-538a1cd2769f",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "11106568-0dfe-4bb8-8574-8a30b2874b25",                // David Flanagan
-          "value": { "type": "StringValue", "value": "David Flanagan" },
+           "type": "StringValue",
+          "value": "David Flanagan",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735705218" }
   },
@@ -2753,7 +2996,8 @@
            "uuid": "80c6fdb1-9852-49e6-825a-ed151113b7ac",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "11106568-0dfe-4bb8-8574-8a30b2874b25",                // David Flanagan
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735705218" }
   },
@@ -2763,7 +3007,8 @@
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "a11a8ac9-08d4-460b-8cfe-23ea90b04f7e",
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735713015" }
   },
@@ -2772,7 +3017,8 @@
            "uuid": "639d46b7-8479-4cb1-89c1-b5b338de5d86",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",                // O'Reilly
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735718921" }
   },
@@ -2787,7 +3033,8 @@
            "uuid": "c23a5be3-924c-446f-8bcd-40eb46e1af83",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",                // O'Reilly
-          "value": { "type": "StringValue", "value": "O'Reilly" },
+           "type": "StringValue",
+          "value": "O'Reilly",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735718906" }
   },
@@ -2796,7 +3043,8 @@
            "uuid": "3543b8aa-33e1-4974-8d6b-ba1041c99548",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",                // Perseus Publishing
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735728843" }
   },
@@ -2811,7 +3059,8 @@
            "uuid": "7812b147-bf2f-4e4a-8db0-05d173e79df0",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",                // Perseus Publishing
-          "value": { "type": "StringValue", "value": "Perseus Publishing" },
+           "type": "StringValue",
+          "value": "Perseus Publishing",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735728843" }
   },
@@ -2826,7 +3075,8 @@
            "uuid": "d0911998-ef56-405e-81e8-56176f14deaa",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "32b872e6-5f78-484e-8bd9-6e12d48fd266",                // HarperCollins
-          "value": { "type": "StringValue", "value": "HarperCollins" },
+           "type": "StringValue",
+          "value": "HarperCollins",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735733328" }
   },
@@ -2835,7 +3085,8 @@
            "uuid": "f262e255-5f33-4b02-8981-e0293a870042",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "32b872e6-5f78-484e-8bd9-6e12d48fd266",                // HarperCollins
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735733343" }
   },
@@ -2850,7 +3101,8 @@
            "uuid": "597e97a5-7c35-4135-83e1-51fba8bd6c03",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "fef1fb5a-d03d-490b-8396-f599d68652aa",                // Doubleday
-          "value": { "type": "StringValue", "value": "Doubleday" },
+           "type": "StringValue",
+          "value": "Doubleday",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735736468" }
   },
@@ -2859,7 +3111,8 @@
            "uuid": "2df70b86-1b15-4178-8eca-e65ccab69a13",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "fef1fb5a-d03d-490b-8396-f599d68652aa",                // Doubleday
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735736468" }
   },
@@ -2874,7 +3127,8 @@
            "uuid": "5a0b9077-4df7-4909-85db-5328546e3456",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "81a0fa22-0432-4f6e-822d-4e11caefa730",                // NYU Press
-          "value": { "type": "StringValue", "value": "NYU Press" },
+           "type": "StringValue",
+          "value": "NYU Press",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735740015" }
   },
@@ -2883,7 +3137,8 @@
            "uuid": "745cd21b-b190-4521-8d26-82eb3656a1ae",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "81a0fa22-0432-4f6e-822d-4e11caefa730",                // NYU Press
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735740015" }
   },
@@ -2898,7 +3153,8 @@
            "uuid": "c25ad76b-9a12-4b7b-852a-531b767bba76",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "774bf718-823a-4284-86d2-d24a334786af",                // University of California
-          "value": { "type": "StringValue", "value": "University of California" },
+           "type": "StringValue",
+          "value": "University of California",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735752015" }
   },
@@ -2907,7 +3163,8 @@
            "uuid": "fd2066e5-b876-4241-8c22-f7208af4ec85",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "774bf718-823a-4284-86d2-d24a334786af",                // University of California
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735752031" }
   },
@@ -2917,7 +3174,8 @@
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "5cceee12-d202-46ac-8724-0474ba4860ae",
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735771046" }
   },
@@ -2932,7 +3190,8 @@
            "uuid": "f19bf2d2-2a53-41ba-84e7-c9d5b82d908e",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "HTTP: The Definitive Guide" },
+           "type": "StringValue",
+          "value": "HTTP: The Definitive Guide",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735778156" }
   },
@@ -2941,7 +3200,8 @@
            "uuid": "d9360e8b-d892-49d4-8b2a-a4651ac92eb5",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735778156" }
   },
@@ -2950,7 +3210,8 @@
            "uuid": "5bd72c4e-90b9-487e-8c65-77dae04c9a2b",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735780703" }
   },
@@ -2965,7 +3226,8 @@
            "uuid": "43c67130-8b68-4d84-8883-83655c6b3c9f",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-          "value": { "type": "StringValue", "value": "The Hobbit" },
+           "type": "StringValue",
+          "value": "The Hobbit",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735780703" }
   },
@@ -2980,7 +3242,8 @@
            "uuid": "e9bf97a2-302a-498c-853e-505b66b8ca37",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "The Wisdom of Crowds" },
+           "type": "StringValue",
+          "value": "The Wisdom of Crowds",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735788562" }
   },
@@ -2989,7 +3252,8 @@
            "uuid": "a756ff74-be71-4870-8e30-09658e4d70f6",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735788578" }
   },
@@ -3004,7 +3268,8 @@
            "uuid": "66a95e67-5721-4711-83c0-2cfffffcfcd9",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "The Transparent Society" },
+           "type": "StringValue",
+          "value": "The Transparent Society",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735798062" }
   },
@@ -3013,7 +3278,8 @@
            "uuid": "38ca0209-7651-41ba-8f43-12b20273c614",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735798062" }
   },
@@ -3022,7 +3288,8 @@
            "uuid": "38ca0210-7651-41ba-8f43-12b20273c614",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-          "value": { "type": "RelatedUuid", "value": "de981d0d-16fd-430a-82d1-4d60d87e64e3" },
+           "type": "RelatedUuid",
+          "value": "de981d0d-16fd-430a-82d1-4d60d87e64e3",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735798062" }
   },
@@ -3031,7 +3298,8 @@
            "uuid": "38ca0211-7651-41ba-8f43-12b20273c614",
       "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
            "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-          "value": { "type": "RelatedUuid", "value": "0f4132ec-fabd-4857-8c26-1f842d3d94b3" },
+           "type": "RelatedUuid",
+          "value": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117735798062" }
   },
@@ -3040,7 +3308,8 @@
            "uuid": "ca3d4029-6e05-4079-8012-1dbe4dac5b94",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-          "value": { "type": "RelatedUuid", "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d" },
+           "type": "RelatedUuid",
+          "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736236500" }
   },
@@ -3049,7 +3318,8 @@
            "uuid": "1b5dc73a-34fb-4909-8f83-b7cadfa58d07",
       "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
            "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-          "value": { "type": "RelatedUuid", "value": "32b872e6-5f78-484e-8bd9-6e12d48fd266" },
+           "type": "RelatedUuid",
+          "value": "32b872e6-5f78-484e-8bd9-6e12d48fd266",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736261015" }
   },
@@ -3058,7 +3328,8 @@
            "uuid": "0a4d47fa-ffe2-409a-8590-50d527b159cd",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-          "value": { "type": "RelatedUuid", "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6" },
+           "type": "RelatedUuid",
+          "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736305546" }
   },
@@ -3068,7 +3339,8 @@
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
    "previousEntry": "0a4d47fa-ffe2-409a-8590-50d527b159cd",
-          "value": { "type": "StringValue", "value": "David Gourley" },
+           "type": "StringValue",
+          "value": "David Gourley",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736311578" }
   },
@@ -3078,7 +3350,8 @@
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
    "previousEntry": "ca3d4029-6e05-4079-8012-1dbe4dac5b94",
-          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
+           "type": "StringValue",
+          "value": "J.R.R. Tolkien",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736313546" }
   },
@@ -3087,7 +3360,8 @@
            "uuid": "5610ec06-b4e9-4eeb-867b-dad8b0073636",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "Brian Totty" },
+           "type": "StringValue",
+          "value": "Brian Totty",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736335578" }
   },
@@ -3096,7 +3370,8 @@
            "uuid": "bac5ec21-422a-4a5f-82f2-0518ab052b9e",
       "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
            "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-          "value": { "type": "RelatedUuid", "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c" },
+           "type": "RelatedUuid",
+          "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736353671" }
   },
@@ -3106,7 +3381,8 @@
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
    "previousEntry": "21e55207-dc7d-4dd5-86fc-da5ca9bbb20e",
-          "value": { "type": "RelatedUuid", "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6" },
+           "type": "RelatedUuid",
+          "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736369546" }
   },
@@ -3115,7 +3391,8 @@
            "uuid": "d9677f00-4c56-46f9-84c1-f5df896c1058",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-          "value": { "type": "RelatedUuid", "value": "9f47f559-d9b7-4b68-8dae-96a26cf2f232" },
+           "type": "RelatedUuid",
+          "value": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736379671" }
   },
@@ -3124,7 +3401,8 @@
            "uuid": "db17fade-a60b-463d-8f29-d9de909c3d35",
       "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
            "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-          "value": { "type": "RelatedUuid", "value": "fef1fb5a-d03d-490b-8396-f599d68652aa" },
+           "type": "RelatedUuid",
+          "value": "fef1fb5a-d03d-490b-8396-f599d68652aa",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736389781" }
   },
@@ -3133,7 +3411,8 @@
            "uuid": "d5326b0b-1228-4232-8a6e-d8be50b1af97",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736411390" }
   },
@@ -3148,7 +3427,8 @@
            "uuid": "426fdd09-3112-4be6-8998-d77fcba475b9",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" },
+           "type": "StringValue",
+          "value": "Shrinking Violets and Caspar Milquetoasts",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736411375" }
   },
@@ -3157,7 +3437,8 @@
            "uuid": "2fd80172-7c5c-45ba-8bc0-d6d212b4816c",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-          "value": { "type": "RelatedUuid", "value": "2a0a9a32-210a-429f-868d-3b015d3ae9ac" },
+           "type": "RelatedUuid",
+          "value": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736413562" }
   },
@@ -3166,7 +3447,8 @@
            "uuid": "ccc919f4-ba3a-4524-80ce-eaeda75880b2",
       "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
            "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-          "value": { "type": "RelatedUuid", "value": "81a0fa22-0432-4f6e-822d-4e11caefa730" },
+           "type": "RelatedUuid",
+          "value": "81a0fa22-0432-4f6e-822d-4e11caefa730",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736417593" }
   },
@@ -3175,7 +3457,8 @@
            "uuid": "bd1df12b-d9bf-4e57-8853-ae955baf296e",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736429578" }
   },
@@ -3190,7 +3473,8 @@
            "uuid": "9608e7de-7ec0-49ae-8425-aac277cef1ac",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "Deceit and Denial" },
+           "type": "StringValue",
+          "value": "Deceit and Denial",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736429578" }
   },
@@ -3199,7 +3483,8 @@
            "uuid": "cb5ea4e5-9d95-4a19-8959-a6fa702178e5",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-          "value": { "type": "RelatedUuid", "value": "1d9030cd-3659-42a1-8627-196644d6deb1" },
+           "type": "RelatedUuid",
+          "value": "1d9030cd-3659-42a1-8627-196644d6deb1",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736431937" }
   },
@@ -3209,7 +3494,8 @@
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
    "previousEntry": "cb5ea4e5-9d95-4a19-8959-a6fa702178e5",
-          "value": { "type": "StringValue", "value": "Gerald Markowitz" },
+           "type": "StringValue",
+          "value": "Gerald Markowitz",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736438968" }
   },
@@ -3218,7 +3504,8 @@
            "uuid": "cb57a1ef-d238-4400-8ab0-7714d39cdc62",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "D" },
+           "type": "StringValue",
+          "value": "D",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736444109" }
   },
@@ -3228,7 +3515,8 @@
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
    "previousEntry": "cb57a1ef-d238-4400-8ab0-7714d39cdc62",
-          "value": { "type": "StringValue", "value": "David Rosner" },
+           "type": "StringValue",
+          "value": "David Rosner",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736451250" }
   },
@@ -3237,7 +3525,8 @@
            "uuid": "dd9e8536-b688-433f-806b-b6e5e5786f2f",
       "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
            "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-          "value": { "type": "RelatedUuid", "value": "774bf718-823a-4284-86d2-d24a334786af" },
+           "type": "RelatedUuid",
+          "value": "774bf718-823a-4284-86d2-d24a334786af",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736460250" }
   },
@@ -3246,7 +3535,8 @@
            "uuid": "113eaca6-0936-476b-81c8-8275583d0ad6",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736474109" }
   },
@@ -3261,7 +3551,8 @@
            "uuid": "6835a402-d069-4565-88c1-1e6f577f0744",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "JavaScript: The Definitive Guide" },
+           "type": "StringValue",
+          "value": "JavaScript: The Definitive Guide",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736474109" }
   },
@@ -3270,7 +3561,8 @@
            "uuid": "09a9c592-7e0b-4bc1-8397-0a1596915793",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-          "value": { "type": "RelatedUuid", "value": "11106568-0dfe-4bb8-8574-8a30b2874b25" },
+           "type": "RelatedUuid",
+          "value": "11106568-0dfe-4bb8-8574-8a30b2874b25",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736475484" }
   },
@@ -3279,7 +3571,8 @@
            "uuid": "a6b5975a-7298-4fab-89cd-1c7455d47272",
       "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
            "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-          "value": { "type": "RelatedUuid", "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c" },
+           "type": "RelatedUuid",
+          "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736479968" }
   },
@@ -3294,7 +3587,8 @@
            "uuid": "41ec5e1b-5c19-45c2-8028-22037b49dbbb",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
-          "value": { "type": "StringValue", "value": "The Two Towers" },
+           "type": "StringValue",
+          "value": "The Two Towers",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736492531" }
   },
@@ -3303,7 +3597,8 @@
            "uuid": "7788e6bc-2c93-40cc-885c-312a17551a11",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736492531" }
   },
@@ -3312,7 +3607,8 @@
            "uuid": "99ee41ff-85d7-4744-827f-cc0e81017df6",
       "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
            "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
-          "value": { "type": "RelatedUuid", "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d" },
+           "type": "RelatedUuid",
+          "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736496203" }
   },
@@ -3321,7 +3617,8 @@
            "uuid": "0515ceef-33b9-477b-8ebf-66a3d0baf174",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "3011",                // Query for all books
-          "value": { "type": "RelatedUuid", "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e" },
+           "type": "RelatedUuid",
+          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736561171" }
   },
@@ -3331,7 +3628,8 @@
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // People
    "previousEntry": "54f4bd36-a6d7-4c00-8e3a-891183a307e9",
-          "value": { "type": "StringValue", "value": "People" },
+           "type": "StringValue",
+          "value": "People",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736688156" }
   },
@@ -3341,7 +3639,8 @@
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "cd9b4dfb-6fec-4f0f-815b-e0a2ae2ac7c3",
-          "value": { "type": "RelatedUuid", "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189" },
+           "type": "RelatedUuid",
+          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736701343" }
   },
@@ -3351,7 +3650,8 @@
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // All People
    "previousEntry": "a642b640-8897-4711-8bf1-60ce3627649d",
-          "value": { "type": "StringValue", "value": "All People" },
+           "type": "StringValue",
+          "value": "All People",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736711968" }
   },
@@ -3361,7 +3661,8 @@
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // All People
    "previousEntry": "41399161-e055-4881-82ca-96a985b4d3c1",
-          "value": { "type": "StringValue", "value": "Outline" },
+           "type": "StringValue",
+          "value": "Outline",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736715750" }
   },
@@ -3371,7 +3672,8 @@
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // People
    "previousEntry": "7ffbc5c1-e179-4f49-808c-8562c502529b",
-          "value": { "type": "StringValue", "value": "This is a page for keeping track of people." },
+           "type": "StringValue",
+          "value": "This is a page for keeping track of people.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736738984" }
   },
@@ -3386,7 +3688,8 @@
            "uuid": "ac20c09b-027c-4cf7-8d1d-c571b577d026",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-          "value": { "type": "StringValue", "value": "New Page" },
+           "type": "StringValue",
+          "value": "New Page",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3395,7 +3698,8 @@
            "uuid": "bb94fce5-d490-45c8-8ae0-49ebe7aab3fc",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-          "value": { "type": "RelatedUuid", "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3404,7 +3708,8 @@
            "uuid": "a831f70d-fd95-468a-8a0a-31a5937cbcd3",
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-          "value": { "type": "StringValue", "value": "This is a new page." },
+           "type": "StringValue",
+          "value": "This is a new page.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3419,7 +3724,8 @@
            "uuid": "5737311c-2d52-4354-8a85-6a404e947fd9",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-          "value": { "type": "StringValue", "value": "New Section" },
+           "type": "StringValue",
+          "value": "New Section",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3428,7 +3734,8 @@
            "uuid": "ee6af493-b200-4d26-8b88-2b641cd6fa80",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-          "value": { "type": "RelatedUuid", "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3437,7 +3744,8 @@
            "uuid": "3107a69d-8e86-4afe-8ec7-e82c95f9fcae",
       "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
            "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-          "value": { "type": "RelatedUuid", "value": "38e3da07-957f-40a2-894d-f3636aed7c23" },
+           "type": "RelatedUuid",
+          "value": "38e3da07-957f-40a2-894d-f3636aed7c23",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3446,7 +3754,8 @@
            "uuid": "0a8d7e91-ca14-49a4-8064-e5eabe133b78",
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-          "value": { "type": "StringValue", "value": "Table" },
+           "type": "StringValue",
+          "value": "Table",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3461,7 +3770,8 @@
            "uuid": "02b28988-dd13-4ffb-8933-bb6c5b9d2822",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
-          "value": { "type": "StringValue", "value": "New Query" },
+           "type": "StringValue",
+          "value": "New Query",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3470,7 +3780,8 @@
            "uuid": "d3b32b1d-0f22-439e-85ff-f069e4d76bff",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
            "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
-          "value": { "type": "RelatedUuid", "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6" },
+           "type": "RelatedUuid",
+          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3479,7 +3790,8 @@
            "uuid": "f8fd9872-3806-42c8-886f-78cdb53299ad",
       "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
            "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-          "value": { "type": "RelatedUuid", "value": "e30ba726-d976-46fb-88ac-7f5e841a6b43" },
+           "type": "RelatedUuid",
+          "value": "e30ba726-d976-46fb-88ac-7f5e841a6b43",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736745062" }
   },
@@ -3488,7 +3800,8 @@
            "uuid": "414b2c92-ded7-4071-8ff3-af2468ec665b",
       "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
            "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
-          "value": { "type": "RelatedUuid", "value": "ea435816-c5c0-482b-8850-5651fbfaad12" },
+           "type": "RelatedUuid",
+          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736753953" }
   },
@@ -3498,7 +3811,8 @@
       "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
            "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
    "previousEntry": "0a8d7e91-ca14-49a4-8064-e5eabe133b78",
-          "value": { "type": "StringValue", "value": "Outline" },
+           "type": "StringValue",
+          "value": "Outline",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736756890" }
   },
@@ -3508,7 +3822,8 @@
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // Publishers
    "previousEntry": "ac20c09b-027c-4cf7-8d1d-c571b577d026",
-          "value": { "type": "StringValue", "value": "Publishers" },
+           "type": "StringValue",
+          "value": "Publishers",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736763359" }
   },
@@ -3518,7 +3833,8 @@
       "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
            "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // Publishers
    "previousEntry": "a831f70d-fd95-468a-8a0a-31a5937cbcd3",
-          "value": { "type": "StringValue", "value": "This is a page for keeping track of publishers." },
+           "type": "StringValue",
+          "value": "This is a page for keeping track of publishers.",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736780078" }
   },
@@ -3528,7 +3844,8 @@
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
            "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // All Publishers
    "previousEntry": "5737311c-2d52-4354-8a85-6a404e947fd9",
-          "value": { "type": "StringValue", "value": "All Publishers" },
+           "type": "StringValue",
+          "value": "All Publishers",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1117736787093" }
   }
\ No newline at end of file



From mignon at sheep.berlios.de  Tue Jun 14 06:36:57 2005
From: mignon at sheep.berlios.de (Mignon Belongie at BerliOS)
Date: Tue, 14 Jun 2005 06:36:57 +0200
Subject: [openrecord-svn] r136 - trunk/documentation
Message-ID: <200506140436.j5E4av5b005425@sheep.berlios.de>

Author: mignon
Date: 2005-06-14 06:36:57 +0200 (Tue, 14 Jun 2005)
New Revision: 136

Modified:
   trunk/documentation/release_planning.txt
Log:
Checked out task.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-14 01:34:10 UTC (rev 135)
+++ trunk/documentation/release_planning.txt	2005-06-14 04:36:57 UTC (rev 136)
@@ -157,7 +157,7 @@
 -------+----------+---------+----------------------------------------------
        |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
 mignon | 0.25 IED |         |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
-       |          |         |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
+mignon | 0.5  IED |         |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
 brian  | 0.5  IED |         |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction



From skinner at sheep.berlios.de  Tue Jun 14 21:54:45 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 14 Jun 2005 21:54:45 +0200
Subject: [openrecord-svn] r137 - trunk/documentation
Message-ID: <200506141954.j5EJsjcg017229@sheep.berlios.de>

Author: skinner
Date: 2005-06-14 21:54:44 +0200 (Tue, 14 Jun 2005)
New Revision: 137

Modified:
   trunk/documentation/release_planning.txt
Log:
recording chao signing up to do new query representation 

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-14 04:36:57 UTC (rev 136)
+++ trunk/documentation/release_planning.txt	2005-06-14 19:54:44 UTC (rev 137)
@@ -165,7 +165,7 @@
 chao   | 0.5  IED |         |  8. UI for entering a number literal (instead of a string literal) in a table
 chao   | 1    IED |         |  9. UI for entering a date literal in a table (and data model support)
        |          |         | 10. Add data model support for bi-directional references
-       |          |         | 11. Move to better persistent representation for queries
+chao   | ?        |         | 11. Move to better persistent representation for queries
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields
        |          |         | 14. BUG: problems with newlines and HTML characters in text strings



From skinner at sheep.berlios.de  Tue Jun 14 22:34:25 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 14 Jun 2005 22:34:25 +0200
Subject: [openrecord-svn] r138 - trunk/source/model
Message-ID: <200506142034.j5EKYPjS019532@sheep.berlios.de>

Author: skinner
Date: 2005-06-14 22:34:24 +0200 (Tue, 14 Jun 2005)
New Revision: 138

Removed:
   trunk/source/model/test_data_2005_april_chronological_lump.json
   trunk/source/model/test_data_2005_march_item_centric_list.json
Log:
Deleted obsolete test-data files.

Deleted: trunk/source/model/test_data_2005_april_chronological_lump.json
===================================================================
--- trunk/source/model/test_data_2005_april_chronological_lump.json	2005-06-14 19:54:44 UTC (rev 137)
+++ trunk/source/model/test_data_2005_april_chronological_lump.json	2005-06-14 20:34:24 UTC (rev 138)
@@ -1,2877 +0,0 @@
-// Repository dump, in JSON format
-{ "format": "2005_APRIL_CHRONOLOGICAL_LIST", 
-  "data": [
-  { "Item": {                             // Amy ex machina
-           "uuid": "100",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Name
-           "uuid": "102",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Short Name
-           "uuid": "101",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Summary
-           "uuid": "103",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Body
-           "uuid": "104",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Category
-           "uuid": "105",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Section
-           "uuid": "108",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query
-           "uuid": "109",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Matching Category
-           "uuid": "110",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Matching Item
-           "uuid": "111",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Unfiled Entry
-           "uuid": "112",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Plugin Name
-           "uuid": "113",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457240" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Attribute
-           "uuid": "143",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Category
-           "uuid": "144",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Page
-           "uuid": "145",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Section
-           "uuid": "146",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query
-           "uuid": "147",
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Amy ex machina
-           "uuid": "1471",
-      "attribute": "102",                // Name
-           "item": "100",                // Amy ex machina
-          "value": { "type": "StringValue", "value": "Amy ex machina" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Name
-           "uuid": "1472",
-      "attribute": "102",                // Name
-           "item": "102",                // Name
-          "value": { "type": "StringValue", "value": "Name" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1473",
-      "attribute": "105",                // Category
-           "item": "102",                // Name
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Short Name
-           "uuid": "1474",
-      "attribute": "102",                // Name
-           "item": "101",                // Short Name
-          "value": { "type": "StringValue", "value": "Short Name" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1475",
-      "attribute": "105",                // Category
-           "item": "101",                // Short Name
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Summary
-           "uuid": "1476",
-      "attribute": "102",                // Name
-           "item": "103",                // Summary
-          "value": { "type": "StringValue", "value": "Summary" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1477",
-      "attribute": "105",                // Category
-           "item": "103",                // Summary
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Body
-           "uuid": "1478",
-      "attribute": "102",                // Name
-           "item": "104",                // Body
-          "value": { "type": "StringValue", "value": "Body" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1479",
-      "attribute": "105",                // Category
-           "item": "104",                // Body
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1480",
-      "attribute": "102",                // Name
-           "item": "105",                // Category
-          "value": { "type": "StringValue", "value": "Category" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1481",
-      "attribute": "105",                // Category
-           "item": "105",                // Category
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "1482",
-      "attribute": "102",                // Name
-           "item": "108",                // Section
-          "value": { "type": "StringValue", "value": "Section" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1483",
-      "attribute": "105",                // Category
-           "item": "108",                // Section
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "1484",
-      "attribute": "102",                // Name
-           "item": "109",                // Query
-          "value": { "type": "StringValue", "value": "Query" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1485",
-      "attribute": "105",                // Category
-           "item": "109",                // Query
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Matching Category
-           "uuid": "1486",
-      "attribute": "102",                // Name
-           "item": "110",                // Matching Category
-          "value": { "type": "StringValue", "value": "Matching Category" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1487",
-      "attribute": "105",                // Category
-           "item": "110",                // Matching Category
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Matching Item
-           "uuid": "1488",
-      "attribute": "102",                // Name
-           "item": "111",                // Matching Item
-          "value": { "type": "StringValue", "value": "Matching Item" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1489",
-      "attribute": "105",                // Category
-           "item": "111",                // Matching Item
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Unfiled Entry
-           "uuid": "1490",
-      "attribute": "102",                // Name
-           "item": "112",                // Unfiled Entry
-          "value": { "type": "StringValue", "value": "Unfiled Entry" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1491",
-      "attribute": "105",                // Category
-           "item": "112",                // Unfiled Entry
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Plugin Name
-           "uuid": "1469",
-      "attribute": "102",                // Name
-           "item": "113",                // Plugin Name
-          "value": { "type": "StringValue", "value": "Plugin Name" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457537" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1470",
-      "attribute": "105",                // Category
-           "item": "113",                // Plugin Name
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457543" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1492",
-      "attribute": "102",                // Name
-           "item": "143",                // Attribute
-          "value": { "type": "StringValue", "value": "Attribute" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1493",
-      "attribute": "105",                // Category
-           "item": "143",                // Attribute
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1494",
-      "attribute": "102",                // Name
-           "item": "144",                // Category
-          "value": { "type": "StringValue", "value": "Category" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1495",
-      "attribute": "105",                // Category
-           "item": "144",                // Category
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "1496",
-      "attribute": "102",                // Name
-           "item": "145",                // Page
-          "value": { "type": "StringValue", "value": "Page" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457593" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1497",
-      "attribute": "105",                // Category
-           "item": "145",                // Page
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "1498",
-      "attribute": "102",                // Name
-           "item": "146",                // Section
-          "value": { "type": "StringValue", "value": "Section" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1499",
-      "attribute": "105",                // Category
-           "item": "146",                // Section
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "1500",
-      "attribute": "102",                // Name
-           "item": "147",                // Query
-          "value": { "type": "StringValue", "value": "Query" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1501",
-      "attribute": "105",                // Category
-           "item": "147",                // Query
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "100",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Guest
-           "uuid": "1502",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Guest
-           "uuid": "1503",
-      "attribute": "102",                // Name
-           "item": "1502",                // Guest
-          "value": { "type": "StringValue", "value": "Guest" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Userstamp
-           "uuid": "106",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Timestamp
-           "uuid": "107",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Welcome to the OpenRecord d...
-           "uuid": "2000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Book Lists
-           "uuid": "3000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Books
-           "uuid": "3010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // One Book
-           "uuid": "3020",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all books
-           "uuid": "3011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for one book
-           "uuid": "3021",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Book
-           "uuid": "3104",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // HTTP: The Definitive Guide
-           "uuid": "3205",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Author
-           "uuid": "3101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Publisher
-           "uuid": "3102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // ISBN
-           "uuid": "3103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Transparent Society
-           "uuid": "3201",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Hobbit
-           "uuid": "3202",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457843" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Wisdom of Crowds
-           "uuid": "3203",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Shrinking Violets and Caspa...
-           "uuid": "3204",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Bugs and Features to Implement
-           "uuid": "4000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Features
-           "uuid": "4010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Bugs
-           "uuid": "4020",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All 'Closed' Bugs and Features
-           "uuid": "4030",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All 'Closed' Bugs
-           "uuid": "4040",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all features
-           "uuid": "4011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all bugs
-           "uuid": "4021",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457937" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all closed items
-           "uuid": "4031",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all closed bugs
-           "uuid": "4041",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Feature
-           "uuid": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Bug
-           "uuid": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Closed Tasks
-           "uuid": "4103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The browser's back button d...
-           "uuid": "4201",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // When editing an item in a t...
-           "uuid": "4202",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // After editing an item in a ...
-           "uuid": "4203",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // If an item has an attribute...
-           "uuid": "4204",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Store only 'clean' text in ...
-           "uuid": "4205",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Make it possible for a text...
-           "uuid": "4302",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Make it possible to assign ...
-           "uuid": "4304",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Allow for entering number-v...
-           "uuid": "4305",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Have table mode show multi-...
-           "uuid": "4306",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // When you assign a value to ...
-           "uuid": "4307",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Clean up all the code that ...
-           "uuid": "4308",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458109" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to create new pages
-           "uuid": "4309",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to add a new sectio...
-           "uuid": "4310",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Observable queries: all ite...
-           "uuid": "4311",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Observable queries: limit r...
-           "uuid": "4312",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to edit the query o...
-           "uuid": "4313",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Make it possible to add new...
-           "uuid": "4314",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Figure out how to declare d...
-           "uuid": "4315",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // URLs with anchor-dot-notati...
-           "uuid": "4316",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Support for reference-value...
-           "uuid": "4317",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Write unit tests using jsunit
-           "uuid": "4318",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Try to write a unit test th...
-           "uuid": "4319",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // In 'Outline' plugin, have c...
-           "uuid": "4320",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Add 'Table' plugin controls...
-           "uuid": "4321",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // In 'Outline' plugin, be abl...
-           "uuid": "4322",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // In 'Table' plugin, be able ...
-           "uuid": "4323",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to edit in outline ...
-           "uuid": "4324",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Set up a subversion server ...
-           "uuid": "4325",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Charities
-           "uuid": "5000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Charities
-           "uuid": "5010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all charities
-           "uuid": "5011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Charity
-           "uuid": "5101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // 2003 Expenses (in $US million)
-           "uuid": "5102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Global Fund for Women
-           "uuid": "5201",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Pathfinder International
-           "uuid": "5202",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Global Fund to Fight AI...
-           "uuid": "5203",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Gumption Memo
-           "uuid": "5204",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Deceit and Denial
-           "uuid": "5205",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Have a 'Find' UI that does ...
-           "uuid": "5207",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to 'delete' items (...
-           "uuid": "5208",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Make view.display() *not* r...
-           "uuid": "5209",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Items
-           "uuid": "6000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Items
-           "uuid": "6010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all items
-           "uuid": "6011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // JavaScript: The Definitive ...
-           "uuid": "6012",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Two Towers
-           "uuid": "6013",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Userstamp
-           "uuid": "6014",
-      "attribute": "102",                // Name
-           "item": "106",                // Userstamp
-          "value": { "type": "StringValue", "value": "Userstamp" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6015",
-      "attribute": "105",                // Category
-           "item": "106",                // Userstamp
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Timestamp
-           "uuid": "6016",
-      "attribute": "102",                // Name
-           "item": "107",                // Timestamp
-          "value": { "type": "StringValue", "value": "Timestamp" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6017",
-      "attribute": "105",                // Category
-           "item": "107",                // Timestamp
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6018",
-      "attribute": "105",                // Category
-           "item": "2000",                // Welcome to the OpenRecord d...
-          "value": { "type": "RelatedUuid", "value": "145" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 1. Welcome!
-           "uuid": "6019",
-      "attribute": "101",                // Short Name
-           "item": "2000",                // Welcome to the OpenRecord d...
-          "value": { "type": "StringValue", "value": "1. Welcome!" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Welcome to the OpenRecord d...
-           "uuid": "6020",
-      "attribute": "102",                // Name
-           "item": "2000",                // Welcome to the OpenRecord d...
-          "value": { "type": "StringValue", "value": "Welcome to the OpenRecord demo!" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This web site is a demo of ...
-           "uuid": "6021",
-      "attribute": "103",                // Summary
-           "item": "2000",                // Welcome to the OpenRecord d...
-          "value": { "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6022",
-      "attribute": "105",                // Category
-           "item": "3000",                // Book Lists
-          "value": { "type": "RelatedUuid", "value": "145" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 2. Books
-           "uuid": "6023",
-      "attribute": "101",                // Short Name
-           "item": "3000",                // Book Lists
-          "value": { "type": "StringValue", "value": "2. Books" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book Lists
-           "uuid": "6024",
-      "attribute": "102",                // Name
-           "item": "3000",                // Book Lists
-          "value": { "type": "StringValue", "value": "Book Lists" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In the lists on this page, ...
-           "uuid": "6025",
-      "attribute": "103",                // Summary
-           "item": "3000",                // Book Lists
-          "value": { "type": "StringValue", "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Books
-           "uuid": "6026",
-      "attribute": "108",                // Section
-           "item": "3000",                // Book Lists
-          "value": { "type": "RelatedUuid", "value": "3010" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // One Book
-           "uuid": "6027",
-      "attribute": "108",                // Section
-           "item": "3000",                // Book Lists
-          "value": { "type": "RelatedUuid", "value": "3020" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458843" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6028",
-      "attribute": "105",                // Category
-           "item": "3010",                // All Books
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Books
-           "uuid": "6029",
-      "attribute": "102",                // Name
-           "item": "3010",                // All Books
-          "value": { "type": "StringValue", "value": "All Books" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Table
-           "uuid": "6030",
-      "attribute": "113",                // Plugin Name
-           "item": "3010",                // All Books
-          "value": { "type": "StringValue", "value": "Table" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all books
-           "uuid": "6031",
-      "attribute": "109",                // Query
-           "item": "3010",                // All Books
-          "value": { "type": "RelatedUuid", "value": "3011" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This section shows a list o...
-           "uuid": "6032",
-      "attribute": "103",                // Summary
-           "item": "3010",                // All Books
-          "value": { "type": "StringValue", "value": "This section shows a list of all the books in the repository." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458937" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6033",
-      "attribute": "105",                // Category
-           "item": "3020",                // One Book
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // One Book
-           "uuid": "6034",
-      "attribute": "102",                // Name
-           "item": "3020",                // One Book
-          "value": { "type": "StringValue", "value": "One Book" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Detail
-           "uuid": "6035",
-      "attribute": "113",                // Plugin Name
-           "item": "3020",                // One Book
-          "value": { "type": "StringValue", "value": "Detail" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for one book
-           "uuid": "6036",
-      "attribute": "109",                // Query
-           "item": "3020",                // One Book
-          "value": { "type": "RelatedUuid", "value": "3021" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This section shows a just a...
-           "uuid": "6037",
-      "attribute": "103",                // Summary
-           "item": "3020",                // One Book
-          "value": { "type": "StringValue", "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6038",
-      "attribute": "105",                // Category
-           "item": "3011",                // Query for all books
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all books
-           "uuid": "6039",
-      "attribute": "102",                // Name
-           "item": "3011",                // Query for all books
-          "value": { "type": "StringValue", "value": "Query for all books" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6040",
-      "attribute": "110",                // Matching Category
-           "item": "3011",                // Query for all books
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459109" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6041",
-      "attribute": "105",                // Category
-           "item": "3021",                // Query for one book
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for one book
-           "uuid": "6042",
-      "attribute": "102",                // Name
-           "item": "3021",                // Query for one book
-          "value": { "type": "StringValue", "value": "Query for one book" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HTTP: The Definitive Guide
-           "uuid": "6043",
-      "attribute": "111",                // Matching Item
-           "item": "3021",                // Query for one book
-          "value": { "type": "RelatedUuid", "value": "3205" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6044",
-      "attribute": "105",                // Category
-           "item": "3104",                // Book
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6045",
-      "attribute": "102",                // Name
-           "item": "3104",                // Book
-          "value": { "type": "StringValue", "value": "Book" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6046",
-      "attribute": "105",                // Category
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HTTP: The Definitive Guide
-           "uuid": "6047",
-      "attribute": "102",                // Name
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "HTTP: The Definitive Guide" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Gourley and Brian Totty
-           "uuid": "6048",
-      "attribute": "3101",                // Author
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "David Gourley and Brian Totty" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 1565925092
-           "uuid": "6049",
-      "attribute": "3103",                // ISBN
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "1565925092" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // O'Reilly
-           "uuid": "6050",
-      "attribute": "3102",                // Publisher
-           "item": "3205",                // HTTP: The Definitive Guide
-          "value": { "type": "StringValue", "value": "O'Reilly" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6051",
-      "attribute": "105",                // Category
-           "item": "3101",                // Author
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Author
-           "uuid": "6052",
-      "attribute": "102",                // Name
-           "item": "3101",                // Author
-          "value": { "type": "StringValue", "value": "Author" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6053",
-      "attribute": "105",                // Category
-           "item": "3102",                // Publisher
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "6054",
-      "attribute": "102",                // Name
-           "item": "3102",                // Publisher
-          "value": { "type": "StringValue", "value": "Publisher" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6055",
-      "attribute": "105",                // Category
-           "item": "3103",                // ISBN
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // ISBN
-           "uuid": "6056",
-      "attribute": "102",                // Name
-           "item": "3103",                // ISBN
-          "value": { "type": "StringValue", "value": "ISBN" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6057",
-      "attribute": "105",                // Category
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Transparent Society
-           "uuid": "6058",
-      "attribute": "102",                // Name
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "The Transparent Society" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Brin
-           "uuid": "6059",
-      "attribute": "3101",                // Author
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "David Brin" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Perseus Publishing
-           "uuid": "6060",
-      "attribute": "3102",                // Publisher
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "Perseus Publishing" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0738201448
-           "uuid": "6061",
-      "attribute": "3103",                // ISBN
-           "item": "3201",                // The Transparent Society
-          "value": { "type": "StringValue", "value": "0738201448" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6062",
-      "attribute": "105",                // Category
-           "item": "3202",                // The Hobbit
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Hobbit
-           "uuid": "6063",
-      "attribute": "102",                // Name
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "The Hobbit" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459593" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "6064",
-      "attribute": "3101",                // Author
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HarperCollins
-           "uuid": "6065",
-      "attribute": "3102",                // Publisher
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "HarperCollins" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Houghton Mifflin
-           "uuid": "6066",
-      "attribute": "3102",                // Publisher
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "Houghton Mifflin" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0618002219
-           "uuid": "6067",
-      "attribute": "3103",                // ISBN
-           "item": "3202",                // The Hobbit
-          "value": { "type": "StringValue", "value": "0618002219" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6068",
-      "attribute": "105",                // Category
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Wisdom of Crowds
-           "uuid": "6069",
-      "attribute": "102",                // Name
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "The Wisdom of Crowds" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // James Surowiecki
-           "uuid": "6070",
-      "attribute": "3101",                // Author
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "James Surowiecki" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0385503865
-           "uuid": "6071",
-      "attribute": "3103",                // ISBN
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "0385503865" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Doubleday
-           "uuid": "6072",
-      "attribute": "3102",                // Publisher
-           "item": "3203",                // The Wisdom of Crowds
-          "value": { "type": "StringValue", "value": "Doubleday" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6073",
-      "attribute": "105",                // Category
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Shrinking Violets and Caspa...
-           "uuid": "6074",
-      "attribute": "102",                // Name
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Patricia A. McDaniel
-           "uuid": "6075",
-      "attribute": "3101",                // Author
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "Patricia A. McDaniel" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0814756778
-           "uuid": "6076",
-      "attribute": "3103",                // ISBN
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "0814756778" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459843" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // NYU Press
-           "uuid": "6077",
-      "attribute": "3102",                // Publisher
-           "item": "3204",                // Shrinking Violets and Caspa...
-          "value": { "type": "StringValue", "value": "NYU Press" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6078",
-      "attribute": "105",                // Category
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "145" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 3. Bug List
-           "uuid": "6079",
-      "attribute": "101",                // Short Name
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "StringValue", "value": "3. Bug List" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bugs and Features to Implement
-           "uuid": "6080",
-      "attribute": "102",                // Name
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "StringValue", "value": "Bugs and Features to Implement" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This page is where I keep t...
-           "uuid": "6081",
-      "attribute": "103",                // Summary
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "StringValue", "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Features
-           "uuid": "6082",
-      "attribute": "108",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4010" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Bugs
-           "uuid": "6083",
-      "attribute": "108",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4020" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs and Features
-           "uuid": "6084",
-      "attribute": "108",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4030" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs
-           "uuid": "6085",
-      "attribute": "108",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-          "value": { "type": "RelatedUuid", "value": "4040" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6086",
-      "attribute": "105",                // Category
-           "item": "4010",                // All Features
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Features
-           "uuid": "6087",
-      "attribute": "102",                // Name
-           "item": "4010",                // All Features
-          "value": { "type": "StringValue", "value": "All Features" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6088",
-      "attribute": "113",                // Plugin Name
-           "item": "4010",                // All Features
-          "value": { "type": "StringValue", "value": "Outline" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all features
-           "uuid": "6089",
-      "attribute": "109",                // Query
-           "item": "4010",                // All Features
-          "value": { "type": "RelatedUuid", "value": "4011" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6090",
-      "attribute": "105",                // Category
-           "item": "4020",                // All Bugs
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Bugs
-           "uuid": "6091",
-      "attribute": "102",                // Name
-           "item": "4020",                // All Bugs
-          "value": { "type": "StringValue", "value": "All Bugs" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6092",
-      "attribute": "113",                // Plugin Name
-           "item": "4020",                // All Bugs
-          "value": { "type": "StringValue", "value": "Outline" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all bugs
-           "uuid": "6093",
-      "attribute": "109",                // Query
-           "item": "4020",                // All Bugs
-          "value": { "type": "RelatedUuid", "value": "4021" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6094",
-      "attribute": "105",                // Category
-           "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs and Features
-           "uuid": "6095",
-      "attribute": "102",                // Name
-           "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "StringValue", "value": "All 'Closed' Bugs and Features" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6096",
-      "attribute": "113",                // Plugin Name
-           "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "StringValue", "value": "Outline" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed items
-           "uuid": "6097",
-      "attribute": "109",                // Query
-           "item": "4030",                // All 'Closed' Bugs and Features
-          "value": { "type": "RelatedUuid", "value": "4031" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6098",
-      "attribute": "105",                // Category
-           "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs
-           "uuid": "6099",
-      "attribute": "102",                // Name
-           "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "StringValue", "value": "All 'Closed' Bugs" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6100",
-      "attribute": "113",                // Plugin Name
-           "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "StringValue", "value": "Outline" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed bugs
-           "uuid": "6101",
-      "attribute": "109",                // Query
-           "item": "4040",                // All 'Closed' Bugs
-          "value": { "type": "RelatedUuid", "value": "4041" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6102",
-      "attribute": "105",                // Category
-           "item": "4011",                // Query for all features
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all features
-           "uuid": "6103",
-      "attribute": "102",                // Name
-           "item": "4011",                // Query for all features
-          "value": { "type": "StringValue", "value": "Query for all features" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6104",
-      "attribute": "110",                // Matching Category
-           "item": "4011",                // Query for all features
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6105",
-      "attribute": "105",                // Category
-           "item": "4021",                // Query for all bugs
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all bugs
-           "uuid": "6106",
-      "attribute": "102",                // Name
-           "item": "4021",                // Query for all bugs
-          "value": { "type": "StringValue", "value": "Query for all bugs" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6107",
-      "attribute": "110",                // Matching Category
-           "item": "4021",                // Query for all bugs
-          "value": { "type": "RelatedUuid", "value": "4101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6108",
-      "attribute": "105",                // Category
-           "item": "4031",                // Query for all closed items
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed items
-           "uuid": "6109",
-      "attribute": "102",                // Name
-           "item": "4031",                // Query for all closed items
-          "value": { "type": "StringValue", "value": "Query for all closed items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6110",
-      "attribute": "110",                // Matching Category
-           "item": "4031",                // Query for all closed items
-          "value": { "type": "RelatedUuid", "value": "4103" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6111",
-      "attribute": "105",                // Category
-           "item": "4041",                // Query for all closed bugs
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed bugs
-           "uuid": "6112",
-      "attribute": "102",                // Name
-           "item": "4041",                // Query for all closed bugs
-          "value": { "type": "StringValue", "value": "Query for all closed bugs" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6113",
-      "attribute": "110",                // Matching Category
-           "item": "4041",                // Query for all closed bugs
-          "value": { "type": "RelatedUuid", "value": "4101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6114",
-      "attribute": "110",                // Matching Category
-           "item": "4041",                // Query for all closed bugs
-          "value": { "type": "RelatedUuid", "value": "4103" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6115",
-      "attribute": "105",                // Category
-           "item": "4102",                // Feature
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6116",
-      "attribute": "102",                // Name
-           "item": "4102",                // Feature
-          "value": { "type": "StringValue", "value": "Feature" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6117",
-      "attribute": "105",                // Category
-           "item": "4101",                // Bug
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6118",
-      "attribute": "102",                // Name
-           "item": "4101",                // Bug
-          "value": { "type": "StringValue", "value": "Bug" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6119",
-      "attribute": "105",                // Category
-           "item": "4103",                // Closed Tasks
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6120",
-      "attribute": "102",                // Name
-           "item": "4103",                // Closed Tasks
-          "value": { "type": "StringValue", "value": "Closed Tasks" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6121",
-      "attribute": "105",                // Category
-           "item": "4201",                // The browser's back button d...
-          "value": { "type": "RelatedUuid", "value": "4101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The browser's back button d...
-           "uuid": "6122",
-      "attribute": "102",                // Name
-           "item": "4201",                // The browser's back button d...
-          "value": { "type": "StringValue", "value": "The browser's back button doesn't work after you click from page to page in the navbar." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6123",
-      "attribute": "105",                // Category
-           "item": "4202",                // When editing an item in a t...
-          "value": { "type": "RelatedUuid", "value": "4101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // When editing an item in a t...
-           "uuid": "6124",
-      "attribute": "102",                // Name
-           "item": "4202",                // When editing an item in a t...
-          "value": { "type": "StringValue", "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6125",
-      "attribute": "105",                // Category
-           "item": "4203",                // After editing an item in a ...
-          "value": { "type": "RelatedUuid", "value": "4101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // After editing an item in a ...
-           "uuid": "6126",
-      "attribute": "102",                // Name
-           "item": "4203",                // After editing an item in a ...
-          "value": { "type": "StringValue", "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6127",
-      "attribute": "105",                // Category
-           "item": "4204",                // If an item has an attribute...
-          "value": { "type": "RelatedUuid", "value": "4101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460937" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6128",
-      "attribute": "105",                // Category
-           "item": "4204",                // If an item has an attribute...
-          "value": { "type": "RelatedUuid", "value": "4103" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // If an item has an attribute...
-           "uuid": "6129",
-      "attribute": "102",                // Name
-           "item": "4204",                // If an item has an attribute...
-          "value": { "type": "StringValue", "value": "If an item has an attribute value with some HTML in it, like '&amp;lt;cite&amp;gt;', we incorrectly render it like '&amp; lt;cite&amp; gt;' instead of '&amp;lt;cite&amp;gt;'" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6130",
-      "attribute": "105",                // Category
-           "item": "4205",                // Store only 'clean' text in ...
-          "value": { "type": "RelatedUuid", "value": "4101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6131",
-      "attribute": "105",                // Category
-           "item": "4205",                // Store only 'clean' text in ...
-          "value": { "type": "RelatedUuid", "value": "4103" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Store only 'clean' text in ...
-           "uuid": "6132",
-      "attribute": "102",                // Name
-           "item": "4205",                // Store only 'clean' text in ...
-          "value": { "type": "StringValue", "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &amp;lt; and &amp;gt; and double-quotes" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6133",
-      "attribute": "105",                // Category
-           "item": "4302",                // Make it possible for a text...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6134",
-      "attribute": "105",                // Category
-           "item": "4302",                // Make it possible for a text...
-          "value": { "type": "RelatedUuid", "value": "4103" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make it possible for a text...
-           "uuid": "6135",
-      "attribute": "102",                // Name
-           "item": "4302",                // Make it possible for a text...
-          "value": { "type": "StringValue", "value": "Make it possible for a text string to contain a reference to an item" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6136",
-      "attribute": "105",                // Category
-           "item": "4304",                // Make it possible to assign ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make it possible to assign ...
-           "uuid": "6137",
-      "attribute": "102",                // Name
-           "item": "4304",                // Make it possible to assign ...
-          "value": { "type": "StringValue", "value": "Make it possible to assign items to categories -- allow for entering reference-values, not just string-values" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6138",
-      "attribute": "105",                // Category
-           "item": "4305",                // Allow for entering number-v...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Allow for entering number-v...
-           "uuid": "6139",
-      "attribute": "102",                // Name
-           "item": "4305",                // Allow for entering number-v...
-          "value": { "type": "StringValue", "value": "Allow for entering number-values, not just string-values" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6140",
-      "attribute": "105",                // Category
-           "item": "4306",                // Have table mode show multi-...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Have table mode show multi-...
-           "uuid": "6141",
-      "attribute": "102",                // Name
-           "item": "4306",                // Have table mode show multi-...
-          "value": { "type": "StringValue", "value": "Have table mode show multi-valued attributes" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6142",
-      "attribute": "105",                // Category
-           "item": "4307",                // When you assign a value to ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // When you assign a value to ...
-           "uuid": "6143",
-      "attribute": "102",                // Name
-           "item": "4307",                // When you assign a value to ...
-          "value": { "type": "StringValue", "value": "When you assign a value to an item, mark it with a timestamp" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6144",
-      "attribute": "105",                // Category
-           "item": "4308",                // Clean up all the code that ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Clean up all the code that ...
-           "uuid": "6145",
-      "attribute": "102",                // Name
-           "item": "4308",                // Clean up all the code that ...
-          "value": { "type": "StringValue", "value": "Clean up all the code that assumes single-valued attributes -- search for '[0]'" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6146",
-      "attribute": "105",                // Category
-           "item": "4309",                // Be able to create new pages
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to create new pages
-           "uuid": "6147",
-      "attribute": "102",                // Name
-           "item": "4309",                // Be able to create new pages
-          "value": { "type": "StringValue", "value": "Be able to create new pages" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6148",
-      "attribute": "105",                // Category
-           "item": "4310",                // Be able to add a new sectio...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to add a new sectio...
-           "uuid": "6149",
-      "attribute": "102",                // Name
-           "item": "4310",                // Be able to add a new sectio...
-          "value": { "type": "StringValue", "value": "Be able to add a new section to a page" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6150",
-      "attribute": "105",                // Category
-           "item": "4311",                // Observable queries: all ite...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Observable queries: all ite...
-           "uuid": "6151",
-      "attribute": "102",                // Name
-           "item": "4311",                // Observable queries: all ite...
-          "value": { "type": "StringValue", "value": "Observable queries: all items, limited to a requested subset based on kind and category (e.g. 'All fiction books')" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6152",
-      "attribute": "105",                // Category
-           "item": "4312",                // Observable queries: limit r...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Observable queries: limit r...
-           "uuid": "6153",
-      "attribute": "102",                // Name
-           "item": "4312",                // Observable queries: limit r...
-          "value": { "type": "StringValue", "value": "Observable queries: limit results to just a requested subset of the attributes (e.g. just the names of the books)" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6154",
-      "attribute": "105",                // Category
-           "item": "4313",                // Be able to edit the query o...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to edit the query o...
-           "uuid": "6155",
-      "attribute": "102",                // Name
-           "item": "4313",                // Be able to edit the query o...
-          "value": { "type": "StringValue", "value": "Be able to edit the query of a section" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6156",
-      "attribute": "105",                // Category
-           "item": "4314",                // Make it possible to add new...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make it possible to add new...
-           "uuid": "6157",
-      "attribute": "102",                // Name
-           "item": "4314",                // Make it possible to add new...
-          "value": { "type": "StringValue", "value": "Make it possible to add new attributes to a table view" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6158",
-      "attribute": "105",                // Category
-           "item": "4315",                // Figure out how to declare d...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Figure out how to declare d...
-           "uuid": "6159",
-      "attribute": "102",                // Name
-           "item": "4315",                // Figure out how to declare d...
-          "value": { "type": "StringValue", "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6160",
-      "attribute": "105",                // Category
-           "item": "4316",                // URLs with anchor-dot-notati...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // URLs with anchor-dot-notati...
-           "uuid": "6161",
-      "attribute": "102",                // Name
-           "item": "4316",                // URLs with anchor-dot-notati...
-          "value": { "type": "StringValue", "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6162",
-      "attribute": "105",                // Category
-           "item": "4317",                // Support for reference-value...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Support for reference-value...
-           "uuid": "6163",
-      "attribute": "102",                // Name
-           "item": "4317",                // Support for reference-value...
-          "value": { "type": "StringValue", "value": "Support for reference-values as well as string-values" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6164",
-      "attribute": "105",                // Category
-           "item": "4318",                // Write unit tests using jsunit
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Write unit tests using jsunit
-           "uuid": "6165",
-      "attribute": "102",                // Name
-           "item": "4318",                // Write unit tests using jsunit
-          "value": { "type": "StringValue", "value": "Write unit tests using jsunit" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6166",
-      "attribute": "105",                // Category
-           "item": "4319",                // Try to write a unit test th...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Try to write a unit test th...
-           "uuid": "6167",
-      "attribute": "102",                // Name
-           "item": "4319",                // Try to write a unit test th...
-          "value": { "type": "StringValue", "value": "Try to write a unit test that calls jslint" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6168",
-      "attribute": "105",                // Category
-           "item": "4320",                // In 'Outline' plugin, have c...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In 'Outline' plugin, have c...
-           "uuid": "6169",
-      "attribute": "102",                // Name
-           "item": "4320",                // In 'Outline' plugin, have c...
-          "value": { "type": "StringValue", "value": "In 'Outline' plugin, have controls to optionally show more detail" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6170",
-      "attribute": "105",                // Category
-           "item": "4321",                // Add 'Table' plugin controls...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Add 'Table' plugin controls...
-           "uuid": "6171",
-      "attribute": "102",                // Name
-           "item": "4321",                // Add 'Table' plugin controls...
-          "value": { "type": "StringValue", "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc." },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6172",
-      "attribute": "105",                // Category
-           "item": "4322",                // In 'Outline' plugin, be abl...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In 'Outline' plugin, be abl...
-           "uuid": "6173",
-      "attribute": "102",                // Name
-           "item": "4322",                // In 'Outline' plugin, be abl...
-          "value": { "type": "StringValue", "value": "In 'Outline' plugin, be able to group by category" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6174",
-      "attribute": "105",                // Category
-           "item": "4323",                // In 'Table' plugin, be able ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In 'Table' plugin, be able ...
-           "uuid": "6175",
-      "attribute": "102",                // Name
-           "item": "4323",                // In 'Table' plugin, be able ...
-          "value": { "type": "StringValue", "value": "In 'Table' plugin, be able to group by category" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6176",
-      "attribute": "105",                // Category
-           "item": "4324",                // Be able to edit in outline ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to edit in outline ...
-           "uuid": "6177",
-      "attribute": "102",                // Name
-           "item": "4324",                // Be able to edit in outline ...
-          "value": { "type": "StringValue", "value": "Be able to edit in outline mode" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6178",
-      "attribute": "105",                // Category
-           "item": "4325",                // Set up a subversion server ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Set up a subversion server ...
-           "uuid": "6179",
-      "attribute": "102",                // Name
-           "item": "4325",                // Set up a subversion server ...
-          "value": { "type": "StringValue", "value": "Set up a subversion server and have the OpenRecord code publicly available" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6180",
-      "attribute": "105",                // Category
-           "item": "5000",                // Charities
-          "value": { "type": "RelatedUuid", "value": "145" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 4. Charities
-           "uuid": "6181",
-      "attribute": "101",                // Short Name
-           "item": "5000",                // Charities
-          "value": { "type": "StringValue", "value": "4. Charities" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charities
-           "uuid": "6182",
-      "attribute": "102",                // Name
-           "item": "5000",                // Charities
-          "value": { "type": "StringValue", "value": "Charities" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Charities
-           "uuid": "6183",
-      "attribute": "108",                // Section
-           "item": "5000",                // Charities
-          "value": { "type": "RelatedUuid", "value": "5010" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6184",
-      "attribute": "105",                // Category
-           "item": "5010",                // All Charities
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Charities
-           "uuid": "6185",
-      "attribute": "102",                // Name
-           "item": "5010",                // All Charities
-          "value": { "type": "StringValue", "value": "All Charities" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bar Chart
-           "uuid": "6186",
-      "attribute": "113",                // Plugin Name
-           "item": "5010",                // All Charities
-          "value": { "type": "StringValue", "value": "Bar Chart" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all charities
-           "uuid": "6187",
-      "attribute": "109",                // Query
-           "item": "5010",                // All Charities
-          "value": { "type": "RelatedUuid", "value": "5011" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6188",
-      "attribute": "105",                // Category
-           "item": "5011",                // Query for all charities
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all charities
-           "uuid": "6189",
-      "attribute": "102",                // Name
-           "item": "5011",                // Query for all charities
-          "value": { "type": "StringValue", "value": "Query for all charities" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6190",
-      "attribute": "110",                // Matching Category
-           "item": "5011",                // Query for all charities
-          "value": { "type": "RelatedUuid", "value": "5101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6191",
-      "attribute": "105",                // Category
-           "item": "5101",                // Charity
-          "value": { "type": "RelatedUuid", "value": "144" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6192",
-      "attribute": "102",                // Name
-           "item": "5101",                // Charity
-          "value": { "type": "StringValue", "value": "Charity" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6193",
-      "attribute": "105",                // Category
-           "item": "5102",                // 2003 Expenses (in $US million)
-          "value": { "type": "RelatedUuid", "value": "143" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 2003 Expenses (in $US million)
-           "uuid": "6194",
-      "attribute": "102",                // Name
-           "item": "5102",                // 2003 Expenses (in $US million)
-          "value": { "type": "StringValue", "value": "2003 Expenses (in $US million)" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6195",
-      "attribute": "105",                // Category
-           "item": "5201",                // The Global Fund for Women
-          "value": { "type": "RelatedUuid", "value": "5101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Global Fund for Women
-           "uuid": "6196",
-      "attribute": "102",                // Name
-           "item": "5201",                // The Global Fund for Women
-          "value": { "type": "StringValue", "value": "The Global Fund for Women" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 8.2
-           "uuid": "6197",
-      "attribute": "5102",                // 2003 Expenses (in $US million)
-           "item": "5201",                // The Global Fund for Women
-          "value": { "type": "NumberValue", "value": 8.2 },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6198",
-      "attribute": "105",                // Category
-           "item": "5202",                // Pathfinder International
-          "value": { "type": "RelatedUuid", "value": "5101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Pathfinder International
-           "uuid": "6199",
-      "attribute": "102",                // Name
-           "item": "5202",                // Pathfinder International
-          "value": { "type": "StringValue", "value": "Pathfinder International" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 44.9
-           "uuid": "6200",
-      "attribute": "5102",                // 2003 Expenses (in $US million)
-           "item": "5202",                // Pathfinder International
-          "value": { "type": "NumberValue", "value": 44.9 },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6201",
-      "attribute": "105",                // Category
-           "item": "5203",                // The Global Fund to Fight AI...
-          "value": { "type": "RelatedUuid", "value": "5101" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Global Fund to Fight AI...
-           "uuid": "6202",
-      "attribute": "102",                // Name
-           "item": "5203",                // The Global Fund to Fight AI...
-          "value": { "type": "StringValue", "value": "The Global Fund to Fight AIDS, TB, and Malaria" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 64.7
-           "uuid": "6203",
-      "attribute": "5102",                // 2003 Expenses (in $US million)
-           "item": "5203",                // The Global Fund to Fight AI...
-          "value": { "type": "NumberValue", "value": 64.7 },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6204",
-      "attribute": "105",                // Category
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Gumption Memo
-           "uuid": "6205",
-      "attribute": "102",                // Name
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "StringValue", "value": "The Gumption Memo" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Brian Skinner
-           "uuid": "6206",
-      "attribute": "3101",                // Author
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "StringValue", "value": "Brian Skinner" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Kinkos
-           "uuid": "6207",
-      "attribute": "3102",                // Publisher
-           "item": "5204",                // The Gumption Memo
-          "value": { "type": "StringValue", "value": "Kinkos" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6208",
-      "attribute": "105",                // Category
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Deceit and Denial
-           "uuid": "6209",
-      "attribute": "102",                // Name
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "Deceit and Denial" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Gerald Markowitz and David ...
-           "uuid": "6210",
-      "attribute": "3101",                // Author
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "Gerald Markowitz and David Rosner" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // University of California
-           "uuid": "6211",
-      "attribute": "3102",                // Publisher
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "University of California" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0520240634
-           "uuid": "6212",
-      "attribute": "3103",                // ISBN
-           "item": "5205",                // Deceit and Denial
-          "value": { "type": "StringValue", "value": "0520240634" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6213",
-      "attribute": "105",                // Category
-           "item": "5207",                // Have a 'Find' UI that does ...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Have a 'Find' UI that does ...
-           "uuid": "6214",
-      "attribute": "102",                // Name
-           "item": "5207",                // Have a 'Find' UI that does ...
-          "value": { "type": "StringValue", "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6215",
-      "attribute": "105",                // Category
-           "item": "5208",                // Be able to 'delete' items (...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to 'delete' items (...
-           "uuid": "6216",
-      "attribute": "102",                // Name
-           "item": "5208",                // Be able to 'delete' items (...
-          "value": { "type": "StringValue", "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6217",
-      "attribute": "105",                // Category
-           "item": "5209",                // Make view.display() *not* r...
-          "value": { "type": "RelatedUuid", "value": "4102" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make view.display() *not* r...
-           "uuid": "6218",
-      "attribute": "102",                // Name
-           "item": "5209",                // Make view.display() *not* r...
-          "value": { "type": "StringValue", "value": "Make view.display() *not* re-create all the HTML every time" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6219",
-      "attribute": "105",                // Category
-           "item": "6000",                // All Items
-          "value": { "type": "RelatedUuid", "value": "145" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 5. All Items
-           "uuid": "6220",
-      "attribute": "101",                // Short Name
-           "item": "6000",                // All Items
-          "value": { "type": "StringValue", "value": "5. All Items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Items
-           "uuid": "6221",
-      "attribute": "102",                // Name
-           "item": "6000",                // All Items
-          "value": { "type": "StringValue", "value": "All Items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Items
-           "uuid": "6222",
-      "attribute": "108",                // Section
-           "item": "6000",                // All Items
-          "value": { "type": "RelatedUuid", "value": "6010" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6223",
-      "attribute": "105",                // Category
-           "item": "6010",                // All Items
-          "value": { "type": "RelatedUuid", "value": "146" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Items
-           "uuid": "6224",
-      "attribute": "102",                // Name
-           "item": "6010",                // All Items
-          "value": { "type": "StringValue", "value": "All Items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Table
-           "uuid": "6225",
-      "attribute": "113",                // Plugin Name
-           "item": "6010",                // All Items
-          "value": { "type": "StringValue", "value": "Table" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all items
-           "uuid": "6226",
-      "attribute": "109",                // Query
-           "item": "6010",                // All Items
-          "value": { "type": "RelatedUuid", "value": "6011" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6227",
-      "attribute": "105",                // Category
-           "item": "6011",                // Query for all items
-          "value": { "type": "RelatedUuid", "value": "147" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all items
-           "uuid": "6228",
-      "attribute": "102",                // Name
-           "item": "6011",                // Query for all items
-          "value": { "type": "StringValue", "value": "Query for all items" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6229",
-      "attribute": "105",                // Category
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // JavaScript: The Definitive ...
-           "uuid": "6230",
-      "attribute": "102",                // Name
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "JavaScript: The Definitive Guide" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Flanagan
-           "uuid": "6231",
-      "attribute": "3101",                // Author
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "David Flanagan" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // O'Reilly
-           "uuid": "6232",
-      "attribute": "3102",                // Publisher
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "O'Reilly" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 0596000480
-           "uuid": "6233",
-      "attribute": "3103",                // ISBN
-           "item": "6012",                // JavaScript: The Definitive ...
-          "value": { "type": "StringValue", "value": "0596000480" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "6234",
-      "attribute": "105",                // Category
-           "item": "6013",                // The Two Towers
-          "value": { "type": "RelatedUuid", "value": "3104" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Two Towers
-           "uuid": "6235",
-      "attribute": "102",                // Name
-           "item": "6013",                // The Two Towers
-          "value": { "type": "StringValue", "value": "The Two Towers" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "6236",
-      "attribute": "3101",                // Author
-           "item": "6013",                // The Two Towers
-          "value": { "type": "StringValue", "value": "J.R.R. Tolkien" },
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819463406" }
-  }  ], 
-  "users": [
-    { "uuid": "100", "password": null },
-    { "uuid": "1502", "password": "abracadabra" } ]
-}

Deleted: trunk/source/model/test_data_2005_march_item_centric_list.json
===================================================================
--- trunk/source/model/test_data_2005_march_item_centric_list.json	2005-06-14 19:54:44 UTC (rev 137)
+++ trunk/source/model/test_data_2005_march_item_centric_list.json	2005-06-14 20:34:24 UTC (rev 138)
@@ -1,428 +0,0 @@
-{ "format": "2005_MARCH_ITEM_CENTRIC_LIST", 
-  "timestamp": "Thu Apr 14 2005 13:52:41 GMT-0700 (Pacific Standard Time)", 
-  "data": [
-  { "100": { "type": "Uuid", "value": 101 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Short Name" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 102 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Name" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 103 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Summary" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 104 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Body" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 105 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Category" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 106 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Userstamp" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 107 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Timestamp" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 108 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Section" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 109 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 110 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Matching Category" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 111 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Matching Item" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 112 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Plugin Name" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 143 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Attribute" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 144 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Category" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 145 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Page" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 146 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Section" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 147 },
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query" }, ],
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 2000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "1. Welcome!" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Welcome to the OpenRecord demo!" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "2. Books" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Book Lists" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed." }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 3010 }, { "type": "ForeignUuid", "value": 3020 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Books" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3011 }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a list of all the books in the repository." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3020 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "One Book" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Detail" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 3021 }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all books" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 3104 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3021 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for one book" }, ],
-    /* Matching I */   "111": [{ "type": "ForeignUuid", "value": 3205 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3104 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Book" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3205 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "HTTP: The Definitive Guide" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Gourley and Brian Totty" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "1565925092" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "O'Reilly" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3101 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Author" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3102 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Publisher" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3103 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "ISBN" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3201 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Transparent Society" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Brin" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Perseus Publishing" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0738201448" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3202 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Hobbit" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "J.R.R. Tolkien" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "HarperCollins" }, { "type": "StringValue", "value": "Houghton Mifflin" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0618002219" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3203 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Wisdom of Crowds" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "James Surowiecki" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0385503865" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Doubleday" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 3204 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Shrinking Violets and Caspar Milquetoasts" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "Patricia A. McDaniel" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0814756778" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "NYU Press" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "3. Bug List" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Bugs and Features to Implement" }, ],
-    /* Summary    */   "103": [{ "type": "StringValue", "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long." }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 4010 }, { "type": "ForeignUuid", "value": 4020 }, { "type": "ForeignUuid", "value": 4030 }, { "type": "ForeignUuid", "value": 4040 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Features" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4011 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4020 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Bugs" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4021 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4030 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs and Features" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4031 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4040 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All 'Closed' Bugs" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Outline" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 4041 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all features" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4102 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4021 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all bugs" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4101 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4031 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all closed items" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4103 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4041 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all closed bugs" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4102 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Feature" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4101 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Bug" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4103 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Closed Tasks" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4201 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The browser's back button doesn't work after you click from page to page in the navbar." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4202 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4203 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4204 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "If an item has an attribute value with some HTML in it, like '&lt;cite&gt;', we incorrectly render it like '& lt;cite& gt;' instead of '&lt;cite&gt;'" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4205 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4101 }, { "type": "ForeignUuid", "value": 4103 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &lt; and &gt; and double-quotes" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4302 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, { "type": "ForeignUuid", "value": 4103 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible for a text string to contain a reference to an item" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4304 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible to assign items to categories -- allow for entering reference-values, not just string-values" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4305 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Allow for entering number-values, not just string-values" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4306 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Have table mode show multi-valued attributes" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4307 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "When you assign a value to an item, mark it with a timestamp" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4308 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Clean up all the code that assumes single-valued attributes -- search for '[0]'" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4309 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to create new pages" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4310 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to add a new section to a page" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4311 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Observable queries: all items, limited to a requested subset based on kind and category (e.g. 'All fiction books')" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4312 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Observable queries: limit results to just a requested subset of the attributes (e.g. just the names of the books)" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4313 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to edit the query of a section" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4314 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make it possible to add new attributes to a table view" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4315 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4316 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4317 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Support for reference-values as well as string-values" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4318 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Write unit tests using jsunit" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4319 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Try to write a unit test that calls jslint" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4320 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, have controls to optionally show more detail" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4321 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc." }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4322 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Outline' plugin, be able to group by category" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4323 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "In 'Table' plugin, be able to group by category" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4324 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to edit in outline mode" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 4325 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Set up a subversion server and have the OpenRecord code publicly available" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "4. Charities" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Charities" }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 5010 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Charities" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Bar Chart" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 5011 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all charities" }, ],
-    /* Matching C */   "110": [{ "type": "ForeignUuid", "value": 5101 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5101 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 144 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Charity" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5102 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 143 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "2003 Expenses (in $US million)" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5201 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Global Fund for Women" }, ],
-    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 8.2 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5202 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Pathfinder International" }, ],
-    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 44.9 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5203 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 5101 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Global Fund to Fight AIDS, TB, and Malaria" }, ],
-    /* 2003 Expen */   "5102": [{ "type": "NumberValue", "value": 64.7 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5204 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Gumption Memo" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "Brian Skinner" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "Kinkos" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5205 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Deceit and Denial" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "Gerald Markowitz and David Rosner" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "University of California" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0520240634" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5207 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5208 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 5209 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 4102 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Make view.display() *not* re-create all the HTML every time" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6000 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 145 }, ],
-    /* Short Name */   "101": [{ "type": "StringValue", "value": "5. All Items" }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Items" }, ],
-    /* Section    */   "108": [{ "type": "ForeignUuid", "value": 6010 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6010 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 146 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "All Items" }, ],
-    /* Plugin Nam */   "112": [{ "type": "StringValue", "value": "Table" }, ],
-    /* Query      */   "109": [{ "type": "ForeignUuid", "value": 6011 }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6011 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 147 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "Query for all items" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6012 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "JavaScript: The Definitive Guide" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "David Flanagan" }, ],
-    /* Publisher  */   "3102": [{ "type": "StringValue", "value": "O'Reilly" }, ],
-    /* ISBN       */   "3103": [{ "type": "StringValue", "value": "0596000480" }, ],
-  },
-  { "100": { "type": "Uuid", "value": 6013 },
-    /* Category   */   "105": [{ "type": "ForeignUuid", "value": 3104 }, ],
-    /* Name       */   "102": [{ "type": "StringValue", "value": "The Two Towers" }, ],
-    /* Author     */   "3101": [{ "type": "StringValue", "value": "J.R.R. Tolkien" }, ],
-  }
-]}



From skinner at sheep.berlios.de  Wed Jun 15 01:39:50 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 15 Jun 2005 01:39:50 +0200
Subject: [openrecord-svn] r139 - in trunk/source: . model
Message-ID: <200506142339.j5ENdog7029616@sheep.berlios.de>

Author: skinner
Date: 2005-06-15 01:39:49 +0200 (Wed, 15 Jun 2005)
New Revision: 139

Added:
   trunk/source/model/Transaction.js
Modified:
   trunk/source/Util.js
   trunk/source/demo_page.html
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Item.js
   trunk/source/model/LintTest.js
   trunk/source/model/StubVirtualServer.js
Log:
In the JSON file, we now save the records within the context of the transaction they were created in.

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-14 20:34:24 UTC (rev 138)
+++ trunk/source/Util.js	2005-06-14 23:39:49 UTC (rev 139)
@@ -308,7 +308,7 @@
  *
  * @scope    public class method
  * @param    inValue    Any object or literal value. 
- * @return   A boolean value. True if inValue is aDate.
+ * @return   A boolean value. True if inValue is a Date.
  */
 Util.isDate = function (inValue) {
   return (inValue instanceof Date);
@@ -316,6 +316,25 @@
 
 
 /**
+ * Returns true if the given value is a UUID. Here's an example of
+ * a valid UUID: "e3bf3e14-e8f4-43e2-866c-121c5ab70c0b".
+ *
+ * @scope    public class method
+ * @param    inValue    Any object or literal value. 
+ * @return   A boolean value. True if inValue is a UUID.
+ */
+Util.isUuid = function (inValue) {
+  // PENDING: 
+  // We should include more rigorous tests, to make sure this
+  // is really a UUID, not just a string with 36 characters.
+  if ((typeof inValue) != "string") {
+    return false;
+  }
+  return (uuid.length == 36);  
+};
+
+
+/**
  * Returns true if the given value is an array.
  *
  * @scope    public class method

Modified: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-14 20:34:24 UTC (rev 138)
+++ trunk/source/demo_page.html	2005-06-14 23:39:49 UTC (rev 139)
@@ -37,6 +37,7 @@
     <script type="text/javascript" src="model/IdentifiedRecord.js"></script>
     <script type="text/javascript" src="model/Item.js"></script>
     <script type="text/javascript" src="model/Entry.js"></script>
+    <script type="text/javascript" src="model/Transaction.js"></script>
     <script type="text/javascript" src="model/World.js"></script>
     <script type="text/javascript" src="model/StubVirtualServer.js"></script>
     <script type="text/javascript" src="model/DeltaVirtualServer.js"></script>

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-14 20:34:24 UTC (rev 138)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-14 23:39:49 UTC (rev 139)
@@ -65,13 +65,14 @@
 DeltaVirtualServer.JSON_TYPE_CHECKMARK_VALUE = "CheckMarkValue";
 DeltaVirtualServer.JSON_TYPE_URL_VALUE = "UrlValue";
 
-DeltaVirtualServer.JSON_MEMBER_WUID = "uuid";
+DeltaVirtualServer.JSON_MEMBER_UUID = "uuid";
 DeltaVirtualServer.JSON_MEMBER_PASSWORD = "password";
 
 DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS = "Item";
 DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS = "Entry";
 DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS = "Vote";
 DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS = "Ordinal";
+DeltaVirtualServer.JSON_MEMBER_TRANSACTION_CLASS = "Transaction";
 
 DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE = "attribute";
 DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE = "previousEntry";
@@ -185,24 +186,10 @@
  * @param    inUuid    The UUID of the item to be returned. 
  * @return   The item identified by the given UUID.
  */
-StubVirtualServer.prototype.__getItemFromUuidOrBootstrapItem = function (inUuid) {
+DeltaVirtualServer.prototype.__getItemFromUuidOrBootstrapItem = function (inUuid) {
   var item = this.getItemFromUuid(inUuid);
   if (!item) {
-    /*
-    var uuidAsInt = null;
-    if (Util.isNumber(inUuid)) {
-      uuidAsInt = inUuid;
-    } else {
-      if (Util.isString(inUuid) && Util.isNumeric(inUuid)) {
-        uuidAsInt = parseInt(inUuid);
-      }
-    }
-    if (uuidAsInt) {
-      Util.assert(Util.isNumber(uuidAsInt));
-      this.__myNextAvailableUuid = Math.max(this.__myNextAvailableUuid, (uuidAsInt + 1));   
-    }
-    */
-    item = new Item(this.__myWorld, inUuid);
+    item = new Item(this.getWorld(), inUuid);
     this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
   }
   return item;
@@ -217,24 +204,10 @@
  * @param    inUuid    The UUID of the entry to be returned. 
  * @return   The entry identified by the given UUID.
  */
-StubVirtualServer.prototype.__getEntryFromUuidOrBootstrapEntry = function (inUuid) {
+DeltaVirtualServer.prototype.__getEntryFromUuidOrBootstrapEntry = function (inUuid) {
   var entry = this.__myHashTableOfEntriesKeyedByUuid[inUuid];
   if (!entry) {
-    /*
-    var uuidAsInt = null;
-    if (Util.isNumber(inUuid)) {
-      uuidAsInt = inUuid;
-    } else {
-      if (Util.isString(inUuid) && Util.isNumeric(inUuid)) {
-        uuidAsInt = parseInt(inUuid);
-      }
-    }
-    if (uuidAsInt) {
-      Util.assert(Util.isNumber(uuidAsInt));
-      this.__myNextAvailableUuid = Math.max(this.__myNextAvailableUuid, (uuidAsInt + 1));   
-    }
-    */
-    entry = new Entry(this.__myWorld, inUuid);
+    entry = new Entry(this.getWorld(), inUuid);
     this.__myHashTableOfEntriesKeyedByUuid[inUuid] = entry;
   }
   return entry;
@@ -242,13 +215,12 @@
 
 
 /**
- * Loads a world of items from a dehydrated list of entries, where those
- * entries may represent items, entries, votes, or ordinal settings.
+ * Given a dehydrated list of records, rehydrates each of the records.
  *
  * @scope    private instance method
- * @param    inJsonString    A JSON string literal representing the world of items. 
+ * @param    inListOfRecords    A list of dehydrated records. 
  */
-DeltaVirtualServer.prototype.__loadWorldFromListOfRecordsAndUsers = function (inListOfRecords, inListOfUsers) {
+DeltaVirtualServer.prototype._rehydrateRecords = function (inListOfRecords) {
   var key;
   var itemUuid;
   var item;
@@ -258,79 +230,99 @@
   for (key in inListOfRecords) {
     var dehydratedRecord = inListOfRecords[key];
 
-    var dehydratedItem = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS];
-    var dehydratedVote = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS];
-    var dehydratedOrdinal = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS];
-    var dehydratedEntry = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS];
-
-    var contents = dehydratedItem || dehydratedVote || dehydratedOrdinal || dehydratedEntry;
-
-    var timestampString = contents[DeltaVirtualServer.JSON_MEMBER_TIMESTAMP];
-    var userstampUuid = contents[DeltaVirtualServer.JSON_MEMBER_USERSTAMP];
-    var timestamp = new Date(new Number(timestampString));
-    var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
-
-    if (dehydratedItem) {
-      itemUuid = dehydratedItem[DeltaVirtualServer.JSON_MEMBER_WUID];
-      item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
-      item._rehydrate(timestamp, userstamp);
-      this.__myChronologicalListOfRecords.push(item);
-    }
-    if (dehydratedVote) {
-      var retainFlag = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG];
-      identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
-      identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
-      var vote = new Vote(identifiedRecord, userstamp, retainFlag, timestamp);
-      this.__myChronologicalListOfRecords.push(vote);
-    }
-    if (dehydratedOrdinal) {
-      var ordinalNumber = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
-      identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
-      identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
-      var ordinal = new Ordinal(identifiedRecord, userstamp, ordinalNumber, timestamp);
-      this.__myChronologicalListOfRecords.push(ordinal);
-    }
-    if (dehydratedEntry) {
-      var entryUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_WUID];
-      itemUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_ITEM];
-      item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
-      var attributeUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE];
-      var attribute = null;
-      if (attributeUuid) {
-        attribute = this.__getItemFromUuidOrBootstrapItem(attributeUuid);
+    var dehydratedTransaction = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_TRANSACTION_CLASS];
+    if (dehydratedTransaction) {
+      var listOfRecordsInTransaction = dehydratedTransaction;
+      this._rehydrateRecords(listOfRecordsInTransaction);
+    } else {
+      var dehydratedItem = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS];
+      var dehydratedVote = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS];
+      var dehydratedOrdinal = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS];
+      var dehydratedEntry = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS];
+  
+      var contents = dehydratedItem || dehydratedVote || dehydratedOrdinal || dehydratedEntry;
+  
+      var timestampString = contents[DeltaVirtualServer.JSON_MEMBER_TIMESTAMP];
+      var userstampUuid = contents[DeltaVirtualServer.JSON_MEMBER_USERSTAMP];
+      var timestamp = new Date(new Number(timestampString));
+      var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
+  
+      if (dehydratedItem) {
+        itemUuid = dehydratedItem[DeltaVirtualServer.JSON_MEMBER_UUID];
+        item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
+        item._rehydrate(timestamp, userstamp);
+        this.__myChronologicalListOfRecords.push(item);
       }
-      var previousEntryUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE];
-      var previousEntry = null;
-      if (previousEntryUuid) {
-        previousEntry = this.__getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
+      if (dehydratedVote) {
+        var retainFlag = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG];
+        identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
+        identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
+        var vote = new Vote(identifiedRecord, userstamp, retainFlag, timestamp);
+        this.__myChronologicalListOfRecords.push(vote);
       }
-      var rawData = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_VALUE];
-      var dataTypeToken = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_TYPE];
-      var dataType = this._getTypeFromTypeToken(dataTypeToken);
-      var finalData = null;
-      switch (dataTypeToken) {
-        case DeltaVirtualServer.JSON_TYPE_RELATED_UUID:
-          finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
-          break;
-        case DeltaVirtualServer.JSON_TYPE_STRING_VALUE:
-          finalData = rawData;
-          break;
-        case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE:
-          finalData = rawData;
-          break;
-        case DeltaVirtualServer.JSON_TYPE_Date_VALUE:
-          finalData = new Date(rawData);
-          break;
+      if (dehydratedOrdinal) {
+        var ordinalNumber = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
+        identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
+        identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
+        var ordinal = new Ordinal(identifiedRecord, userstamp, ordinalNumber, timestamp);
+        this.__myChronologicalListOfRecords.push(ordinal);
       }
-      var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
-      var itemOrEntry = previousEntry || item;
-      entry._rehydrate(itemOrEntry, attribute, finalData, timestamp, userstamp, dataType);
-      this.__myChronologicalListOfRecords.push(entry);
+      if (dehydratedEntry) {
+        var entryUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_UUID];
+        itemUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_ITEM];
+        item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
+        var attributeUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE];
+        var attribute = null;
+        if (attributeUuid) {
+          attribute = this.__getItemFromUuidOrBootstrapItem(attributeUuid);
+        }
+        var previousEntryUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE];
+        var previousEntry = null;
+        if (previousEntryUuid) {
+          previousEntry = this.__getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
+        }
+        var rawData = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_VALUE];
+        var dataTypeToken = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_TYPE];
+        var dataType = this._getTypeFromTypeToken(dataTypeToken);
+        var finalData = null;
+        switch (dataTypeToken) {
+          case DeltaVirtualServer.JSON_TYPE_RELATED_UUID:
+            finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
+            break;
+          case DeltaVirtualServer.JSON_TYPE_STRING_VALUE:
+            finalData = rawData;
+            break;
+          case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE:
+            finalData = rawData;
+            break;
+          case DeltaVirtualServer.JSON_TYPE_Date_VALUE:
+            finalData = new Date(rawData);
+            break;
+        }
+        var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
+        var itemOrEntry = previousEntry || item;
+        entry._rehydrate(itemOrEntry, attribute, finalData, timestamp, userstamp, dataType);
+        this.__myChronologicalListOfRecords.push(entry);
+      }
     }
   }
-  for (key in inListOfUsers) {
+};
+
+
+/**
+ * Loads a world of items from a dehydrated list of entries, where those
+ * entries may represent items, entries, votes, or ordinal settings.
+ *
+ * @scope    private instance method
+ * @param    inListOfRecords    A list of dehydrated records. 
+ * @param    inListOfUsers    A list of dehydrated users. 
+ */
+DeltaVirtualServer.prototype.__loadWorldFromListOfRecordsAndUsers = function (inListOfRecords, inListOfUsers) {
+  this._rehydrateRecords(inListOfRecords);
+  
+  for (var key in inListOfUsers) {
     var dehydratedUserData = inListOfUsers[key];
-    var userUuid = dehydratedUserData[DeltaVirtualServer.JSON_MEMBER_WUID];
+    var userUuid = dehydratedUserData[DeltaVirtualServer.JSON_MEMBER_UUID];
     var userPassword = dehydratedUserData[DeltaVirtualServer.JSON_MEMBER_PASSWORD];
     
     var user = this.getItemFromUuid(userUuid);
@@ -360,8 +352,16 @@
   }
 };
 
+
+/**
+ * Given an item that represents that represents a basic data type, this method
+ * returns the corresponding string token that represents the same data type.
+ *
+ * @scope    private instance method
+ * @param    inType    An item that represents a basic data type, like Text, Number, or URL. 
+ * @return   A string token that represents a basic data type.
+ */
 DeltaVirtualServer.prototype._getTypeTokenFromType = function (inType) {
-
   for (var token in this._myHashTableOfTypesKeyedByToken) {
     typeItem = this._myHashTableOfTypesKeyedByToken[token];
     if (inType == typeItem) {
@@ -371,20 +371,64 @@
   Util.assert(false, "no such type: " + inType.getDisplayName());
 };
 
+
+/**
+ * Given a string token that represents a basic data type, this method
+ * returns the corresponding item that represents the same data type.
+ *
+ * @scope    private instance method
+ * @param    inToken    A string token that represents a basic data type.
+ * @return   An item that represents a basic data type, like Text, Number, or URL. 
+ */
 DeltaVirtualServer.prototype._getTypeFromTypeToken = function (inToken) {
   return this._myHashTableOfTypesKeyedByToken[inToken];
 };
 
+
 /**
  * Returns a big string, containing JavaScript "object literal"
+ * representations of all of the records in a Transaction.
+ *
+ * @scope    private instance method
+ * @param    inTransaction    A transaction object.
+ * @return   A JSON string literal, representing the records in the transaction. 
+ */
+DeltaVirtualServer.prototype._getJsonStringRepresentingTransaction = function (inTransaction) {
+  var indent = "  ";
+  var listOfRecords = inTransaction.getRecords();
+  if (!listOfRecords || listOfRecords.length === 0) {
+    return "";
+  }
+  
+  if (listOfRecords.length == 1) {
+    return this._getJsonStringRepresentingRecords(listOfRecords, indent);
+  } else {
+    indent = "    ";
+    var listOfStrings = [];
+    listOfStrings.push("  // =======================================================================\n");
+    listOfStrings.push('  { "' + DeltaVirtualServer.JSON_MEMBER_TRANSACTION_CLASS + '": [\n');
+    var content = this._getJsonStringRepresentingRecords(inTransaction.getRecords(), indent);
+    listOfStrings.push(content);
+    listOfStrings.push('  ]\n');
+    listOfStrings.push('  }');
+    
+    var finalString = listOfStrings.join("");
+    return finalString;
+  }
+};
+
+
+/**
+ * Returns a big string, containing JavaScript "object literal"
  * representations of the records.
  *
  * @scope    private instance method
  * @param    inListOfRecords    A list of the records to include in the JSON string.
+ * @param    inIndent    Optional. A string of spaces to prepend to each line.
  * @return   A JSON string literal, representing the records. 
  */
-DeltaVirtualServer.prototype.__getJsonStringRepresentingRecords = function (inListOfRecords) {
-
+DeltaVirtualServer.prototype._getJsonStringRepresentingRecords = function (inListOfRecords, inIndent) {
+  var indent = inIndent || "";
   var key;
   var listOfStrings = [];
   var firstIdentifiedRecord = true;
@@ -397,50 +441,50 @@
     } else {
       listOfStrings.push(',\n');
     }
-    listOfStrings.push('  // -----------------------------------------------------------------------\n');
+    listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
     if (record instanceof Item) {
       var item = record;
-      listOfStrings.push('  { "' + DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
+      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
       itemDisplayNameSubstring = this.truncateString(item.getDisplayName());
-      listOfStrings.push('                             // ' + itemDisplayNameSubstring + '\n');
-      listOfStrings.push('           "' + DeltaVirtualServer.JSON_MEMBER_WUID + '": "' + item._getUuid() + '",\n');
+      listOfStrings.push('                                               // ' + itemDisplayNameSubstring + '\n');
+      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '",\n');
     }
     if (record instanceof Vote) {
       var vote = record;
-      listOfStrings.push('  { "' + DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getIdentifiedRecord()._getUuid() + '",\n');
-      listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '",\n');
+      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getIdentifiedRecord()._getUuid() + '",\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '",\n');
     }
     if (record instanceof Ordinal) {
       var ordinal = record;
-      listOfStrings.push('  { "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getIdentifiedRecord()._getUuid() + '",\n');
-      listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '",\n');
+      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getIdentifiedRecord()._getUuid() + '",\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '",\n');
     }
     if (record instanceof Entry) {
       var entry = record;
-      listOfStrings.push('  { "' + DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{');
+      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{');
       var entryDisplayNameSubstring = this.truncateString(entry.getDisplayString());
-      listOfStrings.push('                             // ' + entryDisplayNameSubstring + '\n');
-      listOfStrings.push('           "' + DeltaVirtualServer.JSON_MEMBER_WUID + '": "' + entry._getUuid() + '",\n');
+      listOfStrings.push('                                              // ' + entryDisplayNameSubstring + '\n');
+      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + entry._getUuid() + '",\n');
       var attribute = entry.getAttribute();
       if (attribute) {
         var attributeName = attribute.getDisplayName();
-        listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
+        listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
         var attributeNameSubstring = this.truncateString(attributeName);
-        listOfStrings.push('                // ' + attributeNameSubstring + '\n');
+        listOfStrings.push('  // ' + attributeNameSubstring + '\n');
       }
-      listOfStrings.push('           "' + DeltaVirtualServer.JSON_MEMBER_ITEM + '": "' + entry.getItem()._getUuid() + '",');
+      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_ITEM + '": "' + entry.getItem()._getUuid() + '",');
       itemDisplayNameSubstring = this.truncateString(entry.getItem().getDisplayName());
-      listOfStrings.push('                // ' + itemDisplayNameSubstring + '\n');
+      listOfStrings.push('  // ' + itemDisplayNameSubstring + '\n');
       var previousEntry = entry.getPreviousEntry();
       if (previousEntry) {
-        listOfStrings.push('  "' + DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
+        listOfStrings.push(indent + '"' + DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
       }
       var contentData = entry.getValue();
       var entryType = entry.getType();
       var typeToken = this._getTypeTokenFromType(entryType);
-      listOfStrings.push('           "' + DeltaVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
+      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
       
       var valueString = null;
       switch (typeToken) {
@@ -459,15 +503,15 @@
         default:
           Util.assert(false, "no such type: " + typeToken);
       }
-      listOfStrings.push('          "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ',\n');
+      listOfStrings.push(indent + '        "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ',\n');
     }
     Util.assert(record.getUserstamp() !== null);
-    listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '",');
+    listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '",');
     var userDisplayName = record.getUserstamp().getDisplayName();
     var userDisplayNameSubstring = this.truncateString(userDisplayName);
-    listOfStrings.push('                // by (' + userDisplayNameSubstring + ')\n');
-    listOfStrings.push('      "' + DeltaVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '" }\n');
-    listOfStrings.push('  }');
+    listOfStrings.push('  // by (' + userDisplayNameSubstring + ')\n');
+    listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '" }\n');
+    listOfStrings.push(indent + '}');
   }
   
   var finalString = listOfStrings.join("");
@@ -507,7 +551,7 @@
     if (password) {
       passwordString = '"' + password + '"';
     }
-    listOfStrings.push('    { "' + DeltaVirtualServer.JSON_MEMBER_WUID + '": "' + user._getUuid() + '", ');
+    listOfStrings.push('    { "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + user._getUuid() + '", ');
     listOfStrings.push('"' + DeltaVirtualServer.JSON_MEMBER_PASSWORD + '": ' + passwordString + ' }');
   }
   listOfStrings.push(" ]\n");
@@ -536,7 +580,8 @@
   listOfStrings.push('"' + DeltaVirtualServer.JSON_MEMBER_FORMAT + '": "' + DeltaVirtualServer.JSON_FORMAT_2005_APRIL + '", ' + '\n');
   listOfStrings.push('  "' + DeltaVirtualServer.JSON_MEMBER_DATA + '": ' + '[' + '\n');
 
-  var jsonStringForRecords = this.__getJsonStringRepresentingRecords(this.__myChronologicalListOfRecords);
+  var indent = "  ";
+  var jsonStringForRecords = this._getJsonStringRepresentingRecords(this.__myChronologicalListOfRecords, indent);
   listOfStrings.push(jsonStringForRecords);
 
   listOfStrings.push("  ], \n");
@@ -561,9 +606,9 @@
  * @return   The list of changes made. 
  */
 DeltaVirtualServer.prototype.saveChangesToServer = function (forceSave) {
-  var listOfChangesMade;
-  if (!forceSave && this.__myChronologicalListOfNewlyCreatedRecords.length === 0) {
-    listOfChangesMade = [];
+  var currentTransaction = this.getCurrentTransaction();
+  var listOfChangesMade = currentTransaction.getRecords();
+  if (!forceSave && listOfChangesMade.length === 0) {
     return listOfChangesMade;
   }
   
@@ -582,15 +627,15 @@
   
   var key;
   var newRecord;
-  for (key in this.__myChronologicalListOfNewlyCreatedRecords) {
-    newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
+  for (key in listOfChangesMade) {
+    newRecord = listOfChangesMade[key];
     this.__myChronologicalListOfRecords.push(newRecord);
   }
   
   var saveListOfUsers = false;
   var listOfUsers = this.getUsers();
-  for (key in this.__myChronologicalListOfNewlyCreatedRecords) {
-    newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
+  for (key in listOfChangesMade) {
+    newRecord = listOfChangesMade[key];
     if (Util.isObjectInSet(newRecord, listOfUsers)) {
       saveListOfUsers = true;
       break;
@@ -599,7 +644,6 @@
  
   if (saveChanges) {
     var url;
-    var recordsToAppend;
     var textToAppend;
     
     // OLD: used for saving a the entire world as one lump
@@ -610,8 +654,7 @@
     
     // NEW: used for saving just the changes
     url = "model/append_to_repository_file.php";
-    recordsToAppend = this.__myChronologicalListOfNewlyCreatedRecords;
-    textToAppend = ",\n" + this.__getJsonStringRepresentingRecords(recordsToAppend);
+    textToAppend = ",\n" + this._getJsonStringRepresentingTransaction(currentTransaction);
     var asynchronous;
     asynchronous = true;
     
@@ -647,8 +690,7 @@
     }
   }
   
-  listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
-  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  this._currentTransaction = null;
   return listOfChangesMade;
 };
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-14 20:34:24 UTC (rev 138)
+++ trunk/source/model/Item.js	2005-06-14 23:39:49 UTC (rev 139)
@@ -190,6 +190,7 @@
     }
   }
   
+  this.getWorld().beginTransaction();
   if (this.__myProvisionalFlag) {
     this.__myProvisionalFlag = false;
     this.getWorld()._provisionalItemJustBecameReal(this);
@@ -197,6 +198,7 @@
   
   var itemOrEntry = inEntry || this;
   var entry = this.getWorld()._newEntry(itemOrEntry, inAttribute, inValue, inType);
+  this.getWorld().endTransaction();
   return entry;
 };
 

Modified: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-06-14 20:34:24 UTC (rev 138)
+++ trunk/source/model/LintTest.js	2005-06-14 23:39:49 UTC (rev 139)
@@ -39,6 +39,7 @@
     "IdentifiedRecord.js",
     "Item.js",
     "Entry.js",
+    "Transaction.js",
     "World.js",
     "StubVirtualServer.js",
     "DeltaVirtualServer.js"];

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-14 20:34:24 UTC (rev 138)
+++ trunk/source/model/StubVirtualServer.js	2005-06-14 23:39:49 UTC (rev 139)
@@ -64,11 +64,10 @@
   this._countOfNestedTransactions = 0;
   this._currentTransaction = null;
 
-  // this.__myNextAvailableUuid = 1;
   this.__myHashTableOfItemsKeyedByUuid = {};
   this.__myHashTableOfEntriesKeyedByUuid = {};
   this.__myChronologicalListOfRecords = [];
-  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  // this.__myChronologicalListOfNewlyCreatedRecords = [];
   
   this.__myListOfUsers = [];
   this.__myHashTableOfUserAuthenticationInfo = {};
@@ -88,13 +87,18 @@
   this._loadAxiomaticItems();
 };
 
+
 /**
+ * Returns the World instance that this virtual server is using.
  *
+ * @scope    public instance method
+ * @return   A World object. 
  */
 StubVirtualServer.prototype.getWorld = function () {
   return this.__myWorld;
 };
 
+
 // -------------------------------------------------------------------
 // Transaction Methods
 // -------------------------------------------------------------------
@@ -111,8 +115,7 @@
  */
 StubVirtualServer.prototype.beginTransaction = function() {
   if (this._countOfNestedTransactions === 0) {
-    // PENDING: create a new transaction object
-    // this._currentTransaction = new Transaction();
+    this._currentTransaction = new Transaction();
   }
   this._countOfNestedTransactions += 1;
 };
@@ -129,6 +132,7 @@
 
   if (this._countOfNestedTransactions === 0) {
     var listOfChangesMade = this.saveChangesToServer();
+    this._currentTransaction = null;
     if (listOfChangesMade.length > 0) {
       // alert(listOfChangesMade.length + " changes made");
       // Util.displayStatusBlurb(listOfChangesMade.length + " changes made");
@@ -138,6 +142,17 @@
 };
 
 
+/**
+ * Returns the Transaction object for the current transaction.
+ *
+ * @scope    public instance method
+ * @return   A Transaction object, or null if there is no transaction in progress. 
+ */
+StubVirtualServer.prototype.getCurrentTransaction = function () {
+  return this._currentTransaction;
+};
+
+
 // -------------------------------------------------------------------
 // Methods for creating and changing items
 // -------------------------------------------------------------------
@@ -195,7 +210,8 @@
   item._initialize(inObserver, inProvisionalFlag);
   this.__myHashTableOfItemsKeyedByUuid[uuid] = item;
   if (!inProvisionalFlag) {
-    this.__myChronologicalListOfNewlyCreatedRecords.push(item);
+    this._currentTransaction.addRecord(item);
+    // this.__myChronologicalListOfNewlyCreatedRecords.push(item);
   }
   return item;
 };
@@ -208,7 +224,8 @@
  * @param    inItem    The item that was provisional and just became real. 
  */
 StubVirtualServer.prototype._provisionalItemJustBecameReal = function (inItem) {
-  this.__myChronologicalListOfNewlyCreatedRecords.push(inItem);
+  this._currentTransaction.addRecord(inItem);
+  // this.__myChronologicalListOfNewlyCreatedRecords.push(inItem);
 };
 
 
@@ -231,7 +248,8 @@
   item.__addEntryToListOfEntriesForAttribute(entry); // PENDING eeks calling a protected method!
   
   this.__myHashTableOfEntriesKeyedByUuid[uuid] = entry;
-  this.__myChronologicalListOfNewlyCreatedRecords.push(entry);
+  this._currentTransaction.addRecord(entry);
+  // this.__myChronologicalListOfNewlyCreatedRecords.push(entry);
   return entry;
 };
  
@@ -248,7 +266,8 @@
 StubVirtualServer.prototype.newOrdinal = function (inIdentifiedRecord, inOrdinalNumber) {
   this._throwErrorIfNoUserIsLoggedIn();
   var ordinal = new Ordinal(inIdentifiedRecord, this.__myWorld.getCurrentUser(), inOrdinalNumber);
-  this.__myChronologicalListOfNewlyCreatedRecords.push(ordinal);
+  this._currentTransaction.addRecord(ordinal);
+  // this.__myChronologicalListOfNewlyCreatedRecords.push(ordinal);
   return ordinal;
 };
 
@@ -265,7 +284,8 @@
 StubVirtualServer.prototype.newVote = function (inIdentifiedRecord, inRetainFlag) {
   this._throwErrorIfNoUserIsLoggedIn();
   var vote = new Vote(inIdentifiedRecord, this.__myWorld.getCurrentUser(), inRetainFlag);
-  this.__myChronologicalListOfNewlyCreatedRecords.push(vote);
+  this._currentTransaction.addRecord(vote);
+  // this.__myChronologicalListOfNewlyCreatedRecords.push(vote);
   return vote;
 };
 
@@ -304,7 +324,6 @@
     this.__myCurrentUser = newUser;
     var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
     var entry = newUser.addEntryForAttribute(attributeCalledName, inName);
-    // entry.__myCreationUserstamp = newUser;
     this.__myCurrentUser = null;
   }
   return newUser;
@@ -429,7 +448,7 @@
  * @return   The item identified by the given UUID.
  */
 StubVirtualServer.prototype.getItemFromUuid = function (inUuid, inObserver) {
-  // Util.assert(Util.isNumeric(inUuid));
+  // Util.assert(Util.isUuid(inUuid));
   
   var item = this.__myHashTableOfItemsKeyedByUuid[inUuid];
   if (item && inObserver) {
@@ -449,8 +468,10 @@
   // The StubVirtualServer doesn't ever actually talk to a server.
   // Other VirtualServer implementations would be expected to actually
   // implement this method such that it saves changes to the server
-  var listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
-  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  var listOfChangesMade = this._currentTransaction.getRecords();
+  this._currentTransaction = null;
+  // var listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
+  // this.__myChronologicalListOfNewlyCreatedRecords = [];
   return listOfChangesMade;
 };
   
@@ -655,25 +676,11 @@
 StubVirtualServer.prototype._getItemFromUuidOrCreateNewItem = function (inUuid) {
   var item = this.getItemFromUuid(inUuid);
   if (!item) {
-    /*
-    var uuidAsInt = null;
-    if (Util.isNumber(inUuid)) {
-      uuidAsInt = inUuid;
-    } else {
-      if (Util.isString(inUuid) && Util.isNumeric(inUuid)) {
-        uuidAsInt = parseInt(inUuid);
-      }
-    }
-    if (uuidAsInt) {
-      Util.assert(Util.isNumber(uuidAsInt));
-      this.__myNextAvailableUuid = Math.max(this.__myNextAvailableUuid, (uuidAsInt + 1));   
-    }
-    */
-
     item = new Item(this.__myWorld, inUuid);
     item._initialize();
     this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
-    this.__myChronologicalListOfNewlyCreatedRecords.push(item);
+    this._currentTransaction.addRecord(item);
+    // this.__myChronologicalListOfNewlyCreatedRecords.push(item);
   }
   return item;
 };
@@ -801,12 +808,12 @@
 
   this.__myCurrentUser = null;
 
-  for (key in this.__myChronologicalListOfNewlyCreatedRecords) {
-    var newRecord = this.__myChronologicalListOfNewlyCreatedRecords[key];
+  var listOfNewlyCreatedRecords = this._currentTransaction.getRecords();
+  for (key in listOfNewlyCreatedRecords) {
+    var newRecord = listOfNewlyCreatedRecords[key];
     this.__myChronologicalListOfRecords.push(newRecord);
   }
-  var listOfNewlyCreatedRecords = this.__myChronologicalListOfNewlyCreatedRecords;
-  this.__myChronologicalListOfNewlyCreatedRecords = [];
+  this._currentTransaction._listOfRecords = [];
   this.__myWorld.endTransaction();
   return listOfNewlyCreatedRecords;
 };

Added: trunk/source/model/Transaction.js
===================================================================
--- trunk/source/model/Transaction.js	2005-06-14 20:34:24 UTC (rev 138)
+++ trunk/source/model/Transaction.js	2005-06-14 23:39:49 UTC (rev 139)
@@ -0,0 +1,67 @@
+/*****************************************************************************
+ Transaction.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+/**
+ * A Transaction object represents a database transaction.  Each Transaction
+ * contains a list of the records that were created during the transaction.
+ *
+ * @scope    public instance constructor
+ */
+function Transaction() {
+  this._listOfRecords = [];
+}
+
+
+/**
+ * Records the fact that a record was created during the transaction.
+ *
+ * @scope    public instance method
+ * @param    newRecord    A record created during the transaction. 
+ */
+Transaction.prototype.addRecord = function(newRecord) {
+  this._listOfRecords.push(newRecord);
+};
+
+
+/**
+ * Returns a list of all the records created during the transaction.
+ *
+ * @scope    public instance method
+ * @return   A list of records. 
+ */
+Transaction.prototype.getRecords = function() {
+  return this._listOfRecords;
+};
+
+    
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at sheep.berlios.de  Wed Jun 15 01:41:58 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 15 Jun 2005 01:41:58 +0200
Subject: [openrecord-svn] r140 - in trunk: documentation source/model
Message-ID: <200506142341.j5ENfwks029802@sheep.berlios.de>

Author: skinner
Date: 2005-06-15 01:41:57 +0200 (Wed, 15 Jun 2005)
New Revision: 140

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/model/ModelTest.html
Log:
oops, forgot to run unit tests before checking in!

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-14 23:39:49 UTC (rev 139)
+++ trunk/documentation/release_planning.txt	2005-06-14 23:41:57 UTC (rev 140)
@@ -158,7 +158,7 @@
        |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
 mignon | 0.25 IED |         |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
 mignon | 0.5  IED |         |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
-brian  | 0.5  IED |         |  4. Store transaction info in repository
+brian  | 0.5  IED | 0.5 IED |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data

Modified: trunk/source/model/ModelTest.html
===================================================================
--- trunk/source/model/ModelTest.html	2005-06-14 23:39:49 UTC (rev 139)
+++ trunk/source/model/ModelTest.html	2005-06-14 23:41:57 UTC (rev 140)
@@ -21,6 +21,7 @@
     <script type="text/javascript" src="IdentifiedRecord.js"></script>
     <script type="text/javascript" src="Item.js"></script>
     <script type="text/javascript" src="Entry.js"></script>
+    <script type="text/javascript" src="Transaction.js"></script>
     <script type="text/javascript" src="World.js"></script>
     <script type="text/javascript" src="StubVirtualServer.js"></script>
     <script type="text/javascript" src="DeltaVirtualServer.js"></script>



From mignon at sheep.berlios.de  Wed Jun 15 08:57:23 2005
From: mignon at sheep.berlios.de (Mignon Belongie at BerliOS)
Date: Wed, 15 Jun 2005 08:57:23 +0200
Subject: [openrecord-svn] r141 - in trunk: documentation source source/model
Message-ID: <200506150657.j5F6vNdB017542@sheep.berlios.de>

Author: mignon
Date: 2005-06-15 08:57:22 +0200 (Wed, 15 Jun 2005)
New Revision: 141

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/Util.js
   trunk/source/model/IdentifiedRecord.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
Log:
identifiedRecord.getUserstamp() and .getTimestamp() now get their values from the UUID (except when using _rehydrateIdentifiedRecord, for the sake of temporary backward compatibility.)  Util.generateTimeBasedUuid is now used instead of Util.generateRandomUuid.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-14 23:41:57 UTC (rev 140)
+++ trunk/documentation/release_planning.txt	2005-06-15 06:57:22 UTC (rev 141)
@@ -156,8 +156,8 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
        |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
-mignon | 0.25 IED |         |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
-mignon | 0.5  IED |         |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
+mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
+mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
 brian  | 0.5  IED | 0.5 IED |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-14 23:41:57 UTC (rev 140)
+++ trunk/source/Util.js	2005-06-15 06:57:22 UTC (rev 141)
@@ -75,7 +75,6 @@
 // -------------------------------------------------------------------
 // Util global class variables
 // -------------------------------------------------------------------
-Util._ourUuidPseudoNodeString = null;
 Util._ourUuidClockSeqString = null;
 Util._ourDateValueOfPreviousUuid = null;
 Util._ourNextIntraMillisecondIncrement = 0;
@@ -663,13 +662,10 @@
     Util.assert(pseudoNode.length == 12);  
   }
   else {
-    if (!Util._ourUuidPseudoNodeString) {
-      var pseudoNodeIndicatorBit = 0x8000;
-      var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
-      var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(Util.HEX_RADIX);
-      Util._ourUuidPseudoNodeString = leftmost4HexCharacters + Util.getRandomEightCharacterHexString();
-    }
-    pseudoNode = Util._ourUuidPseudoNodeString;
+    var pseudoNodeIndicatorBit = 0x8000;
+    var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
+    var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(Util.HEX_RADIX);
+    pseudoNode = leftmost4HexCharacters + Util.getRandomEightCharacterHexString();
   }
   if (!Util._ourUuidClockSeqString) {
     var variantCodeForDCEUuids = 0x8000; // 10--------------, i.e. uses only first two of 16 bits.

Modified: trunk/source/model/IdentifiedRecord.js
===================================================================
--- trunk/source/model/IdentifiedRecord.js	2005-06-14 23:41:57 UTC (rev 140)
+++ trunk/source/model/IdentifiedRecord.js	2005-06-15 06:57:22 UTC (rev 141)
@@ -82,8 +82,6 @@
  * @scope    protected instance method
  */
 IdentifiedRecord.prototype._initializeIdentifiedRecord = function () {
-  this.__myCreationTimestamp = new Date();
-  this.__myCreationUserstamp = this.getWorld().getCurrentUser();
 };
 
 
@@ -168,8 +166,35 @@
  * @scope    public instance method
  * @return   A Date object.
  */
-IdentifiedRecord.prototype.getTimestamp = function () {
-  return this.__myCreationTimestamp;
+IdentifiedRecord.prototype.getTimestamp = function() {
+  if (this.__myCreationTimestamp) {
+    // This case is now here only for the (temporary) benefit of _rehydrateIdentifiedRecord.
+    return this.__myCreationTimestamp;
+  }
+  var hexTimeLow = this.__myUuid.split('-')[0];
+  var hexTimeMid = this.__myUuid.split('-')[1];
+  var hexTimeHigh = this.__myUuid.split('-')[2];
+  var timeLow = parseInt(hexTimeLow, Util.HEX_RADIX);
+  var timeMid = parseInt(hexTimeMid, Util.HEX_RADIX);
+  var timeHigh = parseInt(hexTimeHigh, Util.HEX_RADIX);
+  var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
+  hundredNanosecondIntervalsSince1582 <<= 16;
+  hundredNanosecondIntervalsSince1582 += timeMid;
+  // What we really want to do next is shift left 32 bits, but the result will be too big
+  // to fit in an int, so we'll multiply by 2^32, and the result will be a floating point approximation.
+  hundredNanosecondIntervalsSince1582 *= 0x100000000;
+  hundredNanosecondIntervalsSince1582 += timeLow;
+  var millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;
+
+  // Again, this will be a floating point approximation.
+  // We can make things exact later if we need to.
+  var secondsPerHour = 60 * 60;
+  var hoursBetween1582and1970 = Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS;
+  var secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;
+  var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
+
+  var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
+  return millisecondsSince1970;
 };
 
 
@@ -179,8 +204,20 @@
  * @scope    public instance method
  * @return   A user item.
  */
-IdentifiedRecord.prototype.getUserstamp = function () {
-  return this.__myCreationUserstamp;
+IdentifiedRecord.prototype.getUserstamp = function() {
+  if (this.__myCreationUserstamp) {
+    // This case is now here only for the (temporary) benefit of _rehydrateIdentifiedRecord.
+    return this.__myCreationUserstamp;
+  }
+  var allUsers = this.__myWorld.getUsers();
+  var myPseudonode = this.__myUuid.split('-')[4];
+  for (key in allUsers) {
+    var usersPseudonode = allUsers[key]._getUuid().split('-')[4];
+    if (usersPseudonode == myPseudonode) {
+      return allUsers[key];
+    }
+  }
+  throw new Error("User not found.  Database may be corrupted.");
 };
 
 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-14 23:41:57 UTC (rev 140)
+++ trunk/source/model/ModelTest.js	2005-06-15 06:57:22 UTC (rev 141)
@@ -35,7 +35,64 @@
   ModelTestVars = {};
 }
 
+function testGetUserstamp() {
+  var world = new World();
+  var listOfUsers = world.getUsers();  
+  var axiomaticUser = listOfUsers[0];
+  assertTrue('The axiomaticUser created the axiomaticUser', (axiomaticUser.getUserstamp() == axiomaticUser));
 
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  var passwordForChris = "Kringlishous!";
+  var userChris = world.newUser("Chris Kringle", passwordForChris);
+
+  world.login(userJane, janesPassword);
+
+  assertTrue('The user Jane created the user Jane', (userJane.getUserstamp() == userJane));
+  
+  var starWars = world.newItem("Star Wars");
+  var recoveredUser = starWars.getUserstamp();
+  assertTrue("The user that created 'starWars' should be Jane", recoveredUser == userJane);
+  
+  world.logout();
+  world.login(userChris, passwordForChris);
+  var elephant = world.newItem("Elephant");
+  recoveredUser = elephant.getUserstamp();
+  assertTrue("The user that created 'elephant' should be Chris", recoveredUser == userChris);
+  recoveredUser = starWars.getUserstamp();
+  assertTrue("The user that created 'starWars' should be Jane", recoveredUser == userJane);  
+}
+
+function waitForNextMillisecond() {
+  var now = new Date();
+  var then = now;
+  while (now.valueOf() == then.valueOf()) {
+    now = new Date();
+  };
+}
+
+function testGetTimestamp() {
+  var world = new World();
+  var tZero = new Date();
+  var janesPassword = "jane's password";
+  waitForNextMillisecond();
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  world.login(userJane, janesPassword);
+  waitForNextMillisecond();
+  var starWars = world.newItem("Star Wars");
+  var starWarsTimestamp = starWars.getTimestamp();
+  waitForNextMillisecond();
+  var now = new Date();
+  assertTrue('"Star Wars" has a timestamp in the past', now.valueOf() > starWarsTimestamp);
+  assertTrue('"Star Wars" was created after tZero', starWarsTimestamp > tZero.valueOf());
+  waitForNextMillisecond();
+  var starTrek = world.newItem("Star Trek");
+  var starTrekTimestamp = starTrek.getTimestamp();
+  assertTrue('"Star Wars" was created before "Star Trek"', starWarsTimestamp < starTrekTimestamp);
+  var janesTimestamp = userJane.getTimestamp();
+  assertTrue('"Star Wars" was created after user Jane', starWarsTimestamp > janesTimestamp);
+}
+
 function testLoginLogout() {
   var world = new World();
   var listOfUsers;

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-14 23:41:57 UTC (rev 140)
+++ trunk/source/model/StubVirtualServer.js	2005-06-15 06:57:22 UTC (rev 141)
@@ -311,7 +311,6 @@
   }
 
   var newUser = this._createNewItem(inObserver, false);
-  newUser.__myCreationUserstamp = newUser;
   this.__myListOfUsers.push(newUser);
   
   var md5Authentication = null;
@@ -644,10 +643,17 @@
  * @scope    private instance method
  * @return   A newly created UUID.
  */
-StubVirtualServer.prototype._getNewUuid = function () {
-  // var newUuid = this.__myNextAvailableUuid;
-  // this.__myNextAvailableUuid += 1;
-  var newUuid = Util.generateRandomUuid();
+StubVirtualServer.prototype._getNewUuid = function() {
+  var newUuid;
+  if (this.__myCurrentUser) {
+    var uuidOfCurrentUser = this.__myCurrentUser._getUuid();
+    var arrayOfParts = uuidOfCurrentUser.split("-");
+    var pseudoNodeOfCurrentUser = arrayOfParts[4];//"0123456789AB";
+    newUuid = Util.generateTimeBasedUuid(pseudoNodeOfCurrentUser);
+  }
+  else {
+    newUuid = Util.generateTimeBasedUuid();
+  }
   return newUuid;
 };
 
@@ -701,7 +707,6 @@
   
   this.__myWorld.beginTransaction();
   var axiomaticUser = this._getItemFromUuidOrCreateNewItem(World.UUID_FOR_USER_AMY);
-  axiomaticUser.__myCreationUserstamp = axiomaticUser;
   this.__myListOfUsers.push(axiomaticUser);
   this.__myHashTableOfUserAuthenticationInfo[axiomaticUser.getUniqueKeyString()] = null;
   this.__myCurrentUser = axiomaticUser;



From chaolam at sheep.berlios.de  Wed Jun 15 21:27:20 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Wed, 15 Jun 2005 21:27:20 +0200
Subject: [openrecord-svn] r142 - in trunk: documentation source source/model source/repositories/demo_page
Message-ID: <200506151927.j5FJRKFb010277@sheep.berlios.de>

Author: chaolam
Date: 2005-06-15 21:27:18 +0200 (Wed, 15 Jun 2005)
New Revision: 142

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/SectionView.js
   trunk/source/model/Item.js
   trunk/source/model/ModelTest.js
   trunk/source/model/READ_ME.txt
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Log:
 Move to better persistent representation for queries, replaced matchingCategory to matchingValue and matchingItem to matchingAttribute for queries.


Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/documentation/release_planning.txt	2005-06-15 19:27:18 UTC (rev 142)
@@ -165,7 +165,7 @@
 chao   | 0.5  IED |         |  8. UI for entering a number literal (instead of a string literal) in a table
 chao   | 1    IED |         |  9. UI for entering a date literal in a table (and data model support)
        |          |         | 10. Add data model support for bi-directional references
-chao   | ?        |         | 11. Move to better persistent representation for queries
+chao   | 2    IED |         | 11. Move to better persistent representation for queries
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields
        |          |         | 14. BUG: problems with newlines and HTML characters in text strings
@@ -451,5 +451,6 @@
 + Should we rename "World"?
 + Should we adopt "Globals" convention for JSLint?
 + Should we get rid of semi-colon checking in JSLint?
++ Should we work on making OpenRecord work within MediaWiki?
 
 

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/source/SectionView.js	2005-06-15 19:27:18 UTC (rev 142)
@@ -266,38 +266,26 @@
 SectionView.prototype._refreshQueryEditSpan = function () {
   this._queryEditSpan.innerHTML = '';
   
-  var attributeCalledQueryMatchingCategory = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var listOfMatchingCategories = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingCategory);
-  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
-  var selectedCategoryName = isCategoryMatchingQuery ? listOfMatchingCategories[0].getValue().getDisplayName() : "no category selected";
+  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
+  var listOfMatchingEntries = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var isCategoryMatchingQuery = (listOfMatchingEntries && (listOfMatchingEntries.length > 0));
+  var selectedCategoryName = isCategoryMatchingQuery ? listOfMatchingEntries[0].getValue().getDisplayName() : "no category selected";
 
   var isEmptyQuery = false;
-  if (!isCategoryMatchingQuery) {
-    var attributeCalledQueryMatchingItem = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
-    var listOfMatchingItems = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingItem);
-    var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
-    isEmptyQuery = !isItemMatchingQuery;
-  }
-  
-  if (isCategoryMatchingQuery || isEmptyQuery) {
-    var listener = this; 
-    var querySelectElement = View.createAndAppendElement(this._queryEditSpan, "select");
-    var listOfCategories = this.getWorld().getCategories();
-    var optionElement = View.createAndAppendElement(querySelectElement, "option");
-    optionElement.setAttribute("value", null);
+  var listener = this; 
+  var querySelectElement = View.createAndAppendElement(this._queryEditSpan, "select");
+  var listOfCategories = this.getWorld().getCategories();
+  var optionElement = View.createAndAppendElement(querySelectElement, "option");
+  optionElement.setAttribute("value", null);
+  Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
+  optionElement.innerHTML = "(none)";
+  for (var key in listOfCategories) {
+    var category = listOfCategories[key];
+    optionElement = View.createAndAppendElement(querySelectElement, "option");
+    optionElement.selected = (selectedCategoryName == category.getDisplayName());
+    optionElement.setAttribute("value", category._getUuid());
     Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
-    optionElement.innerHTML = "(none)";
-    for (var key in listOfCategories) {
-      var category = listOfCategories[key];
-      optionElement = View.createAndAppendElement(querySelectElement, "option");
-      optionElement.selected = (selectedCategoryName == category.getDisplayName());
-      optionElement.setAttribute("value", category._getUuid());
-      Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
-      optionElement.innerHTML = category.getDisplayName();
-    }
-  } else {
-    var textTheGiven = document.createTextNode(" the given");
-    this._queryEditSpan.appendChild(textTheGiven);
+    optionElement.innerHTML = category.getDisplayName();
   }
 };
 
@@ -358,17 +346,17 @@
   var newQueryMatchingCategory = this.getWorld().getItemFromUuid(newChoiceUuid);
   var newChoiceName = newQueryMatchingCategory.getDisplayName();
   
-  var attributeCalledQueryMatchingCategory = this.getWorld().getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var listOfMatchingCategories = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingCategory);
-  var currentQueryMatchingCategoryEntry = listOfMatchingCategories.length > 0? listOfMatchingCategories[0] : null;
-  var currentQueryMatchingCategory = listOfMatchingCategories.length > 0? listOfMatchingCategories[0].getValue() : null;
+  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
+  var listOfMatchingEntries = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var currentQueryMatchingCategoryEntry = listOfMatchingEntries.length > 0? listOfMatchingEntries[0] : null;
+  var currentQueryMatchingCategory = listOfMatchingEntries.length > 0? listOfMatchingEntries[0].getValue() : null;
   var currentCategoryName = currentQueryMatchingCategory? currentQueryMatchingCategory.getDisplayName() : "none";
  
   if (currentCategoryName != newChoiceName) {
     if (currentQueryMatchingCategory) {
       this.getQuery().replaceEntry(currentQueryMatchingCategoryEntry, newQueryMatchingCategory);
     } else {
-      this.getQuery().addEntryForAttribute(attributeCalledQueryMatchingCategory, newQueryMatchingCategory);
+      this.getQuery().addEntryForAttribute(attributeCalledQueryMatchingValue, newQueryMatchingCategory);
     }
     // I think we need these next 3 lines in to make sure the view gets updated  
     // to reflect the new query.  When we get a chance we should probably do 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/source/model/Item.js	2005-06-15 19:27:18 UTC (rev 142)
@@ -253,7 +253,8 @@
       Util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
-      filteredListOfEntries = listOfEntries;
+      Util.assert(false);
+      filteredListOfEntries = listOfEntries; //PENDING No such variable as listOfEntries ?!!
       break;
     default:
       // We should never get here.  If we get here, it's an error.
@@ -412,6 +413,29 @@
 // -------------------------------------------------------------------
 
 /**
+ * Does this item have an attribute with a particular entry?
+ * Used in getting query results
+ *
+ * @scope public instance method
+ * @return Boolean. True if this item has an attribute with the entry
+ */
+Item.prototype.hasAttributeValue = function (inAttribute, inValue) {
+  Util.assert(inAttribute instanceof Item, inAttribute + ' is not an item');
+  //Util.assert(inValue);
+  var entryList = this.getEntriesForAttribute(inAttribute);
+
+  // look at all the entries this item's attribute is assigned to, 
+  // and see if one of them is "inEntry"
+  for (var key in entryList) {
+    var entry = entryList[key];
+    if (entry.getValue() == inValue) {
+      return true;
+    }
+  }
+  return false;
+};
+
+/**
  * Given a category, returns "true" if the item has been assigned to 
  * that category.
  *
@@ -422,17 +446,8 @@
   Util.assert(inCategory instanceof Item);
 
   var categoryAttribute = this.getWorld().getAttributeCalledCategory();
-  var entryList = this.getEntriesForAttribute(categoryAttribute);
+  return this.hasAttributeValue(categoryAttribute, inCategory);
   
-  // look at all the categories this item is assigned to, 
-  // and see if one of them is "inCategory"
-  for (var key in entryList) {
-    var entry = entryList[key];
-    if (entry.getValue() == inCategory) {
-      return true;
-    }
-  }
-  
   /*
    * Also returns true if the item has been assigned to some category which is in
    * turn assigned to the given category, and so on, up the chain of category 
@@ -454,8 +469,8 @@
       return true;
     }
   }
+  return false;
   */
-  return false;
 };
  
 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/source/model/ModelTest.js	2005-06-15 19:27:18 UTC (rev 142)
@@ -535,17 +535,18 @@
 
   var hasAll;
   var queryForFoods = world.newQueryForItemsByCategory(categoryCalledFood);
-  var queryForCities = world.newQueryForSpecificItems([tokyo, seattle]);
   
   var listOfFoods = world.getResultItemsForQuery(queryForFoods);
   hasAll = Util.areObjectsInSet([apple, brownie, cupcake], listOfFoods);
   assertTrue('Food query returns 3 foods', listOfFoods.length == 3);
   assertTrue('Food query returns all 3 foods', hasAll);
 
+/*  NO LONGER SUPPORT QUERY FOR SPECIFIC ITEMS 6/14/05
+  var queryForCities = world.newQueryForSpecificItems([tokyo, seattle]);
   var listOfCities = world.getResultItemsForQuery(queryForCities);
   hasAll = Util.areObjectsInSet([tokyo, seattle], listOfCities);
   assertTrue('City query returns 2 cities', listOfCities.length == 2);
-  assertTrue('City query returns all cities', hasAll);
+  assertTrue('City query returns all cities', hasAll);*/
 
   world.setItemToBeIncludedInQueryResultList(tokyo, queryForFoods);
   assertTrue('Tokyo is now a food', tokyo.isInCategory(categoryCalledFood));
@@ -555,6 +556,29 @@
   assertTrue('Food query returns 4 foods', listOfFoods.length == 4);
   assertTrue('Food query returns all 4 foods', hasAll);
 
+  // test for queries using non-category attribute e.g. continent
+  var attributeCalledContinent = world.newItem("Continent");
+  tokyo.addEntryForAttribute(attributeCalledContinent, "Asia");
+  var beijing = world.newItem("Beijing");
+  beijing.addEntryForAttribute(attributeCalledContinent, "Asia");
+  var seattleEntry = seattle.addEntryForAttribute(attributeCalledContinent, "North America");
+  var asiaQuery = world.newQuery(attributeCalledContinent, "Asia")
+  var listOfCountries = world.getResultItemsForQuery(asiaQuery);
+  assertTrue('Asia query returns 2 countries', listOfCountries.length == 2);
+  hasAll = Util.areObjectsInSet([tokyo,beijing], listOfCountries);
+  assertTrue('Asia query returns all 2 countries', hasAll);
+  
+  var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
+  listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
+  assertTrue('North America query returned only Seattle',
+    listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
+    
+  seattle.replaceEntry(seattleEntry, "Asia");
+  var listOfCountries = world.getResultItemsForQuery(asiaQuery);
+  assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
+  hasAll = Util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
+  assertTrue('Asia query returns all 3 countries', hasAll);
+  
   world.logout();
 }
 

Modified: trunk/source/model/READ_ME.txt
===================================================================
--- trunk/source/model/READ_ME.txt	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/source/model/READ_ME.txt	2005-06-15 19:27:18 UTC (rev 142)
@@ -91,7 +91,6 @@
   world.newAttribute()
   world.newCategory()
   world.newQueryForItemsByCategory()
-  world.newQueryForSpecificItems()
   
   world.getItemsInCategory()
   world.getResultItemsForQuery() 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/source/model/StubVirtualServer.js	2005-06-15 19:27:18 UTC (rev 142)
@@ -490,46 +490,44 @@
 StubVirtualServer.prototype.getResultItemsForQuery = function (inQuery, inObserver) {
   Util.assert(inQuery instanceof Item);
   
-  var attributeCalledQueryMatchingCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var attributeCalledQueryMatchingItem = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
+  var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
 
   var uuid = null;
   var item = null;
   var key;
   var listOfQueryResultItems = [];
-  var listOfMatchingCategories = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingCategory);
-  var listOfMatchingItems = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingItem);
-  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
-  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
-
-  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
-
-  if (isItemMatchingQuery) {
-    for (key in listOfMatchingItems) {
-      var itemEntry = listOfMatchingItems[key];
-      item = itemEntry.getValue();
-      listOfQueryResultItems.push(item);
-    }
+  var listOfMatchingEntries = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var listOfMatchingAttrs = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+  if (!listOfMatchingEntries || listOfMatchingEntries.length == 0) {
+    return [];
   }
-  
-  if (isCategoryMatchingQuery) {
-    // This is a wildly inefficient search.  But maybe it doesn't matter,
-    // because this code should all be replaced someday by server code.
-    for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
-      item = this.__myHashTableOfItemsKeyedByUuid[uuid];
-      if (!item.hasBeenDeleted()) {
-        var includeItem = true;
-        for (key in listOfMatchingCategories) {
-          var categoryEntry = listOfMatchingCategories[key];
-          var category = categoryEntry.getValue();
-          if (includeItem && !(item.isInCategory(category))) {
-            includeItem = false;
-          }
+  var matchingAttribute;
+  if (listOfMatchingAttrs.length === 0) {
+    // by default matching attribute is category
+    matchingAttribute = this.getWorld().getAttributeCalledCategory();
+  }
+  else {
+    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    matchingAttribute = listOfMatchingAttrs[0].getValue();
+  }
+
+  // This is a wildly inefficient search.  But maybe it doesn't matter,
+  // because this code should all be replaced someday by server code.
+  for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
+    item = this.__myHashTableOfItemsKeyedByUuid[uuid];
+    if (!item.hasBeenDeleted()) {
+      var includeItem = true;
+      for (key in listOfMatchingEntries) {
+        var matchingEntry = listOfMatchingEntries[key];
+        var match = matchingEntry.getValue();
+        if (includeItem && !(item.hasAttributeValue(matchingAttribute, match))) {
+          includeItem = false;
         }
-        if (includeItem) {
-          listOfQueryResultItems.push(item);
-        }
       }
+      if (includeItem) {
+        listOfQueryResultItems.push(item);
+      }
     }
   }
   
@@ -551,29 +549,27 @@
 StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList = function (inItem, inQuery) {
   Util.assert(inItem instanceof Item);
   Util.assert(inQuery instanceof Item);
+  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
+  var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
 
-  var attributeCalledQueryMatchingCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  var attributeCalledQueryMatchingItem = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
-
-  var listOfMatchingCategories = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingCategory);
-  var listOfMatchingItems = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingItem);
-  var isCategoryMatchingQuery = (listOfMatchingCategories && (listOfMatchingCategories.length > 0));
-  var isItemMatchingQuery = (listOfMatchingItems && (listOfMatchingItems.length > 0));
-
-  Util.assert(!(isCategoryMatchingQuery && isItemMatchingQuery));
-
-  if (isItemMatchingQuery) {
-    inQuery.addEntryForAttribute(attributeCalledQueryMatchingItem, inItem);
+  var listOfMatchingEntries = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var listOfMatchingAttrs = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+  Util.assert(listOfMatchingEntries && (listOfMatchingEntries.length > 0));
+  var matchingAttribute;
+  if (listOfMatchingAttrs.length === 0) {
+    // by default matching attribute is category
+    matchingAttribute = this.getWorld().getAttributeCalledCategory();
   }
-  
-  var attributeCalledCategory = this.__myWorld.getAttributeCalledCategory();
-  if (isCategoryMatchingQuery) {
-    for (var key in listOfMatchingCategories) {
-      var categoryEntry = listOfMatchingCategories[key];
-      var category = categoryEntry.getValue();
-      if (!(inItem.isInCategory(category))) {
-        inItem.addEntryForAttribute(attributeCalledCategory, category);
-      }
+  else {
+    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    matchingAttribute = listOfMatchingAttrs[0].getValue();
+  }
+
+  for (var key in listOfMatchingEntries) {
+    var matchingEntry = listOfMatchingEntries[key];
+    var match = matchingEntry.getValue();
+    if (!(inItem.isInCategory(match))) {
+      inItem.addEntryForAttribute(matchingAttribute, match);
     }
   }
 };
@@ -719,8 +715,8 @@
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY]          = "Body";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY]      = "Category";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY]         = "Query";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = "Matching Category";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = "Matching Item";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE] = "Matching Value";
+  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE] = "Matching Attribute";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED]       = "Unfiled Entry";
   hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE] = "Expected Type";
 
@@ -764,8 +760,8 @@
   hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY]          = [World.UUID_FOR_TYPE_TEXT];
   hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY]      = [World.UUID_FOR_CATEGORY_CATEGORY];
   hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY]         = [World.UUID_FOR_CATEGORY_QUERY];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY] = [World.UUID_FOR_CATEGORY_CATEGORY];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM] = [World.UUID_FOR_TYPE_ITEM];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE] = [World.UUID_FOR_CATEGORY_CATEGORY];
+  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE] = [World.UUID_FOR_TYPE_ITEM];
   hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED]       = [World.UUID_FOR_TYPE_ANYTHING];
   hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE] = [World.UUID_FOR_CATEGORY_TYPE, World.UUID_FOR_CATEGORY_CATEGORY];
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/source/model/World.js	2005-06-15 19:27:18 UTC (rev 142)
@@ -57,8 +57,8 @@
 World.UUID_FOR_ATTRIBUTE_BODY          = "00000104-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_CATEGORY      = "00000105-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY         = "00000106-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY = "00000107-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM = "00000108-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE = "00000107-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE = "00000108-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_UNFILED       = "00000109-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE = "0000010a-ce7f-11d9-8cd5-0011113ae5d6";
 
@@ -116,8 +116,8 @@
   this._attributeCalledSummary               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
   this._attributeCalledCategory              = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
   this._attributeCalledQuery                 = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
-  this._attributeCalledQueryMatchingCategory = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_CATEGORY);
-  this._attributeCalledQueryMatchingItem     = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ITEM);
+  this._attributeCalledQueryMatchingValue = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE);
+  this._attributeCalledQueryMatchingAttribute     = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE);
   this._attributeCalledUnfiled               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
   this._attributeCalledExpectedType          = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
 
@@ -370,12 +370,12 @@
   return this._attributeCalledQuery;
 };
 
-World.prototype.getAttributeCalledQueryMatchingCategory = function() {
-  return this._attributeCalledQueryMatchingCategory;
+World.prototype.getAttributeCalledQueryMatchingValue = function() {
+  return this._attributeCalledQueryMatchingValue;
 };
 
-World.prototype.getAttributeCalledQueryMatchingItem = function() {
-  return this._attributeCalledQueryMatchingItem;
+World.prototype.getAttributeCalledQueryMatchingAttribute = function() {
+  return this._attributeCalledQueryMatchingAttribute;
 };
 
 World.prototype.getAttributeCalledUnfiled = function() {
@@ -606,30 +606,33 @@
  * Returns a newly created item representing a query.
  *
  * @scope    public instance method
- * @param    category    Optional. A category item, or an array of category items. 
+ * @param    matchingAttribute Attribute to query against
+ * @param    matchingEntriesOrList an Entry or array of entries to be matched against,  
  * @return   A newly created item representing a query.
  */
-World.prototype.newQueryForItemsByCategory = function(categoryOrListOfCategories) {
+World.prototype.newQuery = function(matchingAttribute, matchingEntriesOrList) {
+  Util.assert(matchingAttribute instanceof Item);
   this.beginTransaction();
   var item = this._virtualServer.newItem("A query");
   var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledQuery = this.getCategoryCalledQuery();
   item.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
 
-  var attributeCalledQueryMatchingCategory = this.getAttributeCalledQueryMatchingCategory();
-  var category;
-  if (categoryOrListOfCategories) {
-    if (categoryOrListOfCategories instanceof Item) {
-      category = categoryOrListOfCategories;
-      item.addEntryForAttribute(attributeCalledQueryMatchingCategory, category);
-    }
-    if (Util.isArray(categoryOrListOfCategories)) {
-      var listOfCategories = categoryOrListOfCategories;
-      for (var key in listOfCategories) {
-        category = listOfCategories[key];
-        item.addEntryForAttribute(attributeCalledQueryMatchingCategory, category);
+  var attributeCalledQueryMatchingAttribute = this.getAttributeCalledQueryMatchingAttribute();
+  var attributeCalledQueryMatchingValue = this.getAttributeCalledQueryMatchingValue();
+  var matchingEntry;
+  item.addEntryForAttribute(attributeCalledQueryMatchingAttribute, matchingAttribute);
+  if (matchingEntriesOrList) {
+    if (Util.isArray(matchingEntriesOrList)) {
+      for (var key in matchingEntriesOrList) {
+        matchingEntry = listOfCategories[key];
+        item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
       }
     }
+    else {
+      matchingEntry = matchingEntriesOrList;
+      item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
+    }
   }
 
   this.endTransaction();
@@ -641,9 +644,21 @@
  * Returns a newly created item representing a query.
  *
  * @scope    public instance method
+ * @param    category    Optional. A category item, or an array of category items. 
+ * @return   A newly created item representing a query.
+ */
+World.prototype.newQueryForItemsByCategory = function(categoryOrListOfCategories) {
+  var attributeCalledCategory = this.getAttributeCalledCategory();
+  return this.newQuery(attributeCalledCategory, categoryOrListOfCategories);
+};
+
+
+/** OBSOLETE - no more support for queries for specific items 
+ * Returns a newly created item representing a query.
+ *
+ * @scope    public instance method
  * @param    itemOrListOfItems    Optional. An item, or an array of items. 
  * @return   A newly created item representing a query.
- */
 World.prototype.newQueryForSpecificItems = function(itemOrListOfItems) {
   this.beginTransaction();
   var item = this._virtualServer.newItem("A query");
@@ -668,6 +683,7 @@
   this.endTransaction();
   return item;
 };
+*/
 
 
 /**

Modified: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-15 06:57:22 UTC (rev 141)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-15 19:27:18 UTC (rev 142)
@@ -43,13 +43,13 @@
       "timestamp": "1114819457218" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Matching Category
+  { "Item": {                             // Matching Value
            "uuid": "00000107-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457218" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Matching Item
+  { "Item": {                             // Matching Attribute
            "uuid": "00000108-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457234" }
@@ -347,12 +347,12 @@
       "timestamp": "1114819457312" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Matching Category
+  { "Entry": {                             // Matching Value
            "uuid": "1486",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "type": "StringValue",
-          "value": "Matching Category",
+          "value": "Matching Value",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457468" }
   },
@@ -360,29 +360,19 @@
   { "Entry": {                             // Attribute
            "uuid": "1487",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "type": "RelatedUuid",
           "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457484" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1487888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Matching Item
+  { "Entry": {                             // Matching Attribute
            "uuid": "1488",
       "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
+           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Attribute
            "type": "StringValue",
-          "value": "Matching Item",
+          "value": "Matching Attribute",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457500" }
   },
@@ -390,19 +380,19 @@
   { "Entry": {                             // Attribute
            "uuid": "1489",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
+           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Attribute
            "type": "RelatedUuid",
           "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457500" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Item
+  { "Entry": {                             // Attribute
            "uuid": "1489888",
       "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
+           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Attribute
            "type": "RelatedUuid",
-          "value": "00000130-ce7f-11d9-8cd5-0011113ae5d6",
+          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
       "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
       "timestamp": "1114819457312" }
   },
@@ -811,24 +801,12 @@
       "timestamp": "1114819457734" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // One Book
-           "uuid": "3020",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457750" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // Query for all books
            "uuid": "3011",
       "userstamp": "1502",                // by (Guest)
       "timestamp": "1114819457750" }
   },
   // -----------------------------------------------------------------------
-  { "Item": {                             // Query for one book
-           "uuid": "3021",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457765" }
-  },
-  // -----------------------------------------------------------------------
   { "Item": {                             // Bugs and Features to Implement
            "uuid": "4000",
       "userstamp": "1502",                // by (Guest)
@@ -1159,16 +1137,6 @@
       "timestamp": "1114819458828" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // One Book
-           "uuid": "6027",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "3000",                // Book Lists
-           "type": "RelatedUuid",
-          "value": "3020",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458843" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Section
            "uuid": "6028",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
@@ -1219,56 +1187,6 @@
       "timestamp": "1114819458937" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6033",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3020",                // One Book
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // One Book
-           "uuid": "6034",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3020",                // One Book
-           "type": "StringValue",
-          "value": "One Book",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Detail
-           "uuid": "6035",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "3020",                // One Book
-           "type": "StringValue",
-          "value": "Detail",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for one book
-           "uuid": "6036",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "3020",                // One Book
-           "type": "RelatedUuid",
-          "value": "3021",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This section shows a just a...
-           "uuid": "6037",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "3020",                // One Book
-           "type": "StringValue",
-          "value": "This section shows a just a single selected book. The section is populated using a query that asks for just a single book item.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459046" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Query
            "uuid": "6038",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
@@ -1289,36 +1207,6 @@
       "timestamp": "1114819459093" }
   },
   // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6041",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3021",                // Query for one book
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for one book
-           "uuid": "6042",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3021",                // Query for one book
-           "type": "StringValue",
-          "value": "Query for one book",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HTTP: The Definitive Guide
-           "uuid": "6043",
-      "attribute": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Item
-           "item": "3021",                // Query for one book
-           "type": "RelatedUuid",
-          "value": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459171" }
-  },
-  // -----------------------------------------------------------------------
   { "Entry": {                             // Page
            "uuid": "6078",
       "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
@@ -1581,7 +1469,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Feature
            "uuid": "6104",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "4011",                // Query for all features
            "type": "RelatedUuid",
           "value": "4102",
@@ -1611,7 +1499,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Bug
            "uuid": "6107",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "4021",                // Query for all bugs
            "type": "RelatedUuid",
           "value": "4101",
@@ -1641,7 +1529,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Closed Tasks
            "uuid": "6110",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "4031",                // Query for all closed items
            "type": "RelatedUuid",
           "value": "4103",
@@ -1671,7 +1559,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Bug
            "uuid": "6113",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "4041",                // Query for all closed bugs
            "type": "RelatedUuid",
           "value": "4101",
@@ -1681,7 +1569,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Closed Tasks
            "uuid": "6114",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "4041",                // Query for all closed bugs
            "type": "RelatedUuid",
           "value": "4103",
@@ -2221,7 +2109,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Charity
            "uuid": "6190",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "5011",                // Query for all charities
            "type": "RelatedUuid",
           "value": "5101",
@@ -2588,7 +2476,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Category
            "uuid": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
            "type": "RelatedUuid",
           "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
@@ -2676,7 +2564,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Attribute
            "uuid": "f9afff15-663e-4b45-8d62-bf2297ec0fe7",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
            "type": "RelatedUuid",
@@ -2759,7 +2647,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Person
            "uuid": "a11a8ac9-08d4-460b-8cfe-23ea90b04f7e",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "f9afff15-663e-4b45-8d62-bf2297ec0fe7",
            "type": "RelatedUuid",
@@ -3004,7 +2892,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Publisher
            "uuid": "5cceee12-d202-46ac-8724-0474ba4860ae",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "a11a8ac9-08d4-460b-8cfe-23ea90b04f7e",
            "type": "RelatedUuid",
@@ -3171,7 +3059,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Book
            "uuid": "cd9b4dfb-6fec-4f0f-815b-e0a2ae2ac7c3",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "5cceee12-d202-46ac-8724-0474ba4860ae",
            "type": "RelatedUuid",
@@ -3615,7 +3503,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Book
            "uuid": "0515ceef-33b9-477b-8ebf-66a3d0baf174",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "3011",                // Query for all books
            "type": "RelatedUuid",
           "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
@@ -3636,7 +3524,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Person
            "uuid": "ff73a3d6-7155-44cb-89e9-33a89404f203",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
    "previousEntry": "cd9b4dfb-6fec-4f0f-815b-e0a2ae2ac7c3",
            "type": "RelatedUuid",
@@ -3798,7 +3686,7 @@
   // -----------------------------------------------------------------------
   { "Entry": {                             // Publisher
            "uuid": "414b2c92-ded7-4071-8ff3-af2468ec665b",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Category
+      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
            "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
            "type": "RelatedUuid",
           "value": "ea435816-c5c0-482b-8850-5651fbfaad12",



From chaolam at sheep.berlios.de  Wed Jun 15 21:30:02 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Wed, 15 Jun 2005 21:30:02 +0200
Subject: [openrecord-svn] r143 - trunk/source/model
Message-ID: <200506151930.j5FJU25m010371@sheep.berlios.de>

Author: chaolam
Date: 2005-06-15 21:30:01 +0200 (Wed, 15 Jun 2005)
New Revision: 143

Modified:
   trunk/source/model/StubVirtualServer.js
Log:
Lint fix

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-15 19:27:18 UTC (rev 142)
+++ trunk/source/model/StubVirtualServer.js	2005-06-15 19:30:01 UTC (rev 143)
@@ -499,7 +499,7 @@
   var listOfQueryResultItems = [];
   var listOfMatchingEntries = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
   var listOfMatchingAttrs = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
-  if (!listOfMatchingEntries || listOfMatchingEntries.length == 0) {
+  if (!listOfMatchingEntries || listOfMatchingEntries.length === 0) {
     return [];
   }
   var matchingAttribute;



From skinner at sheep.berlios.de  Thu Jun 16 00:22:06 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 16 Jun 2005 00:22:06 +0200
Subject: [openrecord-svn] r144 - in trunk: documentation source source/model source/repositories/demo_page
Message-ID: <200506152222.j5FMM69L022510@sheep.berlios.de>

Author: skinner
Date: 2005-06-16 00:22:04 +0200 (Thu, 16 Jun 2005)
New Revision: 144

Added:
   trunk/source/repositories/demo_page/2005_june_chronological_list.json
Removed:
   trunk/source/repositories/demo_page/2005_may_chronological_list.json
Modified:
   trunk/documentation/release_planning.txt
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/SectionView.js
   trunk/source/Util.js
   trunk/source/demo_page.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/World.js
   trunk/source/model/append_to_repository_file.php
   trunk/source/repositories/demo_page/2005_may_user_list.json
Log:
Converted to a JSON repository file that uses only the new time-based UUIDs, not random UUIDs or sequential UUIDs.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/documentation/release_planning.txt	2005-06-15 22:22:04 UTC (rev 144)
@@ -158,6 +158,7 @@
        |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
 mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
 mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
+brian  | 0        | 0.25    |     Update the JSON repository file to use time-based UUIDs
 brian  | 0.5  IED | 0.5 IED |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/PageView.js	2005-06-15 22:22:04 UTC (rev 144)
@@ -47,8 +47,7 @@
 PageView.ELEMENT_ID_SECTION_DIV_MIDFIX = "_in_page_";
 PageView.ELEMENT_ID_SUMMARY_VIEW_DIV_PREFIX = "_summary_view_for_page_";
 
-//PageView.UUID_FOR_ATTRIBUTE_SECTION = 108;
-PageView.UUID_FOR_ATTRIBUTE_SECTION = "00000300-ce7f-11d9-8cd5-0011113ae5d6";
+PageView.UUID_FOR_ATTRIBUTE_SECTION = "00030000-ce7f-11d9-8cd5-0011113ae5d6";
 
 /**
  * Creates a new section in the repository

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/RootView.js	2005-06-15 22:22:04 UTC (rev 144)
@@ -57,13 +57,10 @@
 
 RootView.CONTROL_SPAN_CLASS = "control_span";
 
-// RootView.UUID_FOR_CATEGORY_PAGE = 145;
-// RootView.UUID_FOR_CATEGORY_SECTION = 146;  // PENDING: not used?
-// RootView.UUID_FOR_HOME_PAGE = 2000;
-RootView.UUID_FOR_CATEGORY_PAGE    = "00000200-ce7f-11d9-8cd5-0011113ae5d6";
-RootView.UUID_FOR_CATEGORY_SECTION = "00000201-ce7f-11d9-8cd5-0011113ae5d6";
+RootView.UUID_FOR_CATEGORY_PAGE    = "00020000-ce7f-11d9-8cd5-0011113ae5d6";
+RootView.UUID_FOR_CATEGORY_SECTION = "00020100-ce7f-11d9-8cd5-0011113ae5d6";
 
-RootView.UUID_FOR_HOME_PAGE        = "00000210-ce7f-11d9-8cd5-0011113ae5d6";
+RootView.UUID_FOR_HOME_PAGE        = "00050000-ce7f-11d9-8cd5-0011113ae5d6";
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/SectionView.js	2005-06-15 22:22:04 UTC (rev 144)
@@ -71,8 +71,7 @@
 SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER = "section_number";
 SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER = "cell_number";
 
-// SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME = 113;
-SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME = "00000400-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME = "00040000-ce7f-11d9-8cd5-0011113ae5d6";
 
 // -------------------------------------------------------------------
 // SectionView class properties

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/Util.js	2005-06-15 22:22:04 UTC (rev 144)
@@ -178,7 +178,7 @@
       }
       stackString = stackList.join("\n");
 
-      Util.ourErrorReporter("An assert statement failed with mesg: \n" + inMessage + " \nThe method Util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
+      Util.ourErrorReporter("An assert statement failed with message: \n" + inMessage + " \nThe method Util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
     }
   } else {
     Util.ourErrorReporter("An assert statement went sour.\nThe method Util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));

Modified: trunk/source/demo_page.js
===================================================================
--- trunk/source/demo_page.js	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/demo_page.js	2005-06-15 22:22:04 UTC (rev 144)
@@ -45,7 +45,7 @@
   
   var pathToDemoRepository = "repositories/demo_page/";
   
-  var repositoryFileName = "2005_may_chronological_list.json";
+  var repositoryFileName = "2005_june_chronological_list.json";
   var repositoryUrl = pathToDemoRepository + repositoryFileName;
   var repositoryContentString = Util.getStringContentsOfFileAtURL(repositoryUrl);
   repositoryContentString += " ] }";

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-15 22:22:04 UTC (rev 144)
@@ -27,8 +27,8 @@
  liability, or tort (including negligence), arising in any way out of or in 
  connection with the use or distribution of the work.
 *****************************************************************************/
- 
 
+
 // -------------------------------------------------------------------
 // Dependencies:
 //   Util.js
@@ -53,10 +53,11 @@
 DeltaVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
 DeltaVirtualServer.JSON_FORMAT_2005_MAY_RECORDS = "2005_MAY_CHRONOLOGICAL_LIST";
 DeltaVirtualServer.JSON_FORMAT_2005_MAY_USERS = "2005_MAY_USER_LIST";
+DeltaVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS = "2005_JUNE_CHRONOLOGICAL_LIST";
 
 DeltaVirtualServer.JSON_MEMBER_TYPE = "type";
 DeltaVirtualServer.JSON_MEMBER_VALUE = "value";
-DeltaVirtualServer.JSON_TYPE_STRING_VALUE = "StringValue";
+DeltaVirtualServer.JSON_TYPE_TEXT_VALUE = "TextValue";
 DeltaVirtualServer.JSON_TYPE_UUID = "Uuid";
 DeltaVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
 DeltaVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
@@ -130,7 +131,7 @@
   */
 
   this._myHashTableOfTypesKeyedByToken = {};
-  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_STRING_VALUE] = text;
+  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_TEXT_VALUE] = text;
   this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE] = number;
   this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_DATE_VALUE] = dateType;
   this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
@@ -160,7 +161,7 @@
   eval("dehydratedRecords = " + inJsonRepositoryString + ";");
   Util.assert(Util.isObject(dehydratedRecords));
   var recordFormat = dehydratedRecords[DeltaVirtualServer.JSON_MEMBER_FORMAT];
-  Util.assert(recordFormat == DeltaVirtualServer.JSON_FORMAT_2005_MAY_RECORDS);
+  Util.assert(recordFormat == DeltaVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
   var listOfRecords = dehydratedRecords[DeltaVirtualServer.JSON_MEMBER_RECORDS];
   Util.assert(Util.isArray(listOfRecords));
   
@@ -242,11 +243,13 @@
   
       var contents = dehydratedItem || dehydratedVote || dehydratedOrdinal || dehydratedEntry;
   
-      var timestampString = contents[DeltaVirtualServer.JSON_MEMBER_TIMESTAMP];
-      var userstampUuid = contents[DeltaVirtualServer.JSON_MEMBER_USERSTAMP];
-      var timestamp = new Date(new Number(timestampString));
-      var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
-  
+      // var timestampString = contents[DeltaVirtualServer.JSON_MEMBER_TIMESTAMP];
+      // var userstampUuid = contents[DeltaVirtualServer.JSON_MEMBER_USERSTAMP];
+      // var timestamp = new Date(new Number(timestampString));
+      // var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
+      var timestamp = null;
+      var userstamp = null;
+      
       if (dehydratedItem) {
         itemUuid = dehydratedItem[DeltaVirtualServer.JSON_MEMBER_UUID];
         item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
@@ -289,7 +292,7 @@
           case DeltaVirtualServer.JSON_TYPE_RELATED_UUID:
             finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
             break;
-          case DeltaVirtualServer.JSON_TYPE_STRING_VALUE:
+          case DeltaVirtualServer.JSON_TYPE_TEXT_VALUE:
             finalData = rawData;
             break;
           case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE:
@@ -447,19 +450,19 @@
       listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
       itemDisplayNameSubstring = this.truncateString(item.getDisplayName());
       listOfStrings.push('                                               // ' + itemDisplayNameSubstring + '\n');
-      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '",\n');
+      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '"');
     }
     if (record instanceof Vote) {
       var vote = record;
       listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{' + '\n');
       listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getIdentifiedRecord()._getUuid() + '",\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '",\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
     }
     if (record instanceof Ordinal) {
       var ordinal = record;
       listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
       listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getIdentifiedRecord()._getUuid() + '",\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '",\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
     }
     if (record instanceof Entry) {
       var entry = record;
@@ -491,7 +494,7 @@
         case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE: 
           valueString = contentData;
           break;
-        case DeltaVirtualServer.JSON_TYPE_STRING_VALUE: 
+        case DeltaVirtualServer.JSON_TYPE_TEXT_VALUE: 
           valueString = '"' + contentData + '"';
           break;
         case DeltaVirtualServer.JSON_TYPE_DATE_VALUE: 
@@ -503,14 +506,15 @@
         default:
           Util.assert(false, "no such type: " + typeToken);
       }
-      listOfStrings.push(indent + '        "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + ',\n');
+      listOfStrings.push(indent + '        "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + '');
     }
-    Util.assert(record.getUserstamp() !== null);
-    listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '",');
-    var userDisplayName = record.getUserstamp().getDisplayName();
-    var userDisplayNameSubstring = this.truncateString(userDisplayName);
-    listOfStrings.push('  // by (' + userDisplayNameSubstring + ')\n');
-    listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '" }\n');
+    listOfStrings.push('  }');
+    // Util.assert(record.getUserstamp() !== null);
+    // listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '",');
+    // var userDisplayName = record.getUserstamp().getDisplayName();
+    // var userDisplayNameSubstring = this.truncateString(userDisplayName);
+    // listOfStrings.push('  // by (' + userDisplayNameSubstring + ')\n');
+    // listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '" }\n');
     listOfStrings.push(indent + '}');
   }
   

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/model/World.js	2005-06-15 22:22:04 UTC (rev 144)
@@ -49,33 +49,33 @@
 World.NULL_UUID                        = "00000000-ce7f-11d9-8cd5-0011113ae5d6";
 World.IDENTITY_UUID                    = "00000001-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_USER_AMY                = "00000100-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_USER_AMY                = "00001000-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_ATTRIBUTE_NAME          = "00000101-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_SHORT_NAME    = "00000102-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_SUMMARY       = "00000103-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_BODY          = "00000104-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_CATEGORY      = "00000105-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY         = "00000106-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE = "00000107-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE = "00000108-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_UNFILED       = "00000109-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE = "0000010a-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_NAME          = "00001001-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_SHORT_NAME    = "00001002-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_SUMMARY       = "00001003-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_BODY          = "00001004-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_CATEGORY      = "00001005-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY         = "00001006-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE = "00001007-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE = "00001008-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_UNFILED       = "00001009-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE = "0000100a-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_CATEGORY_BOOK           = "0000010e-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
-World.UUID_FOR_CATEGORY_MOVIE          = "0000010f-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
-World.UUID_FOR_CATEGORY_ATTRIBUTE      = "00000110-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_CATEGORY       = "00000111-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_QUERY          = "00000112-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_TYPE           = "00000113-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_BOOK           = "0000100e-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
+World.UUID_FOR_CATEGORY_MOVIE          = "0000100f-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
+World.UUID_FOR_CATEGORY_ATTRIBUTE      = "00001010-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_CATEGORY       = "00001011-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_QUERY          = "00001012-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_TYPE           = "00001013-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_TYPE_TEXT               = "00000120-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_TYPE_NUMBER             = "00000121-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_TYPE_DATE               = "00000122-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_TYPE_CHECK_MARK         = "00000123-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_TYPE_URL                = "00000124-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_TYPE_ITEM               = "00000130-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_TYPE_ANYTHING           = "00000140-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_TEXT               = "00001020-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_NUMBER             = "00001021-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_DATE               = "00001022-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_CHECK_MARK         = "00001023-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_URL                = "00001024-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_ITEM               = "00001030-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_ANYTHING           = "00001040-ce7f-11d9-8cd5-0011113ae5d6";
 
 // -------------------------------------------------------------------
 // World private class constants

Modified: trunk/source/model/append_to_repository_file.php
===================================================================
--- trunk/source/model/append_to_repository_file.php	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/model/append_to_repository_file.php	2005-06-15 22:22:04 UTC (rev 144)
@@ -1,5 +1,5 @@
 <?php
-$filename = "../repositories/demo_page/2005_may_chronological_list.json";
+$filename = "../repositories/demo_page/2005_june_chronological_list.json";
 $contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
 if (is_writable($filename)) {
   echo "$filename is writable.";

Added: trunk/source/repositories/demo_page/2005_june_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-15 22:22:04 UTC (rev 144)
@@ -0,0 +1,715 @@
+// Repository records, in JSON format
+{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", 
+  "records": [
+  // =======================================================================
+  { "Transaction": [  // Axiomatic items
+    { "Item": {                                               // Amy ex machina
+             "uuid": "00001000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Name
+             "uuid": "00001001-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Short Name
+             "uuid": "00001002-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Summary
+             "uuid": "00001003-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Body
+             "uuid": "00001004-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category
+             "uuid": "00001005-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Query
+             "uuid": "00001006-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Matching Value
+             "uuid": "00001007-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Matching Attribute
+             "uuid": "00001008-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Unfiled Entry
+             "uuid": "00001009-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Expected Type
+             "uuid": "0000100a-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Attribute
+             "uuid": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category
+             "uuid": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Query
+             "uuid": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Type
+             "uuid": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Text
+             "uuid": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Number
+             "uuid": "00001021-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Date
+             "uuid": "00001022-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Check Mark
+             "uuid": "00001023-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // URL
+             "uuid": "00001024-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Item
+             "uuid": "00001025-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Anything
+             "uuid": "00001026-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Amy ex machina
+             "uuid": "0001000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // Amy ex machina
+             "type": "TextValue",
+            "value": "Amy ex machina" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Name
+             "uuid": "0001001a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "type": "TextValue",
+            "value": "Name" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001001b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001001c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Short Name
+             "uuid": "0001002a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "type": "TextValue",
+            "value": "Short Name" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001002b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001002c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Summary
+             "uuid": "0001003a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "type": "TextValue",
+            "value": "Summary" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001003b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001003c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Body
+             "uuid": "0001004a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "type": "TextValue",
+            "value": "Body" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001004b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001004c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001005a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "TextValue",
+            "value": "Category" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001005b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001005c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Query
+             "uuid": "0001006a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "TextValue",
+            "value": "Query" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001006b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Query
+             "uuid": "0001006c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "RelatedUuid",
+            "value": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Matching Value
+             "uuid": "0001007a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
+             "type": "TextValue",
+            "value": "Matching Value" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001007b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Matching Attribute
+             "uuid": "0001008a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "type": "TextValue",
+            "value": "Matching Attribute" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001008b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001008c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Unfiled Entry
+             "uuid": "0001009a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "type": "TextValue",
+            "value": "Unfiled Entry" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001009b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Anything
+             "uuid": "0001009c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "type": "RelatedUuid",
+            "value": "00001040-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Expected Type
+             "uuid": "000100aa-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "TextValue",
+            "value": "Expected Type" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "000100ab-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "000100ac-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "000100ad-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001010a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
+             "type": "TextValue",
+            "value": "Attribute" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001010b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001011a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "TextValue",
+            "value": "Category" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001011b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Query
+             "uuid": "0001012a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "TextValue",
+            "value": "Query" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001012b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001013a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
+             "type": "TextValue",
+            "value": "Type" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001013b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001020a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
+             "type": "TextValue",
+            "value": "Text" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001020b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Number
+             "uuid": "0001021a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
+             "type": "TextValue",
+            "value": "Number" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001021b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Date
+             "uuid": "0001022a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
+             "type": "TextValue",
+            "value": "Date" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001022b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Check Mark
+             "uuid": "0001023a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
+             "type": "TextValue",
+            "value": "Check Mark" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001023b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // URL
+             "uuid": "0001024a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
+             "type": "TextValue",
+            "value": "URL" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001024b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Item
+             "uuid": "0001030a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
+             "type": "TextValue",
+            "value": "Item" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001030b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Anything
+             "uuid": "0001040a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
+             "type": "TextValue",
+            "value": "Anything" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001040b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    } ]
+  },
+  // =======================================================================
+  { "Transaction": [  // Fundamental view-level items
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Page
+             "uuid": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Section
+             "uuid": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Section
+             "uuid": "00030000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Plugin Name
+             "uuid": "00040000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Page
+             "uuid": "0020000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
+             "type": "TextValue",
+            "value": "Page" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0020000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Section
+             "uuid": "0020100a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "TextValue",
+            "value": "Section" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0020100b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Section
+             "uuid": "0030000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "TextValue",
+            "value": "Section" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0030000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin Name
+             "uuid": "0040000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name
+             "type": "TextValue",
+            "value": "Plugin Name" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    } ]
+  },
+  // =======================================================================
+  { "Transaction": [  // Home Page  
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Welcome to the OpenRecord d...
+             "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Page
+             "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "RelatedUuid",
+            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // 1. Welcome!
+             "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "TextValue",
+            "value": "1. Welcome!" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Welcome to the OpenRecord d...
+             "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "TextValue",
+            "value": "Welcome to the OpenRecord demo!" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // This web site is a demo of ...
+             "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "TextValue",
+            "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
+    } ]
+  }
+,
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Brian Douglas Skinner
+             "uuid": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Brian Douglas Skinner
+             "uuid": "2c4fa781-dde4-11d9-9c71-8022ab6bc8ae",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae",  // Brian Douglas Skinner
+             "type": "TextValue",
+            "value": "Brian Douglas Skinner" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Chih-Chao Lam
+             "uuid": "90e02170-dde4-11d9-9c71-e24829d2f59b" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Chih-Chao Lam
+             "uuid": "90e02171-dde4-11d9-9c71-e24829d2f59b",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "90e02170-dde4-11d9-9c71-e24829d2f59b",  // Chih-Chao Lam
+             "type": "TextValue",
+            "value": "Chih-Chao Lam" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Mignon Belongie
+             "uuid": "97d040f0-dde4-11d9-9c71-c103016080e1" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Mignon Belongie
+             "uuid": "97d040f1-dde4-11d9-9c71-c103016080e1",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "97d040f0-dde4-11d9-9c71-c103016080e1",  // Mignon Belongie
+             "type": "TextValue",
+            "value": "Mignon Belongie" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Mimi Yin
+             "uuid": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Mimi Yin
+             "uuid": "9c3596e1-dde4-11d9-9c71-b6ac85cc6d5f",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f",  // Mimi Yin
+             "type": "TextValue",
+            "value": "Mimi Yin" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Marty Betz
+             "uuid": "a00bf340-dde4-11d9-9c71-dae11c269bc7" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Marty Betz
+             "uuid": "a00bf341-dde4-11d9-9c71-dae11c269bc7",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "a00bf340-dde4-11d9-9c71-dae11c269bc7",  // Marty Betz
+             "type": "TextValue",
+            "value": "Marty Betz" }
+    }  ]
+  }
\ No newline at end of file

Deleted: trunk/source/repositories/demo_page/2005_may_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/repositories/demo_page/2005_may_chronological_list.json	2005-06-15 22:22:04 UTC (rev 144)
@@ -1,3739 +0,0 @@
-// Repository records, in JSON format
-{ "format": "2005_MAY_CHRONOLOGICAL_LIST", 
-  "records": [
-  { "Item": {                             // Amy ex machina
-           "uuid": "00000100-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Name
-           "uuid": "00000101-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Short Name
-           "uuid": "00000102-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Summary
-           "uuid": "00000103-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Body
-           "uuid": "00000104-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Category
-           "uuid": "00000105-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query
-           "uuid": "00000106-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Matching Value
-           "uuid": "00000107-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Matching Attribute
-           "uuid": "00000108-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Unfiled Entry
-           "uuid": "00000109-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Expected Type
-           "uuid": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Attribute
-           "uuid": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Category
-           "uuid": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query
-           "uuid": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Type
-           "uuid": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Text
-           "uuid": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Number
-           "uuid": "00000121-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Date
-           "uuid": "00000122-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Check Mark
-           "uuid": "00000123-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // URL
-           "uuid": "00000124-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Item
-           "uuid": "00000125-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Anything
-           "uuid": "00000126-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Page
-           "uuid": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457282" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Section
-           "uuid": "00000300-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457300" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Plugin Name
-           "uuid": "00000400-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457301" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Section
-           "uuid": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Amy ex machina
-           "uuid": "1471",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // Amy ex machina
-           "type": "StringValue",
-          "value": "Amy ex machina",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Name
-           "uuid": "1472",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "type": "StringValue",
-          "value": "Name",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1473",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Text
-           "uuid": "1473888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "type": "RelatedUuid",
-          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Short Name
-           "uuid": "1474",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "type": "StringValue",
-          "value": "Short Name",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1475",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Text
-           "uuid": "1475888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "type": "RelatedUuid",
-          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Summary
-           "uuid": "1476",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "type": "StringValue",
-          "value": "Summary",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1477",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Text
-           "uuid": "1477888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "type": "RelatedUuid",
-          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Body
-           "uuid": "1478",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000104-ce7f-11d9-8cd5-0011113ae5d6",                // Body
-           "type": "StringValue",
-          "value": "Body",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1479",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000104-ce7f-11d9-8cd5-0011113ae5d6",                // Body
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Text
-           "uuid": "1479888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000104-ce7f-11d9-8cd5-0011113ae5d6",                // Body
-           "type": "RelatedUuid",
-          "value": "00000120-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1480",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "type": "StringValue",
-          "value": "Category",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1481",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1481888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "1484",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "type": "StringValue",
-          "value": "Query",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1485",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "1485888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Matching Value
-           "uuid": "1486",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "type": "StringValue",
-          "value": "Matching Value",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1487",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Matching Attribute
-           "uuid": "1488",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Attribute
-           "type": "StringValue",
-          "value": "Matching Attribute",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1489",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Attribute
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1489888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000108-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Attribute
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Unfiled Entry
-           "uuid": "1490",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000109-ce7f-11d9-8cd5-0011113ae5d6",                // Unfiled Entry
-           "type": "StringValue",
-          "value": "Unfiled Entry",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1491",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000109-ce7f-11d9-8cd5-0011113ae5d6",                // Unfiled Entry
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Anything
-           "uuid": "14891888",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "00000109-ce7f-11d9-8cd5-0011113ae5d6",                // Unfiled Entry
-           "type": "RelatedUuid",
-          "value": "00000140-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Expected Type
-           "uuid": "88803",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "type": "StringValue",
-          "value": "Expected Type",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457515" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "88804",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88804007",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "88804008",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1492",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000110-ce7f-11d9-8cd5-0011113ae5d6",                // Attribute
-           "type": "StringValue",
-          "value": "Attribute",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1493",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000110-ce7f-11d9-8cd5-0011113ae5d6",                // Attribute
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1494",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000111-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "type": "StringValue",
-          "value": "Category",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1495",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000111-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "1500",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "type": "StringValue",
-          "value": "Query",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1501",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000112-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000113-ce7f-11d9-8cd5-0011113ae5d6",                // Type
-           "type": "StringValue",
-          "value": "Type",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "88802",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000113-ce7f-11d9-8cd5-0011113ae5d6",                // Type
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Text
-           "uuid": "88801200",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000120-ce7f-11d9-8cd5-0011113ae5d6",                // Text
-           "type": "StringValue",
-          "value": "Text",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801201",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000120-ce7f-11d9-8cd5-0011113ae5d6",                // Text
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Number
-           "uuid": "88801210",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000121-ce7f-11d9-8cd5-0011113ae5d6",                // Number
-           "type": "StringValue",
-          "value": "Number",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801211",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000121-ce7f-11d9-8cd5-0011113ae5d6",                // Number
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Date
-           "uuid": "88801220",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000122-ce7f-11d9-8cd5-0011113ae5d6",                // Date
-           "type": "StringValue",
-          "value": "Date",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801221",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000122-ce7f-11d9-8cd5-0011113ae5d6",                // Date
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Check Mark
-           "uuid": "88801230",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000123-ce7f-11d9-8cd5-0011113ae5d6",                // Check Mark
-           "type": "StringValue",
-          "value": "Check Mark",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801231",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000123-ce7f-11d9-8cd5-0011113ae5d6",                // Check Mark
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // URL
-           "uuid": "88801240",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000124-ce7f-11d9-8cd5-0011113ae5d6",                // URL
-           "type": "StringValue",
-          "value": "URL",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801241",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000124-ce7f-11d9-8cd5-0011113ae5d6",                // URL
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Item
-           "uuid": "88801300",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000130-ce7f-11d9-8cd5-0011113ae5d6",                // Item
-           "type": "StringValue",
-          "value": "Item",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801301",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000130-ce7f-11d9-8cd5-0011113ae5d6",                // Item
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Anything
-           "uuid": "88801400",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000140-ce7f-11d9-8cd5-0011113ae5d6",                // Anything
-           "type": "StringValue",
-          "value": "Anything",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Type
-           "uuid": "88801401",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000140-ce7f-11d9-8cd5-0011113ae5d6",                // Anything
-           "type": "RelatedUuid",
-          "value": "00000113-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "1496",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000200-ce7f-11d9-8cd5-0011113ae5d6",                // Page
-           "type": "StringValue",
-          "value": "Page",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457593" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1497",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000200-ce7f-11d9-8cd5-0011113ae5d6",                // Page
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "1482",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "type": "StringValue",
-          "value": "Section",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1483",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Plugin Name
-           "uuid": "1469",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "type": "StringValue",
-          "value": "Plugin Name",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457537" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "1470",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457543" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "1498",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "type": "StringValue",
-          "value": "Section",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "1499",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000201-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "00000100-ce7f-11d9-8cd5-0011113ae5d6",                // by (Amy ex machina)
-      "timestamp": "1114819457625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Guest
-           "uuid": "1502",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Guest
-           "uuid": "1503",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "1502",                // Guest
-           "type": "StringValue",
-          "value": "Guest",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Welcome to the OpenRecord d...
-           "uuid": "00000210-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Book Lists
-           "uuid": "3000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Books
-           "uuid": "3010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all books
-           "uuid": "3011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Bugs and Features to Implement
-           "uuid": "4000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Features
-           "uuid": "4010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Bugs
-           "uuid": "4020",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All 'Closed' Bugs and Features
-           "uuid": "4030",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All 'Closed' Bugs
-           "uuid": "4040",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all features
-           "uuid": "4011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all bugs
-           "uuid": "4021",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457937" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all closed items
-           "uuid": "4031",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all closed bugs
-           "uuid": "4041",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Feature
-           "uuid": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Bug
-           "uuid": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Closed Tasks
-           "uuid": "4103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819457984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The browser's back button d...
-           "uuid": "4201",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // When editing an item in a t...
-           "uuid": "4202",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // After editing an item in a ...
-           "uuid": "4203",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // If an item has an attribute...
-           "uuid": "4204",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Store only 'clean' text in ...
-           "uuid": "4205",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Make it possible for a text...
-           "uuid": "4302",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Figure out how to declare d...
-           "uuid": "4315",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // URLs with anchor-dot-notati...
-           "uuid": "4316",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Support for reference-value...
-           "uuid": "4317",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Write unit tests using jsunit
-           "uuid": "4318",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Try to write a unit test th...
-           "uuid": "4319",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // In 'Outline' plugin, have c...
-           "uuid": "4320",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Add 'Table' plugin controls...
-           "uuid": "4321",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // In 'Outline' plugin, be abl...
-           "uuid": "4322",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // In 'Table' plugin, be able ...
-           "uuid": "4323",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to edit in outline ...
-           "uuid": "4324",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Set up a subversion server ...
-           "uuid": "4325",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Charities
-           "uuid": "5000",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458296" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // All Charities
-           "uuid": "5010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Query for all charities
-           "uuid": "5011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Charity
-           "uuid": "5101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // 2003 Expenses (in $US million)
-           "uuid": "5102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Global Fund for Women
-           "uuid": "5201",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Pathfinder International
-           "uuid": "5202",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Global Fund to Fight AI...
-           "uuid": "5203",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Have a 'Find' UI that does ...
-           "uuid": "5207",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Be able to 'delete' items (...
-           "uuid": "5208",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Make view.display() *not* r...
-           "uuid": "5209",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6018",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-           "type": "RelatedUuid",
-          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 1. Welcome!
-           "uuid": "6019",
-      "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-           "type": "StringValue",
-          "value": "1. Welcome!",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Welcome to the OpenRecord d...
-           "uuid": "6020",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-           "type": "StringValue",
-          "value": "Welcome to the OpenRecord demo!",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This web site is a demo of ...
-           "uuid": "6021",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "00000210-ce7f-11d9-8cd5-0011113ae5d6",                // Welcome to the OpenRecord d...
-           "type": "StringValue",
-          "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda. To see more of this demo site, go to the menu bar at the left side of the window and click on the menu item for page 2, 'Books'.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6022",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3000",                // Book Lists
-           "type": "RelatedUuid",
-          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 2. Books
-           "uuid": "6023",
-      "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "item": "3000",                // Book Lists
-           "type": "StringValue",
-          "value": "2. Books",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book Lists
-           "uuid": "6024",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3000",                // Book Lists
-           "type": "StringValue",
-          "value": "Book Lists",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458796" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In the lists on this page, ...
-           "uuid": "6025",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "3000",                // Book Lists
-           "type": "StringValue",
-          "value": "In the lists on this page, each book is an item in the OpenRecord repository. If you edit the page, you can change how each list of books is displayed.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Books
-           "uuid": "6026",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "3000",                // Book Lists
-           "type": "RelatedUuid",
-          "value": "3010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6028",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3010",                // All Books
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Books
-           "uuid": "6029",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3010",                // All Books
-           "type": "StringValue",
-          "value": "All Books",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Table
-           "uuid": "6030",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "3010",                // All Books
-           "type": "StringValue",
-          "value": "Table",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all books
-           "uuid": "6031",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "3010",                // All Books
-           "type": "RelatedUuid",
-          "value": "3011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This section shows a list o...
-           "uuid": "6032",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "3010",                // All Books
-           "type": "StringValue",
-          "value": "This section shows a list of all the books in the repository.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819458937" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6038",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "3011",                // Query for all books
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all books
-           "uuid": "6039",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "3011",                // Query for all books
-           "type": "StringValue",
-          "value": "Query for all books",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6078",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "RelatedUuid",
-          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 3. Bug List
-           "uuid": "6079",
-      "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "StringValue",
-          "value": "3. Bug List",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bugs and Features to Implement
-           "uuid": "6080",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "StringValue",
-          "value": "Bugs and Features to Implement",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This page is where I keep t...
-           "uuid": "6081",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "StringValue",
-          "value": "This page is where I keep track of the programming work I need to do on the OpenRecord software project. I'm keeping track of bugs that need to be fixed, as well as some of the new features that I want to implement before too long.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Features
-           "uuid": "6082",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "RelatedUuid",
-          "value": "4010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Bugs
-           "uuid": "6083",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "RelatedUuid",
-          "value": "4020",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819459984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs and Features
-           "uuid": "6084",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "RelatedUuid",
-          "value": "4030",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs
-           "uuid": "6085",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "4000",                // Bugs and Features to Implement
-           "type": "RelatedUuid",
-          "value": "4040",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6086",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4010",                // All Features
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Features
-           "uuid": "6087",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4010",                // All Features
-           "type": "StringValue",
-          "value": "All Features",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6088",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "4010",                // All Features
-           "type": "StringValue",
-          "value": "Outline",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all features
-           "uuid": "6089",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "4010",                // All Features
-           "type": "RelatedUuid",
-          "value": "4011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6090",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4020",                // All Bugs
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Bugs
-           "uuid": "6091",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4020",                // All Bugs
-           "type": "StringValue",
-          "value": "All Bugs",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6092",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "4020",                // All Bugs
-           "type": "StringValue",
-          "value": "Outline",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all bugs
-           "uuid": "6093",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "4020",                // All Bugs
-           "type": "RelatedUuid",
-          "value": "4021",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6094",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4030",                // All 'Closed' Bugs and Features
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs and Features
-           "uuid": "6095",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4030",                // All 'Closed' Bugs and Features
-           "type": "StringValue",
-          "value": "All 'Closed' Bugs and Features",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6096",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "4030",                // All 'Closed' Bugs and Features
-           "type": "StringValue",
-          "value": "Outline",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed items
-           "uuid": "6097",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "4030",                // All 'Closed' Bugs and Features
-           "type": "RelatedUuid",
-          "value": "4031",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6098",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4040",                // All 'Closed' Bugs
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All 'Closed' Bugs
-           "uuid": "6099",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4040",                // All 'Closed' Bugs
-           "type": "StringValue",
-          "value": "All 'Closed' Bugs",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "6100",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "4040",                // All 'Closed' Bugs
-           "type": "StringValue",
-          "value": "Outline",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed bugs
-           "uuid": "6101",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "4040",                // All 'Closed' Bugs
-           "type": "RelatedUuid",
-          "value": "4041",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6102",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4011",                // Query for all features
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all features
-           "uuid": "6103",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4011",                // Query for all features
-           "type": "StringValue",
-          "value": "Query for all features",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6104",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "4011",                // Query for all features
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6105",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4021",                // Query for all bugs
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all bugs
-           "uuid": "6106",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4021",                // Query for all bugs
-           "type": "StringValue",
-          "value": "Query for all bugs",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6107",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "4021",                // Query for all bugs
-           "type": "RelatedUuid",
-          "value": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6108",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4031",                // Query for all closed items
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed items
-           "uuid": "6109",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4031",                // Query for all closed items
-           "type": "StringValue",
-          "value": "Query for all closed items",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6110",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "4031",                // Query for all closed items
-           "type": "RelatedUuid",
-          "value": "4103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6111",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4041",                // Query for all closed bugs
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all closed bugs
-           "uuid": "6112",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4041",                // Query for all closed bugs
-           "type": "StringValue",
-          "value": "Query for all closed bugs",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6113",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "4041",                // Query for all closed bugs
-           "type": "RelatedUuid",
-          "value": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6114",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "4041",                // Query for all closed bugs
-           "type": "RelatedUuid",
-          "value": "4103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460656" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6115",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4102",                // Feature
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6116",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4102",                // Feature
-           "type": "StringValue",
-          "value": "Feature",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6117",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4101",                // Bug
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6118",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4101",                // Bug
-           "type": "StringValue",
-          "value": "Bug",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6119",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4103",                // Closed Tasks
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6120",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4103",                // Closed Tasks
-           "type": "StringValue",
-          "value": "Closed Tasks",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6121",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4201",                // The browser's back button d...
-           "type": "RelatedUuid",
-          "value": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The browser's back button d...
-           "uuid": "6122",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4201",                // The browser's back button d...
-           "type": "StringValue",
-          "value": "The browser's back button doesn't work after you click from page to page in the navbar.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6123",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4202",                // When editing an item in a t...
-           "type": "RelatedUuid",
-          "value": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // When editing an item in a t...
-           "uuid": "6124",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4202",                // When editing an item in a t...
-           "type": "StringValue",
-          "value": "When editing an item in a table view, everything you enter is treated as a string literal. If you enter 'Book' in the column for 'Category', that does not make your item into a Book.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6125",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4203",                // After editing an item in a ...
-           "type": "RelatedUuid",
-          "value": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // After editing an item in a ...
-           "uuid": "6126",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4203",                // After editing an item in a ...
-           "type": "StringValue",
-          "value": "After editing an item in a table view, the section queries should be re-evalutated to see if membership has changed.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6127",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4204",                // If an item has an attribute...
-           "type": "RelatedUuid",
-          "value": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460937" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6128",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4204",                // If an item has an attribute...
-           "type": "RelatedUuid",
-          "value": "4103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // If an item has an attribute...
-           "uuid": "6129",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4204",                // If an item has an attribute...
-           "type": "StringValue",
-          "value": "If an item has an attribute value with some HTML in it, like '&amp;lt;cite&amp;gt;', we incorrectly render it like '&amp; lt;cite&amp; gt;' instead of '&amp;lt;cite&amp;gt;'",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819460968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bug
-           "uuid": "6130",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4205",                // Store only 'clean' text in ...
-           "type": "RelatedUuid",
-          "value": "4101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6131",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4205",                // Store only 'clean' text in ...
-           "type": "RelatedUuid",
-          "value": "4103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Store only 'clean' text in ...
-           "uuid": "6132",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4205",                // Store only 'clean' text in ...
-           "type": "StringValue",
-          "value": "Store only 'clean' text in the repository. Do cleaning on data entry, not on data display. Clean means no stuff like &amp;lt; and &amp;gt; and double-quotes",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6133",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4302",                // Make it possible for a text...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Closed Tasks
-           "uuid": "6134",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4302",                // Make it possible for a text...
-           "type": "RelatedUuid",
-          "value": "4103",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make it possible for a text...
-           "uuid": "6135",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4302",                // Make it possible for a text...
-           "type": "StringValue",
-          "value": "Make it possible for a text string to contain a reference to an item",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6158",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4315",                // Figure out how to declare d...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461687" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Figure out how to declare d...
-           "uuid": "6159",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4315",                // Figure out how to declare d...
-           "type": "StringValue",
-          "value": "Figure out how to declare dependencies more rigorously, and then have automatic unit tests that verify the dependencies.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6160",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4316",                // URLs with anchor-dot-notati...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // URLs with anchor-dot-notati...
-           "uuid": "6161",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4316",                // URLs with anchor-dot-notati...
-           "type": "StringValue",
-          "value": "URLs with anchor-dot-notation: http://www.foo.org/item.html#573.654.765",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6162",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4317",                // Support for reference-value...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Support for reference-value...
-           "uuid": "6163",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4317",                // Support for reference-value...
-           "type": "StringValue",
-          "value": "Support for reference-values as well as string-values",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6164",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4318",                // Write unit tests using jsunit
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461812" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Write unit tests using jsunit
-           "uuid": "6165",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4318",                // Write unit tests using jsunit
-           "type": "StringValue",
-          "value": "Write unit tests using jsunit",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461828" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6166",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4319",                // Try to write a unit test th...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Try to write a unit test th...
-           "uuid": "6167",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4319",                // Try to write a unit test th...
-           "type": "StringValue",
-          "value": "Try to write a unit test that calls jslint",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6168",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4320",                // In 'Outline' plugin, have c...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In 'Outline' plugin, have c...
-           "uuid": "6169",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4320",                // In 'Outline' plugin, have c...
-           "type": "StringValue",
-          "value": "In 'Outline' plugin, have controls to optionally show more detail",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6170",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4321",                // Add 'Table' plugin controls...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Add 'Table' plugin controls...
-           "uuid": "6171",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4321",                // Add 'Table' plugin controls...
-           "type": "StringValue",
-          "value": "Add 'Table' plugin controls for row sorting, column re-arranging, column hiding, etc.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819461968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6172",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4322",                // In 'Outline' plugin, be abl...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In 'Outline' plugin, be abl...
-           "uuid": "6173",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4322",                // In 'Outline' plugin, be abl...
-           "type": "StringValue",
-          "value": "In 'Outline' plugin, be able to group by category",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462000" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6174",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4323",                // In 'Table' plugin, be able ...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // In 'Table' plugin, be able ...
-           "uuid": "6175",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4323",                // In 'Table' plugin, be able ...
-           "type": "StringValue",
-          "value": "In 'Table' plugin, be able to group by category",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6176",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4324",                // Be able to edit in outline ...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to edit in outline ...
-           "uuid": "6177",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4324",                // Be able to edit in outline ...
-           "type": "StringValue",
-          "value": "Be able to edit in outline mode",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6178",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4325",                // Set up a subversion server ...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462125" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Set up a subversion server ...
-           "uuid": "6179",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4325",                // Set up a subversion server ...
-           "type": "StringValue",
-          "value": "Set up a subversion server and have the OpenRecord code publicly available",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "6180",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5000",                // Charities
-           "type": "RelatedUuid",
-          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 4. Charities
-           "uuid": "6181",
-      "attribute": "00000102-ce7f-11d9-8cd5-0011113ae5d6",                // Short Name
-           "item": "5000",                // Charities
-           "type": "StringValue",
-          "value": "4. Charities",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charities
-           "uuid": "6182",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5000",                // Charities
-           "type": "StringValue",
-          "value": "Charities",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Charities
-           "uuid": "6183",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "5000",                // Charities
-           "type": "RelatedUuid",
-          "value": "5010",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "6184",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5010",                // All Charities
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Charities
-           "uuid": "6185",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5010",                // All Charities
-           "type": "StringValue",
-          "value": "All Charities",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Bar Chart
-           "uuid": "6186",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "5010",                // All Charities
-           "type": "StringValue",
-          "value": "Bar Chart",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462281" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all charities
-           "uuid": "6187",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "5010",                // All Charities
-           "type": "RelatedUuid",
-          "value": "5011",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462312" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "6188",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5011",                // Query for all charities
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query for all charities
-           "uuid": "6189",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5011",                // Query for all charities
-           "type": "StringValue",
-          "value": "Query for all charities",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6190",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "5011",                // Query for all charities
-           "type": "RelatedUuid",
-          "value": "5101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "6191",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5101",                // Charity
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462406" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6192",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5101",                // Charity
-           "type": "StringValue",
-          "value": "Charity",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462421" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "6193",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5102",                // 2003 Expenses (in $US million)
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 2003 Expenses (in $US million)
-           "uuid": "6194",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5102",                // 2003 Expenses (in $US million)
-           "type": "StringValue",
-          "value": "2003 Expenses (in $US million)",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462453" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6195",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5201",                // The Global Fund for Women
-           "type": "RelatedUuid",
-          "value": "5101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Global Fund for Women
-           "uuid": "6196",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5201",                // The Global Fund for Women
-           "type": "StringValue",
-          "value": "The Global Fund for Women",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 8.2
-           "uuid": "6197",
-      "attribute": "5102",                // 2003 Expenses (in $US million)
-           "item": "5201",                // The Global Fund for Women
-           "type": "NumberValue",
-          "value": 8.2 ,
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6198",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5202",                // Pathfinder International
-           "type": "RelatedUuid",
-          "value": "5101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Pathfinder International
-           "uuid": "6199",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5202",                // Pathfinder International
-           "type": "StringValue",
-          "value": "Pathfinder International",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 44.9
-           "uuid": "6200",
-      "attribute": "5102",                // 2003 Expenses (in $US million)
-           "item": "5202",                // Pathfinder International
-           "type": "NumberValue",
-          "value": 44.9 ,
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Charity
-           "uuid": "6201",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5203",                // The Global Fund to Fight AI...
-           "type": "RelatedUuid",
-          "value": "5101",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Global Fund to Fight AI...
-           "uuid": "6202",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5203",                // The Global Fund to Fight AI...
-           "type": "StringValue",
-          "value": "The Global Fund to Fight AIDS, TB, and Malaria",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462625" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // 64.7
-           "uuid": "6203",
-      "attribute": "5102",                // 2003 Expenses (in $US million)
-           "item": "5203",                // The Global Fund to Fight AI...
-           "type": "NumberValue",
-          "value": 64.7 ,
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462640" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6213",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5207",                // Have a 'Find' UI that does ...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Have a 'Find' UI that does ...
-           "uuid": "6214",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5207",                // Have a 'Find' UI that does ...
-           "type": "StringValue",
-          "value": "Have a 'Find' UI that does keystroke-by-keystroke filtering",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462875" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6215",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5208",                // Be able to 'delete' items (...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Be able to 'delete' items (...
-           "uuid": "6216",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5208",                // Be able to 'delete' items (...
-           "type": "StringValue",
-          "value": "Be able to 'delete' items (or mark them as 'dead' or 'defunct' or something)",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Feature
-           "uuid": "6217",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "5209",                // Make view.display() *not* r...
-           "type": "RelatedUuid",
-          "value": "4102",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Make view.display() *not* r...
-           "uuid": "6218",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "5209",                // Make view.display() *not* r...
-           "type": "StringValue",
-          "value": "Make view.display() *not* re-create all the HTML every time",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1114819462968" }
-  },
-  // -----------------------------------------------------------------------
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Brian Douglas Skinner
-           "uuid": "6239",
-      "userstamp": "6239",                // by (Brian Douglas Skinner)
-      "timestamp": "1117056132500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Brian Douglas Skinner
-           "uuid": "6240",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6239",                // Brian Douglas Skinner
-           "type": "StringValue",
-          "value": "Brian Douglas Skinner",
-      "userstamp": "6239",                // by (Brian Douglas Skinner)
-      "timestamp": "1117056132500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Chih-Chao Lam
-           "uuid": "6241",
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117056685390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Chih-Chao Lam
-           "uuid": "6242",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6241",                // Chih-Chao Lam
-           "type": "StringValue",
-          "value": "Chih-Chao Lam",
-      "userstamp": "6241",                // by (Chih-Chao Lam)
-      "timestamp": "1117056685390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Mignon Belongie
-           "uuid": "6243",
-      "userstamp": "6243",                // by (Mignon Belongie)
-      "timestamp": "1117056699906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Mignon Belongie
-           "uuid": "6244",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "6243",                // Mignon Belongie
-           "type": "StringValue",
-          "value": "Mignon Belongie",
-      "userstamp": "6243",                // by (Mignon Belongie)
-      "timestamp": "1117056699906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Page
-           "uuid": "8cbddbd1-368e-45d6-88ec-39690e9331a0",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Page
-           "uuid": "54f4bd36-a6d7-4c00-8e3a-891183a307e9",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-           "type": "StringValue",
-          "value": "New Page",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "462800a1-83d5-4fb3-853b-1bc9d5c83150",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-           "type": "RelatedUuid",
-          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This is a new page.
-           "uuid": "7ffbc5c1-e179-4f49-808c-8562c502529b",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-           "type": "StringValue",
-          "value": "This is a new page.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Section
-           "uuid": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Section
-           "uuid": "a642b640-8897-4711-8bf1-60ce3627649d",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-           "type": "StringValue",
-          "value": "New Section",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "bdb9dacf-66c8-4575-8cc5-5b84423c9dc0",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Section
-           "uuid": "fba77cc2-0ee8-4d27-8970-d80a100120c2",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // New Page
-           "type": "RelatedUuid",
-          "value": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Table
-           "uuid": "41399161-e055-4881-82ca-96a985b4d3c1",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-           "type": "StringValue",
-          "value": "Table",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Query
-           "uuid": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Query
-           "uuid": "2a11573b-2c42-448b-8a52-1c5e80497f98",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-           "type": "StringValue",
-          "value": "New Query",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "ef65a730-3850-4d41-854e-c4b01fa87914",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Query
-           "uuid": "c9ea5105-e1c3-4a9c-83a7-aa66e9d40599",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // New Section
-           "type": "RelatedUuid",
-          "value": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735225265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735265703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Book
-           "uuid": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735265765" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "56985ffa-10d4-45b3-8e0d-130b1436d04e",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",                // Book
-           "type": "StringValue",
-          "value": "Book",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735275890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "075574a1-6e33-4df1-86b8-b4a63a2427ed",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",                // Book
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735275890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Publisher
-           "uuid": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735275906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "8600bd8f-ca00-4126-841a-2484c069f6fb",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "ea435816-c5c0-482b-8850-5651fbfaad12",                // Publisher
-           "type": "StringValue",
-          "value": "Publisher",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735285140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "b9846b93-fbd8-402f-8f23-933a3d2bb3a2",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "ea435816-c5c0-482b-8850-5651fbfaad12",                // Publisher
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735285140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Category
-           "uuid": "4eed673e-c224-44db-8a2b-9e72998c6d00",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "4952a8fd-5bb8-44f9-8c11-12801a41b189",                // Person
-           "type": "RelatedUuid",
-          "value": "00000111-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735288437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Person
-           "uuid": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735285140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "7043b8ad-3bdf-4a0a-867f-d4523ebc77a1",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "4952a8fd-5bb8-44f9-8c11-12801a41b189",                // Person
-           "type": "StringValue",
-          "value": "Person",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735288437" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "f9afff15-663e-4b45-8d62-bf2297ec0fe7",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-   "previousEntry": "5e551cd6-7cae-4e7b-8a15-ba71f803805e",
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735336265" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Published by
-           "uuid": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735412984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Published by
-           "uuid": "9c5d6ea2-80fa-4e7a-81e5-342332c1c15a",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "type": "StringValue",
-          "value": "Published by",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735433734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "8dc501b8-0150-4fe8-8a86-b275955bc868",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735433734" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "ba275354-35bd-4b33-876f-00d738cad5ea",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735436750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Attribute
-           "uuid": "f1301a57-c78c-4f51-88ae-76d0d927d932",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "type": "RelatedUuid",
-          "value": "00000110-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735443890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Written by
-           "uuid": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735433750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Written by
-           "uuid": "4ad6a276-6dda-4bc6-8be0-ee9cf7524852",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "type": "StringValue",
-          "value": "Written by",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735443890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "723176f0-9a10-4a69-8b06-4150f8cf575f",
-      "attribute": "0000010a-ce7f-11d9-8cd5-0011113ae5d6",                // Expected Type
-           "item": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735449609" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "a11a8ac9-08d4-460b-8cfe-23ea90b04f7e",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-   "previousEntry": "f9afff15-663e-4b45-8d62-bf2297ec0fe7",
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735470703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // J.R.R. Tolkien
-           "uuid": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735470750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "48905153-87af-4aa7-860e-19c6aae90286",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",                // J.R.R. Tolkien
-           "type": "StringValue",
-          "value": "J.R.R. Tolkien",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735489703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "12b8ea06-5c10-4b72-807c-55bedb008a1d",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",                // J.R.R. Tolkien
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735489703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "a88ec17e-1371-4c51-8d9f-ec2498c517da",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "de981d0d-16fd-430a-82d1-4d60d87e64e3",                // David Brin
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735503187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // David Brin
-           "uuid": "de981d0d-16fd-430a-82d1-4d60d87e64e3",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735489703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Brin
-           "uuid": "63416b27-606d-49b7-8dac-761b10022911",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "de981d0d-16fd-430a-82d1-4d60d87e64e3",                // David Brin
-           "type": "StringValue",
-          "value": "David Brin",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735503171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "aee1b28e-103e-4693-89a4-294ad2807b04",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",                // David Gourley
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735662250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // David Gourley
-           "uuid": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735503187" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Gourley
-           "uuid": "128051d3-a821-4cea-864d-280a70b0fb46",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",                // David Gourley
-           "type": "StringValue",
-          "value": "David Gourley",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735662250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Brian Totty
-           "uuid": "d678b21e-1434-459e-83f0-c7c8c6213d36",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735662250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Brian Totty
-           "uuid": "3dd26484-4b9c-4b28-8eca-ace451138e0c",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "d678b21e-1434-459e-83f0-c7c8c6213d36",                // Brian Totty
-           "type": "StringValue",
-          "value": "Brian Totty",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735665218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "d91825da-f16d-4162-8c34-b59766506957",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "d678b21e-1434-459e-83f0-c7c8c6213d36",                // Brian Totty
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735665218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "b5a28733-cab5-47c0-81bd-34c8f6691e98",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",                // James Surowiecki
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735676015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // James Surowiecki
-           "uuid": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735665218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // James Surowiecki
-           "uuid": "946be1e1-7ca0-45d7-8926-9071c8687abf",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",                // James Surowiecki
-           "type": "StringValue",
-          "value": "James Surowiecki",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735676015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Patricia McDaniel
-           "uuid": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735676015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Patricia McDaniel
-           "uuid": "abe384b4-5db4-4317-8de9-637cf301917a",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",                // Patricia McDaniel
-           "type": "StringValue",
-          "value": "Patricia McDaniel",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735684140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "75751349-c78c-41bc-8fc2-6d1c7d1cbd38",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",                // Patricia McDaniel
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735684140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Gerald Markowitz
-           "uuid": "1d9030cd-3659-42a1-8627-196644d6deb1",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735684156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Gerald Markowitz
-           "uuid": "b7bab2ca-aac7-46d2-8710-419ac4e69a6e",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "1d9030cd-3659-42a1-8627-196644d6deb1",                // Gerald Markowitz
-           "type": "StringValue",
-          "value": "Gerald Markowitz",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735693234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "3c5836d5-4fc1-4ccf-8eea-faaf0184c084",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "1d9030cd-3659-42a1-8627-196644d6deb1",                // Gerald Markowitz
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735693234" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // David Rosner
-           "uuid": "b5620dda-b123-409c-8f92-c8fcf318d4e5",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735693250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Rosner
-           "uuid": "ec8039f7-cdd3-4c23-8bad-e6ada9be27f7",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "b5620dda-b123-409c-8f92-c8fcf318d4e5",                // David Rosner
-           "type": "StringValue",
-          "value": "David Rosner",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735700140" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "5f957996-8db3-47ff-829d-96df96237e65",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "b5620dda-b123-409c-8f92-c8fcf318d4e5",                // David Rosner
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735700156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // David Flanagan
-           "uuid": "11106568-0dfe-4bb8-8574-8a30b2874b25",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735700156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Flanagan
-           "uuid": "61939bd6-2903-4f01-89a5-538a1cd2769f",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "11106568-0dfe-4bb8-8574-8a30b2874b25",                // David Flanagan
-           "type": "StringValue",
-          "value": "David Flanagan",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735705218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "80c6fdb1-9852-49e6-825a-ed151113b7ac",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "11106568-0dfe-4bb8-8574-8a30b2874b25",                // David Flanagan
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735705218" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "5cceee12-d202-46ac-8724-0474ba4860ae",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-   "previousEntry": "a11a8ac9-08d4-460b-8cfe-23ea90b04f7e",
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735713015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "639d46b7-8479-4cb1-89c1-b5b338de5d86",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",                // O'Reilly
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735718921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // O'Reilly
-           "uuid": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735713062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // O'Reilly
-           "uuid": "c23a5be3-924c-446f-8bcd-40eb46e1af83",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",                // O'Reilly
-           "type": "StringValue",
-          "value": "O'Reilly",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735718906" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "3543b8aa-33e1-4974-8d6b-ba1041c99548",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",                // Perseus Publishing
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735728843" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Perseus Publishing
-           "uuid": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735718921" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Perseus Publishing
-           "uuid": "7812b147-bf2f-4e4a-8db0-05d173e79df0",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",                // Perseus Publishing
-           "type": "StringValue",
-          "value": "Perseus Publishing",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735728843" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // HarperCollins
-           "uuid": "32b872e6-5f78-484e-8bd9-6e12d48fd266",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735728859" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HarperCollins
-           "uuid": "d0911998-ef56-405e-81e8-56176f14deaa",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "32b872e6-5f78-484e-8bd9-6e12d48fd266",                // HarperCollins
-           "type": "StringValue",
-          "value": "HarperCollins",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735733328" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "f262e255-5f33-4b02-8981-e0293a870042",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "32b872e6-5f78-484e-8bd9-6e12d48fd266",                // HarperCollins
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735733343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Doubleday
-           "uuid": "fef1fb5a-d03d-490b-8396-f599d68652aa",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735733343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Doubleday
-           "uuid": "597e97a5-7c35-4135-83e1-51fba8bd6c03",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "fef1fb5a-d03d-490b-8396-f599d68652aa",                // Doubleday
-           "type": "StringValue",
-          "value": "Doubleday",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735736468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "2df70b86-1b15-4178-8eca-e65ccab69a13",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "fef1fb5a-d03d-490b-8396-f599d68652aa",                // Doubleday
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735736468" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // NYU Press
-           "uuid": "81a0fa22-0432-4f6e-822d-4e11caefa730",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735736484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // NYU Press
-           "uuid": "5a0b9077-4df7-4909-85db-5328546e3456",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "81a0fa22-0432-4f6e-822d-4e11caefa730",                // NYU Press
-           "type": "StringValue",
-          "value": "NYU Press",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735740015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "745cd21b-b190-4521-8d26-82eb3656a1ae",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "81a0fa22-0432-4f6e-822d-4e11caefa730",                // NYU Press
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735740015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // University of California
-           "uuid": "774bf718-823a-4284-86d2-d24a334786af",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735740015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // University of California
-           "uuid": "c25ad76b-9a12-4b7b-852a-531b767bba76",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "774bf718-823a-4284-86d2-d24a334786af",                // University of California
-           "type": "StringValue",
-          "value": "University of California",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735752015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "fd2066e5-b876-4241-8c22-f7208af4ec85",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "774bf718-823a-4284-86d2-d24a334786af",                // University of California
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735752031" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "cd9b4dfb-6fec-4f0f-815b-e0a2ae2ac7c3",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-   "previousEntry": "5cceee12-d202-46ac-8724-0474ba4860ae",
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735771046" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // HTTP: The Definitive Guide
-           "uuid": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735771093" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HTTP: The Definitive Guide
-           "uuid": "f19bf2d2-2a53-41ba-84e7-c9d5b82d908e",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-           "type": "StringValue",
-          "value": "HTTP: The Definitive Guide",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735778156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "d9360e8b-d892-49d4-8b2a-a4651ac92eb5",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735778156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "5bd72c4e-90b9-487e-8c65-77dae04c9a2b",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735780703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Hobbit
-           "uuid": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735778156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Hobbit
-           "uuid": "43c67130-8b68-4d84-8883-83655c6b3c9f",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-           "type": "StringValue",
-          "value": "The Hobbit",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735780703" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Wisdom of Crowds
-           "uuid": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735780718" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Wisdom of Crowds
-           "uuid": "e9bf97a2-302a-498c-853e-505b66b8ca37",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-           "type": "StringValue",
-          "value": "The Wisdom of Crowds",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735788562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "a756ff74-be71-4870-8e30-09658e4d70f6",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735788578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Transparent Society
-           "uuid": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735788578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Transparent Society
-           "uuid": "66a95e67-5721-4711-83c0-2cfffffcfcd9",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-           "type": "StringValue",
-          "value": "The Transparent Society",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735798062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "38ca0209-7651-41ba-8f43-12b20273c614",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735798062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Brin
-           "uuid": "38ca0210-7651-41ba-8f43-12b20273c614",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-           "type": "RelatedUuid",
-          "value": "de981d0d-16fd-430a-82d1-4d60d87e64e3",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735798062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Perseus Publishing
-           "uuid": "38ca0211-7651-41ba-8f43-12b20273c614",
-      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "item": "b42a8eed-c7c9-4b21-84cb-70c20e29e64a",                // The Transparent Society
-           "type": "RelatedUuid",
-          "value": "0f4132ec-fabd-4857-8c26-1f842d3d94b3",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117735798062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "ca3d4029-6e05-4079-8012-1dbe4dac5b94",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-           "type": "RelatedUuid",
-          "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736236500" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // HarperCollins
-           "uuid": "1b5dc73a-34fb-4909-8f83-b7cadfa58d07",
-      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-           "type": "RelatedUuid",
-          "value": "32b872e6-5f78-484e-8bd9-6e12d48fd266",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736261015" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Gourley
-           "uuid": "0a4d47fa-ffe2-409a-8590-50d527b159cd",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-           "type": "RelatedUuid",
-          "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736305546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Gourley
-           "uuid": "21e55207-dc7d-4dd5-86fc-da5ca9bbb20e",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-   "previousEntry": "0a4d47fa-ffe2-409a-8590-50d527b159cd",
-           "type": "StringValue",
-          "value": "David Gourley",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736311578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "58dc3820-a73a-4d1d-8f45-b6954ec5d16d",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "e2b50553-bd0e-45a6-8fca-9b35e603e52c",                // The Hobbit
-   "previousEntry": "ca3d4029-6e05-4079-8012-1dbe4dac5b94",
-           "type": "StringValue",
-          "value": "J.R.R. Tolkien",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736313546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Brian Totty
-           "uuid": "5610ec06-b4e9-4eeb-867b-dad8b0073636",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-           "type": "StringValue",
-          "value": "Brian Totty",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736335578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // O'Reilly
-           "uuid": "bac5ec21-422a-4a5f-82f2-0518ab052b9e",
-      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-           "type": "RelatedUuid",
-          "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736353671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Gourley
-           "uuid": "fb9d3ea1-fa9f-4bf4-8aab-ff7a50e2e062",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "bc9d5cce-99f7-42ad-85dc-36491cac46ba",                // HTTP: The Definitive Guide
-   "previousEntry": "21e55207-dc7d-4dd5-86fc-da5ca9bbb20e",
-           "type": "RelatedUuid",
-          "value": "75987591-ed47-4f4f-8ddb-b96c6d8637e6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736369546" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // James Surowiecki
-           "uuid": "d9677f00-4c56-46f9-84c1-f5df896c1058",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-           "type": "RelatedUuid",
-          "value": "9f47f559-d9b7-4b68-8dae-96a26cf2f232",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736379671" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Doubleday
-           "uuid": "db17fade-a60b-463d-8f29-d9de909c3d35",
-      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "item": "04215e09-c5d1-4af1-8167-2bb10c06e6e4",                // The Wisdom of Crowds
-           "type": "RelatedUuid",
-          "value": "fef1fb5a-d03d-490b-8396-f599d68652aa",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736389781" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "d5326b0b-1228-4232-8a6e-d8be50b1af97",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736411390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Shrinking Violets and Caspa...
-           "uuid": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736231890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Shrinking Violets and Caspa...
-           "uuid": "426fdd09-3112-4be6-8998-d77fcba475b9",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-           "type": "StringValue",
-          "value": "Shrinking Violets and Caspar Milquetoasts",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736411375" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Patricia McDaniel
-           "uuid": "2fd80172-7c5c-45ba-8bc0-d6d212b4816c",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-           "type": "RelatedUuid",
-          "value": "2a0a9a32-210a-429f-868d-3b015d3ae9ac",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736413562" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // NYU Press
-           "uuid": "ccc919f4-ba3a-4524-80ce-eaeda75880b2",
-      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "item": "f1001a06-8ffa-4366-8f6e-e9c5fcc2b70c",                // Shrinking Violets and Caspa...
-           "type": "RelatedUuid",
-          "value": "81a0fa22-0432-4f6e-822d-4e11caefa730",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736417593" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "bd1df12b-d9bf-4e57-8853-ae955baf296e",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736429578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // Deceit and Denial
-           "uuid": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736411390" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Deceit and Denial
-           "uuid": "9608e7de-7ec0-49ae-8425-aac277cef1ac",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-           "type": "StringValue",
-          "value": "Deceit and Denial",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736429578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Gerald Markowitz
-           "uuid": "cb5ea4e5-9d95-4a19-8959-a6fa702178e5",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-           "type": "RelatedUuid",
-          "value": "1d9030cd-3659-42a1-8627-196644d6deb1",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736431937" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Gerald Markowitz
-           "uuid": "14f04804-8252-4ff7-81d0-7de53b90db8d",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-   "previousEntry": "cb5ea4e5-9d95-4a19-8959-a6fa702178e5",
-           "type": "StringValue",
-          "value": "Gerald Markowitz",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736438968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // D
-           "uuid": "cb57a1ef-d238-4400-8ab0-7714d39cdc62",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-           "type": "StringValue",
-          "value": "D",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736444109" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Rosner
-           "uuid": "7675c038-d911-4e6e-80aa-280bdb3833d1",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-   "previousEntry": "cb57a1ef-d238-4400-8ab0-7714d39cdc62",
-           "type": "StringValue",
-          "value": "David Rosner",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736451250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // University of California
-           "uuid": "dd9e8536-b688-433f-806b-b6e5e5786f2f",
-      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "item": "7cf451e5-be71-4c0c-8ede-1c03e2f5af9e",                // Deceit and Denial
-           "type": "RelatedUuid",
-          "value": "774bf718-823a-4284-86d2-d24a334786af",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736460250" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "113eaca6-0936-476b-81c8-8275583d0ad6",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736474109" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // JavaScript: The Definitive ...
-           "uuid": "0378913e-e5c9-48c0-835a-b839edee467f",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736429578" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // JavaScript: The Definitive ...
-           "uuid": "6835a402-d069-4565-88c1-1e6f577f0744",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-           "type": "StringValue",
-          "value": "JavaScript: The Definitive Guide",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736474109" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // David Flanagan
-           "uuid": "09a9c592-7e0b-4bc1-8397-0a1596915793",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-           "type": "RelatedUuid",
-          "value": "11106568-0dfe-4bb8-8574-8a30b2874b25",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736475484" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // O'Reilly
-           "uuid": "a6b5975a-7298-4fab-89cd-1c7455d47272",
-      "attribute": "ecd53ca6-5989-40e2-8915-db04cad4a0a2",                // Published by
-           "item": "0378913e-e5c9-48c0-835a-b839edee467f",                // JavaScript: The Definitive ...
-           "type": "RelatedUuid",
-          "value": "52cf8bc2-fd62-4d07-8d39-0008cb9c3a9c",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736479968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // The Two Towers
-           "uuid": "933227ee-bda7-4924-81ac-94c018d35503",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736474109" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // The Two Towers
-           "uuid": "41ec5e1b-5c19-45c2-8028-22037b49dbbb",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
-           "type": "StringValue",
-          "value": "The Two Towers",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736492531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "7788e6bc-2c93-40cc-885c-312a17551a11",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736492531" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // J.R.R. Tolkien
-           "uuid": "99ee41ff-85d7-4744-827f-cc0e81017df6",
-      "attribute": "269e0b2a-e5bc-405c-83ac-58e8a7eb58c8",                // Written by
-           "item": "933227ee-bda7-4924-81ac-94c018d35503",                // The Two Towers
-           "type": "RelatedUuid",
-          "value": "fd9a510b-bd3b-4dbb-8770-99d04ffe5c0d",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736496203" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Book
-           "uuid": "0515ceef-33b9-477b-8ebf-66a3d0baf174",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "3011",                // Query for all books
-           "type": "RelatedUuid",
-          "value": "0d4f1de8-4d5c-49db-8a9e-e8462c95ae6e",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736561171" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // People
-           "uuid": "42c6eae2-97f7-4a40-869d-f3a1b994b8ce",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // People
-   "previousEntry": "54f4bd36-a6d7-4c00-8e3a-891183a307e9",
-           "type": "StringValue",
-          "value": "People",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736688156" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Person
-           "uuid": "ff73a3d6-7155-44cb-89e9-33a89404f203",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "d634981c-c10d-4526-8b8f-fcc8bd3077d3",                // New Query
-   "previousEntry": "cd9b4dfb-6fec-4f0f-815b-e0a2ae2ac7c3",
-           "type": "RelatedUuid",
-          "value": "4952a8fd-5bb8-44f9-8c11-12801a41b189",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736701343" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All People
-           "uuid": "a7e79a1c-c971-4e25-8479-e0394ea63dd3",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // All People
-   "previousEntry": "a642b640-8897-4711-8bf1-60ce3627649d",
-           "type": "StringValue",
-          "value": "All People",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736711968" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "03af3557-c06e-4c43-86e5-a5b69d370cf7",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "cbc5f6c8-8115-4bfa-88d1-d9947fa71fda",                // All People
-   "previousEntry": "41399161-e055-4881-82ca-96a985b4d3c1",
-           "type": "StringValue",
-          "value": "Outline",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736715750" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This is a page for keeping ...
-           "uuid": "af0ade8e-5ece-404e-84de-7a004ddf1d35",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "8cbddbd1-368e-45d6-88ec-39690e9331a0",                // People
-   "previousEntry": "7ffbc5c1-e179-4f49-808c-8562c502529b",
-           "type": "StringValue",
-          "value": "This is a page for keeping track of people.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736738984" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Page
-           "uuid": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Page
-           "uuid": "ac20c09b-027c-4cf7-8d1d-c571b577d026",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-           "type": "StringValue",
-          "value": "New Page",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Page
-           "uuid": "bb94fce5-d490-45c8-8ae0-49ebe7aab3fc",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-           "type": "RelatedUuid",
-          "value": "00000200-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This is a new page.
-           "uuid": "a831f70d-fd95-468a-8a0a-31a5937cbcd3",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-           "type": "StringValue",
-          "value": "This is a new page.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Section
-           "uuid": "38e3da07-957f-40a2-894d-f3636aed7c23",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Section
-           "uuid": "5737311c-2d52-4354-8a85-6a404e947fd9",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-           "type": "StringValue",
-          "value": "New Section",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Section
-           "uuid": "ee6af493-b200-4d26-8b88-2b641cd6fa80",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-           "type": "RelatedUuid",
-          "value": "00000201-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Section
-           "uuid": "3107a69d-8e86-4afe-8ec7-e82c95f9fcae",
-      "attribute": "00000300-ce7f-11d9-8cd5-0011113ae5d6",                // Section
-           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // New Page
-           "type": "RelatedUuid",
-          "value": "38e3da07-957f-40a2-894d-f3636aed7c23",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Table
-           "uuid": "0a8d7e91-ca14-49a4-8064-e5eabe133b78",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-           "type": "StringValue",
-          "value": "Table",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Item": {                             // New Query
-           "uuid": "e30ba726-d976-46fb-88ac-7f5e841a6b43",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Query
-           "uuid": "02b28988-dd13-4ffb-8933-bb6c5b9d2822",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
-           "type": "StringValue",
-          "value": "New Query",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Query
-           "uuid": "d3b32b1d-0f22-439e-85ff-f069e4d76bff",
-      "attribute": "00000105-ce7f-11d9-8cd5-0011113ae5d6",                // Category
-           "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
-           "type": "RelatedUuid",
-          "value": "00000112-ce7f-11d9-8cd5-0011113ae5d6",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // New Query
-           "uuid": "f8fd9872-3806-42c8-886f-78cdb53299ad",
-      "attribute": "00000106-ce7f-11d9-8cd5-0011113ae5d6",                // Query
-           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-           "type": "RelatedUuid",
-          "value": "e30ba726-d976-46fb-88ac-7f5e841a6b43",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736745062" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publisher
-           "uuid": "414b2c92-ded7-4071-8ff3-af2468ec665b",
-      "attribute": "00000107-ce7f-11d9-8cd5-0011113ae5d6",                // Matching Value
-           "item": "e30ba726-d976-46fb-88ac-7f5e841a6b43",                // New Query
-           "type": "RelatedUuid",
-          "value": "ea435816-c5c0-482b-8850-5651fbfaad12",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736753953" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Outline
-           "uuid": "5e715995-f16d-4021-87b6-43f674fa7380",
-      "attribute": "00000400-ce7f-11d9-8cd5-0011113ae5d6",                // Plugin Name
-           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // New Section
-   "previousEntry": "0a8d7e91-ca14-49a4-8064-e5eabe133b78",
-           "type": "StringValue",
-          "value": "Outline",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736756890" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // Publishers
-           "uuid": "f37b2702-5e6a-4bc7-84b6-8d89e0b75e9a",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // Publishers
-   "previousEntry": "ac20c09b-027c-4cf7-8d1d-c571b577d026",
-           "type": "StringValue",
-          "value": "Publishers",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736763359" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // This is a page for keeping ...
-           "uuid": "10c45258-cdb0-44ac-8605-002ce083c43e",
-      "attribute": "00000103-ce7f-11d9-8cd5-0011113ae5d6",                // Summary
-           "item": "2faa7b9a-7a1d-47fb-8bb5-4e702c6163db",                // Publishers
-   "previousEntry": "a831f70d-fd95-468a-8a0a-31a5937cbcd3",
-           "type": "StringValue",
-          "value": "This is a page for keeping track of publishers.",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736780078" }
-  },
-  // -----------------------------------------------------------------------
-  { "Entry": {                             // All Publishers
-           "uuid": "e3bf3e14-e8f4-43e2-866c-121c5ab70c0b",
-      "attribute": "00000101-ce7f-11d9-8cd5-0011113ae5d6",                // Name
-           "item": "38e3da07-957f-40a2-894d-f3636aed7c23",                // All Publishers
-   "previousEntry": "5737311c-2d52-4354-8a85-6a404e947fd9",
-           "type": "StringValue",
-          "value": "All Publishers",
-      "userstamp": "1502",                // by (Guest)
-      "timestamp": "1117736787093" }
-  }
\ No newline at end of file

Modified: trunk/source/repositories/demo_page/2005_may_user_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_user_list.json	2005-06-15 19:30:01 UTC (rev 143)
+++ trunk/source/repositories/demo_page/2005_may_user_list.json	2005-06-15 22:22:04 UTC (rev 144)
@@ -1,8 +1,9 @@
 // User list, in JSON format
 { "format": "2005_MAY_USER_LIST", 
   "users": [
-    { "uuid": "1502", "password": "084e0343a0486ff05530df6c705c8bb4" },
-    { "uuid": "6239", "password": "92eb5ffee6ae2fec3ad71c777531578f" },
-    { "uuid": "6241", "password": null },
-    { "uuid": "6243", "password": null } ]
+    { "uuid": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae", "password": "92eb5ffee6ae2fec3ad71c777531578f" },
+    { "uuid": "90e02170-dde4-11d9-9c71-e24829d2f59b", "password": null },
+    { "uuid": "97d040f0-dde4-11d9-9c71-c103016080e1", "password": null },
+    { "uuid": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f", "password": null },
+    { "uuid": "a00bf340-dde4-11d9-9c71-dae11c269bc7", "password": null } ]
 }



From chaolam at sheep.berlios.de  Thu Jun 16 09:15:31 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 16 Jun 2005 09:15:31 +0200
Subject: [openrecord-svn] r145 - in trunk/source: . model
Message-ID: <200506160715.j5G7FVC4012798@sheep.berlios.de>

Author: chaolam
Date: 2005-06-16 09:15:21 +0200 (Thu, 16 Jun 2005)
New Revision: 145

Modified:
   trunk/source/MultiEntriesView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
1) Added UI for editing new-style queries, but still has bug mentioned in Dev mail
2) Added several TextView capabilities e.g. ability to appear EditField all the time, better auto-sizing, and to be able to manually set "ExpectedType" instead of relying on attribute's ExpectedType

Modified: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-15 22:22:04 UTC (rev 144)
+++ trunk/source/MultiEntriesView.js	2005-06-16 07:15:21 UTC (rev 145)
@@ -141,19 +141,8 @@
 };
 
 /**
- * Returns width for TextView edit field to set
- * HACK: See http://lists.berlios.de/pipermail/openrecord-dev/2005-June/000120.html
  *
- * @scope    public instance method
  */
-
-MultiEntriesView.prototype.getTextViewWidth = function() {
-  return this._myHTMLElement.offsetWidth;
-};
-
-/**
- *
- */
 MultiEntriesView.prototype._handleClick = function(inEvent, inTextView) {
   if (this._clickFunction && this._clickFunction(inEvent, inTextView)) {
     return true;

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-15 22:22:04 UTC (rev 144)
+++ trunk/source/SectionView.js	2005-06-16 07:15:21 UTC (rev 145)
@@ -240,14 +240,12 @@
     optionElement.innerHTML = pluginName;
   }
   
-  var textOf = document.createTextNode(" of ");
-  controlArea.appendChild(textOf);
+  View.createAndAppendTextNode(controlArea," of items whose ");
 
   this._queryEditSpan = View.createAndAppendElement(controlArea, "span");
   // this._refreshQueryEditSpan();
 
-  var textItems = document.createTextNode(" items.");
-  controlArea.appendChild(textItems);
+  View.createAndAppendTextNode(controlArea,".");
 
   // create a div element for the plugin class to use
   this._myPluginDiv = View.createAndAppendElement(outerDiv, "div");
@@ -265,27 +263,49 @@
 SectionView.prototype._refreshQueryEditSpan = function () {
   this._queryEditSpan.innerHTML = '';
   
+  var myQuery = this.getQuery();
+  var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
+  var listOfMatchingAttrs = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+  var matchingAttribute;
+  if (listOfMatchingAttrs.length === 0) {
+    // by default matching attribute is category
+    matchingAttribute = this.getWorld().getAttributeCalledCategory();
+  }
+  else {
+    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    matchingAttribute = listOfMatchingAttrs[0].getValue();
+  }
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
-  var listOfMatchingEntries = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingValue);
-  var isCategoryMatchingQuery = (listOfMatchingEntries && (listOfMatchingEntries.length > 0));
-  var selectedCategoryName = isCategoryMatchingQuery ? listOfMatchingEntries[0].getValue().getDisplayName() : "no category selected";
-
-  var isEmptyQuery = false;
-  var listener = this; 
-  var querySelectElement = View.createAndAppendElement(this._queryEditSpan, "select");
-  var listOfCategories = this.getWorld().getCategories();
-  var optionElement = View.createAndAppendElement(querySelectElement, "option");
-  optionElement.setAttribute("value", null);
-  Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
-  optionElement.innerHTML = "(none)";
-  for (var key in listOfCategories) {
-    var category = listOfCategories[key];
-    optionElement = View.createAndAppendElement(querySelectElement, "option");
-    optionElement.selected = (selectedCategoryName == category.getDisplayName());
-    optionElement.setAttribute("value", category._getUuid());
-    Util.addEventListener(optionElement, "click", function(event) {listener.clickOnQueryCategorySelectionMenu(event);});
-    optionElement.innerHTML = category.getDisplayName();
+  var listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var hasMatchingEntries = (listOfMatchingEntries && (listOfMatchingEntries.length > 0));
+  var matchingEntry = hasMatchingEntries ? listOfMatchingEntries[0] : null;
+  
+  var listOfAttributes = this.getWorld().getCategories();
+  var selectElement = View.createAndAppendElement(this._queryEditSpan, "select");
+  for (var key in listOfAttributes) {
+    var anAttribute = listOfAttributes[key];
+    optionElement = View.createAndAppendElement(selectElement, "option");
+    optionElement.selected = (matchingAttribute.getDisplayName() == anAttribute.getDisplayName());
+    optionElement.value = anAttribute._getUuid();
+    optionElement.onclick = this.clickOnAttributeMenu.bindAsEventListener(this);
+    optionElement.text = anAttribute.getDisplayName();
   }
+  
+  View.createAndAppendTextNode(this._queryEditSpan, " is ");
+  
+  var listOfPossibleEntries = this.getWorld().getSuggestedItemsForAttribute(matchingAttribute);
+  var entrySpan = View.createAndAppendElement(this._queryEditSpan, "span");
+  
+  var entryTextView =  new TextView(this, entrySpan, myQuery, attributeCalledQueryMatchingValue, matchingEntry,
+    RootView.ELEMENT_CLASS_EDIT_MODE);
+  entryTextView.setSuggestions(listOfPossibleEntries);
+  entryTextView.alwaysUseEditField();
+  entryTextView.setAutoWiden(true);
+  var attributeCalledExpectedType = this.getWorld().getAttributeCalledExpectedType();
+  var listOfExpectedTypeEntries = matchingAttribute.getEntriesForAttribute(attributeCalledExpectedType);
+  entryTextView.setExpectedTypeEntries(listOfExpectedTypeEntries);
+  entryTextView.refresh();
+  myQuery.addObserver(this);
 };
 
 
@@ -294,6 +314,19 @@
 // -------------------------------------------------------------------
 
 /**
+ * Called when the query belong to this section has changed
+ * @scope public instance method
+ */
+SectionView.prototype.observedItemHasChanged = function(item) {
+  var myQuery = this.getQuery();
+  Util.assert(item == myQuery);
+  var pluginName = this._myPlugin.getPluginName();
+  this._myPlugin.endOfLife();
+  this._myPlugin = this.getPluginFromPluginName(pluginName, this._myPluginDiv);
+  this.refresh();
+};
+
+/**
  * Called when the user clicks on any of the plugin option-select controls.
  * Called from an HTML option element within an HTML select element.
  *
@@ -334,7 +367,7 @@
  * @scope    public instance method
  * @param    inEventObject    An event object. 
  */
-SectionView.prototype.clickOnQueryCategorySelectionMenu = function (inEventObject) {
+SectionView.prototype.clickOnAttributeMenu = function (inEventObject) {
   var eventObject = inEventObject || window.event;
   var optionElement = Util.getTargetFromEvent(eventObject);
   // PENDING: We could replace the lines above with "var optionElement = this;"
@@ -342,21 +375,38 @@
   
   var selectElement = optionElement.parentNode;
   var newChoiceUuid = optionElement.value;
-  var newQueryMatchingCategory = this.getWorld().getItemFromUuid(newChoiceUuid);
-  var newChoiceName = newQueryMatchingCategory.getDisplayName();
+  var newQueryMatchingAttribute = this.getWorld().getItemFromUuid(newChoiceUuid);
+  var newChoiceName = newQueryMatchingAttribute.getDisplayName();
   
-  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
-  var listOfMatchingEntries = this.getQuery().getEntriesForAttribute(attributeCalledQueryMatchingValue);
-  var currentQueryMatchingCategoryEntry = listOfMatchingEntries.length > 0? listOfMatchingEntries[0] : null;
-  var currentQueryMatchingCategory = listOfMatchingEntries.length > 0? listOfMatchingEntries[0].getValue() : null;
-  var currentCategoryName = currentQueryMatchingCategory? currentQueryMatchingCategory.getDisplayName() : "none";
- 
-  if (currentCategoryName != newChoiceName) {
-    if (currentQueryMatchingCategory) {
-      this.getQuery().replaceEntry(currentQueryMatchingCategoryEntry, newQueryMatchingCategory);
+  var myQuery = this.getQuery();
+  var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
+  var listOfMatchingAttrs = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+  var matchingAttribute;
+  if (listOfMatchingAttrs.length === 0) {
+    // by default matching attribute is category
+    matchingAttribute = this.getWorld().getAttributeCalledCategory();
+  }
+  else {
+    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    matchingAttribute = listOfMatchingAttrs[0].getValue();
+  }
+  if (matchingAttribute.getDisplayName() != newChoiceName) {
+    if (listOfMatchingAttrs.length == 0) {
+      myQuery.addEntryForAttribute(attributeCalledQueryMatchingAttribute, newQueryMatchingAttribute);
     } else {
-      this.getQuery().addEntryForAttribute(attributeCalledQueryMatchingValue, newQueryMatchingCategory);
+      myQuery.replaceEntry(listOfMatchingAttrs[0], newQueryMatchingAttribute);
     }
+
+    /* PENDING, PROBLEM: Can't delete entries already created by previous matching attribute
+    var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
+    var listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+    for (var i in listOfMatchingEntries) {
+      var anEntry = listOfMatchingEntries[i];
+      myQuery.replaceEntry(anEntry,null);
+    }
+    listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);;
+    Util.assert(listOfMatchingEntries.length === 0);*/
+    
     // I think we need these next 3 lines in to make sure the view gets updated  
     // to reflect the new query.  When we get a chance we should probably do 
     // some refactoring so that the plugin can register as an observer of the
@@ -366,7 +416,7 @@
     this._myPlugin.endOfLife();
     this._myPlugin = this.getPluginFromPluginName(pluginName, this._myPluginDiv);
 
-    // PENDING:
+    /*// PENDING:
     // These next 8 lines look like a mistake.  Maybe they're a result of a 
     // copy & paste error.  I think we can just delete them, but I'm not brave
     // enough right now!
@@ -377,7 +427,7 @@
       this.mySection.replaceEntry(oldEntry, pluginName);
     } else {
       this.mySection.addEntryForAttribute(attributeCalledPluginName, pluginName);
-    }
+    }*/
 
     this.refresh();
   }

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-15 22:22:04 UTC (rev 144)
+++ trunk/source/TablePlugin.js	2005-06-16 07:15:21 UTC (rev 145)
@@ -128,7 +128,7 @@
         // PENDING we may only want to do this for certain attributes
         var itemEntries = contentItem.getEntriesForAttribute(attribute);
         if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
-          hashTableOfEntries[attributeKeyString] = this._getSuggestedItemsForAttribute(attribute);
+          hashTableOfEntries[attributeKeyString] = this.getWorld().getSuggestedItemsForAttribute(attribute);
         } else {
           if (!hashTableOfEntries[attributeKeyString]) {
             hashTableOfEntries[attributeKeyString] = {};
@@ -159,50 +159,6 @@
 
 
 /**
- *
- */
-TablePlugin.prototype._getSuggestedItemsForAttribute = function(attribute) {
-  var listOfSuggestedItems = [];
-  var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
-  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
-    var key;
-    var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
-    var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
-    var attributeCalledExpectedType = this.getWorld().getAttributeCalledExpectedType();
-    var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
-    var listOfCategories = [];
-    for (key in listOfExpectedTypeEntries) {
-      var expectedTypeEntry = listOfExpectedTypeEntries[key];
-      var expectedType = expectedTypeEntry.getValue();
-      if (expectedType.isInCategory(categoryCalledCategory)) {
-        listOfCategories.push(expectedType);
-      }
-      /* WRONG -- DELETE ME
-      var listOfCategoryEntriesForExpectedType = expectedType.getEntriesForAttribute(attributeCalledCategory);
-      var categoryEntryForExpectedType = listOfCategoryEntriesForExpectedType[0]; // PENDING: should look at whole list, not just element 0
-      var categoryForExpectedType = categoryEntryForExpectedType.getValue();
-      if (categoryForExpectedType.isInCategory(categoryCalledCategory)) {
-        listOfCategories.push(categoryForExpectedType);
-      }
-      */
-    }
-    for (key in listOfCategories) {
-      var category = listOfCategories[key];
-      var listOfItems = this.getWorld().getItemsInCategory(category);
-      for (var keyToo in listOfItems) {
-        var item = listOfItems[keyToo];
-        Util.addObjectToSet(item, listOfSuggestedItems);
-      }
-    }
-  }
-  if (listOfSuggestedItems.length === 0) {
-    listOfSuggestedItems = null;
-  }
-  return listOfSuggestedItems;
-};
-
-
-/**
  * Builds editor to add/remove attribute columns of table
  *
  * @scope    private instance method
@@ -439,8 +395,12 @@
       this._hashTableOfEntries[attributeUuid] = [];
     }
     else {
-      this._hashTableOfAttributes[attributeUuid] = this.getWorld().getItemFromUuid(attributeUuid);
-      this._hashTableOfEntries[attributeUuid] = []; //PENDING need to set this to right attribute
+      var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
+      var attribute = this.getWorld().getItemFromUuid(attributeUuid);
+      this._hashTableOfAttributes[attributeUuid] = attribute;
+      if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
+        this._hashTableOfEntries[attributeUuid] = this.getWorld().getSuggestedItemsForAttribute(attribute);
+      }
     }
     this._buildTable(true);
   }

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-15 22:22:04 UTC (rev 144)
+++ trunk/source/TextView.js	2005-06-16 07:15:21 UTC (rev 145)
@@ -67,7 +67,7 @@
   
   this.setSuperview(theSuperview);
   this.setHTMLElement(inElement);
-  //inElement.style.width =
+  inElement.style.width =
   inElement.style.height = "100%"; // make this element expand to fill parent element where possible
   this._item = inItem;
   this._attribute = inAttribute;
@@ -77,6 +77,7 @@
   this._isMultiLine = isMultiLine;
   this._isEditing = false;
   this._proxyOnKeyFunction = null;
+  this._alwaysUseEditField = null;
   
   this._isProvisional = inItem.isProvisional();
   if (this._isProvisional) {
@@ -92,13 +93,49 @@
   if (this._suggestions) {
     var suggestionBox = new AttributeSuggestionBox(this._editField, this._suggestions);
     this._suggestionBox = suggestionBox;
+    if (this._editField && this._autoWiden) {
+      var maxLength = 4;
+      for (var i=0; i < this._suggestions.length;++i) {
+        var aSuggestion = this._suggestions[i];
+        if (aSuggestion.getDisplayName().length > maxLength) {maxLength = aSuggestion.getDisplayName().length;}
+      }
+      this._editField.size = maxLength;
+    }
   }
 };
 
+/**
+ *
+ */
+TextView.prototype.alwaysUseEditField = function() {
+  this._alwaysUseEditField = true;
+  if (this._myHasEverBeenDisplayedFlag) {
+    this.startEditing(true);
+  }
+};
 
 /**
  *
  */
+TextView.prototype.setAutoWiden = function(inAutoWiden) {
+  this._autoWiden = inAutoWiden;
+};
+
+/**
+ *
+ */
+TextView.prototype.setExpectedTypeEntries = function(expectedTypeEntries) {
+  Util.assert(Util.isArray(expectedTypeEntries));
+  for(var i=0;i < expectedTypeEntries.length; ++i) {
+    Util.assert(expectedTypeEntries[i] instanceof Entry);
+  }
+  this._expectedTypeEntries = expectedTypeEntries;
+};
+
+
+/**
+ *
+ */
 TextView.prototype.setSuggestions = function(suggestionList) {
   if (suggestionList) {Util.assert(Util.isArray(suggestionList));}
   this._suggestions = suggestionList;
@@ -141,8 +178,10 @@
   }
   this._textNode = document.createTextNode(textString);
   htmlElement.appendChild(this._textNode);
-
   htmlElement.onclick =  this.onClick.bindAsEventListener(this);
+  if (this._alwaysUseEditField) {
+    this.startEditing(true);
+  }
     
   this._myHasEverBeenDisplayedFlag = true;
 };
@@ -153,7 +192,7 @@
  *
  * @scope    public instance method
  */
-TextView.prototype.startEditing = function() {
+TextView.prototype.startEditing = function(dontSelect) {
   if (!this._isEditing) {
     var editField = this._editField;
     if (!editField) {
@@ -161,10 +200,9 @@
         editField = this._editField = document.createElement("textarea");
       }
       else {
-        editField = document.createElement("input");
+        editField = this._editField= document.createElement("input");
         editField.type = 'text';
       }
-      this._editField = editField;
       editField.className = this._className;
       var listener = this; 
       editField.onblur = this.onBlur.bindAsEventListener(this);
@@ -172,18 +210,15 @@
       editField.onkeyup = this.onKeyUp.bindAsEventListener(this);
       editField.onfocus = this.onFocus.bindAsEventListener(this);
       editField.defaultValue = this._isProvisional ? '' : this._textNode.data;
+      editField.size = 5; //editField.defaultValue.length+1;
     }
     
-    if (this._mySuperview.getTextViewWidth) {
-      //editField.style.width = this._mySuperview.getTextViewWidth() + "px";
-      editField.size = 1;
-    }
     //editField.style.width = this.getHTMLElement().offsetWidth + "px";    
     //editField.style.height = (this.getHTMLElement().offsetHeight) + "px";
     
     this._setupSuggestionBox();
     this.getHTMLElement().replaceChild(editField, this._textNode);
-    editField.select();
+    if (!dontSelect) {editField.select();}
     //editField.focus();
     this._isEditing = true;
   }
@@ -204,28 +239,29 @@
     if (!newValue) {
       newValue = this._editField.value;
     }
-    var newText = this._editField.value;
     var stillProvisional = this._isProvisional && !newValue;
     var htmlElement = this.getHTMLElement();
 
-    this._isEditing = false;
 
     if (this._suggestionBox) {
       this._suggestionBox._blurOnInputField();
     }
-    if (stillProvisional) {
-      newValue = this._provisionalText;
+    if (!this._alwaysUseEditField) {
+      this._isEditing = false;
+      if (stillProvisional) {
+        newValue = this._provisionalText;
+      }
+      var newValueDisplayString = "";
+      if (Util.isString(newValue)) {
+        newValueDisplayString = newValue;
+      }
+      else if (newValue instanceof Item) {
+        newValueDisplayString = newValue.getDisplayName();
+      }
+      this._textNode.data = newValueDisplayString;
+      this._suggestionBox = null;
+      this.getHTMLElement().replaceChild(this._textNode, this._editField);
     }
-    var newValueDisplayString = "";
-    if (Util.isString(newValue)) {
-      newValueDisplayString = newValue;
-    }
-    else if (newValue instanceof Item) {
-      newValueDisplayString = newValue.getDisplayName();
-    }
-    this._textNode.data = newValueDisplayString;
-    this._suggestionBox = null;
-    this.getHTMLElement().replaceChild(this._textNode, this._editField);
 
     // we need this _writeValue() to be after all display related code, because this may trigger an observer call
     if (!stillProvisional) { this._writeValue(newValue); }
@@ -246,8 +282,14 @@
 TextView.prototype._transformToExpectedType = function(value) {
 if (value && Util.isString(value)) {
     var repository = this.getWorld();
-    var attributeCalledExpectedType = repository.getAttributeCalledExpectedType();
-    var listOfExpectedTypeEntries = this._attribute.getEntriesForAttribute(attributeCalledExpectedType);
+    var listOfExpectedTypeEntries;
+    if (this._expectedTypeEntries) {
+      listOfExpectedTypeEntries = this._expectedTypeEntries;
+    }
+    else {
+      var attributeCalledExpectedType = repository.getAttributeCalledExpectedType();
+      listOfExpectedTypeEntries = this._attribute.getEntriesForAttribute(attributeCalledExpectedType);
+    }
     var categoryCalledCategory = repository.getCategoryCalledCategory();
     var typeCalledText = repository.getTypeCalledText();
     var typeCalledDate = repository.getTypeCalledDate();
@@ -452,7 +494,7 @@
 
   // ATTEMPT #2: 
   // slightly clunky, but better than nothing!
-  if (editField.scrollHeight > editField.clientHeight) {
+  if (this._isMultiLine && (editField.scrollHeight > editField.clientHeight)) {
     editField.style.height = editField.scrollHeight + "px";
   }
 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-15 22:22:04 UTC (rev 144)
+++ trunk/source/model/StubVirtualServer.js	2005-06-16 07:15:21 UTC (rev 145)
@@ -339,24 +339,38 @@
   return this.__myListOfUsers;
 };
 
-
 /**
  *
  */
-StubVirtualServer.prototype.getCategories = function () {
-  var listOfCategories = [];
+StubVirtualServer.prototype.getItemsOfCategory = function (inCategory) {
+  var listOfItems = [];
   for (var key in this.__myHashTableOfItemsKeyedByUuid) {
     var item = this.__myHashTableOfItemsKeyedByUuid[key];
-    var categoryCalledCategory = this.getItemFromUuid(World.UUID_FOR_CATEGORY_CATEGORY);
-    if (item.isInCategory(categoryCalledCategory)) {
-      listOfCategories.push(item);
+    if (item.isInCategory(inCategory)) {
+      listOfItems.push(item);
     }
   }
-  return listOfCategories;
+  return listOfItems;
 };
 
+/**
+ *
+ */
+StubVirtualServer.prototype.getCategories = function () {
+  var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
+  return this.getItemsOfCategory(categoryCalledCategory);
+};
 
 /**
+ *
+ */
+StubVirtualServer.prototype.getAttributes = function () {
+  var categoryCalledAttribute = this.getWorld().getCategoryCalledAttribute();
+  return this.getItemsOfCategory(categoryCalledAttribute);
+};
+
+
+/**
  * Returns an item representing the user who is currently logged in.
  *
  * @scope    public instance method

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-15 22:22:04 UTC (rev 144)
+++ trunk/source/model/World.js	2005-06-16 07:15:21 UTC (rev 145)
@@ -810,7 +810,62 @@
   return this._getFilteredList(listOfCategories);
 };
 
+/**
+ * Returns an list of all the items that represent attributes.
+ *
+ * @scope    public instance method
+ * @return   A list of items that represent attributes.
+ */
+World.prototype.getAttributes = function() {
+  var listOfAttributes = this._virtualServer.getAttributes();
+  return this._getFilteredList(listOfAttributes);
+};
 
+/**
+ *
+ */
+World.prototype.getSuggestedItemsForAttribute = function(attribute) {
+  var listOfSuggestedItems = [];
+  var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
+  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
+    var key;
+    var categoryCalledCategory = this.getCategoryCalledCategory();
+    var attributeCalledCategory = this.getAttributeCalledCategory();
+    var attributeCalledExpectedType = this.getAttributeCalledExpectedType();
+    var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
+    var listOfCategories = [];
+    for (key in listOfExpectedTypeEntries) {
+      var expectedTypeEntry = listOfExpectedTypeEntries[key];
+      var expectedType = expectedTypeEntry.getValue();
+      if (expectedType.isInCategory(categoryCalledCategory)) {
+        listOfCategories.push(expectedType);
+      }
+      /* WRONG -- DELETE ME
+      var listOfCategoryEntriesForExpectedType = expectedType.getEntriesForAttribute(attributeCalledCategory);
+      var categoryEntryForExpectedType = listOfCategoryEntriesForExpectedType[0]; // PENDING: should look at whole list, not just element 0
+      var categoryForExpectedType = categoryEntryForExpectedType.getValue();
+      if (categoryForExpectedType.isInCategory(categoryCalledCategory)) {
+        listOfCategories.push(categoryForExpectedType);
+      }
+      */
+    }
+    for (key in listOfCategories) {
+      var category = listOfCategories[key];
+      var listOfItems = this.getItemsInCategory(category);
+      for (var keyToo in listOfItems) {
+        var item = listOfItems[keyToo];
+        Util.addObjectToSet(item, listOfSuggestedItems);
+      }
+    }
+  }
+  if (listOfSuggestedItems.length === 0) {
+    listOfSuggestedItems = null;
+  }
+  return listOfSuggestedItems;
+};
+
+
+
 // -------------------------------------------------------------------
 // Observer methods
 // -------------------------------------------------------------------



From chaolam at sheep.berlios.de  Thu Jun 16 09:24:51 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 16 Jun 2005 09:24:51 +0200
Subject: [openrecord-svn] r146 - trunk/source
Message-ID: <200506160724.j5G7OpGb029992@sheep.berlios.de>

Author: chaolam
Date: 2005-06-16 09:24:49 +0200 (Thu, 16 Jun 2005)
New Revision: 146

Modified:
   trunk/source/SectionView.js
Log:
Added Brian's suggest of a way to delete entries for MatchingValue in a query

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-16 07:15:21 UTC (rev 145)
+++ trunk/source/SectionView.js	2005-06-16 07:24:49 UTC (rev 146)
@@ -391,21 +391,22 @@
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
   if (matchingAttribute.getDisplayName() != newChoiceName) {
-    if (listOfMatchingAttrs.length == 0) {
+    if (listOfMatchingAttrs.length === 0) {
       myQuery.addEntryForAttribute(attributeCalledQueryMatchingAttribute, newQueryMatchingAttribute);
     } else {
       myQuery.replaceEntry(listOfMatchingAttrs[0], newQueryMatchingAttribute);
     }
 
-    /* PENDING, PROBLEM: Can't delete entries already created by previous matching attribute
+    /* PENDING, PROBLEM to check Can't delete entries already created by previous matching attribute */
     var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
     var listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
     for (var i in listOfMatchingEntries) {
       var anEntry = listOfMatchingEntries[i];
-      myQuery.replaceEntry(anEntry,null);
+      anEntry.voteToDelete();
+      Util.assert(anEntry.hasBeenDeleted());
     }
-    listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);;
-    Util.assert(listOfMatchingEntries.length === 0);*/
+    listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+    Util.assert(listOfMatchingEntries.length === 0);
     
     // I think we need these next 3 lines in to make sure the view gets updated  
     // to reflect the new query.  When we get a chance we should probably do 



From chaolam at sheep.berlios.de  Thu Jun 16 19:49:05 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 16 Jun 2005 19:49:05 +0200
Subject: [openrecord-svn] r147 - trunk/source
Message-ID: <200506161749.j5GHn5e0030430@sheep.berlios.de>

Author: chaolam
Date: 2005-06-16 19:49:03 +0200 (Thu, 16 Jun 2005)
New Revision: 147

Modified:
   trunk/source/SectionView.js
Log:
Oops, fixed a stupid bug for new query UI

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-16 07:24:49 UTC (rev 146)
+++ trunk/source/SectionView.js	2005-06-16 17:49:03 UTC (rev 147)
@@ -280,7 +280,7 @@
   var hasMatchingEntries = (listOfMatchingEntries && (listOfMatchingEntries.length > 0));
   var matchingEntry = hasMatchingEntries ? listOfMatchingEntries[0] : null;
   
-  var listOfAttributes = this.getWorld().getCategories();
+  var listOfAttributes = this.getWorld().getAttributes();
   var selectElement = View.createAndAppendElement(this._queryEditSpan, "select");
   for (var key in listOfAttributes) {
     var anAttribute = listOfAttributes[key];



From skinner at sheep.berlios.de  Thu Jun 16 22:01:18 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 16 Jun 2005 22:01:18 +0200
Subject: [openrecord-svn] r148 - in trunk: documentation source source/model
Message-ID: <200506162001.j5GK1Irp027981@sheep.berlios.de>

Author: skinner
Date: 2005-06-16 22:01:15 +0200 (Thu, 16 Jun 2005)
New Revision: 148

Added:
   trunk/source/model/ContentRecord.js
Removed:
   trunk/source/model/IdentifiedRecord.js
Modified:
   trunk/documentation/release_planning.txt
   trunk/source/LintTool.js
   trunk/source/Util.js
   trunk/source/demo_page.html
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/LintTest.js
   trunk/source/model/ModelTest.html
   trunk/source/model/Ordinal.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/Vote.js
   trunk/source/model/World.js
Log:
Renamed IdentifiedRecord to be ContentRecord

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/documentation/release_planning.txt	2005-06-16 20:01:15 UTC (rev 148)
@@ -158,8 +158,8 @@
        |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
 mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
 mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
-brian  | 0        | 0.25    |     Update the JSON repository file to use time-based UUIDs
-brian  | 0.5  IED | 0.5 IED |  4. Store transaction info in repository
+brian  | 0        | 0.5     |     Update the JSON repository file to use time-based UUIDs
+brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data

Modified: trunk/source/LintTool.js
===================================================================
--- trunk/source/LintTool.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/LintTool.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -29,6 +29,11 @@
 *****************************************************************************/
  
 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+/*global Util, jslint */
+// -------------------------------------------------------------------
+
 /**
  * The LintTool class is just a thin wrapper around Douglas Crockford's
  * JSLint utility.

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/Util.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -32,6 +32,11 @@
 *****************************************************************************/
  
 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+/*global window, document, hex_md5 */
+// -------------------------------------------------------------------
+
 /**
  * The Util class offers general utility methods that might
  * be useful in a wide variety of applications.
@@ -329,7 +334,7 @@
   if ((typeof inValue) != "string") {
     return false;
   }
-  return (uuid.length == 36);  
+  return (inValue.length == 36);  
 };
 
 
@@ -365,7 +370,7 @@
 // -------------------------------------------------------------------
 
 Util.getArrayIndex = function(inArray, inElt) {
-  for (i=0; i<inArray.length; ++i) {
+  for (var i=0; i<inArray.length; ++i) {
     if (inArray[i] == inElt) {return i;}
   }
   return -1;
@@ -818,7 +823,7 @@
  * @return   A string containing the contents of the file.
  */
 Util.getStringContentsOfFileAtURL = function (inUrl) {
-  var anXMLHttpRequestObject = new XMLHttpRequest();
+  var anXMLHttpRequestObject = new window.XMLHttpRequest();
   anXMLHttpRequestObject.open("GET", inUrl, false);
   anXMLHttpRequestObject.send(null);
   var fileContents = anXMLHttpRequestObject.responseText;

Modified: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/demo_page.html	2005-06-16 20:01:15 UTC (rev 148)
@@ -34,7 +34,7 @@
 
     <script type="text/javascript" src="model/Ordinal.js"></script>
     <script type="text/javascript" src="model/Vote.js"></script>
-    <script type="text/javascript" src="model/IdentifiedRecord.js"></script>
+    <script type="text/javascript" src="model/ContentRecord.js"></script>
     <script type="text/javascript" src="model/Item.js"></script>
     <script type="text/javascript" src="model/Entry.js"></script>
     <script type="text/javascript" src="model/Transaction.js"></script>

Copied: trunk/source/model/ContentRecord.js (from rev 147, trunk/source/model/IdentifiedRecord.js)
===================================================================
--- trunk/source/model/IdentifiedRecord.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/ContentRecord.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -0,0 +1,450 @@
+/*****************************************************************************
+ ContentRecord.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Vote.js
+//   Ordinal.js
+//   Util.js
+//   World.js
+// -------------------------------------------------------------------
+
+/**
+ * The ContentRecord class serves as an abstract superclass for the class Item
+ * and the class Entry.
+ *
+ * @scope    public instance constructor
+ * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ */
+function ContentRecord() {
+}
+
+
+// -------------------------------------------------------------------
+// Protected methods
+// -------------------------------------------------------------------
+
+/**
+ * Called from the constructor function of each subclass of ContentRecord.
+ *
+ * @scope    protected instance method
+ * @param    inWorld    The world that this ContentRecord is a part of. 
+ * @param    inUuid    The UUID for this ContentRecord. 
+ */
+ContentRecord.prototype._ContentRecord = function (inWorld, inUuid) {
+  // Util.assert(!inUuid || Util.isNumeric(inUuid));
+  
+  this.__myWorld = inWorld;
+  this.__myUuid = inUuid;
+  
+  this.__myCreationTimestamp = null;
+  this.__myCreationUserstamp = null;
+
+  // Don't create these properties until we know we need them.
+  // this.__mySetOfVotes = null;
+  // this.__mySetOfOrdinals = null;
+};
+
+
+/**
+ * Initializes a new contentRecord that has just been created by a user action.
+ *
+ * WARNING: This method should be called ONLY from subclasses.
+ *
+ * @scope    protected instance method
+ */
+ContentRecord.prototype._initializeContentRecord = function () {
+};
+
+
+/**
+ * Sets the properties of a newly rehydrated contentRecord object.
+ *
+ * WARNING: This method should be called ONLY from subclasses.
+ *
+ * @scope    protected instance method
+ * @param    inTimestamp    A Date object with the creation timestamp for this item. 
+ * @param    inUserstamp    The user who created this item. 
+ */
+ContentRecord.prototype._rehydrateContentRecord = function (inTimestamp, inUserstamp) {
+  this.__myCreationTimestamp = inTimestamp;
+  this.__myCreationUserstamp = inUserstamp;
+};
+
+
+/**
+ * Returns the UUID of the item. 
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * If you're writing code in the view layer, call
+ * item.getUniqueKeyString() instead of item._getUuid();
+ *
+ * @scope    protected instance method
+ * @return   The UUID of the item.
+ */
+ContentRecord.prototype._getUuid = function () {
+  return this.__myUuid;
+};
+
+
+/**
+ * Records a user's vote to retain or delete this ContentRecord.
+ *
+ * @scope    protected instance method
+ * @param    inVote    A vote to retain or delete this ContentRecord. 
+ */
+ContentRecord.prototype._addVote = function (inVote) {
+  if (!this.__mySetOfVotes) {
+    this.__mySetOfVotes = [];
+  }
+  this.__mySetOfVotes.push(inVote);
+};
+
+
+/**
+ * Records the ordinal number that a user sets for this ContentRecord.
+ *
+ * @scope    protected instance method
+ * @param    inOrdinal    A vote to retain or delete this ContentRecord. 
+ */
+ContentRecord.prototype._addOrdinal = function (inOrdinal) {
+  if (!this.__mySetOfOrdinals) {
+    this.__mySetOfOrdinals = [];
+  }
+  this.__mySetOfOrdinals.push(inOrdinal);
+};
+
+
+// -------------------------------------------------------------------
+// Simple accessor methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the world that this item was created in.
+ *
+ * @scope    public instance method
+ * @return   A world object.
+ */
+ContentRecord.prototype.getWorld = function () {
+  return this.__myWorld;
+};
+
+
+/**
+ * Returns a Date object with the creation timestamp for this item.
+ *
+ * @scope    public instance method
+ * @return   A Date object.
+ */
+ContentRecord.prototype.getTimestamp = function() {
+  if (this.__myCreationTimestamp) {
+    // This case is now here only for the (temporary) benefit of _rehydrateContentRecord.
+    return this.__myCreationTimestamp;
+  }
+  var hexTimeLow = this.__myUuid.split('-')[0];
+  var hexTimeMid = this.__myUuid.split('-')[1];
+  var hexTimeHigh = this.__myUuid.split('-')[2];
+  var timeLow = parseInt(hexTimeLow, Util.HEX_RADIX);
+  var timeMid = parseInt(hexTimeMid, Util.HEX_RADIX);
+  var timeHigh = parseInt(hexTimeHigh, Util.HEX_RADIX);
+  var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
+  hundredNanosecondIntervalsSince1582 <<= 16;
+  hundredNanosecondIntervalsSince1582 += timeMid;
+  // What we really want to do next is shift left 32 bits, but the result will be too big
+  // to fit in an int, so we'll multiply by 2^32, and the result will be a floating point approximation.
+  hundredNanosecondIntervalsSince1582 *= 0x100000000;
+  hundredNanosecondIntervalsSince1582 += timeLow;
+  var millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;
+
+  // Again, this will be a floating point approximation.
+  // We can make things exact later if we need to.
+  var secondsPerHour = 60 * 60;
+  var hoursBetween1582and1970 = Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS;
+  var secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;
+  var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
+
+  var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
+  return millisecondsSince1970;
+};
+
+
+/**
+ * Returns the item representing the user who created this item.
+ *
+ * @scope    public instance method
+ * @return   A user item.
+ */
+ContentRecord.prototype.getUserstamp = function() {
+  if (this.__myCreationUserstamp) {
+    // This case is now here only for the (temporary) benefit of _rehydrateContentRecord.
+    return this.__myCreationUserstamp;
+  }
+  var allUsers = this.__myWorld.getUsers();
+  var myPseudonode = this.__myUuid.split('-')[4];
+  for (key in allUsers) {
+    var usersPseudonode = allUsers[key]._getUuid().split('-')[4];
+    if (usersPseudonode == myPseudonode) {
+      return allUsers[key];
+    }
+  }
+  throw new Error("User not found.  Database may be corrupted.");
+};
+
+
+/**
+ * Returns a string which can be used as a unique key in a hash table. 
+ *
+ * @scope    public instance method
+ * @return   A string which can serve as a unique key.
+ */
+ContentRecord.prototype.getUniqueKeyString = function () {
+  return this.__myUuid;
+};
+
+
+/**
+ * Returns the ordinal number that this contentRecord was given at creation. 
+ *
+ * @scope    public instance method
+ * @return   A number.
+ */
+ContentRecord.prototype.getOrdinalNumberAtCreation = function () {
+  // return (0 - this.__myCreationTimestamp.valueOf());
+  return (0 - this.__myUuid);
+};
+
+
+// -------------------------------------------------------------------
+// Accessor methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the ordinal number for this contentRecord. 
+ *
+ * @scope    public instance method
+ * @return   A number.
+ */
+ContentRecord.prototype.getOrdinalNumber = function () {
+  if (!this.__mySetOfOrdinals || this.__mySetOfOrdinals.length === 0) {
+    return this.getOrdinalNumberAtCreation();
+  }
+
+  var ordinalNumber = this.getOrdinalNumberAtCreation();
+  var key;
+  var ordinal;
+  var filter = this.__myWorld.getRetrievalFilter();
+  
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      // APPROACH A: 
+      //   I tried this first, but it fails in the unit tests.
+      //   It fails because two objects will have identical timestamps if they
+      //   were created in the same millisecond.  One solution would be to
+      //   create a Timestamp class that offers sub-millisecond timestamp
+      //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
+      //   for now the simplest thing to do is just move on to APPROACH B:
+      /*
+      var mostRecentOrdinal = this.__mySetOfOrdinals[0];
+      for (key in this.__mySetOfOrdinals) {
+        ordinal = this.__mySetOfOrdinals[key];
+        if (ordinal.getTimestamp() > mostRecentOrdinal.getTimestamp()) {
+          mostRecentOrdinal = ordinal;
+        }
+      }
+      */
+      
+      // APPROACH B: 
+      //   This works, provided __mySetOfOrdinals is always initialized in
+      //   chronological order.
+      var mostRecentOrdinal = this.__mySetOfOrdinals[this.__mySetOfOrdinals.length - 1];
+
+      ordinalNumber = mostRecentOrdinal.getOrdinalNumber();
+      break;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+  return ordinalNumber;
+};
+
+
+/**
+ * Returns true if this contentRecord has been deleted. 
+ *
+ * @scope    public instance method
+ * @return   A boolean.
+ */
+ContentRecord.prototype.hasBeenDeleted = function () {
+  if (!this.__mySetOfVotes || this.__mySetOfVotes.length === 0) {
+    return false;
+  }
+  
+  var hasBeenDeleted = false;
+  var key;
+  var vote;
+  var filter = this.__myWorld.getRetrievalFilter();
+  
+  switch (filter) {
+    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
+      // APPROACH A: 
+      //   I tried this first, but it fails in the unit tests.
+      //   It fails because two objects will have identical timestamps if they
+      //   were created in the same millisecond.  One solution would be to
+      //   create a Timestamp class that offers sub-millisecond timestamp
+      //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
+      //   for now the simplest thing to do is just move on to APPROACH B:
+      /*
+      var mostRecentVote = this.__mySetOfVotes[0];
+      for (key in this.__mySetOfVotes) {
+        vote = this.__mySetOfVotes[key];
+        if (vote.getTimestamp() > mostRecentVote.getTimestamp()) {
+          mostRecentVote = vote;
+        }
+      }
+      */
+      
+      // APPROACH B: 
+      //   This works, provided __mySetOfVotes is always initialized in
+      //   chronological order.
+      var mostRecentVote = this.__mySetOfVotes[this.__mySetOfVotes.length - 1];
+      
+      hasBeenDeleted = !mostRecentVote.getRetainFlag();
+      break;
+    case World.RETRIEVAL_FILTER_SINGLE_USER:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_DEMOCRATIC:
+      // PENDING: This still needs to be implemented.
+      Util.assert(false);
+      break;
+    case World.RETRIEVAL_FILTER_UNABRIDGED:
+      hasBeenDeleted = false;
+      break;
+    default:
+      // We should never get here.  If we get here, it's an error.
+      Util.assert(false);
+      break;
+  }
+  return hasBeenDeleted;
+};
+
+
+/**
+ * Moves this contentRecord to a new position in a list, by creating a new
+ * ordinal for this contentRecord with an ordinal number that is set such
+ * that this contentRecord appears between two other entries.
+ *
+ * @scope    public instance method
+ * @param    inContentRecordFirst    The contentRecord that should come before this one. 
+ * @param    inContentRecordThird    The contentRecord that should come after this one. 
+ */
+ContentRecord.prototype.reorderBetween = function (inContentRecordFirst, inContentRecordThird) {
+  var firstOrdinalNumber = null;
+  var secondOrdinalNumber = null;
+  var thirdOrdinalNumber = null;
+  var arbitraryNumberToMoveUsUpOrDownSlightly = 0.01;
+  
+  if (inContentRecordFirst) {
+    firstOrdinalNumber = inContentRecordFirst.getOrdinalNumber();
+  }
+  if (inContentRecordThird) {
+    thirdOrdinalNumber = inContentRecordThird.getOrdinalNumber();
+  }
+  
+  if (firstOrdinalNumber && thirdOrdinalNumber) {
+    secondOrdinalNumber = (firstOrdinalNumber + thirdOrdinalNumber) / 2;
+  }
+  if (firstOrdinalNumber && !thirdOrdinalNumber) {
+    secondOrdinalNumber = (firstOrdinalNumber - arbitraryNumberToMoveUsUpOrDownSlightly);
+  }
+  if (!firstOrdinalNumber && thirdOrdinalNumber) {
+    secondOrdinalNumber = (firstOrdinalNumber + arbitraryNumberToMoveUsUpOrDownSlightly);
+  }
+
+  this.getWorld()._newOrdinal(this, secondOrdinalNumber);
+};
+
+
+/**
+ * Registers a vote to delete this contentRecord. 
+ *
+ * @scope    public instance method
+ */
+ContentRecord.prototype.voteToDelete = function () {
+  this.getWorld()._newVote(this, false);
+};
+
+
+/**
+ * Registers a vote to retain this contentRecord. 
+ *
+ * @scope    public instance method
+ */
+ContentRecord.prototype.voteToRetain = function () {
+  this.getWorld()._newVote(this, true);
+};
+
+
+// -------------------------------------------------------------------
+// Class methods
+// -------------------------------------------------------------------
+
+/**
+ * Registers a vote to retain this contentRecord. 
+ *
+ * @scope    public class method
+ */
+ContentRecord.compareOrdinals = function (inContentRecordOne, inContentRecordTwo) {
+  var ordinalNumberOne = inContentRecordOne.getOrdinalNumber();
+  var ordinalNumberTwo = inContentRecordTwo.getOrdinalNumber();
+  return (ordinalNumberTwo - ordinalNumberOne);
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -225,8 +225,8 @@
   var key;
   var itemUuid;
   var item;
-  var identifiedRecordUuid;
-  var identifiedRecord;
+  var contentRecordUuid;
+  var contentRecord;
   
   for (key in inListOfRecords) {
     var dehydratedRecord = inListOfRecords[key];
@@ -258,16 +258,16 @@
       }
       if (dehydratedVote) {
         var retainFlag = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG];
-        identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
-        identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
-        var vote = new Vote(identifiedRecord, userstamp, retainFlag, timestamp);
+        contentRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
+        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
+        var vote = new Vote(contentRecord, userstamp, retainFlag, timestamp);
         this.__myChronologicalListOfRecords.push(vote);
       }
       if (dehydratedOrdinal) {
         var ordinalNumber = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
-        identifiedRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
-        identifiedRecord = this._getIdentifiedRecordFromUuid(identifiedRecordUuid);
-        var ordinal = new Ordinal(identifiedRecord, userstamp, ordinalNumber, timestamp);
+        contentRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
+        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
+        var ordinal = new Ordinal(contentRecord, userstamp, ordinalNumber, timestamp);
         this.__myChronologicalListOfRecords.push(ordinal);
       }
       if (dehydratedEntry) {
@@ -434,13 +434,13 @@
   var indent = inIndent || "";
   var key;
   var listOfStrings = [];
-  var firstIdentifiedRecord = true;
+  var firstContentRecord = true;
   var itemDisplayNameSubstring;
 
   for (key in inListOfRecords) {
     var record = inListOfRecords[key];
-    if (firstIdentifiedRecord) {
-      firstIdentifiedRecord = false;
+    if (firstContentRecord) {
+      firstContentRecord = false;
     } else {
       listOfStrings.push(',\n');
     }
@@ -455,13 +455,13 @@
     if (record instanceof Vote) {
       var vote = record;
       listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getIdentifiedRecord()._getUuid() + '",\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getContentRecord()._getUuid() + '",\n');
       listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
     }
     if (record instanceof Ordinal) {
       var ordinal = record;
       listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getIdentifiedRecord()._getUuid() + '",\n');
+      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getContentRecord()._getUuid() + '",\n');
       listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
     }
     if (record instanceof Entry) {
@@ -542,11 +542,11 @@
   }
   
   listOfStrings.push('  "' + DeltaVirtualServer.JSON_MEMBER_USERS + '": ' + '[\n');
-  var firstIdentifiedRecord = true;
+  var firstContentRecord = true;
   for (key in this.__myListOfUsers) {
     var user = this.__myListOfUsers[key];
-    if (firstIdentifiedRecord) {
-      firstIdentifiedRecord = false;
+    if (firstContentRecord) {
+      firstContentRecord = false;
     } else {
       listOfStrings.push(',\n');
     }

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/Entry.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -34,7 +34,7 @@
 //   Util.js
 //   Item.js
 //   World.js
-//   IdentifiedRecord.js
+//   ContentRecord.js
 // -------------------------------------------------------------------
 
 /**
@@ -51,9 +51,9 @@
  * @param    inWorld    The world that this entry is a part of. 
  * @param    inUuid    The UUID for this entry. 
  */
-Entry.prototype = new IdentifiedRecord();  // makes Entry be a subclass of IdentifiedRecord
+Entry.prototype = new ContentRecord();  // makes Entry be a subclass of ContentRecord
 function Entry(inWorld, inUuid) {
-  this._IdentifiedRecord(inWorld, inUuid);
+  this._ContentRecord(inWorld, inUuid);
  
   this.__myPreviousEntry = null;
   this.__myListOfSubsequentEntries = [];
@@ -82,7 +82,7 @@
 * @param    inType    Optional.  The data type to interpret the value as. 
  */
 Entry.prototype._initialize = function (inItemOrEntry, inAttribute, inValue, inType) {
-  this._initializeIdentifiedRecord();
+  this._initializeContentRecord();
 
   if (inItemOrEntry instanceof Entry) {
     this.__myPreviousEntry = inItemOrEntry;
@@ -138,7 +138,7 @@
  * @param    inUserstamp    The user who created this entry. 
  */
 Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inTimestamp, inUserstamp, inType) {
-  this._rehydrateIdentifiedRecord(inTimestamp, inUserstamp);
+  this._rehydrateContentRecord(inTimestamp, inUserstamp);
 
   if (inItemOrEntry instanceof Entry) {
     this.__myPreviousEntry = inItemOrEntry;

Deleted: trunk/source/model/IdentifiedRecord.js
===================================================================
--- trunk/source/model/IdentifiedRecord.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/IdentifiedRecord.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -1,450 +0,0 @@
-/*****************************************************************************
- IdentifiedRecord.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   Vote.js
-//   Ordinal.js
-//   Util.js
-//   World.js
-// -------------------------------------------------------------------
-
-/**
- * The IdentifiedRecord class serves as an abstract superclass for the class Item
- * and the class Entry.
- *
- * @scope    public instance constructor
- * @syntax   DO NOT CALL THIS CONSTRUCTOR
- */
-function IdentifiedRecord() {
-}
-
-
-// -------------------------------------------------------------------
-// Protected methods
-// -------------------------------------------------------------------
-
-/**
- * Called from the constructor function of each subclass of IdentifiedRecord.
- *
- * @scope    protected instance method
- * @param    inWorld    The world that this IdentifiedRecord is a part of. 
- * @param    inUuid    The UUID for this IdentifiedRecord. 
- */
-IdentifiedRecord.prototype._IdentifiedRecord = function (inWorld, inUuid) {
-  // Util.assert(!inUuid || Util.isNumeric(inUuid));
-  
-  this.__myWorld = inWorld;
-  this.__myUuid = inUuid;
-  
-  this.__myCreationTimestamp = null;
-  this.__myCreationUserstamp = null;
-
-  // Don't create these properties until we know we need them.
-  // this.__mySetOfVotes = null;
-  // this.__mySetOfOrdinals = null;
-};
-
-
-/**
- * Initializes a new identifiedRecord that has just been created by a user action.
- *
- * WARNING: This method should be called ONLY from subclasses.
- *
- * @scope    protected instance method
- */
-IdentifiedRecord.prototype._initializeIdentifiedRecord = function () {
-};
-
-
-/**
- * Sets the properties of a newly rehydrated identifiedRecord object.
- *
- * WARNING: This method should be called ONLY from subclasses.
- *
- * @scope    protected instance method
- * @param    inTimestamp    A Date object with the creation timestamp for this item. 
- * @param    inUserstamp    The user who created this item. 
- */
-IdentifiedRecord.prototype._rehydrateIdentifiedRecord = function (inTimestamp, inUserstamp) {
-  this.__myCreationTimestamp = inTimestamp;
-  this.__myCreationUserstamp = inUserstamp;
-};
-
-
-/**
- * Returns the UUID of the item. 
- *
- * WARNING: This method should be called ONLY from a 
- * VirtualServer implementation.
- *
- * If you're writing code in the view layer, call
- * item.getUniqueKeyString() instead of item._getUuid();
- *
- * @scope    protected instance method
- * @return   The UUID of the item.
- */
-IdentifiedRecord.prototype._getUuid = function () {
-  return this.__myUuid;
-};
-
-
-/**
- * Records a user's vote to retain or delete this IdentifiedRecord.
- *
- * @scope    protected instance method
- * @param    inVote    A vote to retain or delete this IdentifiedRecord. 
- */
-IdentifiedRecord.prototype._addVote = function (inVote) {
-  if (!this.__mySetOfVotes) {
-    this.__mySetOfVotes = [];
-  }
-  this.__mySetOfVotes.push(inVote);
-};
-
-
-/**
- * Records the ordinal number that a user sets for this IdentifiedRecord.
- *
- * @scope    protected instance method
- * @param    inOrdinal    A vote to retain or delete this IdentifiedRecord. 
- */
-IdentifiedRecord.prototype._addOrdinal = function (inOrdinal) {
-  if (!this.__mySetOfOrdinals) {
-    this.__mySetOfOrdinals = [];
-  }
-  this.__mySetOfOrdinals.push(inOrdinal);
-};
-
-
-// -------------------------------------------------------------------
-// Simple accessor methods
-// -------------------------------------------------------------------
-
-/**
- * Returns the world that this item was created in.
- *
- * @scope    public instance method
- * @return   A world object.
- */
-IdentifiedRecord.prototype.getWorld = function () {
-  return this.__myWorld;
-};
-
-
-/**
- * Returns a Date object with the creation timestamp for this item.
- *
- * @scope    public instance method
- * @return   A Date object.
- */
-IdentifiedRecord.prototype.getTimestamp = function() {
-  if (this.__myCreationTimestamp) {
-    // This case is now here only for the (temporary) benefit of _rehydrateIdentifiedRecord.
-    return this.__myCreationTimestamp;
-  }
-  var hexTimeLow = this.__myUuid.split('-')[0];
-  var hexTimeMid = this.__myUuid.split('-')[1];
-  var hexTimeHigh = this.__myUuid.split('-')[2];
-  var timeLow = parseInt(hexTimeLow, Util.HEX_RADIX);
-  var timeMid = parseInt(hexTimeMid, Util.HEX_RADIX);
-  var timeHigh = parseInt(hexTimeHigh, Util.HEX_RADIX);
-  var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
-  hundredNanosecondIntervalsSince1582 <<= 16;
-  hundredNanosecondIntervalsSince1582 += timeMid;
-  // What we really want to do next is shift left 32 bits, but the result will be too big
-  // to fit in an int, so we'll multiply by 2^32, and the result will be a floating point approximation.
-  hundredNanosecondIntervalsSince1582 *= 0x100000000;
-  hundredNanosecondIntervalsSince1582 += timeLow;
-  var millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;
-
-  // Again, this will be a floating point approximation.
-  // We can make things exact later if we need to.
-  var secondsPerHour = 60 * 60;
-  var hoursBetween1582and1970 = Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS;
-  var secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;
-  var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
-
-  var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
-  return millisecondsSince1970;
-};
-
-
-/**
- * Returns the item representing the user who created this item.
- *
- * @scope    public instance method
- * @return   A user item.
- */
-IdentifiedRecord.prototype.getUserstamp = function() {
-  if (this.__myCreationUserstamp) {
-    // This case is now here only for the (temporary) benefit of _rehydrateIdentifiedRecord.
-    return this.__myCreationUserstamp;
-  }
-  var allUsers = this.__myWorld.getUsers();
-  var myPseudonode = this.__myUuid.split('-')[4];
-  for (key in allUsers) {
-    var usersPseudonode = allUsers[key]._getUuid().split('-')[4];
-    if (usersPseudonode == myPseudonode) {
-      return allUsers[key];
-    }
-  }
-  throw new Error("User not found.  Database may be corrupted.");
-};
-
-
-/**
- * Returns a string which can be used as a unique key in a hash table. 
- *
- * @scope    public instance method
- * @return   A string which can serve as a unique key.
- */
-IdentifiedRecord.prototype.getUniqueKeyString = function () {
-  return this.__myUuid;
-};
-
-
-/**
- * Returns the ordinal number that this identifiedRecord was given at creation. 
- *
- * @scope    public instance method
- * @return   A number.
- */
-IdentifiedRecord.prototype.getOrdinalNumberAtCreation = function () {
-  // return (0 - this.__myCreationTimestamp.valueOf());
-  return (0 - this.__myUuid);
-};
-
-
-// -------------------------------------------------------------------
-// Accessor methods
-// -------------------------------------------------------------------
-
-/**
- * Returns the ordinal number for this identifiedRecord. 
- *
- * @scope    public instance method
- * @return   A number.
- */
-IdentifiedRecord.prototype.getOrdinalNumber = function () {
-  if (!this.__mySetOfOrdinals || this.__mySetOfOrdinals.length === 0) {
-    return this.getOrdinalNumberAtCreation();
-  }
-
-  var ordinalNumber = this.getOrdinalNumberAtCreation();
-  var key;
-  var ordinal;
-  var filter = this.__myWorld.getRetrievalFilter();
-  
-  switch (filter) {
-    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
-      // APPROACH A: 
-      //   I tried this first, but it fails in the unit tests.
-      //   It fails because two objects will have identical timestamps if they
-      //   were created in the same millisecond.  One solution would be to
-      //   create a Timestamp class that offers sub-millisecond timestamp
-      //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
-      //   for now the simplest thing to do is just move on to APPROACH B:
-      /*
-      var mostRecentOrdinal = this.__mySetOfOrdinals[0];
-      for (key in this.__mySetOfOrdinals) {
-        ordinal = this.__mySetOfOrdinals[key];
-        if (ordinal.getTimestamp() > mostRecentOrdinal.getTimestamp()) {
-          mostRecentOrdinal = ordinal;
-        }
-      }
-      */
-      
-      // APPROACH B: 
-      //   This works, provided __mySetOfOrdinals is always initialized in
-      //   chronological order.
-      var mostRecentOrdinal = this.__mySetOfOrdinals[this.__mySetOfOrdinals.length - 1];
-
-      ordinalNumber = mostRecentOrdinal.getOrdinalNumber();
-      break;
-    case World.RETRIEVAL_FILTER_SINGLE_USER:
-      // PENDING: This still needs to be implemented.
-      Util.assert(false);
-      break;
-    case World.RETRIEVAL_FILTER_DEMOCRATIC:
-      // PENDING: This still needs to be implemented.
-      Util.assert(false);
-      break;
-    case World.RETRIEVAL_FILTER_UNABRIDGED:
-      // PENDING: This still needs to be implemented.
-      Util.assert(false);
-      break;
-    default:
-      // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
-      break;
-  }
-  return ordinalNumber;
-};
-
-
-/**
- * Returns true if this identifiedRecord has been deleted. 
- *
- * @scope    public instance method
- * @return   A boolean.
- */
-IdentifiedRecord.prototype.hasBeenDeleted = function () {
-  if (!this.__mySetOfVotes || this.__mySetOfVotes.length === 0) {
-    return false;
-  }
-  
-  var hasBeenDeleted = false;
-  var key;
-  var vote;
-  var filter = this.__myWorld.getRetrievalFilter();
-  
-  switch (filter) {
-    case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
-      // APPROACH A: 
-      //   I tried this first, but it fails in the unit tests.
-      //   It fails because two objects will have identical timestamps if they
-      //   were created in the same millisecond.  One solution would be to
-      //   create a Timestamp class that offers sub-millisecond timestamp
-      //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
-      //   for now the simplest thing to do is just move on to APPROACH B:
-      /*
-      var mostRecentVote = this.__mySetOfVotes[0];
-      for (key in this.__mySetOfVotes) {
-        vote = this.__mySetOfVotes[key];
-        if (vote.getTimestamp() > mostRecentVote.getTimestamp()) {
-          mostRecentVote = vote;
-        }
-      }
-      */
-      
-      // APPROACH B: 
-      //   This works, provided __mySetOfVotes is always initialized in
-      //   chronological order.
-      var mostRecentVote = this.__mySetOfVotes[this.__mySetOfVotes.length - 1];
-      
-      hasBeenDeleted = !mostRecentVote.getRetainFlag();
-      break;
-    case World.RETRIEVAL_FILTER_SINGLE_USER:
-      // PENDING: This still needs to be implemented.
-      Util.assert(false);
-      break;
-    case World.RETRIEVAL_FILTER_DEMOCRATIC:
-      // PENDING: This still needs to be implemented.
-      Util.assert(false);
-      break;
-    case World.RETRIEVAL_FILTER_UNABRIDGED:
-      hasBeenDeleted = false;
-      break;
-    default:
-      // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
-      break;
-  }
-  return hasBeenDeleted;
-};
-
-
-/**
- * Moves this identifiedRecord to a new position in a list, by creating a new
- * ordinal for this identifiedRecord with an ordinal number that is set such
- * that this identifiedRecord appears between two other entries.
- *
- * @scope    public instance method
- * @param    inIdentifiedRecordFirst    The identifiedRecord that should come before this one. 
- * @param    inIdentifiedRecordThird    The identifiedRecord that should come after this one. 
- */
-IdentifiedRecord.prototype.reorderBetween = function (inIdentifiedRecordFirst, inIdentifiedRecordThird) {
-  var firstOrdinalNumber = null;
-  var secondOrdinalNumber = null;
-  var thirdOrdinalNumber = null;
-  var arbitraryNumberToMoveUsUpOrDownSlightly = 0.01;
-  
-  if (inIdentifiedRecordFirst) {
-    firstOrdinalNumber = inIdentifiedRecordFirst.getOrdinalNumber();
-  }
-  if (inIdentifiedRecordThird) {
-    thirdOrdinalNumber = inIdentifiedRecordThird.getOrdinalNumber();
-  }
-  
-  if (firstOrdinalNumber && thirdOrdinalNumber) {
-    secondOrdinalNumber = (firstOrdinalNumber + thirdOrdinalNumber) / 2;
-  }
-  if (firstOrdinalNumber && !thirdOrdinalNumber) {
-    secondOrdinalNumber = (firstOrdinalNumber - arbitraryNumberToMoveUsUpOrDownSlightly);
-  }
-  if (!firstOrdinalNumber && thirdOrdinalNumber) {
-    secondOrdinalNumber = (firstOrdinalNumber + arbitraryNumberToMoveUsUpOrDownSlightly);
-  }
-
-  this.getWorld()._newOrdinal(this, secondOrdinalNumber);
-};
-
-
-/**
- * Registers a vote to delete this identifiedRecord. 
- *
- * @scope    public instance method
- */
-IdentifiedRecord.prototype.voteToDelete = function () {
-  this.getWorld()._newVote(this, false);
-};
-
-
-/**
- * Registers a vote to retain this identifiedRecord. 
- *
- * @scope    public instance method
- */
-IdentifiedRecord.prototype.voteToRetain = function () {
-  this.getWorld()._newVote(this, true);
-};
-
-
-// -------------------------------------------------------------------
-// Class methods
-// -------------------------------------------------------------------
-
-/**
- * Registers a vote to retain this identifiedRecord. 
- *
- * @scope    public class method
- */
-IdentifiedRecord.compareOrdinals = function (inIdentifiedRecordOne, inIdentifiedRecordTwo) {
-  var ordinalNumberOne = inIdentifiedRecordOne.getOrdinalNumber();
-  var ordinalNumberTwo = inIdentifiedRecordTwo.getOrdinalNumber();
-  return (ordinalNumberTwo - ordinalNumberOne);
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/Item.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -34,7 +34,7 @@
 //   Util.js
 //   World.js
 //   Entry.js
-//   IdentifiedRecord.js
+//   ContentRecord.js
 // -------------------------------------------------------------------
 
 
@@ -52,9 +52,9 @@
  * @param    inWorld    The world that this item is a part of. 
  * @param    inUuid    The UUID for this item. 
  */
-Item.prototype = new IdentifiedRecord();  // makes Item be a subclass of IdentifiedRecord
+Item.prototype = new ContentRecord();  // makes Item be a subclass of ContentRecord
 function Item(inWorld, inUuid) {
-  this._IdentifiedRecord(inWorld, inUuid);
+  this._ContentRecord(inWorld, inUuid);
   
   this.__myHashTableOfEntryListsKeyedByAttributeUuid = {};
   this.__myProvisionalFlag = false;
@@ -76,7 +76,7 @@
  * @param    inProvisionalFlag    True if the item is provisional; false if the item is normal. 
  */
 Item.prototype._initialize = function (inObserver, inProvisionalFlag) {
-  this._initializeIdentifiedRecord();
+  this._initializeContentRecord();
 
   if (inProvisionalFlag) {
     this.__myProvisionalFlag = true;
@@ -102,7 +102,7 @@
  */
 Item.prototype._rehydrate = function (inTimestamp, inUserstamp) {
   this.__myProvisionalFlag = false;
-  this._rehydrateIdentifiedRecord(inTimestamp, inUserstamp);
+  this._rehydrateContentRecord(inTimestamp, inUserstamp);
 };
 
 
@@ -261,7 +261,7 @@
       Util.assert(false);
       break;
   }
-  filteredListOfEntries.sort(IdentifiedRecord.compareOrdinals);
+  filteredListOfEntries.sort(ContentRecord.compareOrdinals);
   return filteredListOfEntries;
 };
 

Modified: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/LintTest.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -36,7 +36,7 @@
   var listOfSourceCodeFiles = [
     "Ordinal.js",
     "Vote.js",
-    "IdentifiedRecord.js",
+    "ContentRecord.js",
     "Item.js",
     "Entry.js",
     "Transaction.js",

Modified: trunk/source/model/ModelTest.html
===================================================================
--- trunk/source/model/ModelTest.html	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/ModelTest.html	2005-06-16 20:01:15 UTC (rev 148)
@@ -18,7 +18,7 @@
     <script type="text/javascript" src="../Util.js"></script>
     <script type="text/javascript" src="Ordinal.js"></script>
     <script type="text/javascript" src="Vote.js"></script>
-    <script type="text/javascript" src="IdentifiedRecord.js"></script>
+    <script type="text/javascript" src="ContentRecord.js"></script>
     <script type="text/javascript" src="Item.js"></script>
     <script type="text/javascript" src="Entry.js"></script>
     <script type="text/javascript" src="Transaction.js"></script>

Modified: trunk/source/model/Ordinal.js
===================================================================
--- trunk/source/model/Ordinal.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/Ordinal.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -32,7 +32,7 @@
 // -------------------------------------------------------------------
 // Dependencies:
 //   User.js
-//   IdentifiedRecord.js
+//   ContentRecord.js
 // -------------------------------------------------------------------
 
 /**
@@ -40,13 +40,13 @@
  * a user set an ordinal number for an item or a entry of an item.
  *
  * @scope    public instance constructor
- * @param    inIdentifiedRecord    The item or entry that this vote is attached to. 
+ * @param    inContentRecord    The item or entry that this vote is attached to. 
  * @param    inUser    The user who voted. 
  * @param    inOrdinalNumber    The ordinal number itself. 
  * @param    inTimestamp    Optional. The time the vote was made. 
  */
-function Ordinal(inIdentifiedRecord, inUser, inOrdinalNumber, inTimestamp) {
-  this.__myIdentifiedRecord = inIdentifiedRecord;
+function Ordinal(inContentRecord, inUser, inOrdinalNumber, inTimestamp) {
+  this.__myContentRecord = inContentRecord;
   this.__myUserstamp = inUser;
   this.__myOrdinalNumber = inOrdinalNumber;
   if (inTimestamp) {
@@ -54,11 +54,11 @@
   } else {
     this.__myTimestamp = new Date();
   }
-  this.__myIdentifiedRecord._addOrdinal(this);
+  this.__myContentRecord._addOrdinal(this);
 }
 
-Ordinal.prototype.getIdentifiedRecord = function () {
-  return this.__myIdentifiedRecord;
+Ordinal.prototype.getContentRecord = function () {
+  return this.__myContentRecord;
 };
 
 Ordinal.prototype.getTimestamp = function () {

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/StubVirtualServer.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -34,7 +34,7 @@
 //   Util.js
 //   World.js
 //   Item.js
-//   IdentifiedRecord.js
+//   ContentRecord.js
 //   Ordinal.js
 //   Entry.js
 //   Vote.js
@@ -258,14 +258,14 @@
  * Returns a newly created ordinal.
  *
  * @scope    public instance method
- * @param    inIdentifiedRecord    The identifiedRecord that this is an ordinal for. 
+ * @param    inContentRecord    The contentRecord that this is an ordinal for. 
  * @param    inOrdinalNumber    The ordinal number itself. 
  * @return   A newly created ordinal.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newOrdinal = function (inIdentifiedRecord, inOrdinalNumber) {
+StubVirtualServer.prototype.newOrdinal = function (inContentRecord, inOrdinalNumber) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var ordinal = new Ordinal(inIdentifiedRecord, this.__myWorld.getCurrentUser(), inOrdinalNumber);
+  var ordinal = new Ordinal(inContentRecord, this.__myWorld.getCurrentUser(), inOrdinalNumber);
   this._currentTransaction.addRecord(ordinal);
   // this.__myChronologicalListOfNewlyCreatedRecords.push(ordinal);
   return ordinal;
@@ -276,14 +276,14 @@
  * Returns a newly created vote.
  *
  * @scope    public instance method
- * @param    inIdentifiedRecord    The identifiedRecord to attach this vote to. 
+ * @param    inContentRecord    The contentRecord to attach this vote to. 
  * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  * @return   A newly created vote.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newVote = function (inIdentifiedRecord, inRetainFlag) {
+StubVirtualServer.prototype.newVote = function (inContentRecord, inRetainFlag) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var vote = new Vote(inIdentifiedRecord, this.__myWorld.getCurrentUser(), inRetainFlag);
+  var vote = new Vote(inContentRecord, this.__myWorld.getCurrentUser(), inRetainFlag);
   this._currentTransaction.addRecord(vote);
   // this.__myChronologicalListOfNewlyCreatedRecords.push(vote);
   return vote;
@@ -545,7 +545,7 @@
     }
   }
   
-  listOfQueryResultItems.sort(IdentifiedRecord.compareOrdinals);
+  listOfQueryResultItems.sort(ContentRecord.compareOrdinals);
   return listOfQueryResultItems; 
 };
 
@@ -607,7 +607,7 @@
       listOfItems.push(item);
     }
   }
-  listOfItems.sort(IdentifiedRecord.compareOrdinals);
+  listOfItems.sort(ContentRecord.compareOrdinals);
   return listOfItems; 
 };
 
@@ -637,7 +637,7 @@
  * @param    inUuid    The UUID of the item or entry to be returned. 
  * @return   The item or entry identified by the given UUID.
  */
-StubVirtualServer.prototype._getIdentifiedRecordFromUuid = function (inUuid) {
+StubVirtualServer.prototype._getContentRecordFromUuid = function (inUuid) {
   var item = this.getItemFromUuid(inUuid);
   if (item) {
     return item;

Modified: trunk/source/model/Vote.js
===================================================================
--- trunk/source/model/Vote.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/Vote.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -32,7 +32,7 @@
 // -------------------------------------------------------------------
 // Dependencies:
 //   User.js
-//   IdentifiedRecord.js
+//   ContentRecord.js
 // -------------------------------------------------------------------
 
 /**
@@ -40,13 +40,13 @@
  * an item or a entry of an item.
  *
  * @scope    public instance constructor
- * @param    inIdentifiedRecord    The item or entry that this vote is attached to. 
+ * @param    inContentRecord    The item or entry that this vote is attached to. 
  * @param    inUser    The user who voted. 
  * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  * @param    inTimestamp    Optional. The time the vote was made. 
  */
-function Vote(inIdentifiedRecord, inUser, inRetainFlag, inTimestamp) {
-  this.__myIdentifiedRecord = inIdentifiedRecord;
+function Vote(inContentRecord, inUser, inRetainFlag, inTimestamp) {
+  this.__myContentRecord = inContentRecord;
   this.__myUserstamp = inUser;
   this.__myRetainFlag = inRetainFlag;
   if (inTimestamp) {
@@ -54,11 +54,11 @@
   } else {
     this.__myTimestamp = new Date();
   }
-  this.__myIdentifiedRecord._addVote(this);
+  this.__myContentRecord._addVote(this);
 }
 
-Vote.prototype.getIdentifiedRecord = function () {
-  return this.__myIdentifiedRecord;
+Vote.prototype.getContentRecord = function () {
+  return this.__myContentRecord;
 };
 
 Vote.prototype.getTimestamp = function () {

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-16 17:49:03 UTC (rev 147)
+++ trunk/source/model/World.js	2005-06-16 20:01:15 UTC (rev 148)
@@ -194,7 +194,7 @@
       item = record;
     }
     if ((record instanceof Vote) || (record instanceof Ordinal)) {
-      itemOrEntry = record.getIdentifiedRecord();
+      itemOrEntry = record.getContentRecord();
       if (itemOrEntry instanceof Item) {
         item = itemOrEntry;
       }
@@ -342,7 +342,7 @@
       break;
   }
 
-  filteredList.sort(IdentifiedRecord.compareOrdinals);
+  filteredList.sort(ContentRecord.compareOrdinals);
   return filteredList;
 };
 
@@ -707,13 +707,13 @@
  * Returns a newly created ordinal.
  *
  * @scope    protected instance method
- * @param    identifiedRecord    The identifiedRecord that this is an ordinal for. 
+ * @param    contentRecord    The contentRecord that this is an ordinal for. 
  * @param    ordinalNumber    The ordinal number itself. 
  * @return   A newly created ordinal.
  */
-World.prototype._newOrdinal = function(identifiedRecord, ordinalNumber) {
+World.prototype._newOrdinal = function(contentRecord, ordinalNumber) {
   this.beginTransaction();
-  var ordinal = this._virtualServer.newOrdinal(identifiedRecord, ordinalNumber);
+  var ordinal = this._virtualServer.newOrdinal(contentRecord, ordinalNumber);
   this.endTransaction();
   return ordinal;
 };
@@ -723,13 +723,13 @@
  * Returns a newly created vote.
  *
  * @scope    protected instance method
- * @param    identifiedRecord    The identifiedRecord to attach this vote to. 
+ * @param    contentRecord    The contentRecord to attach this vote to. 
  * @param    retainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  * @return   A newly created vote.
  */
-World.prototype._newVote = function(identifiedRecord, retainFlag) {
+World.prototype._newVote = function(contentRecord, retainFlag) {
   this.beginTransaction();
-  var vote = this._virtualServer.newVote(identifiedRecord, retainFlag);
+  var vote = this._virtualServer.newVote(contentRecord, retainFlag);
   this.endTransaction();
   return vote;
 };



From chaolam at sheep.berlios.de  Thu Jun 16 22:57:57 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 16 Jun 2005 22:57:57 +0200
Subject: [openrecord-svn] r149 - in trunk/source: . model
Message-ID: <200506162057.j5GKvvNd031895@sheep.berlios.de>

Author: chaolam
Date: 2005-06-16 22:57:56 +0200 (Thu, 16 Jun 2005)
New Revision: 149

Modified:
   trunk/source/TextView.js
   trunk/source/Util.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
Log:
1) Fixed numerous bugs associated with new query system and support for Dates
2) Added unit tests to prevent same bugs

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-16 20:01:15 UTC (rev 148)
+++ trunk/source/TextView.js	2005-06-16 20:57:56 UTC (rev 149)
@@ -306,7 +306,7 @@
             break;
           case typeCalledDate:
             var dateVal = Date.parse(value);
-            if (dateVal != NaN) {return new Date(value);}
+            if (!isNaN(dateVal)) {return new Date(value);}
             break;
           default:
             if (aType.isInCategory(categoryCalledCategory)) {
@@ -338,9 +338,11 @@
     var oldValue = this._entry.getValue();
     if (oldValue != value) {
       this._entry = this._item.replaceEntry(this._entry, value);
+      this._restoreText(true);
     }
   } else if (value) {
     this._entry = this._item.addEntryForAttribute(this._attribute, value);
+    this._restoreText(true);
   }
 };
 
@@ -362,11 +364,15 @@
  *
  * @scope    private instance method
  */
-TextView.prototype._restoreText = function() {
-  Util.assert(this._isEditing);
+TextView.prototype._restoreText = function(dontSelect) {
   var oldText = (this._entry) ?  this._entry.getDisplayString() : '';
-  this._editField.value = oldText;
-  this._editField.select();
+  if (this._isEditing) {
+    this._editField.value = oldText;
+  }
+  else {
+    this._textNode.data = oldText;
+  }
+  if (!dontSelect) {this._editField.select();}
 };
 
 

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-16 20:01:15 UTC (rev 148)
+++ trunk/source/Util.js	2005-06-16 20:57:56 UTC (rev 149)
@@ -61,7 +61,7 @@
 Util.ASCII_VALUE_FOR_RETURN = 13;
 Util.ASCII_VALUE_FOR_TAB = 9;
 Util.ASCII_VALUE_FOR_ESCAPE = 27;
-
+Util.ABBREV_MONTHS_ARRAY = new Array("Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec");
 // &#37; = %
 // &#38; = &
 // &#39; = '

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-16 20:01:15 UTC (rev 148)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-16 20:57:56 UTC (rev 149)
@@ -298,9 +298,11 @@
           case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE:
             finalData = rawData;
             break;
-          case DeltaVirtualServer.JSON_TYPE_Date_VALUE:
+          case DeltaVirtualServer.JSON_TYPE_DATE_VALUE:
             finalData = new Date(rawData);
             break;
+          default:
+            Util.assert(false,'Unknown data type while _rehydrating()');
         }
         var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
         var itemOrEntry = previousEntry || item;

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-16 20:01:15 UTC (rev 148)
+++ trunk/source/model/Entry.js	2005-06-16 20:57:56 UTC (rev 149)
@@ -224,13 +224,15 @@
  * @return   A string representing the literal data in this entry.
  */
 Entry.prototype.getDisplayString = function () {
-  var returnString = "";
   if (this.__myValue instanceof Item) {
-    returnString += this.__myValue.getDisplayName();
-  } else {
-    returnString += "" + this.__myValue;
+    return this.__myValue.getDisplayName();
+  } else if (this.__myValue instanceof Date) {
+    var aDate = this.__myValue;
+    return Util.ABBREV_MONTHS_ARRAY[aDate.getMonth()] + ' ' + aDate.getDate() + ', '+ (aDate.getYear()+1900);
   }
-  return returnString;
+  else {
+    return "" + this.__myValue;
+  }
 };
 
 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-16 20:01:15 UTC (rev 148)
+++ trunk/source/model/ModelTest.js	2005-06-16 20:57:56 UTC (rev 149)
@@ -571,14 +571,22 @@
   var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
   listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
   assertTrue('North America query returned only Seattle',
-    listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
+  listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
     
-  seattle.replaceEntry(seattleEntry, "Asia");
-  var listOfCountries = world.getResultItemsForQuery(asiaQuery);
+  seattle.addEntryForAttribute(attributeCalledContinent, "Asia");
+  listOfCountries = world.getResultItemsForQuery(asiaQuery);
   assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
   hasAll = Util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
   assertTrue('Asia query returns all 3 countries', hasAll);
   
+  world.setItemToBeIncludedInQueryResultList(beijing, northAmericaQuery);
+  listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
+  assertTrue('Beijing is now in North America',Util.isObjectInSet(beijing,listOfCountries));
+  assertTrue('North America query returns 2 countries',listOfCountries.length == 2);
+  world.setItemToBeIncludedInQueryResultList(seattle, northAmericaQuery);
+  listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
+  assertTrue('North America still returns only 2 countries',listOfCountries.length == 2);
+  
   world.logout();
 }
 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-16 20:01:15 UTC (rev 148)
+++ trunk/source/model/StubVirtualServer.js	2005-06-16 20:57:56 UTC (rev 149)
@@ -582,7 +582,7 @@
   for (var key in listOfMatchingEntries) {
     var matchingEntry = listOfMatchingEntries[key];
     var match = matchingEntry.getValue();
-    if (!(inItem.isInCategory(match))) {
+    if (!inItem.hasAttributeValue(matchingAttribute, match)) {
       inItem.addEntryForAttribute(matchingAttribute, match);
     }
   }



From chaolam at sheep.berlios.de  Thu Jun 16 23:29:38 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 16 Jun 2005 23:29:38 +0200
Subject: [openrecord-svn] r150 - trunk/source/model
Message-ID: <200506162129.j5GLTcs6000847@sheep.berlios.de>

Author: chaolam
Date: 2005-06-16 23:29:37 +0200 (Thu, 16 Jun 2005)
New Revision: 150

Modified:
   trunk/source/model/StubVirtualServer.js
Log:
Relaxed assert in StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList, and return Query if not fully formed yet

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-16 20:57:56 UTC (rev 149)
+++ trunk/source/model/StubVirtualServer.js	2005-06-16 21:29:37 UTC (rev 150)
@@ -568,7 +568,7 @@
 
   var listOfMatchingEntries = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
   var listOfMatchingAttrs = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
-  Util.assert(listOfMatchingEntries && (listOfMatchingEntries.length > 0));
+  if (!(listOfMatchingEntries && (listOfMatchingEntries.length > 0))) {return;} // query not fully formed, so nothing to add
   var matchingAttribute;
   if (listOfMatchingAttrs.length === 0) {
     // by default matching attribute is category



From skinner at sheep.berlios.de  Fri Jun 17 00:25:04 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 17 Jun 2005 00:25:04 +0200
Subject: [openrecord-svn] r151 - in trunk/source: . model
Message-ID: <200506162225.j5GMP4Pn004454@sheep.berlios.de>

Author: skinner
Date: 2005-06-17 00:25:02 +0200 (Fri, 17 Jun 2005)
New Revision: 151

Added:
   trunk/source/model/Record.js
Modified:
   trunk/source/demo_page.html
   trunk/source/model/ContentRecord.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/LintTest.js
   trunk/source/model/ModelTest.html
   trunk/source/model/Ordinal.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/Vote.js
Log:
Got deletion working.  Got the data model to correctly save votes in JSON and load them back again.

Modified: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/demo_page.html	2005-06-16 22:25:02 UTC (rev 151)
@@ -33,6 +33,7 @@
     <script type="text/javascript" src="BarChartPlugin.js"></script>
 
     <script type="text/javascript" src="model/Ordinal.js"></script>
+    <script type="text/javascript" src="model/Record.js"></script>
     <script type="text/javascript" src="model/Vote.js"></script>
     <script type="text/javascript" src="model/ContentRecord.js"></script>
     <script type="text/javascript" src="model/Item.js"></script>

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/ContentRecord.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -2,7 +2,9 @@
  ContentRecord.js
  
 ******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
   
  Copyright rights relinquished under the Creative Commons  
  Public Domain Dedication:
@@ -44,33 +46,27 @@
  * @scope    public instance constructor
  * @syntax   DO NOT CALL THIS CONSTRUCTOR
  */
+ContentRecord.prototype = new Record();  // makes ContentRecord be a subclass of Record
 function ContentRecord() {
+  // Don't create these properties until we know we need them.
+  // this._setOfVotes = null;
+  // this._setOfOrdinals = null;
 }
 
 
 // -------------------------------------------------------------------
-// Protected methods
+// Package/module methods           
 // -------------------------------------------------------------------
 
 /**
  * Called from the constructor function of each subclass of ContentRecord.
  *
  * @scope    protected instance method
- * @param    inWorld    The world that this ContentRecord is a part of. 
- * @param    inUuid    The UUID for this ContentRecord. 
+ * @param    world    The world that this ContentRecord is a part of. 
+ * @param    uuid    The UUID for this ContentRecord. 
  */
-ContentRecord.prototype._ContentRecord = function (inWorld, inUuid) {
-  // Util.assert(!inUuid || Util.isNumeric(inUuid));
-  
-  this.__myWorld = inWorld;
-  this.__myUuid = inUuid;
-  
-  this.__myCreationTimestamp = null;
-  this.__myCreationUserstamp = null;
-
-  // Don't create these properties until we know we need them.
-  // this.__mySetOfVotes = null;
-  // this.__mySetOfOrdinals = null;
+ContentRecord.prototype._ContentRecord = function(world, uuid) {
+  this._Record(world, uuid);
 };
 
 
@@ -81,53 +77,21 @@
  *
  * @scope    protected instance method
  */
-ContentRecord.prototype._initializeContentRecord = function () {
+ContentRecord.prototype._initializeContentRecord = function() {
 };
 
 
 /**
- * Sets the properties of a newly rehydrated contentRecord object.
- *
- * WARNING: This method should be called ONLY from subclasses.
- *
- * @scope    protected instance method
- * @param    inTimestamp    A Date object with the creation timestamp for this item. 
- * @param    inUserstamp    The user who created this item. 
- */
-ContentRecord.prototype._rehydrateContentRecord = function (inTimestamp, inUserstamp) {
-  this.__myCreationTimestamp = inTimestamp;
-  this.__myCreationUserstamp = inUserstamp;
-};
-
-
-/**
- * Returns the UUID of the item. 
- *
- * WARNING: This method should be called ONLY from a 
- * VirtualServer implementation.
- *
- * If you're writing code in the view layer, call
- * item.getUniqueKeyString() instead of item._getUuid();
- *
- * @scope    protected instance method
- * @return   The UUID of the item.
- */
-ContentRecord.prototype._getUuid = function () {
-  return this.__myUuid;
-};
-
-
-/**
  * Records a user's vote to retain or delete this ContentRecord.
  *
  * @scope    protected instance method
- * @param    inVote    A vote to retain or delete this ContentRecord. 
+ * @param    vote    A vote to retain or delete this ContentRecord. 
  */
-ContentRecord.prototype._addVote = function (inVote) {
-  if (!this.__mySetOfVotes) {
-    this.__mySetOfVotes = [];
+ContentRecord.prototype._addVote = function(vote) {
+  if (!this._setOfVotes) {
+    this._setOfVotes = [];
   }
-  this.__mySetOfVotes.push(inVote);
+  this._setOfVotes.push(vote);
 };
 
 
@@ -135,13 +99,13 @@
  * Records the ordinal number that a user sets for this ContentRecord.
  *
  * @scope    protected instance method
- * @param    inOrdinal    A vote to retain or delete this ContentRecord. 
+ * @param    ordinal    A vote to retain or delete this ContentRecord. 
  */
-ContentRecord.prototype._addOrdinal = function (inOrdinal) {
-  if (!this.__mySetOfOrdinals) {
-    this.__mySetOfOrdinals = [];
+ContentRecord.prototype._addOrdinal = function(ordinal) {
+  if (!this._setOfOrdinals) {
+    this._setOfOrdinals = [];
   }
-  this.__mySetOfOrdinals.push(inOrdinal);
+  this._setOfOrdinals.push(ordinal);
 };
 
 
@@ -150,97 +114,14 @@
 // -------------------------------------------------------------------
 
 /**
- * Returns the world that this item was created in.
- *
- * @scope    public instance method
- * @return   A world object.
- */
-ContentRecord.prototype.getWorld = function () {
-  return this.__myWorld;
-};
-
-
-/**
- * Returns a Date object with the creation timestamp for this item.
- *
- * @scope    public instance method
- * @return   A Date object.
- */
-ContentRecord.prototype.getTimestamp = function() {
-  if (this.__myCreationTimestamp) {
-    // This case is now here only for the (temporary) benefit of _rehydrateContentRecord.
-    return this.__myCreationTimestamp;
-  }
-  var hexTimeLow = this.__myUuid.split('-')[0];
-  var hexTimeMid = this.__myUuid.split('-')[1];
-  var hexTimeHigh = this.__myUuid.split('-')[2];
-  var timeLow = parseInt(hexTimeLow, Util.HEX_RADIX);
-  var timeMid = parseInt(hexTimeMid, Util.HEX_RADIX);
-  var timeHigh = parseInt(hexTimeHigh, Util.HEX_RADIX);
-  var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
-  hundredNanosecondIntervalsSince1582 <<= 16;
-  hundredNanosecondIntervalsSince1582 += timeMid;
-  // What we really want to do next is shift left 32 bits, but the result will be too big
-  // to fit in an int, so we'll multiply by 2^32, and the result will be a floating point approximation.
-  hundredNanosecondIntervalsSince1582 *= 0x100000000;
-  hundredNanosecondIntervalsSince1582 += timeLow;
-  var millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;
-
-  // Again, this will be a floating point approximation.
-  // We can make things exact later if we need to.
-  var secondsPerHour = 60 * 60;
-  var hoursBetween1582and1970 = Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS;
-  var secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;
-  var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
-
-  var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
-  return millisecondsSince1970;
-};
-
-
-/**
- * Returns the item representing the user who created this item.
- *
- * @scope    public instance method
- * @return   A user item.
- */
-ContentRecord.prototype.getUserstamp = function() {
-  if (this.__myCreationUserstamp) {
-    // This case is now here only for the (temporary) benefit of _rehydrateContentRecord.
-    return this.__myCreationUserstamp;
-  }
-  var allUsers = this.__myWorld.getUsers();
-  var myPseudonode = this.__myUuid.split('-')[4];
-  for (key in allUsers) {
-    var usersPseudonode = allUsers[key]._getUuid().split('-')[4];
-    if (usersPseudonode == myPseudonode) {
-      return allUsers[key];
-    }
-  }
-  throw new Error("User not found.  Database may be corrupted.");
-};
-
-
-/**
- * Returns a string which can be used as a unique key in a hash table. 
- *
- * @scope    public instance method
- * @return   A string which can serve as a unique key.
- */
-ContentRecord.prototype.getUniqueKeyString = function () {
-  return this.__myUuid;
-};
-
-
-/**
  * Returns the ordinal number that this contentRecord was given at creation. 
  *
  * @scope    public instance method
  * @return   A number.
  */
-ContentRecord.prototype.getOrdinalNumberAtCreation = function () {
-  // return (0 - this.__myCreationTimestamp.valueOf());
-  return (0 - this.__myUuid);
+ContentRecord.prototype.getOrdinalNumberAtCreation = function() {
+  // return (0 - this._creationTimestamp.valueOf());
+  return (0 - this._uuid);
 };
 
 
@@ -254,15 +135,15 @@
  * @scope    public instance method
  * @return   A number.
  */
-ContentRecord.prototype.getOrdinalNumber = function () {
-  if (!this.__mySetOfOrdinals || this.__mySetOfOrdinals.length === 0) {
+ContentRecord.prototype.getOrdinalNumber = function() {
+  if (!this._setOfOrdinals || this._setOfOrdinals.length === 0) {
     return this.getOrdinalNumberAtCreation();
   }
 
   var ordinalNumber = this.getOrdinalNumberAtCreation();
   var key;
   var ordinal;
-  var filter = this.__myWorld.getRetrievalFilter();
+  var filter = this._world.getRetrievalFilter();
   
   switch (filter) {
     case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
@@ -274,9 +155,9 @@
       //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
       //   for now the simplest thing to do is just move on to APPROACH B:
       /*
-      var mostRecentOrdinal = this.__mySetOfOrdinals[0];
-      for (key in this.__mySetOfOrdinals) {
-        ordinal = this.__mySetOfOrdinals[key];
+      var mostRecentOrdinal = this._setOfOrdinals[0];
+      for (key in this._setOfOrdinals) {
+        ordinal = this._setOfOrdinals[key];
         if (ordinal.getTimestamp() > mostRecentOrdinal.getTimestamp()) {
           mostRecentOrdinal = ordinal;
         }
@@ -286,7 +167,7 @@
       // APPROACH B: 
       //   This works, provided __mySetOfOrdinals is always initialized in
       //   chronological order.
-      var mostRecentOrdinal = this.__mySetOfOrdinals[this.__mySetOfOrdinals.length - 1];
+      var mostRecentOrdinal = this._setOfOrdinals[this._setOfOrdinals.length - 1];
 
       ordinalNumber = mostRecentOrdinal.getOrdinalNumber();
       break;
@@ -317,15 +198,15 @@
  * @scope    public instance method
  * @return   A boolean.
  */
-ContentRecord.prototype.hasBeenDeleted = function () {
-  if (!this.__mySetOfVotes || this.__mySetOfVotes.length === 0) {
+ContentRecord.prototype.hasBeenDeleted = function() {
+  if (!this._setOfVotes || this._setOfVotes.length === 0) {
     return false;
   }
   
   var hasBeenDeleted = false;
   var key;
   var vote;
-  var filter = this.__myWorld.getRetrievalFilter();
+  var filter = this._world.getRetrievalFilter();
   
   switch (filter) {
     case World.RETRIEVAL_FILTER_LAST_EDIT_WINS:
@@ -337,9 +218,9 @@
       //   resolution.  For example, see scrap_yard/Timestamp.js.  However,
       //   for now the simplest thing to do is just move on to APPROACH B:
       /*
-      var mostRecentVote = this.__mySetOfVotes[0];
-      for (key in this.__mySetOfVotes) {
-        vote = this.__mySetOfVotes[key];
+      var mostRecentVote = this._setOfVotes[0];
+      for (key in this._setOfVotes) {
+        vote = this._setOfVotes[key];
         if (vote.getTimestamp() > mostRecentVote.getTimestamp()) {
           mostRecentVote = vote;
         }
@@ -349,7 +230,7 @@
       // APPROACH B: 
       //   This works, provided __mySetOfVotes is always initialized in
       //   chronological order.
-      var mostRecentVote = this.__mySetOfVotes[this.__mySetOfVotes.length - 1];
+      var mostRecentVote = this._setOfVotes[this._setOfVotes.length - 1];
       
       hasBeenDeleted = !mostRecentVote.getRetainFlag();
       break;
@@ -379,20 +260,20 @@
  * that this contentRecord appears between two other entries.
  *
  * @scope    public instance method
- * @param    inContentRecordFirst    The contentRecord that should come before this one. 
- * @param    inContentRecordThird    The contentRecord that should come after this one. 
+ * @param    contentRecordFirst    The contentRecord that should come before this one. 
+ * @param    contentRecordThird    The contentRecord that should come after this one. 
  */
-ContentRecord.prototype.reorderBetween = function (inContentRecordFirst, inContentRecordThird) {
+ContentRecord.prototype.reorderBetween = function(contentRecordFirst, contentRecordThird) {
   var firstOrdinalNumber = null;
   var secondOrdinalNumber = null;
   var thirdOrdinalNumber = null;
   var arbitraryNumberToMoveUsUpOrDownSlightly = 0.01;
   
-  if (inContentRecordFirst) {
-    firstOrdinalNumber = inContentRecordFirst.getOrdinalNumber();
+  if (contentRecordFirst) {
+    firstOrdinalNumber = contentRecordFirst.getOrdinalNumber();
   }
-  if (inContentRecordThird) {
-    thirdOrdinalNumber = inContentRecordThird.getOrdinalNumber();
+  if (contentRecordThird) {
+    thirdOrdinalNumber = contentRecordThird.getOrdinalNumber();
   }
   
   if (firstOrdinalNumber && thirdOrdinalNumber) {
@@ -414,7 +295,7 @@
  *
  * @scope    public instance method
  */
-ContentRecord.prototype.voteToDelete = function () {
+ContentRecord.prototype.voteToDelete = function() {
   this.getWorld()._newVote(this, false);
 };
 
@@ -424,7 +305,7 @@
  *
  * @scope    public instance method
  */
-ContentRecord.prototype.voteToRetain = function () {
+ContentRecord.prototype.voteToRetain = function() {
   this.getWorld()._newVote(this, true);
 };
 
@@ -438,9 +319,9 @@
  *
  * @scope    public class method
  */
-ContentRecord.compareOrdinals = function (inContentRecordOne, inContentRecordTwo) {
-  var ordinalNumberOne = inContentRecordOne.getOrdinalNumber();
-  var ordinalNumberTwo = inContentRecordTwo.getOrdinalNumber();
+ContentRecord.compareOrdinals = function(contentRecordOne, contentRecordTwo) {
+  var ordinalNumberOne = contentRecordOne.getOrdinalNumber();
+  var ordinalNumberTwo = contentRecordTwo.getOrdinalNumber();
   return (ordinalNumberTwo - ordinalNumberOne);
 };
 

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -247,27 +247,36 @@
       // var userstampUuid = contents[DeltaVirtualServer.JSON_MEMBER_USERSTAMP];
       // var timestamp = new Date(new Number(timestampString));
       // var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
-      var timestamp = null;
-      var userstamp = null;
+      // var timestamp = null;
+      // var userstamp = null;
       
       if (dehydratedItem) {
         itemUuid = dehydratedItem[DeltaVirtualServer.JSON_MEMBER_UUID];
         item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
-        item._rehydrate(timestamp, userstamp);
         this.__myChronologicalListOfRecords.push(item);
       }
       if (dehydratedVote) {
-        var retainFlag = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG];
+        var voteUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_UUID];
+        var retainFlagString = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG];
+        var retainFlag = null;
+        if (retainFlagString == "true") {
+          retainFlag = true;
+        }
+        if (retainFlagString == "false") {
+          retainFlag = false;
+        }
+        Util.assert(retainFlag !== null);
         contentRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
         contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var vote = new Vote(contentRecord, userstamp, retainFlag, timestamp);
+        var vote = new Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
         this.__myChronologicalListOfRecords.push(vote);
       }
       if (dehydratedOrdinal) {
-        var ordinalNumber = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
-        contentRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
+        var ordinalUuid = dehydratedOrdinal[DeltaVirtualServer.JSON_MEMBER_UUID];
+        var ordinalNumber = dehydratedOrdinal[DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
+        contentRecordUuid = dehydratedOrdinal[DeltaVirtualServer.JSON_MEMBER_RECORD];
         contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var ordinal = new Ordinal(contentRecord, userstamp, ordinalNumber, timestamp);
+        var ordinal = new Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
         this.__myChronologicalListOfRecords.push(ordinal);
       }
       if (dehydratedEntry) {
@@ -306,7 +315,7 @@
         }
         var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
         var itemOrEntry = previousEntry || item;
-        entry._rehydrate(itemOrEntry, attribute, finalData, timestamp, userstamp, dataType);
+        entry._rehydrate(itemOrEntry, attribute, finalData, dataType);
         this.__myChronologicalListOfRecords.push(entry);
       }
     }
@@ -438,6 +447,7 @@
   var listOfStrings = [];
   var firstContentRecord = true;
   var itemDisplayNameSubstring;
+  var entryDisplayNameSubstring;
 
   for (key in inListOfRecords) {
     var record = inListOfRecords[key];
@@ -456,20 +466,25 @@
     }
     if (record instanceof Vote) {
       var vote = record;
-      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getContentRecord()._getUuid() + '",\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
+      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{');
+      entryDisplayNameSubstring = this.truncateString(vote.getContentRecord().getDisplayString());
+      var deleteVsRetainString = vote.getRetainFlag() ? "RETAIN" : "DELETE";
+      listOfStrings.push('                                              // vote to ' + deleteVsRetainString + " " + entryDisplayNameSubstring + '\n');
+      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + vote._getUuid() + '",\n');
+      listOfStrings.push(indent + '       "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getContentRecord()._getUuid() + '",\n');
+      listOfStrings.push(indent + '   "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
     }
     if (record instanceof Ordinal) {
       var ordinal = record;
       listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + ordinal._getUuid() + '",\n');
       listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getContentRecord()._getUuid() + '",\n');
       listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
     }
     if (record instanceof Entry) {
       var entry = record;
       listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{');
-      var entryDisplayNameSubstring = this.truncateString(entry.getDisplayString());
+      entryDisplayNameSubstring = this.truncateString(entry.getDisplayString());
       listOfStrings.push('                                              // ' + entryDisplayNameSubstring + '\n');
       listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + entry._getUuid() + '",\n');
       var attribute = entry.getAttribute();

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/Entry.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -54,6 +54,7 @@
 Entry.prototype = new ContentRecord();  // makes Entry be a subclass of ContentRecord
 function Entry(inWorld, inUuid) {
   this._ContentRecord(inWorld, inUuid);
+  // this._Record(inWorld, inUuid);
  
   this.__myPreviousEntry = null;
   this.__myListOfSubsequentEntries = [];
@@ -137,8 +138,9 @@
  * @param    inTimestamp    A Date object with the creation timestamp for this entry. 
  * @param    inUserstamp    The user who created this entry. 
  */
-Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inTimestamp, inUserstamp, inType) {
-  this._rehydrateContentRecord(inTimestamp, inUserstamp);
+// Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inTimestamp, inUserstamp, inType) {
+Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inType) {
+  // this._rehydrateContentRecord(inTimestamp, inUserstamp);
 
   if (inItemOrEntry instanceof Entry) {
     this.__myPreviousEntry = inItemOrEntry;

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/Item.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -55,6 +55,7 @@
 Item.prototype = new ContentRecord();  // makes Item be a subclass of ContentRecord
 function Item(inWorld, inUuid) {
   this._ContentRecord(inWorld, inUuid);
+  // this._Record(inWorld, inUuid);
   
   this.__myHashTableOfEntryListsKeyedByAttributeUuid = {};
   this.__myProvisionalFlag = false;
@@ -87,25 +88,6 @@
 };
 
 
-/**
- * Sets the properties of a newly rehydrated item object.
- *
- * WARNING: This method should be called ONLY from a 
- * VirtualServer implementation.
- *
- * This method should only be called from VirtualServer code that is
- * rehydrating dehydrated item objects. 
- *
- * @scope    protected instance method
- * @param    inTimestamp    A Date object with the creation timestamp for this item. 
- * @param    inUserstamp    The user who created this item. 
- */
-Item.prototype._rehydrate = function (inTimestamp, inUserstamp) {
-  this.__myProvisionalFlag = false;
-  this._rehydrateContentRecord(inTimestamp, inUserstamp);
-};
-
-
 // -------------------------------------------------------------------
 // Entry adding methods
 // -------------------------------------------------------------------

Modified: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/LintTest.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -37,6 +37,7 @@
     "Ordinal.js",
     "Vote.js",
     "ContentRecord.js",
+    "Record.js",
     "Item.js",
     "Entry.js",
     "Transaction.js",

Modified: trunk/source/model/ModelTest.html
===================================================================
--- trunk/source/model/ModelTest.html	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/ModelTest.html	2005-06-16 22:25:02 UTC (rev 151)
@@ -16,6 +16,7 @@
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="../Util.js"></script>
+    <script type="text/javascript" src="Record.js"></script>
     <script type="text/javascript" src="Ordinal.js"></script>
     <script type="text/javascript" src="Vote.js"></script>
     <script type="text/javascript" src="ContentRecord.js"></script>

Modified: trunk/source/model/Ordinal.js
===================================================================
--- trunk/source/model/Ordinal.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/Ordinal.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -40,37 +40,38 @@
  * a user set an ordinal number for an item or a entry of an item.
  *
  * @scope    public instance constructor
- * @param    inContentRecord    The item or entry that this vote is attached to. 
- * @param    inUser    The user who voted. 
+ * @param    world    The world that this Ordinal is a part of. 
+ * @param    uuid    The UUID for this Ordinal. 
+ * @param    contentRecord    The item or entry that this ordinal is attached to. 
  * @param    inOrdinalNumber    The ordinal number itself. 
- * @param    inTimestamp    Optional. The time the vote was made. 
  */
-function Ordinal(inContentRecord, inUser, inOrdinalNumber, inTimestamp) {
-  this.__myContentRecord = inContentRecord;
-  this.__myUserstamp = inUser;
-  this.__myOrdinalNumber = inOrdinalNumber;
-  if (inTimestamp) {
-    this.__myTimestamp = inTimestamp;
-  } else {
-    this.__myTimestamp = new Date();
-  }
-  this.__myContentRecord._addOrdinal(this);
+Ordinal.prototype = new Record();  // makes Ordinal be a subclass of Record
+function Ordinal(world, uuid, contentRecord, ordinalNumber) {
+  this._contentRecord = contentRecord;
+  this._ordinalNumber = ordinalNumber;
+  this._contentRecord._addOrdinal(this);
 }
 
+
+/**
+ * Returns the item or entry that this ordinal applies to.
+ *
+ * @scope    public instance method
+ * @return   An item or entry.
+ */
 Ordinal.prototype.getContentRecord = function () {
-  return this.__myContentRecord;
+  return this._contentRecord;
 };
 
-Ordinal.prototype.getTimestamp = function () {
-  return this.__myTimestamp;
-};
 
-Ordinal.prototype.getUserstamp = function () {
-  return this.__myUserstamp;
-};
-
+/**
+ * Returns an ordinal number.
+ *
+ * @scope    public instance method
+ * @return   An ordinal number.
+ */
 Ordinal.prototype.getOrdinalNumber = function () {
-  return this.__myOrdinalNumber;
+  return this._ordinalNumber;
 };
 
 

Added: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/Record.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -0,0 +1,180 @@
+/*****************************************************************************
+ Record.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
+    
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+/**
+ * The Record class serves as an abstract superclass for the classes Vote,
+ * Ordinal, and ContentRecord.  ContentRecord is the abstract superclass
+ * for Item and Entry.
+ *
+ * @scope    public instance constructor
+ * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ */
+function Record() {
+  // Don't create these properties until we know we need them.
+  // this._creationTimestamp = null;
+  // this._creationUserstamp = null;
+}
+
+
+// -------------------------------------------------------------------
+// Package/module methods           
+// -------------------------------------------------------------------
+
+/**
+ * Called from the constructor function of each subclass of Record.
+ *
+ * @scope    protected instance method
+ * @param    world    The world that this Record is a part of. 
+ * @param    uuid    The UUID for this Record. 
+ */
+Record.prototype._Record = function(world, uuid) {
+  Util.assert(Util.isUuid(uuid));
+  
+  this._world = world;
+  this._uuid = uuid;
+};
+
+
+
+// -------------------------------------------------------------------
+// Simple accessor methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the world that this item was created in.
+ *
+ * @scope    public instance method
+ * @return   A world object.
+ */
+Record.prototype.getWorld = function() {
+  return this._world;
+};
+
+
+/**
+ * Returns a string which can be used as a unique key in a hash table. 
+ *
+ * @scope    public instance method
+ * @return   A string which can serve as a unique key.
+ */
+Record.prototype.getUniqueKeyString = function() {
+  return this._uuid;
+};
+
+
+/**
+ * Returns the item representing the user who created this item.
+ *
+ * @scope    public instance method
+ * @return   A user item.
+ */
+Record.prototype.getUserstamp = function() {
+  if (this._creationUserstamp) {
+    return this._creationUserstamp;
+  }
+  var allUsers = this._world.getUsers();
+  var myPseudonode = this._uuid.split('-')[4];
+  for (key in allUsers) {
+    var usersPseudonode = allUsers[key]._getUuid().split('-')[4];
+    if (usersPseudonode == myPseudonode) {
+      this._creationUserstamp = allUsers[key];
+      return this._creationUserstamp;
+    }
+  }
+  throw new Error("We ran into item or entry that has a UUID which was not created by any known user.  The database may be corrupted.");
+};
+
+
+/**
+ * Returns a Date object with the creation timestamp for this item.
+ *
+ * @scope    public instance method
+ * @return   A Date object.
+ */
+Record.prototype.getTimestamp = function() {
+  if (this._creationTimestamp) {
+    // This case is now here only for the (temporary) benefit of _rehydrateContentRecord.
+    return this._creationTimestamp;
+  }
+  var hexTimeLow = this._uuid.split('-')[0];
+  var hexTimeMid = this._uuid.split('-')[1];
+  var hexTimeHigh = this._uuid.split('-')[2];
+  var timeLow = parseInt(hexTimeLow, Util.HEX_RADIX);
+  var timeMid = parseInt(hexTimeMid, Util.HEX_RADIX);
+  var timeHigh = parseInt(hexTimeHigh, Util.HEX_RADIX);
+  var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
+  hundredNanosecondIntervalsSince1582 <<= 16;
+  hundredNanosecondIntervalsSince1582 += timeMid;
+  // What we really want to do next is shift left 32 bits, but the result will be too big
+  // to fit in an int, so we'll multiply by 2^32, and the result will be a floating point approximation.
+  hundredNanosecondIntervalsSince1582 *= 0x100000000;
+  hundredNanosecondIntervalsSince1582 += timeLow;
+  var millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;
+
+  // Again, this will be a floating point approximation.
+  // We can make things exact later if we need to.
+  var secondsPerHour = 60 * 60;
+  var hoursBetween1582and1970 = Util.GREGORIAN_CHANGE_OFFSET_IN_HOURS;
+  var secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;
+  var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
+
+  var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
+  return millisecondsSince1970;
+};
+
+
+// -------------------------------------------------------------------
+// Package/module methods           
+// -------------------------------------------------------------------
+
+/**
+ * Returns the UUID of the item. 
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * If you're writing code in the view layer, call
+ * item.getUniqueKeyString() instead of item._getUuid();
+ *
+ * @scope    protected instance method
+ * @return   The UUID of the item.
+ */
+Record.prototype._getUuid = function() {
+  return this._uuid;
+};
+
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/StubVirtualServer.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -38,7 +38,6 @@
 //   Ordinal.js
 //   Entry.js
 //   Vote.js
-//   Vote.js
 // -------------------------------------------------------------------
 
 
@@ -225,7 +224,6 @@
  */
 StubVirtualServer.prototype._provisionalItemJustBecameReal = function (inItem) {
   this._currentTransaction.addRecord(inItem);
-  // this.__myChronologicalListOfNewlyCreatedRecords.push(inItem);
 };
 
 
@@ -245,11 +243,10 @@
   var entry = new Entry(this.__myWorld, uuid);
   entry._initialize(inItemOrEntry, inAttribute, inValue, inType);
   var item = inItemOrEntry instanceof Item ? inItemOrEntry : inItemOrEntry.getItem();
-  item.__addEntryToListOfEntriesForAttribute(entry); // PENDING eeks calling a protected method!
+  item.__addEntryToListOfEntriesForAttribute(entry);
   
   this.__myHashTableOfEntriesKeyedByUuid[uuid] = entry;
   this._currentTransaction.addRecord(entry);
-  // this.__myChronologicalListOfNewlyCreatedRecords.push(entry);
   return entry;
 };
  
@@ -265,9 +262,9 @@
  */
 StubVirtualServer.prototype.newOrdinal = function (inContentRecord, inOrdinalNumber) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var ordinal = new Ordinal(inContentRecord, this.__myWorld.getCurrentUser(), inOrdinalNumber);
+  var uuid = this._getNewUuid();
+  var ordinal = new Ordinal(this.__myWorld, uuid, inContentRecord, inOrdinalNumber);
   this._currentTransaction.addRecord(ordinal);
-  // this.__myChronologicalListOfNewlyCreatedRecords.push(ordinal);
   return ordinal;
 };
 
@@ -283,9 +280,10 @@
  */
 StubVirtualServer.prototype.newVote = function (inContentRecord, inRetainFlag) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var vote = new Vote(inContentRecord, this.__myWorld.getCurrentUser(), inRetainFlag);
+  var uuid = this._getNewUuid();
+  // var vote = new Vote(inContentRecord, this.__myWorld.getCurrentUser(), inRetainFlag);
+  var vote = new Vote(this.__myWorld, uuid, inContentRecord, inRetainFlag);
   this._currentTransaction.addRecord(vote);
-  // this.__myChronologicalListOfNewlyCreatedRecords.push(vote);
   return vote;
 };
 
@@ -461,7 +459,7 @@
  * @return   The item identified by the given UUID.
  */
 StubVirtualServer.prototype.getItemFromUuid = function (inUuid, inObserver) {
-  // Util.assert(Util.isUuid(inUuid));
+  Util.assert(Util.isUuid(inUuid));
   
   var item = this.__myHashTableOfItemsKeyedByUuid[inUuid];
   if (item && inObserver) {

Modified: trunk/source/model/Vote.js
===================================================================
--- trunk/source/model/Vote.js	2005-06-16 21:29:37 UTC (rev 150)
+++ trunk/source/model/Vote.js	2005-06-16 22:25:02 UTC (rev 151)
@@ -40,39 +40,44 @@
  * an item or a entry of an item.
  *
  * @scope    public instance constructor
- * @param    inContentRecord    The item or entry that this vote is attached to. 
- * @param    inUser    The user who voted. 
- * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
- * @param    inTimestamp    Optional. The time the vote was made. 
+ * @param    world    The world that this Vote is a part of. 
+ * @param    uuid    The UUID for this Vote. 
+ * @param    contentRecord    The item or entry that this vote is attached to. 
+ * @param    retainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  */
-function Vote(inContentRecord, inUser, inRetainFlag, inTimestamp) {
-  this.__myContentRecord = inContentRecord;
-  this.__myUserstamp = inUser;
-  this.__myRetainFlag = inRetainFlag;
-  if (inTimestamp) {
-    this.__myTimestamp = inTimestamp;
-  } else {
-    this.__myTimestamp = new Date();
-  }
-  this.__myContentRecord._addVote(this);
+Vote.prototype = new Record();  // makes Vote be a subclass of Record
+function Vote(world, uuid, contentRecord, retainFlag) {
+  this._Record(world, uuid);
+
+  this._contentRecord = contentRecord;
+  this._retainFlag = retainFlag;
+  this._contentRecord._addVote(this);
 }
 
+
+/**
+ * Returns the item or entry that this vote applies to.
+ *
+ * @scope    public instance method
+ * @return   An item or entry.
+ */
 Vote.prototype.getContentRecord = function () {
-  return this.__myContentRecord;
+  return this._contentRecord;
 };
 
-Vote.prototype.getTimestamp = function () {
-  return this.__myTimestamp;
-};
 
-Vote.prototype.getUserstamp = function () {
-  return this.__myUserstamp;
-};
-
+/**
+ * Returns a boolean value that tells whether this is a vote to retain or a 
+ * vote to delete.
+ *
+ * @scope    public instance method
+ * @return   A boolean. True if this is a vote to retain, or false if this is a vote to delete.
+ */
 Vote.prototype.getRetainFlag = function () {
-  return this.__myRetainFlag;
+  return this._retainFlag;
 };
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From skinner at sheep.berlios.de  Fri Jun 17 00:29:42 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 17 Jun 2005 00:29:42 +0200
Subject: [openrecord-svn] r152 - trunk/documentation
Message-ID: <200506162229.j5GMTgt4004769@sheep.berlios.de>

Author: skinner
Date: 2005-06-17 00:29:42 +0200 (Fri, 17 Jun 2005)
New Revision: 152

Modified:
   trunk/documentation/release_planning.txt
Log:
recorded actually time spent on tasks

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-16 22:25:02 UTC (rev 151)
+++ trunk/documentation/release_planning.txt	2005-06-16 22:29:42 UTC (rev 152)
@@ -159,6 +159,7 @@
 mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
 mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
 brian  | 0        | 0.5     |     Update the JSON repository file to use time-based UUIDs
+brian  | 0        | 0.25    |     Get deletion votes working again after switching to time-based UUIDs
 brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction



From skinner at sheep.berlios.de  Fri Jun 17 04:01:35 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 17 Jun 2005 04:01:35 +0200
Subject: [openrecord-svn] r153 - trunk/documentation
Message-ID: <200506170201.j5H21Z20011718@sheep.berlios.de>

Author: skinner
Date: 2005-06-17 04:01:31 +0200 (Fri, 17 Jun 2005)
New Revision: 153

Modified:
   trunk/documentation/release_planning.txt
Log:
deleted some "long term" tasks which are now done

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-16 22:29:42 UTC (rev 152)
+++ trunk/documentation/release_planning.txt	2005-06-17 02:01:31 UTC (rev 153)
@@ -279,11 +279,6 @@
 ---------------------------------------------------
  + Refactor the data model code so that categories cache their lists of items
 ---------------------------------------------------
- + We might also want to add a class called Record.js, as an abstract
-    superclass for Vote, Ordinal, and IdentifiedRecord.
----------------------------------------------------
- + Replace the current fake UUIDs with real UUIDs.
----------------------------------------------------
  + BUG: Back button is broken
     The browser's back button doesn't work after you click from 
     page to page in the navbar.



From skinner at sheep.berlios.de  Fri Jun 17 04:43:00 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 17 Jun 2005 04:43:00 +0200
Subject: [openrecord-svn] r154 - in trunk/source: . repositories/demo_page
Message-ID: <200506170243.j5H2h0d6015971@sheep.berlios.de>

Author: skinner
Date: 2005-06-17 04:42:55 +0200 (Fri, 17 Jun 2005)
New Revision: 154

Modified:
   trunk/source/SectionView.js
   trunk/source/repositories/demo_page/2005_june_chronological_list.json
Log:
Added new attributes and categories for keeping track of layout information, such as which columns should appear in a table.

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-17 02:01:31 UTC (rev 153)
+++ trunk/source/SectionView.js	2005-06-17 02:42:55 UTC (rev 154)
@@ -71,8 +71,20 @@
 SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER = "section_number";
 SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER = "cell_number";
 
-SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME = "00040000-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME       = "00040000-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW       = "00040101-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_ATTRIBUTE_LAYOUT_DATA       = "00040102-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_ATTRIBUTE_APPLIES_TO_PLUGIN = "00040103-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS     = "00040104-ce7f-11d9-8cd5-0011113ae5d6";
 
+SectionView.UUID_FOR_CATEGORY_PLUGIN_VIEW        = "00040201-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_CATEGORY_LAYOUT_DATA        = "00040202-ce7f-11d9-8cd5-0011113ae5d6";
+
+SectionView.UUID_FOR_PLUGIN_VIEW_TABLE           = "00040301-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_PLUGIN_VIEW_OUTLINE         = "00040302-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_PLUGIN_VIEW_DETAIL          = "00040303-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_PLUGIN_VIEW_BAR_CHART       = "00040304-ce7f-11d9-8cd5-0011113ae5d6";
+
 // -------------------------------------------------------------------
 // SectionView class properties
 // -------------------------------------------------------------------

Modified: trunk/source/repositories/demo_page/2005_june_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-17 02:01:31 UTC (rev 153)
+++ trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-17 02:42:55 UTC (rev 154)
@@ -530,10 +530,50 @@
              "uuid": "00030000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Plugin Name
+    { "Item": {                                               // Plugin Name (Attribute)
              "uuid": "00040000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Item": {                                               // Plugin View (Attribute)
+             "uuid": "00040101-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Layout Data (Attribute)
+             "uuid": "00040102-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Applies to Plugin (Attribute)
+             "uuid": "00040103-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Table Columns (Attribute)
+             "uuid": "00040104-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Plugin View (Category)
+             "uuid": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Layout Data (Category)
+             "uuid": "00040202-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Table (Plugin View)
+             "uuid": "00040301-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Outline (Plugin View)
+             "uuid": "00040302-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Detail (Plugin View)
+             "uuid": "00040303-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Bar Chart (Plugin View)
+             "uuid": "00040304-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Page
              "uuid": "0020000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -585,7 +625,7 @@
     { "Entry": {                                              // Plugin Name
              "uuid": "0040000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name
+             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
              "type": "TextValue",
             "value": "Plugin Name" }
     },
@@ -593,9 +633,233 @@
     { "Entry": {                                              // Attribute
              "uuid": "0040000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name
+             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
              "type": "RelatedUuid",
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View
+             "uuid": "0040101a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
+             "type": "TextValue",
+            "value": "Plugin View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040101b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040101c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Layout Data
+             "uuid": "0040102a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
+             "type": "TextValue",
+            "value": "Layout Data" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040102b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Layout Data (Category)
+             "uuid": "0040102c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
+             "type": "RelatedUuid",
+            "value": "00040202-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Applies To Plugin
+             "uuid": "0040103a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
+             "type": "TextValue",
+            "value": "Applies To Plugin" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040103b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040103c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Table Columns 
+             "uuid": "0040104a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "TextValue",
+            "value": "Table Columns" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040104b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040104c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View
+             "uuid": "0040201a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
+             "type": "TextValue",
+            "value": "Plugin View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0040201b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Layout Data
+             "uuid": "0040202a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
+             "type": "TextValue",
+            "value": "Layout Data" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0040202b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Table View
+             "uuid": "0040301a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
+             "type": "TextValue",
+            "value": "Table View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040301b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Table
+             "uuid": "0040301c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
+             "type": "TextValue",
+            "value": "Table" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Outline View
+             "uuid": "0040302a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
+             "type": "TextValue",
+            "value": "Outline View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040302b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Outline
+             "uuid": "0040302c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
+             "type": "TextValue",
+            "value": "Outline" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Detail View
+             "uuid": "0040303a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
+             "type": "TextValue",
+            "value": "Detail View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040303b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Outline
+             "uuid": "0040303c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
+             "type": "TextValue",
+            "value": "Detail" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Bar Chart View
+             "uuid": "0040304a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
+             "type": "TextValue",
+            "value": "Bar Chart View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040304b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Bar Chart
+             "uuid": "0040304c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
+             "type": "TextValue",
+            "value": "Bar Chart" }
     } ]
   },
   // =======================================================================
@@ -636,8 +900,7 @@
              "type": "TextValue",
             "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
     } ]
-  }
-,
+  },
   // =======================================================================
   { "Transaction": [
     // -----------------------------------------------------------------------



From skinner at sheep.berlios.de  Fri Jun 17 06:13:09 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 17 Jun 2005 06:13:09 +0200
Subject: [openrecord-svn] r155 - trunk/source/model
Message-ID: <200506170413.j5H4D9rZ032316@sheep.berlios.de>

Author: skinner
Date: 2005-06-17 06:13:05 +0200 (Fri, 17 Jun 2005)
New Revision: 155

Modified:
   trunk/source/model/World.js
Log:
tiny clean-up

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-17 02:42:55 UTC (rev 154)
+++ trunk/source/model/World.js	2005-06-17 04:13:05 UTC (rev 155)
@@ -826,38 +826,28 @@
  */
 World.prototype.getSuggestedItemsForAttribute = function(attribute) {
   var listOfSuggestedItems = [];
-  var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
-  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
-    var key;
-    var categoryCalledCategory = this.getCategoryCalledCategory();
-    var attributeCalledCategory = this.getAttributeCalledCategory();
-    var attributeCalledExpectedType = this.getAttributeCalledExpectedType();
-    var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
-    var listOfCategories = [];
-    for (key in listOfExpectedTypeEntries) {
-      var expectedTypeEntry = listOfExpectedTypeEntries[key];
-      var expectedType = expectedTypeEntry.getValue();
-      if (expectedType.isInCategory(categoryCalledCategory)) {
-        listOfCategories.push(expectedType);
-      }
-      /* WRONG -- DELETE ME
-      var listOfCategoryEntriesForExpectedType = expectedType.getEntriesForAttribute(attributeCalledCategory);
-      var categoryEntryForExpectedType = listOfCategoryEntriesForExpectedType[0]; // PENDING: should look at whole list, not just element 0
-      var categoryForExpectedType = categoryEntryForExpectedType.getValue();
-      if (categoryForExpectedType.isInCategory(categoryCalledCategory)) {
-        listOfCategories.push(categoryForExpectedType);
-      }
-      */
+  var key;
+  var categoryCalledCategory = this.getCategoryCalledCategory();
+  var attributeCalledCategory = this.getAttributeCalledCategory();
+  var attributeCalledExpectedType = this.getAttributeCalledExpectedType();
+  var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
+  var listOfCategories = [];
+  for (key in listOfExpectedTypeEntries) {
+    var expectedTypeEntry = listOfExpectedTypeEntries[key];
+    var expectedType = expectedTypeEntry.getValue();
+    if (expectedType.isInCategory(categoryCalledCategory)) {
+      listOfCategories.push(expectedType);
     }
-    for (key in listOfCategories) {
-      var category = listOfCategories[key];
-      var listOfItems = this.getItemsInCategory(category);
-      for (var keyToo in listOfItems) {
-        var item = listOfItems[keyToo];
-        Util.addObjectToSet(item, listOfSuggestedItems);
-      }
+  }
+  for (key in listOfCategories) {
+    var category = listOfCategories[key];
+    var listOfItems = this.getItemsInCategory(category);
+    for (var keyToo in listOfItems) {
+      var item = listOfItems[keyToo];
+      Util.addObjectToSet(item, listOfSuggestedItems);
     }
   }
+
   if (listOfSuggestedItems.length === 0) {
     listOfSuggestedItems = null;
   }



From skinner at sheep.berlios.de  Fri Jun 17 06:33:59 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 17 Jun 2005 06:33:59 +0200
Subject: [openrecord-svn] r156 - trunk/source/model
Message-ID: <200506170433.j5H4XxOm008006@sheep.berlios.de>

Author: skinner
Date: 2005-06-17 06:33:51 +0200 (Fri, 17 Jun 2005)
New Revision: 156

Modified:
   trunk/source/model/ContentRecord.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/Record.js
   trunk/source/model/World.js
Log:
Did a little cleaning up.

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-06-17 04:13:05 UTC (rev 155)
+++ trunk/source/model/ContentRecord.js	2005-06-17 04:33:51 UTC (rev 156)
@@ -71,17 +71,6 @@
 
 
 /**
- * Initializes a new contentRecord that has just been created by a user action.
- *
- * WARNING: This method should be called ONLY from subclasses.
- *
- * @scope    protected instance method
- */
-ContentRecord.prototype._initializeContentRecord = function() {
-};
-
-
-/**
  * Records a user's vote to retain or delete this ContentRecord.
  *
  * @scope    protected instance method

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-17 04:13:05 UTC (rev 155)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-17 04:33:51 UTC (rev 156)
@@ -531,7 +531,6 @@
     // var userDisplayName = record.getUserstamp().getDisplayName();
     // var userDisplayNameSubstring = this.truncateString(userDisplayName);
     // listOfStrings.push('  // by (' + userDisplayNameSubstring + ')\n');
-    // listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_TIMESTAMP + '": "' + record.getTimestamp().valueOf() + '" }\n');
     listOfStrings.push(indent + '}');
   }
   

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-17 04:13:05 UTC (rev 155)
+++ trunk/source/model/Entry.js	2005-06-17 04:33:51 UTC (rev 156)
@@ -83,8 +83,6 @@
 * @param    inType    Optional.  The data type to interpret the value as. 
  */
 Entry.prototype._initialize = function (inItemOrEntry, inAttribute, inValue, inType) {
-  this._initializeContentRecord();
-
   if (inItemOrEntry instanceof Entry) {
     this.__myPreviousEntry = inItemOrEntry;
     this.__myItem = this.__myPreviousEntry.getItem();

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-17 04:13:05 UTC (rev 155)
+++ trunk/source/model/Item.js	2005-06-17 04:33:51 UTC (rev 156)
@@ -77,8 +77,6 @@
  * @param    inProvisionalFlag    True if the item is provisional; false if the item is normal. 
  */
 Item.prototype._initialize = function (inObserver, inProvisionalFlag) {
-  this._initializeContentRecord();
-
   if (inProvisionalFlag) {
     this.__myProvisionalFlag = true;
   }
@@ -236,7 +234,7 @@
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
       Util.assert(false);
-      filteredListOfEntries = listOfEntries; //PENDING No such variable as listOfEntries ?!!
+      filteredListOfEntries = listOfEntriesForAttribute;
       break;
     default:
       // We should never get here.  If we get here, it's an error.

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-06-17 04:13:05 UTC (rev 155)
+++ trunk/source/model/Record.js	2005-06-17 04:33:51 UTC (rev 156)
@@ -123,7 +123,6 @@
  */
 Record.prototype.getTimestamp = function() {
   if (this._creationTimestamp) {
-    // This case is now here only for the (temporary) benefit of _rehydrateContentRecord.
     return this._creationTimestamp;
   }
   var hexTimeLow = this._uuid.split('-')[0];
@@ -149,6 +148,11 @@
   var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
 
   var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
+
+  // PENDING: 
+  // Do we want this to return a Date object rather than a floating point
+  // value?
+  this._creationTimestamp = millisecondsSince1970;
   return millisecondsSince1970;
 };
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-17 04:13:05 UTC (rev 155)
+++ trunk/source/model/World.js	2005-06-17 04:33:51 UTC (rev 156)
@@ -653,39 +653,6 @@
 };
 
 
-/** OBSOLETE - no more support for queries for specific items 
- * Returns a newly created item representing a query.
- *
- * @scope    public instance method
- * @param    itemOrListOfItems    Optional. An item, or an array of items. 
- * @return   A newly created item representing a query.
-World.prototype.newQueryForSpecificItems = function(itemOrListOfItems) {
-  this.beginTransaction();
-  var item = this._virtualServer.newItem("A query");
-  var attributeCalledCategory = this.getAttributeCalledCategory();
-  var categoryCalledQuery = this.getCategoryCalledQuery();
-  item.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
-
-  var attributeCalledQueryMatchingItem = this.getAttributeCalledQueryMatchingItem();
-  if (itemOrListOfItems) {
-    if (itemOrListOfItems instanceof Item) {
-      item.addEntryForAttribute(attributeCalledQueryMatchingItem, itemOrListOfItems);
-    }
-    if (Util.isArray(itemOrListOfItems)) {
-      var listOfItems = itemOrListOfItems;
-      for (var key in listOfItems) {
-        var matchingItem = listOfItems[key];
-        item.addEntryForAttribute(attributeCalledQueryMatchingItem, matchingItem);
-      }
-    }
-  }
-
-  this.endTransaction();
-  return item;
-};
-*/
-
-
 /**
  * Returns a newly created entry.
  *



From chaolam at sheep.berlios.de  Fri Jun 17 21:07:21 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Fri, 17 Jun 2005 21:07:21 +0200
Subject: [openrecord-svn] r157 - in trunk: documentation source
Message-ID: <200506171907.j5HJ7L1E002446@sheep.berlios.de>

Author: chaolam
Date: 2005-06-17 21:07:19 +0200 (Fri, 17 Jun 2005)
New Revision: 157

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/MultiEntriesView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/base_style.css
Log:
1) Added keyboard support for AttributeSuggestionBox
2) Fixed a few UI bugs

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-17 04:33:51 UTC (rev 156)
+++ trunk/documentation/release_planning.txt	2005-06-17 19:07:19 UTC (rev 157)
@@ -164,10 +164,10 @@
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
-chao   | 0.5  IED |         |  8. UI for entering a number literal (instead of a string literal) in a table
-chao   | 1    IED |         |  9. UI for entering a date literal in a table (and data model support)
+chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
+chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
        |          |         | 10. Add data model support for bi-directional references
-chao   | 2    IED |         | 11. Move to better persistent representation for queries
+chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields
        |          |         | 14. BUG: problems with newlines and HTML characters in text strings
@@ -197,7 +197,7 @@
        |          |         | 36. improve UI for creating a new page
        |          |         | 37. improve UI for adding a new section to a page
        |          |         | 38. improve UI for creating a new user
-       |          |         | 39. improve UI for editing the query that a section uses
+chao   | 1.5 IED  | 1.5 IED | 39. improve UI for editing the query that a section uses
        |          |         | 40. Have edit mode look like view mode, and remove the "Edit" button
        |          |         | 41. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
        |          |         | 42. Rationalize the View api and document public api
@@ -223,7 +223,9 @@
        |          |         | 61. Write scalability tests 
        |          |         | 62. Ensure that PHP scripts and file I/O works for concurrent multi-user access
 -------+----------+---------+----------------------------------------------
-
+chao   | 0.5 IED  | 0.5 IED | Improved UI for autocomplete
+c/b    | 0.5 IED  |         | Allow plugins to store layout data
+chao   | 0.5 IED  |         | Table plugin persists column order
        
 =======================================================
 Categories and Attributes we might use for release 0.1
@@ -449,5 +451,5 @@
 + Should we adopt "Globals" convention for JSLint?
 + Should we get rid of semi-colon checking in JSLint?
 + Should we work on making OpenRecord work within MediaWiki?
++ BUG: need to convert HTML entity codes back at client-server layer
 
-

Modified: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-17 04:33:51 UTC (rev 156)
+++ trunk/source/MultiEntriesView.js	2005-06-17 19:07:19 UTC (rev 157)
@@ -114,6 +114,7 @@
  *
  */
 MultiEntriesView.prototype.setSuggestions = function(suggestionList) {
+  this._suggestions = suggestionList;
   for (var i=0; i < this._entryViews.length; ++i) {
     this._entryViews[i].setSuggestions(suggestionList);
   }
@@ -215,6 +216,7 @@
   aTextView.refresh();
   if (this.isInEditMode()) {
     var listener = this;
+    aTextView.setSuggestions(this._suggestions);
     aTextView.setKeyPressFunction(function (evt, aTxtView) {return listener._keyPressOnEditField(evt, aTxtView);});
     aTextView.setClickFunction(function (evt, aTxtView) {return listener._handleClick(evt, aTxtView);});
   }

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-17 04:33:51 UTC (rev 156)
+++ trunk/source/SectionView.js	2005-06-17 19:07:19 UTC (rev 157)
@@ -317,6 +317,8 @@
   var listOfExpectedTypeEntries = matchingAttribute.getEntriesForAttribute(attributeCalledExpectedType);
   entryTextView.setExpectedTypeEntries(listOfExpectedTypeEntries);
   entryTextView.refresh();
+  var listener = this;
+  entryTextView.setKeyPressFunction(function (evt, aTxtView) {return listener.keyPressOnMatchingValueField(evt, aTxtView);});
   myQuery.addObserver(this);
 };
 
@@ -326,6 +328,19 @@
 // -------------------------------------------------------------------
 
 /**
+ * Called when user is editing the matching value edit field
+ * We want to trap a "return" key 
+ * @scope public instance method
+ */
+SectionView.prototype.keyPressOnMatchingValueField = function(evt,aTxtView) {
+  if (evt.keyCode == Util.ASCII_VALUE_FOR_RETURN) {
+    aTxtView.stopEditing();
+    return true;
+  }
+  return false;
+};
+
+/**
  * Called when the query belong to this section has changed
  * @scope public instance method
  */

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-17 04:33:51 UTC (rev 156)
+++ trunk/source/TablePlugin.js	2005-06-17 19:07:19 UTC (rev 157)
@@ -374,9 +374,9 @@
 TablePlugin.prototype.selectRow = function (rowElement) {
   Util.assert(rowElement instanceof HTMLTableRowElement);
   if (rowElement != this._lastSelectedRow) {
-    if (this._lastSelectedRow) {this._lastSelectedRow.style.background = "rgb(100%,100%,100%)";}
+    if (this._lastSelectedRow) {this._lastSelectedRow.style.background = "";}
     this._lastSelectedRow = rowElement;
-    rowElement.style.background = "rgb(100%,100%,0%)";
+    rowElement.style.background = "rgb(0%,70%,100%)"; // PENDING: need to css-ify this selection
     return true;
   }
   return false;

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-17 04:33:51 UTC (rev 156)
+++ trunk/source/TextView.js	2005-06-17 19:07:19 UTC (rev 157)
@@ -219,7 +219,6 @@
     this._setupSuggestionBox();
     this.getHTMLElement().replaceChild(editField, this._textNode);
     if (!dontSelect) {editField.select();}
-    //editField.focus();
     this._isEditing = true;
   }
 };
@@ -338,11 +337,11 @@
     var oldValue = this._entry.getValue();
     if (oldValue != value) {
       this._entry = this._item.replaceEntry(this._entry, value);
-      this._restoreText(true);
+      this._restoreText(true); // call restore text in case item is transformed (e.g. Dates will be normalized)
     }
   } else if (value) {
     this._entry = this._item.addEntryForAttribute(this._attribute, value);
-    this._restoreText(true);
+    this._restoreText(true); // call restore text in case item is transformed (e.g. Dates will be normalized
   }
 };
 
@@ -450,7 +449,7 @@
  */
 TextView.prototype.onKeyUp = function(inEventObject) {
   if (this._suggestionBox) {
-    this._suggestionBox._keyPressOnInputField(inEventObject);
+    this._suggestionBox._keyUpOnInputField(inEventObject);
   }
 };
 
@@ -466,6 +465,9 @@
     this._restoreText();
     return true;
   }
+  if (this._suggestionBox && this._suggestionBox._keyPressOnInputField(inEventObject)) {
+    return true;
+  }
   if (this._keyPressFunction && this._keyPressFunction(inEventObject, this)) {
     return true;
   }
@@ -560,7 +562,7 @@
     var editValue = this._myInputField.value;
     for (var i = 0; i < this._listOfSuggestedItems.length; ++i) {
       var item = this._listOfSuggestedItems[i];
-      if (editValue == item.getDisplayName()) {return item;}
+      if (editValue.toLowerCase() == item.getDisplayName().toLowerCase()) {return item;}
     }
   }
   return this._selectedItem;
@@ -594,6 +596,66 @@
  *
  */
 AttributeSuggestionBox.prototype._keyPressOnInputField = function (inEventObject) {
+  var numberOfMatchingItems = this._listOfMatchingItems.length;
+  if (numberOfMatchingItems === 0) {return false;}
+
+  var asciiValueOfKey = inEventObject.keyCode;
+  var index = -1;
+  var doSelectItem = false;
+  switch (asciiValueOfKey) {
+    case Util.ASCII_VALUE_FOR_DOWN_ARROW:
+      if (this._selectedItem) {
+        index = (Util.getArrayIndex(this._listOfMatchingItems, this._selectedItem)+1) % numberOfMatchingItems;
+      }
+      else {
+        index = 0;
+      }
+      break;
+    case Util.ASCII_VALUE_FOR_UP_ARROW:
+      if (this._selectedItem) {
+        index = Util.getArrayIndex(this._listOfMatchingItems, this._selectedItem)-1;
+        if (index < 0) {index = numberOfMatchingItems-1;}
+      }
+      else {
+        index = numberOfMatchingItems-1;
+      }
+      break;
+      case Util.ASCII_VALUE_FOR_TAB:
+      if (!this._selectedItem) {
+        this._selectedItem = this._listOfMatchingItems[0]
+        doSelectItem = true;
+      }
+      break;
+    case Util.ASCII_VALUE_FOR_RETURN:
+      if (this._selectedItem) {doSelectItem = true;}
+      break;
+    case Util.ASCII_VALUE_FOR_LEFT_ARROW:
+    case Util.ASCII_VALUE_FOR_RIGHT_ARROW:
+      // if left or right arrow keys, then hide suggestion box
+      this._setShouldHide(true);
+      return false;
+    default:
+      // show suggestion box if not already shown, then let editField process keystroke
+      this._setShouldHide(false);
+      return false;
+  }
+  if (index != -1) {
+    this._setShouldHide(false);
+    this._selectedItem = this._listOfMatchingItems[index];
+    this._redisplayAttributeSuggestionBox();
+    return true;
+  }
+  if (doSelectItem) {
+    this._myInputField.value = this._selectedItem.getDisplayName();
+    this._setShouldHide(true);
+  }
+  return false;
+};
+
+/**
+ *
+ */
+AttributeSuggestionBox.prototype._keyUpOnInputField = function (inEventObject) {
   this._redisplayAttributeSuggestionBox();
 };
 
@@ -612,14 +674,32 @@
  */
 AttributeSuggestionBox.prototype._clickOnSelection = function (inEventObject, item) {
   this._selectedItem = item;
-  this._myInputField.value = item.getDisplayName();  // PENDING: need to pass back the item, not a string
+  //this._myInputField.value = item.getDisplayName();  // PENDING: need to pass back the item, not a string
 };
 
+/**
+ *
+ */
+AttributeSuggestionBox.prototype._setShouldHide = function (shouldHide) {
+  // make the suggestion box disappear
+  this._shouldHide = shouldHide;
+  this._selectedItem = null;
+  if (shouldHide) {
+    this._myAttributeSuggestionBoxDivElement.style.display = "none";
+  }
+  else {
+    this._redisplayAttributeSuggestionBox();
+  }
+};
 
+
+
 /**
  *
  */
 AttributeSuggestionBox.prototype._redisplayAttributeSuggestionBox = function () {
+  if (this._shouldHide) {return;} // if SuggestionBox is in hide mode, don't show the box
+  
   var partialInputString = this._myInputField.value;
   var listOfMatchingItems = [];
   var key;
@@ -636,6 +716,7 @@
       listOfMatchingItems.push(item);
     }
   }
+  this._listOfMatchingItems = listOfMatchingItems;
 
   if (listOfMatchingItems.length === 0) {
     // make the suggestion box disappear
@@ -650,6 +731,7 @@
       var textNode = document.createTextNode(item.getDisplayName());
       var row = table.insertRow(rowNumber);
       var cell = row.insertCell(columnNumber);
+      cell.style.background = (this._selectedItem == item) ? "rgb(0%,70%,100%)":""; //pending need to CSS-ify this
       cell.appendChild(textNode);
       cell.onmousedown = this._clickOnSelection.bindAsEventListener(this, item);
       rowNumber += 1;

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-06-17 04:33:51 UTC (rev 156)
+++ trunk/source/base_style.css	2005-06-17 19:07:19 UTC (rev 157)
@@ -414,7 +414,7 @@
   font-family: Arial, Verdana, sans-serif;
   text-align: left;
   border: none;
-  padding: 0px;
+  padding: 2px;
   margin: 0px;
 }
 



From chaolam at sheep.berlios.de  Fri Jun 17 22:43:19 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Fri, 17 Jun 2005 22:43:19 +0200
Subject: [openrecord-svn] r158 - in trunk: documentation source
Message-ID: <200506172043.j5HKhJEl012174@sheep.berlios.de>

Author: chaolam
Date: 2005-06-17 22:43:18 +0200 (Fri, 17 Jun 2005)
New Revision: 158

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/OutlinePlugin.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/demo_page.html
Log:
1) Added support for layout data for plugins.
2) Modified Section to support create layout data for plugins
3) Lint fixes

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/documentation/release_planning.txt	2005-06-17 20:43:18 UTC (rev 158)
@@ -452,4 +452,5 @@
 + Should we get rid of semi-colon checking in JSLint?
 + Should we work on making OpenRecord work within MediaWiki?
 + BUG: need to convert HTML entity codes back at client-server layer
++ Task: Rename ORlugin to PluginView
 

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/source/BarChartPlugin.js	2005-06-17 20:43:18 UTC (rev 158)
@@ -53,9 +53,9 @@
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var barChart = new BarChartPlugin()
  */
-BarChartPlugin.prototype = new ORPlugin();  // makes BarChartPlugin be a subclass of View
-function BarChartPlugin(inSuperview, inHTMLElement,inQuery) {
-  ORPlugin.call(this,inSuperview,inHTMLElement,inQuery);
+BarChartPlugin.prototype = new PluginView();  // makes BarChartPlugin be a subclass of View
+function BarChartPlugin(inSuperview, inHTMLElement,inQuery,inLayout) {
+  PluginView.call(this,inSuperview,inHTMLElement,inQuery,inLayout);
 }
 
 

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/source/DetailPlugin.js	2005-06-17 20:43:18 UTC (rev 158)
@@ -52,9 +52,9 @@
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var detailPlugin = new DetailPlugin()
  */
-DetailPlugin.prototype = new ORPlugin();  // makes DetailPlugin be a subclass of View
-function DetailPlugin(inSuperView, inHTMLElement,inQuery) {
-  ORPlugin.call(this,inSuperView,inHTMLElement,inQuery);
+DetailPlugin.prototype = new PluginView();  // makes DetailPlugin be a subclass of View
+function DetailPlugin(inSuperView, inHTMLElement,inQuery,inLayout) {
+  PluginView.call(this,inSuperView,inHTMLElement,inQuery,inLayout);
 }
 
 

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/source/OutlinePlugin.js	2005-06-17 20:43:18 UTC (rev 158)
@@ -51,9 +51,9 @@
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  * @syntax   var outline = new OutlinePlugin()
  */
-OutlinePlugin.prototype = new ORPlugin();  // makes OutlinePlugin be a subclass of View
-function OutlinePlugin(inSectionView, inHTMLElement,inQuery) {
-  ORPlugin.call(this,inSectionView,inHTMLElement,inQuery);
+OutlinePlugin.prototype = new PluginView();  // makes OutlinePlugin be a subclass of View
+function OutlinePlugin(inSectionView, inHTMLElement,inQuery,inLayout) {
+  PluginView.call(this,inSectionView,inHTMLElement,inQuery,inLayout);
 }
 
 

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/source/SectionView.js	2005-06-17 20:43:18 UTC (rev 158)
@@ -167,7 +167,8 @@
   var newPlugin = null;
   var pluginClass = SectionView.ourHashTableOfPluginClassesKeyedByPluginName[inPluginName];
   if (pluginClass) {
-    newPlugin = new pluginClass(this, inPluginDiv, this.getQuery());
+    var layoutData = this._getLayoutDataForPlugin(inPluginName);
+    newPlugin = new pluginClass(this, inPluginDiv, this.getQuery(), layoutData);
   }
   return newPlugin;
 };
@@ -266,6 +267,36 @@
   this.refresh();
 };
 
+/**
+ * Returns layout data of this section for a particular plugin
+ * Creates a the layout data item if doesn't exist
+ *
+ * @param inPluginName name of plugin
+ * @return layout data of this section for a particular plugin
+ */
+SectionView.prototype._getLayoutDataForPlugin = function (inPluginName) {
+  var repository = this.getWorld();
+  var attrLayoutData = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_LAYOUT_DATA);
+  var entriesLayoutData = this.mySection.getEntriesForAttribute(attrLayoutData);
+  var attrAppliesToPlugin = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_APPLIES_TO_PLUGIN);
+  if (entriesLayoutData) {
+    for (var i=0; i < entriesLayoutData.length; ++i) {
+      var layoutItem = entriesLayoutData[i].getValue();
+      var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attrAppliesToPlugin);
+      Util.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
+      if (entriesAppliesToPlugin[0].getValue() == inPluginName) {
+        return layoutItem;
+      }
+    }
+  }
+  // layoutData not found, so create the item
+  repository.beginTransaction();
+  layoutItem = repository.newItem("Layout data for " + inPluginName + " of " + this.mySection.getDisplayName());
+  layoutItem.addEntryForAttribute(attrAppliesToPlugin, inPluginName);
+  this.mySection.addEntryForAttribute(attrLayoutData,layoutItem,repository.getTypeCalledItem());
+  repository.endTransaction();
+  return layoutItem;
+};
 
 /**
  * Re-creates all the HTML for the SectionView, and hands the HTML to the 

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/source/TablePlugin.js	2005-06-17 20:43:18 UTC (rev 158)
@@ -62,9 +62,9 @@
  * @param    inSectionView    The SectionView that this TablePlugin will appears in. 
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  */
-TablePlugin.prototype = new ORPlugin();  // makes TablePlugin be a subclass of View
-function TablePlugin(inSectionView, inHTMLElement, inQuery) {
-  ORPlugin.call(this,inSectionView,inHTMLElement,inQuery);
+TablePlugin.prototype = new PluginView();  // makes TablePlugin be a subclass of View
+function TablePlugin(inSectionView, inHTMLElement, inQuery,inLayout) {
+  PluginView.call(this,inSectionView,inHTMLElement,inQuery,inLayout);
 
   // PENDING should probably make this independent of sectionview
   this.myClass = SectionView.ELEMENT_CLASS_SIMPLE_TABLE;

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/source/TextView.js	2005-06-17 20:43:18 UTC (rev 158)
@@ -622,7 +622,7 @@
       break;
       case Util.ASCII_VALUE_FOR_TAB:
       if (!this._selectedItem) {
-        this._selectedItem = this._listOfMatchingItems[0]
+        this._selectedItem = this._listOfMatchingItems[0];
         doSelectItem = true;
       }
       break;

Modified: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-17 19:07:19 UTC (rev 157)
+++ trunk/source/demo_page.html	2005-06-17 20:43:18 UTC (rev 158)
@@ -26,7 +26,7 @@
     <script type="text/javascript" src="MultiEntriesView.js"></script>
     <script type="text/javascript" src="NavbarView.js"></script>
     <script type="text/javascript" src="TextView.js"></script>
-    <script type="text/javascript" src="ORPlugin.js"></script>
+    <script type="text/javascript" src="PluginView.js"></script>
     <script type="text/javascript" src="TablePlugin.js"></script>
     <script type="text/javascript" src="OutlinePlugin.js"></script>
     <script type="text/javascript" src="DetailPlugin.js"></script>



From chaolam at sheep.berlios.de  Sat Jun 18 00:06:33 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Sat, 18 Jun 2005 00:06:33 +0200
Subject: [openrecord-svn] r159 - trunk/source
Message-ID: <200506172206.j5HM6Xu1017749@sheep.berlios.de>

Author: chaolam
Date: 2005-06-18 00:06:33 +0200 (Sat, 18 Jun 2005)
New Revision: 159

Added:
   trunk/source/PluginView.js
Removed:
   trunk/source/ORPlugin.js
Log:
change ORPlugin.js to PluginView.js

Deleted: trunk/source/ORPlugin.js
===================================================================
--- trunk/source/ORPlugin.js	2005-06-17 20:43:18 UTC (rev 158)
+++ trunk/source/ORPlugin.js	2005-06-17 22:06:33 UTC (rev 159)
@@ -1,100 +0,0 @@
-/*****************************************************************************
- ORPlugin.js
-
-******************************************************************************
- Written in 2005 by 
-    Chih-Chao Lam <chao at cs.stanford.edu>
-
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   World.js
-//   Util.js
-// -------------------------------------------------------------------
-
-
-
-
-/**
- * A ORPlugin display one or more content items. 
- *
- * @scope    public instance constructor
- * @extends  View
- * @param    inSuperView    The superview for this view. 
- * @param    inHTMLElement    The HTMLElement to display this view in. 
- * @param    inQuery  Query that produces the items for this ORPlugin to display
- * @syntax   var ORPlugin = new ORPlugin()
- */
-ORPlugin.prototype = new View();  // makes ORPlugin be a subclass of View
-function ORPlugin(inSuperView, inHTMLElement,inQuery) {
-  if (!inSuperView) {return;} // initial call that subclasses of ORPlugins make without parameters
-  this.setSuperview(inSuperView);
-  this.setHTMLElement(inHTMLElement);
-  this._query = inQuery;
-}
-
-
-/**
- * Gets the list of content items to display.
- *
- * @scope    PENDING
- */
-ORPlugin.prototype.fetchItems = function() {
-  if (Util.isArray(this._query)) {
-    //PENDING hack to allow Plugin to support list of items or query
-    this._listOfItems = this._query;
-  }
-  else {
-    this._listOfItems = this._query ? this.getWorld().getResultItemsForQuery(this._query) : [];
-  }
-  return this._listOfItems;
-};
-
-/**
- * Returns the registered name of this ORPlugin.
- *
- * @scope    public instance method
- * @return   A string.
- */
-ORPlugin.prototype.getPluginName = function () {
-  Util.assert(false);
-};
-
-
-/**
- * Does final clean-up.
- *
- * @scope    public instance method
- */
-ORPlugin.prototype.endOfLife = function () {
-  this.getHTMLElement().innerHTML = "";
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Copied: trunk/source/PluginView.js (from rev 158, trunk/source/ORPlugin.js)



From chaolam at sheep.berlios.de  Sat Jun 18 00:12:18 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Sat, 18 Jun 2005 00:12:18 +0200
Subject: [openrecord-svn] r160 - trunk/source
Message-ID: <200506172212.j5HMCIel018199@sheep.berlios.de>

Author: chaolam
Date: 2005-06-18 00:12:17 +0200 (Sat, 18 Jun 2005)
New Revision: 160

Modified:
   trunk/source/PluginView.js
   trunk/source/demo_page.html
Log:
1) Forgot to commit PluginView.js
2) Fixed demo_page to include Record before Ordinal.js

Modified: trunk/source/PluginView.js
===================================================================
--- trunk/source/PluginView.js	2005-06-17 22:06:33 UTC (rev 159)
+++ trunk/source/PluginView.js	2005-06-17 22:12:17 UTC (rev 160)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- ORPlugin.js
+ PluginView.js
 
 ******************************************************************************
  Written in 2005 by 
@@ -40,21 +40,22 @@
 
 
 /**
- * A ORPlugin display one or more content items. 
+ * A PluginView display one or more content items. 
  *
  * @scope    public instance constructor
  * @extends  View
  * @param    inSuperView    The superview for this view. 
  * @param    inHTMLElement    The HTMLElement to display this view in. 
- * @param    inQuery  Query that produces the items for this ORPlugin to display
- * @syntax   var ORPlugin = new ORPlugin()
+ * @param    inQuery  Query that produces the items for this PluginView to display
+ * @syntax   var PluginView = new PluginView()
  */
-ORPlugin.prototype = new View();  // makes ORPlugin be a subclass of View
-function ORPlugin(inSuperView, inHTMLElement,inQuery) {
-  if (!inSuperView) {return;} // initial call that subclasses of ORPlugins make without parameters
+PluginView.prototype = new View();  // makes PluginView be a subclass of View
+function PluginView(inSuperView, inHTMLElement,inQuery, inLayout) {
+  if (!inSuperView) {return;} // initial call that subclasses of PluginViews make without parameters
   this.setSuperview(inSuperView);
   this.setHTMLElement(inHTMLElement);
   this._query = inQuery;
+  this._layout = inLayout;
 }
 
 
@@ -63,7 +64,7 @@
  *
  * @scope    PENDING
  */
-ORPlugin.prototype.fetchItems = function() {
+PluginView.prototype.fetchItems = function() {
   if (Util.isArray(this._query)) {
     //PENDING hack to allow Plugin to support list of items or query
     this._listOfItems = this._query;
@@ -75,12 +76,12 @@
 };
 
 /**
- * Returns the registered name of this ORPlugin.
+ * Returns the registered name of this PluginView.
  *
  * @scope    public instance method
  * @return   A string.
  */
-ORPlugin.prototype.getPluginName = function () {
+PluginView.prototype.getPluginName = function () {
   Util.assert(false);
 };
 
@@ -90,7 +91,7 @@
  *
  * @scope    public instance method
  */
-ORPlugin.prototype.endOfLife = function () {
+PluginView.prototype.endOfLife = function () {
   this.getHTMLElement().innerHTML = "";
 };
 

Modified: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-17 22:06:33 UTC (rev 159)
+++ trunk/source/demo_page.html	2005-06-17 22:12:17 UTC (rev 160)
@@ -32,8 +32,8 @@
     <script type="text/javascript" src="DetailPlugin.js"></script>
     <script type="text/javascript" src="BarChartPlugin.js"></script>
 
+    <script type="text/javascript" src="model/Record.js"></script>
     <script type="text/javascript" src="model/Ordinal.js"></script>
-    <script type="text/javascript" src="model/Record.js"></script>
     <script type="text/javascript" src="model/Vote.js"></script>
     <script type="text/javascript" src="model/ContentRecord.js"></script>
     <script type="text/javascript" src="model/Item.js"></script>



From skinner at sheep.berlios.de  Sat Jun 18 00:31:58 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 18 Jun 2005 00:31:58 +0200
Subject: [openrecord-svn] r161 - in trunk: documentation source source/model source/repositories/demo_page
Message-ID: <200506172231.j5HMVwVv023689@sheep.berlios.de>

Author: skinner
Date: 2005-06-18 00:31:55 +0200 (Sat, 18 Jun 2005)
New Revision: 161

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/demo_page.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
   trunk/source/repositories/demo_page/2005_june_chronological_list.json
Log:
Started adding data model support for bi-directional references between items -- "Connection Entries".  Also did some refactoring so that the axiomatic items and entries now live in their own JSON file.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/documentation/release_planning.txt	2005-06-17 22:31:55 UTC (rev 161)
@@ -166,7 +166,7 @@
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
 chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
-       |          |         | 10. Add data model support for bi-directional references
+brian  | 1    IED |         | 10. Add data model support for bi-directional references
 chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields

Modified: trunk/source/demo_page.js
===================================================================
--- trunk/source/demo_page.js	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/demo_page.js	2005-06-17 22:31:55 UTC (rev 161)
@@ -57,7 +57,10 @@
   // Create a World and a DeltaVirtualServer, and have the 
   // DeltaVirtualServer rehydrate all the dehydrated items 
   // contained in the fileContentString.  
-  var deltaVirtualServer = new DeltaVirtualServer(repositoryContentString, userListContentString);
+  var axiomaticItemsFileName = "2005_june_axiomatic_items.json";
+  var axiomaticItemsUrl = "model/" + axiomaticItemsFileName;
+  
+  var deltaVirtualServer = new DeltaVirtualServer(axiomaticItemsUrl, repositoryContentString, userListContentString);
   var world = new World(deltaVirtualServer);
   window.rootView = new RootView(world);
   

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-17 22:31:55 UTC (rev 161)
@@ -40,50 +40,6 @@
 // -------------------------------------------------------------------
 
 
-// -------------------------------------------------------------------
-// DeltaVirtualServer public class constants
-// -------------------------------------------------------------------
-DeltaVirtualServer.JSON_MEMBER_FORMAT = "format";
-DeltaVirtualServer.JSON_MEMBER_TIMESTAMP = "timestamp";
-DeltaVirtualServer.JSON_MEMBER_DATA = "data";
-DeltaVirtualServer.JSON_MEMBER_RECORDS = "records";
-DeltaVirtualServer.JSON_MEMBER_USERS = "users";
-
-DeltaVirtualServer.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
-DeltaVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
-DeltaVirtualServer.JSON_FORMAT_2005_MAY_RECORDS = "2005_MAY_CHRONOLOGICAL_LIST";
-DeltaVirtualServer.JSON_FORMAT_2005_MAY_USERS = "2005_MAY_USER_LIST";
-DeltaVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS = "2005_JUNE_CHRONOLOGICAL_LIST";
-
-DeltaVirtualServer.JSON_MEMBER_TYPE = "type";
-DeltaVirtualServer.JSON_MEMBER_VALUE = "value";
-DeltaVirtualServer.JSON_TYPE_TEXT_VALUE = "TextValue";
-DeltaVirtualServer.JSON_TYPE_UUID = "Uuid";
-DeltaVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
-DeltaVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
-DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
-DeltaVirtualServer.JSON_TYPE_DATE_VALUE = "DateValue";
-DeltaVirtualServer.JSON_TYPE_CHECKMARK_VALUE = "CheckMarkValue";
-DeltaVirtualServer.JSON_TYPE_URL_VALUE = "UrlValue";
-
-DeltaVirtualServer.JSON_MEMBER_UUID = "uuid";
-DeltaVirtualServer.JSON_MEMBER_PASSWORD = "password";
-
-DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS = "Item";
-DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS = "Entry";
-DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS = "Vote";
-DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS = "Ordinal";
-DeltaVirtualServer.JSON_MEMBER_TRANSACTION_CLASS = "Transaction";
-
-DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE = "attribute";
-DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE = "previousEntry";
-DeltaVirtualServer.JSON_MEMBER_USERSTAMP = "userstamp";
-DeltaVirtualServer.JSON_MEMBER_RECORD = "record";
-DeltaVirtualServer.JSON_MEMBER_ITEM = "item";
-DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG = "retainFlag";
-DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER = "ordinalNumber";
-
-
 /**
  * The DeltaVirtualServer is a datastore that loads and saves
  * an entire World of items as a single monolithic JSON string.
@@ -93,7 +49,8 @@
  * @param    inJsonUserList    A JSON string literal listing user UUIDs and passwords. 
  */
 DeltaVirtualServer.prototype = new StubVirtualServer();  // makes DeltaVirtualServer be a subclass of StubVirtualServer
-function DeltaVirtualServer(inJsonRepositoryString, inJsonUserList) {
+function DeltaVirtualServer(inJsonAxiomsFileURL, inJsonRepositoryString, inJsonUserList) {
+  this._myDehydratedAxiomFileURL = inJsonAxiomsFileURL;
   this._myDehydratedWorld = inJsonRepositoryString;
   this._myDehydratedUserList = inJsonUserList;
   this._myHasEverFailedToSaveFlag = false;
@@ -110,35 +67,10 @@
 DeltaVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
   this._initialize(inWorld);
   this._buildTypeHashTable();
+  this._loadAxiomaticItemsFromFileAtURL(this._myDehydratedAxiomFileURL);
   this._loadWorldFromJsonStrings(this._myDehydratedWorld, this._myDehydratedUserList);
 };
 
-DeltaVirtualServer.prototype._buildTypeHashTable = function () {
-  var text      = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_TEXT);
-  var number    = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_NUMBER);
-  var dateType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_DATE);
-  var checkMark = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CHECK_MARK);
-  var url       = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_URL);
-  var itemType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_ITEM);
-  
-  /*
-  var text = this.getWorld().getTypeCalledText();
-  var number = this.getWorld().getTypeCalledNumber();
-  var dateType = this.getWorld().getTypeCalledDate();
-  var checkMark = this.getWorld().getTypeCalledCheckMark();
-  var url = this.getWorld().getTypeCalledUrl();
-  var itemType = this.getWorld().getTypeCalledItem();
-  */
-
-  this._myHashTableOfTypesKeyedByToken = {};
-  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_TEXT_VALUE] = text;
-  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE] = number;
-  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_DATE_VALUE] = dateType;
-  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
-  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_URL_VALUE] = url;
-  this._myHashTableOfTypesKeyedByToken[DeltaVirtualServer.JSON_TYPE_RELATED_UUID] = itemType;
-};
-
 // -------------------------------------------------------------------
 // Private Methods
 // -------------------------------------------------------------------
@@ -160,9 +92,9 @@
   var dehydratedRecords = null;
   eval("dehydratedRecords = " + inJsonRepositoryString + ";");
   Util.assert(Util.isObject(dehydratedRecords));
-  var recordFormat = dehydratedRecords[DeltaVirtualServer.JSON_MEMBER_FORMAT];
-  Util.assert(recordFormat == DeltaVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
-  var listOfRecords = dehydratedRecords[DeltaVirtualServer.JSON_MEMBER_RECORDS];
+  var recordFormat = dehydratedRecords[StubVirtualServer.JSON_MEMBER_FORMAT];
+  Util.assert(recordFormat == StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
+  var listOfRecords = dehydratedRecords[StubVirtualServer.JSON_MEMBER_RECORDS];
   Util.assert(Util.isArray(listOfRecords));
   
   // load the list of users
@@ -170,9 +102,9 @@
   var dehydratedUserList = null;
   eval("dehydratedUserList = " + inJsonUserList + ";");
   Util.assert(Util.isObject(dehydratedUserList));
-  var userListFormat = dehydratedUserList[DeltaVirtualServer.JSON_MEMBER_FORMAT];
-  Util.assert(userListFormat == DeltaVirtualServer.JSON_FORMAT_2005_MAY_USERS);
-  var listOfUsers = dehydratedUserList[DeltaVirtualServer.JSON_MEMBER_USERS];
+  var userListFormat = dehydratedUserList[StubVirtualServer.JSON_MEMBER_FORMAT];
+  Util.assert(userListFormat == StubVirtualServer.JSON_FORMAT_2005_MAY_USERS);
+  var listOfUsers = dehydratedUserList[StubVirtualServer.JSON_MEMBER_USERS];
   Util.assert(Util.isArray(listOfUsers));
 
   this.__loadWorldFromListOfRecordsAndUsers(listOfRecords, listOfUsers);
@@ -180,150 +112,6 @@
   
 
 /**
- * Given a UUID, either (a) returns the existing item identified by that UUID, 
- * or (b) creates an new item object, set its UUID, and returns that object.
- *
- * @scope    private instance method
- * @param    inUuid    The UUID of the item to be returned. 
- * @return   The item identified by the given UUID.
- */
-DeltaVirtualServer.prototype.__getItemFromUuidOrBootstrapItem = function (inUuid) {
-  var item = this.getItemFromUuid(inUuid);
-  if (!item) {
-    item = new Item(this.getWorld(), inUuid);
-    this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
-  }
-  return item;
-};
-
-
-/**
- * Given a UUID, either (a) returns the existing entry identified by that UUID, 
- * or (b) creates an new entry object, set its UUID, and returns that object.
- *
- * @scope    private instance method
- * @param    inUuid    The UUID of the entry to be returned. 
- * @return   The entry identified by the given UUID.
- */
-DeltaVirtualServer.prototype.__getEntryFromUuidOrBootstrapEntry = function (inUuid) {
-  var entry = this.__myHashTableOfEntriesKeyedByUuid[inUuid];
-  if (!entry) {
-    entry = new Entry(this.getWorld(), inUuid);
-    this.__myHashTableOfEntriesKeyedByUuid[inUuid] = entry;
-  }
-  return entry;
-};
-
-
-/**
- * Given a dehydrated list of records, rehydrates each of the records.
- *
- * @scope    private instance method
- * @param    inListOfRecords    A list of dehydrated records. 
- */
-DeltaVirtualServer.prototype._rehydrateRecords = function (inListOfRecords) {
-  var key;
-  var itemUuid;
-  var item;
-  var contentRecordUuid;
-  var contentRecord;
-  
-  for (key in inListOfRecords) {
-    var dehydratedRecord = inListOfRecords[key];
-
-    var dehydratedTransaction = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_TRANSACTION_CLASS];
-    if (dehydratedTransaction) {
-      var listOfRecordsInTransaction = dehydratedTransaction;
-      this._rehydrateRecords(listOfRecordsInTransaction);
-    } else {
-      var dehydratedItem = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS];
-      var dehydratedVote = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS];
-      var dehydratedOrdinal = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS];
-      var dehydratedEntry = dehydratedRecord[DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS];
-  
-      var contents = dehydratedItem || dehydratedVote || dehydratedOrdinal || dehydratedEntry;
-  
-      // var timestampString = contents[DeltaVirtualServer.JSON_MEMBER_TIMESTAMP];
-      // var userstampUuid = contents[DeltaVirtualServer.JSON_MEMBER_USERSTAMP];
-      // var timestamp = new Date(new Number(timestampString));
-      // var userstamp = this.__getItemFromUuidOrBootstrapItem(userstampUuid);
-      // var timestamp = null;
-      // var userstamp = null;
-      
-      if (dehydratedItem) {
-        itemUuid = dehydratedItem[DeltaVirtualServer.JSON_MEMBER_UUID];
-        item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
-        this.__myChronologicalListOfRecords.push(item);
-      }
-      if (dehydratedVote) {
-        var voteUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_UUID];
-        var retainFlagString = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG];
-        var retainFlag = null;
-        if (retainFlagString == "true") {
-          retainFlag = true;
-        }
-        if (retainFlagString == "false") {
-          retainFlag = false;
-        }
-        Util.assert(retainFlag !== null);
-        contentRecordUuid = dehydratedVote[DeltaVirtualServer.JSON_MEMBER_RECORD];
-        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var vote = new Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
-        this.__myChronologicalListOfRecords.push(vote);
-      }
-      if (dehydratedOrdinal) {
-        var ordinalUuid = dehydratedOrdinal[DeltaVirtualServer.JSON_MEMBER_UUID];
-        var ordinalNumber = dehydratedOrdinal[DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
-        contentRecordUuid = dehydratedOrdinal[DeltaVirtualServer.JSON_MEMBER_RECORD];
-        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var ordinal = new Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
-        this.__myChronologicalListOfRecords.push(ordinal);
-      }
-      if (dehydratedEntry) {
-        var entryUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_UUID];
-        itemUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_ITEM];
-        item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
-        var attributeUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE];
-        var attribute = null;
-        if (attributeUuid) {
-          attribute = this.__getItemFromUuidOrBootstrapItem(attributeUuid);
-        }
-        var previousEntryUuid = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE];
-        var previousEntry = null;
-        if (previousEntryUuid) {
-          previousEntry = this.__getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
-        }
-        var rawData = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_VALUE];
-        var dataTypeToken = dehydratedEntry[DeltaVirtualServer.JSON_MEMBER_TYPE];
-        var dataType = this._getTypeFromTypeToken(dataTypeToken);
-        var finalData = null;
-        switch (dataTypeToken) {
-          case DeltaVirtualServer.JSON_TYPE_RELATED_UUID:
-            finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
-            break;
-          case DeltaVirtualServer.JSON_TYPE_TEXT_VALUE:
-            finalData = rawData;
-            break;
-          case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE:
-            finalData = rawData;
-            break;
-          case DeltaVirtualServer.JSON_TYPE_DATE_VALUE:
-            finalData = new Date(rawData);
-            break;
-          default:
-            Util.assert(false,'Unknown data type while _rehydrating()');
-        }
-        var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
-        var itemOrEntry = previousEntry || item;
-        entry._rehydrate(itemOrEntry, attribute, finalData, dataType);
-        this.__myChronologicalListOfRecords.push(entry);
-      }
-    }
-  }
-};
-
-
-/**
  * Loads a world of items from a dehydrated list of entries, where those
  * entries may represent items, entries, votes, or ordinal settings.
  *
@@ -336,8 +124,8 @@
   
   for (var key in inListOfUsers) {
     var dehydratedUserData = inListOfUsers[key];
-    var userUuid = dehydratedUserData[DeltaVirtualServer.JSON_MEMBER_UUID];
-    var userPassword = dehydratedUserData[DeltaVirtualServer.JSON_MEMBER_PASSWORD];
+    var userUuid = dehydratedUserData[StubVirtualServer.JSON_MEMBER_UUID];
+    var userPassword = dehydratedUserData[StubVirtualServer.JSON_MEMBER_PASSWORD];
     
     var user = this.getItemFromUuid(userUuid);
     if (user) {
@@ -368,38 +156,6 @@
 
 
 /**
- * Given an item that represents that represents a basic data type, this method
- * returns the corresponding string token that represents the same data type.
- *
- * @scope    private instance method
- * @param    inType    An item that represents a basic data type, like Text, Number, or URL. 
- * @return   A string token that represents a basic data type.
- */
-DeltaVirtualServer.prototype._getTypeTokenFromType = function (inType) {
-  for (var token in this._myHashTableOfTypesKeyedByToken) {
-    typeItem = this._myHashTableOfTypesKeyedByToken[token];
-    if (inType == typeItem) {
-      return token;
-    }
-  }
-  Util.assert(false, "no such type: " + inType.getDisplayName());
-};
-
-
-/**
- * Given a string token that represents a basic data type, this method
- * returns the corresponding item that represents the same data type.
- *
- * @scope    private instance method
- * @param    inToken    A string token that represents a basic data type.
- * @return   An item that represents a basic data type, like Text, Number, or URL. 
- */
-DeltaVirtualServer.prototype._getTypeFromTypeToken = function (inToken) {
-  return this._myHashTableOfTypesKeyedByToken[inToken];
-};
-
-
-/**
  * Returns a big string, containing JavaScript "object literal"
  * representations of all of the records in a Transaction.
  *
@@ -420,7 +176,7 @@
     indent = "    ";
     var listOfStrings = [];
     listOfStrings.push("  // =======================================================================\n");
-    listOfStrings.push('  { "' + DeltaVirtualServer.JSON_MEMBER_TRANSACTION_CLASS + '": [\n');
+    listOfStrings.push('  { "' + StubVirtualServer.JSON_MEMBER_TRANSACTION_CLASS + '": [\n');
     var content = this._getJsonStringRepresentingRecords(inTransaction.getRecords(), indent);
     listOfStrings.push(content);
     listOfStrings.push('  ]\n');
@@ -459,75 +215,84 @@
     listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
     if (record instanceof Item) {
       var item = record;
-      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
+      listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
       itemDisplayNameSubstring = this.truncateString(item.getDisplayName());
       listOfStrings.push('                                               // ' + itemDisplayNameSubstring + '\n');
-      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '"');
+      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '"');
     }
     if (record instanceof Vote) {
       var vote = record;
-      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{');
+      listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{');
       entryDisplayNameSubstring = this.truncateString(vote.getContentRecord().getDisplayString());
       var deleteVsRetainString = vote.getRetainFlag() ? "RETAIN" : "DELETE";
       listOfStrings.push('                                              // vote to ' + deleteVsRetainString + " " + entryDisplayNameSubstring + '\n');
-      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + vote._getUuid() + '",\n');
-      listOfStrings.push(indent + '       "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getContentRecord()._getUuid() + '",\n');
-      listOfStrings.push(indent + '   "' + DeltaVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
+      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + vote._getUuid() + '",\n');
+      listOfStrings.push(indent + '       "' + StubVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getContentRecord()._getUuid() + '",\n');
+      listOfStrings.push(indent + '   "' + StubVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
     }
     if (record instanceof Ordinal) {
       var ordinal = record;
-      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + ordinal._getUuid() + '",\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getContentRecord()._getUuid() + '",\n');
-      listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
+      listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + ordinal._getUuid() + '",\n');
+      listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getContentRecord()._getUuid() + '",\n');
+      listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
     }
     if (record instanceof Entry) {
       var entry = record;
-      listOfStrings.push(indent + '{ "' + DeltaVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{');
+      listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{');
       entryDisplayNameSubstring = this.truncateString(entry.getDisplayString());
       listOfStrings.push('                                              // ' + entryDisplayNameSubstring + '\n');
-      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + entry._getUuid() + '",\n');
-      var attribute = entry.getAttribute();
-      if (attribute) {
-        var attributeName = attribute.getDisplayName();
-        listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
-        var attributeNameSubstring = this.truncateString(attributeName);
-        listOfStrings.push('  // ' + attributeNameSubstring + '\n');
-      }
-      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_ITEM + '": "' + entry.getItem()._getUuid() + '",');
-      itemDisplayNameSubstring = this.truncateString(entry.getItem().getDisplayName());
-      listOfStrings.push('  // ' + itemDisplayNameSubstring + '\n');
+      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + entry._getUuid() + '",\n');
       var previousEntry = entry.getPreviousEntry();
       if (previousEntry) {
-        listOfStrings.push(indent + '"' + DeltaVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
+        listOfStrings.push(indent + '"' + StubVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
       }
-      var contentData = entry.getValue();
       var entryType = entry.getType();
       var typeToken = this._getTypeTokenFromType(entryType);
-      listOfStrings.push(indent + '         "' + DeltaVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
-      
-      var valueString = null;
-      switch (typeToken) {
-        case DeltaVirtualServer.JSON_TYPE_NUMBER_VALUE: 
-          valueString = contentData;
-          break;
-        case DeltaVirtualServer.JSON_TYPE_TEXT_VALUE: 
-          valueString = '"' + contentData + '"';
-          break;
-        case DeltaVirtualServer.JSON_TYPE_DATE_VALUE: 
-          valueString = '"' + contentData.toString() + '"';
-          break;
-        case DeltaVirtualServer.JSON_TYPE_RELATED_UUID: 
-          valueString = '"' + contentData._getUuid() + '"';
-          break;
-        default:
-          Util.assert(false, "no such type: " + typeToken);
+      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
+      if (typeToken == StubVirtualServer.JSON_TYPE_CONNECTION) {
+        var pairOfItems = entry.getItem();
+        var firstItem = pairOfItems[0];
+        var secondItem = pairOfItems[1];
+        listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_ITEM + '": ["' + firstItem._getUuid() + '", "' + secondItem._getUuid() + '"],\n');
+        var pairOfAttributes = entry.getAttribute();
+        var firstAttribute = pairOfAttributes[0];
+        var secondAttribute = pairOfAttributes[1];
+        listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": ["' + firstAttribute._getUuid() + '", "' + secondAttribute._getUuid() + '"]');
+      } else {
+        var attribute = entry.getAttribute();
+        if (attribute) {
+          var attributeName = attribute.getDisplayName();
+          listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
+          var attributeNameSubstring = this.truncateString(attributeName);
+          listOfStrings.push('  // ' + attributeNameSubstring + '\n');
+        }
+        listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_ITEM + '": "' + entry.getItem()._getUuid() + '",');
+        itemDisplayNameSubstring = this.truncateString(entry.getItem().getDisplayName());
+        listOfStrings.push('  // ' + itemDisplayNameSubstring + '\n');
+        var contentData = entry.getValue();
+        
+        var valueString = null;
+        switch (typeToken) {
+          case StubVirtualServer.JSON_TYPE_NUMBER_VALUE: 
+            valueString = contentData;
+            break;
+          case StubVirtualServer.JSON_TYPE_TEXT_VALUE: 
+            valueString = '"' + contentData + '"';
+            break;
+          case StubVirtualServer.JSON_TYPE_DATE_VALUE: 
+            valueString = '"' + contentData.toString() + '"';
+            break;
+          case StubVirtualServer.JSON_TYPE_RELATED_UUID: 
+            valueString = '"' + contentData._getUuid() + '"';
+            break;
+          default:
+            Util.assert(false, "no such type: " + typeToken);
+        }
+        listOfStrings.push(indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + '');
       }
-      listOfStrings.push(indent + '        "' + DeltaVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + '');
     }
     listOfStrings.push('  }');
-    // Util.assert(record.getUserstamp() !== null);
-    // listOfStrings.push(indent + '    "' + DeltaVirtualServer.JSON_MEMBER_USERSTAMP + '": "' + record.getUserstamp()._getUuid() + '",');
     // var userDisplayName = record.getUserstamp().getDisplayName();
     // var userDisplayNameSubstring = this.truncateString(userDisplayName);
     // listOfStrings.push('  // by (' + userDisplayNameSubstring + ')\n');
@@ -554,10 +319,10 @@
   if (inChromeFlag) {
     listOfStrings.push('// User list, in JSON format' + '\n');
     listOfStrings.push('{ ');
-    listOfStrings.push('"' + DeltaVirtualServer.JSON_MEMBER_FORMAT + '": "' + DeltaVirtualServer.JSON_FORMAT_2005_MAY_USERS + '", ' + '\n');    
+    listOfStrings.push('"' + StubVirtualServer.JSON_MEMBER_FORMAT + '": "' + StubVirtualServer.JSON_FORMAT_2005_MAY_USERS + '", ' + '\n');    
   }
   
-  listOfStrings.push('  "' + DeltaVirtualServer.JSON_MEMBER_USERS + '": ' + '[\n');
+  listOfStrings.push('  "' + StubVirtualServer.JSON_MEMBER_USERS + '": ' + '[\n');
   var firstContentRecord = true;
   for (key in this.__myListOfUsers) {
     var user = this.__myListOfUsers[key];
@@ -571,8 +336,8 @@
     if (password) {
       passwordString = '"' + password + '"';
     }
-    listOfStrings.push('    { "' + DeltaVirtualServer.JSON_MEMBER_UUID + '": "' + user._getUuid() + '", ');
-    listOfStrings.push('"' + DeltaVirtualServer.JSON_MEMBER_PASSWORD + '": ' + passwordString + ' }');
+    listOfStrings.push('    { "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + user._getUuid() + '", ');
+    listOfStrings.push('"' + StubVirtualServer.JSON_MEMBER_PASSWORD + '": ' + passwordString + ' }');
   }
   listOfStrings.push(" ]\n");
   
@@ -597,8 +362,8 @@
   
   listOfStrings.push('// Repository dump, in JSON format' + '\n');
   listOfStrings.push('{ ');
-  listOfStrings.push('"' + DeltaVirtualServer.JSON_MEMBER_FORMAT + '": "' + DeltaVirtualServer.JSON_FORMAT_2005_APRIL + '", ' + '\n');
-  listOfStrings.push('  "' + DeltaVirtualServer.JSON_MEMBER_DATA + '": ' + '[' + '\n');
+  listOfStrings.push('"' + StubVirtualServer.JSON_MEMBER_FORMAT + '": "' + StubVirtualServer.JSON_FORMAT_2005_APRIL + '", ' + '\n');
+  listOfStrings.push('  "' + StubVirtualServer.JSON_MEMBER_DATA + '": ' + '[' + '\n');
 
   var indent = "  ";
   var jsonStringForRecords = this._getJsonStringRepresentingRecords(this.__myChronologicalListOfRecords, indent);

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/model/Entry.js	2005-06-17 22:31:55 UTC (rev 161)
@@ -54,7 +54,6 @@
 Entry.prototype = new ContentRecord();  // makes Entry be a subclass of ContentRecord
 function Entry(inWorld, inUuid) {
   this._ContentRecord(inWorld, inUuid);
-  // this._Record(inWorld, inUuid);
  
   this.__myPreviousEntry = null;
   this.__myListOfSubsequentEntries = [];
@@ -78,49 +77,73 @@
  *
  * @scope    protected instance method
  * @param    inItemOrEntry    The item that this is a entry of, or the old entry that this entry replaces. 
- * @param    inAttribute    The attribute that this entry is assigned to. May be null. 
- * @param    inValue    The value to initialize the entry with. 
-* @param    inType    Optional.  The data type to interpret the value as. 
+
+ * @param    item    The item that this is an entry of. 
+ * @param    previousEntry    Optional. The old entry that this entry is replacing. 
+ * @param    attribute    The attribute that this entry is assigned to. May be null. 
+ * @param    value    The value to initialize the entry with. 
+ * @param    type    Optional.  The data type to interpret the value as. 
  */
-Entry.prototype._initialize = function (inItemOrEntry, inAttribute, inValue, inType) {
-  if (inItemOrEntry instanceof Entry) {
-    this.__myPreviousEntry = inItemOrEntry;
-    this.__myItem = this.__myPreviousEntry.getItem();
+Entry.prototype._initialize = function (item, previousEntry, attribute, value, type) {
+  this.__myItem = item;
+  this.__myAttribute = attribute;
+
+  if (previousEntry) {
+    this.__myPreviousEntry = previousEntry;
     this.__myPreviousEntry.__addSubsequentEntry(this);
   } else {
     this.__myPreviousEntry = null;
-    this.__myItem = inItemOrEntry;
   }
   
-  this.__myAttribute = inAttribute;
-  if (inType) {
-    this._myType = inType;
-  }
-  else {
-    var contentData = inValue;
-    if (Util.isNumber(contentData)) {
+  if (type) {
+    this._myType = type;
+  } else {
+    if (Util.isNumber(value)) {
       this._myType = this.getWorld().getTypeCalledNumber();
     }
-    else if (Util.isString(contentData)) {
+    else if (Util.isString(value)) {
       this._myType = this.getWorld().getTypeCalledText();
     }
-    else if (Util.isDate(contentData)) {
+    else if (Util.isDate(value)) {
       this._myType = this.getWorld().getTypeCalledDate();
     }
-    else if (contentData instanceof Item) {
+    else if (value instanceof Item) {
       this._myType = this.getWorld().getTypeCalledItem();
     }
     else {Util.assert(false, "unknown data type");}
   }
-  if (Util.isString(inValue)) {
-    this.__myValue = Util.getCleanString(inValue);
+  if (Util.isString(value)) {
+    this.__myValue = Util.getCleanString(value);
   } else {
-    this.__myValue = inValue;
+    this.__myValue = value;
   }
 };
 
 
 /**
+ * Initializes a new entry that has just been created by a user action.
+ *
+ * WARNING: This method should be called ONLY from a 
+ * VirtualServer implementation.
+ *
+ * This method is NOT used for setting the properties of entrys that
+ * are being rehydrated from a dehydrated JSON string.  For that, you
+ * need to call entry.rehydrate();
+ *
+ * @scope    protected instance method
+ * @param    itemOne    One of the two items that this entry will connect. 
+ * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
+ * @param    itemTwo    One of the two items that this entry will connect. 
+ * @param    attributeTwo    Optional. The attribute of itemTwo that this entry will be assigned to.  
+ */
+Entry.prototype._initializeConnection = function (itemOne, attributeOne, itemTwo, attributeTwo) {
+  this.__myItem = [itemOne, itemTwo];
+  this.__myAttribute = [attributeOne, attributeTwo];
+  this._myType = this.getWorld().getTypeCalledConnection();
+};
+
+
+/**
  * Sets the properties of a newly rehydrated entry object.
  *
  * WARNING: This method should be called ONLY from a 
@@ -130,23 +153,19 @@
  * rehydrating dehydrated entry objects. 
  *
  * @scope    protected instance method
- * @param    inItemOrEntry    The item that this is a entry of, or the old entry that this entry replaces. 
+ * @param    inItem    The item that this is an entry of. 
  * @param    inAttribute    The attribute that this entry is assigned to. May be null. 
  * @param    inValue    The value to initialize the entry with. 
- * @param    inTimestamp    A Date object with the creation timestamp for this entry. 
- * @param    inUserstamp    The user who created this entry. 
+ * @param    inPreviousEntry    Optional. An old entry that this entry replaces. 
+ * @param    inType    Optional. An item representing a data type. 
  */
-// Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inTimestamp, inUserstamp, inType) {
-Entry.prototype._rehydrate = function (inItemOrEntry, inAttribute, inValue, inType) {
-  // this._rehydrateContentRecord(inTimestamp, inUserstamp);
-
-  if (inItemOrEntry instanceof Entry) {
-    this.__myPreviousEntry = inItemOrEntry;
-    this.__myItem = this.__myPreviousEntry.getItem();
+Entry.prototype._rehydrate = function (inItem, inAttribute, inValue, inPreviousEntry, inType) {
+  this.__myItem = inItem;
+  if (inPreviousEntry) {
+    this.__myPreviousEntry = inPreviousEntry;
     this.__myPreviousEntry.__addSubsequentEntry(this);
   } else {
     this.__myPreviousEntry = null;
-    this.__myItem = inItemOrEntry;
   }
 
   this.__myAttribute = inAttribute;
@@ -154,7 +173,19 @@
   
   this._myType = inType;
 
-  this.__myItem._addRehydratedEntry(this);
+  if (this.__myItem instanceof Item) {
+    this.__myItem._addRehydratedEntry(this, inAttribute);
+  } else {
+    Util.assert(Util.isArray(this.__myItem));
+    Util.assert(this.__myItem.length == 2);
+    Util.assert(Util.isArray(this.__myAttribute));
+    Util.assert(this.__myAttribute.length == 2);
+    
+    var firstItem = this.__myItem[0];
+    var secondItem = this.__myItem[1];
+    firstItem._addRehydratedEntry(this, this.__myAttribute[0]);
+    secondItem._addRehydratedEntry(this, this.__myAttribute[1]);
+  }
 };
 
 
@@ -207,6 +238,30 @@
 
 
 /**
+ * If this is a ConnectionEntry, given one of the two connected items, this
+ * method returns the attribute that this entry was assigned to in that item.
+ *
+ * @scope    public instance method
+ * @param    item    The item that this is an entry of. 
+ * @return   An attribute item.
+ */
+Entry.prototype.getAttributeForItem = function (item) {
+  if (this.__myItem == item) {
+    return this.__myAttribute;
+  }
+  if (Util.isArray(this.__myItem)) {
+    if (this.__myItem[0]) {
+      return this.__myAttribute[0];
+    }
+    if (this.__myItem[1]) {
+      return this.__myAttribute[1];
+    }
+  }
+  return null;
+};
+
+
+/**
  * Returns the value that this entry holds.
  *
  * @scope    public instance method
@@ -224,15 +279,28 @@
  * @return   A string representing the literal data in this entry.
  */
 Entry.prototype.getDisplayString = function () {
-  if (this.__myValue instanceof Item) {
-    return this.__myValue.getDisplayName();
-  } else if (this.__myValue instanceof Date) {
-    var aDate = this.__myValue;
-    return Util.ABBREV_MONTHS_ARRAY[aDate.getMonth()] + ' ' + aDate.getDate() + ', '+ (aDate.getYear()+1900);
+  var returnString = "";
+  switch (this._myType) {
+    case this.getWorld().getTypeCalledNumber():
+      returnString = "" + this.__myValue;
+      break;
+    case this.getWorld().getTypeCalledText():
+      returnString = this.__myValue;
+      break;
+    case this.getWorld().getTypeCalledDate():
+      var aDate = this.__myValue;
+      returnString = Util.ABBREV_MONTHS_ARRAY[aDate.getMonth()] + ' ' + aDate.getDate() + ', '+ (aDate.getYear()+1900);
+      break;
+    case this.getWorld().getTypeCalledItem():
+      returnString = this.__myValue.getDisplayName();
+      break;
+    case this.getWorld().getTypeCalledConnection():
+      var firstItem = this.__myItem[0];
+      var secondItem = this.__myItem[1];
+      returnString = "connection between [" + firstItem.getDisplayName() + "] and [" + secondItem.getDisplayName() + "]";
+      break;
   }
-  else {
-    return "" + this.__myValue;
-  }
+  return returnString;
 };
 
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/model/Item.js	2005-06-17 22:31:55 UTC (rev 161)
@@ -55,7 +55,6 @@
 Item.prototype = new ContentRecord();  // makes Item be a subclass of ContentRecord
 function Item(inWorld, inUuid) {
   this._ContentRecord(inWorld, inUuid);
-  // this._Record(inWorld, inUuid);
   
   this.__myHashTableOfEntryListsKeyedByAttributeUuid = {};
   this.__myProvisionalFlag = false;
@@ -96,12 +95,13 @@
  *
  * @scope    public instance method
  * @param    inValue    The value to initialize the entry to.
+ * @param    inType    Optional. An item representing a data type.
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.addEntry = function (inValue) {
+Item.prototype.addEntry = function (inValue, inType) {
   var attributeCalledUnfiled = this.getWorld().getAttributeCalledUnfiled();
-  return this.addEntryForAttribute(attributeCalledUnfiled, inValue);
+  return this._createNewEntry(null, attributeCalledUnfiled, inValue, inType);
 };
 
 
@@ -124,11 +124,12 @@
  * @scope    public instance method
  * @param    inAttribute    The attribute to assign the entry to. 
  * @param    inValue    The value to initialize the entry with.
+ * @param    inType    Optional. An item representing a data type.
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
 Item.prototype.addEntryForAttribute = function (inAttribute, inValue, inType) {
-  return this.replaceEntryWithEntryForAttribute(null, inAttribute, inValue, inType);
+  return this._createNewEntry(null, inAttribute, inValue, inType);
 };
 
 
@@ -138,12 +139,13 @@
  * @scope    public instance method
  * @param    inEntry    The old entry to be replaced.
  * @param    inValue    The value to initialize the new entry to.
+ * @param    inType    Optional. An item representing a data type.
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
 Item.prototype.replaceEntry = function (inEntry, inValue, inType) {
-  var attribute = inEntry.getAttribute();
-  return this.replaceEntryWithEntryForAttribute(inEntry, attribute, inValue, inType);
+  var attribute = inEntry.getAttributeForItem(this);
+  return this._createNewEntry(inEntry, attribute, inValue, inType);
 };
 
 
@@ -155,17 +157,33 @@
  * @param    inEntry    The old entry to be replaced.
  * @param    inAttribute    The attribute to assign the entry to. 
  * @param    inValue    The value to initialize the new entry to.
+ * @param    inType    Optional. An item representing a data type.
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
 Item.prototype.replaceEntryWithEntryForAttribute = function (inEntry, inAttribute, inValue, inType) {
+  return this._createNewEntry(inEntry, inAttribute, inValue, inType);
+};
 
+
+/**
+ * Replaces an existing entry with a new entry, and assigns the new entry
+ * to an attribute.
+ *
+ * @param    previousEntry    Optional. The old entry to be replaced.
+ * @param    attribute    The attribute to assign the entry to. 
+ * @param    value    The value to initialize the new entry to.
+ * @param    type    Optional. An item representing a data type.
+ * @scope    private instance method
+ */
+Item.prototype._createNewEntry = function (previousEntry, attribute, value, type) {
+
   // If we've just been asked to replace the string "Foo" with the string "Foo",
   // then don't even bother creating a new entry. 
-  if (inEntry) {
-    var oldValue = inEntry.getValue();
-    var oldAttribute = inEntry.getAttribute();
-    if ((oldValue == inValue) && (oldAttribute == inAttribute)) {
+  if (previousEntry) {
+    var oldValue = previousEntry.getValue();
+    var oldAttribute = previousEntry.getAttribute();
+    if ((oldValue == value) && (oldAttribute == attribute)) {
       return null;
     }
   }
@@ -176,13 +194,53 @@
     this.getWorld()._provisionalItemJustBecameReal(this);
   }
   
-  var itemOrEntry = inEntry || this;
-  var entry = this.getWorld()._newEntry(itemOrEntry, inAttribute, inValue, inType);
+  var entry = this.getWorld()._newEntry(this, previousEntry, attribute, value, type);
   this.getWorld().endTransaction();
   return entry;
 };
 
 
+/**
+ * Creates a new entry object representing a connection between two
+ * items.
+ * For example, to make a Tolkien be the author of The Hobbit:
+ * <pre>
+ *    theHobbit.addConnectionEntry(author, tolkien, booksAuthored);
+ * </pre>
+ * Or you could get exactly the same result by doing the reverse:
+ * <pre>
+ *    tolkien.addConnectionEntry(booksAuthored, theHobbit, author);
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    myAttribute    The attribute to assign the entry to. 
+ * @param    otherItem    The item to create a connection to.
+ * @param    otherAttribute    Optional. An attribute of the otherItem to assign the entry to on the otherItem.
+ * @return   The new entry object.
+ * @throws   Throws an Error if no user is logged in.
+ */
+Item.prototype.addConnectionEntry = function (myAttribute, otherItem, otherAttribute) {
+  Util.assert(otherItem instanceof Item);
+  
+  this.getWorld().beginTransaction();
+  if (this.__myProvisionalFlag) {
+    this.__myProvisionalFlag = false;
+    this.getWorld()._provisionalItemJustBecameReal(this);
+  }
+  if (otherItem.__myProvisionalFlag) {
+    otherItem.__myProvisionalFlag = false;
+    this.getWorld()._provisionalItemJustBecameReal(otherItem);
+  }
+  if (!otherAttribute) {
+    otherAttribute = this.getWorld().getAttributeCalledUnfiled();
+  }
+
+  var entry = this.getWorld()._newConnectionEntry(this, myAttribute, otherItem, otherAttribute);
+  this.getWorld().endTransaction();
+  return entry;
+};
+
+
 // -------------------------------------------------------------------
 // Accessor methods where the answer depends on the retrieval filter
 // -------------------------------------------------------------------
@@ -495,9 +553,10 @@
  * 
  * @scope    protected instance method
  * @param    inEntry    The entry to be associated with this item. 
+ * @param    inAttribute    The attribute that this entry is assigned to. 
  */
-Item.prototype._addRehydratedEntry = function (inEntry) {
-  this.__addEntryToListOfEntriesForAttribute(inEntry);
+Item.prototype._addRehydratedEntry = function (inEntry, inAttribute) {
+  this.__addEntryToListOfEntriesForAttribute(inEntry, inAttribute);
 };
   
 
@@ -510,9 +569,10 @@
  * 
  * @scope    private instance method
  * @param    inEntry    The entry to be associated with this item. 
+ * @param    attribute    The attribute that this entry is assigned to. 
  */
-Item.prototype.__addEntryToListOfEntriesForAttribute = function (inEntry) {
-  var attributeUuid = inEntry.getAttribute()._getUuid();
+Item.prototype.__addEntryToListOfEntriesForAttribute = function (inEntry, attribute) {
+  var attributeUuid = attribute._getUuid();
   var listOfEntries = this.__myHashTableOfEntryListsKeyedByAttributeUuid[attributeUuid];
   if (!listOfEntries) {
     listOfEntries = [];

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/model/ModelTest.js	2005-06-17 22:31:55 UTC (rev 161)
@@ -29,17 +29,21 @@
 *****************************************************************************/
  
 var ModelTestVars = null;
+var world;
 
-
 function setUp() {
   ModelTestVars = {};
+
+  var fileName = "2005_june_axiomatic_items.json";
+  var url = "../../../source/model/" + fileName;
+  var stubVirtualServer = new StubVirtualServer(url);
+  world = new World(stubVirtualServer);
 }
 
 function testGetUserstamp() {
-  var world = new World();
   var listOfUsers = world.getUsers();  
-  var axiomaticUser = listOfUsers[0];
-  assertTrue('The axiomaticUser created the axiomaticUser', (axiomaticUser.getUserstamp() == axiomaticUser));
+  // var axiomaticUser = listOfUsers[0];
+  // assertTrue('The axiomaticUser created the axiomaticUser', (axiomaticUser.getUserstamp() == axiomaticUser));
 
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
@@ -72,7 +76,7 @@
 }
 
 function testGetTimestamp() {
-  var world = new World();
+  // var world = new World();
   var tZero = new Date();
   var janesPassword = "jane's password";
   waitForNextMillisecond();
@@ -94,18 +98,19 @@
 }
 
 function testLoginLogout() {
-  var world = new World();
+  // var world = new World();
   var listOfUsers;
   var loginSuccess;
   
   listOfUsers = world.getUsers();
-  assertTrue("Initially, there's only an axiomatic user", listOfUsers.length == 1);
-  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
+  var originalLength = listOfUsers.length;
+  // assertTrue("Initially, there's only an axiomatic user", listOfUsers.length == 1);
+  // assertTrue('Nobody is logged in', world.getCurrentUser() === null);
 
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);  
   listOfUsers = world.getUsers();
-  assertTrue("Now there are two users", listOfUsers.length == 2);
+  assertTrue("Now there is another user", listOfUsers.length == (originalLength + 1));
   assertTrue('Nobody is logged in', world.getCurrentUser() === null);
 
   loginSuccess = world.login(userJane, "wrong password");
@@ -151,7 +156,7 @@
 function testAccessorsForAxiomaticItems() {
   var key;
   var item;
-  var world = new World();
+  // var world = new World();
   var listOfAssignedNames;
   var nameEntry;
   
@@ -186,7 +191,7 @@
 
   
 function noyet_testAdditionsAndRetrievals() {
-  var world = new World();
+  // var world = new World();
   var nameAttribute = world.getAttributeCalledName();
   
   var janesPassword = "jane's password";
@@ -297,7 +302,7 @@
 
 
 function testCategories() {
-  var world = new World();
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -338,7 +343,7 @@
 /*
 PENDING: the ordinal implementation was broken by the new UUID code
 function testOrdinals() {
-  var world = new World();
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -382,7 +387,7 @@
 */
   
 function testDeletion() {
-  var world = new World();
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -403,7 +408,7 @@
 
 
 function testItemObservation() {
-  var world = new World();
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -460,7 +465,7 @@
 
 
 function testListObservation() {
-  var world = new World();
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -513,7 +518,7 @@
 
 
 function testQueries() {
-  var world = new World();
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -595,13 +600,10 @@
 Tests World._getFilteredList, via World.getUsers and World.getCategories.
 */
 function testFilteredLists() {
-  var world = new World();
-  var listOfUsers = world.getUsers();
-  assertTrue("Initially, there's only an axiomatic user", listOfUsers.length == 1);
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);  
-  listOfUsers = world.getUsers();
-  assertTrue("Now there are two users", listOfUsers.length == 2);
+  var listOfUsers = world.getUsers();
 
   var listOfCategories = world.getCategories();
   var origNumberOfCategories = listOfCategories.length;
@@ -618,7 +620,7 @@
 }
 
 function testItemTypes() {
-  var world = new World();
+  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/model/StubVirtualServer.js	2005-06-17 22:31:55 UTC (rev 161)
@@ -41,13 +41,59 @@
 // -------------------------------------------------------------------
 
 
+// -------------------------------------------------------------------
+// DeltaVirtualServer public class constants
+// -------------------------------------------------------------------
+StubVirtualServer.JSON_MEMBER_FORMAT = "format";
+StubVirtualServer.JSON_MEMBER_TIMESTAMP = "timestamp";
+StubVirtualServer.JSON_MEMBER_DATA = "data";
+StubVirtualServer.JSON_MEMBER_RECORDS = "records";
+StubVirtualServer.JSON_MEMBER_USERS = "users";
+
+StubVirtualServer.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
+StubVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
+StubVirtualServer.JSON_FORMAT_2005_MAY_RECORDS = "2005_MAY_CHRONOLOGICAL_LIST";
+StubVirtualServer.JSON_FORMAT_2005_MAY_USERS = "2005_MAY_USER_LIST";
+StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS = "2005_JUNE_CHRONOLOGICAL_LIST";
+
+StubVirtualServer.JSON_MEMBER_TYPE = "type";
+StubVirtualServer.JSON_MEMBER_VALUE = "value";
+StubVirtualServer.JSON_TYPE_TEXT_VALUE = "TextValue";
+StubVirtualServer.JSON_TYPE_UUID = "Uuid";
+StubVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
+StubVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
+StubVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
+StubVirtualServer.JSON_TYPE_DATE_VALUE = "DateValue";
+StubVirtualServer.JSON_TYPE_CHECKMARK_VALUE = "CheckMarkValue";
+StubVirtualServer.JSON_TYPE_URL_VALUE = "UrlValue";
+StubVirtualServer.JSON_TYPE_CONNECTION = "Connection";
+
+StubVirtualServer.JSON_MEMBER_UUID = "uuid";
+StubVirtualServer.JSON_MEMBER_PASSWORD = "password";
+
+StubVirtualServer.JSON_MEMBER_ITEM_CLASS = "Item";
+StubVirtualServer.JSON_MEMBER_ENTRY_CLASS = "Entry";
+StubVirtualServer.JSON_MEMBER_VOTE_CLASS = "Vote";
+StubVirtualServer.JSON_MEMBER_ORDINAL_CLASS = "Ordinal";
+StubVirtualServer.JSON_MEMBER_TRANSACTION_CLASS = "Transaction";
+
+StubVirtualServer.JSON_MEMBER_ATTRIBUTE = "attribute";
+StubVirtualServer.JSON_MEMBER_PREVIOUS_VALUE = "previousEntry";
+StubVirtualServer.JSON_MEMBER_USERSTAMP = "userstamp";
+StubVirtualServer.JSON_MEMBER_RECORD = "record";
+StubVirtualServer.JSON_MEMBER_ITEM = "item";
+StubVirtualServer.JSON_MEMBER_RETAIN_FLAG = "retainFlag";
+StubVirtualServer.JSON_MEMBER_ORDINAL_NUMBER = "ordinalNumber";
+
+
 /**
  * The StubVirtualServer is a dummy place-holder datastore that does
  * a bare-minimum job of providing data to a World.
  *
  * @scope    public instance constructor
  */
-function StubVirtualServer() {
+function StubVirtualServer(inJsonAxiomsFileURL) {
+  this._myDehydratedAxiomFileURL = inJsonAxiomsFileURL;
 }
 
 
@@ -83,7 +129,8 @@
  */
 StubVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
   this._initialize(inWorld);
-  this._loadAxiomaticItems();
+  this._buildTypeHashTable();
+  this._loadAxiomaticItemsFromFileAtURL(this._myDehydratedAxiomFileURL);
 };
 
 
@@ -231,19 +278,20 @@
  * Returns a newly created entry.
  *
  * @scope    public instance method
- * @param    inItemOrEntry    The item that this is a entry of, or the old entry that this entry is replacing. 
- * @param    inAttribute    The attribute that this entry is assigned to. May be null. 
- * @param    inValue    The value to initialize the entry with. 
+ * @param    item    The item that this is an entry of. 
+ * @param    previousEntry    Optional. The old entry that this entry is replacing. 
+ * @param    attribute    The attribute that this entry is assigned to. May be null. 
+ * @param    value    The value to initialize the entry with. 
+ * @param    type    Optional. An item representing the data type of the value. 
  * @return   A newly created entry.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newEntry = function (inItemOrEntry, inAttribute, inValue, inType) {
+StubVirtualServer.prototype.newEntry = function (item, previousEntry, attribute, value, type) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
   var entry = new Entry(this.__myWorld, uuid);
-  entry._initialize(inItemOrEntry, inAttribute, inValue, inType);
-  var item = inItemOrEntry instanceof Item ? inItemOrEntry : inItemOrEntry.getItem();
-  item.__addEntryToListOfEntriesForAttribute(entry);
+  entry._initialize(item, previousEntry, attribute, value, type);
+  item.__addEntryToListOfEntriesForAttribute(entry, attribute);
   
   this.__myHashTableOfEntriesKeyedByUuid[uuid] = entry;
   this._currentTransaction.addRecord(entry);
@@ -252,6 +300,32 @@
  
 
 /**
+ * Returns a newly created entry.
+ *
+ * @scope    public instance method
+ * @param    itemOne    One of the two items that this entry will connect. 
+ * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
+ * @param    itemTwo    One of the two items that this entry will connect. 
+ * @param    attributeTwo    The attribute of itemTwo that this entry will be assigned to.  
+ * @return   A newly created entry.
+ * @throws   Throws an Error if no user is logged in.
+ */
+StubVirtualServer.prototype.newConnectionEntry = function(itemOne, attributeOne, itemTwo, attributeTwo) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var uuid = this._getNewUuid();
+  var entry = new Entry(this.__myWorld, uuid);
+  entry._initializeConnection(itemOne, attributeOne, itemTwo, attributeTwo);
+
+  itemOne.__addEntryToListOfEntriesForAttribute(entry, attributeOne);
+  itemTwo.__addEntryToListOfEntriesForAttribute(entry, attributeTwo);
+
+  this.__myHashTableOfEntriesKeyedByUuid[uuid] = entry;
+  this._currentTransaction.addRecord(entry);
+  return entry;
+};
+
+
+/**
  * Returns a newly created ordinal.
  *
  * @scope    public instance method
@@ -337,6 +411,7 @@
   return this.__myListOfUsers;
 };
 
+
 /**
  *
  */
@@ -351,6 +426,7 @@
   return listOfItems;
 };
 
+
 /**
  *
  */
@@ -359,6 +435,7 @@
   return this.getItemsOfCategory(categoryCalledCategory);
 };
 
+
 /**
  *
  */
@@ -706,7 +783,23 @@
  *
  * @scope    private instance method
  */
-StubVirtualServer.prototype._loadAxiomaticItems = function () {
+StubVirtualServer.prototype._loadAxiomaticItemsFromFileAtURL = function (url) {
+  var fileContentString = Util.getStringContentsOfFileAtURL(url);
+  Util.assert(Util.isString(fileContentString));
+  fileContentString += " ] }";
+
+  Util.assert(Util.isString(fileContentString));
+  var dehydratedRecords = null;
+  eval("dehydratedRecords = " + fileContentString + ";");
+  Util.assert(Util.isObject(dehydratedRecords));
+  var recordFormat = dehydratedRecords[StubVirtualServer.JSON_MEMBER_FORMAT];
+  Util.assert(recordFormat == StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
+  var listOfRecords = dehydratedRecords[StubVirtualServer.JSON_MEMBER_RECORDS];
+  Util.assert(Util.isArray(listOfRecords));
+  
+  this._rehydrateRecords(listOfRecords);
+  
+/* PENDING  
   var uuid;
   var name;
   var item;
@@ -829,9 +922,222 @@
   this._currentTransaction._listOfRecords = [];
   this.__myWorld.endTransaction();
   return listOfNewlyCreatedRecords;
+ */
 };
 
 
+/**
+ * Given a UUID, either (a) returns the existing item identified by that UUID, 
+ * or (b) creates an new item object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @return   The item identified by the given UUID.
+ */
+StubVirtualServer.prototype.__getItemFromUuidOrBootstrapItem = function (inUuid) {
+  var item = this.getItemFromUuid(inUuid);
+  if (!item) {
+    item = new Item(this.getWorld(), inUuid);
+    this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
+  }
+  return item;
+};
+
+
+/**
+ * Given a UUID, either (a) returns the existing entry identified by that UUID, 
+ * or (b) creates an new entry object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    inUuid    The UUID of the entry to be returned. 
+ * @return   The entry identified by the given UUID.
+ */
+StubVirtualServer.prototype.__getEntryFromUuidOrBootstrapEntry = function (inUuid) {
+  var entry = this.__myHashTableOfEntriesKeyedByUuid[inUuid];
+  if (!entry) {
+    entry = new Entry(this.getWorld(), inUuid);
+    this.__myHashTableOfEntriesKeyedByUuid[inUuid] = entry;
+  }
+  return entry;
+};
+
+
+/**
+ * PENDING.
+ *
+ * @scope    private instance method
+ */
+StubVirtualServer.prototype._buildTypeHashTable = function () {
+  var text      = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_TEXT);
+  var number    = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_NUMBER);
+  var dateType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_DATE);
+  var checkMark = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CHECK_MARK);
+  var url       = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_URL);
+  var itemType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_ITEM);
+  
+  this._myHashTableOfTypesKeyedByToken = {};
+  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_TEXT_VALUE] = text;
+  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_NUMBER_VALUE] = number;
+  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_DATE_VALUE] = dateType;
+  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
+  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_URL_VALUE] = url;
+  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_RELATED_UUID] = itemType;
+};
+
+
+/**
+ * Given an item that represents that represents a basic data type, this method
+ * returns the corresponding string token that represents the same data type.
+ *
+ * @scope    private instance method
+ * @param    inType    An item that represents a basic data type, like Text, Number, or URL. 
+ * @return   A string token that represents a basic data type.
+ */
+StubVirtualServer.prototype._getTypeTokenFromType = function (inType) {
+  for (var token in this._myHashTableOfTypesKeyedByToken) {
+    typeItem = this._myHashTableOfTypesKeyedByToken[token];
+    if (inType == typeItem) {
+      return token;
+    }
+  }
+  Util.assert(false, "no such type: " + inType.getDisplayName());
+};
+
+
+/**
+ * Given a string token that represents a basic data type, this method
+ * returns the corresponding item that represents the same data type.
+ *
+ * @scope    private instance method
+ * @param    inToken    A string token that represents a basic data type.
+ * @return   An item that represents a basic data type, like Text, Number, or URL. 
+ */
+StubVirtualServer.prototype._getTypeFromTypeToken = function (inToken) {
+  return this._myHashTableOfTypesKeyedByToken[inToken];
+};
+
+
+/**
+ * Given a dehydrated list of records, rehydrates each of the records.
+ *
+ * @scope    private instance method
+ * @param    inListOfRecords    A list of dehydrated records. 
+ */
+StubVirtualServer.prototype._rehydrateRecords = function (inListOfRecords) {
+  var key;
+  var itemUuid;
+  var item;
+  var contentRecordUuid;
+  var contentRecord;
+  
+  for (key in inListOfRecords) {
+    var dehydratedRecord = inListOfRecords[key];
+
+    var dehydratedTransaction = dehydratedRecord[StubVirtualServer.JSON_MEMBER_TRANSACTION_CLASS];
+    if (dehydratedTransaction) {
+      var listOfRecordsInTransaction = dehydratedTransaction;
+      this._rehydrateRecords(listOfRecordsInTransaction);
+    } else {
+      var dehydratedItem = dehydratedRecord[StubVirtualServer.JSON_MEMBER_ITEM_CLASS];
+      var dehydratedVote = dehydratedRecord[StubVirtualServer.JSON_MEMBER_VOTE_CLASS];
+      var dehydratedOrdinal = dehydratedRecord[StubVirtualServer.JSON_MEMBER_ORDINAL_CLASS];
+      var dehydratedEntry = dehydratedRecord[StubVirtualServer.JSON_MEMBER_ENTRY_CLASS];
+  
+      var contents = dehydratedItem || dehydratedVote || dehydratedOrdinal || dehydratedEntry;
+      
+      if (dehydratedItem) {
+        itemUuid = dehydratedItem[StubVirtualServer.JSON_MEMBER_UUID];
+        item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
+        this.__myChronologicalListOfRecords.push(item);
+      }
+      if (dehydratedVote) {
+        var voteUuid = dehydratedVote[StubVirtualServer.JSON_MEMBER_UUID];
+        var retainFlagString = dehydratedVote[StubVirtualServer.JSON_MEMBER_RETAIN_FLAG];
+        var retainFlag = null;
+        if (retainFlagString == "true") {
+          retainFlag = true;
+        }
+        if (retainFlagString == "false") {
+          retainFlag = false;
+        }
+        Util.assert(retainFlag !== null);
+        contentRecordUuid = dehydratedVote[StubVirtualServer.JSON_MEMBER_RECORD];
+        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
+        var vote = new Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
+        this.__myChronologicalListOfRecords.push(vote);
+      }
+      if (dehydratedOrdinal) {
+        var ordinalUuid = dehydratedOrdinal[StubVirtualServer.JSON_MEMBER_UUID];
+        var ordinalNumber = dehydratedOrdinal[StubVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
+        contentRecordUuid = dehydratedOrdinal[StubVirtualServer.JSON_MEMBER_RECORD];
+        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
+        var ordinal = new Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
+        this.__myChronologicalListOfRecords.push(ordinal);
+      }
+      if (dehydratedEntry) {
+        var entryUuid = dehydratedEntry[StubVirtualServer.JSON_MEMBER_UUID];
+        var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
+        var previousEntryUuid = dehydratedEntry[StubVirtualServer.JSON_MEMBER_PREVIOUS_VALUE];
+        var previousEntry = null;
+        if (previousEntryUuid) {
+          previousEntry = this.__getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
+        }
+ 
+        var dataTypeToken = dehydratedEntry[StubVirtualServer.JSON_MEMBER_TYPE];
+        var dataType = this._getTypeFromTypeToken(dataTypeToken);
+        if (dataTypeToken == StubVirtualServer.JSON_TYPE_CONNECTION) {
+          var listOfItemUuids = dehydratedEntry[StubVirtualServer.JSON_MEMBER_ITEM];
+          var firstItemUuid = listOfItemUuids[0];
+          var secondItemUuid = listOfItemUuids[1];
+          var firstItem = this.__getItemFromUuidOrBootstrapItem(firstItemUuid);
+          var secondItem = this.__getItemFromUuidOrBootstrapItem(secondItemUuid);
+
+          var listOfAttributeUuids = dehydratedEntry[StubVirtualServer.JSON_MEMBER_ATTRIBUTE];
+          var firstAttributeUuid = listOfAttributeUuids[0];
+          var secondAttributeUuid = listOfAttributeUuids[1];
+          var firstAttribute = this.__getItemFromUuidOrBootstrapItem(firstAttributeUuid);
+          var secondAttribute = this.__getItemFromUuidOrBootstrapItem(secondAttributeUuid);
+          
+          var pairOfItems = [firstItem, secondItem];
+          var pairOfAttributes = [firstAttribute, secondAttribute];
+          entry._rehydrate(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
+        } else {
+          itemUuid = dehydratedEntry[StubVirtualServer.JSON_MEMBER_ITEM];
+          item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
+          var attributeUuid = dehydratedEntry[StubVirtualServer.JSON_MEMBER_ATTRIBUTE];
+          var attribute = null;
+          if (attributeUuid) {
+            attribute = this.__getItemFromUuidOrBootstrapItem(attributeUuid);
+          } else {
+            Util.assert(false); // the attributeUuid should always be there
+          }
+          var rawData = dehydratedEntry[StubVirtualServer.JSON_MEMBER_VALUE];
+          var finalData = null;
+          switch (dataTypeToken) {
+            case StubVirtualServer.JSON_TYPE_RELATED_UUID:
+              finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
+              break;
+            case StubVirtualServer.JSON_TYPE_TEXT_VALUE:
+              finalData = rawData;
+              break;
+            case StubVirtualServer.JSON_TYPE_NUMBER_VALUE:
+              finalData = rawData;
+              break;
+            case StubVirtualServer.JSON_TYPE_DATE_VALUE:
+              finalData = new Date(rawData);
+              break;
+            default:
+              Util.assert(false,'Unknown data type while _rehydrating()');
+          }
+          entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
+        }
+        this.__myChronologicalListOfRecords.push(entry);
+      }
+    }
+  }
+};
+
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/model/World.js	2005-06-17 22:31:55 UTC (rev 161)
@@ -76,6 +76,7 @@
 World.UUID_FOR_TYPE_URL                = "00001024-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_TYPE_ITEM               = "00001030-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_TYPE_ANYTHING           = "00001040-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_TYPE_CONNECTION         = "00001050-ce7f-11d9-8cd5-0011113ae5d6";
 
 // -------------------------------------------------------------------
 // World private class constants
@@ -135,6 +136,7 @@
   this._typeCalledUrl       = server.getItemFromUuid(World.UUID_FOR_TYPE_URL);
   this._typeCalledItem      = server.getItemFromUuid(World.UUID_FOR_TYPE_ITEM);
   this._typeCalledAnything  = server.getItemFromUuid(World.UUID_FOR_TYPE_ANYTHING);
+  this._typeCalledConnection = server.getItemFromUuid(World.UUID_FOR_TYPE_CONNECTION);
 }
 
 
@@ -189,23 +191,34 @@
   // a given item.
   for (key in listOfNewlyCreatedRecords) {
     var record = listOfNewlyCreatedRecords[key];
-    item = null;
+    var listOfItems = [];
+    var itemOrPairOfItems = null;
     if (record instanceof Item) {
-      item = record;
+      listOfItems.push(record);
     }
     if ((record instanceof Vote) || (record instanceof Ordinal)) {
       itemOrEntry = record.getContentRecord();
       if (itemOrEntry instanceof Item) {
-        item = itemOrEntry;
+        listOfItems.push(itemOrEntry);
       }
-       if (itemOrEntry instanceof Entry) {
-        item = itemOrEntry.getItem();
+      if (itemOrEntry instanceof Entry) {
+        itemOrPairOfItems = itemOrEntry.getItem();
       }
     }
     if (record instanceof Entry) {
-      item = record.getItem();
+      itemOrPairOfItems = record.getItem();
     }
-    if (item) {
+    if (itemOrPairOfItems) {
+      if (itemOrPairOfItems instanceof Item) {
+        listOfItems.push(itemOrPairOfItems); 
+      }
+      if (Util.isArray(itemOrPairOfItems)) {
+        listOfItems.push(itemOrPairOfItems[0]);
+        listOfItems.push(itemOrPairOfItems[1]);
+      }
+    }
+    for (var innerKey in listOfItems) {
+      item = listOfItems[innerKey];
       listOfRecordsForItem = hashTableOfNewlyCreatedRecordsKeyedByItemUuid[item._getUuid()];
       if (!listOfRecordsForItem) {
         listOfRecordsForItem = [];
@@ -438,8 +451,12 @@
   return this._typeCalledAnything;
 };
 
+World.prototype.getTypeCalledConnection = function() {
+  return this._typeCalledConnection;
+};
 
 
+
 // -------------------------------------------------------------------
 // Login and logout methods
 // -------------------------------------------------------------------
@@ -657,20 +674,40 @@
  * Returns a newly created entry.
  *
  * @scope    public instance method
- * @param    itemOrEntry    The item that this is a entry of, or the old entry that this entry is replacing. 
+ * @param    item    The item that this is an entry of. 
+ * @param    previousEntry    Optional. The old entry that this entry is replacing. 
  * @param    attribute    The attribute that this entry is assigned to. May be null. 
  * @param    value    The value to initialize the entry with. 
+ * @param    type    Optional. An item representing the data type of the value. 
  * @return   A newly created entry.
  */
-World.prototype._newEntry = function(itemOrEntry, attribute, value, type) {
+World.prototype._newEntry = function(item, previousEntry, attribute, value, type) {
   this.beginTransaction();
-  var entry = this._virtualServer.newEntry(itemOrEntry, attribute, value, type);
+  var entry = this._virtualServer.newEntry(item, previousEntry, attribute, value, type);
   this.endTransaction();
   return entry;
 };
 
 
 /**
+ * Returns a newly created entry.
+ *
+ * @scope    public instance method
+ * @param    itemOne    One of the two items that this entry will connect. 
+ * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
+ * @param    itemTwo    One of the two items that this entry will connect. 
+ * @param    attributeTwo    The attribute of itemTwo that this entry will be assigned to.  
+ * @return   A newly created entry.
+ */
+World.prototype._newConnectionEntry = function(itemOne, attributeOne, itemTwo, attributeTwo) {
+  this.beginTransaction();
+  var entry = this._virtualServer.newConnectionEntry(itemOne, attributeOne, itemTwo, attributeTwo);
+  this.endTransaction();
+  return entry;
+};
+
+
+/**
  * Returns a newly created ordinal.
  *
  * @scope    protected instance method

Modified: trunk/source/repositories/demo_page/2005_june_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-17 22:12:17 UTC (rev 160)
+++ trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-17 22:31:55 UTC (rev 161)
@@ -2,867 +2,6 @@
 { "format": "2005_JUNE_CHRONOLOGICAL_LIST", 
   "records": [
   // =======================================================================
-  { "Transaction": [  // Axiomatic items
-    { "Item": {                                               // Amy ex machina
-             "uuid": "00001000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Name
-             "uuid": "00001001-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Short Name
-             "uuid": "00001002-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Summary
-             "uuid": "00001003-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Body
-             "uuid": "00001004-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Category
-             "uuid": "00001005-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Query
-             "uuid": "00001006-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Matching Value
-             "uuid": "00001007-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Matching Attribute
-             "uuid": "00001008-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Unfiled Entry
-             "uuid": "00001009-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Expected Type
-             "uuid": "0000100a-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Attribute
-             "uuid": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Category
-             "uuid": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Query
-             "uuid": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Type
-             "uuid": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Text
-             "uuid": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Number
-             "uuid": "00001021-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Date
-             "uuid": "00001022-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Check Mark
-             "uuid": "00001023-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // URL
-             "uuid": "00001024-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Item
-             "uuid": "00001025-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Anything
-             "uuid": "00001026-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Amy ex machina
-             "uuid": "0001000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // Amy ex machina
-             "type": "TextValue",
-            "value": "Amy ex machina" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Name
-             "uuid": "0001001a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "type": "TextValue",
-            "value": "Name" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001001b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
-             "uuid": "0001001c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "type": "RelatedUuid",
-            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Short Name
-             "uuid": "0001002a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "type": "TextValue",
-            "value": "Short Name" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001002b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
-             "uuid": "0001002c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "type": "RelatedUuid",
-            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Summary
-             "uuid": "0001003a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "type": "TextValue",
-            "value": "Summary" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001003b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
-             "uuid": "0001003c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "type": "RelatedUuid",
-            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Body
-             "uuid": "0001004a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
-             "type": "TextValue",
-            "value": "Body" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001004b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
-             "uuid": "0001004c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
-             "type": "RelatedUuid",
-            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001005a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "TextValue",
-            "value": "Category" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001005b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001005c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query
-             "uuid": "0001006a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "TextValue",
-            "value": "Query" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001006b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query
-             "uuid": "0001006c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "RelatedUuid",
-            "value": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Matching Value
-             "uuid": "0001007a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
-             "type": "TextValue",
-            "value": "Matching Value" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001007b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Matching Attribute
-             "uuid": "0001008a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
-             "type": "TextValue",
-            "value": "Matching Attribute" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001008b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001008c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Unfiled Entry
-             "uuid": "0001009a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
-             "type": "TextValue",
-            "value": "Unfiled Entry" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001009b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Anything
-             "uuid": "0001009c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
-             "type": "RelatedUuid",
-            "value": "00001040-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Expected Type
-             "uuid": "000100aa-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "TextValue",
-            "value": "Expected Type" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "000100ab-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "000100ac-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "000100ad-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001010a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
-             "type": "TextValue",
-            "value": "Attribute" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001010b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001011a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "TextValue",
-            "value": "Category" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001011b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query
-             "uuid": "0001012a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "TextValue",
-            "value": "Query" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001012b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001013a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
-             "type": "TextValue",
-            "value": "Type" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001013b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
-             "uuid": "0001020a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
-             "type": "TextValue",
-            "value": "Text" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001020b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Number
-             "uuid": "0001021a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
-             "type": "TextValue",
-            "value": "Number" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001021b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Date
-             "uuid": "0001022a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
-             "type": "TextValue",
-            "value": "Date" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001022b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Check Mark
-             "uuid": "0001023a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
-             "type": "TextValue",
-            "value": "Check Mark" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001023b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // URL
-             "uuid": "0001024a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
-             "type": "TextValue",
-            "value": "URL" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001024b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Item
-             "uuid": "0001030a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
-             "type": "TextValue",
-            "value": "Item" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001030b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Anything
-             "uuid": "0001040a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
-             "type": "TextValue",
-            "value": "Anything" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001040b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
-             "type": "RelatedUuid",
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    } ]
-  },
-  // =======================================================================
-  { "Transaction": [  // Fundamental view-level items
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Page
-             "uuid": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Section
-             "uuid": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Section
-             "uuid": "00030000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Plugin Name (Attribute)
-             "uuid": "00040000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Plugin View (Attribute)
-             "uuid": "00040101-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Layout Data (Attribute)
-             "uuid": "00040102-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Applies to Plugin (Attribute)
-             "uuid": "00040103-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Table Columns (Attribute)
-             "uuid": "00040104-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Plugin View (Category)
-             "uuid": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Layout Data (Category)
-             "uuid": "00040202-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Table (Plugin View)
-             "uuid": "00040301-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Outline (Plugin View)
-             "uuid": "00040302-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Detail (Plugin View)
-             "uuid": "00040303-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Bar Chart (Plugin View)
-             "uuid": "00040304-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Page
-             "uuid": "0020000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
-             "type": "TextValue",
-            "value": "Page" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0020000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Section
-             "uuid": "0020100a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "TextValue",
-            "value": "Section" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0020100b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Section
-             "uuid": "0030000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "TextValue",
-            "value": "Section" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0030000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin Name
-             "uuid": "0040000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
-             "type": "TextValue",
-            "value": "Plugin Name" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0040000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View
-             "uuid": "0040101a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
-             "type": "TextValue",
-            "value": "Plugin View" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0040101b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
-             "uuid": "0040101c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
-             "type": "RelatedUuid",
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Layout Data
-             "uuid": "0040102a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
-             "type": "TextValue",
-            "value": "Layout Data" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0040102b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Layout Data (Category)
-             "uuid": "0040102c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
-             "type": "RelatedUuid",
-            "value": "00040202-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Applies To Plugin
-             "uuid": "0040103a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
-             "type": "TextValue",
-            "value": "Applies To Plugin" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0040103b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
-             "uuid": "0040103c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
-             "type": "RelatedUuid",
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Table Columns 
-             "uuid": "0040104a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
-             "type": "TextValue",
-            "value": "Table Columns" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0040104b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0040104c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
-             "type": "RelatedUuid",
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View
-             "uuid": "0040201a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
-             "type": "TextValue",
-            "value": "Plugin View" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0040201b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Layout Data
-             "uuid": "0040202a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
-             "type": "TextValue",
-            "value": "Layout Data" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0040202b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
-             "type": "RelatedUuid",
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Table View
-             "uuid": "0040301a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
-             "type": "TextValue",
-            "value": "Table View" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
-             "uuid": "0040301b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
-             "type": "RelatedUuid",
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Table
-             "uuid": "0040301c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
-             "type": "TextValue",
-            "value": "Table" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Outline View
-             "uuid": "0040302a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
-             "type": "TextValue",
-            "value": "Outline View" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
-             "uuid": "0040302b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
-             "type": "RelatedUuid",
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Outline
-             "uuid": "0040302c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
-             "type": "TextValue",
-            "value": "Outline" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Detail View
-             "uuid": "0040303a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
-             "type": "TextValue",
-            "value": "Detail View" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
-             "uuid": "0040303b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
-             "type": "RelatedUuid",
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Outline
-             "uuid": "0040303c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
-             "type": "TextValue",
-            "value": "Detail" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Bar Chart View
-             "uuid": "0040304a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
-             "type": "TextValue",
-            "value": "Bar Chart View" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
-             "uuid": "0040304b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
-             "type": "RelatedUuid",
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Bar Chart
-             "uuid": "0040304c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
-             "type": "TextValue",
-            "value": "Bar Chart" }
-    } ]
-  },
-  // =======================================================================
   { "Transaction": [  // Home Page  
     // -----------------------------------------------------------------------
     { "Item": {                                               // Welcome to the OpenRecord d...
@@ -900,79 +39,4 @@
              "type": "TextValue",
             "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
     } ]
-  },
-  // =======================================================================
-  { "Transaction": [
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Brian Douglas Skinner
-             "uuid": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Brian Douglas Skinner
-             "uuid": "2c4fa781-dde4-11d9-9c71-8022ab6bc8ae",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae",  // Brian Douglas Skinner
-             "type": "TextValue",
-            "value": "Brian Douglas Skinner" }
-    }  ]
-  },
-  // =======================================================================
-  { "Transaction": [
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Chih-Chao Lam
-             "uuid": "90e02170-dde4-11d9-9c71-e24829d2f59b" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Chih-Chao Lam
-             "uuid": "90e02171-dde4-11d9-9c71-e24829d2f59b",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "90e02170-dde4-11d9-9c71-e24829d2f59b",  // Chih-Chao Lam
-             "type": "TextValue",
-            "value": "Chih-Chao Lam" }
-    }  ]
-  },
-  // =======================================================================
-  { "Transaction": [
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Mignon Belongie
-             "uuid": "97d040f0-dde4-11d9-9c71-c103016080e1" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Mignon Belongie
-             "uuid": "97d040f1-dde4-11d9-9c71-c103016080e1",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "97d040f0-dde4-11d9-9c71-c103016080e1",  // Mignon Belongie
-             "type": "TextValue",
-            "value": "Mignon Belongie" }
-    }  ]
-  },
-  // =======================================================================
-  { "Transaction": [
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Mimi Yin
-             "uuid": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Mimi Yin
-             "uuid": "9c3596e1-dde4-11d9-9c71-b6ac85cc6d5f",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f",  // Mimi Yin
-             "type": "TextValue",
-            "value": "Mimi Yin" }
-    }  ]
-  },
-  // =======================================================================
-  { "Transaction": [
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Marty Betz
-             "uuid": "a00bf340-dde4-11d9-9c71-dae11c269bc7" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Marty Betz
-             "uuid": "a00bf341-dde4-11d9-9c71-dae11c269bc7",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "a00bf340-dde4-11d9-9c71-dae11c269bc7",  // Marty Betz
-             "type": "TextValue",
-            "value": "Marty Betz" }
-    }  ]
   }
\ No newline at end of file



From skinner at sheep.berlios.de  Sat Jun 18 00:48:44 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 18 Jun 2005 00:48:44 +0200
Subject: [openrecord-svn] r162 - trunk/source/model
Message-ID: <200506172248.j5HMmiD1009471@sheep.berlios.de>

Author: skinner
Date: 2005-06-18 00:48:41 +0200 (Sat, 18 Jun 2005)
New Revision: 162

Added:
   trunk/source/model/2005_june_axiomatic_items.json
Log:
oops, forgot one file...

Added: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-17 22:31:55 UTC (rev 161)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-17 22:48:41 UTC (rev 162)
@@ -0,0 +1,959 @@
+// Axiomatic items and entries, in JSON format
+{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", 
+  "records": [
+  // =======================================================================
+  { "Transaction": [  // Axiomatic items
+    { "Item": {                                               // Amy ex machina
+             "uuid": "00001000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Name
+             "uuid": "00001001-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Short Name
+             "uuid": "00001002-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Summary
+             "uuid": "00001003-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Body
+             "uuid": "00001004-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category
+             "uuid": "00001005-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Query
+             "uuid": "00001006-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Matching Value
+             "uuid": "00001007-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Matching Attribute
+             "uuid": "00001008-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Unfiled Entry
+             "uuid": "00001009-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Expected Type
+             "uuid": "0000100a-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Attribute
+             "uuid": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category
+             "uuid": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Query
+             "uuid": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Type
+             "uuid": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Text
+             "uuid": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Number
+             "uuid": "00001021-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Date
+             "uuid": "00001022-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Check Mark
+             "uuid": "00001023-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // URL
+             "uuid": "00001024-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Item
+             "uuid": "00001030-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Anything
+             "uuid": "00001040-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Connection
+             "uuid": "00001050-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Amy ex machina
+             "uuid": "0001000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // Amy ex machina
+             "type": "TextValue",
+            "value": "Amy ex machina" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Name
+             "uuid": "0001001a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "type": "TextValue",
+            "value": "Name" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001001b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001001c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Short Name
+             "uuid": "0001002a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "type": "TextValue",
+            "value": "Short Name" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001002b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001002c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Summary
+             "uuid": "0001003a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "type": "TextValue",
+            "value": "Summary" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001003b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001003c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Body
+             "uuid": "0001004a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "type": "TextValue",
+            "value": "Body" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001004b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001004c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "type": "RelatedUuid",
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001005a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "TextValue",
+            "value": "Category" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001005b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001005c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Query
+             "uuid": "0001006a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "TextValue",
+            "value": "Query" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001006b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Query
+             "uuid": "0001006c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "RelatedUuid",
+            "value": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Matching Value
+             "uuid": "0001007a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
+             "type": "TextValue",
+            "value": "Matching Value" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001007b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Matching Attribute
+             "uuid": "0001008a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "type": "TextValue",
+            "value": "Matching Attribute" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001008b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001008c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Unfiled Entry
+             "uuid": "0001009a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "type": "TextValue",
+            "value": "Unfiled Entry" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001009b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Anything
+             "uuid": "0001009c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "type": "RelatedUuid",
+            "value": "00001040-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Expected Type
+             "uuid": "000100aa-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "TextValue",
+            "value": "Expected Type" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "000100ab-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "000100ac-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "000100ad-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0001010a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
+             "type": "TextValue",
+            "value": "Attribute" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001010b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001011a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "TextValue",
+            "value": "Category" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001011b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Query
+             "uuid": "0001012a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "TextValue",
+            "value": "Query" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001012b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001013a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
+             "type": "TextValue",
+            "value": "Type" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0001013b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "0001020a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
+             "type": "TextValue",
+            "value": "Text" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001020b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Number
+             "uuid": "0001021a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
+             "type": "TextValue",
+            "value": "Number" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001021b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Date
+             "uuid": "0001022a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
+             "type": "TextValue",
+            "value": "Date" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001022b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Check Mark
+             "uuid": "0001023a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
+             "type": "TextValue",
+            "value": "Check Mark" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001023b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // URL
+             "uuid": "0001024a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
+             "type": "TextValue",
+            "value": "URL" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001024b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Item
+             "uuid": "0001030a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
+             "type": "TextValue",
+            "value": "Item" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001030b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Anything
+             "uuid": "0001040a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
+             "type": "TextValue",
+            "value": "Anything" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001040b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Connection
+             "uuid": "0001050a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001050-ce7f-11d9-8cd5-0011113ae5d6",  // Connection
+             "type": "TextValue",
+            "value": "Connection" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Type
+             "uuid": "0001050b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001050-ce7f-11d9-8cd5-0011113ae5d6",  // Connection
+             "type": "RelatedUuid",
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+    } ]
+  },
+  // =======================================================================
+  { "Transaction": [  // Fundamental view-level items
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Page
+             "uuid": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Section
+             "uuid": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Section
+             "uuid": "00030000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Plugin Name (Attribute)
+             "uuid": "00040000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Plugin View (Attribute)
+             "uuid": "00040101-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Layout Data (Attribute)
+             "uuid": "00040102-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Applies to Plugin (Attribute)
+             "uuid": "00040103-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Table Columns (Attribute)
+             "uuid": "00040104-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Plugin View (Category)
+             "uuid": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Layout Data (Category)
+             "uuid": "00040202-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Table (Plugin View)
+             "uuid": "00040301-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Outline (Plugin View)
+             "uuid": "00040302-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Detail (Plugin View)
+             "uuid": "00040303-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Bar Chart (Plugin View)
+             "uuid": "00040304-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Page
+             "uuid": "0020000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
+             "type": "TextValue",
+            "value": "Page" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0020000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Section
+             "uuid": "0020100a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "TextValue",
+            "value": "Section" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0020100b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Section
+             "uuid": "0030000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "TextValue",
+            "value": "Section" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0030000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin Name
+             "uuid": "0040000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
+             "type": "TextValue",
+            "value": "Plugin Name" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View
+             "uuid": "0040101a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
+             "type": "TextValue",
+            "value": "Plugin View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040101b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040101c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Layout Data
+             "uuid": "0040102a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
+             "type": "TextValue",
+            "value": "Layout Data" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040102b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Layout Data (Category)
+             "uuid": "0040102c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
+             "type": "RelatedUuid",
+            "value": "00040202-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Applies To Plugin
+             "uuid": "0040103a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
+             "type": "TextValue",
+            "value": "Applies To Plugin" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040103b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040103c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Table Columns 
+             "uuid": "0040104a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "TextValue",
+            "value": "Table Columns" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040104b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040104c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View
+             "uuid": "0040201a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
+             "type": "TextValue",
+            "value": "Plugin View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0040201b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Layout Data
+             "uuid": "0040202a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
+             "type": "TextValue",
+            "value": "Layout Data" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Category
+             "uuid": "0040202b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
+             "type": "RelatedUuid",
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Table View
+             "uuid": "0040301a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
+             "type": "TextValue",
+            "value": "Table View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040301b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Table
+             "uuid": "0040301c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
+             "type": "TextValue",
+            "value": "Table" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Outline View
+             "uuid": "0040302a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
+             "type": "TextValue",
+            "value": "Outline View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040302b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Outline
+             "uuid": "0040302c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
+             "type": "TextValue",
+            "value": "Outline" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Detail View
+             "uuid": "0040303a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
+             "type": "TextValue",
+            "value": "Detail View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040303b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Outline
+             "uuid": "0040303c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
+             "type": "TextValue",
+            "value": "Detail" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Bar Chart View
+             "uuid": "0040304a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
+             "type": "TextValue",
+            "value": "Bar Chart View" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Plugin View (Category)
+             "uuid": "0040304b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
+             "type": "RelatedUuid",
+            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Bar Chart
+             "uuid": "0040304c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
+             "type": "TextValue",
+            "value": "Bar Chart" }
+    } ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Brian Douglas Skinner
+             "uuid": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Brian Douglas Skinner
+             "uuid": "2c4fa781-dde4-11d9-9c71-8022ab6bc8ae",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae",  // Brian Douglas Skinner
+             "type": "TextValue",
+            "value": "Brian Douglas Skinner" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Chih-Chao Lam
+             "uuid": "90e02170-dde4-11d9-9c71-e24829d2f59b" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Chih-Chao Lam
+             "uuid": "90e02171-dde4-11d9-9c71-e24829d2f59b",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "90e02170-dde4-11d9-9c71-e24829d2f59b",  // Chih-Chao Lam
+             "type": "TextValue",
+            "value": "Chih-Chao Lam" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Mignon Belongie
+             "uuid": "97d040f0-dde4-11d9-9c71-c103016080e1" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Mignon Belongie
+             "uuid": "97d040f1-dde4-11d9-9c71-c103016080e1",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "97d040f0-dde4-11d9-9c71-c103016080e1",  // Mignon Belongie
+             "type": "TextValue",
+            "value": "Mignon Belongie" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Mimi Yin
+             "uuid": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Mimi Yin
+             "uuid": "9c3596e1-dde4-11d9-9c71-b6ac85cc6d5f",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f",  // Mimi Yin
+             "type": "TextValue",
+            "value": "Mimi Yin" }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Marty Betz
+             "uuid": "a00bf340-dde4-11d9-9c71-dae11c269bc7" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Marty Betz
+             "uuid": "a00bf341-dde4-11d9-9c71-dae11c269bc7",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "a00bf340-dde4-11d9-9c71-dae11c269bc7",  // Marty Betz
+             "type": "TextValue",
+            "value": "Marty Betz" }
+    }  ]
+  }



From skinner at sheep.berlios.de  Sat Jun 18 02:37:31 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 18 Jun 2005 02:37:31 +0200
Subject: [openrecord-svn] r163 - trunk/source/model
Message-ID: <200506180037.j5I0bVWb013723@sheep.berlios.de>

Author: skinner
Date: 2005-06-18 02:37:26 +0200 (Sat, 18 Jun 2005)
New Revision: 163

Modified:
   trunk/source/model/ContentRecord.js
Log:
Minor tweak to try to get ordinal numbers to at least partially work.

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-06-17 22:48:41 UTC (rev 162)
+++ trunk/source/model/ContentRecord.js	2005-06-18 00:37:26 UTC (rev 163)
@@ -110,7 +110,7 @@
  */
 ContentRecord.prototype.getOrdinalNumberAtCreation = function() {
   // return (0 - this._creationTimestamp.valueOf());
-  return (0 - this._uuid);
+  return (0 - this.getTimestamp());
 };
 
 



From chaolam at sheep.berlios.de  Sun Jun 19 20:21:25 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Sun, 19 Jun 2005 20:21:25 +0200
Subject: [openrecord-svn] r164 - in trunk: documentation source source/model
Message-ID: <200506191821.j5JILPN1010952@sheep.berlios.de>

Author: chaolam
Date: 2005-06-19 20:21:24 +0200 (Sun, 19 Jun 2005)
New Revision: 164

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/OutlinePlugin.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/model/Entry.js
   trunk/source/model/World.js
Log:
0) Allow plugins to store layout data
1) First version of storing layout data for TablePlugin. Table plugin persists column order

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/documentation/release_planning.txt	2005-06-19 18:21:24 UTC (rev 164)
@@ -224,8 +224,8 @@
        |          |         | 62. Ensure that PHP scripts and file I/O works for concurrent multi-user access
 -------+----------+---------+----------------------------------------------
 chao   | 0.5 IED  | 0.5 IED | Improved UI for autocomplete
-c/b    | 0.5 IED  |         | Allow plugins to store layout data
-chao   | 0.5 IED  |         | Table plugin persists column order
+c/b    | 0.5 IED  | 0.5 IED | Allow plugins to store layout data
+chao   | 0.5 IED  | 0.5 IED | Table plugin persists column order
        
 =======================================================
 Categories and Attributes we might use for release 0.1
@@ -453,4 +453,4 @@
 + Should we work on making OpenRecord work within MediaWiki?
 + BUG: need to convert HTML entity codes back at client-server layer
 + Task: Rename ORlugin to PluginView
-
++ BUG: Can't really create own plugins yet (e.g. UUID need to be assigned, plugin item created)

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/source/BarChartPlugin.js	2005-06-19 18:21:24 UTC (rev 164)
@@ -42,8 +42,8 @@
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
 SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_BAR_CHART] = BarChartPlugin;
+BarChartPlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_BAR_CHART;
 
-
 /**
  * A BarChartPlugin displays a set of content items for a SectionView. 
  *

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/source/DetailPlugin.js	2005-06-19 18:21:24 UTC (rev 164)
@@ -41,6 +41,7 @@
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
 SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_DETAIL] = DetailPlugin;
+DetailPlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_DETAIL;
 
 
 /**

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/source/OutlinePlugin.js	2005-06-19 18:21:24 UTC (rev 164)
@@ -40,6 +40,7 @@
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
 SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_OUTLINE] = OutlinePlugin;
+OutlinePlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_OUTLINE;
 
 
 /**

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/source/SectionView.js	2005-06-19 18:21:24 UTC (rev 164)
@@ -75,7 +75,6 @@
 SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW       = "00040101-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_ATTRIBUTE_LAYOUT_DATA       = "00040102-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_ATTRIBUTE_APPLIES_TO_PLUGIN = "00040103-ce7f-11d9-8cd5-0011113ae5d6";
-SectionView.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS     = "00040104-ce7f-11d9-8cd5-0011113ae5d6";
 
 SectionView.UUID_FOR_CATEGORY_PLUGIN_VIEW        = "00040201-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_CATEGORY_LAYOUT_DATA        = "00040202-ce7f-11d9-8cd5-0011113ae5d6";
@@ -167,7 +166,8 @@
   var newPlugin = null;
   var pluginClass = SectionView.ourHashTableOfPluginClassesKeyedByPluginName[inPluginName];
   if (pluginClass) {
-    var layoutData = this._getLayoutDataForPlugin(inPluginName);
+    var pluginType = this.getWorld().getItemFromUuid(pluginClass.UUID);
+    var layoutData = this._getLayoutDataForPlugin(pluginType);
     newPlugin = new pluginClass(this, inPluginDiv, this.getQuery(), layoutData);
   }
   return newPlugin;
@@ -271,10 +271,10 @@
  * Returns layout data of this section for a particular plugin
  * Creates a the layout data item if doesn't exist
  *
- * @param inPluginName name of plugin
+ * @param inPluginType name of plugin
  * @return layout data of this section for a particular plugin
  */
-SectionView.prototype._getLayoutDataForPlugin = function (inPluginName) {
+SectionView.prototype._getLayoutDataForPlugin = function (inPluginType) {
   var repository = this.getWorld();
   var attrLayoutData = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_LAYOUT_DATA);
   var entriesLayoutData = this.mySection.getEntriesForAttribute(attrLayoutData);
@@ -284,15 +284,15 @@
       var layoutItem = entriesLayoutData[i].getValue();
       var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attrAppliesToPlugin);
       Util.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
-      if (entriesAppliesToPlugin[0].getValue() == inPluginName) {
+      if (entriesAppliesToPlugin[0].getValue() == inPluginType) {
         return layoutItem;
       }
     }
   }
   // layoutData not found, so create the item
   repository.beginTransaction();
-  layoutItem = repository.newItem("Layout data for " + inPluginName + " of " + this.mySection.getDisplayName());
-  layoutItem.addEntryForAttribute(attrAppliesToPlugin, inPluginName);
+  layoutItem = repository.newItem("Layout data for " + inPluginType.getDisplayName() + " of " + this.mySection.getDisplayName());
+  layoutItem.addEntryForAttribute(attrAppliesToPlugin, inPluginType);
   this.mySection.addEntryForAttribute(attrLayoutData,layoutItem,repository.getTypeCalledItem());
   repository.endTransaction();
   return layoutItem;
@@ -376,6 +376,7 @@
  * @scope public instance method
  */
 SectionView.prototype.observedItemHasChanged = function(item) {
+  item.removeObserver(this); //item no longer needs to be observed as query editor span is rebuilt
   var myQuery = this.getQuery();
   Util.assert(item == myQuery);
   var pluginName = this._myPlugin.getPluginName();

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/source/TablePlugin.js	2005-06-19 18:21:24 UTC (rev 164)
@@ -44,11 +44,13 @@
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
 SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_TABLE] = TablePlugin;
+TablePlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_TABLE;
 
 
 // -------------------------------------------------------------------
 // TablePlugin public class constants
 // -------------------------------------------------------------------
+TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS     = "00040104-ce7f-11d9-8cd5-0011113ae5d6";
 TablePlugin.ASCENDING_GIF = "ascending.gif";
 TablePlugin.DESCENDING_GIF = "descending.gif";
 
@@ -105,12 +107,42 @@
 };
 
 /**
- * Creates a hashtable containing all the attributes of the content items 
- * in this table.  Finds the union of the attribute lists of all the content items.
+ * Creates an array containing all the attributes of the content items 
+ * in this table.  Populates list of suggested items for relevant attributes
  *
  * @scope    private instance method
  */
-TablePlugin.prototype._buildAttributeHash = function() {
+TablePlugin.prototype._buildAttributes = function() {
+  var repository = this.getWorld();
+  var attrTableColumns = repository.getItemFromUuid(TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS);
+  var entriesTableColumns = this._layout.getEntriesForAttribute(attrTableColumns);
+  var displayAttrs = [];
+  var anAttribute;
+  var useLayoutData = (entriesTableColumns) && (entriesTableColumns.length > 1 ||
+    (entriesTableColumns.length ==1 && entriesTableColumns[0].getValue() != repository.getAttributeCalledName()));
+  if (useLayoutData) {
+    this._hashTableOfEntries = {};
+    for (var i=0;i<entriesTableColumns.length;++i) {
+      anAttribute = entriesTableColumns[i].getValue();
+      Util.assert(anAttribute instanceof Item);
+      displayAttrs.push(anAttribute);
+      this._hashTableOfEntries[anAttribute.getUniqueKeyString()] =
+        this.getWorld().getSuggestedItemsForAttribute(anAttribute);
+    }
+  }
+  else {
+    if (entriesTableColumns.length == 1) {entriesTableColumns[0].voteToDelete();}
+    var hashTableOfAttributes = this._buildAttributeHashFromScratch();
+    for (var key in hashTableOfAttributes) {
+      anAttribute = hashTableOfAttributes[key];
+      displayAttrs.push(anAttribute);
+      this._layout.addEntryForAttribute(attrTableColumns,anAttribute,repository.getTypeCalledItem());
+    }
+  }
+  this._displayAttributes = displayAttrs;
+};
+
+TablePlugin.prototype._buildAttributeHashFromScratch = function() {
   var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var hashTableOfAttributes = {};
@@ -149,12 +181,12 @@
     }
   }
   this._hashTableOfEntries = hashTableOfEntries;
-  this._hashTableOfAttributes = hashTableOfAttributes;
-  if (Util.lengthOfHashTable(this._hashTableOfAttributes) < 1) {
+  if (Util.lengthOfHashTable(hashTableOfAttributes) < 1) {
     var attributeCalledName = this.getWorld().getAttributeCalledName();
     var key = attributeCalledName.getUniqueKeyString();
-    this._hashTableOfAttributes[key] = attributeCalledName;
+    hashTableOfAttributes[key] = attributeCalledName;
   }
+  return hashTableOfAttributes;
 };
 
 
@@ -167,19 +199,21 @@
   var htmlElt = this.getHTMLElement();
   View.createAndAppendElement(htmlElt,"br");
   var selectElt = View.createAndAppendElement(htmlElt,"select");
-  var categoryCalledAttribute = this.getWorld().getCategoryCalledAttribute();
-  var listOfAttributes = this.getWorld().getItemsInCategory(categoryCalledAttribute);
+  var listOfAttributes = this.getWorld().getAttributes();
   var optionElt = View.createAndAppendElement(selectElt,"option");
   optionElt.text = "Add new attribute:";
   for (var i = 0; i < listOfAttributes.length; ++i) {
     optionElt = View.createAndAppendElement(selectElt,"option");
-    var attributeUuid = listOfAttributes[i].getUniqueKeyString();
-    if (this._hashTableOfAttributes[attributeUuid]) {optionElt.text = '*';}
+    if (Util.isObjectInSet(listOfAttributes[i],this._displayAttributes)) {optionElt.text = '*';}
     optionElt.text += listOfAttributes[i].getDisplayName();
-    optionElt.value = attributeUuid;
+    optionElt.value = listOfAttributes[i].getUniqueKeyString();
     optionElt.onclick = this._attributeEditorChanged.bindAsEventListener(this);
   }
   this._selectElement = selectElt;
+  /*View.createAndAppendTextNode(htmlElt, " Import Data:");
+  var importButton = View.createAndAppendElement(htmlElt,"input");
+  importButton.type = "file";
+  importButton.onchange = this._importData.bindAsEventListener(this, importButton);*/
 };
 
 /**
@@ -190,8 +224,8 @@
 TablePlugin.prototype._insertRow = function(contentItem, rowNum) {
   var aRow = this.myTable.insertRow(rowNum); 
   var columnCount = -1;
-  for (var lKey in this._hashTableOfAttributes) {
-    var attribute = this._hashTableOfAttributes[lKey];
+  for (var i=0;i<this._displayAttributes.length;++i) {
+    var attribute = this._displayAttributes[i];
     this._insertCell(aRow, ++columnCount, contentItem, attribute);
   }
   return aRow;
@@ -250,8 +284,8 @@
   // add header row
   var headerRow = this.myTable.insertRow(0);
   var numCols = 0;
-  for (var jKey in this._hashTableOfAttributes) {
-    var attribute = this._hashTableOfAttributes[jKey];
+  for (var i=0;i<this._displayAttributes.length;++i) {
+    var attribute = this._displayAttributes[i];
     if (!this._sortAttribute) {this._sortAttribute = attribute;}
     var aCell = document.createElement("th");
     var headerStr = attribute.getDisplayName();
@@ -278,7 +312,7 @@
   // get list of items and attributes
   if (!inDontRebuildHash) {
     this.fetchItems();
-    this._buildAttributeHash();
+    this._buildAttributes();
   }
   
   //create new table, remove old table if already exists
@@ -376,12 +410,50 @@
   if (rowElement != this._lastSelectedRow) {
     if (this._lastSelectedRow) {this._lastSelectedRow.style.background = "";}
     this._lastSelectedRow = rowElement;
-    rowElement.style.background = "rgb(0%,70%,100%)"; // PENDING: need to css-ify this selection
+    rowElement.style.background = "rgb(100%,100%,0%)"; // PENDING: need to css-ify this selection
     return true;
   }
   return false;
 };
  
+TablePlugin.prototype._importData = function (inEventObject, fileButton) {
+  // Returns null if it can't do it, false if there's an error, or a string of the content if successful
+/*  function mozillaLoadFile(filePath)
+  {
+      if(window.Components)
+          try 
+              {
+              netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+              var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
+              file.initWithPath(filePath);
+              if (!file.exists())
+                  return(null);
+              var inputStream = Components.classes["@mozilla.org/network/file-input-stream;1"].createInstance(Components.interfaces.nsIFileInputStream);
+              inputStream.init(file, 0x01, 00004, null);
+              var sInputStream = Components.classes["@mozilla.org/scriptableinputstream;1"].createInstance(Components.interfaces.nsIScriptableInputStream);
+              sInputStream.init(inputStream);
+              return(sInputStream.read(sInputStream.available()));
+              }
+          catch(e)
+              {
+              alert("Exception while attempting to load\n\n" + e);
+              return(false);
+              }
+      return(null);
+  }
+  
+  function readFile (fileName) {
+      netscape.security.PrivilegeManager.enablePrivilege('UniversalFileRead');
+      var bfr = new java.io.BufferedReader(new java.io.FileReader(fileName));
+      var line;
+      var content = '';
+      while ((line = bfr.readLine()) != null)
+        content += line + java.lang.System.getProperty('line.separator');
+      return content;
+    }*/
+  open('file://'+fileButton.value,'preview');   
+};
+
 /**
  * Called when the user clicks on attribute editor item, either to add or remove attribute column
  * 
@@ -390,16 +462,26 @@
 TablePlugin.prototype._attributeEditorChanged = function (inEventObject) {
   var attributeUuid = inEventObject.target.value;
   if (attributeUuid) {
-    if (this._hashTableOfAttributes[attributeUuid]) {
-      delete this._hashTableOfAttributes[attributeUuid];
-      this._hashTableOfEntries[attributeUuid] = [];
+    var repository = this.getWorld();
+    var attrTableColumns = repository.getItemFromUuid(TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS);
+    var entriesTableColumns = this._layout.getEntriesForAttribute(attrTableColumns);
+    var changedAttribute = this.getWorld().getItemFromUuid(attributeUuid);
+    if (Util.removeObjectFromSet(changedAttribute,this._displayAttributes)) {
+      for (var i=0;i < entriesTableColumns.length;++i) {
+        if (changedAttribute == entriesTableColumns[i].getValue()) {
+          entriesTableColumns[i].voteToDelete();
+          break;
+        }
+      }
+      Util.assert(i < entriesTableColumns.length);
+      delete this._hashTableOfEntries[attributeUuid];
     }
     else {
       var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
-      var attribute = this.getWorld().getItemFromUuid(attributeUuid);
-      this._hashTableOfAttributes[attributeUuid] = attribute;
+      this._displayAttributes.push(changedAttribute);
+      this._layout.addEntryForAttribute(attrTableColumns,changedAttribute,repository.getTypeCalledItem());
       if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
-        this._hashTableOfEntries[attributeUuid] = this.getWorld().getSuggestedItemsForAttribute(attribute);
+        this._hashTableOfEntries[attributeUuid] = this.getWorld().getSuggestedItemsForAttribute(changedAttribute);
       }
     }
     this._buildTable(true);

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/source/model/Entry.js	2005-06-19 18:21:24 UTC (rev 164)
@@ -110,7 +110,7 @@
     else if (value instanceof Item) {
       this._myType = this.getWorld().getTypeCalledItem();
     }
-    else {Util.assert(false, "unknown data type");}
+    else {Util.assert(false, "unknown data type:" + (typeof value) + ' value: ' + value);}
   }
   if (Util.isString(value)) {
     this.__myValue = Util.getCleanString(value);

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-18 00:37:26 UTC (rev 163)
+++ trunk/source/model/World.js	2005-06-19 18:21:24 UTC (rev 164)
@@ -851,10 +851,7 @@
       Util.addObjectToSet(item, listOfSuggestedItems);
     }
   }
-
-  if (listOfSuggestedItems.length === 0) {
-    listOfSuggestedItems = null;
-  }
+  // For no suggested items, TablePlugin expects an empty array rather than null 
   return listOfSuggestedItems;
 };
 



From chaolam at sheep.berlios.de  Tue Jun 21 04:33:23 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Tue, 21 Jun 2005 04:33:23 +0200
Subject: [openrecord-svn] r165 - in trunk/source: . model
Message-ID: <200506210233.j5L2XNmk019812@sheep.berlios.de>

Author: chaolam
Date: 2005-06-21 04:33:13 +0200 (Tue, 21 Jun 2005)
New Revision: 165

Modified:
   trunk/source/RootView.js
   trunk/source/TextView.js
   trunk/source/base_style.css
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
Added support for bi-directional items in the UI
Attribute has a new attribute: "Inverse Attribute" to specify it's bi-directional pair.

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/RootView.js	2005-06-21 02:33:13 UTC (rev 165)
@@ -468,10 +468,13 @@
   if (this.myNumberOfCallsToDebug > 20) {
     return;
   }
-  this.myDebugTextarea.value += inText + "\n\n============================\n\n";
-  this.myDebugTextarea.style.visibility = "visible";
-  this.myDebugTextarea.style.display = "block";
-  this.myDebugTextarea.scrollIntoView();
+  if (this.myDebugTextarea) {
+    this.myDebugTextarea.value += inText + "\n\n============================\n\n";
+    this.myDebugTextarea.style.visibility = "visible";
+    this.myDebugTextarea.style.display = "block";
+    this.myDebugTextarea.scrollIntoView();
+  }
+  else {alert(inText);}
 };
 
 

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/TextView.js	2005-06-21 02:33:13 UTC (rev 165)
@@ -332,17 +332,24 @@
  * @param    value    The new value to be saved. 
  */
 TextView.prototype._writeValue = function(value) {
-  value = this._transformToExpectedType(value);
-  if (this._entry) {
-    var oldValue = this._entry.getValue();
+  if (value === 0 || value) {
+    value = this._transformToExpectedType(value);
+
+    var oldValue = null;
+    if (this._entry) {oldValue = this._entry.getValue();}
     if (oldValue != value) {
-      this._entry = this._item.replaceEntry(this._entry, value);
-      this._restoreText(true); // call restore text in case item is transformed (e.g. Dates will be normalized)
-    }
-  } else if (value) {
-    this._entry = this._item.addEntryForAttribute(this._attribute, value);
-    this._restoreText(true); // call restore text in case item is transformed (e.g. Dates will be normalized
+      var attributeCalledInverseAttribute = this.getWorld().getAttributeCalledInverseAttribute();
+      var listOfInverseAttributeEntries = this._attribute.getEntriesForAttribute(attributeCalledInverseAttribute);
+      if (listOfInverseAttributeEntries.length > 0) {
+        var inverseAttr = listOfInverseAttributeEntries[0].getValue();
+        this._entry = this._item.replaceEntryWithConnection(this._entry, this._attribute, value, inverseAttr);
+      }
+      else {
+        this._entry = this._item.replaceEntryWithEntryForAttribute(this._entry, this._attribute, value);
+      }
+    }    
   }
+  this._restoreText(true); // call restore text in case item is transformed (e.g. Dates will be normalized)
 };
 
 
@@ -353,7 +360,7 @@
  */
 TextView.prototype._getText = function() {
   if (this._isProvisional) {return this._provisionalText;}
-  if (this._entry) {return this._entry.getDisplayString();}
+  if (this._entry) {return this._item.getDisplayStringForEntry(this._entry);}
   return '';
 };
 
@@ -364,7 +371,7 @@
  * @scope    private instance method
  */
 TextView.prototype._restoreText = function(dontSelect) {
-  var oldText = (this._entry) ?  this._entry.getDisplayString() : '';
+  var oldText = (this._entry) ?  this._getText() : '';
   if (this._isEditing) {
     this._editField.value = oldText;
   }
@@ -621,6 +628,7 @@
       }
       break;
       case Util.ASCII_VALUE_FOR_TAB:
+      if (this._myInputField.value.length === 0) {return false;}
       if (!this._selectedItem) {
         this._selectedItem = this._listOfMatchingItems[0];
         doSelectItem = true;
@@ -731,7 +739,8 @@
       var textNode = document.createTextNode(item.getDisplayName());
       var row = table.insertRow(rowNumber);
       var cell = row.insertCell(columnNumber);
-      cell.style.background = (this._selectedItem == item) ? "rgb(0%,70%,100%)":""; //pending need to CSS-ify this
+      cell.className = (this._selectedItem == item) ? "suggestion_box_selected":"";
+      //cell.style.background = (this._selectedItem == item) ? "rgb(0%,70%,100%)":""; //pending need to CSS-ify this
       cell.appendChild(textNode);
       cell.onmousedown = this._clickOnSelection.bindAsEventListener(this, item);
       rowNumber += 1;

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/base_style.css	2005-06-21 02:33:13 UTC (rev 165)
@@ -568,6 +568,10 @@
   width: 100%;
 }
 
+.suggestion_box_selected td {
+  background: rgb(100%,100%,0%);
+}
+
 .suggestion_box td {
   margin: 0px;
   border: 0px;

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-21 02:33:13 UTC (rev 165)
@@ -47,6 +47,10 @@
              "uuid": "0000100a-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Item": {                                               // Inverse Attribute
+             "uuid": "0000100b-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Item": {                                               // Attribute
              "uuid": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -343,7 +347,31 @@
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // Inverse Attribute
+             "uuid": "000100ba-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
+             "type": "TextValue",
+            "value": "Inverse Attribute" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Attribute
+             "uuid": "000100bb-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "000100bc-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
+             "type": "RelatedUuid",
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
              "uuid": "0001010a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/model/Entry.js	2005-06-21 02:33:13 UTC (rev 165)
@@ -131,12 +131,20 @@
  * need to call entry.rehydrate();
  *
  * @scope    protected instance method
+ * @param    previousEntry    The entry that this entry will replace. Can be null.
  * @param    itemOne    One of the two items that this entry will connect. 
  * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
  * @param    itemTwo    One of the two items that this entry will connect. 
  * @param    attributeTwo    Optional. The attribute of itemTwo that this entry will be assigned to.  
  */
-Entry.prototype._initializeConnection = function (itemOne, attributeOne, itemTwo, attributeTwo) {
+Entry.prototype._initializeConnection = function (previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
+  if (previousEntry) {
+    this.__myPreviousEntry = previousEntry;
+    this.__myPreviousEntry.__addSubsequentEntry(this);
+  } else {
+    this.__myPreviousEntry = null;
+  }
+
   this.__myItem = [itemOne, itemTwo];
   this.__myAttribute = [attributeOne, attributeTwo];
   this._myType = this.getWorld().getTypeCalledConnection();
@@ -278,7 +286,7 @@
  * @scope    public instance method
  * @return   A string representing the literal data in this entry.
  */
-Entry.prototype.getDisplayString = function () {
+Entry.prototype.getDisplayString = function (myItem) {
   var returnString = "";
   switch (this._myType) {
     case this.getWorld().getTypeCalledNumber():
@@ -297,7 +305,14 @@
     case this.getWorld().getTypeCalledConnection():
       var firstItem = this.__myItem[0];
       var secondItem = this.__myItem[1];
-      returnString = "connection between [" + firstItem.getDisplayName() + "] and [" + secondItem.getDisplayName() + "]";
+      if (myItem) {
+        if (myItem == firstItem) {returnString = secondItem.getDisplayName();}
+        else if (myItem == secondItem) {returnString = firstItem.getDisplayName();}
+        else {Util.assert(false, "myItem isn't part of this Entry");}
+      }
+      else {
+        returnString = "connection between [" + firstItem.getDisplayName() + "] and [" + secondItem.getDisplayName() + "]";
+      }
       break;
   }
   return returnString;

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/model/Item.js	2005-06-21 02:33:13 UTC (rev 165)
@@ -220,8 +220,36 @@
  * @throws   Throws an Error if no user is logged in.
  */
 Item.prototype.addConnectionEntry = function (myAttribute, otherItem, otherAttribute) {
+  return this.replaceEntryWithConnection(null, myAttribute, otherItem, otherAttribute);
+};
+
+
+/**
+ *
+ */
+Item.prototype.replaceEntryWithConnection = function (previousEntry, myAttribute, otherItem, otherAttribute) {
   Util.assert(otherItem instanceof Item);
-  
+  Util.assert(myAttribute instanceof Item);
+
+  // If we've just been asked to replace the string "Foo" with the string "Foo",
+  // then don't even bother creating a new entry. 
+  if (previousEntry) {
+    var oldValue = previousEntry.getValue();
+    var oldPairOfAttributes = previousEntry.getAttribute();
+    var oldPairOfItems = previousEntry.getItem();
+    if (Util.isArray(oldPairOfAttributes)) {
+      Util.assert(Util.isArray(oldPairOfAttributes));
+      Util.assert(oldPairOfAttributes.length == 2);
+      Util.assert(oldPairOfItems.length == 2);
+      if (((oldPairOfAttributes[0] == myAttribute) &&  (oldPairOfAttributes[1] == otherAttribute) &&
+        oldPairOfItems[0] == this && oldPairOfItems[1] == otherItem) ||
+        ((oldPairOfAttributes[1] == myAttribute) &&  (oldPairOfAttributes[0] == otherAttribute) &&
+        oldPairOfItems[1] == this && oldPairOfItems[0] == otherItem)) {
+        return null;
+      }
+    }
+  }
+
   this.getWorld().beginTransaction();
   if (this.__myProvisionalFlag) {
     this.__myProvisionalFlag = false;
@@ -235,12 +263,11 @@
     otherAttribute = this.getWorld().getAttributeCalledUnfiled();
   }
 
-  var entry = this.getWorld()._newConnectionEntry(this, myAttribute, otherItem, otherAttribute);
+  var entry = this.getWorld()._newConnectionEntry(previousEntry, this, myAttribute, otherItem, otherAttribute);
   this.getWorld().endTransaction();
-  return entry;
+  return entry;  
 };
 
-
 // -------------------------------------------------------------------
 // Accessor methods where the answer depends on the retrieval filter
 // -------------------------------------------------------------------
@@ -291,7 +318,6 @@
       Util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
-      Util.assert(false);
       filteredListOfEntries = listOfEntriesForAttribute;
       break;
     default:
@@ -425,6 +451,10 @@
   return "";
 };
 
+Item.prototype.getDisplayStringForEntry = function (myEntry) {
+  Util.assert(myEntry instanceof Entry);
+  return myEntry.getDisplayString(this);
+};
 /**
  * Returns a string describing the item.
  *

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/model/StubVirtualServer.js	2005-06-21 02:33:13 UTC (rev 165)
@@ -58,6 +58,7 @@
 
 StubVirtualServer.JSON_MEMBER_TYPE = "type";
 StubVirtualServer.JSON_MEMBER_VALUE = "value";
+
 StubVirtualServer.JSON_TYPE_TEXT_VALUE = "TextValue";
 StubVirtualServer.JSON_TYPE_UUID = "Uuid";
 StubVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
@@ -303,6 +304,7 @@
  * Returns a newly created entry.
  *
  * @scope    public instance method
+ * @param    previousEntry    The entry that this entry will replace. Can be null.
  * @param    itemOne    One of the two items that this entry will connect. 
  * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
  * @param    itemTwo    One of the two items that this entry will connect. 
@@ -310,11 +312,11 @@
  * @return   A newly created entry.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newConnectionEntry = function(itemOne, attributeOne, itemTwo, attributeTwo) {
+StubVirtualServer.prototype.newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
   var entry = new Entry(this.__myWorld, uuid);
-  entry._initializeConnection(itemOne, attributeOne, itemTwo, attributeTwo);
+  entry._initializeConnection(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
 
   itemOne.__addEntryToListOfEntriesForAttribute(entry, attributeOne);
   itemTwo.__addEntryToListOfEntriesForAttribute(entry, attributeTwo);
@@ -536,7 +538,7 @@
  * @return   The item identified by the given UUID.
  */
 StubVirtualServer.prototype.getItemFromUuid = function (inUuid, inObserver) {
-  Util.assert(Util.isUuid(inUuid));
+  Util.assert(Util.isUuid(inUuid), inUuid + ' is not a Uuid');
   
   var item = this.__myHashTableOfItemsKeyedByUuid[inUuid];
   if (item && inObserver) {
@@ -974,6 +976,7 @@
   var checkMark = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CHECK_MARK);
   var url       = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_URL);
   var itemType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_ITEM);
+  var connectionType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CONNECTION);
   
   this._myHashTableOfTypesKeyedByToken = {};
   this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_TEXT_VALUE] = text;
@@ -982,6 +985,7 @@
   this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
   this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_URL_VALUE] = url;
   this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_RELATED_UUID] = itemType;
+  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CONNECTION] = connectionType;
 };
 
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-19 18:21:24 UTC (rev 164)
+++ trunk/source/model/World.js	2005-06-21 02:33:13 UTC (rev 165)
@@ -59,8 +59,9 @@
 World.UUID_FOR_ATTRIBUTE_QUERY         = "00001006-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE = "00001007-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE = "00001008-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_UNFILED       = "00001009-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE = "0000100a-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_UNFILED           = "00001009-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE     = "0000100a-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE = "0000100b-ce7f-11d9-8cd5-0011113ae5d6";
 
 World.UUID_FOR_CATEGORY_BOOK           = "0000100e-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
 World.UUID_FOR_CATEGORY_MOVIE          = "0000100f-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
@@ -121,6 +122,7 @@
   this._attributeCalledQueryMatchingAttribute     = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE);
   this._attributeCalledUnfiled               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
   this._attributeCalledExpectedType          = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
+  this._attributeCalledInverseAttribute         = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE);
 
   // load the axiomatic categories
   this._categoryCalledAttribute   = server.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
@@ -399,7 +401,11 @@
   return this._attributeCalledExpectedType;
 };
 
+World.prototype.getAttributeCalledInverseAttribute = function() {
+  return this._attributeCalledInverseAttribute;
+};
 
+
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic categories
 // -------------------------------------------------------------------
@@ -693,15 +699,16 @@
  * Returns a newly created entry.
  *
  * @scope    public instance method
+ * @param    previousEntry    The entry that this entry will replace. Can be null.
  * @param    itemOne    One of the two items that this entry will connect. 
  * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
  * @param    itemTwo    One of the two items that this entry will connect. 
  * @param    attributeTwo    The attribute of itemTwo that this entry will be assigned to.  
  * @return   A newly created entry.
  */
-World.prototype._newConnectionEntry = function(itemOne, attributeOne, itemTwo, attributeTwo) {
+World.prototype._newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
   this.beginTransaction();
-  var entry = this._virtualServer.newConnectionEntry(itemOne, attributeOne, itemTwo, attributeTwo);
+  var entry = this._virtualServer.newConnectionEntry(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
   this.endTransaction();
   return entry;
 };



From skinner at sheep.berlios.de  Tue Jun 21 09:12:08 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 21 Jun 2005 09:12:08 +0200
Subject: [openrecord-svn] r166 - trunk/documentation
Message-ID: <200506210712.j5L7C88G007389@sheep.berlios.de>

Author: skinner
Date: 2005-06-21 09:12:04 +0200 (Tue, 21 Jun 2005)
New Revision: 166

Modified:
   trunk/documentation/release_planning.txt
Log:
marked task as done

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-21 02:33:13 UTC (rev 165)
+++ trunk/documentation/release_planning.txt	2005-06-21 07:12:04 UTC (rev 166)
@@ -166,7 +166,7 @@
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
 chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
-brian  | 1    IED |         | 10. Add data model support for bi-directional references
+brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
 chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields
@@ -224,7 +224,7 @@
        |          |         | 62. Ensure that PHP scripts and file I/O works for concurrent multi-user access
 -------+----------+---------+----------------------------------------------
 chao   | 0.5 IED  | 0.5 IED | Improved UI for autocomplete
-c/b    | 0.5 IED  | 0.5 IED | Allow plugins to store layout data
+chao   | 0.5 IED  | 0.5 IED | Allow plugins to store layout data
 chao   | 0.5 IED  | 0.5 IED | Table plugin persists column order
        
 =======================================================



From skinner at sheep.berlios.de  Tue Jun 21 19:13:10 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 21 Jun 2005 19:13:10 +0200
Subject: [openrecord-svn] r167 - trunk/source
Message-ID: <200506211713.j5LHDAUI016856@sheep.berlios.de>

Author: skinner
Date: 2005-06-21 19:13:09 +0200 (Tue, 21 Jun 2005)
New Revision: 167

Modified:
   trunk/source/Cookie.js
Log:
Updated Cookie.js to comply with the "O'Reilly Policy on Re-Use of Code Examples from Books".

Modified: trunk/source/Cookie.js
===================================================================
--- trunk/source/Cookie.js	2005-06-21 07:12:04 UTC (rev 166)
+++ trunk/source/Cookie.js	2005-06-21 17:13:09 UTC (rev 167)
@@ -1,4 +1,18 @@
-// Sample code from Javascript: The Definitive Guide, 4th Edition by David Flanagan
+// -------------------------------------------------------------------
+// Copyright Acknowledgement
+// -------------------------------------------------------------------
+// The code in this file is based on example code from the book:
+//       title: "Javascript: The Definitive Guide", 4th Edition
+//      author: David Flanagan
+//   publisher: O'Reilly Media, Inc.
+//        ISBN: 0-596-00048-0
+// 
+// O'Reilly Media has a written policy that covers re-use of code examples
+// from their books:
+//   http://www.oreilly.com/pub/a/oreilly/ask_tim/2001/codepolicy.html
+// -------------------------------------------------------------------
+
+
 // The constructor function: creates a Cookie object for the specified
 // document, with a specified name and optional attributes.
 // Arguments:
@@ -10,12 +24,6 @@
 //   domain:   An optional string that specifies the cookie domain attribute.
 //   secure:   An optional boolean value that, if true, requests a secure cookie.
 //
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   Util.js [pending: will soon when we add error checking]
-// -------------------------------------------------------------------
-
 function Cookie(document, name, hours, path, domain, secure)
 {
     // All the predefined properties of this object begin with '$'
@@ -110,6 +118,16 @@
     this.$document.cookie = cookie;
 }
 
+
+// -------------------------------------------------------------------
+// Code below this line was written by Chih-Chao Lam, not David Flanagan...
+// -------------------------------------------------------------------
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   Util.js [pending: will soon when we add error checking]
+// -------------------------------------------------------------------
+
 /* need to turn this into Unit tests
 var testCookieCreation = false;
 var cookieName = "user"



From chaolam at sheep.berlios.de  Tue Jun 21 20:26:57 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Tue, 21 Jun 2005 20:26:57 +0200
Subject: [openrecord-svn] r168 - trunk/source
Message-ID: <200506211826.j5LIQvwT028785@sheep.berlios.de>

Author: chaolam
Date: 2005-06-21 20:26:56 +0200 (Tue, 21 Jun 2005)
New Revision: 168

Modified:
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/base_style.css
Log:
Minor twiddling with CSS to make UI appear more fluid and unobtrusive

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-21 17:13:09 UTC (rev 167)
+++ trunk/source/PageView.js	2005-06-21 18:26:56 UTC (rev 168)
@@ -43,10 +43,7 @@
 // -------------------------------------------------------------------
 // PageView public class constants
 // -------------------------------------------------------------------
-PageView.ELEMENT_ID_SECTION_DIV_PREFIX = "section_view_";
-PageView.ELEMENT_ID_SECTION_DIV_MIDFIX = "_in_page_";
-PageView.ELEMENT_ID_SUMMARY_VIEW_DIV_PREFIX = "_summary_view_for_page_";
-
+PageView.CSS_CLASS_PAGE_HEADER = "page_header";
 PageView.UUID_FOR_ATTRIBUTE_SECTION = "00030000-ce7f-11d9-8cd5-0011113ae5d6";
 
 /**
@@ -155,11 +152,11 @@
   
   var headerElement = View.createAndAppendElement(pageDivElement, "h1");
   this._myHeaderText = new TextView(this, headerElement, this.myPage, attributeCalledName,
-    this.myPage.getSingleEntryFromAttribute(attributeCalledName), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
+    this.myPage.getSingleEntryFromAttribute(attributeCalledName), PageView.CSS_CLASS_PAGE_HEADER, false);
 
   var summaryViewDiv = View.createAndAppendElement(pageDivElement, "div");
   this._myPageSummaryView = new TextView(this, summaryViewDiv, this.myPage, attributeCalledSummary,
-    this.myPage.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
+    this.myPage.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.CSS_CLASS_SUMMARY_TEXT, true);
 
   // add <div> elements for each of the sections on the page
   // and create a new SectionView for each section

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-21 17:13:09 UTC (rev 167)
+++ trunk/source/SectionView.js	2005-06-21 18:26:56 UTC (rev 168)
@@ -60,6 +60,8 @@
 SectionView.ELEMENT_CLASS_SELECTED = "selected";
 SectionView.ELEMENT_CLASS_MORE_LINK = "more";
 SectionView.ELEMENT_CLASS_TEXT_VIEW = "text_view";
+SectionView.CSS_CLASS_SECTION_HEADER = "section_header";
+SectionView.CSS_CLASS_SUMMARY_TEXT = "summary_text";
 
 SectionView.ELEMENT_ID_SELECT_MENU_PREFIX = "select_menu_";
 SectionView.ELEMENT_ID_SELECT_MENU_SUFFIX = "_select_menu";
@@ -225,7 +227,7 @@
   var attributeCalledSummary = this.getWorld().getAttributeCalledSummary();
   this._myHeaderView = new TextView(this, headerH2, this.mySection, attributeCalledName,
     this.mySection.getSingleEntryFromAttribute(attributeCalledName),
-    SectionView.ELEMENT_CLASS_TEXT_VIEW);
+    SectionView.CSS_CLASS_SECTION_HEADER);
   var summaryDiv = View.createAndAppendElement(outerDiv, "div");
   this._mySectionSummaryView = new TextView(this, summaryDiv, this.mySection, attributeCalledSummary,
     this.mySection.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-21 17:13:09 UTC (rev 167)
+++ trunk/source/TablePlugin.js	2005-06-21 18:26:56 UTC (rev 168)
@@ -408,9 +408,13 @@
 TablePlugin.prototype.selectRow = function (rowElement) {
   Util.assert(rowElement instanceof HTMLTableRowElement);
   if (rowElement != this._lastSelectedRow) {
-    if (this._lastSelectedRow) {this._lastSelectedRow.style.background = "";}
+    if (this._lastSelectedRow) {
+      //this._lastSelectedRow.style.background = "";
+      this._lastSelectedRow.className = "";
+    }
     this._lastSelectedRow = rowElement;
-    rowElement.style.background = "rgb(100%,100%,0%)"; // PENDING: need to css-ify this selection
+    //rowElement.style.background = "rgb(100%,100%,0%)"; // PENDING: need to css-ify this selection
+    rowElement.className = "selected"; 
     return true;
   }
   return false;

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-21 17:13:09 UTC (rev 167)
+++ trunk/source/TextView.js	2005-06-21 18:26:56 UTC (rev 168)
@@ -213,8 +213,8 @@
       editField.size = 5; //editField.defaultValue.length+1;
     }
     
-    //editField.style.width = this.getHTMLElement().offsetWidth + "px";    
-    //editField.style.height = (this.getHTMLElement().offsetHeight) + "px";
+    //editField.style.width = this.getHTMLElement().offsetWidth + "px";  
+    if (this._isMultiLine) {editField.style.height = (this.getHTMLElement().offsetHeight) + "px";}  
     
     this._setupSuggestionBox();
     this.getHTMLElement().replaceChild(editField, this._textNode);
@@ -739,7 +739,7 @@
       var textNode = document.createTextNode(item.getDisplayName());
       var row = table.insertRow(rowNumber);
       var cell = row.insertCell(columnNumber);
-      cell.className = (this._selectedItem == item) ? "suggestion_box_selected":"";
+      row.className = (this._selectedItem == item) ? "selected":"";
       //cell.style.background = (this._selectedItem == item) ? "rgb(0%,70%,100%)":""; //pending need to CSS-ify this
       cell.appendChild(textNode);
       cell.onmousedown = this._clickOnSelection.bindAsEventListener(this, item);

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-06-21 17:13:09 UTC (rev 167)
+++ trunk/source/base_style.css	2005-06-21 18:26:56 UTC (rev 168)
@@ -331,7 +331,29 @@
   padding: 0pt;
 }
 
+.page_header, .section_header {
+  color: rgb(0%, 0%, 50%);
+  background: rgb(100%, 100%, 40%);
+  font-size: 1em;
+  width: 100%;
+  font-family: Arial, Verdana, sans-serif;
+  font-weight: bold;
+  border: none; 
+  padding: 0pt;
+}
 
+.summary_text {
+  //font-size: large;
+  background: rgb(100%, 100%, 40%);
+  width: 100%;
+  font-family: Arial, Verdana, sans-serif;
+  border: none; 
+  padding: 0pt;
+  margin: 0px;
+}
+
+
+
 /****************************************/
 /* Debug area styles                    */
 
@@ -410,6 +432,10 @@
   border: 1pt solid rgb(70%, 70%, 70%);
 }
 
+tr.selected {
+  background: rgb(100%,100%,40%);
+}
+
 td.plain {
   font-family: Arial, Verdana, sans-serif;
   text-align: left;
@@ -568,10 +594,6 @@
   width: 100%;
 }
 
-.suggestion_box_selected td {
-  background: rgb(100%,100%,0%);
-}
-
 .suggestion_box td {
   margin: 0px;
   border: 0px;



From skinner at sheep.berlios.de  Wed Jun 22 05:21:19 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 22 Jun 2005 05:21:19 +0200
Subject: [openrecord-svn] r169 - in trunk: documentation source source/model
Message-ID: <200506220321.j5M3LJIk030826@sheep.berlios.de>

Author: skinner
Date: 2005-06-22 05:21:11 +0200 (Wed, 22 Jun 2005)
New Revision: 169

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/MultiEntriesView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
Log:
Changes to how view code handles provisional items so as to save the provisional item first and then set the category, in that order, and in one transaction.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-21 18:26:56 UTC (rev 168)
+++ trunk/documentation/release_planning.txt	2005-06-22 03:21:11 UTC (rev 169)
@@ -162,7 +162,7 @@
 brian  | 0        | 0.25    |     Get deletion votes working again after switching to time-based UUIDs
 brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
-brian  | 0.5  IED |         |  6. Save provisional item and then set the category, in that order, and in on transaction
+brian  | 0.5  IED | 0.25    |  6. Save provisional item and then set the category, in that order, and in one transaction
        |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
 chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]

Modified: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-21 18:26:56 UTC (rev 168)
+++ trunk/source/MultiEntriesView.js	2005-06-22 03:21:11 UTC (rev 169)
@@ -91,6 +91,23 @@
 
 
 /**
+ * This method will only ever be called by one of our EntryView subviews.
+ * The EntryView will call this method during the transaction in which
+ * the EntryView is creating the first Entry for a provisional item, 
+ * causing the provisional item to become "real".
+ * 
+ * @scope    package instance method
+ * @param    item      The Item which just became real. 
+ */
+MultiEntriesView.prototype._provisionalItemJustBecomeReal = function(item) {
+  var superview = this.getSuperview();
+  if (superview._provisionalItemJustBecomeReal) {
+    superview._provisionalItemJustBecomeReal(item);
+  }
+};
+
+
+/**
  *
  */
 MultiEntriesView.prototype.noLongerProvisional = function() {
@@ -141,6 +158,7 @@
   this._clickFunction = inClickFunction;
 };
 
+
 /**
  *
  */

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-21 18:26:56 UTC (rev 168)
+++ trunk/source/TablePlugin.js	2005-06-22 03:21:11 UTC (rev 169)
@@ -253,13 +253,27 @@
 };
 
 
+
 /**
+ * This method will only ever be called by one of our MultiEntriesView 
+ * subviews.  The MultiEntriesView will call this method during the 
+ * transaction in which the first Entry for a provisional item is being
+ * created, causing the provisional item to become "real".
+ * 
+ * @scope    package instance method
+ * @param    item      The Item which just became real. 
+ */
+TablePlugin.prototype._provisionalItemJustBecomeReal = function(item) {
+  this.getWorld().setItemToBeIncludedInQueryResultList(item, this._query);
+};
+
+
+/**
  *
  */
 TablePlugin.prototype.observedItemHasChanged = function(item) {
   // called when a provisional item becomes a real item
   item.removeObserver(this); //now that provisional item is real, we stop observing it
-  this.getWorld().setItemToBeIncludedInQueryResultList(item,this._query);
   this._listOfItems.push(item); // moving this line affects code below
   
   // tell provisional item views they are no longer provisional

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-21 18:26:56 UTC (rev 168)
+++ trunk/source/TextView.js	2005-06-22 03:21:11 UTC (rev 169)
@@ -333,6 +333,7 @@
  */
 TextView.prototype._writeValue = function(value) {
   if (value === 0 || value) {
+    this.getWorld().beginTransaction();
     value = this._transformToExpectedType(value);
 
     var oldValue = null;
@@ -347,7 +348,12 @@
       else {
         this._entry = this._item.replaceEntryWithEntryForAttribute(this._entry, this._attribute, value);
       }
+      var superview = this.getSuperview();
+      if (superview._provisionalItemJustBecomeReal) {
+        superview._provisionalItemJustBecomeReal(this._item);
+      }
     }    
+    this.getWorld().endTransaction();
   }
   this._restoreText(true); // call restore text in case item is transformed (e.g. Dates will be normalized)
 };

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-21 18:26:56 UTC (rev 168)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-22 03:21:11 UTC (rev 169)
@@ -145,7 +145,7 @@
  * @return   A string that is. 
  */
 DeltaVirtualServer.prototype.truncateString = function (inString) {
-  var maxLength = 30;
+  var maxLength = 80;
   var ellipsis = "...";
   if (inString.length > maxLength) {
     return (inString.substring(0, (maxLength - ellipsis.length)) + ellipsis);

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-21 18:26:56 UTC (rev 168)
+++ trunk/source/model/Entry.js	2005-06-22 03:21:11 UTC (rev 169)
@@ -311,7 +311,7 @@
         else {Util.assert(false, "myItem isn't part of this Entry");}
       }
       else {
-        returnString = "connection between [" + firstItem.getDisplayName() + "] and [" + secondItem.getDisplayName() + "]";
+        returnString = 'connection between "' + firstItem.getDisplayName() + '" and "' + secondItem.getDisplayName() + '"';
       }
       break;
   }



From skinner at sheep.berlios.de  Wed Jun 22 07:00:30 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 22 Jun 2005 07:00:30 +0200
Subject: [openrecord-svn] r170 - in trunk: documentation source
Message-ID: <200506220500.j5M50U9p031891@sheep.berlios.de>

Author: skinner
Date: 2005-06-22 07:00:23 +0200 (Wed, 22 Jun 2005)
New Revision: 170

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/TablePlugin.js
Log:
minor clean-up

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-22 03:21:11 UTC (rev 169)
+++ trunk/documentation/release_planning.txt	2005-06-22 05:00:23 UTC (rev 170)
@@ -163,7 +163,7 @@
 brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED | 0.25    |  6. Save provisional item and then set the category, in that order, and in one transaction
-       |          |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
+brian  | 0.25 IED |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
 chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
 brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
@@ -181,8 +181,8 @@
        |          |         | 21. Provide GUI feedback about what's editable
        |          |         | 22. Reach consensus on (colors, padding, and borders) and then implement
        |          |         | 23. Get data model to pass the ordinal unit tests again
-       |          |         | 24. Display Navbar pages in the right order
-       |          |         | 25. Arrow keys in SuggestionBox
+mignon |          | done    | 24. Display Navbar pages in the right order
+chao   |          | done?   | 25. Arrow keys in SuggestionBox
        |          |         | 26. Arrow keys in Table View
        |          |         | 27. Change UI so that non-literal entries are immutable
        |          |         | 28. Implement a good URL-to-content mapping, such that URLs won't go bad in future releases
@@ -227,6 +227,8 @@
 chao   | 0.5 IED  | 0.5 IED | Allow plugins to store layout data
 chao   | 0.5 IED  | 0.5 IED | Table plugin persists column order
        
+
+
 =======================================================
 Categories and Attributes we might use for release 0.1
 =======================================================

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-22 03:21:11 UTC (rev 169)
+++ trunk/source/TablePlugin.js	2005-06-22 05:00:23 UTC (rev 170)
@@ -106,6 +106,7 @@
   return -ascendingInt;
 };
 
+
 /**
  * Creates an array containing all the attributes of the content items 
  * in this table.  Populates list of suggested items for relevant attributes
@@ -142,8 +143,12 @@
   this._displayAttributes = displayAttrs;
 };
 
+
+/**
+ *
+ */
 TablePlugin.prototype._buildAttributeHashFromScratch = function() {
-  var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
+  // var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var hashTableOfAttributes = {};
   var hashTableOfEntries = {};
@@ -156,6 +161,8 @@
         var attributeKeyString = attribute.getUniqueKeyString();
         hashTableOfAttributes[attributeKeyString] = attribute;
         
+        hashTableOfEntries[attributeKeyString] = this.getWorld().getSuggestedItemsForAttribute(attribute);
+/*
         // build entries representing this attribute in this table 
         // PENDING we may only want to do this for certain attributes
         var itemEntries = contentItem.getEntriesForAttribute(attribute);
@@ -170,16 +177,18 @@
             hashTableOfEntries[attributeKeyString][entry.getUniqueKeyString()] = entry;
           }
         }
+*/
       }
     }
   }
   
-  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
+/*  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
   } else {
     for (attributeKey in hashTableOfEntries) {
       hashTableOfEntries[attributeKey] = Util.hashTableValues(hashTableOfEntries[attributeKey]);
     }
   }
+*/
   this._hashTableOfEntries = hashTableOfEntries;
   if (Util.lengthOfHashTable(hashTableOfAttributes) < 1) {
     var attributeCalledName = this.getWorld().getAttributeCalledName();
@@ -216,6 +225,7 @@
   importButton.onchange = this._importData.bindAsEventListener(this, importButton);*/
 };
 
+
 /**
  * Inserts a table row at rowNum given contentItem
  *
@@ -247,7 +257,11 @@
   
   if (this.isInEditMode()) {
     // add one more row to allow users to add a new item to the table
-    var newItem = this.getWorld().newProvisionalItem(this);
+    var observer = this; 
+    // PENDING: 
+    // no need to register an observer here, if we move code from
+    // observedItemHasChanged() to _provisionalItemJustBecomeReal()
+    var newItem = this.getWorld().newProvisionalItem(observer);
     this._insertRow(newItem, ++numRows, true);
   }
 };
@@ -269,7 +283,21 @@
 
 
 /**
- *
+ * PENDING: 
+ * This method observedItemHasChanged() was written back before we 
+ * wrote the method above this one, _provisionalItemJustBecomeReal().
+ * Now we've got things set up so that the TextView will call
+ * our _provisionalItemJustBecomeReal() method when the user first
+ * makes a change that causes the provisional item to become real.
+ * Now that we have _provisionalItemJustBecomeReal(), we might 
+ * want to move all the code from observedItemHasChanged() over
+ * into _provisionalItemJustBecomeReal(), and then we could get
+ * rid of this method.  HOWEVER, moving the code might cause bugs,
+ * because this observedItemHasChanged() method is probably 
+ * called slightly later than the _provisionalItemJustBecomeReal()
+ * method above.  The _provisionalItemJustBecomeReal() is called
+ * DURING the transaction, whereas observedItemHasChanged() is,
+ * in theory, called after the transaction.
  */
 TablePlugin.prototype.observedItemHasChanged = function(item) {
   // called when a provisional item becomes a real item
@@ -495,12 +523,12 @@
       delete this._hashTableOfEntries[attributeUuid];
     }
     else {
-      var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
+      // var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
       this._displayAttributes.push(changedAttribute);
       this._layout.addEntryForAttribute(attrTableColumns,changedAttribute,repository.getTypeCalledItem());
-      if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
-        this._hashTableOfEntries[attributeUuid] = this.getWorld().getSuggestedItemsForAttribute(changedAttribute);
-      }
+      // if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
+      this._hashTableOfEntries[attributeUuid] = this.getWorld().getSuggestedItemsForAttribute(changedAttribute);
+      // }
     }
     this._buildTable(true);
   }



From skinner at sheep.berlios.de  Thu Jun 23 00:32:15 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 23 Jun 2005 00:32:15 +0200
Subject: [openrecord-svn] r171 - in trunk/source: . model repositories/demo_page
Message-ID: <200506222232.j5MMWFfG011205@sheep.berlios.de>

Author: skinner
Date: 2005-06-23 00:32:12 +0200 (Thu, 23 Jun 2005)
New Revision: 171

Removed:
   trunk/source/model/replace_user_file.php
   trunk/source/repositories/demo_page/2005_may_user_list.json
Modified:
   trunk/source/demo_page.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
Log:
Changed the JSON file format so that we record user and password information in the same file as the rest of the records, and deleted the separate user file. This fixes the bug that we had where the user file would get wiped out if we called the PHP server code with no POST data.

Modified: trunk/source/demo_page.js
===================================================================
--- trunk/source/demo_page.js	2005-06-22 05:00:23 UTC (rev 170)
+++ trunk/source/demo_page.js	2005-06-22 22:32:12 UTC (rev 171)
@@ -50,9 +50,9 @@
   var repositoryContentString = Util.getStringContentsOfFileAtURL(repositoryUrl);
   repositoryContentString += " ] }";
   
-  var userListFileName = "2005_may_user_list.json";
-  var userListUrl = pathToDemoRepository + userListFileName;
-  var userListContentString = Util.getStringContentsOfFileAtURL(userListUrl);
+  // var userListFileName = "2005_may_user_list.json";
+  // var userListUrl = pathToDemoRepository + userListFileName;
+  // var userListContentString = Util.getStringContentsOfFileAtURL(userListUrl);
   
   // Create a World and a DeltaVirtualServer, and have the 
   // DeltaVirtualServer rehydrate all the dehydrated items 
@@ -60,7 +60,7 @@
   var axiomaticItemsFileName = "2005_june_axiomatic_items.json";
   var axiomaticItemsUrl = "model/" + axiomaticItemsFileName;
   
-  var deltaVirtualServer = new DeltaVirtualServer(axiomaticItemsUrl, repositoryContentString, userListContentString);
+  var deltaVirtualServer = new DeltaVirtualServer(axiomaticItemsUrl, repositoryContentString);
   var world = new World(deltaVirtualServer);
   window.rootView = new RootView(world);
   

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-22 05:00:23 UTC (rev 170)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-22 22:32:12 UTC (rev 171)
@@ -917,6 +917,11 @@
              "uuid": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae" }
     },
     // -----------------------------------------------------------------------
+    { "User": {                                               // Brian Douglas Skinner
+             "user": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae",
+         "password": "92eb5ffee6ae2fec3ad71c777531578f" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Brian Douglas Skinner
              "uuid": "2c4fa781-dde4-11d9-9c71-8022ab6bc8ae",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -932,6 +937,11 @@
              "uuid": "90e02170-dde4-11d9-9c71-e24829d2f59b" }
     },
     // -----------------------------------------------------------------------
+    { "User": {                                               // Chih-Chao Lam
+             "user": "90e02170-dde4-11d9-9c71-e24829d2f59b",
+         "password": null }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Chih-Chao Lam
              "uuid": "90e02171-dde4-11d9-9c71-e24829d2f59b",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -947,6 +957,11 @@
              "uuid": "97d040f0-dde4-11d9-9c71-c103016080e1" }
     },
     // -----------------------------------------------------------------------
+    { "User": {                                               // Mignon Belongie
+             "user": "97d040f0-dde4-11d9-9c71-c103016080e1",
+         "password": null }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Mignon Belongie
              "uuid": "97d040f1-dde4-11d9-9c71-c103016080e1",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -962,6 +977,11 @@
              "uuid": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f" }
     },
     // -----------------------------------------------------------------------
+    { "User": {                                               // Mimi Yin
+             "user": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f",
+         "password": null }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Mimi Yin
              "uuid": "9c3596e1-dde4-11d9-9c71-b6ac85cc6d5f",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -977,6 +997,11 @@
              "uuid": "a00bf340-dde4-11d9-9c71-dae11c269bc7" }
     },
     // -----------------------------------------------------------------------
+    { "User": {                                               // Marty Betz
+             "user": "a00bf340-dde4-11d9-9c71-dae11c269bc7",
+         "password": null }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Marty Betz
              "uuid": "a00bf341-dde4-11d9-9c71-dae11c269bc7",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-22 05:00:23 UTC (rev 170)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-22 22:32:12 UTC (rev 171)
@@ -46,13 +46,11 @@
  *
  * @scope    public instance constructor
  * @param    inJsonRepositoryString    A JSON string literal representing the world of items. 
- * @param    inJsonUserList    A JSON string literal listing user UUIDs and passwords. 
  */
 DeltaVirtualServer.prototype = new StubVirtualServer();  // makes DeltaVirtualServer be a subclass of StubVirtualServer
-function DeltaVirtualServer(inJsonAxiomsFileURL, inJsonRepositoryString, inJsonUserList) {
+function DeltaVirtualServer(inJsonAxiomsFileURL, inJsonRepositoryString) {
   this._myDehydratedAxiomFileURL = inJsonAxiomsFileURL;
   this._myDehydratedWorld = inJsonRepositoryString;
-  this._myDehydratedUserList = inJsonUserList;
   this._myHasEverFailedToSaveFlag = false;
 }
 
@@ -68,7 +66,7 @@
   this._initialize(inWorld);
   this._buildTypeHashTable();
   this._loadAxiomaticItemsFromFileAtURL(this._myDehydratedAxiomFileURL);
-  this._loadWorldFromJsonStrings(this._myDehydratedWorld, this._myDehydratedUserList);
+  this._loadWorldFromJsonString(this._myDehydratedWorld);
 };
 
 // -------------------------------------------------------------------
@@ -83,9 +81,8 @@
  * 
  * @scope    private instance method
  * @param    inJsonRepositoryString    A JSON string literal representing the world of items. 
- * @param    inJsonUserList    A JSON string literal listing user UUIDs and passwords. 
  */
-DeltaVirtualServer.prototype._loadWorldFromJsonStrings = function (inJsonRepositoryString, inJsonUserList) {
+DeltaVirtualServer.prototype._loadWorldFromJsonString = function (inJsonRepositoryString) {
 
   // load the list of records
   Util.assert(Util.isString(inJsonRepositoryString));
@@ -97,42 +94,9 @@
   var listOfRecords = dehydratedRecords[StubVirtualServer.JSON_MEMBER_RECORDS];
   Util.assert(Util.isArray(listOfRecords));
   
-  // load the list of users
-  Util.assert(Util.isString(inJsonUserList));
-  var dehydratedUserList = null;
-  eval("dehydratedUserList = " + inJsonUserList + ";");
-  Util.assert(Util.isObject(dehydratedUserList));
-  var userListFormat = dehydratedUserList[StubVirtualServer.JSON_MEMBER_FORMAT];
-  Util.assert(userListFormat == StubVirtualServer.JSON_FORMAT_2005_MAY_USERS);
-  var listOfUsers = dehydratedUserList[StubVirtualServer.JSON_MEMBER_USERS];
-  Util.assert(Util.isArray(listOfUsers));
-
-  this.__loadWorldFromListOfRecordsAndUsers(listOfRecords, listOfUsers);
-};
+  var listOfUsers = null;
   
-
-/**
- * Loads a world of items from a dehydrated list of entries, where those
- * entries may represent items, entries, votes, or ordinal settings.
- *
- * @scope    private instance method
- * @param    inListOfRecords    A list of dehydrated records. 
- * @param    inListOfUsers    A list of dehydrated users. 
- */
-DeltaVirtualServer.prototype.__loadWorldFromListOfRecordsAndUsers = function (inListOfRecords, inListOfUsers) {
-  this._rehydrateRecords(inListOfRecords);
-  
-  for (var key in inListOfUsers) {
-    var dehydratedUserData = inListOfUsers[key];
-    var userUuid = dehydratedUserData[StubVirtualServer.JSON_MEMBER_UUID];
-    var userPassword = dehydratedUserData[StubVirtualServer.JSON_MEMBER_PASSWORD];
-    
-    var user = this.getItemFromUuid(userUuid);
-    if (user) {
-      this.__myListOfUsers.push(user);
-      this.__myHashTableOfUserAuthenticationInfo[user.getUniqueKeyString()] = userPassword;
-    }
-  }
+  this._rehydrateRecords(listOfRecords);
 };
   
 
@@ -204,6 +168,7 @@
   var firstContentRecord = true;
   var itemDisplayNameSubstring;
   var entryDisplayNameSubstring;
+  var listOfUsers = null;
 
   for (key in inListOfRecords) {
     var record = inListOfRecords[key];
@@ -213,13 +178,36 @@
       listOfStrings.push(',\n');
     }
     listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
+
     if (record instanceof Item) {
       var item = record;
       listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
       itemDisplayNameSubstring = this.truncateString(item.getDisplayName());
       listOfStrings.push('                                               // ' + itemDisplayNameSubstring + '\n');
       listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '"');
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
+     
+      if (!listOfUsers) {
+        listOfUsers = this.getUsers();
+      }
+      if (Util.isObjectInSet(item, listOfUsers)) {
+        var user = item;
+        var password = this.__myHashTableOfUserAuthenticationInfo[user.getUniqueKeyString()];
+        var passwordString = "null";
+        if (password) {
+          passwordString = '"' + password + '"';
+        }
+        listOfStrings.push(',\n');
+        listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
+        listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_USER_CLASS + '": ' + '{');
+        listOfStrings.push('                                               // ' + itemDisplayNameSubstring + '\n');
+        listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_USER + '": "' + user._getUuid() + '",\n');
+        listOfStrings.push(indent + '     "' + StubVirtualServer.JSON_MEMBER_PASSWORD + '": ' + passwordString + ' }\n');
+        listOfStrings.push(indent + '}');
+      }
     }
+
     if (record instanceof Vote) {
       var vote = record;
       listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_VOTE_CLASS + '": ' + '{');
@@ -229,14 +217,20 @@
       listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + vote._getUuid() + '",\n');
       listOfStrings.push(indent + '       "' + StubVirtualServer.JSON_MEMBER_RECORD + '": "' + vote.getContentRecord()._getUuid() + '",\n');
       listOfStrings.push(indent + '   "' + StubVirtualServer.JSON_MEMBER_RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
     }
+
     if (record instanceof Ordinal) {
       var ordinal = record;
       listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ORDINAL_CLASS + '": ' + '{' + '\n');
       listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + ordinal._getUuid() + '",\n');
       listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_RECORD + '": "' + ordinal.getContentRecord()._getUuid() + '",\n');
       listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
     }
+
     if (record instanceof Entry) {
       var entry = record;
       listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{');
@@ -291,12 +285,13 @@
         }
         listOfStrings.push(indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + '');
       }
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
     }
-    listOfStrings.push('  }');
+    
     // var userDisplayName = record.getUserstamp().getDisplayName();
     // var userDisplayNameSubstring = this.truncateString(userDisplayName);
     // listOfStrings.push('  // by (' + userDisplayNameSubstring + ')\n');
-    listOfStrings.push(indent + '}');
   }
   
   var finalString = listOfStrings.join("");
@@ -305,84 +300,6 @@
 
 
 /**
- * Returns a string containing a JavaScript "object literal" with a list of
- * all the user UUIDs and passwords.
- *
- * @scope    private instance method
- * @param    inChromeFlag    True if the return string should contain "chrome".
- * @return   A JSON string literal with a list of user UUIDs and passwords. 
- */
-DeltaVirtualServer.prototype.__getJsonStringRepresentingUserList = function (inChromeFlag) {
-  var listOfStrings = [];
-  var key;
-
-  if (inChromeFlag) {
-    listOfStrings.push('// User list, in JSON format' + '\n');
-    listOfStrings.push('{ ');
-    listOfStrings.push('"' + StubVirtualServer.JSON_MEMBER_FORMAT + '": "' + StubVirtualServer.JSON_FORMAT_2005_MAY_USERS + '", ' + '\n');    
-  }
-  
-  listOfStrings.push('  "' + StubVirtualServer.JSON_MEMBER_USERS + '": ' + '[\n');
-  var firstContentRecord = true;
-  for (key in this.__myListOfUsers) {
-    var user = this.__myListOfUsers[key];
-    if (firstContentRecord) {
-      firstContentRecord = false;
-    } else {
-      listOfStrings.push(',\n');
-    }
-    var password = this.__myHashTableOfUserAuthenticationInfo[user.getUniqueKeyString()];
-    var passwordString = "null";
-    if (password) {
-      passwordString = '"' + password + '"';
-    }
-    listOfStrings.push('    { "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + user._getUuid() + '", ');
-    listOfStrings.push('"' + StubVirtualServer.JSON_MEMBER_PASSWORD + '": ' + passwordString + ' }');
-  }
-  listOfStrings.push(" ]\n");
-  
-  if (inChromeFlag) {
-    listOfStrings.push('}\n');
-  }
-  
-  var finalString = listOfStrings.join("");
-  return finalString;
-};
-
-
-/**
- * Returns a huge string, containing a JavaScript "object literal"
- * representation of the entire world.
- *
- * @scope    private instance method
- * @return   A JSON string literal, representing all the items in the world. 
- */
-DeltaVirtualServer.prototype.__getJsonStringRepresentingEntireWorld = function () {
-  var listOfStrings = [];
-  
-  listOfStrings.push('// Repository dump, in JSON format' + '\n');
-  listOfStrings.push('{ ');
-  listOfStrings.push('"' + StubVirtualServer.JSON_MEMBER_FORMAT + '": "' + StubVirtualServer.JSON_FORMAT_2005_APRIL + '", ' + '\n');
-  listOfStrings.push('  "' + StubVirtualServer.JSON_MEMBER_DATA + '": ' + '[' + '\n');
-
-  var indent = "  ";
-  var jsonStringForRecords = this._getJsonStringRepresentingRecords(this.__myChronologicalListOfRecords, indent);
-  listOfStrings.push(jsonStringForRecords);
-
-  listOfStrings.push("  ], \n");
-  
-  // write out the list of users
-  var withChrome = false;
-  var jsonStringForUserList = this.__getJsonStringRepresentingUserList(withChrome);
-  listOfStrings.push(jsonStringForUserList);
-  
-  listOfStrings.push("}\n");
-  var finalString = listOfStrings.join("");
-  return finalString;
-};
-
-
-/**
  * Sends all the changes to the server, so that the server can record the
  * changes.
  *
@@ -416,30 +333,10 @@
     newRecord = listOfChangesMade[key];
     this.__myChronologicalListOfRecords.push(newRecord);
   }
-  
-  var saveListOfUsers = false;
-  var listOfUsers = this.getUsers();
-  for (key in listOfChangesMade) {
-    newRecord = listOfChangesMade[key];
-    if (Util.isObjectInSet(newRecord, listOfUsers)) {
-      saveListOfUsers = true;
-      break;
-    }
-  }
- 
+
   if (saveChanges) {
-    var url;
-    var textToAppend;
-    
-    // OLD: used for saving a the entire world as one lump
-    // url = "model/save_lump.php";
-    // this.__myXMLHttpRequestObject.open("POST", url, true);
-    // this.__myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
-    // this.__myXMLHttpRequestObject.send(this.__getJsonStringRepresentingEntireWorld());
-    
-    // NEW: used for saving just the changes
-    url = "model/append_to_repository_file.php";
-    textToAppend = ",\n" + this._getJsonStringRepresentingTransaction(currentTransaction);
+    var url = "model/append_to_repository_file.php";
+    var textToAppend = ",\n" + this._getJsonStringRepresentingTransaction(currentTransaction);
     var asynchronous;
     asynchronous = true;
     
@@ -453,26 +350,6 @@
     this.__myXMLHttpRequestObject.open("POST", url, asynchronous);
     this.__myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
     this.__myXMLHttpRequestObject.send(textToAppend);
-    
-    // NEW: used for saving just the user list
-    if (saveListOfUsers) {
-      url = "model/replace_user_file.php";
-      var withChrome = true;
-      textToAppend = this.__getJsonStringRepresentingUserList(withChrome);
-      asynchronous = true;
-      
-      // PENDING: 
-      // It might be more efficient to re-use the XMLHttpRequestObject,
-      // rather than creating a new one for new request.  But re-using 
-      // them is complicated, because the requests are asynchronous, so
-      // we need to check to see if the last request is done before we 
-      // can start a new request.
-      this._myUserListXMLHttpRequestObject = this.__newXMLHttpRequestObject();
-      
-      this._myUserListXMLHttpRequestObject.open("POST", url, asynchronous);
-      this._myUserListXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
-      this._myUserListXMLHttpRequestObject.send(textToAppend);
-    }
   }
   
   this._currentTransaction = null;

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-22 05:00:23 UTC (rev 170)
+++ trunk/source/model/ModelTest.js	2005-06-22 22:32:12 UTC (rev 171)
@@ -636,70 +636,7 @@
   var receivedEntry = anEmail.addEntryForAttribute(dateReceivedAttribute, new Date("6/8/05"));
   var numAttachmentsEntry = anEmail.addEntryForAttribute(noOfAttachments, 4);
 }
-/*
-function testBigLumpVirtualServerStringOutput() {
-  var fileName = "test_data_2005_april_chronological_lump.json";
-  var url = "../../../source/model/" + fileName;
-  var fileContentString = Util.getStringContentsOfFileAtURL(url);
-  var bigLumpVirtualServer = new BigLumpVirtualServer(fileContentString);
-  var world = new World(bigLumpVirtualServer);
-  var reconstructedString = bigLumpVirtualServer.__getJsonStringRepresentingEntireWorld(); 
-  // var beginMismatch = 0;
-  // for (var i = 0; i < fileContentString.length; ++i) {
-  //   if (fileContentString.charAt(i) != reconstructedString.charAt(i)) {
-  //     beginMismatch = i;
-  //     break;
-  //   }
-  // }
-  // alert("beginMismatch = " + beginMismatch);
-  // alert("testBigLumpVirtualServerStringOutput\n" + 
-  //  fileContentString.substring(beginMismatch, (beginMismatch + 500)) + "\n" +
-  //  reconstructedString.substring(beginMismatch, (beginMismatch + 500)));
-  assert("reconstructed string equals original string", fileContentString == reconstructedString);
-  
-  var guestUser = world.getItemFromUuid(1502);
-  var loginSuccess = world.login(guestUser, "abracadabra");
-  assertTrue('Can log in as Guest', loginSuccess);
-  var newItem = world.newProvisionalItem();
-  reconstructedString = bigLumpVirtualServer.__getJsonStringRepresentingEntireWorld(); 
-  assert("reconstructed string equals original string", fileContentString == reconstructedString);
-  // var attributeCalledName = world.getAttributeCalledName();
-  // newItem.addEntryForAttribute(attributeCalledName, "Jimmy Carter");
-  // reconstructedString = bigLumpVirtualServer.__getJsonStringRepresentingEntireWorld(); 
-  // assert("reconstructed string no longer equals original string", fileContentString != reconstructedString);
-  
-}
-*/
 
-/*
-function testBigLumpVirtualServer() {
-  var fileName = "test_data_2005_march_item_centric_list.json";
-  var url = "../../../source/model/" + fileName;
-  var fileContentString = Util.getStringContentsOfFileAtURL(url);
-  
-  // Create a World and a BigLumpVirtualServer, and have the 
-  // BigLumpVirtualServer rehydrate all the dehydrated items 
-  // contained in the fileContentString.  This tests whether
-  // the BigLumpVirtualServer bombs out when it tries to read
-  // the data from a 2005_MARCH_ITEM_CENTRIC_LIST
-  var bigLumpVirtualServer = new BigLumpVirtualServer(fileContentString);
-  var world = new World(bigLumpVirtualServer);
-  
-  // See if the BigLumpVirtualServer can save items to a
-  // string containing dehydrated items in the 
-  // format of a 2005_APRIL_CHRONOLOGICAL_LIST
-  var dehydratedWorld = bigLumpVirtualServer.__getJsonStringRepresentingEntireWorld();
-  
-  // See if the BigLumpVirtualServer can rehydrate all the
-  // dehydrated items from an 2005_APRIL_CHRONOLOGICAL_LIST
-  // PENDING:
-  // var secondBigLumpVirtualServer = new BigLumpVirtualServer(dehydratedWorld);
-  // var secondWorld = new World(secondBigLumpVirtualServer);
-  
-  // bigLumpVirtualServer.saveChangesToServer(true);
-}
-*/
-
 function tearDown() {
   ModelTestVars = null;
 }

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-22 05:00:23 UTC (rev 170)
+++ trunk/source/model/StubVirtualServer.js	2005-06-22 22:32:12 UTC (rev 171)
@@ -45,23 +45,23 @@
 // DeltaVirtualServer public class constants
 // -------------------------------------------------------------------
 StubVirtualServer.JSON_MEMBER_FORMAT = "format";
-StubVirtualServer.JSON_MEMBER_TIMESTAMP = "timestamp";
-StubVirtualServer.JSON_MEMBER_DATA = "data";
+// StubVirtualServer.JSON_MEMBER_TIMESTAMP = "timestamp";
+// StubVirtualServer.JSON_MEMBER_DATA = "data";
 StubVirtualServer.JSON_MEMBER_RECORDS = "records";
-StubVirtualServer.JSON_MEMBER_USERS = "users";
+// StubVirtualServer.JSON_MEMBER_USERS = "users";
 
-StubVirtualServer.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
-StubVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
-StubVirtualServer.JSON_FORMAT_2005_MAY_RECORDS = "2005_MAY_CHRONOLOGICAL_LIST";
-StubVirtualServer.JSON_FORMAT_2005_MAY_USERS = "2005_MAY_USER_LIST";
+// StubVirtualServer.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
+// StubVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
+// StubVirtualServer.JSON_FORMAT_2005_MAY_RECORDS = "2005_MAY_CHRONOLOGICAL_LIST";
+// StubVirtualServer.JSON_FORMAT_2005_MAY_USERS = "2005_MAY_USER_LIST";
 StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS = "2005_JUNE_CHRONOLOGICAL_LIST";
 
 StubVirtualServer.JSON_MEMBER_TYPE = "type";
 StubVirtualServer.JSON_MEMBER_VALUE = "value";
 
 StubVirtualServer.JSON_TYPE_TEXT_VALUE = "TextValue";
-StubVirtualServer.JSON_TYPE_UUID = "Uuid";
-StubVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
+// StubVirtualServer.JSON_TYPE_UUID = "Uuid";
+// StubVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
 StubVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
 StubVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
 StubVirtualServer.JSON_TYPE_DATE_VALUE = "DateValue";
@@ -70,17 +70,19 @@
 StubVirtualServer.JSON_TYPE_CONNECTION = "Connection";
 
 StubVirtualServer.JSON_MEMBER_UUID = "uuid";
+StubVirtualServer.JSON_MEMBER_USER = "user";
 StubVirtualServer.JSON_MEMBER_PASSWORD = "password";
 
 StubVirtualServer.JSON_MEMBER_ITEM_CLASS = "Item";
 StubVirtualServer.JSON_MEMBER_ENTRY_CLASS = "Entry";
 StubVirtualServer.JSON_MEMBER_VOTE_CLASS = "Vote";
 StubVirtualServer.JSON_MEMBER_ORDINAL_CLASS = "Ordinal";
+StubVirtualServer.JSON_MEMBER_USER_CLASS = "User";
 StubVirtualServer.JSON_MEMBER_TRANSACTION_CLASS = "Transaction";
 
 StubVirtualServer.JSON_MEMBER_ATTRIBUTE = "attribute";
 StubVirtualServer.JSON_MEMBER_PREVIOUS_VALUE = "previousEntry";
-StubVirtualServer.JSON_MEMBER_USERSTAMP = "userstamp";
+// StubVirtualServer.JSON_MEMBER_USERSTAMP = "userstamp";
 StubVirtualServer.JSON_MEMBER_RECORD = "record";
 StubVirtualServer.JSON_MEMBER_ITEM = "item";
 StubVirtualServer.JSON_MEMBER_RETAIN_FLAG = "retainFlag";
@@ -560,8 +562,6 @@
   // implement this method such that it saves changes to the server
   var listOfChangesMade = this._currentTransaction.getRecords();
   this._currentTransaction = null;
-  // var listOfChangesMade = this.__myChronologicalListOfNewlyCreatedRecords;
-  // this.__myChronologicalListOfNewlyCreatedRecords = [];
   return listOfChangesMade;
 };
   
@@ -773,7 +773,6 @@
     item._initialize();
     this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
     this._currentTransaction.addRecord(item);
-    // this.__myChronologicalListOfNewlyCreatedRecords.push(item);
   }
   return item;
 };
@@ -800,131 +799,6 @@
   Util.assert(Util.isArray(listOfRecords));
   
   this._rehydrateRecords(listOfRecords);
-  
-/* PENDING  
-  var uuid;
-  var name;
-  var item;
-  var entry;
-  var key;
-  
-  this.__myWorld.beginTransaction();
-  var axiomaticUser = this._getItemFromUuidOrCreateNewItem(World.UUID_FOR_USER_AMY);
-  this.__myListOfUsers.push(axiomaticUser);
-  this.__myHashTableOfUserAuthenticationInfo[axiomaticUser.getUniqueKeyString()] = null;
-  this.__myCurrentUser = axiomaticUser;
-  
-  // associate display names with the UUIDs of all the attributes
-  var hashTableOfAttributeNamesKeyedByUuid = {};
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_NAME]          = "Name";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SHORT_NAME]    = "Short Name";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SUMMARY]       = "Summary";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY]          = "Body";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY]      = "Category";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY]         = "Query";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE] = "Matching Value";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE] = "Matching Attribute";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED]       = "Unfiled Entry";
-  hashTableOfAttributeNamesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE] = "Expected Type";
-
-  // create all the Item objects for the attributes
-  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
-    this._getItemFromUuidOrCreateNewItem(uuid);
-  }
-  
-  // associate display names with the UUIDs of all the categories
-  var hashTableOfCategoryNamesKeyedByUuid = {};
-  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_ATTRIBUTE] = "Attribute";
-  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_CATEGORY]  = "Category";
-  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_QUERY]     = "Query";
-  hashTableOfCategoryNamesKeyedByUuid[World.UUID_FOR_CATEGORY_TYPE]      = "Type";
-
-  // create all the Item objects for the categories
-  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
-    this._getItemFromUuidOrCreateNewItem(uuid);
-  }
- 
-  // associate display names with the UUIDs of all the types
-  var hashTableOfTypeNamesKeyedByUuid = {};
-  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_TEXT]       = "Text";
-  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_NUMBER]     = "Number";
-  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_DATE]       = "Date";
-  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_CHECK_MARK] = "Check Mark";
-  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_URL]        = "Url";
-  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_ITEM]       = "Item";
-  hashTableOfTypeNamesKeyedByUuid[World.UUID_FOR_TYPE_ANYTHING]   = "Anything";
-  
-  // create all the Item objects for the types
-  for (uuid in hashTableOfTypeNamesKeyedByUuid) {
-    this._getItemFromUuidOrCreateNewItem(uuid);
-  }
-  
-  // associate expected data types with the UUIDs of some of the attributes
-  var hashTableOfExpectedTypesKeyedByUuid = {};
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_NAME]          = [World.UUID_FOR_TYPE_TEXT];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SHORT_NAME]    = [World.UUID_FOR_TYPE_TEXT];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_SUMMARY]       = [World.UUID_FOR_TYPE_TEXT];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_BODY]          = [World.UUID_FOR_TYPE_TEXT];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_CATEGORY]      = [World.UUID_FOR_CATEGORY_CATEGORY];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY]         = [World.UUID_FOR_CATEGORY_QUERY];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE] = [World.UUID_FOR_CATEGORY_CATEGORY];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE] = [World.UUID_FOR_TYPE_ITEM];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_UNFILED]       = [World.UUID_FOR_TYPE_ANYTHING];
-  hashTableOfExpectedTypesKeyedByUuid[World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE] = [World.UUID_FOR_CATEGORY_TYPE, World.UUID_FOR_CATEGORY_CATEGORY];
-
-  var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
-
-  // set the name of the axiomaticUser
-  axiomaticUser.addEntryForAttribute(attributeCalledName, "Amy ex machina");
-  
-  // set the names of all the attributes, 
-  // and put them in the category called "Attribute"
-  // and set their expected data types
-  var categoryCalledAttribute = this.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
-  var attributeCalledCategory = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
-  var attributeCalledExpectedType = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
-  for (uuid in hashTableOfAttributeNamesKeyedByUuid) {
-    item = this.getItemFromUuid(uuid);
-    name = hashTableOfAttributeNamesKeyedByUuid[uuid];
-    item.addEntryForAttribute(attributeCalledName, name);
-    item.addEntryForAttribute(attributeCalledCategory, categoryCalledAttribute);
-    var listOfExpectedTypes = hashTableOfExpectedTypesKeyedByUuid[uuid];
-    for (key in listOfExpectedTypes) {
-      var uuidOfExpectedType = listOfExpectedTypes[key];
-      expectedType = this.getItemFromUuid(uuidOfExpectedType);
-      item.addEntryForAttribute(attributeCalledExpectedType, expectedType);
-    }
-  }
-  
-  // set the names of all the categories, and put them in the category called "Category"
-  var categoryCalledCategory = this._getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_CATEGORY);
-  for (uuid in hashTableOfCategoryNamesKeyedByUuid) {
-    item = this.getItemFromUuid(uuid);
-    name = hashTableOfCategoryNamesKeyedByUuid[uuid];
-    item.addEntryForAttribute(attributeCalledName, name);
-    item.addEntryForAttribute(attributeCalledCategory, categoryCalledCategory);
-  }
-
-  // set the names of all the types, and put them in the category called "Type"
-  var categoryCalledType = this._getItemFromUuidOrCreateNewItem(World.UUID_FOR_CATEGORY_TYPE);
-  for (uuid in hashTableOfTypeNamesKeyedByUuid) {
-    item = this.getItemFromUuid(uuid);
-    name = hashTableOfTypeNamesKeyedByUuid[uuid];
-    item.addEntryForAttribute(attributeCalledName, name);
-    item.addEntryForAttribute(attributeCalledCategory, categoryCalledType);
-  }
-
-  this.__myCurrentUser = null;
-
-  var listOfNewlyCreatedRecords = this._currentTransaction.getRecords();
-  for (key in listOfNewlyCreatedRecords) {
-    var newRecord = listOfNewlyCreatedRecords[key];
-    this.__myChronologicalListOfRecords.push(newRecord);
-  }
-  this._currentTransaction._listOfRecords = [];
-  this.__myWorld.endTransaction();
-  return listOfNewlyCreatedRecords;
- */
 };
 
 
@@ -1033,7 +907,7 @@
   var item;
   var contentRecordUuid;
   var contentRecord;
-  
+
   for (key in inListOfRecords) {
     var dehydratedRecord = inListOfRecords[key];
 
@@ -1043,17 +917,25 @@
       this._rehydrateRecords(listOfRecordsInTransaction);
     } else {
       var dehydratedItem = dehydratedRecord[StubVirtualServer.JSON_MEMBER_ITEM_CLASS];
+      var dehydratedUser = dehydratedRecord[StubVirtualServer.JSON_MEMBER_USER_CLASS];
       var dehydratedVote = dehydratedRecord[StubVirtualServer.JSON_MEMBER_VOTE_CLASS];
       var dehydratedOrdinal = dehydratedRecord[StubVirtualServer.JSON_MEMBER_ORDINAL_CLASS];
       var dehydratedEntry = dehydratedRecord[StubVirtualServer.JSON_MEMBER_ENTRY_CLASS];
-  
-      var contents = dehydratedItem || dehydratedVote || dehydratedOrdinal || dehydratedEntry;
-      
+        
       if (dehydratedItem) {
         itemUuid = dehydratedItem[StubVirtualServer.JSON_MEMBER_UUID];
         item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
         this.__myChronologicalListOfRecords.push(item);
       }
+      
+      if (dehydratedUser) {
+        var userUuid = dehydratedUser[StubVirtualServer.JSON_MEMBER_USER];
+        var userPasswordHash = dehydratedUser[StubVirtualServer.JSON_MEMBER_PASSWORD];
+        var user = this.__getItemFromUuidOrBootstrapItem(userUuid);
+        this.__myListOfUsers.push(user);
+        this.__myHashTableOfUserAuthenticationInfo[user.getUniqueKeyString()] = userPasswordHash;
+      }
+      
       if (dehydratedVote) {
         var voteUuid = dehydratedVote[StubVirtualServer.JSON_MEMBER_UUID];
         var retainFlagString = dehydratedVote[StubVirtualServer.JSON_MEMBER_RETAIN_FLAG];
@@ -1070,6 +952,7 @@
         var vote = new Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
         this.__myChronologicalListOfRecords.push(vote);
       }
+      
       if (dehydratedOrdinal) {
         var ordinalUuid = dehydratedOrdinal[StubVirtualServer.JSON_MEMBER_UUID];
         var ordinalNumber = dehydratedOrdinal[StubVirtualServer.JSON_MEMBER_ORDINAL_NUMBER];
@@ -1078,6 +961,7 @@
         var ordinal = new Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
         this.__myChronologicalListOfRecords.push(ordinal);
       }
+      
       if (dehydratedEntry) {
         var entryUuid = dehydratedEntry[StubVirtualServer.JSON_MEMBER_UUID];
         var entry = this.__getEntryFromUuidOrBootstrapEntry(entryUuid);
@@ -1137,6 +1021,7 @@
         }
         this.__myChronologicalListOfRecords.push(entry);
       }
+      
     }
   }
 };

Deleted: trunk/source/model/replace_user_file.php
===================================================================
--- trunk/source/model/replace_user_file.php	2005-06-22 05:00:23 UTC (rev 170)
+++ trunk/source/model/replace_user_file.php	2005-06-22 22:32:12 UTC (rev 171)
@@ -1,22 +0,0 @@
-<?php
-$filename = "../repositories/demo_page/2005_may_user_list.json";
-$contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
-if (is_writable($filename)) {
-  echo "$filename is writable.";
-  if ($fileHandle = fopen($filename, "wb")) { /* wb == write in binary mode */
-    if (fwrite($fileHandle, $contentToWrite)) {
-      echo "Replaced contents of file ($filename)";
-      fclose($fileHandle);
-    } else {
-      echo "Unable to write to file ($filename)";
-      exit;
-    }
-  } else {
-    echo "Unable to open file: $filename";
-    exit("Unable to open file."); 
-  }
-} else {
-  echo "The file $filename is not writable.";
-}
-?>
-

Deleted: trunk/source/repositories/demo_page/2005_may_user_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_may_user_list.json	2005-06-22 05:00:23 UTC (rev 170)
+++ trunk/source/repositories/demo_page/2005_may_user_list.json	2005-06-22 22:32:12 UTC (rev 171)
@@ -1,9 +0,0 @@
-// User list, in JSON format
-{ "format": "2005_MAY_USER_LIST", 
-  "users": [
-    { "uuid": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae", "password": "92eb5ffee6ae2fec3ad71c777531578f" },
-    { "uuid": "90e02170-dde4-11d9-9c71-e24829d2f59b", "password": null },
-    { "uuid": "97d040f0-dde4-11d9-9c71-c103016080e1", "password": null },
-    { "uuid": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f", "password": null },
-    { "uuid": "a00bf340-dde4-11d9-9c71-dae11c269bc7", "password": null } ]
-}



From chaolam at sheep.berlios.de  Thu Jun 23 22:42:41 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 23 Jun 2005 22:42:41 +0200
Subject: [openrecord-svn] r172 - in trunk: documentation source source/model
Message-ID: <200506232042.j5NKgfsl015833@sheep.berlios.de>

Author: chaolam
Date: 2005-06-23 22:42:41 +0200 (Thu, 23 Jun 2005)
New Revision: 172

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
Fixed bug that writes to repository when no user is logged in.
Cleaned up some UI navigation issues per Mimi's feedback

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-22 22:32:12 UTC (rev 171)
+++ trunk/documentation/release_planning.txt	2005-06-23 20:42:41 UTC (rev 172)
@@ -184,12 +184,12 @@
 mignon |          | done    | 24. Display Navbar pages in the right order
 chao   |          | done?   | 25. Arrow keys in SuggestionBox
        |          |         | 26. Arrow keys in Table View
-       |          |         | 27. Change UI so that non-literal entries are immutable
+chao   |1.5 IED   |         | 27. Change UI so that non-literal entries are immutable
        |          |         | 28. Implement a good URL-to-content mapping, such that URLs won't go bad in future releases
        |          |         | 29. Convert UI code from DOM level 0 to DOM level 2
        |          |         | 30. Have identifiedRecord.getTimestamp() get the time from the UUID 
 -------+----------+---------+----------------------------------------------
-       |          |         | 31. Wire up observers & keep views in sync
+chao   |0.5 IED   |         | 31. Wire up observers & keep views in sync
        |          |         | 32. improve UI for adding an attribute to an item
        |          |         | 33. improve UI for setting the expected data type of an attribute
        |          |         | 34. improve UI for creating a new category
@@ -226,6 +226,7 @@
 chao   | 0.5 IED  | 0.5 IED | Improved UI for autocomplete
 chao   | 0.5 IED  | 0.5 IED | Allow plugins to store layout data
 chao   | 0.5 IED  | 0.5 IED | Table plugin persists column order
+chao   | 0.5 IED  |         | Improve UI for navigating between cells and autocomplete
        
 
 
@@ -456,3 +457,4 @@
 + BUG: need to convert HTML entity codes back at client-server layer
 + Task: Rename ORlugin to PluginView
 + BUG: Can't really create own plugins yet (e.g. UUID need to be assigned, plugin item created)
++ Q: Do we (and how) need a concept of focus for Views? Currently, only Text input and Textarea gets keyboard focus. We need it for table selections and possibly selecting "lozenges" (item references stored in the TextView)
\ No newline at end of file

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-22 22:32:12 UTC (rev 171)
+++ trunk/source/TablePlugin.js	2005-06-23 20:42:41 UTC (rev 172)
@@ -119,9 +119,7 @@
   var entriesTableColumns = this._layout.getEntriesForAttribute(attrTableColumns);
   var displayAttrs = [];
   var anAttribute;
-  var useLayoutData = (entriesTableColumns) && (entriesTableColumns.length > 1 ||
-    (entriesTableColumns.length ==1 && entriesTableColumns[0].getValue() != repository.getAttributeCalledName()));
-  if (useLayoutData) {
+  if (entriesTableColumns.length > 0) {
     this._hashTableOfEntries = {};
     for (var i=0;i<entriesTableColumns.length;++i) {
       anAttribute = entriesTableColumns[i].getValue();
@@ -132,12 +130,10 @@
     }
   }
   else {
-    if (entriesTableColumns.length == 1) {entriesTableColumns[0].voteToDelete();}
     var hashTableOfAttributes = this._buildAttributeHashFromScratch();
     for (var key in hashTableOfAttributes) {
       anAttribute = hashTableOfAttributes[key];
       displayAttrs.push(anAttribute);
-      this._layout.addEntryForAttribute(attrTableColumns,anAttribute,repository.getTypeCalledItem());
     }
   }
   this._displayAttributes = displayAttrs;
@@ -562,15 +558,15 @@
   
   var move = null;
   switch (asciiValueOfKey) {
-    case Util.ASCII_VALUE_FOR_LEFT_ARROW:
+/*    case Util.ASCII_VALUE_FOR_LEFT_ARROW:
       move = MOVE_LEFT;
-      break;
+      break;*/
     case Util.ASCII_VALUE_FOR_UP_ARROW:
       move = MOVE_UP;
       break;
-    case Util.ASCII_VALUE_FOR_RIGHT_ARROW:
+/*    case Util.ASCII_VALUE_FOR_RIGHT_ARROW:
       move = MOVE_RIGHT;
-      break;
+      break;*/
     case Util.ASCII_VALUE_FOR_DOWN_ARROW:
       move = MOVE_DOWN;
       break;

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-22 22:32:12 UTC (rev 171)
+++ trunk/source/TextView.js	2005-06-23 20:42:41 UTC (rev 172)
@@ -552,6 +552,7 @@
   this._myInputField = inHTMLInputField;
   this._listOfSuggestedItems = listOfItems.sort(AttributeSuggestionBox._compareItemDisplayNames);
   this._selectedItem = null;
+  this._shouldHide = inHTMLInputField.value.length === 0;
   
   this._myAttributeSuggestionBoxDivElement = document.createElement('div');
   // this._myAttributeSuggestionBoxDivElement.style.visibility = "hidden";
@@ -712,7 +713,7 @@
  *
  */
 AttributeSuggestionBox.prototype._redisplayAttributeSuggestionBox = function () {
-  if (this._shouldHide) {return;} // if SuggestionBox is in hide mode, don't show the box
+  //if (this._shouldHide) {return;} // if SuggestionBox is in hide mode, don't show the box
   
   var partialInputString = this._myInputField.value;
   var listOfMatchingItems = [];
@@ -732,7 +733,7 @@
   }
   this._listOfMatchingItems = listOfMatchingItems;
 
-  if (listOfMatchingItems.length === 0) {
+  if (this._shouldHide || listOfMatchingItems.length === 0) {
     // make the suggestion box disappear
     this._myAttributeSuggestionBoxDivElement.style.display = "none";
   } else {

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-22 22:32:12 UTC (rev 171)
+++ trunk/source/model/StubVirtualServer.js	2005-06-23 20:42:41 UTC (rev 172)
@@ -417,39 +417,6 @@
 
 
 /**
- *
- */
-StubVirtualServer.prototype.getItemsOfCategory = function (inCategory) {
-  var listOfItems = [];
-  for (var key in this.__myHashTableOfItemsKeyedByUuid) {
-    var item = this.__myHashTableOfItemsKeyedByUuid[key];
-    if (item.isInCategory(inCategory)) {
-      listOfItems.push(item);
-    }
-  }
-  return listOfItems;
-};
-
-
-/**
- *
- */
-StubVirtualServer.prototype.getCategories = function () {
-  var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
-  return this.getItemsOfCategory(categoryCalledCategory);
-};
-
-
-/**
- *
- */
-StubVirtualServer.prototype.getAttributes = function () {
-  var categoryCalledAttribute = this.getWorld().getCategoryCalledAttribute();
-  return this.getItemsOfCategory(categoryCalledAttribute);
-};
-
-
-/**
  * Returns an item representing the user who is currently logged in.
  *
  * @scope    public instance method

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-22 22:32:12 UTC (rev 171)
+++ trunk/source/model/World.js	2005-06-23 20:42:41 UTC (rev 172)
@@ -805,8 +805,9 @@
  */
 World.prototype.getItemsInCategory = function(category, observer) {
   var listOfItems = this._virtualServer.getItemsInCategory(category);
+  // listOfItems = this._getFilteredList(listOfItems); PENDING: not sure if I should call this?
   this.__addListObserver(listOfItems, observer);
-  return listOfItems;
+  return (listOfItems);
 };
 
 
@@ -816,9 +817,9 @@
  * @scope    public instance method
  * @return   A list of items that represent categories.
  */
-World.prototype.getCategories = function() {
-  var listOfCategories = this._virtualServer.getCategories();
-  return this._getFilteredList(listOfCategories);
+World.prototype.getCategories = function(observer) {
+  var categoryCalledCategory = this.getCategoryCalledCategory();
+  return this.getItemsInCategory(categoryCalledCategory, observer);
 };
 
 /**
@@ -827,15 +828,15 @@
  * @scope    public instance method
  * @return   A list of items that represent attributes.
  */
-World.prototype.getAttributes = function() {
-  var listOfAttributes = this._virtualServer.getAttributes();
-  return this._getFilteredList(listOfAttributes);
+World.prototype.getAttributes = function(observer) {
+  var categoryCalledAttribute = this.getCategoryCalledAttribute();
+  return this.getItemsInCategory(categoryCalledAttribute, observer);
 };
 
 /**
  *
  */
-World.prototype.getSuggestedItemsForAttribute = function(attribute) {
+World.prototype.getSuggestedItemsForAttribute = function(attribute, observer) {
   var listOfSuggestedItems = [];
   var key;
   var categoryCalledCategory = this.getCategoryCalledCategory();
@@ -858,6 +859,8 @@
       Util.addObjectToSet(item, listOfSuggestedItems);
     }
   }
+  this.__addListObserver(listOfSuggestedItems, observer);
+  
   // For no suggested items, TablePlugin expects an empty array rather than null 
   return listOfSuggestedItems;
 };



From skinner at sheep.berlios.de  Fri Jun 24 00:05:58 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 00:05:58 +0200
Subject: [openrecord-svn] r173 - in trunk: . source source/model source/repositories source/repositories/demo_page
Message-ID: <200506232205.j5NM5wtC029515@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 00:05:57 +0200 (Fri, 24 Jun 2005)
New Revision: 173

Added:
   trunk/dogfood.html
   trunk/dogfood.js
   trunk/source/repositories/demo_page.json
   trunk/source/repositories/dogfood.json
Removed:
   trunk/source/repositories/demo_page/2005_june_chronological_list.json
Modified:
   trunk/source/demo_page.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/append_to_repository_file.php
Log:
Set things up so that we can have one server installation that can serve N different pages, each one running against its own repository.  Created a new dogfood.html page and dogfood repository.

Added: trunk/dogfood.html
===================================================================
--- trunk/dogfood.html	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/dogfood.html	2005-06-23 22:05:57 UTC (rev 173)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>openrecord.org - Dogfood Page</title>
+    <link rel="stylesheet" type="text/css" href="source/base_style.css" />
+    <script type="text/javascript" src="third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="source/Util.js"></script>
+    <script type="text/javascript" src="source/Cookie.js"></script>
+
+    <script type="text/javascript" src="source/View.js"></script>
+    <script type="text/javascript" src="source/RootView.js"></script>
+    <script type="text/javascript" src="source/ItemView.js"></script>
+    <script type="text/javascript" src="source/PageView.js"></script>
+    <script type="text/javascript" src="source/SectionView.js"></script>
+    <script type="text/javascript" src="source/LoginView.js"></script>
+    <script type="text/javascript" src="source/MultiEntriesView.js"></script>
+    <script type="text/javascript" src="source/NavbarView.js"></script>
+    <script type="text/javascript" src="source/TextView.js"></script>
+    <script type="text/javascript" src="source/PluginView.js"></script>
+    <script type="text/javascript" src="source/TablePlugin.js"></script>
+    <script type="text/javascript" src="source/OutlinePlugin.js"></script>
+    <script type="text/javascript" src="source/DetailPlugin.js"></script>
+    <script type="text/javascript" src="source/BarChartPlugin.js"></script>
+
+    <script type="text/javascript" src="source/model/Record.js"></script>
+    <script type="text/javascript" src="source/model/Ordinal.js"></script>
+    <script type="text/javascript" src="source/model/Vote.js"></script>
+    <script type="text/javascript" src="source/model/ContentRecord.js"></script>
+    <script type="text/javascript" src="source/model/Item.js"></script>
+    <script type="text/javascript" src="source/model/Entry.js"></script>
+    <script type="text/javascript" src="source/model/Transaction.js"></script>
+    <script type="text/javascript" src="source/model/World.js"></script>
+    <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
+    <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>
+    
+    <script type="text/javascript" src="dogfood.js"></script>
+  </head>
+  
+  <body>
+    <p>Sorry, the browser you're using doesn't support JavaScript. 
+    This page won't display correctly.</p>
+    
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+
+  </body>
+  
+</html>
+

Added: trunk/dogfood.js
===================================================================
--- trunk/dogfood.js	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/dogfood.js	2005-06-23 22:05:57 UTC (rev 173)
@@ -0,0 +1,86 @@
+/*****************************************************************************
+ dogfood_page.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   World.js
+//   RootView.js
+// -------------------------------------------------------------------
+
+/**
+ * Called when the window first loads. Calls all the functions that do 
+ * initialization when the page is loaded.
+ *
+ * @scope    global function
+ */
+window.doOnloadActions = function() {  
+  var repositoryName = "dogfood";
+  var deltaVirtualServer = new DeltaVirtualServer(repositoryName);
+  var world = new World(deltaVirtualServer);
+  window.rootView = new RootView(world);
+  
+  Util.setTargetsForExternalLinks();
+};
+
+
+/**
+ * Called when the user leaves the browser window.  Save any unsaved changes,
+ * and prepare to exit.
+ *
+ * @scope    global function
+ */
+window.doOnunloadActions = function() {
+  // world.saveChanges();
+};
+
+window.doOnfocusActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onfocus");
+};
+
+window.doOnblurActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onblur");
+};
+
+
+// -------------------------------------------------------------------
+// Register for window events
+// -------------------------------------------------------------------
+window.onload = window.doOnloadActions;
+window.onunload = window.doOnunloadActions;
+window.onerror = Util.handleError;
+window.onfocus = window.doOnfocusActions;
+window.onblur = window.doOnblurActions;
+// window.onresize = window.doOnresizeActions;
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/demo_page.js
===================================================================
--- trunk/source/demo_page.js	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/demo_page.js	2005-06-23 22:05:57 UTC (rev 173)
@@ -42,25 +42,9 @@
  * @scope    global function
  */
 window.doOnloadActions = function() {  
-  
-  var pathToDemoRepository = "repositories/demo_page/";
-  
-  var repositoryFileName = "2005_june_chronological_list.json";
-  var repositoryUrl = pathToDemoRepository + repositoryFileName;
-  var repositoryContentString = Util.getStringContentsOfFileAtURL(repositoryUrl);
-  repositoryContentString += " ] }";
-  
-  // var userListFileName = "2005_may_user_list.json";
-  // var userListUrl = pathToDemoRepository + userListFileName;
-  // var userListContentString = Util.getStringContentsOfFileAtURL(userListUrl);
-  
-  // Create a World and a DeltaVirtualServer, and have the 
-  // DeltaVirtualServer rehydrate all the dehydrated items 
-  // contained in the fileContentString.  
-  var axiomaticItemsFileName = "2005_june_axiomatic_items.json";
-  var axiomaticItemsUrl = "model/" + axiomaticItemsFileName;
-  
-  var deltaVirtualServer = new DeltaVirtualServer(axiomaticItemsUrl, repositoryContentString);
+  var pathToTrunkDirectory = "../";
+  var repositoryName = "demo_page";
+  var deltaVirtualServer = new DeltaVirtualServer(repositoryName, pathToTrunkDirectory);
   var world = new World(deltaVirtualServer);
   window.rootView = new RootView(world);
   

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-23 22:05:57 UTC (rev 173)
@@ -48,9 +48,20 @@
  * @param    inJsonRepositoryString    A JSON string literal representing the world of items. 
  */
 DeltaVirtualServer.prototype = new StubVirtualServer();  // makes DeltaVirtualServer be a subclass of StubVirtualServer
-function DeltaVirtualServer(inJsonAxiomsFileURL, inJsonRepositoryString) {
-  this._myDehydratedAxiomFileURL = inJsonAxiomsFileURL;
-  this._myDehydratedWorld = inJsonRepositoryString;
+function DeltaVirtualServer(repositoryName, pathToTrunkDirectory) {
+
+  this._pathToTrunkDirectory = "";
+  if (pathToTrunkDirectory) {
+    this._pathToTrunkDirectory = pathToTrunkDirectory;
+  }
+  
+  var axiomaticFileName = "2005_june_axiomatic_items.json";
+  var urlForAxiomaticFile = this._pathToTrunkDirectory + "source/model/" + axiomaticFileName;
+  
+  this._myDehydratedAxiomFileURL = urlForAxiomaticFile;  
+  
+  this._repositoryName = repositoryName;
+  
   this._myHasEverFailedToSaveFlag = false;
 }
 
@@ -66,7 +77,14 @@
   this._initialize(inWorld);
   this._buildTypeHashTable();
   this._loadAxiomaticItemsFromFileAtURL(this._myDehydratedAxiomFileURL);
-  this._loadWorldFromJsonString(this._myDehydratedWorld);
+
+  var pathToRepositoryDirectory = "source/repositories/";
+  var repositoryFileName = this._repositoryName + ".json";
+  var repositoryUrl = this._pathToTrunkDirectory + pathToRepositoryDirectory + repositoryFileName;
+  var repositoryContentString = Util.getStringContentsOfFileAtURL(repositoryUrl);
+  repositoryContentString += " ] }";
+
+  this._loadWorldFromJsonString(repositoryContentString);
 };
 
 // -------------------------------------------------------------------
@@ -335,7 +353,7 @@
   }
 
   if (saveChanges) {
-    var url = "model/append_to_repository_file.php";
+    var url = this._pathToTrunkDirectory + "source/model/append_to_repository_file.php?file=" + this._repositoryName;
     var textToAppend = ",\n" + this._getJsonStringRepresentingTransaction(currentTransaction);
     var asynchronous;
     asynchronous = true;

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/model/ModelTest.js	2005-06-23 22:05:57 UTC (rev 173)
@@ -34,9 +34,8 @@
 function setUp() {
   ModelTestVars = {};
 
-  var fileName = "2005_june_axiomatic_items.json";
-  var url = "../../../source/model/" + fileName;
-  var stubVirtualServer = new StubVirtualServer(url);
+  var pathToTrunkDirectory = "../../../";
+  var stubVirtualServer = new StubVirtualServer(pathToTrunkDirectory);
   world = new World(stubVirtualServer);
 }
 
@@ -76,7 +75,6 @@
 }
 
 function testGetTimestamp() {
-  // var world = new World();
   var tZero = new Date();
   var janesPassword = "jane's password";
   waitForNextMillisecond();
@@ -98,7 +96,6 @@
 }
 
 function testLoginLogout() {
-  // var world = new World();
   var listOfUsers;
   var loginSuccess;
   
@@ -156,7 +153,6 @@
 function testAccessorsForAxiomaticItems() {
   var key;
   var item;
-  // var world = new World();
   var listOfAssignedNames;
   var nameEntry;
   
@@ -191,7 +187,6 @@
 
   
 function noyet_testAdditionsAndRetrievals() {
-  // var world = new World();
   var nameAttribute = world.getAttributeCalledName();
   
   var janesPassword = "jane's password";
@@ -302,7 +297,6 @@
 
 
 function testCategories() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -343,7 +337,6 @@
 /*
 PENDING: the ordinal implementation was broken by the new UUID code
 function testOrdinals() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -387,7 +380,6 @@
 */
   
 function testDeletion() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -408,7 +400,6 @@
 
 
 function testItemObservation() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -465,7 +456,6 @@
 
 
 function testListObservation() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -518,7 +508,6 @@
 
 
 function testQueries() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);
@@ -600,7 +589,6 @@
 Tests World._getFilteredList, via World.getUsers and World.getCategories.
 */
 function testFilteredLists() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);  
   var listOfUsers = world.getUsers();
@@ -620,7 +608,6 @@
 }
 
 function testItemTypes() {
-  // var world = new World();
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
   world.login(userJane, janesPassword);

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/model/StubVirtualServer.js	2005-06-23 22:05:57 UTC (rev 173)
@@ -95,8 +95,15 @@
  *
  * @scope    public instance constructor
  */
-function StubVirtualServer(inJsonAxiomsFileURL) {
-  this._myDehydratedAxiomFileURL = inJsonAxiomsFileURL;
+function StubVirtualServer(pathToTrunkDirectory) {
+  var fileName = "2005_june_axiomatic_items.json";
+  var urlForAxiomaticFile = "";
+  if (pathToTrunkDirectory) {
+    urlForAxiomaticFile = pathToTrunkDirectory;
+  }
+  urlForAxiomaticFile += "source/model/" + fileName;
+  
+  this._myDehydratedAxiomFileURL = urlForAxiomaticFile;
 }
 
 
@@ -115,7 +122,6 @@
   this.__myHashTableOfItemsKeyedByUuid = {};
   this.__myHashTableOfEntriesKeyedByUuid = {};
   this.__myChronologicalListOfRecords = [];
-  // this.__myChronologicalListOfNewlyCreatedRecords = [];
   
   this.__myListOfUsers = [];
   this.__myHashTableOfUserAuthenticationInfo = {};
@@ -359,7 +365,6 @@
 StubVirtualServer.prototype.newVote = function (inContentRecord, inRetainFlag) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
-  // var vote = new Vote(inContentRecord, this.__myWorld.getCurrentUser(), inRetainFlag);
   var vote = new Vote(this.__myWorld, uuid, inContentRecord, inRetainFlag);
   this._currentTransaction.addRecord(vote);
   return vote;

Modified: trunk/source/model/append_to_repository_file.php
===================================================================
--- trunk/source/model/append_to_repository_file.php	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/model/append_to_repository_file.php	2005-06-23 22:05:57 UTC (rev 173)
@@ -1,22 +1,34 @@
 <?php
-$filename = "../repositories/demo_page/2005_june_chronological_list.json";
 $contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
-if (is_writable($filename)) {
-  echo "$filename is writable.";
-  if ($fileHandle = fopen($filename, "ab")) { /* ab == append in binary mode */
+
+$url_of_this_php_script = $_SERVER['REQUEST_URI'];
+$array_of_url_parts = explode("?", $url_of_this_php_script);
+$search_part = $array_of_url_parts[1];
+$array_of_search_parts = explode("=", $search_part);
+$file_name_parameter = $array_of_search_parts[1];
+$array_of_file_name_parameter_parts = explode("/", $file_name_parameter);
+$safe_file_name_with_no_path_exploits = $array_of_file_name_parameter_parts[0];
+
+$file_path = "../repositories/";
+$file_suffix = ".json";
+$repository_file_name = $file_path . $safe_file_name_with_no_path_exploits . $file_suffix;
+
+if (is_writable($repository_file_name)) {
+  echo "$repository_file_name is writable.";
+  if ($fileHandle = fopen($repository_file_name, "ab")) { /* ab == append in binary mode */
     if (fwrite($fileHandle, $contentToWrite)) {
       fclose($fileHandle);
-      echo "Appended to file ($filename)";
+      echo "Appended to file ($repository_file_name)";
     } else {
-      echo "Unable to write to file ($filename)";
+      echo "Unable to write to file ($repository_file_name)";
       exit;
     }
   } else {
-    echo "Unable to open file: $filename";
+    echo "Unable to open file: $repository_file_name";
     exit("Unable to open file."); 
   }
 } else {
-  echo "The file $filename is not writable.";
+  echo "The file $repository_file_name is not writable.";
 }
 ?>
 

Deleted: trunk/source/repositories/demo_page/2005_june_chronological_list.json
===================================================================
--- trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/repositories/demo_page/2005_june_chronological_list.json	2005-06-23 22:05:57 UTC (rev 173)
@@ -1,42 +0,0 @@
-// Repository records, in JSON format
-{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", 
-  "records": [
-  // =======================================================================
-  { "Transaction": [  // Home Page  
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Welcome to the OpenRecord d...
-             "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Page
-             "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "RelatedUuid",
-            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // 1. Welcome!
-             "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "TextValue",
-            "value": "1. Welcome!" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Welcome to the OpenRecord d...
-             "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "TextValue",
-            "value": "Welcome to the OpenRecord demo!" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // This web site is a demo of ...
-             "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "TextValue",
-            "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
-    } ]
-  }
\ No newline at end of file

Added: trunk/source/repositories/demo_page.json
===================================================================
--- trunk/source/repositories/demo_page.json	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/repositories/demo_page.json	2005-06-23 22:05:57 UTC (rev 173)
@@ -0,0 +1,42 @@
+// Repository records, in JSON format
+{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", 
+  "records": [
+  // =======================================================================
+  { "Transaction": [  // Home Page  
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Welcome to the OpenRecord d...
+             "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Page
+             "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "RelatedUuid",
+            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // 1. Welcome!
+             "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "TextValue",
+            "value": "1. Welcome!" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Welcome to the OpenRecord d...
+             "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "TextValue",
+            "value": "Welcome to the OpenRecord demo!" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // This web site is a demo of ...
+             "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "type": "TextValue",
+            "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
+    } ]
+  }
\ No newline at end of file

Added: trunk/source/repositories/dogfood.json
===================================================================
--- trunk/source/repositories/dogfood.json	2005-06-23 20:42:41 UTC (rev 172)
+++ trunk/source/repositories/dogfood.json	2005-06-23 22:05:57 UTC (rev 173)
@@ -0,0 +1,42 @@
+// Repository records, in JSON format
+{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", 
+  "records": [
+  // =======================================================================
+  { "Transaction": [  // Home Page  
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // The OpenRecord Dogfood Site
+             "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Page
+             "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "type": "RelatedUuid",
+            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Dogfood
+             "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "type": "TextValue",
+            "value": "Dogfood" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // The OpenRecord Dogfood Site
+             "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "type": "TextValue",
+            "value": "The OpenRecord Dogfood Site" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // This web site is a demo of ...
+             "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "type": "TextValue",
+            "value": "This web site is where people working on OpenRecord keep track of the work being done." }
+    } ]
+  }
\ No newline at end of file



From skinner at sheep.berlios.de  Fri Jun 24 00:12:39 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 00:12:39 +0200
Subject: [openrecord-svn] r174 - in trunk: . source
Message-ID: <200506232212.j5NMCdYP032470@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 00:12:39 +0200 (Fri, 24 Jun 2005)
New Revision: 174

Added:
   trunk/demo_page.html
   trunk/demo_page.js
Removed:
   trunk/source/demo_page.html
   trunk/source/demo_page.js
   trunk/source/save_changes.php
Modified:
   trunk/dogfood.js
Log:
Moved demo_page.html out of the /source directory and up into the /trunk directory.  Other minor clean-up too.

Added: trunk/demo_page.html
===================================================================
--- trunk/demo_page.html	2005-06-23 22:05:57 UTC (rev 173)
+++ trunk/demo_page.html	2005-06-23 22:12:39 UTC (rev 174)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>openrecord.org - Demo Page</title>
+    <link rel="stylesheet" type="text/css" href="source/base_style.css" />
+    <script type="text/javascript" src="third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="source/Util.js"></script>
+    <script type="text/javascript" src="source/Cookie.js"></script>
+
+    <script type="text/javascript" src="source/View.js"></script>
+    <script type="text/javascript" src="source/RootView.js"></script>
+    <script type="text/javascript" src="source/ItemView.js"></script>
+    <script type="text/javascript" src="source/PageView.js"></script>
+    <script type="text/javascript" src="source/SectionView.js"></script>
+    <script type="text/javascript" src="source/LoginView.js"></script>
+    <script type="text/javascript" src="source/MultiEntriesView.js"></script>
+    <script type="text/javascript" src="source/NavbarView.js"></script>
+    <script type="text/javascript" src="source/TextView.js"></script>
+    <script type="text/javascript" src="source/PluginView.js"></script>
+    <script type="text/javascript" src="source/TablePlugin.js"></script>
+    <script type="text/javascript" src="source/OutlinePlugin.js"></script>
+    <script type="text/javascript" src="source/DetailPlugin.js"></script>
+    <script type="text/javascript" src="source/BarChartPlugin.js"></script>
+
+    <script type="text/javascript" src="source/model/Record.js"></script>
+    <script type="text/javascript" src="source/model/Ordinal.js"></script>
+    <script type="text/javascript" src="source/model/Vote.js"></script>
+    <script type="text/javascript" src="source/model/ContentRecord.js"></script>
+    <script type="text/javascript" src="source/model/Item.js"></script>
+    <script type="text/javascript" src="source/model/Entry.js"></script>
+    <script type="text/javascript" src="source/model/Transaction.js"></script>
+    <script type="text/javascript" src="source/model/World.js"></script>
+    <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
+    <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>
+    
+    <script type="text/javascript" src="demo_page.js"></script>
+  </head>
+  
+  <body>
+    <p>Sorry, the browser you're using doesn't support JavaScript. 
+    This page won't display correctly.</p>
+    
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+
+  </body>
+  
+</html>
+

Added: trunk/demo_page.js
===================================================================
--- trunk/demo_page.js	2005-06-23 22:05:57 UTC (rev 173)
+++ trunk/demo_page.js	2005-06-23 22:12:39 UTC (rev 174)
@@ -0,0 +1,86 @@
+/*****************************************************************************
+ demo_page.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   World.js
+//   RootView.js
+// -------------------------------------------------------------------
+
+/**
+ * Called when the window first loads. Calls all the functions that do 
+ * initialization when the page is loaded.
+ *
+ * @scope    global function
+ */
+window.doOnloadActions = function() {  
+  var repositoryName = "demo_page";
+  var deltaVirtualServer = new DeltaVirtualServer(repositoryName);
+  var world = new World(deltaVirtualServer);
+  window.rootView = new RootView(world);
+  
+  Util.setTargetsForExternalLinks();
+};
+
+
+/**
+ * Called when the user leaves the browser window.  Save any unsaved changes,
+ * and prepare to exit.
+ *
+ * @scope    global function
+ */
+window.doOnunloadActions = function() {
+  // world.saveChanges();
+};
+
+window.doOnfocusActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onfocus");
+};
+
+window.doOnblurActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onblur");
+};
+
+
+// -------------------------------------------------------------------
+// Register for window events
+// -------------------------------------------------------------------
+window.onload = window.doOnloadActions;
+window.onunload = window.doOnunloadActions;
+window.onerror = Util.handleError;
+window.onfocus = window.doOnfocusActions;
+window.onblur = window.doOnblurActions;
+// window.onresize = window.doOnresizeActions;
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/dogfood.js
===================================================================
--- trunk/dogfood.js	2005-06-23 22:05:57 UTC (rev 173)
+++ trunk/dogfood.js	2005-06-23 22:12:39 UTC (rev 174)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- dogfood_page.js
+ dogfood.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>

Deleted: trunk/source/demo_page.html
===================================================================
--- trunk/source/demo_page.html	2005-06-23 22:05:57 UTC (rev 173)
+++ trunk/source/demo_page.html	2005-06-23 22:12:39 UTC (rev 174)
@@ -1,77 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>openrecord.org - Demo Page</title>
-    <link rel="stylesheet" type="text/css" href="base_style.css" />
-    <script type="text/javascript" src="../third_party/md5/md5.js"></script>
-    <script type="text/javascript" src="Util.js"></script>
-    <script type="text/javascript" src="Cookie.js"></script>
-
-    <script type="text/javascript" src="View.js"></script>
-    <script type="text/javascript" src="RootView.js"></script>
-    <script type="text/javascript" src="ItemView.js"></script>
-    <script type="text/javascript" src="PageView.js"></script>
-    <script type="text/javascript" src="SectionView.js"></script>
-    <script type="text/javascript" src="LoginView.js"></script>
-    <script type="text/javascript" src="MultiEntriesView.js"></script>
-    <script type="text/javascript" src="NavbarView.js"></script>
-    <script type="text/javascript" src="TextView.js"></script>
-    <script type="text/javascript" src="PluginView.js"></script>
-    <script type="text/javascript" src="TablePlugin.js"></script>
-    <script type="text/javascript" src="OutlinePlugin.js"></script>
-    <script type="text/javascript" src="DetailPlugin.js"></script>
-    <script type="text/javascript" src="BarChartPlugin.js"></script>
-
-    <script type="text/javascript" src="model/Record.js"></script>
-    <script type="text/javascript" src="model/Ordinal.js"></script>
-    <script type="text/javascript" src="model/Vote.js"></script>
-    <script type="text/javascript" src="model/ContentRecord.js"></script>
-    <script type="text/javascript" src="model/Item.js"></script>
-    <script type="text/javascript" src="model/Entry.js"></script>
-    <script type="text/javascript" src="model/Transaction.js"></script>
-    <script type="text/javascript" src="model/World.js"></script>
-    <script type="text/javascript" src="model/StubVirtualServer.js"></script>
-    <script type="text/javascript" src="model/DeltaVirtualServer.js"></script>
-    
-    <script type="text/javascript" src="demo_page.js"></script>
-  </head>
-  
-  <body>
-    <p>Sorry, the browser you're using doesn't support JavaScript. 
-    This page won't display correctly.</p>
-    
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-
-  </body>
-  
-</html>
-

Deleted: trunk/source/demo_page.js
===================================================================
--- trunk/source/demo_page.js	2005-06-23 22:05:57 UTC (rev 173)
+++ trunk/source/demo_page.js	2005-06-23 22:12:39 UTC (rev 174)
@@ -1,87 +0,0 @@
-/*****************************************************************************
- demo_page.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   World.js
-//   RootView.js
-// -------------------------------------------------------------------
-
-/**
- * Called when the window first loads. Calls all the functions that do 
- * initialization when the page is loaded.
- *
- * @scope    global function
- */
-window.doOnloadActions = function() {  
-  var pathToTrunkDirectory = "../";
-  var repositoryName = "demo_page";
-  var deltaVirtualServer = new DeltaVirtualServer(repositoryName, pathToTrunkDirectory);
-  var world = new World(deltaVirtualServer);
-  window.rootView = new RootView(world);
-  
-  Util.setTargetsForExternalLinks();
-};
-
-
-/**
- * Called when the user leaves the browser window.  Save any unsaved changes,
- * and prepare to exit.
- *
- * @scope    global function
- */
-window.doOnunloadActions = function() {
-  // world.saveChanges();
-};
-
-window.doOnfocusActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onfocus");
-};
-
-window.doOnblurActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onblur");
-};
-
-
-// -------------------------------------------------------------------
-// Register for window events
-// -------------------------------------------------------------------
-window.onload = window.doOnloadActions;
-window.onunload = window.doOnunloadActions;
-window.onerror = Util.handleError;
-window.onfocus = window.doOnfocusActions;
-window.onblur = window.doOnblurActions;
-// window.onresize = window.doOnresizeActions;
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/save_changes.php
===================================================================
--- trunk/source/save_changes.php	2005-06-23 22:05:57 UTC (rev 173)
+++ trunk/source/save_changes.php	2005-06-23 22:12:39 UTC (rev 174)
@@ -1,24 +0,0 @@
-<?php
-$datastoreFilename = "datastore.js";
-$contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
-/* 
-$contentToWrite = "start " . $_POST["foo"] . " middle " . $_POST["foo"] . " end";
-*/
-if (is_writable($datastoreFilename)) {
-  echo "$datastoreFilename is writable.";
-  if ($fileHandle = fopen($datastoreFilename, "wb")) {
-    if (fwrite($fileHandle, $contentToWrite)) {
-      echo "Wrote to file ($datastoreFilename)";
-    } else {
-      echo "Unable to write to file ($datastoreFilename)";
-      exit;
-    }
-  } else {
-    echo "Unable to open file: $datastoreFilename";
-    exit("Unable to open file."); 
-  }
-} else {
-  echo "The file $datastoreFilename is not writable.";
-}
-?>
-



From skinner at sheep.berlios.de  Fri Jun 24 00:20:16 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 00:20:16 +0200
Subject: [openrecord-svn] r175 - trunk/documentation
Message-ID: <200506232220.j5NMKGkn003991@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 00:20:16 +0200 (Fri, 24 Jun 2005)
New Revision: 175

Modified:
   trunk/documentation/release_planning.txt
Log:
closed one task, opened a new one

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-23 22:12:39 UTC (rev 174)
+++ trunk/documentation/release_planning.txt	2005-06-23 22:20:16 UTC (rev 175)
@@ -163,7 +163,8 @@
 brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
        |          |         |  5. UI for deleting a row from a table
 brian  | 0.5  IED | 0.25    |  6. Save provisional item and then set the category, in that order, and in one transaction
-brian  | 0.25 IED |         |  7. Fix the bug that happens when you call the PHP server code with no POST data
+brian  | 0.25 IED | 0.25    |  7. Fix the bug that happens when you call the PHP server code with no POST data
+brian  |          | 0.25    |     Enabled one server to serve N pages running against N repository files
 chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
 brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
@@ -171,7 +172,7 @@
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields
        |          |         | 14. BUG: problems with newlines and HTML characters in text strings
-       |          |         | 15. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
+brian  | 0.5  IED |         | 15. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
 -------+----------+---------+----------------------------------------------
        |          |         | 16. Have text-entries and reference-entries look different
        |          |         | 17. Write one unit test that tests GUI code



From skinner at sheep.berlios.de  Fri Jun 24 03:58:10 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 03:58:10 +0200
Subject: [openrecord-svn] r176 - in trunk/source: . model repositories
Message-ID: <200506240158.j5O1wA8n023867@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 03:58:07 +0200 (Fri, 24 Jun 2005)
New Revision: 176

Removed:
   trunk/source/repositories/demo_page/
Modified:
   trunk/source/LintTest.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/repositories/demo_page.json
Log:
More clean-up work on the repository format, including some clean-up of how datatypes are referenced.

Modified: trunk/source/LintTest.js
===================================================================
--- trunk/source/LintTest.js	2005-06-23 22:20:16 UTC (rev 175)
+++ trunk/source/LintTest.js	2005-06-24 01:58:07 UTC (rev 176)
@@ -70,7 +70,6 @@
     "OutlinePlugin.js",
     "DetailPlugin.js",
     "BarChartPlugin.js",
-    "demo_page.js",
     "UtilTest.js"];
   var prefix = "../../../source/";
   var errorReport = LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-23 22:20:16 UTC (rev 175)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 01:58:07 UTC (rev 176)
@@ -103,7 +103,7 @@
              "uuid": "0001000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // Amy ex machina
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Amy ex machina" }
     },
     // -----------------------------------------------------------------------
@@ -111,7 +111,7 @@
              "uuid": "0001001a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Name" }
     },
     // -----------------------------------------------------------------------
@@ -119,7 +119,7 @@
              "uuid": "0001001b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -127,7 +127,7 @@
              "uuid": "0001001c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -135,7 +135,7 @@
              "uuid": "0001002a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Short Name" }
     },
     // -----------------------------------------------------------------------
@@ -143,7 +143,7 @@
              "uuid": "0001002b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -151,7 +151,7 @@
              "uuid": "0001002c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -159,7 +159,7 @@
              "uuid": "0001003a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Summary" }
     },
     // -----------------------------------------------------------------------
@@ -167,7 +167,7 @@
              "uuid": "0001003b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -175,7 +175,7 @@
              "uuid": "0001003c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -183,7 +183,7 @@
              "uuid": "0001004a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Body" }
     },
     // -----------------------------------------------------------------------
@@ -191,7 +191,7 @@
              "uuid": "0001004b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -199,7 +199,7 @@
              "uuid": "0001004c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -207,7 +207,7 @@
              "uuid": "0001005a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Category" }
     },
     // -----------------------------------------------------------------------
@@ -215,7 +215,7 @@
              "uuid": "0001005b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -223,7 +223,7 @@
              "uuid": "0001005c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -231,7 +231,7 @@
              "uuid": "0001006a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Query" }
     },
     // -----------------------------------------------------------------------
@@ -239,7 +239,7 @@
              "uuid": "0001006b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -247,7 +247,7 @@
              "uuid": "0001006c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -255,7 +255,7 @@
              "uuid": "0001007a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Matching Value" }
     },
     // -----------------------------------------------------------------------
@@ -263,7 +263,7 @@
              "uuid": "0001007b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -271,7 +271,7 @@
              "uuid": "0001008a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Matching Attribute" }
     },
     // -----------------------------------------------------------------------
@@ -279,7 +279,7 @@
              "uuid": "0001008b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -287,7 +287,7 @@
              "uuid": "0001008c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -295,7 +295,7 @@
              "uuid": "0001009a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Unfiled Entry" }
     },
     // -----------------------------------------------------------------------
@@ -303,7 +303,7 @@
              "uuid": "0001009b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -311,7 +311,7 @@
              "uuid": "0001009c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001040-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -319,7 +319,7 @@
              "uuid": "000100aa-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Expected Type" }
     },
     // -----------------------------------------------------------------------
@@ -327,7 +327,7 @@
              "uuid": "000100ab-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -335,7 +335,7 @@
              "uuid": "000100ac-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -343,7 +343,7 @@
              "uuid": "000100ad-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -351,7 +351,7 @@
              "uuid": "000100ba-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Inverse Attribute" }
     },
     // -----------------------------------------------------------------------
@@ -359,7 +359,7 @@
              "uuid": "000100bb-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -367,7 +367,7 @@
              "uuid": "000100bc-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -375,7 +375,7 @@
              "uuid": "0001010a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Attribute" }
     },
     // -----------------------------------------------------------------------
@@ -383,7 +383,7 @@
              "uuid": "0001010b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -391,7 +391,7 @@
              "uuid": "0001011a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Category" }
     },
     // -----------------------------------------------------------------------
@@ -399,7 +399,7 @@
              "uuid": "0001011b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -407,7 +407,7 @@
              "uuid": "0001012a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Query" }
     },
     // -----------------------------------------------------------------------
@@ -415,7 +415,7 @@
              "uuid": "0001012b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -423,7 +423,7 @@
              "uuid": "0001013a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Type" }
     },
     // -----------------------------------------------------------------------
@@ -431,7 +431,7 @@
              "uuid": "0001013b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -439,7 +439,7 @@
              "uuid": "0001020a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Text" }
     },
     // -----------------------------------------------------------------------
@@ -447,7 +447,7 @@
              "uuid": "0001020b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -455,7 +455,7 @@
              "uuid": "0001021a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Number" }
     },
     // -----------------------------------------------------------------------
@@ -463,7 +463,7 @@
              "uuid": "0001021b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -471,7 +471,7 @@
              "uuid": "0001022a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Date" }
     },
     // -----------------------------------------------------------------------
@@ -479,7 +479,7 @@
              "uuid": "0001022b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -487,7 +487,7 @@
              "uuid": "0001023a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Check Mark" }
     },
     // -----------------------------------------------------------------------
@@ -495,7 +495,7 @@
              "uuid": "0001023b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -503,7 +503,7 @@
              "uuid": "0001024a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "URL" }
     },
     // -----------------------------------------------------------------------
@@ -511,7 +511,7 @@
              "uuid": "0001024b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -519,7 +519,7 @@
              "uuid": "0001030a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Item" }
     },
     // -----------------------------------------------------------------------
@@ -527,7 +527,7 @@
              "uuid": "0001030b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -535,7 +535,7 @@
              "uuid": "0001040a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Anything" }
     },
     // -----------------------------------------------------------------------
@@ -543,7 +543,7 @@
              "uuid": "0001040b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -551,7 +551,7 @@
              "uuid": "0001050a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001050-ce7f-11d9-8cd5-0011113ae5d6",  // Connection
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Connection" }
     },
     // -----------------------------------------------------------------------
@@ -559,7 +559,7 @@
              "uuid": "0001050b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00001050-ce7f-11d9-8cd5-0011113ae5d6",  // Connection
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     } ]
   },
@@ -626,7 +626,7 @@
              "uuid": "0020000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Page" }
     },
     // -----------------------------------------------------------------------
@@ -634,7 +634,7 @@
              "uuid": "0020000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -642,7 +642,7 @@
              "uuid": "0020100a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Section" }
     },
     // -----------------------------------------------------------------------
@@ -650,7 +650,7 @@
              "uuid": "0020100b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -658,7 +658,7 @@
              "uuid": "0030000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Section" }
     },
     // -----------------------------------------------------------------------
@@ -666,7 +666,7 @@
              "uuid": "0030000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -674,7 +674,7 @@
              "uuid": "0040000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Plugin Name" }
     },
     // -----------------------------------------------------------------------
@@ -682,7 +682,7 @@
              "uuid": "0040000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -690,7 +690,7 @@
              "uuid": "0040101a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Plugin View" }
     },
     // -----------------------------------------------------------------------
@@ -698,7 +698,7 @@
              "uuid": "0040101b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -706,7 +706,7 @@
              "uuid": "0040101c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -714,7 +714,7 @@
              "uuid": "0040102a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Layout Data" }
     },
     // -----------------------------------------------------------------------
@@ -722,7 +722,7 @@
              "uuid": "0040102b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -730,7 +730,7 @@
              "uuid": "0040102c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00040202-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -738,7 +738,7 @@
              "uuid": "0040103a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Applies To Plugin" }
     },
     // -----------------------------------------------------------------------
@@ -746,7 +746,7 @@
              "uuid": "0040103b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -754,7 +754,7 @@
              "uuid": "0040103c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -762,7 +762,7 @@
              "uuid": "0040104a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Table Columns" }
     },
     // -----------------------------------------------------------------------
@@ -770,7 +770,7 @@
              "uuid": "0040104b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -778,7 +778,7 @@
              "uuid": "0040104c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -786,7 +786,7 @@
              "uuid": "0040201a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Plugin View" }
     },
     // -----------------------------------------------------------------------
@@ -794,7 +794,7 @@
              "uuid": "0040201b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -802,7 +802,7 @@
              "uuid": "0040202a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Layout Data" }
     },
     // -----------------------------------------------------------------------
@@ -810,7 +810,7 @@
              "uuid": "0040202b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -818,7 +818,7 @@
              "uuid": "0040301a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Table View" }
     },
     // -----------------------------------------------------------------------
@@ -826,7 +826,7 @@
              "uuid": "0040301b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -834,7 +834,7 @@
              "uuid": "0040301c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
              "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Table" }
     },
     // -----------------------------------------------------------------------
@@ -842,7 +842,7 @@
              "uuid": "0040302a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Outline View" }
     },
     // -----------------------------------------------------------------------
@@ -850,7 +850,7 @@
              "uuid": "0040302b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -858,7 +858,7 @@
              "uuid": "0040302c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
              "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Outline" }
     },
     // -----------------------------------------------------------------------
@@ -866,7 +866,7 @@
              "uuid": "0040303a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Detail View" }
     },
     // -----------------------------------------------------------------------
@@ -874,7 +874,7 @@
              "uuid": "0040303b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -882,7 +882,7 @@
              "uuid": "0040303c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
              "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Detail" }
     },
     // -----------------------------------------------------------------------
@@ -890,7 +890,7 @@
              "uuid": "0040304a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Bar Chart View" }
     },
     // -----------------------------------------------------------------------
@@ -898,7 +898,7 @@
              "uuid": "0040304b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -906,7 +906,7 @@
              "uuid": "0040304c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
              "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Bar Chart" }
     } ]
   },
@@ -926,7 +926,7 @@
              "uuid": "2c4fa781-dde4-11d9-9c71-8022ab6bc8ae",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae",  // Brian Douglas Skinner
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Brian Douglas Skinner" }
     }  ]
   },
@@ -946,7 +946,7 @@
              "uuid": "90e02171-dde4-11d9-9c71-e24829d2f59b",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "90e02170-dde4-11d9-9c71-e24829d2f59b",  // Chih-Chao Lam
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Chih-Chao Lam" }
     }  ]
   },
@@ -966,7 +966,7 @@
              "uuid": "97d040f1-dde4-11d9-9c71-c103016080e1",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "97d040f0-dde4-11d9-9c71-c103016080e1",  // Mignon Belongie
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Mignon Belongie" }
     }  ]
   },
@@ -986,7 +986,7 @@
              "uuid": "9c3596e1-dde4-11d9-9c71-b6ac85cc6d5f",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f",  // Mimi Yin
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Mimi Yin" }
     }  ]
   },
@@ -1006,7 +1006,7 @@
              "uuid": "a00bf341-dde4-11d9-9c71-dae11c269bc7",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "a00bf340-dde4-11d9-9c71-dae11c269bc7",  // Marty Betz
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Marty Betz" }
     }  ]
   }

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-23 22:20:16 UTC (rev 175)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-24 01:58:07 UTC (rev 176)
@@ -261,8 +261,12 @@
       }
       var entryType = entry.getType();
       var typeToken = this._getTypeTokenFromType(entryType);
-      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
-      if (typeToken == StubVirtualServer.JSON_TYPE_CONNECTION) {
+      // listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
+      // if (typeToken == StubVirtualServer.JSON_TYPE_CONNECTION) {
+      var typeUuid = entryType._getUuid();
+      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_TYPE + '": "' + typeUuid + '",');
+      listOfStrings.push('  // ' + typeToken + '\n');
+      if (typeUuid == World.UUID_FOR_TYPE_CONNECTION) {
         var pairOfItems = entry.getItem();
         var firstItem = pairOfItems[0];
         var secondItem = pairOfItems[1];
@@ -285,6 +289,7 @@
         var contentData = entry.getValue();
         
         var valueString = null;
+/*
         switch (typeToken) {
           case StubVirtualServer.JSON_TYPE_NUMBER_VALUE: 
             valueString = contentData;
@@ -301,6 +306,23 @@
           default:
             Util.assert(false, "no such type: " + typeToken);
         }
+*/
+        switch (typeUuid) {
+          case World.UUID_FOR_TYPE_NUMBER: 
+            valueString = contentData;
+            break;
+          case World.UUID_FOR_TYPE_TEXT: 
+            valueString = '"' + contentData + '"';
+            break;
+          case World.UUID_FOR_TYPE_DATE: 
+            valueString = '"' + contentData.toString() + '"';
+            break;
+          case World.UUID_FOR_TYPE_ITEM: 
+            valueString = '"' + contentData._getUuid() + '"';
+            break;
+          default:
+            Util.assert(false, "no such type: " + typeToken);
+        }
         listOfStrings.push(indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + '');
       }
       listOfStrings.push('  }\n');

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-23 22:20:16 UTC (rev 175)
+++ trunk/source/model/StubVirtualServer.js	2005-06-24 01:58:07 UTC (rev 176)
@@ -943,9 +943,20 @@
           previousEntry = this.__getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
         }
  
-        var dataTypeToken = dehydratedEntry[StubVirtualServer.JSON_MEMBER_TYPE];
-        var dataType = this._getTypeFromTypeToken(dataTypeToken);
-        if (dataTypeToken == StubVirtualServer.JSON_TYPE_CONNECTION) {
+        var dataType;
+        var dataTypeUuid = dehydratedEntry[StubVirtualServer.JSON_MEMBER_TYPE];
+        var PENDING_debug = false;
+        if (Util.isUuid(dataTypeUuid)) {
+          PENDING_debug = true;
+          dataType = this.__getItemFromUuidOrBootstrapItem(dataTypeUuid);
+        } else {
+          // code to deal with the old pre-July-2005 file format
+          var dataTypeToken = dataTypeUuid;
+          dataType = this._getTypeFromTypeToken(dataTypeToken);
+          dataTypeUuid = dataType._getUuid();
+        }
+        
+        if (dataTypeUuid == World.UUID_FOR_TYPE_CONNECTION) {
           var listOfItemUuids = dehydratedEntry[StubVirtualServer.JSON_MEMBER_ITEM];
           var firstItemUuid = listOfItemUuids[0];
           var secondItemUuid = listOfItemUuids[1];
@@ -973,17 +984,20 @@
           }
           var rawData = dehydratedEntry[StubVirtualServer.JSON_MEMBER_VALUE];
           var finalData = null;
-          switch (dataTypeToken) {
-            case StubVirtualServer.JSON_TYPE_RELATED_UUID:
+          switch (dataTypeUuid) {
+            case World.UUID_FOR_TYPE_ITEM:
               finalData = this.__getItemFromUuidOrBootstrapItem(rawData);
               break;
-            case StubVirtualServer.JSON_TYPE_TEXT_VALUE:
+            case World.UUID_FOR_TYPE_TEXT:
+              // if (PENDING_debug) {
+              //   alert(rawData + "\n" + dataType);
+              // }
               finalData = rawData;
               break;
-            case StubVirtualServer.JSON_TYPE_NUMBER_VALUE:
+            case World.UUID_FOR_TYPE_NUMBER:
               finalData = rawData;
               break;
-            case StubVirtualServer.JSON_TYPE_DATE_VALUE:
+            case World.UUID_FOR_TYPE_DATE:
               finalData = new Date(rawData);
               break;
             default:

Modified: trunk/source/repositories/demo_page.json
===================================================================
--- trunk/source/repositories/demo_page.json	2005-06-23 22:20:16 UTC (rev 175)
+++ trunk/source/repositories/demo_page.json	2005-06-24 01:58:07 UTC (rev 176)
@@ -12,7 +12,7 @@
              "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -20,7 +20,7 @@
              "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "1. Welcome!" }
     },
     // -----------------------------------------------------------------------
@@ -28,7 +28,7 @@
              "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Welcome to the OpenRecord demo!" }
     },
     // -----------------------------------------------------------------------
@@ -36,7 +36,7 @@
              "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
     } ]
   }
\ No newline at end of file



From skinner at sheep.berlios.de  Fri Jun 24 04:00:16 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 04:00:16 +0200
Subject: [openrecord-svn] r177 - trunk/source/repositories
Message-ID: <200506240200.j5O20GuU024943@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 04:00:10 +0200 (Fri, 24 Jun 2005)
New Revision: 177

Modified:
   trunk/source/repositories/dogfood.json
Log:
More clean-up work on the repository format, including some clean-up of how datatypes are referenced.

Modified: trunk/source/repositories/dogfood.json
===================================================================
--- trunk/source/repositories/dogfood.json	2005-06-24 01:58:07 UTC (rev 176)
+++ trunk/source/repositories/dogfood.json	2005-06-24 02:00:10 UTC (rev 177)
@@ -12,7 +12,7 @@
              "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
-             "type": "RelatedUuid",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -20,7 +20,7 @@
              "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Dogfood" }
     },
     // -----------------------------------------------------------------------
@@ -28,7 +28,7 @@
              "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "The OpenRecord Dogfood Site" }
     },
     // -----------------------------------------------------------------------
@@ -36,7 +36,7 @@
              "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
              "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
-             "type": "TextValue",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This web site is where people working on OpenRecord keep track of the work being done." }
     } ]
   }
\ No newline at end of file



From skinner at sheep.berlios.de  Fri Jun 24 08:11:09 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 08:11:09 +0200
Subject: [openrecord-svn] r178 - in trunk/source: . model
Message-ID: <200506240611.j5O6B9to026045@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 08:10:56 +0200 (Fri, 24 Jun 2005)
New Revision: 178

Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/OutlinePlugin.js
   trunk/source/PageView.js
   trunk/source/PluginView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/model/Item.js
Log:
More clean-up work on the repository format. Changed plugin code so that plugins are identified by UUID rather than by name.

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/BarChartPlugin.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -41,8 +41,8 @@
 // -------------------------------------------------------------------
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_BAR_CHART] = BarChartPlugin;
-BarChartPlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_BAR_CHART;
+BarChartPlugin.UUID_FOR_PLUGIN_VIEW_BAR_CHART = "00040304-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.registerPlugin(BarChartPlugin);
 
 /**
  * A BarChartPlugin displays a set of content items for a SectionView. 
@@ -59,14 +59,33 @@
 }
 
 
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
 /**
- * Returns the registered name of this plugin.
+ * Returns the UUID of the item that represents this class of plugin.
  *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin
+ */
+BarChartPlugin.getPluginItemUuid = function () {
+  return BarChartPlugin.UUID_FOR_PLUGIN_VIEW_BAR_CHART;
+};
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
  * @scope    public instance method
- * @return   A string.
+ * @return   A JavaScript class. 
  */
-BarChartPlugin.prototype.getPluginName = function () {
-  return SectionView.PLUGIN_BAR_CHART;
+BarChartPlugin.prototype.getClass = function () {
+  return BarChartPlugin;
 };
 
 

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/DetailPlugin.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -40,8 +40,8 @@
 // -------------------------------------------------------------------
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_DETAIL] = DetailPlugin;
-DetailPlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_DETAIL;
+DetailPlugin.UUID_FOR_PLUGIN_VIEW_DETAIL = "00040303-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.registerPlugin(DetailPlugin);
 
 
 /**
@@ -54,22 +54,41 @@
  * @syntax   var detailPlugin = new DetailPlugin()
  */
 DetailPlugin.prototype = new PluginView();  // makes DetailPlugin be a subclass of View
-function DetailPlugin(inSuperView, inHTMLElement,inQuery,inLayout) {
-  PluginView.call(this,inSuperView,inHTMLElement,inQuery,inLayout);
+function DetailPlugin(inSuperView, inHTMLElement, inQuery, inLayout) {
+  PluginView.call(this, inSuperView, inHTMLElement, inQuery, inLayout);
 }
 
 
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
 /**
- * Returns the registered name of this plugin.
+ * Returns the UUID of the item that represents this class of plugin.
  *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin
+ */
+DetailPlugin.getPluginItemUuid = function () {
+  return DetailPlugin.UUID_FOR_PLUGIN_VIEW_DETAIL;
+};
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
  * @scope    public instance method
- * @return   A string.
+ * @return   A JavaScript class. 
  */
-DetailPlugin.prototype.getPluginName = function () {
-  return SectionView.PLUGIN_DETAIL;
+DetailPlugin.prototype.getClass = function () {
+  return DetailPlugin;
 };
 
-  
+
 /**
  * Re-creates all the HTML for the DetailPlugin, and hands the HTML to the 
  * browser to be re-drawn.

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/OutlinePlugin.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -39,8 +39,8 @@
 // -------------------------------------------------------------------
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_OUTLINE] = OutlinePlugin;
-OutlinePlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_OUTLINE;
+OutlinePlugin.UUID_FOR_PLUGIN_VIEW_OUTLINE = "00040302-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.registerPlugin(OutlinePlugin);
 
 
 /**
@@ -53,22 +53,41 @@
  * @syntax   var outline = new OutlinePlugin()
  */
 OutlinePlugin.prototype = new PluginView();  // makes OutlinePlugin be a subclass of View
-function OutlinePlugin(inSectionView, inHTMLElement,inQuery,inLayout) {
-  PluginView.call(this,inSectionView,inHTMLElement,inQuery,inLayout);
+function OutlinePlugin(inSectionView, inHTMLElement, inQuery, inLayout) {
+  PluginView.call(this, inSectionView, inHTMLElement, inQuery, inLayout);
 }
 
 
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
 /**
- * Returns the registered name of this plugin.
+ * Returns the UUID of the item that represents this class of plugin.
  *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin
+ */
+OutlinePlugin.getPluginItemUuid = function () {
+  return OutlinePlugin.UUID_FOR_PLUGIN_VIEW_OUTLINE;
+};
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
  * @scope    public instance method
- * @return   A string.
+ * @return   A JavaScript class. 
  */
-OutlinePlugin.prototype.getPluginName = function () {
-  return SectionView.PLUGIN_OUTLINE;
+OutlinePlugin.prototype.getClass = function () {
+  return OutlinePlugin;
 };
 
-  
+
 /**
  * Re-creates all the HTML for the OutlinePlugin, and hands the HTML to the 
  * browser to be re-drawn.

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/PageView.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -46,25 +46,28 @@
 PageView.CSS_CLASS_PAGE_HEADER = "page_header";
 PageView.UUID_FOR_ATTRIBUTE_SECTION = "00030000-ce7f-11d9-8cd5-0011113ae5d6";
 
+
 /**
  * Creates a new section in the repository
- * @scope public function
- * @param inPage  Page Item to insert new section
- * @param isNewTransaction  should new section be wrapped in a transaction?
+ *
+ * @scope    public class method
+ * @param    inPage    The Page Item to insert the new section into
  */
 PageView.newSection = function (repository, inPage) {
   var attributeCalledCategory = repository.getAttributeCalledCategory();
   var attributeCalledQuery = repository.getAttributeCalledQuery();
   var categoryCalledQuery = repository.getCategoryCalledQuery();
-  var attributeCalledPluginName = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
+  var attributeCalledPluginView = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
   var attributeCalledSection = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTION);
   var categoryCalledSection = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_SECTION);
+  var tablePluginView = repository.getItemFromUuid(TablePlugin.UUID_FOR_PLUGIN_VIEW_TABLE);
   
   repository.beginTransaction();
   var newSection = repository.newItem("New Section");
   newSection.addEntryForAttribute(attributeCalledCategory, categoryCalledSection);
   inPage.addEntryForAttribute(attributeCalledSection, newSection);
-  newSection.addEntryForAttribute(attributeCalledPluginName, SectionView.PLUGIN_TABLE);
+  newSection.addEntryForAttribute(attributeCalledPluginView, tablePluginView);
+
   var newQuery = repository.newItem("New Query");
   newQuery.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
   newSection.addEntryForAttribute(attributeCalledQuery, newQuery);
@@ -72,6 +75,7 @@
   return newSection;
 };
 
+
 /**
  * The RootView uses an instance of a PageView to display a Page in the
  * browser window.
@@ -174,6 +178,7 @@
   this.refresh();
 };
 
+
 /**
  * Creates a new section in this page.
  *
@@ -195,6 +200,7 @@
   return sectionView;
 };
 
+
 /**
  * Called when the user clicks on the "New Section" button.
  *
@@ -205,6 +211,7 @@
   this._buildNewSection(newSection, this._editModeDiv).refresh();
 };
 
+
 /**
  * Create the "new section" button in EditMode.
  *
@@ -226,6 +233,7 @@
   }
 };
 
+
 /**
  * Called when edit controls need to be refreshed
  *
@@ -239,11 +247,12 @@
     }
     else {
       this.getHTMLElement().removeChild(this._editModeDiv);
-      //Pending: why does hiding _editModeDiv still leave a blue line, gotta ask Brian about CSS
+      // PENDING: why does hiding _editModeDiv still leave a blue line, gotta ask Brian about CSS
       this._editModeDiv = null;
     }
   }
 };
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/PluginView.js
===================================================================
--- trunk/source/PluginView.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/PluginView.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -37,29 +37,50 @@
 // -------------------------------------------------------------------
 
 
-
-
 /**
- * A PluginView display one or more content items. 
+ * A PluginView displays one or more content items. 
  *
  * @scope    public instance constructor
  * @extends  View
  * @param    inSuperView    The superview for this view. 
  * @param    inHTMLElement    The HTMLElement to display this view in. 
- * @param    inQuery  Query that produces the items for this PluginView to display
+ * @param    inQuery    The Query item that provides the items for this PluginView to display
  * @syntax   var PluginView = new PluginView()
  */
 PluginView.prototype = new View();  // makes PluginView be a subclass of View
-function PluginView(inSuperView, inHTMLElement,inQuery, inLayout) {
+function PluginView(inSuperView, inHTMLElement, inQuery, inLayout) {
   if (!inSuperView) {return;} // initial call that subclasses of PluginViews make without parameters
   this.setSuperview(inSuperView);
   this.setHTMLElement(inHTMLElement);
   this._query = inQuery;
   this._layout = inLayout;
+  this._pluginItem = null;
 }
 
 
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
 /**
+ * Returns the registered name of this PluginView.
+ *
+ * @scope    public instance method
+ * @return   A string.
+ */
+PluginView.prototype.getPluginItem = function () {
+  if (!this._pluginItem) {
+    // alert(this.getPluginName());
+    var pluginClass = this.getClass();
+    // alert(pluginClass);
+    var pluginItemUuid = pluginClass.getPluginItemUuid();
+    this._pluginItem = this.getWorld().getItemFromUuid(pluginItemUuid);
+  }
+  return this._pluginItem;
+};
+
+
+/**
  * Gets the list of content items to display.
  *
  * @scope    PENDING

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/SectionView.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -45,11 +45,6 @@
 // -------------------------------------------------------------------
 // SectionView public class constants
 // -------------------------------------------------------------------
-SectionView.PLUGIN_TABLE = "Table";
-SectionView.PLUGIN_OUTLINE = "Outline";
-SectionView.PLUGIN_DETAIL = "Detail";
-SectionView.PLUGIN_BAR_CHART = "Bar Chart";
-
 SectionView.ELEMENT_CLASS_SECTION = "section";
 SectionView.ELEMENT_CLASS_SIMPLE_TABLE = "simple_table";
 SectionView.ELEMENT_CLASS_NEW_ITEM = "newitem";
@@ -64,14 +59,14 @@
 SectionView.CSS_CLASS_SUMMARY_TEXT = "summary_text";
 
 SectionView.ELEMENT_ID_SELECT_MENU_PREFIX = "select_menu_";
-SectionView.ELEMENT_ID_SELECT_MENU_SUFFIX = "_select_menu";
-SectionView.ELEMENT_ID_PLUGIN_DIV_SUFFIX = "_plugin_div";
-SectionView.ELEMENT_ID_CELL_PREFIX = "section_";
-SectionView.ELEMENT_ID_CELL_MIDFIX = "_cell_";
-SectionView.ELEMENT_ID_SUMMARY_DIV_SUFFIX = "_summary_div";
+// SectionView.ELEMENT_ID_SELECT_MENU_SUFFIX = "_select_menu";
+// SectionView.ELEMENT_ID_PLUGIN_DIV_SUFFIX = "_plugin_div";
+// SectionView.ELEMENT_ID_CELL_PREFIX = "section_";
+// SectionView.ELEMENT_ID_CELL_MIDFIX = "_cell_";
+// SectionView.ELEMENT_ID_SUMMARY_DIV_SUFFIX = "_summary_div";
 
 SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER = "section_number";
-SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER = "cell_number";
+// SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER = "cell_number";
 
 SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME       = "00040000-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW       = "00040101-ce7f-11d9-8cd5-0011113ae5d6";
@@ -81,15 +76,12 @@
 SectionView.UUID_FOR_CATEGORY_PLUGIN_VIEW        = "00040201-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_CATEGORY_LAYOUT_DATA        = "00040202-ce7f-11d9-8cd5-0011113ae5d6";
 
-SectionView.UUID_FOR_PLUGIN_VIEW_TABLE           = "00040301-ce7f-11d9-8cd5-0011113ae5d6";
-SectionView.UUID_FOR_PLUGIN_VIEW_OUTLINE         = "00040302-ce7f-11d9-8cd5-0011113ae5d6";
-SectionView.UUID_FOR_PLUGIN_VIEW_DETAIL          = "00040303-ce7f-11d9-8cd5-0011113ae5d6";
-SectionView.UUID_FOR_PLUGIN_VIEW_BAR_CHART       = "00040304-ce7f-11d9-8cd5-0011113ae5d6";
 
 // -------------------------------------------------------------------
 // SectionView class properties
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfPluginClassesKeyedByPluginName = {};
+SectionView._ourListOfRegisteredPluginClasses = [];
+SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid = null;
 
 
 /**
@@ -121,6 +113,15 @@
   this._mySectionSummaryView = null;
   this._myHeaderView = null;
   this._queryEditSpan = null;
+  
+  if (!SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid) {
+    SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid = {};
+    for (var key in SectionView._ourListOfRegisteredPluginClasses) {
+      var pluginClass = SectionView._ourListOfRegisteredPluginClasses[key];
+      var pluginItemUuid = pluginClass.getPluginItemUuid();
+      SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[pluginItemUuid] = pluginClass;
+    }
+  }
 }
 
 
@@ -129,52 +130,48 @@
 // -------------------------------------------------------------------
 
 /**
- * Given a string or an item, returns a string.
+ * Given the name of a plugin ("Table", "Outline", etc.), returns a newly
+ * created plugin object of that type, initialized to be the plugin for this 
+ * SectionView.
  *
  * @scope    public class method
- * @param    inValue    A string or an Item. 
- * @return   A string.
+ * @param    pluginClass    A JavaScript class, such as TablePlugin. 
+ * @param    pluginItemUuid    The UUID of the item representing that class of plugin. 
  */
- /* DEPRECATED: instead use Entry.prototype.getDisplayString
-SectionView.getStringForValue = function (inValue) {
-  var string = "";
-  if (Util.isString(inValue)) {
-    string = inValue;
-  }
-  if (inValue instanceof Item) {
-    string = inValue.getDisplayName();
-  }
-  return string;
+SectionView.registerPlugin = function(pluginClass, pluginItemUuid) {
+  SectionView._ourListOfRegisteredPluginClasses.push(pluginClass);
 };
-*/
 
+
 // -------------------------------------------------------------------
 // Public instance methods
 // -------------------------------------------------------------------
 
 /**
- * Given the name of a plugin ("Table", "Outline", etc.), returns a newly
- * created plugin object of that type, initialized to be the plugin for this 
- * SectionView.
+ * Given an item representing a class of plugin view, this method returns a 
+ * newly created plugin view object of that class, initialized to be the plugin 
+ * for this SectionView.
  *
  * @scope    public instance method
- * @param    inPluginName    A string. One of the registered plugin names. 
- * @param    inPluginDiv    The HTMLDivElement to display the plugin in. 
+ * @param    pluginItem    An item representing a class of plugin view. 
+ * @param    pluginDiv    The HTMLDivElement to display the plugin in. 
  * @return   A newly created plugin object, initialized to be the plugin for this section.
  */
-SectionView.prototype.getPluginFromPluginName = function (inPluginName, inPluginDiv) {
-  Util.assert(Util.isString(inPluginName));
+SectionView.prototype.getPluginInstanceFromPluginItem = function (pluginItem, pluginDiv) {
+  Util.assert(pluginItem instanceof Item);
   
   var newPlugin = null;
-  var pluginClass = SectionView.ourHashTableOfPluginClassesKeyedByPluginName[inPluginName];
+  var pluginClass;
+  pluginClass = SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[pluginItem._getUuid()];
   if (pluginClass) {
-    var pluginType = this.getWorld().getItemFromUuid(pluginClass.UUID);
+    var pluginType = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
     var layoutData = this._getLayoutDataForPlugin(pluginType);
-    newPlugin = new pluginClass(this, inPluginDiv, this.getQuery(), layoutData);
+    newPlugin = new pluginClass(this, pluginDiv, this.getQuery(), layoutData);
   }
   return newPlugin;
 };
 
+
 /**
  * Returns query associated to this section.
  *
@@ -217,9 +214,20 @@
   if (!this.getHTMLElement()) {
     return;
   }
-  var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
-  var selectedPluginName = this.mySection.getSingleStringValueFromAttribute(attributeCalledPluginName);
-
+  var attributeCalledPluginView = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
+  var selectedPluginViewEntry = this.mySection.getSingleEntryFromAttribute(attributeCalledPluginView);
+  var selectedPluginItem;
+  var selectedPluginClass;
+  if (selectedPluginViewEntry) {
+    selectedPluginItem = selectedPluginViewEntry.getValue();
+    selectedPluginClass = SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[selectedPluginItem._getUuid()];
+  } else {
+    // code to support legacy repository files
+    var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
+    selectedPluginItem = this.mySection.getSingleStringValueFromAttribute(attributeCalledPluginName);
+    selectedPluginClass = TablePlugin; // PENDING: Hack!
+  }
+  
   var sectionDiv = this.getHTMLElement();
   var outerDiv = View.createAndAppendElement(sectionDiv, "div", SectionView.ELEMENT_CLASS_SECTION);
   var headerH2 = View.createAndAppendElement(outerDiv, "h2");
@@ -245,14 +253,17 @@
   var listener;
   selectElement.setAttribute("name", selectMenuId);
   selectElement.setAttribute(SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER, this.mySectionNumber);
-  for (var pluginName in SectionView.ourHashTableOfPluginClassesKeyedByPluginName) {
+  for (var key in SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid) {
+    var pluginClass = SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[key];
     optionElement = View.createAndAppendElement(selectElement, "option");
-    optionElement.selected = (selectedPluginName == pluginName);
-    optionElement.setAttribute("value", pluginName);
+    optionElement.selected = (selectedPluginClass == pluginClass);
+    optionElement.value = pluginClass.getPluginItemUuid();
+    var pluginItem = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
+    optionElement.text = pluginItem.getDisplayName();
     // Util.addEventListener(optionElement, "click", SectionView.clickOnPluginSelectionMenu);
     listener = this; 
     Util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
-    optionElement.innerHTML = pluginName;
+    // optionElement.innerHTML = pluginName;
   }
   
   View.createAndAppendTextNode(controlArea," of items whose ");
@@ -264,7 +275,7 @@
 
   // create a div element for the plugin class to use
   this._myPluginDiv = View.createAndAppendElement(outerDiv, "div");
-  this._myPlugin = this.getPluginFromPluginName(selectedPluginName, this._myPluginDiv);
+  this._myPlugin = this.getPluginInstanceFromPluginItem(selectedPluginItem, this._myPluginDiv);
   this._myHasEverBeenDisplayedFlag = true;
   this.refresh();
 };
@@ -381,9 +392,9 @@
   item.removeObserver(this); //item no longer needs to be observed as query editor span is rebuilt
   var myQuery = this.getQuery();
   Util.assert(item == myQuery);
-  var pluginName = this._myPlugin.getPluginName();
+  var pluginItem = this._myPlugin.getPluginItem();
   this._myPlugin.endOfLife();
-  this._myPlugin = this.getPluginFromPluginName(pluginName, this._myPluginDiv);
+  this._myPlugin = this.getPluginInstanceFromPluginItem(pluginItem, this._myPluginDiv);
   this.refresh();
 };
 
@@ -401,14 +412,25 @@
   // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
   
   var selectElement = optionElement.parentNode;
-  var newChoiceName = optionElement.value;
-  var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
+  // var newChoiceName = optionElement.value;
+  // var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
+  var newChoiceUuid = optionElement.value;
+  var attributeCalledPluginView = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
+  var newPluginViewItem = this.getWorld().getItemFromUuid(newChoiceUuid);
  
-  if (this._myPlugin.getPluginName() == newChoiceName) {
+  if (this._myPlugin.getPluginItem() == newPluginViewItem) { 
     return;
   } else {
     this._myPlugin.endOfLife();
-    this._myPlugin = this.getPluginFromPluginName(newChoiceName, this._myPluginDiv);
+    this._myPlugin = this.getPluginInstanceFromPluginItem(newPluginViewItem, this._myPluginDiv);
+
+    var oldEntry = this.mySection.getSingleEntryFromAttribute(attributeCalledPluginView);
+    if (oldEntry) {
+      this.mySection.replaceEntry(oldEntry, newPluginViewItem);
+    } else {
+      this.mySection.addEntryForAttribute(attributeCalledPluginView, newPluginViewItem);
+    }
+    /*
     var pluginNameEntries = this.mySection.getEntriesForAttribute(attributeCalledPluginName);
     if (pluginNameEntries && pluginNameEntries[0]) {
       var oldEntry = pluginNameEntries[0];
@@ -416,6 +438,7 @@
     } else {
       this.mySection.addEntryForAttribute(attributeCalledPluginName, newChoiceName);
     }
+    */
     this.refresh();
   }
 };
@@ -474,23 +497,10 @@
     // some refactoring so that the plugin can register as an observer of the
     // query item, and then the plugin itself can know what to do when the
     // query item changes.  
-    var pluginName = this._myPlugin.getPluginName();
+    var pluginItem = this._myPlugin.getPluginItem();
     this._myPlugin.endOfLife();
-    this._myPlugin = this.getPluginFromPluginName(pluginName, this._myPluginDiv);
+    this._myPlugin = this.getPluginInstanceFromPluginItem(pluginItem, this._myPluginDiv);
 
-    /*// PENDING:
-    // These next 8 lines look like a mistake.  Maybe they're a result of a 
-    // copy & paste error.  I think we can just delete them, but I'm not brave
-    // enough right now!
-    var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
-    var pluginNameEntries = this.mySection.getEntriesForAttribute(attributeCalledPluginName);
-    if (pluginNameEntries && pluginNameEntries[0]) {
-      var oldEntry = pluginNameEntries[0];
-      this.mySection.replaceEntry(oldEntry, pluginName);
-    } else {
-      this.mySection.addEntryForAttribute(attributeCalledPluginName, pluginName);
-    }*/
-
     this.refresh();
   }
 };

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/TablePlugin.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -43,14 +43,14 @@
 // -------------------------------------------------------------------
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
-SectionView.ourHashTableOfPluginClassesKeyedByPluginName[SectionView.PLUGIN_TABLE] = TablePlugin;
-TablePlugin.UUID = SectionView.UUID_FOR_PLUGIN_VIEW_TABLE;
+TablePlugin.UUID_FOR_PLUGIN_VIEW_TABLE = "00040301-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.registerPlugin(TablePlugin);
 
 
 // -------------------------------------------------------------------
 // TablePlugin public class constants
 // -------------------------------------------------------------------
-TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS     = "00040104-ce7f-11d9-8cd5-0011113ae5d6";
+TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS = "00040104-ce7f-11d9-8cd5-0011113ae5d6";
 TablePlugin.ASCENDING_GIF = "ascending.gif";
 TablePlugin.DESCENDING_GIF = "descending.gif";
 
@@ -65,8 +65,8 @@
  * @param    inHTMLElement    The HTMLElement to display this view in. 
  */
 TablePlugin.prototype = new PluginView();  // makes TablePlugin be a subclass of View
-function TablePlugin(inSectionView, inHTMLElement, inQuery,inLayout) {
-  PluginView.call(this,inSectionView,inHTMLElement,inQuery,inLayout);
+function TablePlugin(inSectionView, inHTMLElement, inQuery, inLayout) {
+  PluginView.call(this, inSectionView, inHTMLElement, inQuery, inLayout);
 
   // PENDING should probably make this independent of sectionview
   this.myClass = SectionView.ELEMENT_CLASS_SIMPLE_TABLE;
@@ -77,14 +77,33 @@
 }
 
 
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
 /**
- * Returns a string with the display name for this plugin.
+ * Returns the UUID of the item that represents this class of plugin.
  *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin
+ */
+TablePlugin.getPluginItemUuid = function () {
+  return TablePlugin.UUID_FOR_PLUGIN_VIEW_TABLE;
+};
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
  * @scope    public instance method
- * @return   A String with a display name for this plugin. 
+ * @return   A JavaScript class. 
  */
-TablePlugin.prototype.getPluginName = function () {
-  return SectionView.PLUGIN_TABLE;
+TablePlugin.prototype.getClass = function () {
+  return TablePlugin;
 };
 
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-24 02:00:10 UTC (rev 177)
+++ trunk/source/model/Item.js	2005-06-24 06:10:56 UTC (rev 178)
@@ -387,10 +387,11 @@
  * Returns a display name for the item.
  *
  * @scope    public instance method
+ * @param    defaultString    Optional.  This string will be returned if the item has no display name. 
  * @return   A string with a display name for the item.
  */
-Item.prototype.getDisplayName = function (inDefaultString) {
-  var displayName = inDefaultString || "(no name)";
+Item.prototype.getDisplayName = function (defaultString) {
+  var displayName = defaultString || "(no name)";
   var listOfNameEntries = this.getNameEntries();
   if (listOfNameEntries.length > 0) {
     var primaryName = listOfNameEntries[0];
@@ -428,10 +429,11 @@
  * Returns just the first entry of an item's attribute.
  *
  * @scope    public instance method
+ * @param    attribute    An item representing an attribute. 
  * @return   A string with a description of the item.
  */
-Item.prototype.getSingleEntryFromAttribute = function (inAttribute) {
-  var listOfEntries = this.getEntriesForAttribute(inAttribute);
+Item.prototype.getSingleEntryFromAttribute = function (attribute) {
+  var listOfEntries = this.getEntriesForAttribute(attribute);
   if (listOfEntries) {
     return listOfEntries[0];
   }
@@ -443,18 +445,25 @@
  * Returns just the first entry's display string of an item's attribute.
  *
  * @scope    public instance method
+ * @param    attribute    An item representing an attribute. 
  * @return   A string with a description of the item.
  */
-Item.prototype.getSingleStringValueFromAttribute = function (inAttribute) {
-  var singleEntry = this.getSingleEntryFromAttribute(inAttribute);
+Item.prototype.getSingleStringValueFromAttribute = function (attribute) {
+  var singleEntry = this.getSingleEntryFromAttribute(attribute);
   if (singleEntry) {return singleEntry.getDisplayString();}
   return "";
 };
 
-Item.prototype.getDisplayStringForEntry = function (myEntry) {
-  Util.assert(myEntry instanceof Entry);
-  return myEntry.getDisplayString(this);
+
+/**
+ *
+ */
+Item.prototype.getDisplayStringForEntry = function (entry) {
+  Util.assert(entry instanceof Entry);
+  return entry.getDisplayString(this);
 };
+
+
 /**
  * Returns a string describing the item.
  *



From skinner at sheep.berlios.de  Fri Jun 24 20:19:08 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 20:19:08 +0200
Subject: [openrecord-svn] r179 - trunk/source/model
Message-ID: <200506241819.j5OIJ8O0029399@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 20:19:07 +0200 (Fri, 24 Jun 2005)
New Revision: 179

Modified:
   trunk/source/model/2005_june_axiomatic_items.json
Log:
Switched the Expected Type entries for the Expected Type attribute to be in the order (Category, Type) rather than (Type, Category).

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 06:10:56 UTC (rev 178)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 18:19:07 UTC (rev 179)
@@ -331,20 +331,20 @@
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              // Category
              "uuid": "000100ac-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
+    { "Entry": {                                              // Type
              "uuid": "000100ad-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Inverse Attribute



From skinner at sheep.berlios.de  Fri Jun 24 21:42:34 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 21:42:34 +0200
Subject: [openrecord-svn] r180 - in trunk/source: . model
Message-ID: <200506241942.j5OJgYfd000812@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 21:42:33 +0200 (Fri, 24 Jun 2005)
New Revision: 180

Modified:
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/Entry.js
Log:
Made the relationship between Pages and their Sections be a bi-directional connection instead of a one-way reference.

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-24 18:19:07 UTC (rev 179)
+++ trunk/source/PageView.js	2005-06-24 19:42:33 UTC (rev 180)
@@ -44,7 +44,8 @@
 // PageView public class constants
 // -------------------------------------------------------------------
 PageView.CSS_CLASS_PAGE_HEADER = "page_header";
-PageView.UUID_FOR_ATTRIBUTE_SECTION = "00030000-ce7f-11d9-8cd5-0011113ae5d6";
+PageView.UUID_FOR_ATTRIBUTE_SECTIONS_IN_PAGE = "00030000-ce7f-11d9-8cd5-0011113ae5d6";
+PageView.UUID_FOR_ATTRIBUTE_PAGE_THIS_SECTION_APPEARS_ON = "00030001-ce7f-11d9-8cd5-0011113ae5d6";
 
 
 /**
@@ -58,14 +59,16 @@
   var attributeCalledQuery = repository.getAttributeCalledQuery();
   var categoryCalledQuery = repository.getCategoryCalledQuery();
   var attributeCalledPluginView = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
-  var attributeCalledSection = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTION);
+  var attributeCalledSectionsInPage = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTIONS_IN_PAGE);
+  var attributeCalledPageThisSectionAppearsOn = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_PAGE_THIS_SECTION_APPEARS_ON);
   var categoryCalledSection = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_SECTION);
   var tablePluginView = repository.getItemFromUuid(TablePlugin.UUID_FOR_PLUGIN_VIEW_TABLE);
   
   repository.beginTransaction();
   var newSection = repository.newItem("New Section");
   newSection.addEntryForAttribute(attributeCalledCategory, categoryCalledSection);
-  inPage.addEntryForAttribute(attributeCalledSection, newSection);
+  // inPage.addEntryForAttribute(attributeCalledSectionsInPage, newSection);
+  inPage.addConnectionEntry(attributeCalledSectionsInPage, newSection, attributeCalledPageThisSectionAppearsOn);
   newSection.addEntryForAttribute(attributeCalledPluginView, tablePluginView);
 
   var newQuery = repository.newItem("New Query");
@@ -164,13 +167,15 @@
 
   // add <div> elements for each of the sections on the page
   // and create a new SectionView for each section
-  var attributeCalledSection = this.getWorld().getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTION);
-  var listOfEntriesForSections = this.myPage.getEntriesForAttribute(attributeCalledSection);
-  var sectionNumber = 0;
+  var attributeCalledSectionsInPage = this.getWorld().getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTIONS_IN_PAGE);
+  var listOfEntriesForSections = this.myPage.getEntriesForAttribute(attributeCalledSectionsInPage);
+  
   for (var key in listOfEntriesForSections) {
     var entryForSection = listOfEntriesForSections[key];
-    var section = entryForSection.getValue();
-    this._buildNewSection(section);
+    var section = entryForSection.getConnectedItem();
+    if (section) {
+      this._buildNewSection(section);
+    }
   }
   this._wasInEditMode = this.isInEditMode();
   if (this._wasInEditMode) {this._buildEditControls();}

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-24 18:19:07 UTC (rev 179)
+++ trunk/source/RootView.js	2005-06-24 19:42:33 UTC (rev 180)
@@ -357,7 +357,16 @@
   // newPage.addEntryForAttribute(shortName, "New Page");
   newPage.addEntryForAttribute(attributeCalledCategory, categoryCalledPage);
   newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
-  PageView.newSection(repository,newPage);
+
+  // PENDING:
+  //   This line automatically creates one new section on the new page.  
+  //   I commented it out because somehow there was a bug with using it.
+  //   I can't figure out what causes the bug, but for some reason when
+  //   we create a section this way, the new section has no Layout Data,
+  //   and for some reason that causes the section never to be displayed
+  //   in the UI, which makes it harmless but completely useless.
+  // PageView.newSection(repository, newPage);
+
   repository.endTransaction();
   
   this.myHashTableOfPagesKeyedByUuid[newPage._getUuid()] = newPage;

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 18:19:07 UTC (rev 179)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 19:42:33 UTC (rev 180)
@@ -574,10 +574,14 @@
              "uuid": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Section
+    { "Item": {                                               // Sections In Page
              "uuid": "00030000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Item": {                                               // Page this section appears on
+             "uuid": "00030001-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Item": {                                               // Plugin Name (Attribute)
              "uuid": "00040000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -654,22 +658,38 @@
             "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Section
+    { "Entry": {                                              // Sections In Page
              "uuid": "0030000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Sections In Page
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Section" }
+            "value": "Sections In Page" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Attribute
              "uuid": "0030000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Sections In Page
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // Page this section appears on
+             "uuid": "0030001a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00030001-ce7f-11d9-8cd5-0011113ae5d6",  // Page this section appears on
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Page this section appears on" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0030001b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00030001-ce7f-11d9-8cd5-0011113ae5d6",  // Page this section appears on
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Plugin Name
              "uuid": "0040000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-24 18:19:07 UTC (rev 179)
+++ trunk/source/model/Entry.js	2005-06-24 19:42:33 UTC (rev 180)
@@ -222,6 +222,7 @@
   return this._myType;
 };
 
+
 /**
  * If this entry was established as the replacement for a previous
  * entry, this method returns the previous entry.
@@ -258,10 +259,10 @@
     return this.__myAttribute;
   }
   if (Util.isArray(this.__myItem)) {
-    if (this.__myItem[0]) {
+    if (this.__myItem[0] == item) {
       return this.__myAttribute[0];
     }
-    if (this.__myItem[1]) {
+    if (this.__myItem[1] == item) {
       return this.__myAttribute[1];
     }
   }
@@ -270,6 +271,32 @@
 
 
 /**
+ * If this is a ConnectionEntry, given one of the two connected items, this
+ * method returns the other connected item.
+ *
+ * @scope    public instance method
+ * @param    item    The item that this is an entry of. 
+ * @return   The item that is connected to the given item.
+ */
+Entry.prototype.getConnectedItem = function (item) {
+  if (this.__myItem == item) {
+    if (this._myType == this.getWorld().getTypeCalledItem()) {
+      return this.__myValue;
+    }
+  }
+  if (Util.isArray(this.__myItem)) {
+    if (this.__myItem[0] == item) {
+      return this.__myItem[1];
+    }
+    if (this.__myItem[1] == item) {
+      return this.__myItem[0];
+    }
+  }
+  return null;
+};
+
+
+/**
  * Returns the value that this entry holds.
  *
  * @scope    public instance method



From skinner at sheep.berlios.de  Fri Jun 24 22:53:12 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 24 Jun 2005 22:53:12 +0200
Subject: [openrecord-svn] r181 - in trunk/source: . model
Message-ID: <200506242053.j5OKrCxl004497@sheep.berlios.de>

Author: skinner
Date: 2005-06-24 22:53:12 +0200 (Fri, 24 Jun 2005)
New Revision: 181

Modified:
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/model/2005_june_axiomatic_items.json
Log:
Added a couple more axiomatic attributes.  Made new layout items be assigned to the Layout Data category.  Made the Query items and Layout Data items in a Section be connected to the Section using bi-directional connections.

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-24 19:42:33 UTC (rev 180)
+++ trunk/source/PageView.js	2005-06-24 20:53:12 UTC (rev 181)
@@ -61,6 +61,7 @@
   var attributeCalledPluginView = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
   var attributeCalledSectionsInPage = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTIONS_IN_PAGE);
   var attributeCalledPageThisSectionAppearsOn = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_PAGE_THIS_SECTION_APPEARS_ON);
+  var attributeCalledSectionThisQueryBelongsTo = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_SECTION_THIS_QUERY_BELONGS_TO);
   var categoryCalledSection = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_SECTION);
   var tablePluginView = repository.getItemFromUuid(TablePlugin.UUID_FOR_PLUGIN_VIEW_TABLE);
   
@@ -73,7 +74,8 @@
 
   var newQuery = repository.newItem("New Query");
   newQuery.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
-  newSection.addEntryForAttribute(attributeCalledQuery, newQuery);
+  // newSection.addEntryForAttribute(attributeCalledQuery, newQuery);
+  newSection.addConnectionEntry(attributeCalledQuery, newQuery, attributeCalledSectionThisQueryBelongsTo);
   repository.endTransaction();
   return newSection;
 };

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-24 19:42:33 UTC (rev 180)
+++ trunk/source/SectionView.js	2005-06-24 20:53:12 UTC (rev 181)
@@ -73,6 +73,10 @@
 SectionView.UUID_FOR_ATTRIBUTE_LAYOUT_DATA       = "00040102-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_ATTRIBUTE_APPLIES_TO_PLUGIN = "00040103-ce7f-11d9-8cd5-0011113ae5d6";
 
+SectionView.UUID_FOR_ATTRIBUTE_SECTION_THIS_LAYOUT_DATA_BELONGS_TO = "00040104-ce7f-11d9-8cd5-0011113ae5d6";
+SectionView.UUID_FOR_ATTRIBUTE_SECTION_THIS_QUERY_BELONGS_TO = "00040105-ce7f-11d9-8cd5-0011113ae5d6";
+// TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS = "0004010a-ce7f-11d9-8cd5-0011113ae5d6";
+
 SectionView.UUID_FOR_CATEGORY_PLUGIN_VIEW        = "00040201-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_CATEGORY_LAYOUT_DATA        = "00040202-ce7f-11d9-8cd5-0011113ae5d6";
 
@@ -180,8 +184,11 @@
  */
 SectionView.prototype.getQuery = function () {
   var attributeCalledQuery = this.getWorld().getAttributeCalledQuery();
-  var listOfEntries = this.mySection.getEntriesForAttribute(attributeCalledQuery);
-  return (listOfEntries && listOfEntries[0]) ? listOfEntries[0].getValue() : null;
+  var queryEntry = this.mySection.getSingleEntryFromAttribute(attributeCalledQuery);
+  if (queryEntry) {
+    return queryEntry.getConnectedItem(this.mySection);
+  }
+  return null;
 };
 
 
@@ -280,12 +287,13 @@
   this.refresh();
 };
 
+
 /**
  * Returns layout data of this section for a particular plugin
  * Creates a the layout data item if doesn't exist
  *
- * @param inPluginType name of plugin
- * @return layout data of this section for a particular plugin
+ * @param    inPluginType    The name of plugin
+ * @return    layout data of this section for a particular plugin
  */
 SectionView.prototype._getLayoutDataForPlugin = function (inPluginType) {
   var repository = this.getWorld();
@@ -294,7 +302,7 @@
   var attrAppliesToPlugin = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_APPLIES_TO_PLUGIN);
   if (entriesLayoutData) {
     for (var i=0; i < entriesLayoutData.length; ++i) {
-      var layoutItem = entriesLayoutData[i].getValue();
+      var layoutItem = entriesLayoutData[i].getConnectedItem(this.mySection);
       var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attrAppliesToPlugin);
       Util.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
       if (entriesAppliesToPlugin[0].getValue() == inPluginType) {
@@ -302,15 +310,22 @@
       }
     }
   }
+  
   // layoutData not found, so create the item
+  var categoryCalledLayoutData = repository.getItemFromUuid(SectionView.UUID_FOR_CATEGORY_LAYOUT_DATA);
+  var attributeCalledCategory = repository.getAttributeCalledCategory();
+  var attributeCalledSectionThisLayoutDataBelongsTo = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_SECTION_THIS_LAYOUT_DATA_BELONGS_TO);
   repository.beginTransaction();
   layoutItem = repository.newItem("Layout data for " + inPluginType.getDisplayName() + " of " + this.mySection.getDisplayName());
+  layoutItem.addEntryForAttribute(attributeCalledCategory, categoryCalledLayoutData);
   layoutItem.addEntryForAttribute(attrAppliesToPlugin, inPluginType);
-  this.mySection.addEntryForAttribute(attrLayoutData,layoutItem,repository.getTypeCalledItem());
+  // this.mySection.addEntryForAttribute(attrLayoutData, layoutItem, repository.getTypeCalledItem());
+  this.mySection.addConnectionEntry(attrLayoutData, layoutItem, attributeCalledSectionThisLayoutDataBelongsTo);
   repository.endTransaction();
   return layoutItem;
 };
 
+
 /**
  * Re-creates all the HTML for the SectionView, and hands the HTML to the 
  * browser to be re-drawn.
@@ -372,18 +387,21 @@
 // -------------------------------------------------------------------
 
 /**
- * Called when user is editing the matching value edit field
+ * Called when user is editing the matching value edit field.
  * We want to trap a "return" key 
- * @scope public instance method
+ *
+ * @scope    public instance method
+ * @return   Returns true if the user pressed the return key, or false otherwise.
  */
-SectionView.prototype.keyPressOnMatchingValueField = function(evt,aTxtView) {
-  if (evt.keyCode == Util.ASCII_VALUE_FOR_RETURN) {
-    aTxtView.stopEditing();
+SectionView.prototype.keyPressOnMatchingValueField = function(event, aTextView) {
+  if (event.keyCode == Util.ASCII_VALUE_FOR_RETURN) {
+    aTextView.stopEditing();
     return true;
   }
   return false;
 };
 
+
 /**
  * Called when the query belong to this section has changed
  * @scope public instance method
@@ -398,6 +416,7 @@
   this.refresh();
 };
 
+
 /**
  * Called when the user clicks on any of the plugin option-select controls.
  * Called from an HTML option element within an HTML select element.

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-24 19:42:33 UTC (rev 180)
+++ trunk/source/TablePlugin.js	2005-06-24 20:53:12 UTC (rev 181)
@@ -50,7 +50,7 @@
 // -------------------------------------------------------------------
 // TablePlugin public class constants
 // -------------------------------------------------------------------
-TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS = "00040104-ce7f-11d9-8cd5-0011113ae5d6";
+TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS = "0004010a-ce7f-11d9-8cd5-0011113ae5d6";
 TablePlugin.ASCENDING_GIF = "ascending.gif";
 TablePlugin.DESCENDING_GIF = "descending.gif";
 

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 19:42:33 UTC (rev 180)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 20:53:12 UTC (rev 181)
@@ -599,7 +599,7 @@
     },
     // -----------------------------------------------------------------------
     { "Item": {                                               // Table Columns (Attribute)
-             "uuid": "00040104-ce7f-11d9-8cd5-0011113ae5d6" }
+             "uuid": "0004010a-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Item": {                                               // Plugin View (Category)
@@ -778,30 +778,78 @@
             "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Table Columns 
+    { "Entry": {                                              // Section this layout data belongs to 
              "uuid": "0040104a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Section this layout data belongs to (Attribute)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Table Columns" }
+            "value": "Section this layout data belongs to" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Attribute
              "uuid": "0040104b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Section this layout data belongs to (Attribute)
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              // Section
              "uuid": "0040104c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Section this layout data belongs to (Attribute)
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Section this query belongs to 
+             "uuid": "0040105a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query belongs to (Attribute)
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Section this query belongs to" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "0040105b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query belongs to (Attribute)
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // Section
+             "uuid": "0040105c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query belongs to (Attribute)
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Table Columns 
+             "uuid": "004010aa-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Table Columns" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "004010ab-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
+             "uuid": "004010ac-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Plugin View
              "uuid": "0040201a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name



From chaolam at sheep.berlios.de  Fri Jun 24 23:27:10 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Fri, 24 Jun 2005 23:27:10 +0200
Subject: [openrecord-svn] r182 - in trunk: . source
Message-ID: <200506242127.j5OLRA1b015930@sheep.berlios.de>

Author: chaolam
Date: 2005-06-24 23:27:09 +0200 (Fri, 24 Jun 2005)
New Revision: 182

Added:
   trunk/images/
Removed:
   trunk/source/images/
Log:
moving images to trunk too

Copied: trunk/images (from rev 181, trunk/source/images)



From chaolam at sheep.berlios.de  Sat Jun 25 01:20:45 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Sat, 25 Jun 2005 01:20:45 +0200
Subject: [openrecord-svn] r183 - in trunk/source: . model
Message-ID: <200506242320.j5ONKjVC031344@sheep.berlios.de>

Author: chaolam
Date: 2005-06-25 01:20:39 +0200 (Sat, 25 Jun 2005)
New Revision: 183

Modified:
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/base_style.css
   trunk/source/model/Entry.js
Log:
1) Added lozenge support for TextView. Short-term issue: Entries cannot be replaced by new value any more
2) Cosmetic CSS fixes
3) Numerous bug fixes

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-24 21:27:09 UTC (rev 182)
+++ trunk/source/PageView.js	2005-06-24 23:20:39 UTC (rev 183)
@@ -174,7 +174,7 @@
   
   for (var key in listOfEntriesForSections) {
     var entryForSection = listOfEntriesForSections[key];
-    var section = entryForSection.getConnectedItem();
+    var section = entryForSection.getConnectedItem(this.myPage);
     if (section) {
       this._buildNewSection(section);
     }

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-24 21:27:09 UTC (rev 182)
+++ trunk/source/RootView.js	2005-06-24 23:20:39 UTC (rev 183)
@@ -358,14 +358,7 @@
   newPage.addEntryForAttribute(attributeCalledCategory, categoryCalledPage);
   newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
 
-  // PENDING:
-  //   This line automatically creates one new section on the new page.  
-  //   I commented it out because somehow there was a bug with using it.
-  //   I can't figure out what causes the bug, but for some reason when
-  //   we create a section this way, the new section has no Layout Data,
-  //   and for some reason that causes the section never to be displayed
-  //   in the UI, which makes it harmless but completely useless.
-  // PageView.newSection(repository, newPage);
+  PageView.newSection(repository, newPage);
 
   repository.endTransaction();
   

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-24 21:27:09 UTC (rev 182)
+++ trunk/source/TablePlugin.js	2005-06-24 23:20:39 UTC (rev 183)
@@ -526,25 +526,32 @@
     var repository = this.getWorld();
     var attrTableColumns = repository.getItemFromUuid(TablePlugin.UUID_FOR_ATTRIBUTE_TABLE_COLUMNS);
     var entriesTableColumns = this._layout.getEntriesForAttribute(attrTableColumns);
+    var noStoredColumns = entriesTableColumns.length === 0;
     var changedAttribute = this.getWorld().getItemFromUuid(attributeUuid);
-    if (Util.removeObjectFromSet(changedAttribute,this._displayAttributes)) {
+    var removeAttribute = Util.removeObjectFromSet(changedAttribute,this._displayAttributes);
+    var typeCalledItem = repository.getTypeCalledItem();
+    if (removeAttribute) {
       for (var i=0;i < entriesTableColumns.length;++i) {
         if (changedAttribute == entriesTableColumns[i].getValue()) {
           entriesTableColumns[i].voteToDelete();
           break;
         }
       }
-      Util.assert(i < entriesTableColumns.length);
       delete this._hashTableOfEntries[attributeUuid];
     }
     else {
-      // var PENDING__JUNE_1_EXPERIMENT_BY_BRIAN = true;
       this._displayAttributes.push(changedAttribute);
-      this._layout.addEntryForAttribute(attrTableColumns,changedAttribute,repository.getTypeCalledItem());
-      // if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
       this._hashTableOfEntries[attributeUuid] = this.getWorld().getSuggestedItemsForAttribute(changedAttribute);
-      // }
     }
+    if (noStoredColumns) {
+      for (i=0;i<this._displayAttributes.length;++i) {
+        var anAttribute = this._displayAttributes[i];
+        this._layout.addEntryForAttribute(attrTableColumns,anAttribute,typeCalledItem);
+      }
+    }
+    else {
+      this._layout.addEntryForAttribute(attrTableColumns,changedAttribute,typeCalledItem);
+    }
     this._buildTable(true);
   }
 };

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-24 21:27:09 UTC (rev 182)
+++ trunk/source/TextView.js	2005-06-24 23:20:39 UTC (rev 183)
@@ -42,6 +42,7 @@
 // TextView public class constants
 // -------------------------------------------------------------------
 TextView.ELEMENT_CLASS_TEXT_BLOCK = "text_block"; 
+TextView.CSS_CLASS_VALUE_IS_ITEM = "textViewItem";
 TextView.PROVISIONAL_COLOR = '#999999';
 
 
@@ -83,6 +84,9 @@
   if (this._isProvisional) {
     this._provisionalText = inAttribute.getDisplayName();
   }
+  else if (inEntry && inEntry.getValue() instanceof Item) {
+    this._valueIsItem = true;
+  }
 }
 
 
@@ -159,6 +163,9 @@
   }
 };
 
+TextView.prototype._isLozenge = function() {
+  return this._valueIsItem && !this._alwaysUseEditField;
+};
 
 /**
  * Re-creates all the HTML for the TextView, and hands the HTML to the 
@@ -176,6 +183,9 @@
     this._oldColor = htmlElement.style.color;
     htmlElement.style.color = TextView.PROVISIONAL_COLOR;
   }
+  else if (this._isLozenge()) {
+    htmlElement.className += " " + TextView.CSS_CLASS_VALUE_IS_ITEM;
+  }
   this._textNode = document.createTextNode(textString);
   htmlElement.appendChild(this._textNode);
   htmlElement.onclick =  this.onClick.bindAsEventListener(this);
@@ -186,6 +196,9 @@
   this._myHasEverBeenDisplayedFlag = true;
 };
 
+TextView.prototype._canStartEditing = function() {
+  return (!this._isEditing  && !(this._valueIsItem && !this._alwaysUseEditField));
+};
 
 /**
  * Switch to edit text field for editing.
@@ -193,7 +206,8 @@
  * @scope    public instance method
  */
 TextView.prototype.startEditing = function(dontSelect) {
-  if (!this._isEditing) {
+  var canStartEditing = !(this._isEditing || this._isLozenge());
+  if (canStartEditing) {
     var editField = this._editField;
     if (!editField) {
       if (this._isMultiLine) {
@@ -352,6 +366,13 @@
       if (superview._provisionalItemJustBecomeReal) {
         superview._provisionalItemJustBecomeReal(this._item);
       }
+      if (value instanceof Item) {
+        this._valueIsItem = true;
+        var htmlElement = this.getHTMLElement();
+        if (this._isLozenge() && !htmlElement.className.match(TextView.CSS_CLASS_VALUE_IS_ITEM)) {
+          htmlElement.className += " " + TextView.CSS_CLASS_VALUE_IS_ITEM;
+        }
+      }
     }    
     this.getWorld().endTransaction();
   }

Modified: trunk/source/base_style.css
===================================================================
--- trunk/source/base_style.css	2005-06-24 21:27:09 UTC (rev 182)
+++ trunk/source/base_style.css	2005-06-24 23:20:39 UTC (rev 183)
@@ -439,8 +439,8 @@
 td.plain {
   font-family: Arial, Verdana, sans-serif;
   text-align: left;
-  border: none;
-  padding: 2px;
+  border: thin solid #CCC;
+  padding: 3px;
   margin: 0px;
 }
 
@@ -618,6 +618,13 @@
   /* overflow: visible; */
 }
 
+.textViewItem {
+	background-color:#DEE7F8;
+	padding: 1px;
+	border: thin solid #A4BDEC;	
+	-moz-border-radius: 6px; //WARNING: Mozilla only attribute. This just makes a rect, a rounded-rect
+}
+
 /* obsolete? 
 div.editmode .text_block:hover {
   background: rgb(100%, 100%, 70%);

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-24 21:27:09 UTC (rev 182)
+++ trunk/source/model/Entry.js	2005-06-24 23:20:39 UTC (rev 183)
@@ -279,6 +279,7 @@
  * @return   The item that is connected to the given item.
  */
 Entry.prototype.getConnectedItem = function (item) {
+  Util.assert(item instanceof Item);
   if (this.__myItem == item) {
     if (this._myType == this.getWorld().getTypeCalledItem()) {
       return this.__myValue;



From skinner at sheep.berlios.de  Sat Jun 25 02:18:10 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 25 Jun 2005 02:18:10 +0200
Subject: [openrecord-svn] r184 - in trunk: documentation source source/model
Message-ID: <200506250018.j5P0IA4f024417@sheep.berlios.de>

Author: skinner
Date: 2005-06-25 02:17:54 +0200 (Sat, 25 Jun 2005)
New Revision: 184

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/SectionView.js
   trunk/source/TextView.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
Updated the code so that (categories) and (items in categories) are related by bi-directional connections.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/documentation/release_planning.txt	2005-06-25 00:17:54 UTC (rev 184)
@@ -168,13 +168,15 @@
 chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
 brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
+brian  |          | done    |     Convert the code to use bi-directional references
+brian  | 0.25 IED |         |     Convert the axiomatic items to use bi-directional reference
 chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields
        |          |         | 14. BUG: problems with newlines and HTML characters in text strings
 brian  | 0.5  IED |         | 15. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
 -------+----------+---------+----------------------------------------------
-       |          |         | 16. Have text-entries and reference-entries look different
+chao   |          | done    | 16. Have text-entries and reference-entries look different
        |          |         | 17. Write one unit test that tests GUI code
        |          |         | 18. Write one performance test that measures the time some code takes
        |          |         | 19. Pick one file, and do a group code review on it

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/PageView.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -55,7 +55,6 @@
  * @param    inPage    The Page Item to insert the new section into
  */
 PageView.newSection = function (repository, inPage) {
-  var attributeCalledCategory = repository.getAttributeCalledCategory();
   var attributeCalledQuery = repository.getAttributeCalledQuery();
   var categoryCalledQuery = repository.getCategoryCalledQuery();
   var attributeCalledPluginView = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
@@ -67,14 +66,12 @@
   
   repository.beginTransaction();
   var newSection = repository.newItem("New Section");
-  newSection.addEntryForAttribute(attributeCalledCategory, categoryCalledSection);
-  // inPage.addEntryForAttribute(attributeCalledSectionsInPage, newSection);
+  newSection.assignToCategory(categoryCalledSection);
   inPage.addConnectionEntry(attributeCalledSectionsInPage, newSection, attributeCalledPageThisSectionAppearsOn);
   newSection.addEntryForAttribute(attributeCalledPluginView, tablePluginView);
 
   var newQuery = repository.newItem("New Query");
-  newQuery.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
-  // newSection.addEntryForAttribute(attributeCalledQuery, newQuery);
+  newQuery.assignToCategory(categoryCalledQuery);
   newSection.addConnectionEntry(attributeCalledQuery, newQuery, attributeCalledSectionThisQueryBelongsTo);
   repository.endTransaction();
   return newSection;

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/RootView.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -350,12 +350,9 @@
   var repository = this.getWorld();
   repository.beginTransaction();
   var newPage = repository.newItem("New Page");
-  // var shortName = repository.getAttributeCalledShortName();
-  var attributeCalledCategory = repository.getAttributeCalledCategory();
   var attributeCalledSummary = repository.getAttributeCalledSummary();
   var categoryCalledPage = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
-  // newPage.addEntryForAttribute(shortName, "New Page");
-  newPage.addEntryForAttribute(attributeCalledCategory, categoryCalledPage);
+  newPage.assignToCategory(categoryCalledPage);
   newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
 
   PageView.newSection(repository, newPage);

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/SectionView.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -313,11 +313,10 @@
   
   // layoutData not found, so create the item
   var categoryCalledLayoutData = repository.getItemFromUuid(SectionView.UUID_FOR_CATEGORY_LAYOUT_DATA);
-  var attributeCalledCategory = repository.getAttributeCalledCategory();
   var attributeCalledSectionThisLayoutDataBelongsTo = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_SECTION_THIS_LAYOUT_DATA_BELONGS_TO);
   repository.beginTransaction();
   layoutItem = repository.newItem("Layout data for " + inPluginType.getDisplayName() + " of " + this.mySection.getDisplayName());
-  layoutItem.addEntryForAttribute(attributeCalledCategory, categoryCalledLayoutData);
+  layoutItem.assignToCategory(categoryCalledLayoutData);
   layoutItem.addEntryForAttribute(attrAppliesToPlugin, inPluginType);
   // this.mySection.addEntryForAttribute(attrLayoutData, layoutItem, repository.getTypeCalledItem());
   this.mySection.addConnectionEntry(attrLayoutData, layoutItem, attributeCalledSectionThisLayoutDataBelongsTo);

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/TextView.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -84,7 +84,7 @@
   if (this._isProvisional) {
     this._provisionalText = inAttribute.getDisplayName();
   }
-  else if (inEntry && inEntry.getValue() instanceof Item) {
+  else if (inEntry && inEntry.getValue(this._item) instanceof Item) {
     this._valueIsItem = true;
   }
 }
@@ -324,9 +324,9 @@
           default:
             if (aType.isInCategory(categoryCalledCategory)) {
               value = repository.newItem(value);
-              value.addEntryForAttribute(repository.getAttributeCalledCategory(),aType);
+              value.assignToCategory(aType);
               if (this._suggestions) {
-                // add to new item to suggestion list if list is present
+                // add new item to suggestion list if list is present
                 // PENDING: should this be using an observer instead?
                 Util.addObjectToSet(value, this._suggestions);
               }

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-25 00:17:54 UTC (rev 184)
@@ -51,6 +51,10 @@
              "uuid": "0000100b-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Item": {                                               // Items in Category
+             "uuid": "0000100c-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Item": {                                               // Attribute
              "uuid": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -371,7 +375,31 @@
             "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // Items in Category
+             "uuid": "000100ca-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Items in Category
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Items in Category" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Attribute
+             "uuid": "000100cb-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Items in Category
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Text
+             "uuid": "000100cc-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Items in Category
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00001030-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Attribute
              "uuid": "0001010a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/model/Entry.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -301,10 +301,20 @@
  * Returns the value that this entry holds.
  *
  * @scope    public instance method
+ * @param    item    The item that this is an entry of. 
  * @return   The value this entry was initialized to hold.
  */
-Entry.prototype.getValue = function () {
-  return this.__myValue;
+Entry.prototype.getValue = function (item) {
+  if (Util.isArray(this.__myItem)) {
+    if (this.__myItem[0] == item) {
+      return this.__myItem[1];
+    }
+    if (this.__myItem[1] == item) {
+      return this.__myItem[0];
+    }
+    Util.assert(false, "Entry.getValue() was called on a connection entry, but was not passed an item as a parameter.");
+  }
+  return this.__myValue; 
 };
 
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/model/Item.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -268,6 +268,20 @@
   return entry;  
 };
 
+
+/**
+ * Given a category, this method puts the item in that category.
+ *
+ * @scope    public instance method
+ * @param    category    An item representing a category. 
+ */
+Item.prototype.assignToCategory = function (category) {
+  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+  var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
+  this.addConnectionEntry(attributeCalledCategory, category, attributeCalledItemsInCategory);
+};
+
+
 // -------------------------------------------------------------------
 // Accessor methods where the answer depends on the retrieval filter
 // -------------------------------------------------------------------
@@ -498,14 +512,13 @@
  */
 Item.prototype.hasAttributeValue = function (inAttribute, inValue) {
   Util.assert(inAttribute instanceof Item, inAttribute + ' is not an item');
-  //Util.assert(inValue);
   var entryList = this.getEntriesForAttribute(inAttribute);
 
   // look at all the entries this item's attribute is assigned to, 
   // and see if one of them is "inEntry"
   for (var key in entryList) {
     var entry = entryList[key];
-    if (entry.getValue() == inValue) {
+    if (entry.getValue(this) == inValue) {
       return true;
     }
   }

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/model/StubVirtualServer.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -614,14 +614,16 @@
   Util.assert(inQuery instanceof Item);
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
-
+  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+  var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
+  
   var listOfMatchingEntries = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
   var listOfMatchingAttrs = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
   if (!(listOfMatchingEntries && (listOfMatchingEntries.length > 0))) {return;} // query not fully formed, so nothing to add
   var matchingAttribute;
   if (listOfMatchingAttrs.length === 0) {
     // by default matching attribute is category
-    matchingAttribute = this.getWorld().getAttributeCalledCategory();
+    matchingAttribute = attributeCalledCategory;
   }
   else {
     Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
@@ -632,7 +634,11 @@
     var matchingEntry = listOfMatchingEntries[key];
     var match = matchingEntry.getValue();
     if (!inItem.hasAttributeValue(matchingAttribute, match)) {
-      inItem.addEntryForAttribute(matchingAttribute, match);
+      if ((matchingAttribute == attributeCalledCategory) && (match instanceof Item) && (match.isInCategory(categoryCalledCategory))) {
+        inItem.assignToCategory(match);
+      } else {
+        inItem.addEntryForAttribute(matchingAttribute, match);
+      }
     }
   }
 };

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-24 23:20:39 UTC (rev 183)
+++ trunk/source/model/World.js	2005-06-25 00:17:54 UTC (rev 184)
@@ -51,17 +51,18 @@
 
 World.UUID_FOR_USER_AMY                = "00001000-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_ATTRIBUTE_NAME          = "00001001-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_SHORT_NAME    = "00001002-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_SUMMARY       = "00001003-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_BODY          = "00001004-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_CATEGORY      = "00001005-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY         = "00001006-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE = "00001007-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_NAME                     = "00001001-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_SHORT_NAME               = "00001002-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_SUMMARY                  = "00001003-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_BODY                     = "00001004-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_CATEGORY                 = "00001005-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY                    = "00001006-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE     = "00001007-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE = "00001008-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_UNFILED           = "00001009-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE     = "0000100a-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE = "0000100b-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_UNFILED                  = "00001009-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE            = "0000100a-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE        = "0000100b-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_ITEMS_IN_CATEGORY        = "0000100c-ce7f-11d9-8cd5-0011113ae5d6";
 
 World.UUID_FOR_CATEGORY_BOOK           = "0000100e-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
 World.UUID_FOR_CATEGORY_MOVIE          = "0000100f-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
@@ -113,16 +114,17 @@
   server.setWorldAndLoadAxiomaticItems(this);
   
   // load the axiomatic attributes
-  this._attributeCalledName                  = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
-  this._attributeCalledShortName             = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SHORT_NAME);
-  this._attributeCalledSummary               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
-  this._attributeCalledCategory              = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
-  this._attributeCalledQuery                 = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
-  this._attributeCalledQueryMatchingValue = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE);
-  this._attributeCalledQueryMatchingAttribute     = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE);
-  this._attributeCalledUnfiled               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
-  this._attributeCalledExpectedType          = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
-  this._attributeCalledInverseAttribute         = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE);
+  this._attributeCalledName                   = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
+  this._attributeCalledShortName              = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SHORT_NAME);
+  this._attributeCalledSummary                = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
+  this._attributeCalledCategory               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
+  this._attributeCalledQuery                  = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
+  this._attributeCalledQueryMatchingValue     = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE);
+  this._attributeCalledQueryMatchingAttribute = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE);
+  this._attributeCalledUnfiled                = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
+  this._attributeCalledExpectedType           = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
+  this._attributeCalledInverseAttribute       = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE);
+  this._attributeCalledItemsInCategory        = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_ITEMS_IN_CATEGORY);
 
   // load the axiomatic categories
   this._categoryCalledAttribute   = server.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
@@ -131,13 +133,13 @@
   this._categoryCalledType        = server.getItemFromUuid(World.UUID_FOR_CATEGORY_TYPE);
 
   // load the axiomatic types
-  this._typeCalledText      = server.getItemFromUuid(World.UUID_FOR_TYPE_TEXT);
-  this._typeCalledNumber    = server.getItemFromUuid(World.UUID_FOR_TYPE_NUMBER);
-  this._typeCalledDate      = server.getItemFromUuid(World.UUID_FOR_TYPE_DATE);
-  this._typeCalledCheckMark = server.getItemFromUuid(World.UUID_FOR_TYPE_CHECK_MARK);
-  this._typeCalledUrl       = server.getItemFromUuid(World.UUID_FOR_TYPE_URL);
-  this._typeCalledItem      = server.getItemFromUuid(World.UUID_FOR_TYPE_ITEM);
-  this._typeCalledAnything  = server.getItemFromUuid(World.UUID_FOR_TYPE_ANYTHING);
+  this._typeCalledText       = server.getItemFromUuid(World.UUID_FOR_TYPE_TEXT);
+  this._typeCalledNumber     = server.getItemFromUuid(World.UUID_FOR_TYPE_NUMBER);
+  this._typeCalledDate       = server.getItemFromUuid(World.UUID_FOR_TYPE_DATE);
+  this._typeCalledCheckMark  = server.getItemFromUuid(World.UUID_FOR_TYPE_CHECK_MARK);
+  this._typeCalledUrl        = server.getItemFromUuid(World.UUID_FOR_TYPE_URL);
+  this._typeCalledItem       = server.getItemFromUuid(World.UUID_FOR_TYPE_ITEM);
+  this._typeCalledAnything   = server.getItemFromUuid(World.UUID_FOR_TYPE_ANYTHING);
   this._typeCalledConnection = server.getItemFromUuid(World.UUID_FOR_TYPE_CONNECTION);
 }
 
@@ -405,7 +407,11 @@
   return this._attributeCalledInverseAttribute;
 };
 
+World.prototype.getAttributeCalledItemsInCategory = function() {
+  return this._attributeCalledItemsInCategory;
+};
 
+
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic categories
 // -------------------------------------------------------------------
@@ -597,9 +603,8 @@
 World.prototype.newAttribute = function(name, observer) {
   this.beginTransaction();
   var item = this._virtualServer.newItem(name, observer);
-  var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledAttribute = this.getCategoryCalledAttribute();
-  item.addEntryForAttribute(attributeCalledCategory, categoryCalledAttribute);
+  item.assignToCategory(categoryCalledAttribute);
   this.endTransaction();
   return item;
 };
@@ -617,9 +622,8 @@
 World.prototype.newCategory = function(name, observer) {
   this.beginTransaction();
   var item = this._virtualServer.newItem(name, observer);
-  var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledCategory = this.getCategoryCalledCategory();
-  item.addEntryForAttribute(attributeCalledCategory, categoryCalledCategory);
+  item.assignToCategory(categoryCalledCategory);
   this.endTransaction();
   return item;
 };
@@ -637,9 +641,8 @@
   Util.assert(matchingAttribute instanceof Item);
   this.beginTransaction();
   var item = this._virtualServer.newItem("A query");
-  var attributeCalledCategory = this.getAttributeCalledCategory();
   var categoryCalledQuery = this.getCategoryCalledQuery();
-  item.addEntryForAttribute(attributeCalledCategory, categoryCalledQuery);
+  item.assignToCategory(categoryCalledQuery);
 
   var attributeCalledQueryMatchingAttribute = this.getAttributeCalledQueryMatchingAttribute();
   var attributeCalledQueryMatchingValue = this.getAttributeCalledQueryMatchingValue();
@@ -833,6 +836,7 @@
   return this.getItemsInCategory(categoryCalledAttribute, observer);
 };
 
+
 /**
  *
  */
@@ -840,7 +844,7 @@
   var listOfSuggestedItems = [];
   var key;
   var categoryCalledCategory = this.getCategoryCalledCategory();
-  var attributeCalledCategory = this.getAttributeCalledCategory();
+  // var attributeCalledCategory = this.getAttributeCalledCategory();
   var attributeCalledExpectedType = this.getAttributeCalledExpectedType();
   var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
   var listOfCategories = [];



From skinner at sheep.berlios.de  Sat Jun 25 02:49:44 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 25 Jun 2005 02:49:44 +0200
Subject: [openrecord-svn] r185 - in trunk: . source/repositories
Message-ID: <200506250049.j5P0nijc007866@sheep.berlios.de>

Author: skinner
Date: 2005-06-25 02:49:42 +0200 (Sat, 25 Jun 2005)
New Revision: 185

Added:
   trunk/dashboard.html
   trunk/dashboard.js
   trunk/source/repositories/dashboard.json
Log:
Made a dashboard.html demo document.

Added: trunk/dashboard.html
===================================================================
--- trunk/dashboard.html	2005-06-25 00:17:54 UTC (rev 184)
+++ trunk/dashboard.html	2005-06-25 00:49:42 UTC (rev 185)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Dashboard Demo Page</title>
+    <link rel="stylesheet" type="text/css" href="source/base_style.css" />
+    <script type="text/javascript" src="third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="source/Util.js"></script>
+    <script type="text/javascript" src="source/Cookie.js"></script>
+
+    <script type="text/javascript" src="source/View.js"></script>
+    <script type="text/javascript" src="source/RootView.js"></script>
+    <script type="text/javascript" src="source/ItemView.js"></script>
+    <script type="text/javascript" src="source/PageView.js"></script>
+    <script type="text/javascript" src="source/SectionView.js"></script>
+    <script type="text/javascript" src="source/LoginView.js"></script>
+    <script type="text/javascript" src="source/MultiEntriesView.js"></script>
+    <script type="text/javascript" src="source/NavbarView.js"></script>
+    <script type="text/javascript" src="source/TextView.js"></script>
+    <script type="text/javascript" src="source/PluginView.js"></script>
+    <script type="text/javascript" src="source/TablePlugin.js"></script>
+    <script type="text/javascript" src="source/OutlinePlugin.js"></script>
+    <script type="text/javascript" src="source/DetailPlugin.js"></script>
+    <script type="text/javascript" src="source/BarChartPlugin.js"></script>
+
+    <script type="text/javascript" src="source/model/Record.js"></script>
+    <script type="text/javascript" src="source/model/Ordinal.js"></script>
+    <script type="text/javascript" src="source/model/Vote.js"></script>
+    <script type="text/javascript" src="source/model/ContentRecord.js"></script>
+    <script type="text/javascript" src="source/model/Item.js"></script>
+    <script type="text/javascript" src="source/model/Entry.js"></script>
+    <script type="text/javascript" src="source/model/Transaction.js"></script>
+    <script type="text/javascript" src="source/model/World.js"></script>
+    <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
+    <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>
+    
+    <script type="text/javascript" src="dashboard.js"></script>
+  </head>
+  
+  <body>
+    <p>Sorry, the browser you're using doesn't support JavaScript. 
+    This page won't display correctly.</p>
+    
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+
+  </body>
+  
+</html>
+

Added: trunk/dashboard.js
===================================================================
--- trunk/dashboard.js	2005-06-25 00:17:54 UTC (rev 184)
+++ trunk/dashboard.js	2005-06-25 00:49:42 UTC (rev 185)
@@ -0,0 +1,86 @@
+/*****************************************************************************
+ dashboard.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Dependencies:
+//   World.js
+//   RootView.js
+// -------------------------------------------------------------------
+
+/**
+ * Called when the window first loads. Calls all the functions that do 
+ * initialization when the page is loaded.
+ *
+ * @scope    global function
+ */
+window.doOnloadActions = function() {  
+  var repositoryName = "dashboard";
+  var deltaVirtualServer = new DeltaVirtualServer(repositoryName);
+  var world = new World(deltaVirtualServer);
+  window.rootView = new RootView(world);
+  
+  Util.setTargetsForExternalLinks();
+};
+
+
+/**
+ * Called when the user leaves the browser window.  Save any unsaved changes,
+ * and prepare to exit.
+ *
+ * @scope    global function
+ */
+window.doOnunloadActions = function() {
+  // world.saveChanges();
+};
+
+window.doOnfocusActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onfocus");
+};
+
+window.doOnblurActions = function() {
+  // window.rootView.displayTextInDebugTextarea("onblur");
+};
+
+
+// -------------------------------------------------------------------
+// Register for window events
+// -------------------------------------------------------------------
+window.onload = window.doOnloadActions;
+window.onunload = window.doOnunloadActions;
+window.onerror = Util.handleError;
+window.onfocus = window.doOnfocusActions;
+window.onblur = window.doOnblurActions;
+// window.onresize = window.doOnresizeActions;
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/repositories/dashboard.json
===================================================================
--- trunk/source/repositories/dashboard.json	2005-06-25 00:17:54 UTC (rev 184)
+++ trunk/source/repositories/dashboard.json	2005-06-25 00:49:42 UTC (rev 185)
@@ -0,0 +1,42 @@
+// Repository records, in JSON format
+{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", 
+  "records": [
+  // =======================================================================
+  { "Transaction": [  // Home Page  
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // The OpenRecord Dogfood Site
+             "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Page
+             "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Dashboard Demo Page
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Dashboard
+             "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Dashboard Demo Page
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Dashboard" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Dashboard Demo Page
+             "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Dashboard Demo Page
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Dashboard Demo Page" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // This is a UI prototype of t...
+             "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "This is a UI prototype of the dashboard view, built using OpenRecord." }
+    } ]
+  }
\ No newline at end of file



From skinner at sheep.berlios.de  Mon Jun 27 08:41:11 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Mon, 27 Jun 2005 08:41:11 +0200
Subject: [openrecord-svn] r186 - in trunk: . source source/model source/repositories
Message-ID: <200506270641.j5R6fBha023326@sheep.berlios.de>

Author: skinner
Date: 2005-06-27 08:40:51 +0200 (Mon, 27 Jun 2005)
New Revision: 186

Removed:
   trunk/dashboard.js
   trunk/demo_page.js
   trunk/dogfood.js
Modified:
   trunk/dashboard.html
   trunk/demo_page.html
   trunk/dogfood.html
   trunk/source/RootView.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/World.js
   trunk/source/repositories/dashboard.json
   trunk/source/repositories/dogfood.json
Log:
Simplified the code required to create a new World and associating a repository with an HTML document.  Added a few lines of JavaScript to the HTML files, and deleted their companion JavaScript files.  Improved RootView so that it no longer hard-codes the UUID of the main page.  Fixed the repository files so that they no longer overlap in the new UUIDs the define.  Fixed the UUIDs in the repository files so that they reflect the user that created them.

Modified: trunk/dashboard.html
===================================================================
--- trunk/dashboard.html	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/dashboard.html	2005-06-27 06:40:51 UTC (rev 186)
@@ -43,7 +43,12 @@
     <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
     <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>
     
-    <script type="text/javascript" src="dashboard.js"></script>
+    <script type="text/javascript">
+      window.onload = function() {  
+        var world = new World();
+        new RootView(world);
+      };    
+    </script>
   </head>
   
   <body>

Deleted: trunk/dashboard.js
===================================================================
--- trunk/dashboard.js	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/dashboard.js	2005-06-27 06:40:51 UTC (rev 186)
@@ -1,86 +0,0 @@
-/*****************************************************************************
- dashboard.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   World.js
-//   RootView.js
-// -------------------------------------------------------------------
-
-/**
- * Called when the window first loads. Calls all the functions that do 
- * initialization when the page is loaded.
- *
- * @scope    global function
- */
-window.doOnloadActions = function() {  
-  var repositoryName = "dashboard";
-  var deltaVirtualServer = new DeltaVirtualServer(repositoryName);
-  var world = new World(deltaVirtualServer);
-  window.rootView = new RootView(world);
-  
-  Util.setTargetsForExternalLinks();
-};
-
-
-/**
- * Called when the user leaves the browser window.  Save any unsaved changes,
- * and prepare to exit.
- *
- * @scope    global function
- */
-window.doOnunloadActions = function() {
-  // world.saveChanges();
-};
-
-window.doOnfocusActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onfocus");
-};
-
-window.doOnblurActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onblur");
-};
-
-
-// -------------------------------------------------------------------
-// Register for window events
-// -------------------------------------------------------------------
-window.onload = window.doOnloadActions;
-window.onunload = window.doOnunloadActions;
-window.onerror = Util.handleError;
-window.onfocus = window.doOnfocusActions;
-window.onblur = window.doOnblurActions;
-// window.onresize = window.doOnresizeActions;
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/demo_page.html
===================================================================
--- trunk/demo_page.html	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/demo_page.html	2005-06-27 06:40:51 UTC (rev 186)
@@ -43,7 +43,12 @@
     <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
     <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>
     
-    <script type="text/javascript" src="demo_page.js"></script>
+    <script type="text/javascript">
+      window.onload = function() {  
+        var world = new World();
+        new RootView(world);
+      };    
+    </script>
   </head>
   
   <body>

Deleted: trunk/demo_page.js
===================================================================
--- trunk/demo_page.js	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/demo_page.js	2005-06-27 06:40:51 UTC (rev 186)
@@ -1,86 +0,0 @@
-/*****************************************************************************
- demo_page.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   World.js
-//   RootView.js
-// -------------------------------------------------------------------
-
-/**
- * Called when the window first loads. Calls all the functions that do 
- * initialization when the page is loaded.
- *
- * @scope    global function
- */
-window.doOnloadActions = function() {  
-  var repositoryName = "demo_page";
-  var deltaVirtualServer = new DeltaVirtualServer(repositoryName);
-  var world = new World(deltaVirtualServer);
-  window.rootView = new RootView(world);
-  
-  Util.setTargetsForExternalLinks();
-};
-
-
-/**
- * Called when the user leaves the browser window.  Save any unsaved changes,
- * and prepare to exit.
- *
- * @scope    global function
- */
-window.doOnunloadActions = function() {
-  // world.saveChanges();
-};
-
-window.doOnfocusActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onfocus");
-};
-
-window.doOnblurActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onblur");
-};
-
-
-// -------------------------------------------------------------------
-// Register for window events
-// -------------------------------------------------------------------
-window.onload = window.doOnloadActions;
-window.onunload = window.doOnunloadActions;
-window.onerror = Util.handleError;
-window.onfocus = window.doOnfocusActions;
-window.onblur = window.doOnblurActions;
-// window.onresize = window.doOnresizeActions;
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/dogfood.html
===================================================================
--- trunk/dogfood.html	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/dogfood.html	2005-06-27 06:40:51 UTC (rev 186)
@@ -43,7 +43,12 @@
     <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
     <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>
     
-    <script type="text/javascript" src="dogfood.js"></script>
+    <script type="text/javascript">
+      window.onload = function() {  
+        var world = new World();
+        new RootView(world);
+      };    
+    </script>
   </head>
   
   <body>

Deleted: trunk/dogfood.js
===================================================================
--- trunk/dogfood.js	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/dogfood.js	2005-06-27 06:40:51 UTC (rev 186)
@@ -1,86 +0,0 @@
-/*****************************************************************************
- dogfood.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   World.js
-//   RootView.js
-// -------------------------------------------------------------------
-
-/**
- * Called when the window first loads. Calls all the functions that do 
- * initialization when the page is loaded.
- *
- * @scope    global function
- */
-window.doOnloadActions = function() {  
-  var repositoryName = "dogfood";
-  var deltaVirtualServer = new DeltaVirtualServer(repositoryName);
-  var world = new World(deltaVirtualServer);
-  window.rootView = new RootView(world);
-  
-  Util.setTargetsForExternalLinks();
-};
-
-
-/**
- * Called when the user leaves the browser window.  Save any unsaved changes,
- * and prepare to exit.
- *
- * @scope    global function
- */
-window.doOnunloadActions = function() {
-  // world.saveChanges();
-};
-
-window.doOnfocusActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onfocus");
-};
-
-window.doOnblurActions = function() {
-  // window.rootView.displayTextInDebugTextarea("onblur");
-};
-
-
-// -------------------------------------------------------------------
-// Register for window events
-// -------------------------------------------------------------------
-window.onload = window.doOnloadActions;
-window.onunload = window.doOnunloadActions;
-window.onerror = Util.handleError;
-window.onfocus = window.doOnfocusActions;
-window.onblur = window.doOnblurActions;
-// window.onresize = window.doOnresizeActions;
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/source/RootView.js	2005-06-27 06:40:51 UTC (rev 186)
@@ -60,7 +60,7 @@
 RootView.UUID_FOR_CATEGORY_PAGE    = "00020000-ce7f-11d9-8cd5-0011113ae5d6";
 RootView.UUID_FOR_CATEGORY_SECTION = "00020100-ce7f-11d9-8cd5-0011113ae5d6";
 
-RootView.UUID_FOR_HOME_PAGE        = "00050000-ce7f-11d9-8cd5-0011113ae5d6";
+// RootView.UUID_FOR_HOME_PAGE        = "00050000-ce7f-11d9-8cd5-0011113ae5d6";
 
 
 // -------------------------------------------------------------------
@@ -78,6 +78,13 @@
  * @syntax   var rootView = new RootView()
  */
 function RootView(inWorld) {
+  window.onerror = Util.handleError;
+  // window.onunload = window.doOnunloadActions;
+  // window.onfocus = window.doOnfocusActions;
+  // window.onblur = window.doOnblurActions;
+  // window.onresize = window.doOnresizeActions;  
+  Util.setTargetsForExternalLinks();
+  
   RootView.ourSingleInstance = this;
    
   Util.assert(inWorld instanceof World);
@@ -91,10 +98,14 @@
   this._myHashTableOfItemViewsKeyedByUuid = {};
   this._myHashTableOfPageViewsKeyedByUuid = {};
   this._myCurrentContentView = null;
+  this._homePage = null;
   
   this.myHashTableOfPagesKeyedByUuid = {};
   var categoryCalledPage = this._myWorld.getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
   var listOfPages = this._myWorld.getItemsInCategory(categoryCalledPage);
+  if (listOfPages && listOfPages.length > 0) {
+    this._homePage = listOfPages[0];
+  }
   for (var key in listOfPages) {
     var page = listOfPages[key];
     this.myHashTableOfPagesKeyedByUuid[page._getUuid()] = page; 
@@ -179,7 +190,8 @@
  * @return   A page item.
  */
 RootView.prototype.getHomePage = function () {
-  return this.getWorld().getItemFromUuid(RootView.UUID_FOR_HOME_PAGE);
+  // return this.getWorld().getItemFromUuid(RootView.UUID_FOR_HOME_PAGE);
+  return this._homePage;
 };
 
 

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-27 06:40:51 UTC (rev 186)
@@ -1010,18 +1010,18 @@
   { "Transaction": [
     // -----------------------------------------------------------------------
     { "Item": {                                               // Brian Douglas Skinner
-             "uuid": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae" }
+             "uuid": "2c4fa780-dde4-11d9-9c71-000c414ce854" }
     },
     // -----------------------------------------------------------------------
     { "User": {                                               // Brian Douglas Skinner
-             "user": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae",
+             "user": "2c4fa780-dde4-11d9-9c71-000c414ce854",
          "password": "92eb5ffee6ae2fec3ad71c777531578f" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Brian Douglas Skinner
-             "uuid": "2c4fa781-dde4-11d9-9c71-8022ab6bc8ae",
+             "uuid": "2c4fa781-dde4-11d9-9c71-000c414ce854",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "2c4fa780-dde4-11d9-9c71-8022ab6bc8ae",  // Brian Douglas Skinner
+             "item": "2c4fa780-dde4-11d9-9c71-000c414ce854",  // Brian Douglas Skinner
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Brian Douglas Skinner" }
     }  ]

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/source/model/World.js	2005-06-27 06:40:51 UTC (rev 186)
@@ -107,7 +107,14 @@
   if (virtualServer) {
     server = virtualServer;
   } else {
-    server = new StubVirtualServer();
+    // server = new StubVirtualServer();
+    var filepath = window.location.pathname;
+    var arrayOfSegments = filepath.split('/');
+    var lastSegment = arrayOfSegments.pop();
+    var arrayWithFilenameAndExtension = lastSegment.split('.');
+    var filename = arrayWithFilenameAndExtension[0];
+    var repositoryName = filename;
+    server = new DeltaVirtualServer(repositoryName);
   }
   this._virtualServer = server;
 

Modified: trunk/source/repositories/dashboard.json
===================================================================
--- trunk/source/repositories/dashboard.json	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/source/repositories/dashboard.json	2005-06-27 06:40:51 UTC (rev 186)
@@ -5,37 +5,37 @@
   { "Transaction": [  // Home Page  
     // -----------------------------------------------------------------------
     { "Item": {                                               // The OpenRecord Dogfood Site
-             "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
+             "uuid": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Page
-             "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "8a3c6b5a-ce7f-11d9-8cd5-e24829d2f59b",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Dashboard Demo Page
+             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // Dashboard Demo Page
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Dashboard
-             "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "8a3c6b5b-ce7f-11d9-8cd5-e24829d2f59b",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Dashboard Demo Page
+             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // Dashboard Demo Page
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Dashboard" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Dashboard Demo Page
-             "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "8a3c6b5c-ce7f-11d9-8cd5-e24829d2f59b",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Dashboard Demo Page
+             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // Dashboard Demo Page
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Dashboard Demo Page" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // This is a UI prototype of t...
-             "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "8a3c6b5d-ce7f-11d9-8cd5-e24829d2f59b",
         "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // The OpenRecord Dogfood Site
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This is a UI prototype of the dashboard view, built using OpenRecord." }
     } ]

Modified: trunk/source/repositories/dogfood.json
===================================================================
--- trunk/source/repositories/dogfood.json	2005-06-25 00:49:42 UTC (rev 185)
+++ trunk/source/repositories/dogfood.json	2005-06-27 06:40:51 UTC (rev 186)
@@ -5,37 +5,37 @@
   { "Transaction": [  // Home Page  
     // -----------------------------------------------------------------------
     { "Item": {                                               // The OpenRecord Dogfood Site
-             "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
+             "uuid": "246ec320-ce7f-11d9-8cd5-000c414ce854" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Page
-             "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "246ec32a-ce7f-11d9-8cd5-000c414ce854",
         "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Dogfood
-             "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "246ec32b-ce7f-11d9-8cd5-000c414ce854",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Dogfood" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // The OpenRecord Dogfood Site
-             "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "246ec32c-ce7f-11d9-8cd5-000c414ce854",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "The OpenRecord Dogfood Site" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // This web site is a demo of ...
-             "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "246ec32d-ce7f-11d9-8cd5-000c414ce854",
         "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // The OpenRecord Dogfood Site
+             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This web site is where people working on OpenRecord keep track of the work being done." }
     } ]



From skinner at sheep.berlios.de  Mon Jun 27 23:29:54 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Mon, 27 Jun 2005 23:29:54 +0200
Subject: [openrecord-svn] r187 - in trunk/source: . model repositories
Message-ID: <200506272129.j5RLTsHx011217@sheep.berlios.de>

Author: skinner
Date: 2005-06-27 23:29:52 +0200 (Mon, 27 Jun 2005)
New Revision: 187

Modified:
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
   trunk/source/repositories/dashboard.json
   trunk/source/repositories/demo_page.json
   trunk/source/repositories/dogfood.json
Log:
Did a lot of work on the JSON repository files.  Created some new axiomatic categories (Tag, Person) and attributes.  Set inverse attributes for existing axiomatic attributes.  Replaced most old-style item references with bi-directional connections.

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/PageView.js	2005-06-27 21:29:52 UTC (rev 187)
@@ -55,7 +55,7 @@
  * @param    inPage    The Page Item to insert the new section into
  */
 PageView.newSection = function (repository, inPage) {
-  var attributeCalledQuery = repository.getAttributeCalledQuery();
+  var attributeCalledQuerySpec = repository.getAttributeCalledQuerySpec();
   var categoryCalledQuery = repository.getCategoryCalledQuery();
   var attributeCalledPluginView = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
   var attributeCalledSectionsInPage = repository.getItemFromUuid(PageView.UUID_FOR_ATTRIBUTE_SECTIONS_IN_PAGE);
@@ -72,7 +72,7 @@
 
   var newQuery = repository.newItem("New Query");
   newQuery.assignToCategory(categoryCalledQuery);
-  newSection.addConnectionEntry(attributeCalledQuery, newQuery, attributeCalledSectionThisQueryBelongsTo);
+  newSection.addConnectionEntry(attributeCalledQuerySpec, newQuery, attributeCalledSectionThisQueryBelongsTo);
   repository.endTransaction();
   return newSection;
 };

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/SectionView.js	2005-06-27 21:29:52 UTC (rev 187)
@@ -68,7 +68,7 @@
 SectionView.ELEMENT_ATTRIBUTE_SECTION_NUMBER = "section_number";
 // SectionView.ELEMENT_ATTRIBUTE_CELL_NUMBER = "cell_number";
 
-SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME       = "00040000-ce7f-11d9-8cd5-0011113ae5d6";
+// SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME       = "00040000-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW       = "00040101-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_ATTRIBUTE_LAYOUT_DATA       = "00040102-ce7f-11d9-8cd5-0011113ae5d6";
 SectionView.UUID_FOR_ATTRIBUTE_APPLIES_TO_PLUGIN = "00040103-ce7f-11d9-8cd5-0011113ae5d6";
@@ -183,8 +183,8 @@
  * @return   query associated to this section.
  */
 SectionView.prototype.getQuery = function () {
-  var attributeCalledQuery = this.getWorld().getAttributeCalledQuery();
-  var queryEntry = this.mySection.getSingleEntryFromAttribute(attributeCalledQuery);
+  var attributeCalledQuerySpec = this.getWorld().getAttributeCalledQuerySpec();
+  var queryEntry = this.mySection.getSingleEntryFromAttribute(attributeCalledQuerySpec);
   if (queryEntry) {
     return queryEntry.getConnectedItem(this.mySection);
   }
@@ -229,10 +229,7 @@
     selectedPluginItem = selectedPluginViewEntry.getValue();
     selectedPluginClass = SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[selectedPluginItem._getUuid()];
   } else {
-    // code to support legacy repository files
-    var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
-    selectedPluginItem = this.mySection.getSingleStringValueFromAttribute(attributeCalledPluginName);
-    selectedPluginClass = TablePlugin; // PENDING: Hack!
+    selectedPluginClass = TablePlugin; 
   }
   
   var sectionDiv = this.getHTMLElement();
@@ -430,8 +427,6 @@
   // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
   
   var selectElement = optionElement.parentNode;
-  // var newChoiceName = optionElement.value;
-  // var attributeCalledPluginName = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_NAME);
   var newChoiceUuid = optionElement.value;
   var attributeCalledPluginView = this.getWorld().getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_PLUGIN_VIEW);
   var newPluginViewItem = this.getWorld().getItemFromUuid(newChoiceUuid);

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-27 21:29:52 UTC (rev 187)
@@ -3,158 +3,176 @@
   "records": [
   // =======================================================================
   { "Transaction": [  // Axiomatic items
-    { "Item": {                                               // Amy ex machina
+    { "Item": {                                               // User: Amy ex machina
              "uuid": "00001000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Name
+    { "Item": {                                               // Attribute: Name
              "uuid": "00001001-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Short Name
+    { "Item": {                                               // Attribute: Short Name
              "uuid": "00001002-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Summary
+    { "Item": {                                               // Attribute: Summary
              "uuid": "00001003-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Body
+    { "Item": {                                               // Attribute: Body
              "uuid": "00001004-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Category
+    { "Item": {                                               // Attribute: Category
              "uuid": "00001005-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Query
+    { "Item": {                                               // Attribute: Query Spec.
              "uuid": "00001006-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Matching Value
+    { "Item": {                                               // Attribute: Matching Value
              "uuid": "00001007-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Matching Attribute
+    { "Item": {                                               // Attribute: Matching Attribute
              "uuid": "00001008-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Unfiled Entry
+    { "Item": {                                               // Attribute: Unfiled Entry
              "uuid": "00001009-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Expected Type
+    { "Item": {                                               // Attribute: Expected Type
              "uuid": "0000100a-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Inverse Attribute
+    { "Item": {                                               // Attribute: Inverse Attribute
              "uuid": "0000100b-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Items in Category
+    { "Item": {                                               // Attribute: Items in Category
              "uuid": "0000100c-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Attribute
-             "uuid": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+    { "Item": {                                               // Attribute: Tag
+             "uuid": "0000100d-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Category
-             "uuid": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+    { "Item": {                                               // Attribute: Tagged Items
+             "uuid": "0000100e-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Query
-             "uuid": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Type
-             "uuid": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
-    { "Item": {                                               // Text
+    { "Item": {                                               // Type: Text
              "uuid": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Number
+    { "Item": {                                               // Type: Number
              "uuid": "00001021-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Date
+    { "Item": {                                               // Type: Date
              "uuid": "00001022-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Check Mark
+    { "Item": {                                               // Type: Check Mark
              "uuid": "00001023-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // URL
+    { "Item": {                                               // Type: URL
              "uuid": "00001024-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Item
+    { "Item": {                                               // Type: Item
              "uuid": "00001030-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Anything
+    { "Item": {                                               // Type: Anything
              "uuid": "00001040-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Connection
+    { "Item": {                                               // Type: Connection
              "uuid": "00001050-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Amy ex machina
+    { "Item": {                                               // Category: Person
+             "uuid": "00001201-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category: Attribute
+             "uuid": "00001210-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category: Category
+             "uuid": "00001211-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category: Query Spec.
+             "uuid": "00001212-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category: Type
+             "uuid": "00001213-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Category: Tag
+             "uuid": "00001214-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Amy ex machina"
              "uuid": "0001000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // Amy ex machina
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // (Name)
+             "item": "00001000-ce7f-11d9-8cd5-0011113ae5d6",  // User: Amy ex machina
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Amy ex machina" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Name
+    { "Entry": {                                              // "Name"
              "uuid": "0001001a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // (Name)
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Name
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Name" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Name) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Name)
              "uuid": "0001001b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001001-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
+    { "Entry": {                                              // (Text)
              "uuid": "0001001c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // (Expected Type)
+             "item": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Name
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Short Name
+    { "Entry": {                                              // "Short Name"
              "uuid": "0001002a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Short Name
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Short Name" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Short Name) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Short Name)
              "uuid": "0001002b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001002-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Text
              "uuid": "0001002c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Short Name
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -162,23 +180,24 @@
     { "Entry": {                                              // Summary
              "uuid": "0001003a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Summary
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Summary" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Summary) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Summary)
              "uuid": "0001003b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001003-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Text
              "uuid": "0001003c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
+             "item": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Summary
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -186,23 +205,24 @@
     { "Entry": {                                              // Body
              "uuid": "0001004a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Body
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Body" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Body) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Body)
              "uuid": "0001004b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001004-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Text
              "uuid": "0001004c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Body
+             "item": "00001004-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Body
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -210,111 +230,116 @@
     { "Entry": {                                              // Category
              "uuid": "0001005a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Category
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Category" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Category) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Category)
              "uuid": "0001005b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Category
              "uuid": "0001005c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+             "item": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Category
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001211-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query
+    { "Entry": {                                              // Query Spec.
              "uuid": "0001006a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Query Spec.
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Query" }
+            "value": "Query Spec." }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Query Spec.) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Query Spec.)
              "uuid": "0001006b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query
+    { "Entry": {                                              // Query Spec.
              "uuid": "0001006c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Query Spec.
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001012-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001212-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Matching Value
              "uuid": "0001007a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
+             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Matching Value
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Matching Value" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Matching Value) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Matching Value)
              "uuid": "0001007b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001007-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Value
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001007-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Matching Attribute
              "uuid": "0001008a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Matching Attribute
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Matching Attribute" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Matching Attribute) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Matching Attribute)
              "uuid": "0001008b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001008-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Attribute
              "uuid": "0001008c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Matching Attribute
+             "item": "00001008-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Matching Attribute
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001210-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Unfiled Entry
              "uuid": "0001009a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Unfiled Entry
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Unfiled Entry" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Unfiled Entry) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Unfiled Entry)
              "uuid": "0001009b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001009-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Anything
              "uuid": "0001009c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Unfiled Entry
+             "item": "00001009-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Unfiled Entry
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001040-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -322,298 +347,419 @@
     { "Entry": {                                              // Expected Type
              "uuid": "000100aa-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Expected Type
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Expected Type" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Expected Type) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Expected Type)
              "uuid": "000100ab-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0000100a-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Category
              "uuid": "000100ac-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Expected Type
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001211-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Type
              "uuid": "000100ad-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Expected Type
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001213-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Inverse Attribute
              "uuid": "000100ba-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
+             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Inverse Attribute
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Inverse Attribute" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Inverse Attribute) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Inverse Attribute)
              "uuid": "000100bb-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // (Attribute: Inverse Attribute)
+             "uuid": "000100bc-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
+             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Inverse Attribute
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "0000100b-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "000100bc-ce7f-11d9-8cd5-0011113ae5d6",
+    { "Entry": {                                              // (Type: Attribute)
+             "uuid": "000100bd-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Inverse Attribute
+             "item": "0000100b-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Inverse Attribute
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001210-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Items in Category
+    { "Entry": {                                              // "Items in Category"
              "uuid": "000100ca-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Items in Category
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // (Name)
+             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Items in Category
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Items in Category" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Items in Category) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Items in Category)
              "uuid": "000100cb-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Items in Category
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0000100c-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
+    { "Entry": {                                              
+             // in item (Attribute: Category) assign (Attribute: Inverse Attribute) = (Attribute: Items in Category)
+             // in item (Attribute: Items in Category) assign (Attribute: Inverse Attribute) = (Attribute: Category)
              "uuid": "000100cc-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Items in Category
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // (Type: Item)
+             "uuid": "000100cd-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // (Expected Type)
+             "item": "0000100c-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Items in Category
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001030-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0001010a-ce7f-11d9-8cd5-0011113ae5d6",
+    { "Entry": {                                              // "Tag"
+             "uuid": "000100da-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
+             "item": "0000100d-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Tag
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Attribute" }
+            "value": "Tag" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001010b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001010-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+    { "Entry": {                                              
+             // in item (Attribute: Tag) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Tag)
+             "uuid": "000100db-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0000100d-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001011a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Category" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001011b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001011-ce7f-11d9-8cd5-0011113ae5d6",  // Category
+    { "Entry": {                                              // (Category: Tag)
+             "uuid": "000100dc-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100d-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Tag
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001214-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query
-             "uuid": "0001012a-ce7f-11d9-8cd5-0011113ae5d6",
+    { "Entry": {                                              // "Tagged Items"
+             "uuid": "000100ea-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
+             "item": "0000100e-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Tagged Items
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Query" }
+            "value": "Tagged Items" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001012b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001012-ce7f-11d9-8cd5-0011113ae5d6",  // Query
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+    { "Entry": {                                              
+             // in item (Attribute: Tagged Items) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Tagged Items)
+             "uuid": "000100eb-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0000100e-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
-             "uuid": "0001013a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
-             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Type" }
+    { "Entry": {                                              
+             // in item (Attribute: Tag) assign (Attribute: Inverse Attribute) = (Attribute: Tagged Items)
+             // in item (Attribute: Tagged Items) assign (Attribute: Inverse Attribute) = (Attribute: Tag)
+             "uuid": "000100ec-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0000100d-ce7f-11d9-8cd5-0011113ae5d6", "0000100e-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
-             "uuid": "0001013b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001013-ce7f-11d9-8cd5-0011113ae5d6",  // Type
+    { "Entry": {                                              // Item
+             "uuid": "000100ed-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100e-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Tagged Items
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001030-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Text
+    { "Entry": {                                              // "Text"
              "uuid": "0001020a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
+             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Type: Text
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Text" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: Text) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: Text)
              "uuid": "0001020b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // Text
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001020-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Number
+    { "Entry": {                                              // "Number"
              "uuid": "0001021a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
+             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Type: Number
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Number" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: Number) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: Number)
              "uuid": "0001021b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001021-ce7f-11d9-8cd5-0011113ae5d6",  // Number
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001021-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Date
+    { "Entry": {                                              // "Date"
              "uuid": "0001022a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
+             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Type: Date
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Date" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: Date) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: Date)
              "uuid": "0001022b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001022-ce7f-11d9-8cd5-0011113ae5d6",  // Date
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001022-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Check Mark
+    { "Entry": {                                              // "Check Mark"
              "uuid": "0001023a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
+             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Type: Check Mark
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Check Mark" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: Check Mark) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: Check Mark)
              "uuid": "0001023b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001023-ce7f-11d9-8cd5-0011113ae5d6",  // Check Mark
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001023-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // URL
+    { "Entry": {                                              // "URL"
              "uuid": "0001024a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
+             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // Type: URL
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "URL" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: URL) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: URL)
              "uuid": "0001024b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001024-ce7f-11d9-8cd5-0011113ae5d6",  // URL
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001024-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Item
+    { "Entry": {                                              // "Item"
              "uuid": "0001030a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
+             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Type: Item
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Item" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: Item) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: Item)
              "uuid": "0001030b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // Item
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001030-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Anything
+    { "Entry": {                                              // "Anything"
              "uuid": "0001040a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
+             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Type: Anything
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Anything" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: Anything) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: Anything)
              "uuid": "0001040b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001040-ce7f-11d9-8cd5-0011113ae5d6",  // Anything
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001040-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Connection
+    { "Entry": {                                              // "Connection"
              "uuid": "0001050a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001050-ce7f-11d9-8cd5-0011113ae5d6",  // Connection
+             "item": "00001050-ce7f-11d9-8cd5-0011113ae5d6",  // Type: Connection
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Connection" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Type
+    { "Entry": {                                              
+             // in item (Type: Connection) assign (Attribute: Category) = (Category: Type)
+             // in item (Category: Type) assign (Attribute: Items in Category) = (Type: Connection)
              "uuid": "0001050b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00001050-ce7f-11d9-8cd5-0011113ae5d6",  // Connection
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001013-ce7f-11d9-8cd5-0011113ae5d6" }
-    } ]
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001050-ce7f-11d9-8cd5-0011113ae5d6", "00001213-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Person"
+             "uuid": "0001201a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001201-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Person
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Person" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Category: Person) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Person)
+             "uuid": "0001201b-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001201-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Attribute"
+             "uuid": "0001210a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001210-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Attribute
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Attribute" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Category: Attribute) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Attribute)
+             "uuid": "0001210b-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001210-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Category"
+             "uuid": "0001211a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001211-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Category
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Category" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Category: Category) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Category)
+             "uuid": "0001211b-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001211-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Query Spec."
+             "uuid": "0001212a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001212-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Query Spec.
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Query Spec." }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Category: Query Spec.) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Query Spec.)
+             "uuid": "0001212b-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001212-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Type"
+             "uuid": "0001213a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001213-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Type
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Type" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Category: Type) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Type)
+             "uuid": "0001213b-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001213-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Tag"
+             "uuid": "0001214a-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "00001214-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Tag
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Tag" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Category: Tag) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Tag)
+             "uuid": "0001214b-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001214-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
   },
   // =======================================================================
   { "Transaction": [  // Fundamental view-level items
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Page
+    { "Item": {                                               // Category: Page
              "uuid": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Section
+    { "Item": {                                               // Category: Section
              "uuid": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Sections In Page
+    { "Item": {                                               // Attribute: Sections In Page
              "uuid": "00030000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Page this section appears on
+    { "Item": {                                               // Attribute: Page this section appears on
              "uuid": "00030001-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Plugin Name (Attribute)
-             "uuid": "00040000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
-    // -----------------------------------------------------------------------
     { "Item": {                                               // Plugin View (Attribute)
              "uuid": "00040101-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -626,6 +772,14 @@
              "uuid": "00040103-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Item": {                                               // Section this layout data belongs to (Attribute)
+             "uuid": "00040104-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
+    { "Item": {                                               // Section this query spec belongs to (Attribute)
+             "uuid": "00040105-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Item": {                                               // Table Columns (Attribute)
              "uuid": "0004010a-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -657,34 +811,36 @@
     { "Entry": {                                              // Page
              "uuid": "0020000a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
+             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Page
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Page" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
+    { "Entry": {                                              
+             // in item (Category: Page) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Page)
              "uuid": "0020000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00020000-ce7f-11d9-8cd5-0011113ae5d6",  // Page
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00020000-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Section
              "uuid": "0020100a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
+             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Section
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Section" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
+    { "Entry": {                                              
+             // in item (Category: Section) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Section)
              "uuid": "0020100b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00020100-ce7f-11d9-8cd5-0011113ae5d6",  // Section
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00020100-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Sections In Page
              "uuid": "0030000a-ce7f-11d9-8cd5-0011113ae5d6",
@@ -694,14 +850,32 @@
             "value": "Sections In Page" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Sections In Page) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Sections In Page)
              "uuid": "0030000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Sections In Page
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // Section
+             "uuid": "0030000c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00030000-ce7f-11d9-8cd5-0011113ae5d6",  // Sections In Page (Attribute)
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Attribute: Sections In Page) assign (Attribute: Inverse Attribute) = (Attribute: Page this section appears on)
+             // in item (Attribute: Page this section appears on) assign (Attribute: Inverse Attribute) = (Attribute: Sections In Page)
+             "uuid": "0030000d-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Page this section appears on
              "uuid": "0030001a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -710,28 +884,21 @@
             "value": "Page this section appears on" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Page this section appears on) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Page this section appears on)
              "uuid": "0030001b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00030001-ce7f-11d9-8cd5-0011113ae5d6",  // Page this section appears on
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00030001-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin Name
-             "uuid": "0040000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
-             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Plugin Name" }
-    },
-    // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
-             "uuid": "0040000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040000-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin Name (Attribute)
+    { "Entry": {                                              // Section
+             "uuid": "0030001c-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "00030001-ce7f-11d9-8cd5-0011113ae5d6",  // Page this section appears on (Attribute)
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Plugin View
@@ -742,13 +909,14 @@
             "value": "Plugin View" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Plugin View) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Plugin View)
              "uuid": "0040101b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040101-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Attribute)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040101-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Plugin View (Category)
              "uuid": "0040101c-ce7f-11d9-8cd5-0011113ae5d6",
@@ -766,13 +934,14 @@
             "value": "Layout Data" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Layout Data) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Layout Data)
              "uuid": "0040102b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040102-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Attribute)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Layout Data (Category)
              "uuid": "0040102c-ce7f-11d9-8cd5-0011113ae5d6",
@@ -790,13 +959,14 @@
             "value": "Applies To Plugin" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Applies To Plugin) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Applies To Plugin)
              "uuid": "0040103b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040103-ce7f-11d9-8cd5-0011113ae5d6",  // Applies To Plugin (Attribute)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040103-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Plugin View (Category)
              "uuid": "0040103c-ce7f-11d9-8cd5-0011113ae5d6",
@@ -814,42 +984,62 @@
             "value": "Section this layout data belongs to" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Section this layout data belongs to) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Section this layout data belongs to)
              "uuid": "0040104b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Section this layout data belongs to (Attribute)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040104-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Attribute: Layout Data) assign (Attribute: Inverse Attribute) = (Attribute: Section this layout data belongs to)
+             // in item (Attribute: Section this layout data belongs to) assign (Attribute: Inverse Attribute) = (Attribute: Layout Data)
+             "uuid": "0040104c-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Section
-             "uuid": "0040104c-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "0040104d-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "00040104-ce7f-11d9-8cd5-0011113ae5d6",  // Section this layout data belongs to (Attribute)
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Section this query belongs to 
+    { "Entry": {                                              // Section this query spec belongs to 
              "uuid": "0040105a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query belongs to (Attribute)
+             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query spec belongs to (Attribute)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Section this query belongs to" }
+            "value": "Section this query spec belongs to" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Section this query spec belongs to) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Section this query spec belongs to)
              "uuid": "0040105b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query belongs to (Attribute)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040105-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Attribute: Query Spec.) assign (Attribute: Inverse Attribute) = (Attribute: Section this query spec belongs to)
+             // in item (Attribute: Section this query spec belongs to) assign (Attribute: Inverse Attribute) = (Attribute: Query Spec.)
+             "uuid": "0040105c-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Section
-             "uuid": "0040105c-ce7f-11d9-8cd5-0011113ae5d6",
+             "uuid": "0040105d-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query belongs to (Attribute)
+             "item": "00040105-ce7f-11d9-8cd5-0011113ae5d6",  // Section this query spec belongs to (Attribute)
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00020100-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -862,20 +1052,21 @@
             "value": "Table Columns" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Attribute
+    { "Entry": {                                              
+             // in item (Attribute: Table Columns) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Table Columns)
              "uuid": "004010ab-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0004010a-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Attribute
              "uuid": "004010ac-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
              "item": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",  // Table Columns (Attribute)
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001010-ce7f-11d9-8cd5-0011113ae5d6" }
+            "value": "00001210-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Plugin View
@@ -886,13 +1077,14 @@
             "value": "Plugin View" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
+    { "Entry": {                                              
+             // in item (Category: Plugin View) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Plugin View)
              "uuid": "0040201b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040201-ce7f-11d9-8cd5-0011113ae5d6",  // Plugin View (Category)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040201-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Layout Data
              "uuid": "0040202a-ce7f-11d9-8cd5-0011113ae5d6",
@@ -902,13 +1094,14 @@
             "value": "Layout Data" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Category
+    { "Entry": {                                              
+             // in item (Category: Layout Data) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Layout Data)
              "uuid": "0040202b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040202-ce7f-11d9-8cd5-0011113ae5d6",  // Layout Data (Category)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00001011-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040202-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Table View
              "uuid": "0040301a-ce7f-11d9-8cd5-0011113ae5d6",
@@ -918,13 +1111,14 @@
             "value": "Table View" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
+    { "Entry": {                                              
+             // in item (Plugin View: Table View) assign (Attribute: Category) = (Category: Plugin View)
+             // in item (Category: Plugin View) assign (Attribute: Items in Category) = (Plugin View: Table View)
              "uuid": "0040301b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040301-ce7f-11d9-8cd5-0011113ae5d6", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Table
              "uuid": "0040301c-ce7f-11d9-8cd5-0011113ae5d6",
@@ -942,13 +1136,14 @@
             "value": "Outline View" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
+    { "Entry": {                                              
+             // in item (Plugin View: Outline View) assign (Attribute: Category) = (Category: Plugin View)
+             // in item (Category: Plugin View) assign (Attribute: Items in Category) = (Plugin View: Outline View)
              "uuid": "0040302b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040302-ce7f-11d9-8cd5-0011113ae5d6", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Outline
              "uuid": "0040302c-ce7f-11d9-8cd5-0011113ae5d6",
@@ -966,13 +1161,14 @@
             "value": "Detail View" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
+    { "Entry": {                                              
+             // in item (Plugin View: Detail View) assign (Attribute: Category) = (Category: Plugin View)
+             // in item (Category: Plugin View) assign (Attribute: Items in Category) = (Plugin View: Detail View)
              "uuid": "0040303b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040303-ce7f-11d9-8cd5-0011113ae5d6", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Outline
              "uuid": "0040303c-ce7f-11d9-8cd5-0011113ae5d6",
@@ -990,13 +1186,14 @@
             "value": "Bar Chart View" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Plugin View (Category)
+    { "Entry": {                                              
+             // in item (Plugin View: Bar Chart View) assign (Attribute: Category) = (Category: Plugin View)
+             // in item (Category: Plugin View) assign (Attribute: Items in Category) = (Plugin View: Bar Chart View)
              "uuid": "0040304b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00040201-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00040304-ce7f-11d9-8cd5-0011113ae5d6", "00040201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              // Bar Chart
              "uuid": "0040304c-ce7f-11d9-8cd5-0011113ae5d6",
@@ -1018,8 +1215,25 @@
          "password": "92eb5ffee6ae2fec3ad71c777531578f" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Person: Brian Douglas Skinner) assign (Attribute: Category) = (Category: Person)
+             // in item (Category: Person) assign (Attribute: Items in Category) = (Person: Brian Douglas Skinner)
+             "uuid": "2c4fa781-dde4-11d9-9c71-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["2c4fa780-dde4-11d9-9c71-000c414ce854", "00001201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Brian"
+             "uuid": "2c4fa782-dde4-11d9-9c71-000c414ce854",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "2c4fa780-dde4-11d9-9c71-000c414ce854",  // Brian Douglas Skinner
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Brian" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Brian Douglas Skinner
-             "uuid": "2c4fa781-dde4-11d9-9c71-000c414ce854",
+             "uuid": "2c4fa783-dde4-11d9-9c71-000c414ce854",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "2c4fa780-dde4-11d9-9c71-000c414ce854",  // Brian Douglas Skinner
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
@@ -1038,8 +1252,25 @@
          "password": null }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Person: Chih-Chao Lam) assign (Attribute: Category) = (Category: Person)
+             // in item (Category: Person) assign (Attribute: Items in Category) = (Person: Chih-Chao Lam)
+             "uuid": "90e02171-dde4-11d9-9c71-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["90e02170-dde4-11d9-9c71-e24829d2f59b", "00001201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Chao"
+             "uuid": "90e02172-dde4-11d9-9c71-e24829d2f59b",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "90e02170-dde4-11d9-9c71-e24829d2f59b",  // Chih-Chao Lam
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Chao" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Chih-Chao Lam
-             "uuid": "90e02171-dde4-11d9-9c71-e24829d2f59b",
+             "uuid": "90e02173-dde4-11d9-9c71-e24829d2f59b",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "90e02170-dde4-11d9-9c71-e24829d2f59b",  // Chih-Chao Lam
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
@@ -1058,8 +1289,25 @@
          "password": null }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Person: Mignon Belongie) assign (Attribute: Category) = (Category: Person)
+             // in item (Category: Person) assign (Attribute: Items in Category) = (Person: Mignon Belongie)
+             "uuid": "97d040f1-dde4-11d9-9c71-c103016080e1",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["97d040f0-dde4-11d9-9c71-c103016080e1", "00001201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Mignon"
+             "uuid": "97d040f2-dde4-11d9-9c71-c103016080e1",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "97d040f0-dde4-11d9-9c71-c103016080e1",  // Mignon Belongie
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Mignon" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Mignon Belongie
-             "uuid": "97d040f1-dde4-11d9-9c71-c103016080e1",
+             "uuid": "97d040f3-dde4-11d9-9c71-c103016080e1",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "97d040f0-dde4-11d9-9c71-c103016080e1",  // Mignon Belongie
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
@@ -1078,8 +1326,25 @@
          "password": null }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Person: Mimi Yin) assign (Attribute: Category) = (Category: Person)
+             // in item (Category: Person) assign (Attribute: Items in Category) = (Person: Mimi Yin)
+             "uuid": "9c3596e1-dde4-11d9-9c71-b6ac85cc6d5f",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f", "00001201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Mimi"
+             "uuid": "9c3596e2-dde4-11d9-9c71-b6ac85cc6d5f",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f",  // Mimi Yin
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Mimi" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Mimi Yin
-             "uuid": "9c3596e1-dde4-11d9-9c71-b6ac85cc6d5f",
+             "uuid": "9c3596e3-dde4-11d9-9c71-b6ac85cc6d5f",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "9c3596e0-dde4-11d9-9c71-b6ac85cc6d5f",  // Mimi Yin
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
@@ -1098,8 +1363,25 @@
          "password": null }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Person: Marty Betz) assign (Attribute: Category) = (Category: Person)
+             // in item (Category: Person) assign (Attribute: Items in Category) = (Person: Marty Betz)
+             "uuid": "a00bf341-dde4-11d9-9c71-dae11c269bc7",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a00bf340-dde4-11d9-9c71-dae11c269bc7", "00001201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Marty"
+             "uuid": "a00bf342-dde4-11d9-9c71-dae11c269bc7",
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
+             "item": "a00bf340-dde4-11d9-9c71-dae11c269bc7",  // Marty Betz
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Marty" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Marty Betz
-             "uuid": "a00bf341-dde4-11d9-9c71-dae11c269bc7",
+             "uuid": "a00bf343-dde4-11d9-9c71-dae11c269bc7",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
              "item": "a00bf340-dde4-11d9-9c71-dae11c269bc7",  // Marty Betz
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/model/StubVirtualServer.js	2005-06-27 21:29:52 UTC (rev 187)
@@ -45,23 +45,14 @@
 // DeltaVirtualServer public class constants
 // -------------------------------------------------------------------
 StubVirtualServer.JSON_MEMBER_FORMAT = "format";
-// StubVirtualServer.JSON_MEMBER_TIMESTAMP = "timestamp";
-// StubVirtualServer.JSON_MEMBER_DATA = "data";
 StubVirtualServer.JSON_MEMBER_RECORDS = "records";
-// StubVirtualServer.JSON_MEMBER_USERS = "users";
 
-// StubVirtualServer.JSON_FORMAT_2005_MARCH = "2005_MARCH_ITEM_CENTRIC_LIST";
-// StubVirtualServer.JSON_FORMAT_2005_APRIL = "2005_APRIL_CHRONOLOGICAL_LIST";
-// StubVirtualServer.JSON_FORMAT_2005_MAY_RECORDS = "2005_MAY_CHRONOLOGICAL_LIST";
-// StubVirtualServer.JSON_FORMAT_2005_MAY_USERS = "2005_MAY_USER_LIST";
 StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS = "2005_JUNE_CHRONOLOGICAL_LIST";
 
 StubVirtualServer.JSON_MEMBER_TYPE = "type";
 StubVirtualServer.JSON_MEMBER_VALUE = "value";
 
 StubVirtualServer.JSON_TYPE_TEXT_VALUE = "TextValue";
-// StubVirtualServer.JSON_TYPE_UUID = "Uuid";
-// StubVirtualServer.JSON_TYPE_FOREIGN_UUID = "ForeignUuid";
 StubVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
 StubVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
 StubVirtualServer.JSON_TYPE_DATE_VALUE = "DateValue";
@@ -82,7 +73,6 @@
 
 StubVirtualServer.JSON_MEMBER_ATTRIBUTE = "attribute";
 StubVirtualServer.JSON_MEMBER_PREVIOUS_VALUE = "previousEntry";
-// StubVirtualServer.JSON_MEMBER_USERSTAMP = "userstamp";
 StubVirtualServer.JSON_MEMBER_RECORD = "record";
 StubVirtualServer.JSON_MEMBER_ITEM = "item";
 StubVirtualServer.JSON_MEMBER_RETAIN_FLAG = "retainFlag";
@@ -400,12 +390,15 @@
   }
   this.__myHashTableOfUserAuthenticationInfo[newUser.getUniqueKeyString()] = md5Authentication;
 
+  this.__myCurrentUser = newUser;
+  var categoryCalledPerson = this.getWorld().getCategoryCalledPerson();
+  newUser.assignToCategory(categoryCalledPerson); 
   if (inName) { 
-    this.__myCurrentUser = newUser;
     var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
     var entry = newUser.addEntryForAttribute(attributeCalledName, inName);
-    this.__myCurrentUser = null;
   }
+  this.__myCurrentUser = null;
+  
   return newUser;
 };
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/model/World.js	2005-06-27 21:29:52 UTC (rev 187)
@@ -56,21 +56,16 @@
 World.UUID_FOR_ATTRIBUTE_SUMMARY                  = "00001003-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_BODY                     = "00001004-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_CATEGORY                 = "00001005-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_ATTRIBUTE_QUERY                    = "00001006-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_QUERY_SPEC               = "00001006-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE     = "00001007-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE = "00001008-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_UNFILED                  = "00001009-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE            = "0000100a-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE        = "0000100b-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_ATTRIBUTE_ITEMS_IN_CATEGORY        = "0000100c-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_TAG                      = "0000100d-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_ATTRIBUTE_TAGGED_ITEMS             = "0000100e-ce7f-11d9-8cd5-0011113ae5d6";
 
-World.UUID_FOR_CATEGORY_BOOK           = "0000100e-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
-World.UUID_FOR_CATEGORY_MOVIE          = "0000100f-ce7f-11d9-8cd5-0011113ae5d6";  // here as an example only
-World.UUID_FOR_CATEGORY_ATTRIBUTE      = "00001010-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_CATEGORY       = "00001011-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_QUERY          = "00001012-ce7f-11d9-8cd5-0011113ae5d6";
-World.UUID_FOR_CATEGORY_TYPE           = "00001013-ce7f-11d9-8cd5-0011113ae5d6";
-
 World.UUID_FOR_TYPE_TEXT               = "00001020-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_TYPE_NUMBER             = "00001021-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_TYPE_DATE               = "00001022-ce7f-11d9-8cd5-0011113ae5d6";
@@ -80,6 +75,14 @@
 World.UUID_FOR_TYPE_ANYTHING           = "00001040-ce7f-11d9-8cd5-0011113ae5d6";
 World.UUID_FOR_TYPE_CONNECTION         = "00001050-ce7f-11d9-8cd5-0011113ae5d6";
 
+World.UUID_FOR_CATEGORY_PERSON         = "00001201-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_ATTRIBUTE      = "00001210-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_CATEGORY       = "00001211-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_QUERY          = "00001212-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_TYPE           = "00001213-ce7f-11d9-8cd5-0011113ae5d6";
+World.UUID_FOR_CATEGORY_TAG            = "00001214-ce7f-11d9-8cd5-0011113ae5d6";
+
+
 // -------------------------------------------------------------------
 // World private class constants
 // -------------------------------------------------------------------
@@ -125,20 +128,16 @@
   this._attributeCalledShortName              = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SHORT_NAME);
   this._attributeCalledSummary                = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_SUMMARY);
   this._attributeCalledCategory               = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_CATEGORY);
-  this._attributeCalledQuery                  = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY);
+  this._attributeCalledQuerySpec              = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_SPEC);
   this._attributeCalledQueryMatchingValue     = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_VALUE);
   this._attributeCalledQueryMatchingAttribute = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_QUERY_MATCHING_ATTRIBUTE);
   this._attributeCalledUnfiled                = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_UNFILED);
   this._attributeCalledExpectedType           = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_EXPECTED_TYPE);
   this._attributeCalledInverseAttribute       = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_INVERSE_ATTRIBUTE);
   this._attributeCalledItemsInCategory        = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_ITEMS_IN_CATEGORY);
+  this._attributeCalledTag                    = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_TAG);
+  this._attributeCalledTaggedItems            = server.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_TAGGED_ITEMS);
 
-  // load the axiomatic categories
-  this._categoryCalledAttribute   = server.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
-  this._categoryCalledCategory    = server.getItemFromUuid(World.UUID_FOR_CATEGORY_CATEGORY);
-  this._categoryCalledQuery       = server.getItemFromUuid(World.UUID_FOR_CATEGORY_QUERY);
-  this._categoryCalledType        = server.getItemFromUuid(World.UUID_FOR_CATEGORY_TYPE);
-
   // load the axiomatic types
   this._typeCalledText       = server.getItemFromUuid(World.UUID_FOR_TYPE_TEXT);
   this._typeCalledNumber     = server.getItemFromUuid(World.UUID_FOR_TYPE_NUMBER);
@@ -148,6 +147,14 @@
   this._typeCalledItem       = server.getItemFromUuid(World.UUID_FOR_TYPE_ITEM);
   this._typeCalledAnything   = server.getItemFromUuid(World.UUID_FOR_TYPE_ANYTHING);
   this._typeCalledConnection = server.getItemFromUuid(World.UUID_FOR_TYPE_CONNECTION);
+
+  // load the axiomatic categories 
+  this._categoryCalledPerson      = server.getItemFromUuid(World.UUID_FOR_CATEGORY_PERSON);
+  this._categoryCalledAttribute   = server.getItemFromUuid(World.UUID_FOR_CATEGORY_ATTRIBUTE);
+  this._categoryCalledCategory    = server.getItemFromUuid(World.UUID_FOR_CATEGORY_CATEGORY);
+  this._categoryCalledQuery       = server.getItemFromUuid(World.UUID_FOR_CATEGORY_QUERY);
+  this._categoryCalledType        = server.getItemFromUuid(World.UUID_FOR_CATEGORY_TYPE);
+  this._categoryCalledTag         = server.getItemFromUuid(World.UUID_FOR_CATEGORY_TAG);
 }
 
 
@@ -390,8 +397,8 @@
   return this._attributeCalledCategory;
 };
 
-World.prototype.getAttributeCalledQuery = function() {
-  return this._attributeCalledQuery;
+World.prototype.getAttributeCalledQuerySpec = function() {
+  return this._attributeCalledQuerySpec;
 };
 
 World.prototype.getAttributeCalledQueryMatchingValue = function() {
@@ -418,27 +425,15 @@
   return this._attributeCalledItemsInCategory;
 };
 
-
-// -------------------------------------------------------------------
-// Accessor methods for axiomatic categories
-// -------------------------------------------------------------------
-World.prototype.getCategoryCalledAttribute = function() {
-  return this._categoryCalledAttribute;
+World.prototype.getAttributeCalledTag = function() {
+  return this._attributeCalledTag;
 };
 
-World.prototype.getCategoryCalledCategory = function() {
-  return this._categoryCalledCategory;
+World.prototype.getAttributeCalledTaggedItems = function() {
+  return this._attributeCalledTaggedItems;
 };
 
-World.prototype.getCategoryCalledQuery = function() {
-  return this._categoryCalledQuery;
-};
 
-World.prototype.getCategoryCalledType = function() {
-  return this._categoryCalledType;
-};
-
-
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic categories
 // -------------------------------------------------------------------
@@ -475,7 +470,34 @@
 };
 
 
+// -------------------------------------------------------------------
+// Accessor methods for axiomatic categories
+// -------------------------------------------------------------------
+World.prototype.getCategoryCalledPerson = function() {
+  return this._categoryCalledPerson;
+};
 
+World.prototype.getCategoryCalledAttribute = function() {
+  return this._categoryCalledAttribute;
+};
+
+World.prototype.getCategoryCalledCategory = function() {
+  return this._categoryCalledCategory;
+};
+
+World.prototype.getCategoryCalledQuery = function() {
+  return this._categoryCalledQuery;
+};
+
+World.prototype.getCategoryCalledType = function() {
+  return this._categoryCalledType;
+};
+
+World.prototype.getCategoryCalledType = function() {
+  return this._categoryCalledTag;
+};
+
+
 // -------------------------------------------------------------------
 // Login and logout methods
 // -------------------------------------------------------------------

Modified: trunk/source/repositories/dashboard.json
===================================================================
--- trunk/source/repositories/dashboard.json	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/repositories/dashboard.json	2005-06-27 21:29:52 UTC (rev 187)
@@ -8,34 +8,35 @@
              "uuid": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Page
+    { "Entry": {                                              
+             // in item (Page: Dashboard Demo Page) assign (Attribute: Category) = (Category: Page)
+             // in item (Category: Page) assign (Attribute: Items in Category) = (Page: Dashboard Demo Page)
              "uuid": "8a3c6b5a-ce7f-11d9-8cd5-e24829d2f59b",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // Dashboard Demo Page
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Dashboard
+    { "Entry": {                                              // "Dashboard"
              "uuid": "8a3c6b5b-ce7f-11d9-8cd5-e24829d2f59b",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // Dashboard Demo Page
+             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // (Page: Dashboard Demo Page)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Dashboard" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Dashboard Demo Page
+    { "Entry": {                                              // "Dashboard Demo Page"
              "uuid": "8a3c6b5c-ce7f-11d9-8cd5-e24829d2f59b",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // Dashboard Demo Page
+             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // (Page: Dashboard Demo Page)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Dashboard Demo Page" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // This is a UI prototype of t...
+    { "Entry": {                                              // "This is a UI prototype of t..."
              "uuid": "8a3c6b5d-ce7f-11d9-8cd5-e24829d2f59b",
         "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // The OpenRecord Dogfood Site
+             "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",  // (Page: Dashboard Demo Page)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This is a UI prototype of the dashboard view, built using OpenRecord." }
     } ]

Modified: trunk/source/repositories/demo_page.json
===================================================================
--- trunk/source/repositories/demo_page.json	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/repositories/demo_page.json	2005-06-27 21:29:52 UTC (rev 187)
@@ -4,38 +4,39 @@
   // =======================================================================
   { "Transaction": [  // Home Page  
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Welcome to the OpenRecord d...
+    { "Item": {                                               // (Page: Welcome to the OpenRecord d...)
              "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Page
+    { "Entry": {                                              
+             // in item (Page: Welcome to the OpenRecord d...) assign (Attribute: Category) = (Category: Page)
+             // in item (Category: Page) assign (Attribute: Items in Category) = (Page: Welcome to the OpenRecord d...)
              "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["00050000-ce7f-11d9-8cd5-0011113ae5d6", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // 1. Welcome!
+    { "Entry": {                                              // "Welcome!"
              "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // (Page: Welcome to the OpenRecord d...)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "1. Welcome!" }
+            "value": "Welcome!" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Welcome to the OpenRecord d...
+    { "Entry": {                                              // "Welcome to the OpenRecord d..."
              "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // (Page: Welcome to the OpenRecord d...)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Welcome to the OpenRecord demo!" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // This web site is a demo of ...
+    { "Entry": {                                              // "This web site is a demo of ..."
              "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // Welcome to the OpenRecord d...
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // (Page: Welcome to the OpenRecord d...)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
     } ]

Modified: trunk/source/repositories/dogfood.json
===================================================================
--- trunk/source/repositories/dogfood.json	2005-06-27 06:40:51 UTC (rev 186)
+++ trunk/source/repositories/dogfood.json	2005-06-27 21:29:52 UTC (rev 187)
@@ -4,38 +4,39 @@
   // =======================================================================
   { "Transaction": [  // Home Page  
     // -----------------------------------------------------------------------
-    { "Item": {                                               // The OpenRecord Dogfood Site
+    { "Item": {                                               // (Page: The OpenRecord Dogfood Site)
              "uuid": "246ec320-ce7f-11d9-8cd5-000c414ce854" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Page
+    { "Entry": {                                              
+             // in item (Page: The OpenRecord Dogfood Site) assign (Attribute: Category) = (Category: Page)
+             // in item (Category: Page) assign (Attribute: Items in Category) = (Page: The OpenRecord Dogfood Site)
              "uuid": "246ec32a-ce7f-11d9-8cd5-000c414ce854",
-        "attribute": "00001005-ce7f-11d9-8cd5-0011113ae5d6",  // Category
-             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
-             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
-            "value": "00020000-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["246ec320-ce7f-11d9-8cd5-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Dogfood
+    { "Entry": {                                              // "Dogfood"
              "uuid": "246ec32b-ce7f-11d9-8cd5-000c414ce854",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
+             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // (Page: The OpenRecord Dogfood Site)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Dogfood" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // The OpenRecord Dogfood Site
+    { "Entry": {                                              // "The OpenRecord Dogfood Site"
              "uuid": "246ec32c-ce7f-11d9-8cd5-000c414ce854",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
+             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // (Page: The OpenRecord Dogfood Site)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "The OpenRecord Dogfood Site" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // This web site is a demo of ...
+    { "Entry": {                                              // "This web site is a demo of ..."
              "uuid": "246ec32d-ce7f-11d9-8cd5-000c414ce854",
         "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // The OpenRecord Dogfood Site
+             "item": "246ec320-ce7f-11d9-8cd5-000c414ce854",  // (Page: The OpenRecord Dogfood Site)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This web site is where people working on OpenRecord keep track of the work being done." }
     } ]



From skinner at sheep.berlios.de  Tue Jun 28 04:29:02 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 28 Jun 2005 04:29:02 +0200
Subject: [openrecord-svn] r188 - in trunk/source: . model repositories
Message-ID: <200506280229.j5S2T2dQ026618@sheep.berlios.de>

Author: skinner
Date: 2005-06-28 04:28:55 +0200 (Tue, 28 Jun 2005)
New Revision: 188

Modified:
   trunk/source/NavbarView.js
   trunk/source/PageView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/Util.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/Record.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/repositories/dogfood.json
Log:
Switched to using short-name instead of name in lozenges and elsewhere. Added more info to the comments in the generated JSON records. Created an initial prototype of the Dogfood site.


Modified: trunk/source/NavbarView.js
===================================================================
--- trunk/source/NavbarView.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/NavbarView.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -81,17 +81,13 @@
   //get rid of all child nodes 
   divElement.innerHTML = '';
 
-  var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
   var listOfStrings = [];
 
   listOfStrings.push("<ul class=\"menu\">");
   
   for (var key in listOfPages) {
     var page = listOfPages[key];
-    var menuText = page.getSingleStringValueFromAttribute(attributeCalledShortName);
-    if (!menuText) {
-      menuText = page.getDisplayName();
-    }
+    var menuText = page.getDisplayString();
     var menuUrl = rootView.getUrlForItem(page);
     listOfStrings.push("<li class=\"menu_item\"><a href=\"" + menuUrl + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
   }

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/PageView.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -112,11 +112,7 @@
  * @return   A string that gives the name of the page.
  */
 PageView.prototype.getPageTitle = function () {
-  var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
-  var pageTitle = this.myPage.getSingleStringValueFromAttribute(attributeCalledShortName);
-  if (!pageTitle) {
-    pageTitle = this.myPage.getDisplayName();
-  }
+  var pageTitle = this.myPage.getDisplayString();
   return pageTitle;
 };
 

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/SectionView.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -263,11 +263,9 @@
     optionElement.selected = (selectedPluginClass == pluginClass);
     optionElement.value = pluginClass.getPluginItemUuid();
     var pluginItem = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
-    optionElement.text = pluginItem.getDisplayName();
-    // Util.addEventListener(optionElement, "click", SectionView.clickOnPluginSelectionMenu);
+    optionElement.text = pluginItem.getDisplayString();
     listener = this; 
     Util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
-    // optionElement.innerHTML = pluginName;
   }
   
   View.createAndAppendTextNode(controlArea," of items whose ");
@@ -312,7 +310,7 @@
   var categoryCalledLayoutData = repository.getItemFromUuid(SectionView.UUID_FOR_CATEGORY_LAYOUT_DATA);
   var attributeCalledSectionThisLayoutDataBelongsTo = repository.getItemFromUuid(SectionView.UUID_FOR_ATTRIBUTE_SECTION_THIS_LAYOUT_DATA_BELONGS_TO);
   repository.beginTransaction();
-  layoutItem = repository.newItem("Layout data for " + inPluginType.getDisplayName() + " of " + this.mySection.getDisplayName());
+  layoutItem = repository.newItem("Layout data for " + inPluginType.getDisplayString() + " of " + this.mySection.getDisplayString());
   layoutItem.assignToCategory(categoryCalledLayoutData);
   layoutItem.addEntryForAttribute(attrAppliesToPlugin, inPluginType);
   // this.mySection.addEntryForAttribute(attrLayoutData, layoutItem, repository.getTypeCalledItem());
@@ -352,10 +350,10 @@
   for (var key in listOfAttributes) {
     var anAttribute = listOfAttributes[key];
     optionElement = View.createAndAppendElement(selectElement, "option");
-    optionElement.selected = (matchingAttribute.getDisplayName() == anAttribute.getDisplayName());
+    optionElement.selected = (matchingAttribute.getDisplayString() == anAttribute.getDisplayString());
     optionElement.value = anAttribute._getUuid();
     optionElement.onclick = this.clickOnAttributeMenu.bindAsEventListener(this);
-    optionElement.text = anAttribute.getDisplayName();
+    optionElement.text = anAttribute.getDisplayString();
   }
   
   View.createAndAppendTextNode(this._queryEditSpan, " is ");
@@ -473,7 +471,7 @@
   var selectElement = optionElement.parentNode;
   var newChoiceUuid = optionElement.value;
   var newQueryMatchingAttribute = this.getWorld().getItemFromUuid(newChoiceUuid);
-  var newChoiceName = newQueryMatchingAttribute.getDisplayName();
+  var newChoiceName = newQueryMatchingAttribute.getDisplayString();
   
   var myQuery = this.getQuery();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
@@ -487,7 +485,7 @@
     Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
-  if (matchingAttribute.getDisplayName() != newChoiceName) {
+  if (matchingAttribute.getDisplayString() != newChoiceName) {
     if (listOfMatchingAttrs.length === 0) {
       myQuery.addEntryForAttribute(attributeCalledQueryMatchingAttribute, newQueryMatchingAttribute);
     } else {

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/TablePlugin.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -175,35 +175,11 @@
       if (attribute != attributeCalledCategory) {
         var attributeKeyString = attribute.getUniqueKeyString();
         hashTableOfAttributes[attributeKeyString] = attribute;
-        
         hashTableOfEntries[attributeKeyString] = this.getWorld().getSuggestedItemsForAttribute(attribute);
-/*
-        // build entries representing this attribute in this table 
-        // PENDING we may only want to do this for certain attributes
-        var itemEntries = contentItem.getEntriesForAttribute(attribute);
-        if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
-          hashTableOfEntries[attributeKeyString] = this.getWorld().getSuggestedItemsForAttribute(attribute);
-        } else {
-          if (!hashTableOfEntries[attributeKeyString]) {
-            hashTableOfEntries[attributeKeyString] = {};
-          }
-          for (var entryKey in itemEntries) {
-            var entry = itemEntries[entryKey];
-            hashTableOfEntries[attributeKeyString][entry.getUniqueKeyString()] = entry;
-          }
-        }
-*/
       }
     }
   }
   
-/*  if (PENDING__JUNE_1_EXPERIMENT_BY_BRIAN) {
-  } else {
-    for (attributeKey in hashTableOfEntries) {
-      hashTableOfEntries[attributeKey] = Util.hashTableValues(hashTableOfEntries[attributeKey]);
-    }
-  }
-*/
   this._hashTableOfEntries = hashTableOfEntries;
   if (Util.lengthOfHashTable(hashTableOfAttributes) < 1) {
     var attributeCalledName = this.getWorld().getAttributeCalledName();
@@ -229,7 +205,7 @@
   for (var i = 0; i < listOfAttributes.length; ++i) {
     optionElt = View.createAndAppendElement(selectElt,"option");
     if (Util.isObjectInSet(listOfAttributes[i],this._displayAttributes)) {optionElt.text = '*';}
-    optionElt.text += listOfAttributes[i].getDisplayName();
+    optionElt.text += listOfAttributes[i].getDisplayString();
     optionElt.value = listOfAttributes[i].getUniqueKeyString();
     optionElt.onclick = this._attributeEditorChanged.bindAsEventListener(this);
   }
@@ -341,12 +317,12 @@
   // add header row
   var headerRow = this.myTable.insertRow(0);
   var numCols = 0;
-  for (var i=0;i<this._displayAttributes.length;++i) {
+  for (var i=0; i<this._displayAttributes.length; ++i) {
     var attribute = this._displayAttributes[i];
     if (!this._sortAttribute) {this._sortAttribute = attribute;}
     var aCell = document.createElement("th");
-    var headerStr = attribute.getDisplayName();
-    aCell.appendChild(document.createTextNode(headerStr));
+    var headerString = attribute.getDisplayString();
+    aCell.appendChild(document.createTextNode(headerString));
     if (this._sortAttribute == attribute) {
       aCell.appendChild(this.getSortIcon());
     }

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/TextView.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -82,7 +82,7 @@
   
   this._isProvisional = inItem.isProvisional();
   if (this._isProvisional) {
-    this._provisionalText = inAttribute.getDisplayName();
+    this._provisionalText = inAttribute.getDisplayString();
   }
   else if (inEntry && inEntry.getValue(this._item) instanceof Item) {
     this._valueIsItem = true;
@@ -101,7 +101,7 @@
       var maxLength = 4;
       for (var i=0; i < this._suggestions.length;++i) {
         var aSuggestion = this._suggestions[i];
-        if (aSuggestion.getDisplayName().length > maxLength) {maxLength = aSuggestion.getDisplayName().length;}
+        if (aSuggestion.getDisplayString().length > maxLength) {maxLength = aSuggestion.getDisplayString().length;}
       }
       this._editField.size = maxLength;
     }
@@ -269,7 +269,7 @@
         newValueDisplayString = newValue;
       }
       else if (newValue instanceof Item) {
-        newValueDisplayString = newValue.getDisplayName();
+        newValueDisplayString = newValue.getDisplayString();
       }
       this._textNode.data = newValueDisplayString;
       this._suggestionBox = null;
@@ -608,8 +608,8 @@
  *
  */
 AttributeSuggestionBox._compareItemDisplayNames = function (itemOne, itemTwo) {
-  var displayNameOne = itemOne.getDisplayName();
-  var displayNameTwo = itemTwo.getDisplayName();
+  var displayNameOne = itemOne.getDisplayString();
+  var displayNameTwo = itemTwo.getDisplayString();
   if (displayNameOne == displayNameTwo) {
     return 0;
   } else {
@@ -682,12 +682,13 @@
     return true;
   }
   if (doSelectItem) {
-    this._myInputField.value = this._selectedItem.getDisplayName();
+    this._myInputField.value = this._selectedItem.getDisplayString();
     this._setShouldHide(true);
   }
   return false;
 };
 
+
 /**
  *
  */
@@ -710,9 +711,9 @@
  */
 AttributeSuggestionBox.prototype._clickOnSelection = function (inEventObject, item) {
   this._selectedItem = item;
-  //this._myInputField.value = item.getDisplayName();  // PENDING: need to pass back the item, not a string
 };
 
+
 /**
  *
  */
@@ -743,7 +744,7 @@
 
   for (key in this._listOfSuggestedItems) {
     item = this._listOfSuggestedItems[key];
-    var lowerCaseEntryString = item.getDisplayName().toLowerCase();
+    var lowerCaseEntryString = item.getDisplayString().toLowerCase();
     var lowerCaseInputString = partialInputString.toLowerCase();
     var numberOfCharactersToCompare = lowerCaseInputString.length;
     var shortEntryString = lowerCaseEntryString.substring(0, numberOfCharactersToCompare);
@@ -764,7 +765,7 @@
     var columnNumber = 0;
     for (key in listOfMatchingItems) {
       item = listOfMatchingItems[key];
-      var textNode = document.createTextNode(item.getDisplayName());
+      var textNode = document.createTextNode(item.getDisplayString());
       var row = table.insertRow(rowNumber);
       var cell = row.insertCell(columnNumber);
       row.className = (this._selectedItem == item) ? "selected":"";

Modified: trunk/source/Util.js
===================================================================
--- trunk/source/Util.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/Util.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -506,6 +506,16 @@
 
 
 // -------------------------------------------------------------------
+// Methods that operate on Dates
+// -------------------------------------------------------------------
+
+Util.getStringMonthDayYear = function(date) {
+  var returnString = Util.ABBREV_MONTHS_ARRAY[date.getMonth()] + ' ' + date.getDate() + ', ' + (date.getYear()+1900);
+  return returnString;
+};
+
+
+// -------------------------------------------------------------------
 // Methods for doing encryption
 // -------------------------------------------------------------------
 

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-06-28 02:28:55 UTC (rev 188)
@@ -27,7 +27,7 @@
              "uuid": "00001005-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Attribute: Query Spec.
+    { "Item": {                                               // Attribute: Query Spec
              "uuid": "00001006-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
@@ -107,13 +107,13 @@
              "uuid": "00001211-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Category: Query Spec.
+    { "Item": {                                               // Category: Query Spec
              "uuid": "00001212-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Item": {                                               // Category: Type
-             "uuid": "00001213-ce7f-11d9-8cd5-0011113ae5d6" }
-    },
+    // (Category: Type)
+    // 
+    { "Item": { "uuid": "00001213-ce7f-11d9-8cd5-0011113ae5d6" } },
     // -----------------------------------------------------------------------
     { "Item": {                                               // Category: Tag
              "uuid": "00001214-ce7f-11d9-8cd5-0011113ae5d6" }
@@ -252,27 +252,27 @@
             "value": "00001211-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query Spec.
+    { "Entry": {                                              // Query Spec
              "uuid": "0001006a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Query Spec.
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Query Spec
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Query Spec." }
+            "value": "Query Spec" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              
-             // in item (Attribute: Query Spec.) assign (Attribute: Category) = (Category: Attribute)
-             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Query Spec.)
+             // in item (Attribute: Query Spec) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Query Spec)
              "uuid": "0001006b-ce7f-11d9-8cd5-0011113ae5d6",
              "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
              "item": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Query Spec.
+    { "Entry": {                                              // Query Spec
              "uuid": "0001006c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
-             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Query Spec.
+             "item": "00001006-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Query Spec
              "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
             "value": "00001212-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -385,9 +385,9 @@
             "value": "Inverse Attribute" }
     },
     // -----------------------------------------------------------------------
+    // in item (Attribute: Inverse Attribute) assign (Attribute: Category) = (Category: Attribute)
+    // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Inverse Attribute)
     { "Entry": {                                              
-             // in item (Attribute: Inverse Attribute) assign (Attribute: Category) = (Category: Attribute)
-             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Inverse Attribute)
              "uuid": "000100bb-ce7f-11d9-8cd5-0011113ae5d6",
              "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
              "item": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
@@ -690,17 +690,17 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // "Query Spec."
+    { "Entry": {                                              // "Query Spec"
              "uuid": "0001212a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00001212-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Query Spec.
+             "item": "00001212-ce7f-11d9-8cd5-0011113ae5d6",  // Category: Query Spec
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
-            "value": "Query Spec." }
+            "value": "Query Spec" }
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              
-             // in item (Category: Query Spec.) assign (Attribute: Category) = (Category: Category)
-             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Query Spec.)
+             // in item (Category: Query Spec) assign (Attribute: Category) = (Category: Category)
+             // in item (Category: Category) assign (Attribute: Items in Category) = (Category: Query Spec)
              "uuid": "0001212b-ce7f-11d9-8cd5-0011113ae5d6",
              "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
              "item": ["00001212-ce7f-11d9-8cd5-0011113ae5d6", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
@@ -1028,8 +1028,8 @@
     },  
     // -----------------------------------------------------------------------
     { "Entry": {                                              
-             // in item (Attribute: Query Spec.) assign (Attribute: Inverse Attribute) = (Attribute: Section this query spec belongs to)
-             // in item (Attribute: Section this query spec belongs to) assign (Attribute: Inverse Attribute) = (Attribute: Query Spec.)
+             // in item (Attribute: Query Spec) assign (Attribute: Inverse Attribute) = (Attribute: Section this query spec belongs to)
+             // in item (Attribute: Section this query spec belongs to) assign (Attribute: Inverse Attribute) = (Attribute: Query Spec)
              "uuid": "0040105c-ce7f-11d9-8cd5-0011113ae5d6",
              "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
              "item": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"],

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -171,6 +171,24 @@
 
 
 /**
+ *
+ */
+DeltaVirtualServer.prototype._getTypedDisplayStringForItem = function (item) {
+  var returnString = "(";
+  if (item) {
+    Util.assert(item instanceof Item);
+    var category = item.getFirstCategory();
+    if (category) {
+      returnString += this.truncateString(category.getDisplayString("???")) + ": ";
+    }
+    returnString += this.truncateString(item.getDisplayString("???"));
+  }
+  returnString += ")";
+  return returnString;
+};
+
+  
+/**
  * Returns a big string, containing JavaScript "object literal"
  * representations of the records.
  *
@@ -187,6 +205,7 @@
   var itemDisplayNameSubstring;
   var entryDisplayNameSubstring;
   var listOfUsers = null;
+  var commentString;
 
   for (key in inListOfRecords) {
     var record = inListOfRecords[key];
@@ -199,13 +218,13 @@
 
     if (record instanceof Item) {
       var item = record;
-      listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ' + '{');
-      itemDisplayNameSubstring = this.truncateString(item.getDisplayName());
-      listOfStrings.push('                                               // ' + itemDisplayNameSubstring + '\n');
-      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '"');
-      listOfStrings.push('  }\n');
-      listOfStrings.push(indent + '}');
-     
+      listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(item) + '\n');
+      listOfStrings.push(indent + '//           by (' + item.getUserstamp().getDisplayString() + ')');
+      listOfStrings.push(' on (' + Util.getStringMonthDayYear(item.getGetCreationDate()) + ')\n');
+      listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ');
+      listOfStrings.push('{ "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + item._getUuid() + '" }');
+      listOfStrings.push(' }');
+      
       if (!listOfUsers) {
         listOfUsers = this.getUsers();
       }
@@ -251,87 +270,73 @@
 
     if (record instanceof Entry) {
       var entry = record;
-      listOfStrings.push(indent + '{ "' + StubVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{');
-      entryDisplayNameSubstring = this.truncateString(entry.getDisplayString());
-      listOfStrings.push('                                              // ' + entryDisplayNameSubstring + '\n');
-      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + entry._getUuid() + '",\n');
+      var entryType = entry.getType();
+      var typeToken = this._getTypeTokenFromType(entryType);
+      var typeUuid = entryType._getUuid();
+      commentString = "";
+      var entryString = "";
+      entryString += indent + '{ "' + StubVirtualServer.JSON_MEMBER_ENTRY_CLASS + '": ' + '{\n';
+      entryString += indent + '         "' + StubVirtualServer.JSON_MEMBER_UUID + '": "' + entry._getUuid() + '",\n';
       var previousEntry = entry.getPreviousEntry();
       if (previousEntry) {
-        listOfStrings.push(indent + '"' + StubVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n');
+        entryString += indent + '"' + StubVirtualServer.JSON_MEMBER_PREVIOUS_VALUE + '": "' + previousEntry._getUuid() + '",\n';
       }
-      var entryType = entry.getType();
-      var typeToken = this._getTypeTokenFromType(entryType);
-      // listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_TYPE + '": "' + typeToken + '",\n');
-      // if (typeToken == StubVirtualServer.JSON_TYPE_CONNECTION) {
-      var typeUuid = entryType._getUuid();
-      listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_TYPE + '": "' + typeUuid + '",');
-      listOfStrings.push('  // ' + typeToken + '\n');
+      entryString += indent + '         "' + StubVirtualServer.JSON_MEMBER_TYPE + '": "' + typeUuid + '",\n';
       if (typeUuid == World.UUID_FOR_TYPE_CONNECTION) {
         var pairOfItems = entry.getItem();
         var firstItem = pairOfItems[0];
         var secondItem = pairOfItems[1];
-        listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_ITEM + '": ["' + firstItem._getUuid() + '", "' + secondItem._getUuid() + '"],\n');
+        entryString += indent + '         "' + StubVirtualServer.JSON_MEMBER_ITEM + '": ["' + firstItem._getUuid() + '", "' + secondItem._getUuid() + '"],\n';
         var pairOfAttributes = entry.getAttribute();
         var firstAttribute = pairOfAttributes[0];
         var secondAttribute = pairOfAttributes[1];
-        listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": ["' + firstAttribute._getUuid() + '", "' + secondAttribute._getUuid() + '"]');
+        entryString += indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": ["' + firstAttribute._getUuid() + '", "' + secondAttribute._getUuid() + '"]';
+        commentString += indent + '// On item ' + this._getTypedDisplayStringForItem(firstItem);
+        commentString += " assign " + this._getTypedDisplayStringForItem(firstAttribute);
+        commentString += " = " + this._getTypedDisplayStringForItem(secondItem) + "\n";
+        commentString += indent + '// On item ' + this._getTypedDisplayStringForItem(secondItem);
+        commentString += " assign " + this._getTypedDisplayStringForItem(secondAttribute);
+        commentString += " = " + this._getTypedDisplayStringForItem(firstItem) + "\n";
       } else {
         var attribute = entry.getAttribute();
-        if (attribute) {
-          var attributeName = attribute.getDisplayName();
-          listOfStrings.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",');
-          var attributeNameSubstring = this.truncateString(attributeName);
-          listOfStrings.push('  // ' + attributeNameSubstring + '\n');
-        }
-        listOfStrings.push(indent + '         "' + StubVirtualServer.JSON_MEMBER_ITEM + '": "' + entry.getItem()._getUuid() + '",');
-        itemDisplayNameSubstring = this.truncateString(entry.getItem().getDisplayName());
-        listOfStrings.push('  // ' + itemDisplayNameSubstring + '\n');
+        entryString += indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": "' + attribute._getUuid() + '",\n';
+        entryString += indent + '         "' + StubVirtualServer.JSON_MEMBER_ITEM + '": "' + entry.getItem()._getUuid() + '",\n';
         var contentData = entry.getValue();
         
         var valueString = null;
-/*
-        switch (typeToken) {
-          case StubVirtualServer.JSON_TYPE_NUMBER_VALUE: 
-            valueString = contentData;
-            break;
-          case StubVirtualServer.JSON_TYPE_TEXT_VALUE: 
-            valueString = '"' + contentData + '"';
-            break;
-          case StubVirtualServer.JSON_TYPE_DATE_VALUE: 
-            valueString = '"' + contentData.toString() + '"';
-            break;
-          case StubVirtualServer.JSON_TYPE_RELATED_UUID: 
-            valueString = '"' + contentData._getUuid() + '"';
-            break;
-          default:
-            Util.assert(false, "no such type: " + typeToken);
-        }
-*/
+        var valueComment = null;
         switch (typeUuid) {
           case World.UUID_FOR_TYPE_NUMBER: 
-            valueString = contentData;
+            valueString = '"' + contentData + '"';
+            valueComment = contentData;
             break;
           case World.UUID_FOR_TYPE_TEXT: 
             valueString = '"' + contentData + '"';
+            valueComment = this.truncateString(valueString);
             break;
           case World.UUID_FOR_TYPE_DATE: 
             valueString = '"' + contentData.toString() + '"';
+            valueComment = valueString;
             break;
           case World.UUID_FOR_TYPE_ITEM: 
             valueString = '"' + contentData._getUuid() + '"';
+            valueComment = this._getTypedDisplayStringForItem(contentData);
             break;
           default:
             Util.assert(false, "no such type: " + typeToken);
         }
-        listOfStrings.push(indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString + '');
+        entryString += indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString;
+        commentString += indent + '// On item ' + this._getTypedDisplayStringForItem(entry.getItem());
+        commentString += " assign " + this._getTypedDisplayStringForItem(attribute);
+        commentString += " = " + valueComment + "\n";
       }
+      commentString += indent + '//           by (' + entry.getUserstamp().getDisplayString() + ')';
+      commentString += ' on (' + Util.getStringMonthDayYear(entry.getGetCreationDate()) + ')\n';
+      listOfStrings.push(commentString);
+      listOfStrings.push(entryString);
       listOfStrings.push('  }\n');
       listOfStrings.push(indent + '}');
     }
-    
-    // var userDisplayName = record.getUserstamp().getDisplayName();
-    // var userDisplayNameSubstring = this.truncateString(userDisplayName);
-    // listOfStrings.push('  // by (' + userDisplayNameSubstring + ')\n');
   }
   
   var finalString = listOfStrings.join("");

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/model/Entry.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -335,21 +335,21 @@
       break;
     case this.getWorld().getTypeCalledDate():
       var aDate = this.__myValue;
-      returnString = Util.ABBREV_MONTHS_ARRAY[aDate.getMonth()] + ' ' + aDate.getDate() + ', '+ (aDate.getYear()+1900);
+      returnString = Util.getStringMonthDayYear(aDate);
       break;
     case this.getWorld().getTypeCalledItem():
-      returnString = this.__myValue.getDisplayName();
+      returnString = this.__myValue.getDisplayString();
       break;
     case this.getWorld().getTypeCalledConnection():
       var firstItem = this.__myItem[0];
       var secondItem = this.__myItem[1];
       if (myItem) {
-        if (myItem == firstItem) {returnString = secondItem.getDisplayName();}
-        else if (myItem == secondItem) {returnString = firstItem.getDisplayName();}
+        if (myItem == firstItem) {returnString = secondItem.getDisplayString();}
+        else if (myItem == secondItem) {returnString = firstItem.getDisplayString();}
         else {Util.assert(false, "myItem isn't part of this Entry");}
       }
       else {
-        returnString = 'connection between "' + firstItem.getDisplayName() + '" and "' + secondItem.getDisplayName() + '"';
+        returnString = 'connection between "' + firstItem.getDisplayString() + '" and "' + secondItem.getDisplayString() + '"';
       }
       break;
   }

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/model/Item.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -382,6 +382,20 @@
 };
 
 
+/**
+ *
+ */
+Item.prototype.getFirstCategory = function () {
+  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+  var listOfCategoryEntries = this.getEntriesForAttribute(attributeCalledCategory);
+  var returnEntry = null;
+  if (listOfCategoryEntries && listOfCategoryEntries.length > 0) {
+    var firstEntry = listOfCategoryEntries[0];
+    var returnCategory = firstEntry.getValue(this);
+  }
+  return returnCategory;
+};
+
 // -------------------------------------------------------------------
 // Attribute accessor methods
 // -------------------------------------------------------------------
@@ -398,7 +412,7 @@
 
 
 /**
- * Returns a display name for the item.
+ * Returns a string with the display name of the item.
  *
  * @scope    public instance method
  * @param    defaultString    Optional.  This string will be returned if the item has no display name. 
@@ -416,6 +430,32 @@
   
 
 /**
+ * Returns a string with either the short name of the item or the name of the item.
+ *
+ * @scope    public instance method
+ * @param    defaultString    Optional.  This string will be returned if the item has no short name or name. 
+ * @return   A string with a name for the item.
+ */
+Item.prototype.getDisplayString = function (defaultString) {
+  var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
+  var shortNameString = this.getSingleStringValueFromAttribute(attributeCalledShortName);
+  if (!shortNameString) {
+    shortNameString = this.getDisplayName(defaultString);
+  }
+  return shortNameString;
+};
+
+
+/**
+ *
+ */
+Item.prototype.getDisplayStringForEntry = function (entry) {
+  Util.assert(entry instanceof Entry);
+  return entry.getDisplayString(this);
+};
+
+
+/**
  * Returns a list of the entries assigned to the "name" attribute.
  *
  * @scope    public instance method
@@ -470,15 +510,6 @@
 
 
 /**
- *
- */
-Item.prototype.getDisplayStringForEntry = function (entry) {
-  Util.assert(entry instanceof Entry);
-  return entry.getDisplayString(this);
-};
-
-
-/**
  * Returns a string describing the item.
  *
  * @scope    public instance method
@@ -491,10 +522,10 @@
   for (var key in listOfCategories) {
     var category = listOfCategories[key];
     if (category instanceof Item) {
-      returnString += "(" + category.getDisplayName() + ")";
+      returnString += "(" + category.getDisplayString() + ")";
     }
   }
-  returnString += " \"" + this.getDisplayName() + "\"" + "]";
+  returnString += " \"" + this.getDisplayString() + "\"" + "]";
   return returnString; 
 };
 

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/model/Record.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -104,7 +104,7 @@
   }
   var allUsers = this._world.getUsers();
   var myPseudonode = this._uuid.split('-')[4];
-  for (key in allUsers) {
+  for (var key in allUsers) {
     var usersPseudonode = allUsers[key]._getUuid().split('-')[4];
     if (usersPseudonode == myPseudonode) {
       this._creationUserstamp = allUsers[key];
@@ -116,10 +116,10 @@
 
 
 /**
- * Returns a Date object with the creation timestamp for this item.
+ * Returns ???.
  *
  * @scope    public instance method
- * @return   A Date object.
+ * @return   ???.
  */
 Record.prototype.getTimestamp = function() {
   if (this._creationTimestamp) {
@@ -157,6 +157,18 @@
 };
 
 
+/**
+ * Returns a Date object with the creation timestamp for this item.
+ *
+ * @scope    public instance method
+ * @return   A Date object.
+ */
+Record.prototype.getGetCreationDate = function() {
+  var date = new Date(this.getTimestamp());
+  return date;
+};
+
+
 // -------------------------------------------------------------------
 // Package/module methods           
 // -------------------------------------------------------------------

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/model/StubVirtualServer.js	2005-06-28 02:28:55 UTC (rev 188)
@@ -849,7 +849,7 @@
       return token;
     }
   }
-  Util.assert(false, "no such type: " + inType.getDisplayName());
+  Util.assert(false, "no such type: " + inType.getDisplayString());
 };
 
 

Modified: trunk/source/repositories/dogfood.json
===================================================================
--- trunk/source/repositories/dogfood.json	2005-06-27 21:29:52 UTC (rev 187)
+++ trunk/source/repositories/dogfood.json	2005-06-28 02:28:55 UTC (rev 188)
@@ -40,4 +40,2124 @@
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This web site is where people working on OpenRecord keep track of the work being done." }
     } ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Page: People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "82ca34a0-e775-11d9-89df-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Page: People) assign (Attribute: Name) = "People"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a0-e775-11d9-89df-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "82ca34a0-e775-11d9-89df-000c414ce854",
+            "value": "People"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: People) assign (Attribute: Category) = (Category: Page)
+    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a1-e775-11d9-89df-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["82ca34a0-e775-11d9-89df-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: People) assign (Attribute: Summary) = "This is the people page."
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a2-e775-11d9-89df-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "82ca34a0-e775-11d9-89df-000c414ce854",
+            "value": "This is the people page."  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: List of People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "82cca5a3-e775-11d9-89df-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of People) assign (Attribute: Name) = "List of People"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a4-e775-11d9-89df-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "82cca5a3-e775-11d9-89df-000c414ce854",
+            "value": "List of People"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of People) assign (Attribute: Category) = (Category: Section)
+    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a5-e775-11d9-89df-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["82cca5a3-e775-11d9-89df-000c414ce854", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: People) assign (Attribute: Sections In Page) = (Section: List of People)
+    // On item (Section: List of People) assign (Attribute: Page this section appears on) = (Page: People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a6-e775-11d9-89df-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["82ca34a0-e775-11d9-89df-000c414ce854", "82cca5a3-e775-11d9-89df-000c414ce854"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of People) assign (Attribute: Plugin View) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a7-e775-11d9-89df-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "82cca5a3-e775-11d9-89df-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "82cca5a8-e775-11d9-89df-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5a9-e775-11d9-89df-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "82cca5a8-e775-11d9-89df-000c414ce854",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
+    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5aa-e775-11d9-89df-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["82cca5a8-e775-11d9-89df-000c414ce854", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of People) assign (Attribute: Query Spec) = (Query Spec: New Query)
+    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82cca5ab-e775-11d9-89df-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["82cca5a3-e775-11d9-89df-000c414ce854", "82cca5a8-e775-11d9-89df-000c414ce854"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of List of People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "82d3d190-e775-11d9-89df-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Name) = "Layout data for Table of List of People"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82d3d191-e775-11d9-89df-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "82d3d190-e775-11d9-89df-000c414ce854",
+            "value": "Layout data for Table of List of People"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Category) = (Category: Layout Data)
+    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82d61b80-e775-11d9-89df-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["82d3d190-e775-11d9-89df-000c414ce854", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82d61b81-e775-11d9-89df-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "82d3d190-e775-11d9-89df-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of People) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of People)
+    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Section this layout data belongs to) = (Section: List of People)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "82d61b82-e775-11d9-89df-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["82cca5a3-e775-11d9-89df-000c414ce854", "82d3d190-e775-11d9-89df-000c414ce854"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Page: Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "5555ef80-e777-11d9-8aaf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Page: Iterations) assign (Attribute: Name) = "Iterations"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef81-e777-11d9-8aaf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "5555ef80-e777-11d9-8aaf-000c414ce854",
+            "value": "Iterations"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Iterations) assign (Attribute: Category) = (Category: Page)
+    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef82-e777-11d9-8aaf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["5555ef80-e777-11d9-8aaf-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Iterations) assign (Attribute: Summary) = "This is the iterations page."
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef83-e777-11d9-8aaf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "5555ef80-e777-11d9-8aaf-000c414ce854",
+            "value": "This is the iterations page."  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: List of Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "5555ef84-e777-11d9-8aaf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Iterations) assign (Attribute: Name) = "List of Iterations"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef85-e777-11d9-8aaf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "5555ef84-e777-11d9-8aaf-000c414ce854",
+            "value": "List of Iterations"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Iterations) assign (Attribute: Category) = (Category: Section)
+    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef86-e777-11d9-8aaf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["5555ef84-e777-11d9-8aaf-000c414ce854", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Iterations) assign (Attribute: Sections In Page) = (Section: List of Iterations)
+    // On item (Section: List of Iterations) assign (Attribute: Page this section appears on) = (Page: Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef87-e777-11d9-8aaf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["5555ef80-e777-11d9-8aaf-000c414ce854", "5555ef84-e777-11d9-8aaf-000c414ce854"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Iterations) assign (Attribute: Plugin View) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef88-e777-11d9-8aaf-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "5555ef84-e777-11d9-8aaf-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "5555ef89-e777-11d9-8aaf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef8a-e777-11d9-8aaf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "5555ef89-e777-11d9-8aaf-000c414ce854",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
+    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef8b-e777-11d9-8aaf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["5555ef89-e777-11d9-8aaf-000c414ce854", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Iterations) assign (Attribute: Query Spec) = (Query Spec: New Query)
+    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "5555ef8c-e777-11d9-8aaf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["5555ef84-e777-11d9-8aaf-000c414ce854", "5555ef89-e777-11d9-8aaf-000c414ce854"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of List of Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "555d1b70-e777-11d9-8aaf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Name) = "Layout data for Table of List of Iterations"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "555d1b71-e777-11d9-8aaf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "555d1b70-e777-11d9-8aaf-000c414ce854",
+            "value": "Layout data for Table of List of Iterations"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Category) = (Category: Layout Data)
+    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "555d1b72-e777-11d9-8aaf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["555d1b70-e777-11d9-8aaf-000c414ce854", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "555d1b73-e777-11d9-8aaf-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "555d1b70-e777-11d9-8aaf-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Iterations) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Iterations)
+    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Section this layout data belongs to) = (Section: List of Iterations)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "555d1b74-e777-11d9-8aaf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["5555ef84-e777-11d9-8aaf-000c414ce854", "555d1b70-e777-11d9-8aaf-000c414ce854"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Page: Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "a7ef69b0-e777-11d9-80cf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Page: Stories) assign (Attribute: Name) = "Stories"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69b1-e777-11d9-80cf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a7ef69b0-e777-11d9-80cf-000c414ce854",
+            "value": "Stories"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Stories) assign (Attribute: Category) = (Category: Page)
+    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69b2-e777-11d9-80cf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a7ef69b0-e777-11d9-80cf-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Stories) assign (Attribute: Summary) = "This is the stories page."
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69b3-e777-11d9-80cf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a7ef69b0-e777-11d9-80cf-000c414ce854",
+            "value": "This is the stories page."  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: List of Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "a7ef69b4-e777-11d9-80cf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Stories) assign (Attribute: Name) = "List of Stories"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69b5-e777-11d9-80cf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a7ef69b4-e777-11d9-80cf-000c414ce854",
+            "value": "List of Stories"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Stories) assign (Attribute: Category) = (Category: Section)
+    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69b6-e777-11d9-80cf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a7ef69b4-e777-11d9-80cf-000c414ce854", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Stories) assign (Attribute: Sections In Page) = (Section: List of Stories)
+    // On item (Section: List of Stories) assign (Attribute: Page this section appears on) = (Page: Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69b7-e777-11d9-80cf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a7ef69b0-e777-11d9-80cf-000c414ce854", "a7ef69b4-e777-11d9-80cf-000c414ce854"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Stories) assign (Attribute: Plugin View) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69b8-e777-11d9-80cf-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a7ef69b4-e777-11d9-80cf-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "a7ef69b9-e777-11d9-80cf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69ba-e777-11d9-80cf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a7ef69b9-e777-11d9-80cf-000c414ce854",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
+    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69bb-e777-11d9-80cf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a7ef69b9-e777-11d9-80cf-000c414ce854", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Stories) assign (Attribute: Query Spec) = (Query Spec: New Query)
+    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7ef69bc-e777-11d9-80cf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a7ef69b4-e777-11d9-80cf-000c414ce854", "a7ef69b9-e777-11d9-80cf-000c414ce854"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of List of Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "a7f8df90-e777-11d9-80cf-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Name) = "Layout data for Table of List of Stories"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7f8df91-e777-11d9-80cf-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a7f8df90-e777-11d9-80cf-000c414ce854",
+            "value": "Layout data for Table of List of Stories"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Category) = (Category: Layout Data)
+    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7f8df92-e777-11d9-80cf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a7f8df90-e777-11d9-80cf-000c414ce854", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7f8df93-e777-11d9-80cf-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a7f8df90-e777-11d9-80cf-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Stories) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Stories)
+    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Section this layout data belongs to) = (Section: List of Stories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "a7f8df94-e777-11d9-80cf-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a7ef69b4-e777-11d9-80cf-000c414ce854", "a7f8df90-e777-11d9-80cf-000c414ce854"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Page: Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "d99a41b0-e777-11d9-8b8e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Page: Tasks) assign (Attribute: Name) = "Tasks"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41b1-e777-11d9-8b8e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "d99a41b0-e777-11d9-8b8e-000c414ce854",
+            "value": "Tasks"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Tasks) assign (Attribute: Category) = (Category: Page)
+    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41b2-e777-11d9-8b8e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["d99a41b0-e777-11d9-8b8e-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Tasks) assign (Attribute: Summary) = "This is the tasks page."
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41b3-e777-11d9-8b8e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "d99a41b0-e777-11d9-8b8e-000c414ce854",
+            "value": "This is the tasks page."  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: List of Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "d99a41b4-e777-11d9-8b8e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Tasks) assign (Attribute: Name) = "List of Tasks"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41b5-e777-11d9-8b8e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "d99a41b4-e777-11d9-8b8e-000c414ce854",
+            "value": "List of Tasks"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Tasks) assign (Attribute: Category) = (Category: Section)
+    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41b6-e777-11d9-8b8e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["d99a41b4-e777-11d9-8b8e-000c414ce854", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Tasks) assign (Attribute: Sections In Page) = (Section: List of Tasks)
+    // On item (Section: List of Tasks) assign (Attribute: Page this section appears on) = (Page: Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41b7-e777-11d9-8b8e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["d99a41b0-e777-11d9-8b8e-000c414ce854", "d99a41b4-e777-11d9-8b8e-000c414ce854"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Tasks) assign (Attribute: Plugin View) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41b8-e777-11d9-8b8e-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "d99a41b4-e777-11d9-8b8e-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "d99a41b9-e777-11d9-8b8e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41ba-e777-11d9-8b8e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "d99a41b9-e777-11d9-8b8e-000c414ce854",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
+    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41bb-e777-11d9-8b8e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["d99a41b9-e777-11d9-8b8e-000c414ce854", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Tasks) assign (Attribute: Query Spec) = (Query Spec: New Query)
+    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d99a41bc-e777-11d9-8b8e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["d99a41b4-e777-11d9-8b8e-000c414ce854", "d99a41b9-e777-11d9-8b8e-000c414ce854"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of List of Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "d9a3b790-e777-11d9-8b8e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Name) = "Layout data for Table of List of Tasks"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d9a3b791-e777-11d9-8b8e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+            "value": "Layout data for Table of List of Tasks"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Category) = (Category: Layout Data)
+    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d9a3b792-e777-11d9-8b8e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["d9a3b790-e777-11d9-8b8e-000c414ce854", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d9a3b793-e777-11d9-8b8e-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Tasks) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Tasks)
+    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Section this layout data belongs to) = (Section: List of Tasks)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "d9a3b794-e777-11d9-8b8e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["d99a41b4-e777-11d9-8b8e-000c414ce854", "d9a3b790-e777-11d9-8b8e-000c414ce854"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Page: Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "0def0400-e778-11d9-bab6-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Page: Bugs) assign (Attribute: Name) = "Bugs"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0def0401-e778-11d9-bab6-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "0def0400-e778-11d9-bab6-000c414ce854",
+            "value": "Bugs"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Bugs) assign (Attribute: Category) = (Category: Page)
+    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0def0402-e778-11d9-bab6-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0def0400-e778-11d9-bab6-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Bugs) assign (Attribute: Summary) = "This is the bugs page."
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0def0403-e778-11d9-bab6-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "0def0400-e778-11d9-bab6-000c414ce854",
+            "value": "This is the bugs page."  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: List of Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "0df14df0-e778-11d9-bab6-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Bugs) assign (Attribute: Name) = "List of Bugs"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df14df1-e778-11d9-bab6-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "0df14df0-e778-11d9-bab6-000c414ce854",
+            "value": "List of Bugs"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Bugs) assign (Attribute: Category) = (Category: Section)
+    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df14df2-e778-11d9-bab6-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0df14df0-e778-11d9-bab6-000c414ce854", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Bugs) assign (Attribute: Sections In Page) = (Section: List of Bugs)
+    // On item (Section: List of Bugs) assign (Attribute: Page this section appears on) = (Page: Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df14df3-e778-11d9-bab6-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0def0400-e778-11d9-bab6-000c414ce854", "0df14df0-e778-11d9-bab6-000c414ce854"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Bugs) assign (Attribute: Plugin View) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df14df4-e778-11d9-bab6-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "0df14df0-e778-11d9-bab6-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "0df14df5-e778-11d9-bab6-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df14df6-e778-11d9-bab6-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "0df14df5-e778-11d9-bab6-000c414ce854",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
+    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df14df7-e778-11d9-bab6-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0df14df5-e778-11d9-bab6-000c414ce854", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Bugs) assign (Attribute: Query Spec) = (Query Spec: New Query)
+    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df14df8-e778-11d9-bab6-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0df14df0-e778-11d9-bab6-000c414ce854", "0df14df5-e778-11d9-bab6-000c414ce854"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of List of Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "0df879e0-e778-11d9-bab6-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Name) = "Layout data for Table of List of Bugs"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df879e1-e778-11d9-bab6-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "0df879e0-e778-11d9-bab6-000c414ce854",
+            "value": "Layout data for Table of List of Bugs"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Category) = (Category: Layout Data)
+    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df879e2-e778-11d9-bab6-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0df879e0-e778-11d9-bab6-000c414ce854", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df879e3-e778-11d9-bab6-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "0df879e0-e778-11d9-bab6-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Bugs) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Bugs)
+    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Section this layout data belongs to) = (Section: List of Bugs)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "0df879e4-e778-11d9-bab6-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0df14df0-e778-11d9-bab6-000c414ce854", "0df879e0-e778-11d9-bab6-000c414ce854"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Page: Introspection)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "4bfcc9d0-e778-11d9-a869-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Page: Introspection) assign (Attribute: Name) = "Introspection"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bfcc9d1-e778-11d9-a869-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4bfcc9d0-e778-11d9-a869-000c414ce854",
+            "value": "Introspection"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Introspection) assign (Attribute: Category) = (Category: Page)
+    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Introspection)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bfcc9d2-e778-11d9-a869-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4bfcc9d0-e778-11d9-a869-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Introspection) assign (Attribute: Summary) = "This is the introspection page."
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bfcc9d3-e778-11d9-a869-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4bfcc9d0-e778-11d9-a869-000c414ce854",
+            "value": "This is the introspection page."  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: List of Categories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "4bfcc9d4-e778-11d9-a869-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Categories) assign (Attribute: Name) = "List of Categories"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bfcc9d5-e778-11d9-a869-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4bfcc9d4-e778-11d9-a869-000c414ce854",
+            "value": "List of Categories"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Categories) assign (Attribute: Category) = (Category: Section)
+    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Categories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bfcc9d6-e778-11d9-a869-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4bfcc9d4-e778-11d9-a869-000c414ce854", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Introspection) assign (Attribute: Sections In Page) = (Section: List of Categories)
+    // On item (Section: List of Categories) assign (Attribute: Page this section appears on) = (Page: Introspection)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bfcc9d7-e778-11d9-a869-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4bfcc9d0-e778-11d9-a869-000c414ce854", "4bfcc9d4-e778-11d9-a869-000c414ce854"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Categories) assign (Attribute: Plugin View) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bff3ad0-e778-11d9-a869-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4bfcc9d4-e778-11d9-a869-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "4bff3ad1-e778-11d9-a869-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bff3ad2-e778-11d9-a869-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4bff3ad1-e778-11d9-a869-000c414ce854",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
+    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bff3ad3-e778-11d9-a869-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4bff3ad1-e778-11d9-a869-000c414ce854", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Categories) assign (Attribute: Query Spec) = (Query Spec: New Query)
+    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Categories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4bff3ad4-e778-11d9-a869-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4bfcc9d4-e778-11d9-a869-000c414ce854", "4bff3ad1-e778-11d9-a869-000c414ce854"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of List of Categories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "4c063fb0-e778-11d9-a869-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Name) = "Layout data for Table of List of Categories"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4c063fb1-e778-11d9-a869-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4c063fb0-e778-11d9-a869-000c414ce854",
+            "value": "Layout data for Table of List of Categories"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Category) = (Category: Layout Data)
+    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Categories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4c063fb2-e778-11d9-a869-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4c063fb0-e778-11d9-a869-000c414ce854", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4c063fb3-e778-11d9-a869-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4c063fb0-e778-11d9-a869-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: List of Categories) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Categories)
+    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Section this layout data belongs to) = (Section: List of Categories)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4c063fb4-e778-11d9-a869-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4bfcc9d4-e778-11d9-a869-000c414ce854", "4c063fb0-e778-11d9-a869-000c414ce854"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Category)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "7fb1c9b0-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "4bff3ad1-e778-11d9-a869-000c414ce854",
+          "value": "00001211-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Person)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "9c0d9d50-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "82cca5a8-e775-11d9-89df-000c414ce854",
+          "value": "00001201-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: Iteration)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "a5dc24a0-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Category: Iteration) assign (Attribute: Name) = "Iteration"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "aa24f1e0-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a5dc24a0-e778-11d9-a7da-000c414ce854",
+            "value": "Iteration"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Category: Iteration) assign (Attribute: Category) = (Category: Category)
+    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: Iteration)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "aa24f1e1-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a5dc24a0-e778-11d9-a7da-000c414ce854", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: User Story)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "aa273bd0-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Category: User Story) assign (Attribute: Name) = "User Story"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b1532bd0-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "aa273bd0-e778-11d9-a7da-000c414ce854",
+            "value": "User Story"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Category: User Story) assign (Attribute: Category) = (Category: Category)
+    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: User Story)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b1532bd1-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["aa273bd0-e778-11d9-a7da-000c414ce854", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: Task)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "b15575c0-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Category: Task) assign (Attribute: Name) = "Task"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b3f37930-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "b15575c0-e778-11d9-a7da-000c414ce854",
+            "value": "Task"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Category: Task) assign (Attribute: Category) = (Category: Category)
+    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: Task)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b3f37931-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["b15575c0-e778-11d9-a7da-000c414ce854", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: Bug)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "b3f37932-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Category: Bug) assign (Attribute: Name) = "Bug"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b6a46860-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "b3f37932-e778-11d9-a7da-000c414ce854",
+            "value": "Bug"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Category: Bug) assign (Attribute: Category) = (Category: Category)
+    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: Bug)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b6a46861-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["b3f37932-e778-11d9-a7da-000c414ce854", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Iteration)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "bb8cf810-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "5555ef89-e777-11d9-8aaf-000c414ce854",
+          "value": "a5dc24a0-e778-11d9-a7da-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: User Story)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "c6262260-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "a7ef69b9-e777-11d9-80cf-000c414ce854",
+          "value": "aa273bd0-e778-11d9-a7da-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Task)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "c9283ed0-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "d99a41b9-e777-11d9-8b8e-000c414ce854",
+          "value": "b15575c0-e778-11d9-a7da-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Bug)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "cd0ccc00-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "0df14df5-e778-11d9-bab6-000c414ce854",
+          "value": "b3f37932-e778-11d9-a7da-000c414ce854"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Iteration: Iteration 1)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "ceb795d0-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 1) assign (Attribute: Name) = "Iteration 1"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e0d99d30-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "ceb795d0-e778-11d9-a7da-000c414ce854",
+            "value": "Iteration 1"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 1) assign (Attribute: Category) = (Category: Iteration)
+    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 1)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e0d99d31-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["ceb795d0-e778-11d9-a7da-000c414ce854", "a5dc24a0-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Iteration: Iteration 2)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "e0dc0e30-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 2) assign (Attribute: Name) = "Iteration 2"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e2a0efb0-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "e0dc0e30-e778-11d9-a7da-000c414ce854",
+            "value": "Iteration 2"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 2) assign (Attribute: Category) = (Category: Iteration)
+    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 2)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e2a0efb1-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["e0dc0e30-e778-11d9-a7da-000c414ce854", "a5dc24a0-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Iteration: Iteration 3)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "e2a360b0-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 3) assign (Attribute: Name) = "Iteration 3"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e7208460-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "e2a360b0-e778-11d9-a7da-000c414ce854",
+            "value": "Iteration 3"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 3) assign (Attribute: Category) = (Category: Iteration)
+    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 3)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e7208461-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["e2a360b0-e778-11d9-a7da-000c414ce854", "a5dc24a0-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Iteration: Iteration 4)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "e7208462-e778-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 4) assign (Attribute: Name) = "Iteration 4"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "ecdae300-e778-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "e7208462-e778-11d9-a7da-000c414ce854",
+            "value": "Iteration 4"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Iteration: Iteration 4) assign (Attribute: Category) = (Category: Iteration)
+    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 4)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "ecdae301-e778-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["e7208462-e778-11d9-a7da-000c414ce854", "a5dc24a0-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Short Name)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "f117a251-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "555d1b70-e777-11d9-8aaf-000c414ce854",
+          "value": "00001002-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Name)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "f117a250-e778-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "555d1b70-e777-11d9-8aaf-000c414ce854",
+          "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 1) assign (Attribute: Short Name) = "Iteration 1"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "f53f04e0-e778-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "ceb795d0-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 1"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 2) assign (Attribute: Short Name) = "Iteration 2"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "f6f0d390-e778-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "e0dc0e30-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 2"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 3) assign (Attribute: Short Name) = "Iteration 3"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "f89b9d60-e778-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "e2a360b0-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 3"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 4) assign (Attribute: Short Name) = "Iteration 4"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "fc8c3880-e778-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "e7208462-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 4"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 1) assign (Attribute: Name) = "Iteration 1 - May 2005"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "113b7a70-e779-11d9-a7da-000c414ce854",
+  "previousEntry": "e0d99d30-e778-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "ceb795d0-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 1 - May 2005"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 1) assign (Attribute: Name) = "Iteration 1 ? May 2005"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "26d20f20-e779-11d9-a7da-000c414ce854",
+  "previousEntry": "113b7a70-e779-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "ceb795d0-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 1 ? May 2005"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 2) assign (Attribute: Name) = "Iteration 2 ? June 2005"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "2d8db120-e779-11d9-a7da-000c414ce854",
+  "previousEntry": "e2a0efb0-e778-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "e0dc0e30-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 2 ? June 2005"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 3) assign (Attribute: Name) = "Iteration 3 ? July 2005"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "31b2c9c0-e779-11d9-a7da-000c414ce854",
+  "previousEntry": "e7208460-e778-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "e2a360b0-e778-11d9-a7da-000c414ce854",
+          "value": "Iteration 3 ? July 2005"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Section: New Section)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "4b113be0-e779-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Section: New Section) assign (Attribute: Name) = "New Section"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b113be1-e779-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4b113be0-e779-11d9-a7da-000c414ce854",
+            "value": "New Section"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: New Section) assign (Attribute: Category) = (Category: Section)
+    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: New Section)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b13ace0-e779-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4b113be0-e779-11d9-a7da-000c414ce854", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Page: Introspection) assign (Attribute: Sections In Page) = (Section: New Section)
+    // On item (Section: New Section) assign (Attribute: Page this section appears on) = (Page: Introspection)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b13ace1-e779-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4bfcc9d0-e778-11d9-a869-000c414ce854", "4b113be0-e779-11d9-a7da-000c414ce854"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: New Section) assign (Attribute: Plugin View) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b13ace2-e779-11d9-a7da-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4b113be0-e779-11d9-a7da-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "4b13ace3-e779-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b13ace4-e779-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4b13ace3-e779-11d9-a7da-000c414ce854",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
+    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b13ace5-e779-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4b13ace3-e779-11d9-a7da-000c414ce854", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: New Section) assign (Attribute: Query Spec) = (Query Spec: New Query)
+    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: New Section)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b13ace6-e779-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4b113be0-e779-11d9-a7da-000c414ce854", "4b13ace3-e779-11d9-a7da-000c414ce854"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of New Section)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "4b1867d0-e779-11d9-a7da-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Name) = "Layout data for Table of New Section"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b1867d1-e779-11d9-a7da-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4b1867d0-e779-11d9-a7da-000c414ce854",
+            "value": "Layout data for Table of New Section"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Category) = (Category: Layout Data)
+    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of New Section)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b1867d2-e779-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4b1867d0-e779-11d9-a7da-000c414ce854", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b1867d3-e779-11d9-a7da-000c414ce854",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "4b1867d0-e779-11d9-a7da-000c414ce854",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Section: New Section) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of New Section)
+    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Section this layout data belongs to) = (Section: New Section)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "4b1867d4-e779-11d9-a7da-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["4b113be0-e779-11d9-a7da-000c414ce854", "4b1867d0-e779-11d9-a7da-000c414ce854"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Attribute)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "556c72d0-e779-11d9-a7da-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "4b13ace3-e779-11d9-a7da-000c414ce854",
+          "value": "00001210-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Section: List of Attributes) assign (Attribute: Name) = "List of Attributes"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "5ee9f3f0-e779-11d9-a7da-000c414ce854",
+  "previousEntry": "4b113be1-e779-11d9-a7da-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "4b113be0-e779-11d9-a7da-000c414ce854",
+          "value": "List of Attributes"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (User Story: Deletion)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "add58150-e779-11d9-93ea-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (User Story: Deletion) assign (Attribute: Name) = "Deletion"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b3f3f8f0-e779-11d9-93ea-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "add58150-e779-11d9-93ea-000c414ce854",
+            "value": "Deletion"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (User Story: Deletion) assign (Attribute: Category) = (Category: User Story)
+    // On item (Category: User Story) assign (Attribute: Items in Category) = (User Story: Deletion)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "b3f3f8f1-e779-11d9-93ea-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["add58150-e779-11d9-93ea-000c414ce854", "aa273bd0-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Table Columns) = (Attribute: Name)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "b8f42f50-e779-11d9-93ea-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "a7f8df90-e777-11d9-80cf-000c414ce854",
+          "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Table Columns) = (Attribute: Summary)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "b8f42f51-e779-11d9-93ea-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "a7f8df90-e777-11d9-80cf-000c414ce854",
+          "value": "00001003-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (User Story: Deletion) assign (Attribute: Summary) = "A logged-in user can delete items"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "bac78fc0-e779-11d9-93ea-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "add58150-e779-11d9-93ea-000c414ce854",
+          "value": "A logged-in user can delete items"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (User Story: Reliable data-store)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "b8f6a050-e779-11d9-93ea-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (User Story: Reliable data-store) assign (Attribute: Name) = "Reliable data-store"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "ccdb3f40-e779-11d9-93ea-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "b8f6a050-e779-11d9-93ea-000c414ce854",
+            "value": "Reliable data-store"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (User Story: Reliable data-store) assign (Attribute: Category) = (Category: User Story)
+    // On item (Category: User Story) assign (Attribute: Items in Category) = (User Story: Reliable data-store)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "ccdb3f41-e779-11d9-93ea-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["b8f6a050-e779-11d9-93ea-000c414ce854", "aa273bd0-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (User Story: Reliable data-store) assign (Attribute: Summary) = "Users can trust that data won't be lost."
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "dad39a20-e779-11d9-93ea-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "b8f6a050-e779-11d9-93ea-000c414ce854",
+          "value": "Users can trust that data won't be lost."  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Task: DOM level 2)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "fd8967c0-e779-11d9-93ea-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Task: DOM level 2) assign (Attribute: Name) = "DOM level 2"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "036c35f0-e77a-11d9-93ea-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "fd8967c0-e779-11d9-93ea-000c414ce854",
+            "value": "DOM level 2"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Task: DOM level 2) assign (Attribute: Category) = (Category: Task)
+    // On item (Category: Task) assign (Attribute: Items in Category) = (Task: DOM level 2)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "036c35f1-e77a-11d9-93ea-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["fd8967c0-e779-11d9-93ea-000c414ce854", "b15575c0-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Summary)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "0503ecf1-e77a-11d9-93ea-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+          "value": "00001003-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Name)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "0503ecf0-e77a-11d9-93ea-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+          "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Task: DOM level 2) assign (Attribute: Summary) = "Convert UI code from DOM level 0 to DOM level 2"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "08598090-e77a-11d9-93ea-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "fd8967c0-e779-11d9-93ea-000c414ce854",
+          "value": "Convert UI code from DOM level 0 to DOM level 2"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Table Columns) = (Attribute: Name)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "15ed9b60-e77a-11d9-93ea-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "0df879e0-e778-11d9-bab6-000c414ce854",
+          "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Table Columns) = (Attribute: Summary)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "15ed9b61-e77a-11d9-93ea-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "0df879e0-e778-11d9-bab6-000c414ce854",
+          "value": "00001003-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Bug: Back button)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "15efe550-e77a-11d9-93ea-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Bug: Back button) assign (Attribute: Name) = "Back button"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "18630830-e77a-11d9-93ea-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "15efe550-e77a-11d9-93ea-000c414ce854",
+            "value": "Back button"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Bug: Back button) assign (Attribute: Category) = (Category: Bug)
+    // On item (Category: Bug) assign (Attribute: Items in Category) = (Bug: Back button)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "18630831-e77a-11d9-93ea-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["15efe550-e77a-11d9-93ea-000c414ce854", "b3f37932-e778-11d9-a7da-000c414ce854"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Bug: Back button) assign (Attribute: Summary) = "back button is broken."
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "1b81ad50-e77a-11d9-93ea-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "15efe550-e77a-11d9-93ea-000c414ce854",
+          "value": "back button is broken."  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Bug: Back button) assign (Attribute: Summary) = "The back button is broken."
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "1f87a530-e77a-11d9-93ea-000c414ce854",
+  "previousEntry": "1b81ad50-e77a-11d9-93ea-000c414ce854",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "15efe550-e77a-11d9-93ea-000c414ce854",
+          "value": "The back button is broken."  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Completion Date)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "3af52130-e77a-11d9-93ea-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Completion Date) assign (Attribute: Name) = "Completion Date"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "457ff3a0-e77a-11d9-93ea-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "3af52130-e77a-11d9-93ea-000c414ce854",
+            "value": "Completion Date"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Completion Date) assign (Attribute: Category) = (Category: Attribute)
+    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Completion Date)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "457ff3a1-e77a-11d9-93ea-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["3af52130-e77a-11d9-93ea-000c414ce854", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Completion Date) assign (Attribute: Expected Type) = (Type: Date)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "4782ef90-e77a-11d9-93ea-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "3af52130-e77a-11d9-93ea-000c414ce854",
+          "value": "00001022-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Completion Date)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "572f8a20-e77a-11d9-8196-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "555d1b70-e777-11d9-8aaf-000c414ce854",
+          "value": "3af52130-e77a-11d9-93ea-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 1) assign (Attribute: Completion Date) = "Mon May 30 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "6892d560-e77a-11d9-8196-000c414ce854",
+           "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "3af52130-e77a-11d9-93ea-000c414ce854",
+           "item": "ceb795d0-e778-11d9-a7da-000c414ce854",
+          "value": "Mon May 30 2005 00:00:00 GMT-0700 (Pacific Standard Time)"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 1) assign (Attribute: Completion Date) = "Mon Jun 06 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "7c85cc30-e77a-11d9-8196-000c414ce854",
+  "previousEntry": "6892d560-e77a-11d9-8196-000c414ce854",
+           "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "3af52130-e77a-11d9-93ea-000c414ce854",
+           "item": "ceb795d0-e778-11d9-a7da-000c414ce854",
+          "value": "Mon Jun 06 2005 00:00:00 GMT-0700 (Pacific Standard Time)"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Iteration: Iteration 2) assign (Attribute: Completion Date) = "Tue Jul 05 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "84c88360-e77a-11d9-8196-000c414ce854",
+           "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "3af52130-e77a-11d9-93ea-000c414ce854",
+           "item": "e0dc0e30-e778-11d9-a7da-000c414ce854",
+          "value": "Tue Jul 05 2005 00:00:00 GMT-0700 (Pacific Standard Time)"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Tasks Scheduled)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "99cff770-e77a-11d9-8196-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Tasks Scheduled) assign (Attribute: Name) = "Tasks Scheduled"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "dbf938f0-e77a-11d9-8196-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "99cff770-e77a-11d9-8196-000c414ce854",
+            "value": "Tasks Scheduled"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Tasks Scheduled) assign (Attribute: Category) = (Category: Attribute)
+    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Tasks Scheduled)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "dbf938f1-e77a-11d9-8196-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["99cff770-e77a-11d9-8196-000c414ce854", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Tasks Scheduled) assign (Attribute: Expected Type) = (Category: Task)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "dd877a10-e77a-11d9-8196-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "99cff770-e77a-11d9-8196-000c414ce854",
+          "value": "b15575c0-e778-11d9-a7da-000c414ce854"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Scheduled For)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "dbfba9f0-e77a-11d9-8196-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Scheduled For) assign (Attribute: Name) = "Scheduled For"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e26fe2b0-e77a-11d9-8196-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "dbfba9f0-e77a-11d9-8196-000c414ce854",
+            "value": "Scheduled For"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Scheduled For) assign (Attribute: Category) = (Category: Attribute)
+    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Scheduled For)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "e26fe2b1-e77a-11d9-8196-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["dbfba9f0-e77a-11d9-8196-000c414ce854", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Scheduled For) assign (Attribute: Expected Type) = (Category: Iteration)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "e4ae8810-e77a-11d9-8196-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "dbfba9f0-e77a-11d9-8196-000c414ce854",
+          "value": "a5dc24a0-e778-11d9-a7da-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Tasks Scheduled) assign (Attribute: Inverse Attribute) = (Attribute: Scheduled For)
+  // On item (Attribute: Scheduled For) assign (Attribute: Inverse Attribute) = (Attribute: Tasks Scheduled)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "f6aa69d0-e77a-11d9-964e-000c414ce854",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["99cff770-e77a-11d9-8196-000c414ce854", "dbfba9f0-e77a-11d9-8196-000c414ce854"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Estimate)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "10f9a490-e77b-11d9-964e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Estimate) assign (Attribute: Name) = "Estimate"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "1d49a6a0-e77b-11d9-964e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "10f9a490-e77b-11d9-964e-000c414ce854",
+            "value": "Estimate"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Estimate) assign (Attribute: Category) = (Category: Attribute)
+    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Estimate)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "1d49a6a1-e77b-11d9-964e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["10f9a490-e77b-11d9-964e-000c414ce854", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Estimate) assign (Attribute: Expected Type) = (Type: Number)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "2113f510-e77b-11d9-964e-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "10f9a490-e77b-11d9-964e-000c414ce854",
+          "value": "00001021-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Actual)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "1d49a6a2-e77b-11d9-964e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Actual) assign (Attribute: Name) = "Actual"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "23e64ef0-e77b-11d9-964e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "1d49a6a2-e77b-11d9-964e-000c414ce854",
+            "value": "Actual"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Actual) assign (Attribute: Category) = (Category: Attribute)
+    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Actual)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "23e64ef1-e77b-11d9-964e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["1d49a6a2-e77b-11d9-964e-000c414ce854", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Actual) assign (Attribute: Expected Type) = (Type: Number)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "2582c0e0-e77b-11d9-964e-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "1d49a6a2-e77b-11d9-964e-000c414ce854",
+          "value": "00001021-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Signed-up Person)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "23e8bff0-e77b-11d9-964e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Signed-up Person) assign (Attribute: Name) = "Signed-up Person"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "44c8e330-e77b-11d9-964e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "23e8bff0-e77b-11d9-964e-000c414ce854",
+            "value": "Signed-up Person"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Signed-up Person) assign (Attribute: Category) = (Category: Attribute)
+    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Signed-up Person)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "44cb5430-e77b-11d9-964e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["23e8bff0-e77b-11d9-964e-000c414ce854", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Signed-up Person) assign (Attribute: Expected Type) = (Category: Person)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "464d8760-e77b-11d9-964e-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "23e8bff0-e77b-11d9-964e-000c414ce854",
+          "value": "00001201-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Tasks signed-up for)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Item": { "uuid": "44cb5431-e77b-11d9-964e-000c414ce854" } },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Tasks signed-up for) assign (Attribute: Name) = "Tasks signed-up for"
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "516c3560-e77b-11d9-964e-000c414ce854",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "44cb5431-e77b-11d9-964e-000c414ce854",
+            "value": "Tasks signed-up for"  }
+    },
+    // -----------------------------------------------------------------------
+    // On item (Attribute: Tasks signed-up for) assign (Attribute: Category) = (Category: Attribute)
+    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Tasks signed-up for)
+    //           by (Brian) on (Jun 27, 2005)
+    { "Entry": {
+             "uuid": "516c3561-e77b-11d9-964e-000c414ce854",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["44cb5431-e77b-11d9-964e-000c414ce854", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Tasks signed-up for) assign (Attribute: Expected Type) = (Category: Task)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "52f80580-e77b-11d9-964e-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "44cb5431-e77b-11d9-964e-000c414ce854",
+          "value": "b15575c0-e778-11d9-a7da-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Attribute: Tasks signed-up for) assign (Attribute: Inverse Attribute) = (Attribute: Signed-up Person)
+  // On item (Attribute: Signed-up Person) assign (Attribute: Inverse Attribute) = (Attribute: Tasks signed-up for)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "6ae02b50-e77b-11d9-95dd-000c414ce854",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["44cb5431-e77b-11d9-964e-000c414ce854", "23e8bff0-e77b-11d9-964e-000c414ce854"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Table Columns) = (Attribute: Name)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "78f50ee0-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "82d3d190-e775-11d9-89df-000c414ce854",
+          "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Table Columns) = (Attribute: Tasks signed-up for)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "78f50ee1-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "82d3d190-e775-11d9-89df-000c414ce854",
+          "value": "44cb5431-e77b-11d9-964e-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Table Columns) = (Attribute: Short Name)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "78f2c4f0-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "82d3d190-e775-11d9-89df-000c414ce854",
+          "value": "00001002-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Signed-up Person)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "85475ae0-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+          "value": "23e8bff0-e77b-11d9-964e-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Estimate)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "8bd84360-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+          "value": "10f9a490-e77b-11d9-964e-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Actual)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "932ca2f0-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+          "value": "1d49a6a2-e77b-11d9-964e-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Scheduled For)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "a9c71310-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "d9a3b790-e777-11d9-8b8e-000c414ce854",
+          "value": "dbfba9f0-e77a-11d9-8196-000c414ce854"  }
+  },
+  // -----------------------------------------------------------------------
+  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Tasks Scheduled)
+  //           by (Brian) on (Jun 27, 2005)
+  { "Entry": {
+           "uuid": "b95242f0-e77b-11d9-95dd-000c414ce854",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "555d1b70-e777-11d9-8aaf-000c414ce854",
+          "value": "99cff770-e77a-11d9-8196-000c414ce854"  }
   }
\ No newline at end of file



From skinner at sheep.berlios.de  Tue Jun 28 04:57:33 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 28 Jun 2005 04:57:33 +0200
Subject: [openrecord-svn] r189 - trunk/source
Message-ID: <200506280257.j5S2vXrN031966@sheep.berlios.de>

Author: skinner
Date: 2005-06-28 04:57:30 +0200 (Tue, 28 Jun 2005)
New Revision: 189

Modified:
   trunk/source/TextView.js
Log:
Minor bug fix involving inverse attributes.

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-28 02:28:55 UTC (rev 188)
+++ trunk/source/TextView.js	2005-06-28 02:57:30 UTC (rev 189)
@@ -351,12 +351,14 @@
     value = this._transformToExpectedType(value);
 
     var oldValue = null;
-    if (this._entry) {oldValue = this._entry.getValue();}
+    if (this._entry) {oldValue = this._entry.getValue(this._item);}
     if (oldValue != value) {
       var attributeCalledInverseAttribute = this.getWorld().getAttributeCalledInverseAttribute();
       var listOfInverseAttributeEntries = this._attribute.getEntriesForAttribute(attributeCalledInverseAttribute);
       if (listOfInverseAttributeEntries.length > 0) {
-        var inverseAttr = listOfInverseAttributeEntries[0].getValue();
+        // alert(this._attribute.getDisplayString());
+        // alert(listOfInverseAttributeEntries[0].getDisplayString());
+        var inverseAttr = listOfInverseAttributeEntries[0].getValue(this._attribute);
         this._entry = this._item.replaceEntryWithConnection(this._entry, this._attribute, value, inverseAttr);
       }
       else {



From skinner at sheep.berlios.de  Tue Jun 28 07:32:32 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 28 Jun 2005 07:32:32 +0200
Subject: [openrecord-svn] r190 - trunk/documentation
Message-ID: <200506280532.j5S5WWBW026821@sheep.berlios.de>

Author: skinner
Date: 2005-06-28 07:32:23 +0200 (Tue, 28 Jun 2005)
New Revision: 190

Modified:
   trunk/documentation/release_planning.txt
Log:
updated task list

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-28 02:57:30 UTC (rev 189)
+++ trunk/documentation/release_planning.txt	2005-06-28 05:32:23 UTC (rev 190)
@@ -155,7 +155,7 @@
 -------+----------+---------+----------------------------------------------
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
-       |          |         |  1. Set up a prototype of the OpenRecord.org "dogfood" site
+brian  | 0.25     | 0.25    |  1. Set up a prototype of the OpenRecord.org "dogfood" site
 mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
 mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
 brian  | 0        | 0.5     |     Update the JSON repository file to use time-based UUIDs
@@ -169,7 +169,7 @@
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
 brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
 brian  |          | done    |     Convert the code to use bi-directional references
-brian  | 0.25 IED |         |     Convert the axiomatic items to use bi-directional reference
+brian  | 0.25 IED | 0.25    |     Convert the axiomatic items to use bi-directional reference
 chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields



From skinner at sheep.berlios.de  Wed Jun 29 07:01:34 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 29 Jun 2005 07:01:34 +0200
Subject: [openrecord-svn] r191 - in trunk: . documentation source/model source/repositories
Message-ID: <200506290501.j5T51YiK025452@sheep.berlios.de>

Author: skinner
Date: 2005-06-29 07:01:26 +0200 (Wed, 29 Jun 2005)
New Revision: 191

Modified:
   trunk/documentation/release_planning.txt
   trunk/dogfood.html
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Item.js
   trunk/source/repositories/demo_page.json
   trunk/source/repositories/dogfood.json
Log:
Minor changes.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-06-28 05:32:23 UTC (rev 190)
+++ trunk/documentation/release_planning.txt	2005-06-29 05:01:26 UTC (rev 191)
@@ -168,8 +168,9 @@
 chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
 chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
 brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
-brian  |          | done    |     Convert the code to use bi-directional references
+brian  |          | 0.5     |     Convert the code to use bi-directional references
 brian  | 0.25 IED | 0.25    |     Convert the axiomatic items to use bi-directional reference
+brian  |          | 0.75    |     Misc. other improvements to the repository JSON format
 chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
        |          |         | 12. Make sure view code uses transactions
        |          |         | 13. Deal with \n in page name or summary fields

Modified: trunk/dogfood.html
===================================================================
--- trunk/dogfood.html	2005-06-28 05:32:23 UTC (rev 190)
+++ trunk/dogfood.html	2005-06-29 05:01:26 UTC (rev 191)
@@ -44,7 +44,7 @@
     <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>
     
     <script type="text/javascript">
-      window.onload = function() {  
+      window.onload = function() { 
         var world = new World();
         new RootView(world);
       };    

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-28 05:32:23 UTC (rev 190)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-29 05:01:26 UTC (rev 191)
@@ -291,11 +291,11 @@
         var firstAttribute = pairOfAttributes[0];
         var secondAttribute = pairOfAttributes[1];
         entryString += indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": ["' + firstAttribute._getUuid() + '", "' + secondAttribute._getUuid() + '"]';
-        commentString += indent + '// On item ' + this._getTypedDisplayStringForItem(firstItem);
-        commentString += " assign " + this._getTypedDisplayStringForItem(firstAttribute);
+        commentString += indent + '// ' + this._getTypedDisplayStringForItem(firstItem);
+        commentString += ".(" + firstAttribute.getDisplayString("???") + ")";
         commentString += " = " + this._getTypedDisplayStringForItem(secondItem) + "\n";
-        commentString += indent + '// On item ' + this._getTypedDisplayStringForItem(secondItem);
-        commentString += " assign " + this._getTypedDisplayStringForItem(secondAttribute);
+        commentString += indent + '// ' + this._getTypedDisplayStringForItem(secondItem);
+        commentString += ".(" + secondAttribute.getDisplayString("???") + ")";
         commentString += " = " + this._getTypedDisplayStringForItem(firstItem) + "\n";
       } else {
         var attribute = entry.getAttribute();
@@ -326,8 +326,8 @@
             Util.assert(false, "no such type: " + typeToken);
         }
         entryString += indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString;
-        commentString += indent + '// On item ' + this._getTypedDisplayStringForItem(entry.getItem());
-        commentString += " assign " + this._getTypedDisplayStringForItem(attribute);
+        commentString += indent + '// ' + this._getTypedDisplayStringForItem(entry.getItem());
+        commentString += ".(" + attribute.getDisplayString("???") + ")";
         commentString += " = " + valueComment + "\n";
       }
       commentString += indent + '//           by (' + entry.getUserstamp().getDisplayString() + ')';

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-28 05:32:23 UTC (rev 190)
+++ trunk/source/model/Item.js	2005-06-29 05:01:26 UTC (rev 191)
@@ -542,7 +542,8 @@
  * @return Boolean. True if this item has an attribute with the entry
  */
 Item.prototype.hasAttributeValue = function (inAttribute, inValue) {
-  Util.assert(inAttribute instanceof Item, inAttribute + ' is not an item');
+  // Util.assert(inAttribute instanceof Item, inAttribute + ' is not an item');
+  Util.assert(inAttribute instanceof Item);
   var entryList = this.getEntriesForAttribute(inAttribute);
 
   // look at all the entries this item's attribute is assigned to, 

Modified: trunk/source/repositories/demo_page.json
===================================================================
--- trunk/source/repositories/demo_page.json	2005-06-28 05:32:23 UTC (rev 190)
+++ trunk/source/repositories/demo_page.json	2005-06-29 05:01:26 UTC (rev 191)
@@ -4,40 +4,44 @@
   // =======================================================================
   { "Transaction": [  // Home Page  
     // -----------------------------------------------------------------------
-    { "Item": {                                               // (Page: Welcome to the OpenRecord d...)
+    // (Page: Welcome!)
+    { "Item": {                                               
              "uuid": "00050000-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              
-             // in item (Page: Welcome to the OpenRecord d...) assign (Attribute: Category) = (Category: Page)
-             // in item (Category: Page) assign (Attribute: Items in Category) = (Page: Welcome to the OpenRecord d...)
+    // (Page: Welcome!).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: Welcome!)
+    { "Entry": {
              "uuid": "0005000a-ce7f-11d9-8cd5-0011113ae5d6",
              "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
              "item": ["00050000-ce7f-11d9-8cd5-0011113ae5d6", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // "Welcome!"
+    // (Page: Welcome!).(Short Name) = "Welcome!"
+    { "Entry": {
              "uuid": "0005000b-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // (Page: Welcome to the OpenRecord d...)
-             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+        "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
             "value": "Welcome!" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // "Welcome to the OpenRecord d..."
+    // (Page: Welcome!).(Name) = "Welcome to the OpenRecord demo!"
+    { "Entry": {
              "uuid": "0005000c-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // (Page: Welcome to the OpenRecord d...)
-             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
             "value": "Welcome to the OpenRecord demo!" }
     },
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // "This web site is a demo of ..."
+    // (Page: Welcome!).(Summary) = "This web site is a demo of ..."
+    { "Entry": {
              "uuid": "0005000d-ce7f-11d9-8cd5-0011113ae5d6",
-        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",  // Summary
-             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",  // (Page: Welcome to the OpenRecord d...)
-             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "00050000-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
             "value": "This web site is a demo of the OpenRecord prototype. OpenRecord is a collaborative content management system. OpenRecord is a lot like a wiki, but with twist. Most wikis are designed to let you view and edit pages of text, like a web-based word processor. OpenRecord is designed to let you view and edit items in a database, rather than pages of text. So if a wiki is a web-based collaborative word-processor, then OpenRecord is a web-based collaborative database, like Lotus Agenda." }
     } ]
   }
\ No newline at end of file

Modified: trunk/source/repositories/dogfood.json
===================================================================
--- trunk/source/repositories/dogfood.json	2005-06-28 05:32:23 UTC (rev 190)
+++ trunk/source/repositories/dogfood.json	2005-06-29 05:01:26 UTC (rev 191)
@@ -9,8 +9,8 @@
     },
     // -----------------------------------------------------------------------
     { "Entry": {                                              
-             // in item (Page: The OpenRecord Dogfood Site) assign (Attribute: Category) = (Category: Page)
-             // in item (Category: Page) assign (Attribute: Items in Category) = (Page: The OpenRecord Dogfood Site)
+             // (Page: The OpenRecord Dogfood Site).(Category) = (Category: Page)
+             // (Category: Page).(Items in Category) = (Page: The OpenRecord Dogfood Site)
              "uuid": "246ec32a-ce7f-11d9-8cd5-000c414ce854",
              "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
              "item": ["246ec320-ce7f-11d9-8cd5-000c414ce854", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
@@ -48,7 +48,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "82ca34a0-e775-11d9-89df-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Page: People) assign (Attribute: Name) = "People"
+    // (Page: People).(Name) = "People"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a0-e775-11d9-89df-000c414ce854",
@@ -58,8 +58,8 @@
             "value": "People"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: People) assign (Attribute: Category) = (Category: Page)
-    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: People)
+    // (Page: People).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: People)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a1-e775-11d9-89df-000c414ce854",
@@ -68,7 +68,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: People) assign (Attribute: Summary) = "This is the people page."
+    // (Page: People).(Summary) = "This is the people page."
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a2-e775-11d9-89df-000c414ce854",
@@ -82,7 +82,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "82cca5a3-e775-11d9-89df-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Section: List of People) assign (Attribute: Name) = "List of People"
+    // (Section: List of People).(Name) = "List of People"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a4-e775-11d9-89df-000c414ce854",
@@ -92,8 +92,8 @@
             "value": "List of People"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of People) assign (Attribute: Category) = (Category: Section)
-    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of People)
+    // (Section: List of People).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: List of People)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a5-e775-11d9-89df-000c414ce854",
@@ -102,8 +102,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: People) assign (Attribute: Sections In Page) = (Section: List of People)
-    // On item (Section: List of People) assign (Attribute: Page this section appears on) = (Page: People)
+    // (Page: People).(Sections In Page) = (Section: List of People)
+    // (Section: List of People).(Page this section appears on) = (Page: People)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a6-e775-11d9-89df-000c414ce854",
@@ -112,7 +112,7 @@
         "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of People) assign (Attribute: Plugin View) = (Plugin View: Table)
+    // (Section: List of People).(Plugin View) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a7-e775-11d9-89df-000c414ce854",
@@ -126,7 +126,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "82cca5a8-e775-11d9-89df-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    // (Query Spec: New Query).(Name) = "New Query"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5a9-e775-11d9-89df-000c414ce854",
@@ -136,8 +136,8 @@
             "value": "New Query"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
-    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5aa-e775-11d9-89df-000c414ce854",
@@ -146,8 +146,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of People) assign (Attribute: Query Spec) = (Query Spec: New Query)
-    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of People)
+    // (Section: List of People).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: List of People)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82cca5ab-e775-11d9-89df-000c414ce854",
@@ -163,7 +163,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "82d3d190-e775-11d9-89df-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Name) = "Layout data for Table of List of People"
+    // (Layout Data: Layout data for Table of List of People).(Name) = "Layout data for Table of List of People"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82d3d191-e775-11d9-89df-000c414ce854",
@@ -173,8 +173,8 @@
             "value": "Layout data for Table of List of People"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Category) = (Category: Layout Data)
-    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of People)
+    // (Layout Data: Layout data for Table of List of People).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of List of People)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82d61b80-e775-11d9-89df-000c414ce854",
@@ -183,7 +183,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    // (Layout Data: Layout data for Table of List of People).(Applies To Plugin) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82d61b81-e775-11d9-89df-000c414ce854",
@@ -193,8 +193,8 @@
             "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of People) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of People)
-    // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Section this layout data belongs to) = (Section: List of People)
+    // (Section: List of People).(Layout Data) = (Layout Data: Layout data for Table of List of People)
+    // (Layout Data: Layout data for Table of List of People).(Section this layout data belongs to) = (Section: List of People)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "82d61b82-e775-11d9-89df-000c414ce854",
@@ -210,7 +210,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "5555ef80-e777-11d9-8aaf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Page: Iterations) assign (Attribute: Name) = "Iterations"
+    // (Page: Iterations).(Name) = "Iterations"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef81-e777-11d9-8aaf-000c414ce854",
@@ -220,8 +220,8 @@
             "value": "Iterations"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Iterations) assign (Attribute: Category) = (Category: Page)
-    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Iterations)
+    // (Page: Iterations).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: Iterations)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef82-e777-11d9-8aaf-000c414ce854",
@@ -230,7 +230,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Iterations) assign (Attribute: Summary) = "This is the iterations page."
+    // (Page: Iterations).(Summary) = "This is the iterations page."
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef83-e777-11d9-8aaf-000c414ce854",
@@ -244,7 +244,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "5555ef84-e777-11d9-8aaf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Iterations) assign (Attribute: Name) = "List of Iterations"
+    // (Section: List of Iterations).(Name) = "List of Iterations"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef85-e777-11d9-8aaf-000c414ce854",
@@ -254,8 +254,8 @@
             "value": "List of Iterations"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Iterations) assign (Attribute: Category) = (Category: Section)
-    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Iterations)
+    // (Section: List of Iterations).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: List of Iterations)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef86-e777-11d9-8aaf-000c414ce854",
@@ -264,8 +264,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Iterations) assign (Attribute: Sections In Page) = (Section: List of Iterations)
-    // On item (Section: List of Iterations) assign (Attribute: Page this section appears on) = (Page: Iterations)
+    // (Page: Iterations).(Sections In Page) = (Section: List of Iterations)
+    // (Section: List of Iterations).(Page this section appears on) = (Page: Iterations)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef87-e777-11d9-8aaf-000c414ce854",
@@ -274,7 +274,7 @@
         "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Iterations) assign (Attribute: Plugin View) = (Plugin View: Table)
+    // (Section: List of Iterations).(Plugin View) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef88-e777-11d9-8aaf-000c414ce854",
@@ -288,7 +288,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "5555ef89-e777-11d9-8aaf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    // (Query Spec: New Query).(Name) = "New Query"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef8a-e777-11d9-8aaf-000c414ce854",
@@ -298,8 +298,8 @@
             "value": "New Query"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
-    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef8b-e777-11d9-8aaf-000c414ce854",
@@ -308,8 +308,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Iterations) assign (Attribute: Query Spec) = (Query Spec: New Query)
-    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Iterations)
+    // (Section: List of Iterations).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: List of Iterations)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "5555ef8c-e777-11d9-8aaf-000c414ce854",
@@ -325,7 +325,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "555d1b70-e777-11d9-8aaf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Name) = "Layout data for Table of List of Iterations"
+    // (Layout Data: Layout data for Table of List of Iterations).(Name) = "Layout data for Table of List of Iterations"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "555d1b71-e777-11d9-8aaf-000c414ce854",
@@ -335,8 +335,8 @@
             "value": "Layout data for Table of List of Iterations"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Category) = (Category: Layout Data)
-    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Iterations)
+    // (Layout Data: Layout data for Table of List of Iterations).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of List of Iterations)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "555d1b72-e777-11d9-8aaf-000c414ce854",
@@ -345,7 +345,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    // (Layout Data: Layout data for Table of List of Iterations).(Applies To Plugin) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "555d1b73-e777-11d9-8aaf-000c414ce854",
@@ -355,8 +355,8 @@
             "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Iterations) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Iterations)
-    // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Section this layout data belongs to) = (Section: List of Iterations)
+    // (Section: List of Iterations).(Layout Data) = (Layout Data: Layout data for Table of List of Iterations)
+    // (Layout Data: Layout data for Table of List of Iterations).(Section this layout data belongs to) = (Section: List of Iterations)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "555d1b74-e777-11d9-8aaf-000c414ce854",
@@ -372,7 +372,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "a7ef69b0-e777-11d9-80cf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Page: Stories) assign (Attribute: Name) = "Stories"
+    // (Page: Stories).(Name) = "Stories"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69b1-e777-11d9-80cf-000c414ce854",
@@ -382,8 +382,8 @@
             "value": "Stories"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Stories) assign (Attribute: Category) = (Category: Page)
-    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Stories)
+    // (Page: Stories).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: Stories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69b2-e777-11d9-80cf-000c414ce854",
@@ -392,7 +392,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Stories) assign (Attribute: Summary) = "This is the stories page."
+    // (Page: Stories).(Summary) = "This is the stories page."
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69b3-e777-11d9-80cf-000c414ce854",
@@ -406,7 +406,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "a7ef69b4-e777-11d9-80cf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Stories) assign (Attribute: Name) = "List of Stories"
+    // (Section: List of Stories).(Name) = "List of Stories"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69b5-e777-11d9-80cf-000c414ce854",
@@ -416,8 +416,8 @@
             "value": "List of Stories"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Stories) assign (Attribute: Category) = (Category: Section)
-    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Stories)
+    // (Section: List of Stories).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: List of Stories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69b6-e777-11d9-80cf-000c414ce854",
@@ -426,8 +426,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Stories) assign (Attribute: Sections In Page) = (Section: List of Stories)
-    // On item (Section: List of Stories) assign (Attribute: Page this section appears on) = (Page: Stories)
+    // (Page: Stories).(Sections In Page) = (Section: List of Stories)
+    // (Section: List of Stories).(Page this section appears on) = (Page: Stories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69b7-e777-11d9-80cf-000c414ce854",
@@ -436,7 +436,7 @@
         "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Stories) assign (Attribute: Plugin View) = (Plugin View: Table)
+    // (Section: List of Stories).(Plugin View) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69b8-e777-11d9-80cf-000c414ce854",
@@ -450,7 +450,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "a7ef69b9-e777-11d9-80cf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    // (Query Spec: New Query).(Name) = "New Query"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69ba-e777-11d9-80cf-000c414ce854",
@@ -460,8 +460,8 @@
             "value": "New Query"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
-    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69bb-e777-11d9-80cf-000c414ce854",
@@ -470,8 +470,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Stories) assign (Attribute: Query Spec) = (Query Spec: New Query)
-    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Stories)
+    // (Section: List of Stories).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: List of Stories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7ef69bc-e777-11d9-80cf-000c414ce854",
@@ -487,7 +487,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "a7f8df90-e777-11d9-80cf-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Name) = "Layout data for Table of List of Stories"
+    // (Layout Data: Layout data for Table of List of Stories).(Name) = "Layout data for Table of List of Stories"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7f8df91-e777-11d9-80cf-000c414ce854",
@@ -497,8 +497,8 @@
             "value": "Layout data for Table of List of Stories"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Category) = (Category: Layout Data)
-    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Stories)
+    // (Layout Data: Layout data for Table of List of Stories).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of List of Stories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7f8df92-e777-11d9-80cf-000c414ce854",
@@ -507,7 +507,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    // (Layout Data: Layout data for Table of List of Stories).(Applies To Plugin) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7f8df93-e777-11d9-80cf-000c414ce854",
@@ -517,8 +517,8 @@
             "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Stories) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Stories)
-    // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Section this layout data belongs to) = (Section: List of Stories)
+    // (Section: List of Stories).(Layout Data) = (Layout Data: Layout data for Table of List of Stories)
+    // (Layout Data: Layout data for Table of List of Stories).(Section this layout data belongs to) = (Section: List of Stories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "a7f8df94-e777-11d9-80cf-000c414ce854",
@@ -534,7 +534,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "d99a41b0-e777-11d9-8b8e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Page: Tasks) assign (Attribute: Name) = "Tasks"
+    // (Page: Tasks).(Name) = "Tasks"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41b1-e777-11d9-8b8e-000c414ce854",
@@ -544,8 +544,8 @@
             "value": "Tasks"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Tasks) assign (Attribute: Category) = (Category: Page)
-    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Tasks)
+    // (Page: Tasks).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: Tasks)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41b2-e777-11d9-8b8e-000c414ce854",
@@ -554,7 +554,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Tasks) assign (Attribute: Summary) = "This is the tasks page."
+    // (Page: Tasks).(Summary) = "This is the tasks page."
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41b3-e777-11d9-8b8e-000c414ce854",
@@ -568,7 +568,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "d99a41b4-e777-11d9-8b8e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Tasks) assign (Attribute: Name) = "List of Tasks"
+    // (Section: List of Tasks).(Name) = "List of Tasks"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41b5-e777-11d9-8b8e-000c414ce854",
@@ -578,8 +578,8 @@
             "value": "List of Tasks"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Tasks) assign (Attribute: Category) = (Category: Section)
-    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Tasks)
+    // (Section: List of Tasks).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: List of Tasks)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41b6-e777-11d9-8b8e-000c414ce854",
@@ -588,8 +588,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Tasks) assign (Attribute: Sections In Page) = (Section: List of Tasks)
-    // On item (Section: List of Tasks) assign (Attribute: Page this section appears on) = (Page: Tasks)
+    // (Page: Tasks).(Sections In Page) = (Section: List of Tasks)
+    // (Section: List of Tasks).(Page this section appears on) = (Page: Tasks)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41b7-e777-11d9-8b8e-000c414ce854",
@@ -598,7 +598,7 @@
         "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Tasks) assign (Attribute: Plugin View) = (Plugin View: Table)
+    // (Section: List of Tasks).(Plugin View) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41b8-e777-11d9-8b8e-000c414ce854",
@@ -612,7 +612,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "d99a41b9-e777-11d9-8b8e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    // (Query Spec: New Query).(Name) = "New Query"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41ba-e777-11d9-8b8e-000c414ce854",
@@ -622,8 +622,8 @@
             "value": "New Query"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
-    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41bb-e777-11d9-8b8e-000c414ce854",
@@ -632,8 +632,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Tasks) assign (Attribute: Query Spec) = (Query Spec: New Query)
-    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Tasks)
+    // (Section: List of Tasks).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: List of Tasks)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d99a41bc-e777-11d9-8b8e-000c414ce854",
@@ -649,7 +649,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "d9a3b790-e777-11d9-8b8e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Name) = "Layout data for Table of List of Tasks"
+    // (Layout Data: Layout data for Table of List of Tasks).(Name) = "Layout data for Table of List of Tasks"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d9a3b791-e777-11d9-8b8e-000c414ce854",
@@ -659,8 +659,8 @@
             "value": "Layout data for Table of List of Tasks"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Category) = (Category: Layout Data)
-    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Tasks)
+    // (Layout Data: Layout data for Table of List of Tasks).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of List of Tasks)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d9a3b792-e777-11d9-8b8e-000c414ce854",
@@ -669,7 +669,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    // (Layout Data: Layout data for Table of List of Tasks).(Applies To Plugin) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d9a3b793-e777-11d9-8b8e-000c414ce854",
@@ -679,8 +679,8 @@
             "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Tasks) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Tasks)
-    // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Section this layout data belongs to) = (Section: List of Tasks)
+    // (Section: List of Tasks).(Layout Data) = (Layout Data: Layout data for Table of List of Tasks)
+    // (Layout Data: Layout data for Table of List of Tasks).(Section this layout data belongs to) = (Section: List of Tasks)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "d9a3b794-e777-11d9-8b8e-000c414ce854",
@@ -696,7 +696,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "0def0400-e778-11d9-bab6-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Page: Bugs) assign (Attribute: Name) = "Bugs"
+    // (Page: Bugs).(Name) = "Bugs"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0def0401-e778-11d9-bab6-000c414ce854",
@@ -706,8 +706,8 @@
             "value": "Bugs"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Bugs) assign (Attribute: Category) = (Category: Page)
-    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Bugs)
+    // (Page: Bugs).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: Bugs)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0def0402-e778-11d9-bab6-000c414ce854",
@@ -716,7 +716,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Bugs) assign (Attribute: Summary) = "This is the bugs page."
+    // (Page: Bugs).(Summary) = "This is the bugs page."
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0def0403-e778-11d9-bab6-000c414ce854",
@@ -730,7 +730,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "0df14df0-e778-11d9-bab6-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Bugs) assign (Attribute: Name) = "List of Bugs"
+    // (Section: List of Bugs).(Name) = "List of Bugs"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df14df1-e778-11d9-bab6-000c414ce854",
@@ -740,8 +740,8 @@
             "value": "List of Bugs"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Bugs) assign (Attribute: Category) = (Category: Section)
-    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Bugs)
+    // (Section: List of Bugs).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: List of Bugs)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df14df2-e778-11d9-bab6-000c414ce854",
@@ -750,8 +750,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Bugs) assign (Attribute: Sections In Page) = (Section: List of Bugs)
-    // On item (Section: List of Bugs) assign (Attribute: Page this section appears on) = (Page: Bugs)
+    // (Page: Bugs).(Sections In Page) = (Section: List of Bugs)
+    // (Section: List of Bugs).(Page this section appears on) = (Page: Bugs)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df14df3-e778-11d9-bab6-000c414ce854",
@@ -760,7 +760,7 @@
         "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Bugs) assign (Attribute: Plugin View) = (Plugin View: Table)
+    // (Section: List of Bugs).(Plugin View) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df14df4-e778-11d9-bab6-000c414ce854",
@@ -774,7 +774,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "0df14df5-e778-11d9-bab6-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    // (Query Spec: New Query).(Name) = "New Query"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df14df6-e778-11d9-bab6-000c414ce854",
@@ -784,8 +784,8 @@
             "value": "New Query"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
-    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df14df7-e778-11d9-bab6-000c414ce854",
@@ -794,8 +794,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Bugs) assign (Attribute: Query Spec) = (Query Spec: New Query)
-    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Bugs)
+    // (Section: List of Bugs).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: List of Bugs)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df14df8-e778-11d9-bab6-000c414ce854",
@@ -811,7 +811,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "0df879e0-e778-11d9-bab6-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Name) = "Layout data for Table of List of Bugs"
+    // (Layout Data: Layout data for Table of List of Bugs).(Name) = "Layout data for Table of List of Bugs"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df879e1-e778-11d9-bab6-000c414ce854",
@@ -821,8 +821,8 @@
             "value": "Layout data for Table of List of Bugs"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Category) = (Category: Layout Data)
-    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Bugs)
+    // (Layout Data: Layout data for Table of List of Bugs).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of List of Bugs)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df879e2-e778-11d9-bab6-000c414ce854",
@@ -831,7 +831,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    // (Layout Data: Layout data for Table of List of Bugs).(Applies To Plugin) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df879e3-e778-11d9-bab6-000c414ce854",
@@ -841,8 +841,8 @@
             "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Bugs) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Bugs)
-    // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Section this layout data belongs to) = (Section: List of Bugs)
+    // (Section: List of Bugs).(Layout Data) = (Layout Data: Layout data for Table of List of Bugs)
+    // (Layout Data: Layout data for Table of List of Bugs).(Section this layout data belongs to) = (Section: List of Bugs)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "0df879e4-e778-11d9-bab6-000c414ce854",
@@ -858,7 +858,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "4bfcc9d0-e778-11d9-a869-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Page: Introspection) assign (Attribute: Name) = "Introspection"
+    // (Page: Introspection).(Name) = "Introspection"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bfcc9d1-e778-11d9-a869-000c414ce854",
@@ -868,8 +868,8 @@
             "value": "Introspection"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Introspection) assign (Attribute: Category) = (Category: Page)
-    // On item (Category: Page) assign (Attribute: Items in Category) = (Page: Introspection)
+    // (Page: Introspection).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: Introspection)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bfcc9d2-e778-11d9-a869-000c414ce854",
@@ -878,7 +878,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Introspection) assign (Attribute: Summary) = "This is the introspection page."
+    // (Page: Introspection).(Summary) = "This is the introspection page."
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bfcc9d3-e778-11d9-a869-000c414ce854",
@@ -892,7 +892,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "4bfcc9d4-e778-11d9-a869-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Categories) assign (Attribute: Name) = "List of Categories"
+    // (Section: List of Categories).(Name) = "List of Categories"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bfcc9d5-e778-11d9-a869-000c414ce854",
@@ -902,8 +902,8 @@
             "value": "List of Categories"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Categories) assign (Attribute: Category) = (Category: Section)
-    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: List of Categories)
+    // (Section: List of Categories).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: List of Categories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bfcc9d6-e778-11d9-a869-000c414ce854",
@@ -912,8 +912,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Introspection) assign (Attribute: Sections In Page) = (Section: List of Categories)
-    // On item (Section: List of Categories) assign (Attribute: Page this section appears on) = (Page: Introspection)
+    // (Page: Introspection).(Sections In Page) = (Section: List of Categories)
+    // (Section: List of Categories).(Page this section appears on) = (Page: Introspection)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bfcc9d7-e778-11d9-a869-000c414ce854",
@@ -922,7 +922,7 @@
         "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Categories) assign (Attribute: Plugin View) = (Plugin View: Table)
+    // (Section: List of Categories).(Plugin View) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bff3ad0-e778-11d9-a869-000c414ce854",
@@ -936,7 +936,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "4bff3ad1-e778-11d9-a869-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    // (Query Spec: New Query).(Name) = "New Query"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bff3ad2-e778-11d9-a869-000c414ce854",
@@ -946,8 +946,8 @@
             "value": "New Query"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
-    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bff3ad3-e778-11d9-a869-000c414ce854",
@@ -956,8 +956,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Categories) assign (Attribute: Query Spec) = (Query Spec: New Query)
-    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: List of Categories)
+    // (Section: List of Categories).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: List of Categories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4bff3ad4-e778-11d9-a869-000c414ce854",
@@ -973,7 +973,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "4c063fb0-e778-11d9-a869-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Name) = "Layout data for Table of List of Categories"
+    // (Layout Data: Layout data for Table of List of Categories).(Name) = "Layout data for Table of List of Categories"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4c063fb1-e778-11d9-a869-000c414ce854",
@@ -983,8 +983,8 @@
             "value": "Layout data for Table of List of Categories"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Category) = (Category: Layout Data)
-    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of List of Categories)
+    // (Layout Data: Layout data for Table of List of Categories).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of List of Categories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4c063fb2-e778-11d9-a869-000c414ce854",
@@ -993,7 +993,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    // (Layout Data: Layout data for Table of List of Categories).(Applies To Plugin) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4c063fb3-e778-11d9-a869-000c414ce854",
@@ -1003,8 +1003,8 @@
             "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: List of Categories) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of List of Categories)
-    // On item (Layout Data: Layout data for Table of List of Categories) assign (Attribute: Section this layout data belongs to) = (Section: List of Categories)
+    // (Section: List of Categories).(Layout Data) = (Layout Data: Layout data for Table of List of Categories)
+    // (Layout Data: Layout data for Table of List of Categories).(Section this layout data belongs to) = (Section: List of Categories)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4c063fb4-e778-11d9-a869-000c414ce854",
@@ -1014,7 +1014,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Category)
+  // (Query Spec: New Query).(Matching Value) = (Category: Category)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "7fb1c9b0-e778-11d9-a7da-000c414ce854",
@@ -1024,7 +1024,7 @@
           "value": "00001211-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Person)
+  // (Query Spec: New Query).(Matching Value) = (Category: Person)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "9c0d9d50-e778-11d9-a7da-000c414ce854",
@@ -1040,7 +1040,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "a5dc24a0-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Category: Iteration) assign (Attribute: Name) = "Iteration"
+    // (Category: Iteration).(Name) = "Iteration"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "aa24f1e0-e778-11d9-a7da-000c414ce854",
@@ -1050,8 +1050,8 @@
             "value": "Iteration"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Category: Iteration) assign (Attribute: Category) = (Category: Category)
-    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: Iteration)
+    // (Category: Iteration).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: Iteration)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "aa24f1e1-e778-11d9-a7da-000c414ce854",
@@ -1067,7 +1067,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "aa273bd0-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Category: User Story) assign (Attribute: Name) = "User Story"
+    // (Category: User Story).(Name) = "User Story"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b1532bd0-e778-11d9-a7da-000c414ce854",
@@ -1077,8 +1077,8 @@
             "value": "User Story"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Category: User Story) assign (Attribute: Category) = (Category: Category)
-    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: User Story)
+    // (Category: User Story).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: User Story)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b1532bd1-e778-11d9-a7da-000c414ce854",
@@ -1094,7 +1094,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "b15575c0-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Category: Task) assign (Attribute: Name) = "Task"
+    // (Category: Task).(Name) = "Task"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b3f37930-e778-11d9-a7da-000c414ce854",
@@ -1104,8 +1104,8 @@
             "value": "Task"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Category: Task) assign (Attribute: Category) = (Category: Category)
-    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: Task)
+    // (Category: Task).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: Task)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b3f37931-e778-11d9-a7da-000c414ce854",
@@ -1121,7 +1121,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "b3f37932-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Category: Bug) assign (Attribute: Name) = "Bug"
+    // (Category: Bug).(Name) = "Bug"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b6a46860-e778-11d9-a7da-000c414ce854",
@@ -1131,8 +1131,8 @@
             "value": "Bug"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Category: Bug) assign (Attribute: Category) = (Category: Category)
-    // On item (Category: Category) assign (Attribute: Items in Category) = (Category: Bug)
+    // (Category: Bug).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: Bug)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b6a46861-e778-11d9-a7da-000c414ce854",
@@ -1142,7 +1142,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Iteration)
+  // (Query Spec: New Query).(Matching Value) = (Category: Iteration)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "bb8cf810-e778-11d9-a7da-000c414ce854",
@@ -1152,7 +1152,7 @@
           "value": "a5dc24a0-e778-11d9-a7da-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: User Story)
+  // (Query Spec: New Query).(Matching Value) = (Category: User Story)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "c6262260-e778-11d9-a7da-000c414ce854",
@@ -1162,7 +1162,7 @@
           "value": "aa273bd0-e778-11d9-a7da-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Task)
+  // (Query Spec: New Query).(Matching Value) = (Category: Task)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "c9283ed0-e778-11d9-a7da-000c414ce854",
@@ -1172,7 +1172,7 @@
           "value": "b15575c0-e778-11d9-a7da-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Bug)
+  // (Query Spec: New Query).(Matching Value) = (Category: Bug)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "cd0ccc00-e778-11d9-a7da-000c414ce854",
@@ -1188,7 +1188,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "ceb795d0-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 1) assign (Attribute: Name) = "Iteration 1"
+    // (Iteration: Iteration 1).(Name) = "Iteration 1"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e0d99d30-e778-11d9-a7da-000c414ce854",
@@ -1198,8 +1198,8 @@
             "value": "Iteration 1"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 1) assign (Attribute: Category) = (Category: Iteration)
-    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 1)
+    // (Iteration: Iteration 1).(Category) = (Category: Iteration)
+    // (Category: Iteration).(Items in Category) = (Iteration: Iteration 1)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e0d99d31-e778-11d9-a7da-000c414ce854",
@@ -1215,7 +1215,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "e0dc0e30-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 2) assign (Attribute: Name) = "Iteration 2"
+    // (Iteration: Iteration 2).(Name) = "Iteration 2"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e2a0efb0-e778-11d9-a7da-000c414ce854",
@@ -1225,8 +1225,8 @@
             "value": "Iteration 2"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 2) assign (Attribute: Category) = (Category: Iteration)
-    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 2)
+    // (Iteration: Iteration 2).(Category) = (Category: Iteration)
+    // (Category: Iteration).(Items in Category) = (Iteration: Iteration 2)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e2a0efb1-e778-11d9-a7da-000c414ce854",
@@ -1242,7 +1242,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "e2a360b0-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 3) assign (Attribute: Name) = "Iteration 3"
+    // (Iteration: Iteration 3).(Name) = "Iteration 3"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e7208460-e778-11d9-a7da-000c414ce854",
@@ -1252,8 +1252,8 @@
             "value": "Iteration 3"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 3) assign (Attribute: Category) = (Category: Iteration)
-    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 3)
+    // (Iteration: Iteration 3).(Category) = (Category: Iteration)
+    // (Category: Iteration).(Items in Category) = (Iteration: Iteration 3)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e7208461-e778-11d9-a7da-000c414ce854",
@@ -1269,7 +1269,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "e7208462-e778-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 4) assign (Attribute: Name) = "Iteration 4"
+    // (Iteration: Iteration 4).(Name) = "Iteration 4"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "ecdae300-e778-11d9-a7da-000c414ce854",
@@ -1279,8 +1279,8 @@
             "value": "Iteration 4"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Iteration: Iteration 4) assign (Attribute: Category) = (Category: Iteration)
-    // On item (Category: Iteration) assign (Attribute: Items in Category) = (Iteration: Iteration 4)
+    // (Iteration: Iteration 4).(Category) = (Category: Iteration)
+    // (Category: Iteration).(Items in Category) = (Iteration: Iteration 4)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "ecdae301-e778-11d9-a7da-000c414ce854",
@@ -1290,7 +1290,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Short Name)
+  // (Layout Data: Layout data for Table of List of Iterations).(Table Columns) = (Attribute: Short Name)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "f117a251-e778-11d9-a7da-000c414ce854",
@@ -1300,7 +1300,7 @@
           "value": "00001002-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Name)
+  // (Layout Data: Layout data for Table of List of Iterations).(Table Columns) = (Attribute: Name)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "f117a250-e778-11d9-a7da-000c414ce854",
@@ -1310,7 +1310,7 @@
           "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 1) assign (Attribute: Short Name) = "Iteration 1"
+  // (Iteration: Iteration 1).(Short Name) = "Iteration 1"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "f53f04e0-e778-11d9-a7da-000c414ce854",
@@ -1320,7 +1320,7 @@
           "value": "Iteration 1"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 2) assign (Attribute: Short Name) = "Iteration 2"
+  // (Iteration: Iteration 2).(Short Name) = "Iteration 2"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "f6f0d390-e778-11d9-a7da-000c414ce854",
@@ -1330,7 +1330,7 @@
           "value": "Iteration 2"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 3) assign (Attribute: Short Name) = "Iteration 3"
+  // (Iteration: Iteration 3).(Short Name) = "Iteration 3"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "f89b9d60-e778-11d9-a7da-000c414ce854",
@@ -1340,7 +1340,7 @@
           "value": "Iteration 3"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 4) assign (Attribute: Short Name) = "Iteration 4"
+  // (Iteration: Iteration 4).(Short Name) = "Iteration 4"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "fc8c3880-e778-11d9-a7da-000c414ce854",
@@ -1350,7 +1350,7 @@
           "value": "Iteration 4"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 1) assign (Attribute: Name) = "Iteration 1 - May 2005"
+  // (Iteration: Iteration 1).(Name) = "Iteration 1 - May 2005"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "113b7a70-e779-11d9-a7da-000c414ce854",
@@ -1361,7 +1361,7 @@
           "value": "Iteration 1 - May 2005"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 1) assign (Attribute: Name) = "Iteration 1 ? May 2005"
+  // (Iteration: Iteration 1).(Name) = "Iteration 1 ? May 2005"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "26d20f20-e779-11d9-a7da-000c414ce854",
@@ -1372,7 +1372,7 @@
           "value": "Iteration 1 ? May 2005"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 2) assign (Attribute: Name) = "Iteration 2 ? June 2005"
+  // (Iteration: Iteration 2).(Name) = "Iteration 2 ? June 2005"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "2d8db120-e779-11d9-a7da-000c414ce854",
@@ -1383,7 +1383,7 @@
           "value": "Iteration 2 ? June 2005"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 3) assign (Attribute: Name) = "Iteration 3 ? July 2005"
+  // (Iteration: Iteration 3).(Name) = "Iteration 3 ? July 2005"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "31b2c9c0-e779-11d9-a7da-000c414ce854",
@@ -1400,7 +1400,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "4b113be0-e779-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Section: New Section) assign (Attribute: Name) = "New Section"
+    // (Section: New Section).(Name) = "New Section"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b113be1-e779-11d9-a7da-000c414ce854",
@@ -1410,8 +1410,8 @@
             "value": "New Section"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: New Section) assign (Attribute: Category) = (Category: Section)
-    // On item (Category: Section) assign (Attribute: Items in Category) = (Section: New Section)
+    // (Section: New Section).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: New Section)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b13ace0-e779-11d9-a7da-000c414ce854",
@@ -1420,8 +1420,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Page: Introspection) assign (Attribute: Sections In Page) = (Section: New Section)
-    // On item (Section: New Section) assign (Attribute: Page this section appears on) = (Page: Introspection)
+    // (Page: Introspection).(Sections In Page) = (Section: New Section)
+    // (Section: New Section).(Page this section appears on) = (Page: Introspection)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b13ace1-e779-11d9-a7da-000c414ce854",
@@ -1430,7 +1430,7 @@
         "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: New Section) assign (Attribute: Plugin View) = (Plugin View: Table)
+    // (Section: New Section).(Plugin View) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b13ace2-e779-11d9-a7da-000c414ce854",
@@ -1444,7 +1444,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "4b13ace3-e779-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Name) = "New Query"
+    // (Query Spec: New Query).(Name) = "New Query"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b13ace4-e779-11d9-a7da-000c414ce854",
@@ -1454,8 +1454,8 @@
             "value": "New Query"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Query Spec: New Query) assign (Attribute: Category) = (Category: Query Spec)
-    // On item (Category: Query Spec) assign (Attribute: Items in Category) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b13ace5-e779-11d9-a7da-000c414ce854",
@@ -1464,8 +1464,8 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: New Section) assign (Attribute: Query Spec) = (Query Spec: New Query)
-    // On item (Query Spec: New Query) assign (Attribute: Section this query spec belongs to) = (Section: New Section)
+    // (Section: New Section).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: New Section)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b13ace6-e779-11d9-a7da-000c414ce854",
@@ -1481,7 +1481,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "4b1867d0-e779-11d9-a7da-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Name) = "Layout data for Table of New Section"
+    // (Layout Data: Layout data for Table of New Section).(Name) = "Layout data for Table of New Section"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b1867d1-e779-11d9-a7da-000c414ce854",
@@ -1491,8 +1491,8 @@
             "value": "Layout data for Table of New Section"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Category) = (Category: Layout Data)
-    // On item (Category: Layout Data) assign (Attribute: Items in Category) = (Layout Data: Layout data for Table of New Section)
+    // (Layout Data: Layout data for Table of New Section).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of New Section)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b1867d2-e779-11d9-a7da-000c414ce854",
@@ -1501,7 +1501,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },
     // -----------------------------------------------------------------------
-    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Applies To Plugin) = (Plugin View: Table)
+    // (Layout Data: Layout data for Table of New Section).(Applies To Plugin) = (Plugin View: Table)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b1867d3-e779-11d9-a7da-000c414ce854",
@@ -1511,8 +1511,8 @@
             "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Section: New Section) assign (Attribute: Layout Data) = (Layout Data: Layout data for Table of New Section)
-    // On item (Layout Data: Layout data for Table of New Section) assign (Attribute: Section this layout data belongs to) = (Section: New Section)
+    // (Section: New Section).(Layout Data) = (Layout Data: Layout data for Table of New Section)
+    // (Layout Data: Layout data for Table of New Section).(Section this layout data belongs to) = (Section: New Section)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "4b1867d4-e779-11d9-a7da-000c414ce854",
@@ -1522,7 +1522,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Query Spec: New Query) assign (Attribute: Matching Value) = (Category: Attribute)
+  // (Query Spec: New Query).(Matching Value) = (Category: Attribute)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "556c72d0-e779-11d9-a7da-000c414ce854",
@@ -1532,7 +1532,7 @@
           "value": "00001210-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Section: List of Attributes) assign (Attribute: Name) = "List of Attributes"
+  // (Section: List of Attributes).(Name) = "List of Attributes"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "5ee9f3f0-e779-11d9-a7da-000c414ce854",
@@ -1549,7 +1549,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "add58150-e779-11d9-93ea-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (User Story: Deletion) assign (Attribute: Name) = "Deletion"
+    // (User Story: Deletion).(Name) = "Deletion"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b3f3f8f0-e779-11d9-93ea-000c414ce854",
@@ -1559,8 +1559,8 @@
             "value": "Deletion"  }
     },
     // -----------------------------------------------------------------------
-    // On item (User Story: Deletion) assign (Attribute: Category) = (Category: User Story)
-    // On item (Category: User Story) assign (Attribute: Items in Category) = (User Story: Deletion)
+    // (User Story: Deletion).(Category) = (Category: User Story)
+    // (Category: User Story).(Items in Category) = (User Story: Deletion)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "b3f3f8f1-e779-11d9-93ea-000c414ce854",
@@ -1570,7 +1570,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Table Columns) = (Attribute: Name)
+  // (Layout Data: Layout data for Table of List of Stories).(Table Columns) = (Attribute: Name)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "b8f42f50-e779-11d9-93ea-000c414ce854",
@@ -1580,7 +1580,7 @@
           "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Stories) assign (Attribute: Table Columns) = (Attribute: Summary)
+  // (Layout Data: Layout data for Table of List of Stories).(Table Columns) = (Attribute: Summary)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "b8f42f51-e779-11d9-93ea-000c414ce854",
@@ -1590,7 +1590,7 @@
           "value": "00001003-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (User Story: Deletion) assign (Attribute: Summary) = "A logged-in user can delete items"
+  // (User Story: Deletion).(Summary) = "A logged-in user can delete items"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "bac78fc0-e779-11d9-93ea-000c414ce854",
@@ -1606,7 +1606,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "b8f6a050-e779-11d9-93ea-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (User Story: Reliable data-store) assign (Attribute: Name) = "Reliable data-store"
+    // (User Story: Reliable data-store).(Name) = "Reliable data-store"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "ccdb3f40-e779-11d9-93ea-000c414ce854",
@@ -1616,8 +1616,8 @@
             "value": "Reliable data-store"  }
     },
     // -----------------------------------------------------------------------
-    // On item (User Story: Reliable data-store) assign (Attribute: Category) = (Category: User Story)
-    // On item (Category: User Story) assign (Attribute: Items in Category) = (User Story: Reliable data-store)
+    // (User Story: Reliable data-store).(Category) = (Category: User Story)
+    // (Category: User Story).(Items in Category) = (User Story: Reliable data-store)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "ccdb3f41-e779-11d9-93ea-000c414ce854",
@@ -1627,7 +1627,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (User Story: Reliable data-store) assign (Attribute: Summary) = "Users can trust that data won't be lost."
+  // (User Story: Reliable data-store).(Summary) = "Users can trust that data won't be lost."
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "dad39a20-e779-11d9-93ea-000c414ce854",
@@ -1643,7 +1643,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "fd8967c0-e779-11d9-93ea-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Task: DOM level 2) assign (Attribute: Name) = "DOM level 2"
+    // (Task: DOM level 2).(Name) = "DOM level 2"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "036c35f0-e77a-11d9-93ea-000c414ce854",
@@ -1653,8 +1653,8 @@
             "value": "DOM level 2"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Task: DOM level 2) assign (Attribute: Category) = (Category: Task)
-    // On item (Category: Task) assign (Attribute: Items in Category) = (Task: DOM level 2)
+    // (Task: DOM level 2).(Category) = (Category: Task)
+    // (Category: Task).(Items in Category) = (Task: DOM level 2)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "036c35f1-e77a-11d9-93ea-000c414ce854",
@@ -1664,7 +1664,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Summary)
+  // (Layout Data: Layout data for Table of List of Tasks).(Table Columns) = (Attribute: Summary)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "0503ecf1-e77a-11d9-93ea-000c414ce854",
@@ -1674,7 +1674,7 @@
           "value": "00001003-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Name)
+  // (Layout Data: Layout data for Table of List of Tasks).(Table Columns) = (Attribute: Name)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "0503ecf0-e77a-11d9-93ea-000c414ce854",
@@ -1684,7 +1684,7 @@
           "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Task: DOM level 2) assign (Attribute: Summary) = "Convert UI code from DOM level 0 to DOM level 2"
+  // (Task: DOM level 2).(Summary) = "Convert UI code from DOM level 0 to DOM level 2"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "08598090-e77a-11d9-93ea-000c414ce854",
@@ -1694,7 +1694,7 @@
           "value": "Convert UI code from DOM level 0 to DOM level 2"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Table Columns) = (Attribute: Name)
+  // (Layout Data: Layout data for Table of List of Bugs).(Table Columns) = (Attribute: Name)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "15ed9b60-e77a-11d9-93ea-000c414ce854",
@@ -1704,7 +1704,7 @@
           "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Bugs) assign (Attribute: Table Columns) = (Attribute: Summary)
+  // (Layout Data: Layout data for Table of List of Bugs).(Table Columns) = (Attribute: Summary)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "15ed9b61-e77a-11d9-93ea-000c414ce854",
@@ -1720,7 +1720,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "15efe550-e77a-11d9-93ea-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Bug: Back button) assign (Attribute: Name) = "Back button"
+    // (Bug: Back button).(Name) = "Back button"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "18630830-e77a-11d9-93ea-000c414ce854",
@@ -1730,8 +1730,8 @@
             "value": "Back button"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Bug: Back button) assign (Attribute: Category) = (Category: Bug)
-    // On item (Category: Bug) assign (Attribute: Items in Category) = (Bug: Back button)
+    // (Bug: Back button).(Category) = (Category: Bug)
+    // (Category: Bug).(Items in Category) = (Bug: Back button)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "18630831-e77a-11d9-93ea-000c414ce854",
@@ -1741,7 +1741,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Bug: Back button) assign (Attribute: Summary) = "back button is broken."
+  // (Bug: Back button).(Summary) = "back button is broken."
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "1b81ad50-e77a-11d9-93ea-000c414ce854",
@@ -1751,7 +1751,7 @@
           "value": "back button is broken."  }
   },
   // -----------------------------------------------------------------------
-  // On item (Bug: Back button) assign (Attribute: Summary) = "The back button is broken."
+  // (Bug: Back button).(Summary) = "The back button is broken."
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "1f87a530-e77a-11d9-93ea-000c414ce854",
@@ -1768,7 +1768,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "3af52130-e77a-11d9-93ea-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Completion Date) assign (Attribute: Name) = "Completion Date"
+    // (Attribute: Completion Date).(Name) = "Completion Date"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "457ff3a0-e77a-11d9-93ea-000c414ce854",
@@ -1778,8 +1778,8 @@
             "value": "Completion Date"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Completion Date) assign (Attribute: Category) = (Category: Attribute)
-    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Completion Date)
+    // (Attribute: Completion Date).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Completion Date)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "457ff3a1-e77a-11d9-93ea-000c414ce854",
@@ -1789,7 +1789,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Completion Date) assign (Attribute: Expected Type) = (Type: Date)
+  // (Attribute: Completion Date).(Expected Type) = (Type: Date)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "4782ef90-e77a-11d9-93ea-000c414ce854",
@@ -1799,7 +1799,7 @@
           "value": "00001022-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Completion Date)
+  // (Layout Data: Layout data for Table of List of Iterations).(Table Columns) = (Attribute: Completion Date)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "572f8a20-e77a-11d9-8196-000c414ce854",
@@ -1809,7 +1809,7 @@
           "value": "3af52130-e77a-11d9-93ea-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 1) assign (Attribute: Completion Date) = "Mon May 30 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
+  // (Iteration: Iteration 1).(Completion Date) = "Mon May 30 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "6892d560-e77a-11d9-8196-000c414ce854",
@@ -1819,7 +1819,7 @@
           "value": "Mon May 30 2005 00:00:00 GMT-0700 (Pacific Standard Time)"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 1) assign (Attribute: Completion Date) = "Mon Jun 06 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
+  // (Iteration: Iteration 1).(Completion Date) = "Mon Jun 06 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "7c85cc30-e77a-11d9-8196-000c414ce854",
@@ -1830,7 +1830,7 @@
           "value": "Mon Jun 06 2005 00:00:00 GMT-0700 (Pacific Standard Time)"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Iteration: Iteration 2) assign (Attribute: Completion Date) = "Tue Jul 05 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
+  // (Iteration: Iteration 2).(Completion Date) = "Tue Jul 05 2005 00:00:00 GMT-0700 (Pacific Standard Time)"
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "84c88360-e77a-11d9-8196-000c414ce854",
@@ -1846,7 +1846,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "99cff770-e77a-11d9-8196-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Tasks Scheduled) assign (Attribute: Name) = "Tasks Scheduled"
+    // (Attribute: Tasks Scheduled).(Name) = "Tasks Scheduled"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "dbf938f0-e77a-11d9-8196-000c414ce854",
@@ -1856,8 +1856,8 @@
             "value": "Tasks Scheduled"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Tasks Scheduled) assign (Attribute: Category) = (Category: Attribute)
-    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Tasks Scheduled)
+    // (Attribute: Tasks Scheduled).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Tasks Scheduled)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "dbf938f1-e77a-11d9-8196-000c414ce854",
@@ -1867,7 +1867,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Tasks Scheduled) assign (Attribute: Expected Type) = (Category: Task)
+  // (Attribute: Tasks Scheduled).(Expected Type) = (Category: Task)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "dd877a10-e77a-11d9-8196-000c414ce854",
@@ -1883,7 +1883,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "dbfba9f0-e77a-11d9-8196-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Scheduled For) assign (Attribute: Name) = "Scheduled For"
+    // (Attribute: Scheduled For).(Name) = "Scheduled For"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e26fe2b0-e77a-11d9-8196-000c414ce854",
@@ -1893,8 +1893,8 @@
             "value": "Scheduled For"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Scheduled For) assign (Attribute: Category) = (Category: Attribute)
-    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Scheduled For)
+    // (Attribute: Scheduled For).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Scheduled For)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "e26fe2b1-e77a-11d9-8196-000c414ce854",
@@ -1904,7 +1904,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Scheduled For) assign (Attribute: Expected Type) = (Category: Iteration)
+  // (Attribute: Scheduled For).(Expected Type) = (Category: Iteration)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "e4ae8810-e77a-11d9-8196-000c414ce854",
@@ -1914,8 +1914,8 @@
           "value": "a5dc24a0-e778-11d9-a7da-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Tasks Scheduled) assign (Attribute: Inverse Attribute) = (Attribute: Scheduled For)
-  // On item (Attribute: Scheduled For) assign (Attribute: Inverse Attribute) = (Attribute: Tasks Scheduled)
+  // (Attribute: Tasks Scheduled).(Inverse Attribute) = (Attribute: Scheduled For)
+  // (Attribute: Scheduled For).(Inverse Attribute) = (Attribute: Tasks Scheduled)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "f6aa69d0-e77a-11d9-964e-000c414ce854",
@@ -1930,7 +1930,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "10f9a490-e77b-11d9-964e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Estimate) assign (Attribute: Name) = "Estimate"
+    // (Attribute: Estimate).(Name) = "Estimate"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "1d49a6a0-e77b-11d9-964e-000c414ce854",
@@ -1940,8 +1940,8 @@
             "value": "Estimate"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Estimate) assign (Attribute: Category) = (Category: Attribute)
-    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Estimate)
+    // (Attribute: Estimate).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Estimate)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "1d49a6a1-e77b-11d9-964e-000c414ce854",
@@ -1951,7 +1951,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Estimate) assign (Attribute: Expected Type) = (Type: Number)
+  // (Attribute: Estimate).(Expected Type) = (Type: Number)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "2113f510-e77b-11d9-964e-000c414ce854",
@@ -1967,7 +1967,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "1d49a6a2-e77b-11d9-964e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Actual) assign (Attribute: Name) = "Actual"
+    // (Attribute: Actual).(Name) = "Actual"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "23e64ef0-e77b-11d9-964e-000c414ce854",
@@ -1977,8 +1977,8 @@
             "value": "Actual"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Actual) assign (Attribute: Category) = (Category: Attribute)
-    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Actual)
+    // (Attribute: Actual).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Actual)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "23e64ef1-e77b-11d9-964e-000c414ce854",
@@ -1988,7 +1988,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Actual) assign (Attribute: Expected Type) = (Type: Number)
+  // (Attribute: Actual).(Expected Type) = (Type: Number)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "2582c0e0-e77b-11d9-964e-000c414ce854",
@@ -2004,7 +2004,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "23e8bff0-e77b-11d9-964e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Signed-up Person) assign (Attribute: Name) = "Signed-up Person"
+    // (Attribute: Signed-up Person).(Name) = "Signed-up Person"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "44c8e330-e77b-11d9-964e-000c414ce854",
@@ -2014,8 +2014,8 @@
             "value": "Signed-up Person"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Signed-up Person) assign (Attribute: Category) = (Category: Attribute)
-    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Signed-up Person)
+    // (Attribute: Signed-up Person).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Signed-up Person)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "44cb5430-e77b-11d9-964e-000c414ce854",
@@ -2025,7 +2025,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Signed-up Person) assign (Attribute: Expected Type) = (Category: Person)
+  // (Attribute: Signed-up Person).(Expected Type) = (Category: Person)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "464d8760-e77b-11d9-964e-000c414ce854",
@@ -2041,7 +2041,7 @@
     //           by (Brian) on (Jun 27, 2005)
     { "Item": { "uuid": "44cb5431-e77b-11d9-964e-000c414ce854" } },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Tasks signed-up for) assign (Attribute: Name) = "Tasks signed-up for"
+    // (Attribute: Tasks signed-up for).(Name) = "Tasks signed-up for"
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "516c3560-e77b-11d9-964e-000c414ce854",
@@ -2051,8 +2051,8 @@
             "value": "Tasks signed-up for"  }
     },
     // -----------------------------------------------------------------------
-    // On item (Attribute: Tasks signed-up for) assign (Attribute: Category) = (Category: Attribute)
-    // On item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Tasks signed-up for)
+    // (Attribute: Tasks signed-up for).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Tasks signed-up for)
     //           by (Brian) on (Jun 27, 2005)
     { "Entry": {
              "uuid": "516c3561-e77b-11d9-964e-000c414ce854",
@@ -2062,7 +2062,7 @@
     }  ]
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Tasks signed-up for) assign (Attribute: Expected Type) = (Category: Task)
+  // (Attribute: Tasks signed-up for).(Expected Type) = (Category: Task)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "52f80580-e77b-11d9-964e-000c414ce854",
@@ -2072,8 +2072,8 @@
           "value": "b15575c0-e778-11d9-a7da-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Attribute: Tasks signed-up for) assign (Attribute: Inverse Attribute) = (Attribute: Signed-up Person)
-  // On item (Attribute: Signed-up Person) assign (Attribute: Inverse Attribute) = (Attribute: Tasks signed-up for)
+  // (Attribute: Tasks signed-up for).(Inverse Attribute) = (Attribute: Signed-up Person)
+  // (Attribute: Signed-up Person).(Inverse Attribute) = (Attribute: Tasks signed-up for)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "6ae02b50-e77b-11d9-95dd-000c414ce854",
@@ -2082,7 +2082,7 @@
       "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Table Columns) = (Attribute: Name)
+  // (Layout Data: Layout data for Table of List of People).(Table Columns) = (Attribute: Name)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "78f50ee0-e77b-11d9-95dd-000c414ce854",
@@ -2092,7 +2092,7 @@
           "value": "00001001-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Table Columns) = (Attribute: Tasks signed-up for)
+  // (Layout Data: Layout data for Table of List of People).(Table Columns) = (Attribute: Tasks signed-up for)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "78f50ee1-e77b-11d9-95dd-000c414ce854",
@@ -2102,7 +2102,7 @@
           "value": "44cb5431-e77b-11d9-964e-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of People) assign (Attribute: Table Columns) = (Attribute: Short Name)
+  // (Layout Data: Layout data for Table of List of People).(Table Columns) = (Attribute: Short Name)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "78f2c4f0-e77b-11d9-95dd-000c414ce854",
@@ -2112,7 +2112,7 @@
           "value": "00001002-ce7f-11d9-8cd5-0011113ae5d6"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Signed-up Person)
+  // (Layout Data: Layout data for Table of List of Tasks).(Table Columns) = (Attribute: Signed-up Person)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "85475ae0-e77b-11d9-95dd-000c414ce854",
@@ -2122,7 +2122,7 @@
           "value": "23e8bff0-e77b-11d9-964e-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Estimate)
+  // (Layout Data: Layout data for Table of List of Tasks).(Table Columns) = (Attribute: Estimate)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "8bd84360-e77b-11d9-95dd-000c414ce854",
@@ -2132,7 +2132,7 @@
           "value": "10f9a490-e77b-11d9-964e-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Actual)
+  // (Layout Data: Layout data for Table of List of Tasks).(Table Columns) = (Attribute: Actual)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "932ca2f0-e77b-11d9-95dd-000c414ce854",
@@ -2142,7 +2142,7 @@
           "value": "1d49a6a2-e77b-11d9-964e-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Tasks) assign (Attribute: Table Columns) = (Attribute: Scheduled For)
+  // (Layout Data: Layout data for Table of List of Tasks).(Table Columns) = (Attribute: Scheduled For)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "a9c71310-e77b-11d9-95dd-000c414ce854",
@@ -2152,7 +2152,7 @@
           "value": "dbfba9f0-e77a-11d9-8196-000c414ce854"  }
   },
   // -----------------------------------------------------------------------
-  // On item (Layout Data: Layout data for Table of List of Iterations) assign (Attribute: Table Columns) = (Attribute: Tasks Scheduled)
+  // (Layout Data: Layout data for Table of List of Iterations).(Table Columns) = (Attribute: Tasks Scheduled)
   //           by (Brian) on (Jun 27, 2005)
   { "Entry": {
            "uuid": "b95242f0-e77b-11d9-95dd-000c414ce854",



From skinner at sheep.berlios.de  Wed Jun 29 19:33:42 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 29 Jun 2005 19:33:42 +0200
Subject: [openrecord-svn] r192 - trunk/source/model
Message-ID: <200506291733.j5THXgms022104@sheep.berlios.de>

Author: skinner
Date: 2005-06-29 19:33:41 +0200 (Wed, 29 Jun 2005)
New Revision: 192

Modified:
   trunk/source/model/StubVirtualServer.js
Log:
Made page loads twice as fast, by changing the getItemsInCategory() method to take advantage of our new bi-directional connections instead of having to walk through every item in the repository.

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-29 05:01:26 UTC (rev 191)
+++ trunk/source/model/StubVirtualServer.js	2005-06-29 17:33:41 UTC (rev 192)
@@ -645,18 +645,30 @@
  * @param    inCategory    A category item. 
  * @return   A list of items.
  */
-StubVirtualServer.prototype.getItemsInCategory = function (inCategory) {
-  Util.assert(inCategory instanceof Item);
+StubVirtualServer.prototype.getItemsInCategory = function (category) {
+  Util.assert(category instanceof Item);
 
+/*  
   var listOfItems = [];
   for (var uuid in this.__myHashTableOfItemsKeyedByUuid) {
     var item = this.__myHashTableOfItemsKeyedByUuid[uuid];
-    if (!item.hasBeenDeleted() && item.isInCategory(inCategory)) {
+    if (!item.hasBeenDeleted() && item.isInCategory(category)) {
       listOfItems.push(item);
     }
   }
   listOfItems.sort(ContentRecord.compareOrdinals);
   return listOfItems; 
+  */
+  var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
+  var listOfEntries = category.getEntriesForAttribute(attributeCalledItemsInCategory);
+  var listOfItems = [];
+  for (var key in listOfEntries) {
+    var entry = listOfEntries[key];
+    var item = entry.getValue(category);
+    listOfItems.push(item);
+  }
+  listOfItems.sort(ContentRecord.compareOrdinals);
+  return listOfItems; 
 };
 
 



From skinner at sheep.berlios.de  Wed Jun 29 23:41:03 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 29 Jun 2005 23:41:03 +0200
Subject: [openrecord-svn] r193 - in trunk: . source source/model
Message-ID: <200506292141.j5TLf3pt016075@sheep.berlios.de>

Author: skinner
Date: 2005-06-29 23:40:59 +0200 (Wed, 29 Jun 2005)
New Revision: 193

Added:
   trunk/source/model/QueryRunner.js
Modified:
   trunk/dashboard.html
   trunk/demo_page.html
   trunk/dogfood.html
   trunk/source/PluginView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/model/Item.js
   trunk/source/model/LintTest.js
   trunk/source/model/ModelTest.html
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
Created a new QueryRunner class, and refactored code and tests to run queries via QueryRunners.

Modified: trunk/dashboard.html
===================================================================
--- trunk/dashboard.html	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/dashboard.html	2005-06-29 21:40:59 UTC (rev 193)
@@ -39,6 +39,7 @@
     <script type="text/javascript" src="source/model/Item.js"></script>
     <script type="text/javascript" src="source/model/Entry.js"></script>
     <script type="text/javascript" src="source/model/Transaction.js"></script>
+    <script type="text/javascript" src="source/model/QueryRunner.js"></script>
     <script type="text/javascript" src="source/model/World.js"></script>
     <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
     <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>

Modified: trunk/demo_page.html
===================================================================
--- trunk/demo_page.html	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/demo_page.html	2005-06-29 21:40:59 UTC (rev 193)
@@ -39,6 +39,7 @@
     <script type="text/javascript" src="source/model/Item.js"></script>
     <script type="text/javascript" src="source/model/Entry.js"></script>
     <script type="text/javascript" src="source/model/Transaction.js"></script>
+    <script type="text/javascript" src="source/model/QueryRunner.js"></script>
     <script type="text/javascript" src="source/model/World.js"></script>
     <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
     <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>

Modified: trunk/dogfood.html
===================================================================
--- trunk/dogfood.html	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/dogfood.html	2005-06-29 21:40:59 UTC (rev 193)
@@ -39,6 +39,7 @@
     <script type="text/javascript" src="source/model/Item.js"></script>
     <script type="text/javascript" src="source/model/Entry.js"></script>
     <script type="text/javascript" src="source/model/Transaction.js"></script>
+    <script type="text/javascript" src="source/model/QueryRunner.js"></script>
     <script type="text/javascript" src="source/model/World.js"></script>
     <script type="text/javascript" src="source/model/StubVirtualServer.js"></script>
     <script type="text/javascript" src="source/model/DeltaVirtualServer.js"></script>

Modified: trunk/source/PluginView.js
===================================================================
--- trunk/source/PluginView.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/PluginView.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -52,7 +52,8 @@
   if (!inSuperView) {return;} // initial call that subclasses of PluginViews make without parameters
   this.setSuperview(inSuperView);
   this.setHTMLElement(inHTMLElement);
-  this._query = inQuery;
+  this._querySpec = inQuery;
+  this._queryRunner = this.getWorld().newQueryRunner(this._querySpec, this);
   this._layout = inLayout;
   this._pluginItem = null;
 }
@@ -70,7 +71,6 @@
  */
 PluginView.prototype.getPluginItem = function () {
   if (!this._pluginItem) {
-    // alert(this.getPluginName());
     var pluginClass = this.getClass();
     // alert(pluginClass);
     var pluginItemUuid = pluginClass.getPluginItemUuid();
@@ -86,24 +86,28 @@
  * @scope    PENDING
  */
 PluginView.prototype.fetchItems = function() {
-  if (Util.isArray(this._query)) {
+  this._listOfItems = this._queryRunner.getResultItems();
+  /*
+  if (Util.isArray(this._querySpec)) {
     //PENDING hack to allow Plugin to support list of items or query
-    this._listOfItems = this._query;
+    this._listOfItems = this._querySpec;
   }
   else {
-    this._listOfItems = this._query ? this.getWorld().getResultItemsForQuery(this._query) : [];
+    this._listOfItems = this._querySpec ? this.getWorld().getResultItemsForQuery(this._querySpec) : [];
   }
+  */
   return this._listOfItems;
 };
 
+
 /**
- * Returns the registered name of this PluginView.
+ * Returns the query spec item used to populate this plugin view.
  *
  * @scope    public instance method
- * @return   A string.
+ * @return   A query spec item.
  */
-PluginView.prototype.getPluginName = function () {
-  Util.assert(false);
+PluginView.prototype.getQuerySpec = function () {
+  return this._querySpec;
 };
 
 

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/SectionView.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -170,7 +170,7 @@
   if (pluginClass) {
     var pluginType = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
     var layoutData = this._getLayoutDataForPlugin(pluginType);
-    newPlugin = new pluginClass(this, pluginDiv, this.getQuery(), layoutData);
+    newPlugin = new pluginClass(this, pluginDiv, this.getQuerySpec(), layoutData);
   }
   return newPlugin;
 };
@@ -182,7 +182,7 @@
  * @scope    public instance method
  * @return   query associated to this section.
  */
-SectionView.prototype.getQuery = function () {
+SectionView.prototype.getQuerySpec = function () {
   var attributeCalledQuerySpec = this.getWorld().getAttributeCalledQuerySpec();
   var queryEntry = this.mySection.getSingleEntryFromAttribute(attributeCalledQuerySpec);
   if (queryEntry) {
@@ -328,7 +328,7 @@
 SectionView.prototype._refreshQueryEditSpan = function () {
   this._queryEditSpan.innerHTML = '';
   
-  var myQuery = this.getQuery();
+  var myQuery = this.getQuerySpec();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
   var listOfMatchingAttrs = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
   var matchingAttribute;
@@ -402,7 +402,7 @@
  */
 SectionView.prototype.observedItemHasChanged = function(item) {
   item.removeObserver(this); //item no longer needs to be observed as query editor span is rebuilt
-  var myQuery = this.getQuery();
+  var myQuery = this.getQuerySpec();
   Util.assert(item == myQuery);
   var pluginItem = this._myPlugin.getPluginItem();
   this._myPlugin.endOfLife();
@@ -473,7 +473,7 @@
   var newQueryMatchingAttribute = this.getWorld().getItemFromUuid(newChoiceUuid);
   var newChoiceName = newQueryMatchingAttribute.getDisplayString();
   
-  var myQuery = this.getQuery();
+  var myQuery = this.getQuerySpec();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
   var listOfMatchingAttrs = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
   var matchingAttribute;

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/TablePlugin.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -269,7 +269,7 @@
  * @param    item      The Item which just became real. 
  */
 TablePlugin.prototype._provisionalItemJustBecomeReal = function(item) {
-  this.getWorld().setItemToBeIncludedInQueryResultList(item, this._query);
+  this.getWorld().setItemToBeIncludedInQueryResultList(item, this.getQuerySpec());
 };
 
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/model/Item.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -542,7 +542,6 @@
  * @return Boolean. True if this item has an attribute with the entry
  */
 Item.prototype.hasAttributeValue = function (inAttribute, inValue) {
-  // Util.assert(inAttribute instanceof Item, inAttribute + ' is not an item');
   Util.assert(inAttribute instanceof Item);
   var entryList = this.getEntriesForAttribute(inAttribute);
 
@@ -569,30 +568,6 @@
 
   var categoryAttribute = this.getWorld().getAttributeCalledCategory();
   return this.hasAttributeValue(categoryAttribute, inCategory);
-  
-  /*
-   * Also returns true if the item has been assigned to some category which is in
-   * turn assigned to the given category, and so on, up the chain of category 
-   * assignments.
-   *
-  // look at all the categories this item is assigned to, and see if one of them
-  // is in turn in the category "inCategory"
-  for (key in entryList) {
-    entry = entryList[key];
-    // PENDING: 
-    //   This will go into an infinite loop if there is ever a cycle in the category 
-    //   assignments, like: A is in category B, and B is in C, and C is in A.
-    //   We need to use a non-recursive search of the graph.
-    // PENDING:
-    //   Do we also need to register as an observer of something, so that if we later
-    //   become a member of that category in question, then we can notify whoever
-    //   is observing us?
-    if ((entry.getValue() != this) && (entry.getValue().isInCategory(inCategory))) {
-      return true;
-    }
-  }
-  return false;
-  */
 };
  
 

Modified: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/model/LintTest.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -41,6 +41,7 @@
     "Item.js",
     "Entry.js",
     "Transaction.js",
+    "QueryRunner.js",
     "World.js",
     "StubVirtualServer.js",
     "DeltaVirtualServer.js"];

Modified: trunk/source/model/ModelTest.html
===================================================================
--- trunk/source/model/ModelTest.html	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/model/ModelTest.html	2005-06-29 21:40:59 UTC (rev 193)
@@ -23,6 +23,7 @@
     <script type="text/javascript" src="Item.js"></script>
     <script type="text/javascript" src="Entry.js"></script>
     <script type="text/javascript" src="Transaction.js"></script>
+    <script type="text/javascript" src="QueryRunner.js"></script>
     <script type="text/javascript" src="World.js"></script>
     <script type="text/javascript" src="StubVirtualServer.js"></script>
     <script type="text/javascript" src="DeltaVirtualServer.js"></script>

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/model/ModelTest.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -321,9 +321,9 @@
   isInCategory = theHobbit.isInCategory(categoryCalledBook);
   assertTrue('"The Hobbit" is NOT in the category "Book"', !isInCategory);
   
-  theHobbit.addEntryForAttribute(attributeCalledCategory, categoryCalledBook);
-  theWisdomOfCrowds.addEntryForAttribute(attributeCalledCategory, categoryCalledBook);
-  theTransparentSociety.addEntryForAttribute(attributeCalledCategory, categoryCalledBook);
+  theHobbit.assignToCategory(categoryCalledBook);
+  theWisdomOfCrowds.assignToCategory(categoryCalledBook);
+  theTransparentSociety.assignToCategory(categoryCalledBook);
   isInCategory = theHobbit.isInCategory(categoryCalledBook);
   assertTrue('"The Hobbit" is in the category "Book"', isInCategory);
  
@@ -334,8 +334,6 @@
   world.logout();
 }
 
-/*
-PENDING: the ordinal implementation was broken by the new UUID code
 function testOrdinals() {
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);
@@ -348,15 +346,17 @@
   var brownie = world.newItem("Brownie");  
 
   var categoryCalledFood = world.newCategory("Food");
-  apple.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
-  cupcake.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
-  brownie.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
+  apple.assignToCategory(categoryCalledFood);
+  cupcake.assignToCategory(categoryCalledFood);
+  brownie.assignToCategory(categoryCalledFood);
 
   var foodItems = world.getItemsInCategory(categoryCalledFood);
   assertTrue('Apple starts out first in the list"', foodItems[0] == apple);
   assertTrue('Cupcake starts out second in the list"', foodItems[1] == cupcake);
   assertTrue('Brownie starts out second in the list"', foodItems[2] == brownie);
 
+/*
+PENDING: the ordinal implementation was broken by the new UUID code
   brownie.reorderBetween(apple, cupcake);
   foodItems = world.getItemsInCategory(categoryCalledFood);
   assertTrue('Apple is now first in the list"', foodItems[0] == apple);
@@ -374,10 +374,10 @@
   assertTrue('Apple is now first in the list"', foodItems[0] == apple);
   assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
   assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
+*/
   
   world.logout();
 }
-*/
   
 function testDeletion() {
   var janesPassword = "jane's password";
@@ -467,9 +467,9 @@
   var cupcake = world.newItem("Cupcake");
 
   var categoryCalledFood = world.newCategory("Food");
-  apple.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
-  brownie.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
-  cupcake.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
+  apple.assignToCategory(categoryCalledFood);
+  brownie.assignToCategory(categoryCalledFood);
+  cupcake.assignToCategory(categoryCalledFood);
 
   var tokyo = world.newItem("Tokyo");
   var seattle = world.newItem("Seattle");
@@ -520,17 +520,18 @@
 
   var categoryCalledFood = world.newCategory("Food");
   assertTrue('The category "Food" is an item', (categoryCalledFood instanceof Item));
-  apple.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
-  brownie.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
-  cupcake.addEntryForAttribute(attributeCalledCategory, categoryCalledFood);
+  apple.assignToCategory(categoryCalledFood);
+  brownie.assignToCategory(categoryCalledFood);
+  cupcake.assignToCategory(categoryCalledFood);
 
   var tokyo = world.newItem("Tokyo");
   var seattle = world.newItem("Seattle");
 
   var hasAll;
   var queryForFoods = world.newQueryForItemsByCategory(categoryCalledFood);
+  var queryRunnerForFoods = world.newQueryRunner(queryForFoods);
+  var listOfFoods = queryRunnerForFoods.getResultItems();
   
-  var listOfFoods = world.getResultItemsForQuery(queryForFoods);
   hasAll = Util.areObjectsInSet([apple, brownie, cupcake], listOfFoods);
   assertTrue('Food query returns 3 foods', listOfFoods.length == 3);
   assertTrue('Food query returns all 3 foods', hasAll);
@@ -545,7 +546,7 @@
   world.setItemToBeIncludedInQueryResultList(tokyo, queryForFoods);
   assertTrue('Tokyo is now a food', tokyo.isInCategory(categoryCalledFood));
 
-  listOfFoods = world.getResultItemsForQuery(queryForFoods);
+  listOfFoods = queryRunnerForFoods.getResultItems();
   hasAll = Util.areObjectsInSet([apple, brownie, cupcake, tokyo], listOfFoods);
   assertTrue('Food query returns 4 foods', listOfFoods.length == 4);
   assertTrue('Food query returns all 4 foods', hasAll);
@@ -556,30 +557,38 @@
   var beijing = world.newItem("Beijing");
   beijing.addEntryForAttribute(attributeCalledContinent, "Asia");
   var seattleEntry = seattle.addEntryForAttribute(attributeCalledContinent, "North America");
-  var asiaQuery = world.newQuery(attributeCalledContinent, "Asia")
-  var listOfCountries = world.getResultItemsForQuery(asiaQuery);
+  // var asiaQuery = world.newQuery(attributeCalledContinent, "Asia")
+  // var listOfCountries = world.getResultItemsForQuery(asiaQuery);
+  var queryRunnerForAsia = world.newQueryRunner([attributeCalledContinent, "Asia"]);
+  var listOfCountries = queryRunnerForAsia.getResultItems();
+  
   assertTrue('Asia query returns 2 countries', listOfCountries.length == 2);
   hasAll = Util.areObjectsInSet([tokyo,beijing], listOfCountries);
   assertTrue('Asia query returns all 2 countries', hasAll);
   
   var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
-  listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
+  // listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
+  var queryRunnerForNorthAmerica = world.newQueryRunner(northAmericaQuery);
+  var listOfCountries = queryRunnerForNorthAmerica.getResultItems();
   assertTrue('North America query returned only Seattle',
   listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
     
   seattle.addEntryForAttribute(attributeCalledContinent, "Asia");
-  listOfCountries = world.getResultItemsForQuery(asiaQuery);
+  // listOfCountries = world.getResultItemsForQuery(asiaQuery);
+  listOfCountries = queryRunnerForAsia.getResultItems();
   assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
   hasAll = Util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
   assertTrue('Asia query returns all 3 countries', hasAll);
   
   world.setItemToBeIncludedInQueryResultList(beijing, northAmericaQuery);
-  listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
-  assertTrue('Beijing is now in North America',Util.isObjectInSet(beijing,listOfCountries));
-  assertTrue('North America query returns 2 countries',listOfCountries.length == 2);
+  // listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
+  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
+  assertTrue('Beijing is now in North America',Util.isObjectInSet(beijing, listOfCountries));
+  assertTrue('North America query returns 2 countries', listOfCountries.length == 2);
   world.setItemToBeIncludedInQueryResultList(seattle, northAmericaQuery);
-  listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
-  assertTrue('North America still returns only 2 countries',listOfCountries.length == 2);
+  // listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
+  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
+  assertTrue('North America still returns only 2 countries', listOfCountries.length == 2);
   
   world.logout();
 }

Added: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/model/QueryRunner.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -0,0 +1,254 @@
+/*****************************************************************************
+ QueryRunner.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+/**
+ * A QueryRunner is used to run a query.  A QueryRunner can be initialized with a
+ * query spec item, so that when the QueryRunner is executed it will return the
+ * item specified by the query spec.
+ *
+ * @scope    public instance constructor
+ * @param    world    The World of items this query will search within. 
+ * @param    querySpec    Optional. A query spec item, or an ad-hoc query. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the query. 
+ */
+function QueryRunner(world, querySpec, observer) {
+  Util.assert(world instanceof World);
+  
+  this._world = world;
+  this._querySpec = querySpec;
+  this._observer = observer;
+  
+  this._listOfResultItems = null;
+  this._matchingAttribute = null;
+  this._listOfMatchingValues = null;
+  
+  if (this._querySpec) {
+    if (this._querySpec instanceof Item) {
+      this._querySpec.addObserver(this);
+    }
+    this._readQuerySpec();
+    this._runQuery();
+  }
+  this.getWorld()._registerQueryRunner(this);
+}
+
+
+// -------------------------------------------------------------------
+// Public methods 
+// -------------------------------------------------------------------
+
+/**
+ * Returns the World instance that this QueryRunner is using.
+ *
+ * @scope    public instance method
+ * @return   A World object. 
+ */
+QueryRunner.prototype.getWorld = function () {
+  return this._world;
+};
+
+
+/**
+ * Returns the attribute item that this query evaluates against.
+ *
+ * @scope    public instance method
+ * @return   An attribute item. 
+ */
+QueryRunner.prototype.getMatchingAttribute = function () {
+  return this._matchingAttribute;
+};
+
+
+/**
+ * Returns the list of values that this query evaluates against.
+ *
+ * @scope    public instance method
+ * @return   A list of values. 
+ */
+QueryRunner.prototype.getMatchingValues = function () {
+  return this._listOfMatchingValues;
+};
+
+
+/**
+ * Returns the list of items that match the query.
+ *
+ * @scope    public instance method
+ * @return   The list of items in the query result set. 
+ */
+QueryRunner.prototype.getResultItems = function () {
+  return this._listOfResultItems;
+};
+
+
+/**
+ * Returns true if the given item matches the query criteria.
+ *
+ * @scope    public instance method
+ * @param    item    An item to test. 
+ * @return   A boolean value. True if the item matches the query criteria.
+ */
+QueryRunner.prototype.doesItemMatch = function(item) {
+  if (item.hasBeenDeleted()) {
+    return false;
+  }
+  
+  var matchingAttribute = this.getMatchingAttribute();
+  var listOfMatchingValues = this.getMatchingValues();
+  for (var key in listOfMatchingValues) {
+    var matchingValue = listOfMatchingValues[key];
+    if (item.hasAttributeValue(matchingAttribute, matchingValue)) {
+      return true;
+    }
+  }
+  
+  return false;
+};
+
+
+/**
+ * Does final clean-up.
+ *
+ * @scope    public instance method
+ */
+QueryRunner.prototype.endOfLife = function() {
+  this.getWorld()._unregisterQueryRunner(this);
+};
+
+
+// -------------------------------------------------------------------
+// QuerySpec observer method 
+// -------------------------------------------------------------------
+
+/**
+ * Called when there has been a change to the querySpec.
+ *
+ * @scope    public instance method
+ * @param    querySpec    The querySpec that was changed. 
+ * @param    listOfChangeRecords    A list of the records that impacted the querySpec. 
+ */
+QueryRunner.prototype.observedItemHasChanged = function(querySpec, listOfChangeRecords) {
+  Util.assert(querySpec == this._querySpec);
+  this._readQuerySpec();
+  this._runQuery();
+};
+
+
+// -------------------------------------------------------------------
+// Change notification methods 
+// -------------------------------------------------------------------
+
+/**
+ * Called by the world if there has been a change to the result set during
+ * a transaction.
+ *
+ * @scope    package instance method
+ */
+QueryRunner.prototype._resultsHaveChanged = function() {
+  this._runQuery();
+};
+
+
+// -------------------------------------------------------------------
+// Private methods 
+// -------------------------------------------------------------------
+
+/**
+ * Reads the querySpec and sets our own query representation to match
+ * the query spec.
+ *
+ * @scope    public instance method
+ */
+QueryRunner.prototype._readQuerySpec = function() {
+  this._matchingAttribute = null;
+  this._listOfMatchingValues = null;
+  
+  if (!this._querySpec) {
+    return;
+  }
+
+  // Handle the case where we have a query spec item
+  if (this._querySpec instanceof Item) {
+    // read the matching attribute from the query spec
+    var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
+    var listOfMatchingAttributeEntries = this._querySpec.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+    if (listOfMatchingAttributeEntries.length === 0) {
+      // by default the matching attribute is category
+      this._matchingAttribute = this.getWorld().getAttributeCalledCategory();
+    }
+    else {
+      Util.assert(listOfMatchingAttributeEntries.length == 1, 'There should only be one matching attribute on a Query Spec item.');
+      this._matchingAttribute = listOfMatchingAttributeEntries[0].getValue();
+    }
+
+    // read the matching values from the query spec
+    this._listOfMatchingValues = [];
+    var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
+    var listOfMatchingEntries = this._querySpec.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+    for (var key in listOfMatchingEntries) {
+      var matchingEntry = listOfMatchingEntries[key];
+      var matchingValue = matchingEntry.getValue();
+      this._listOfMatchingValues.push(matchingValue);
+    }
+  }
+  
+  // Handle the case where we have an ad-hoc query
+  if (Util.isArray(this._querySpec)) {
+    var querySpecArray = this._querySpec;
+    if (querySpecArray.length === 0) {
+      return;
+    }
+    if (querySpecArray.length == 1) {
+      this._matchingAttribute = this.getWorld().getAttributeCalledCategory();
+      this._listOfMatchingValues = querySpecArray;
+    }
+    if (querySpecArray.length > 1) {
+      this._matchingAttribute = querySpecArray.shift();
+      this._listOfMatchingValues = querySpecArray;
+    }
+  }
+  
+};
+
+
+/**
+ * Runs the query.
+ *
+ * @scope    public instance method
+ */
+QueryRunner.prototype._runQuery = function() {
+  this._listOfResultItems = this.getWorld().getResultItemsForQueryRunner(this);
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/model/StubVirtualServer.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -539,6 +539,7 @@
  * Given a query item, this method returns a list of all the items that 
  * match the query criteria.
  *
+ * @deprecated    PENDING: use getResultItemsForQueryRunner() instead.
  * @scope    public instance method
  * @param    inQuery    A query item. 
  * @return   A list of items.
@@ -592,7 +593,54 @@
 };
 
 
+/**
+ * Given a QueryRunner object, this method returns a list of all the items that 
+ * match the query criteria.
+ *
+ * @scope    public instance method
+ * @param    queryRunner    A QueryRunner object. 
+ * @return   A list of items.
+ */
+StubVirtualServer.prototype.getResultItemsForQueryRunner = function(queryRunner) {
+  var matchingAttribute = queryRunner.getMatchingAttribute();
+  var listOfMatchingValues = queryRunner.getMatchingValues();
+  var listOfQueryResultItems = [];
+  var key;
+  
+  if (!matchingAttribute || !listOfMatchingValues) {
+    return listOfQueryResultItems;
+  }
+    
+  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+  if (matchingAttribute == attributeCalledCategory) {
+    // If this is a query for all the item in a category,
+    // then handle that as a special case, because we can
+    // do that way faster than more general queries.
+    var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
+    for (key in listOfMatchingValues) {
+      var category = listOfMatchingValues[key];
+      var listOfEntriesForItemsInCategory = category.getEntriesForAttribute(attributeCalledItemsInCategory);
+      for (var innerKey in listOfEntriesForItemsInCategory) {
+        var entry = listOfEntriesForItemsInCategory[innerKey];
+        var itemInCategory = entry.getValue(category);
+        Util.addObjectToSet(itemInCategory, listOfQueryResultItems);
+      }
+    }
+  } else {
+    // General case code for any sort of query. 
+    for (var uuid in this.__myHashTableOfItemsKeyedByUuid) {
+      var item = this.__myHashTableOfItemsKeyedByUuid[uuid];
+      var includeItem = queryRunner.doesItemMatch(item);
+      if (includeItem) {
+        listOfQueryResultItems.push(item);
+      }
+    }
+  }
+  listOfQueryResultItems.sort(ContentRecord.compareOrdinals);
+  return listOfQueryResultItems; 
+};
 
+
 /**
  * Given an item and a query item, this method modifies the attributes 
  * of the item so that when the query is next evaluated the item will be 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-29 17:33:41 UTC (rev 192)
+++ trunk/source/model/World.js	2005-06-29 21:40:59 UTC (rev 193)
@@ -103,7 +103,9 @@
 function World(virtualServer) {
   this._hashTableOfObserverListsKeyedByItemUuid = {};
   this._listOfListObserverTuples = [];
-
+  
+  this._registeredQueryRunners = [];
+  
   this._currentRetrievalFilter = World.RETRIEVAL_FILTER_LAST_EDIT_WINS;
 
   var server;
@@ -270,8 +272,8 @@
   // Look at all the observers who have registered interest in a 
   // list of items rather than in an individual item.  For each of
   // those observers, notify them of all the changes to all the items.
-  for (var ikey in this._listOfListObserverTuples) {
-    var observerTuple = this._listOfListObserverTuples[ikey];
+  for (var iKey in this._listOfListObserverTuples) {
+    var observerTuple = this._listOfListObserverTuples[iKey];
     var listBeingObserved = observerTuple[World.__TUPLE_KEY_LIST];
     var setOfObservers = observerTuple[World.__TUPLE_KEY_OBSERVERS];
     var listOfItemChangeReports = null;
@@ -302,6 +304,31 @@
       }
     }
   }
+  
+  // Look at all the QueryRunner objects that are registered, and for
+  // each of the QueryRunners, notify them of changes they care about.
+  for (key in this._registeredQueryRunners) {
+    var queryRunner = this._registeredQueryRunners[key];
+    var oldListOfResultItems = queryRunner.getResultItems();
+    var reportChange = false;
+    for (uuid in hashTableOfNewlyCreatedRecordsKeyedByItemUuid) {
+      item = this.getItemFromUuid(uuid);
+      if (Util.isObjectInSet(item, oldListOfResultItems)) {
+        reportChange = true;
+        break;
+      } else {
+        if (queryRunner.doesItemMatch(item)) {
+          reportChange = true;
+          break;
+        }
+      }
+    }
+    
+    if (reportChange) {
+      queryRunner._resultsHaveChanged();
+    }
+  }
+  
 };
 
 
@@ -709,6 +736,48 @@
 
 
 /**
+ * Returns a newly created QueryRunner object.
+ *
+ * @scope    public instance method
+ * @param    querySpec    Optional. A query spec item, or an ad-hoc query. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the query. 
+ * @return   A newly created QueryRunner object.
+ */
+World.prototype.newQueryRunner = function(querySpec, observer) {
+  var queryRunner = new QueryRunner(this, querySpec, observer);
+  return queryRunner;
+};
+
+
+/**
+ * Registers a QueryRunner object, so that the QueryRunner will be
+ * notified of changes to the repository.
+ *
+ * @scope    public instance method
+ * @param    queryRunner    A QueryRunner object. 
+ */
+World.prototype._registerQueryRunner = function(queryRunner) {
+  Util.assert(queryRunner instanceof QueryRunner);
+  var success = Util.addObjectToSet(queryRunner, this._registeredQueryRunners);
+  Util.assert(success);
+};
+
+
+/**
+ * Unregisters a QueryRunner object, so that the QueryRunner will no 
+ * longer be notified of changes to the repository.
+ *
+ * @scope    public instance method
+ * @param    queryRunner    A previously registered QueryRunner object. 
+ */
+World.prototype._unregisterQueryRunner = function(queryRunner) {
+  Util.assert(queryRunner instanceof QueryRunner);
+  var success = Util.removeObjectFromSet(queryRunner, this._registeredQueryRunners);
+  Util.assert(success);
+};
+
+
+/**
  * Returns a newly created entry.
  *
  * @scope    public instance method
@@ -799,6 +868,7 @@
  * Given a query item, this method returns a list of all the items that 
  * match the query criteria.
  *
+ * @deprecated    PENDING: use getResultItemsForQueryRunner() instead.
  * @scope    public instance method
  * @param    query    A query item. 
  * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
@@ -812,6 +882,20 @@
 
 
 /**
+ * Given a QueryRunner object, this method returns a list of all the items that 
+ * match the query criteria.
+ *
+ * @scope    public instance method
+ * @param    queryRunner    A QueryRunner object. 
+ * @return   A list of items.
+ */
+World.prototype.getResultItemsForQueryRunner = function(queryRunner) {
+  var listOfItems = this._virtualServer.getResultItemsForQueryRunner(queryRunner);
+  return listOfItems;
+};
+
+
+/**
  * Given an item and a query item, this method modifies the attributes 
  * of the item so that when the query is next evaluated the item will be 
  * included in query result list.



From skinner at sheep.berlios.de  Thu Jun 30 01:04:19 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 30 Jun 2005 01:04:19 +0200
Subject: [openrecord-svn] r194 - trunk/source
Message-ID: <200506292304.j5TN4J8q020797@sheep.berlios.de>

Author: skinner
Date: 2005-06-30 01:04:06 +0200 (Thu, 30 Jun 2005)
New Revision: 194

Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/NavbarView.js
   trunk/source/OutlinePlugin.js
   trunk/source/PageView.js
   trunk/source/RootView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
Log:
Minor cleanup work.

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/BarChartPlugin.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -161,7 +161,7 @@
   }
 
   // add the table header row(s)
-  listOfStrings.push("<table class=\"" + SectionView.ELEMENT_CLASS_SIMPLE_TABLE + "\">");
+  listOfStrings.push("<table class=\"" + SectionView.CSS_CLASS_SIMPLE_TABLE + "\">");
   listOfStrings.push("<tr>");
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   listOfStrings.push("<th>" + attributeCalledName.getDisplayName() + "</th>");
@@ -176,7 +176,7 @@
   for (var kKey in listOfContentItems) {
     contentItem = listOfContentItems[kKey];
     listOfStrings.push("<tr>");
-    listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\">" + contentItem.getDisplayName("{no name}") + "</td>");
+    listOfStrings.push("<td class=\"" + SectionView.CSS_CLASS_PLAIN + "\">" + contentItem.getDisplayName("{no name}") + "</td>");
     var numericValue = 0;
     if (selectedAttribute) {
       listOfEntries = contentItem.getEntriesForAttribute(selectedAttribute);

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/DetailPlugin.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -126,19 +126,19 @@
   var listOfStrings = [];
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   
-  listOfStrings.push("<table class=\"" + SectionView.ELEMENT_CLASS_SIMPLE_TABLE + "\">");
+  listOfStrings.push("<table class=\"" + SectionView.CSS_CLASS_SIMPLE_TABLE + "\">");
   listOfStrings.push("<tr>");
-  listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_LABEL + " " + SectionView.ELEMENT_CLASS_TITLE + "\">" + attributeCalledName.getDisplayName() + "</td>");
-  listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_TITLE + "\">" + inItem.getDisplayName() + "</td>");
+  listOfStrings.push("<td class=\"" + SectionView.CSS_CLASS_LABEL + " " + SectionView.CSS_CLASS_TITLE + "\">" + attributeCalledName.getDisplayName() + "</td>");
+  listOfStrings.push("<td class=\"" + SectionView.CSS_CLASS_TITLE + "\">" + inItem.getDisplayName() + "</td>");
   listOfStrings.push("</tr>");
   var listOfAttributes = inItem.getAttributes();
   for (var key in listOfAttributes) { 
     var attribute = listOfAttributes[key];
     if (attribute != attributeCalledName) {
       listOfStrings.push("<tr>");
-      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_LABEL + "\">" + attribute.getDisplayName() + "</td>");
+      listOfStrings.push("<td class=\"" + SectionView.CSS_CLASS_LABEL + "\">" + attribute.getDisplayName() + "</td>");
       var listOfEntries = inItem.getEntriesForAttribute(attribute); 
-      listOfStrings.push("<td class=\"" + SectionView.ELEMENT_CLASS_PLAIN + "\">");
+      listOfStrings.push("<td class=\"" + SectionView.CSS_CLASS_PLAIN + "\">");
       for (var j = 0; j < listOfEntries.length; ++j) {
         listOfStrings.push(listOfEntries[j].getDisplayString() + "<br/>");
       }

Modified: trunk/source/NavbarView.js
===================================================================
--- trunk/source/NavbarView.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/NavbarView.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -98,7 +98,7 @@
   var finalString = listOfStrings.join("");
   divElement.innerHTML = finalString;
   
-  var newPageButton = View.createAndAppendElement(divElement, "input", RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL);
+  var newPageButton = View.createAndAppendElement(divElement, "input", RootView.CSS_CLASS_EDIT_MODE_ONLY_CONTROL);
   newPageButton.type = "button";
   newPageButton.value = "New Page";
   newPageButton.onclick = this._clickOnNewPageButton.bindAsEventListener(this);

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/OutlinePlugin.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -103,7 +103,7 @@
     var contentItem = listOfContentItems[contentItemKey];
     var liElement = View.createAndAppendElement(ulElement, "li");
     View.createAndAppendTextNode(liElement, contentItem.getDisplayName("{no name}") + " ");
-    var anchorElement = View.createAndAppendElement(liElement, "a", SectionView.ELEMENT_CLASS_MORE_LINK);
+    var anchorElement = View.createAndAppendElement(liElement, "a", SectionView.CSS_CLASS_MORE_LINK);
 
     // PENDING: 
     //  We shouldn't call the private method _getUuid()

Modified: trunk/source/PageView.js
===================================================================
--- trunk/source/PageView.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/PageView.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -220,10 +220,10 @@
 PageView.prototype._buildEditControls = function() {
   if (!this._editModeDiv) {
     var pageDivElement = this.getHTMLElement();
-    this._editModeDiv = View.createAndAppendElement(pageDivElement, "div", SectionView.ELEMENT_CLASS_SECTION);
+    this._editModeDiv = View.createAndAppendElement(pageDivElement, "div", SectionView.CSS_CLASS_SECTION);
     View.createAndAppendElement(this._editModeDiv,"br");
     var editButton = View.createAndAppendElement(this._editModeDiv, "input", 
-      RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL);
+      RootView.CSS_CLASS_EDIT_MODE_ONLY_CONTROL);
     editButton.type = "Button";
     editButton.value = "New Section";
     editButton.onclick = this._addNewSection.bindAsEventListener(this);

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/RootView.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -42,7 +42,11 @@
 // -------------------------------------------------------------------
 // RootView public class constants
 // -------------------------------------------------------------------
-RootView.ELEMENT_CLASS_PAGE_EDIT_BUTTON = "page_edit_button";
+RootView.CSS_CLASS_PAGE_EDIT_BUTTON = "page_edit_button";
+RootView.CSS_CLASS_EDIT_MODE = "editmode";
+RootView.CSS_CLASS_VIEW_MODE = "viewmode";
+RootView.CSS_CLASS_EDIT_MODE_ONLY_CONTROL = "edit_mode_only_control";
+RootView.CSS_CLASS_CONTROL_SPAN = "control_span";
 
 RootView.ELEMENT_ID_DEBUG_TEXTAREA = "debug_textarea";
 
@@ -51,18 +55,10 @@
 RootView.URL_HASH_PAGE_PREFIX = "#" + RootView.URL_PAGE_PREFIX;
 RootView.URL_HASH_ITEM_PREFIX = "#" + RootView.URL_ITEM_PREFIX;
 
-RootView.ELEMENT_CLASS_EDIT_MODE = "editmode";
-RootView.ELEMENT_CLASS_VIEW_MODE = "viewmode";
-RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL = "edit_mode_only_control";
-
-RootView.CONTROL_SPAN_CLASS = "control_span";
-
 RootView.UUID_FOR_CATEGORY_PAGE    = "00020000-ce7f-11d9-8cd5-0011113ae5d6";
 RootView.UUID_FOR_CATEGORY_SECTION = "00020100-ce7f-11d9-8cd5-0011113ae5d6";
 
-// RootView.UUID_FOR_HOME_PAGE        = "00050000-ce7f-11d9-8cd5-0011113ae5d6";
 
-
 // -------------------------------------------------------------------
 // RootView class properties
 // -------------------------------------------------------------------
@@ -124,7 +120,7 @@
   var logoSpan = View.createAndAppendElement(headerP, "span", "logo");
   logoSpan.innerHTML = '<a href="http://openrecord.org"><span class="logostart">open</span><span class="logomiddle">record</span><span class="logoend">.org</span></a>';
   var mainControlSpan = View.createAndAppendElement(headerP, "span", null, "main_control_span");
-  mainControlSpan.className = RootView.CONTROL_SPAN_CLASS;
+  mainControlSpan.className = RootView.CSS_CLASS_CONTROL_SPAN;
   View.createAndAppendElement(headerP, "br");
   var navbarDiv = View.createAndAppendElement(rootDiv, "div", "navbar");
   var contentAreaDiv = View.createAndAppendElement(rootDiv, "div", "content_area");
@@ -190,7 +186,6 @@
  * @return   A page item.
  */
 RootView.prototype.getHomePage = function () {
-  // return this.getWorld().getItemFromUuid(RootView.UUID_FOR_HOME_PAGE);
   return this._homePage;
 };
 
@@ -341,7 +336,7 @@
   Util.assert(this._myCurrentContentView instanceof Object);
 
   document.title = this._myCurrentContentView.getPageTitle() + " - openrecord.org";
-  this._myRootDiv.className = (this.isInEditMode()) ? RootView.ELEMENT_CLASS_EDIT_MODE : RootView.ELEMENT_CLASS_VIEW_MODE;
+  this._myRootDiv.className = (this.isInEditMode()) ? RootView.CSS_CLASS_EDIT_MODE : RootView.CSS_CLASS_VIEW_MODE;
   this._displayLoginSpan();
   this._displayNavbar();
   this._displayDebugArea();

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/SectionView.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -45,16 +45,16 @@
 // -------------------------------------------------------------------
 // SectionView public class constants
 // -------------------------------------------------------------------
-SectionView.ELEMENT_CLASS_SECTION = "section";
-SectionView.ELEMENT_CLASS_SIMPLE_TABLE = "simple_table";
-SectionView.ELEMENT_CLASS_NEW_ITEM = "newitem";
-SectionView.ELEMENT_CLASS_PLAIN = "plain";
-SectionView.ELEMENT_CLASS_LABEL = "label";
-SectionView.ELEMENT_CLASS_TITLE = "title";
-SectionView.ELEMENT_CLASS_TEXT_FIELD_IN_TABLE_CELL = "text_field_in_table_cell";
-SectionView.ELEMENT_CLASS_SELECTED = "selected";
-SectionView.ELEMENT_CLASS_MORE_LINK = "more";
-SectionView.ELEMENT_CLASS_TEXT_VIEW = "text_view";
+SectionView.CSS_CLASS_SECTION = "section";
+SectionView.CSS_CLASS_SIMPLE_TABLE = "simple_table";
+SectionView.CSS_CLASS_NEW_ITEM = "newitem";
+SectionView.CSS_CLASS_PLAIN = "plain";
+SectionView.CSS_CLASS_LABEL = "label";
+SectionView.CSS_CLASS_TITLE = "title";
+SectionView.CSS_CLASS_TEXT_FIELD_IN_TABLE_CELL = "text_field_in_table_cell";
+SectionView.CSS_CLASS_SELECTED = "selected";
+SectionView.CSS_CLASS_MORE_LINK = "more";
+SectionView.CSS_CLASS_TEXT_VIEW = "text_view";
 SectionView.CSS_CLASS_SECTION_HEADER = "section_header";
 SectionView.CSS_CLASS_SUMMARY_TEXT = "summary_text";
 
@@ -233,7 +233,7 @@
   }
   
   var sectionDiv = this.getHTMLElement();
-  var outerDiv = View.createAndAppendElement(sectionDiv, "div", SectionView.ELEMENT_CLASS_SECTION);
+  var outerDiv = View.createAndAppendElement(sectionDiv, "div", SectionView.CSS_CLASS_SECTION);
   var headerH2 = View.createAndAppendElement(outerDiv, "h2");
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   var attributeCalledSummary = this.getWorld().getAttributeCalledSummary();
@@ -242,11 +242,11 @@
     SectionView.CSS_CLASS_SECTION_HEADER);
   var summaryDiv = View.createAndAppendElement(outerDiv, "div");
   this._mySectionSummaryView = new TextView(this, summaryDiv, this.mySection, attributeCalledSummary,
-    this.mySection.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.ELEMENT_CLASS_TEXT_VIEW, true);
+    this.mySection.getSingleEntryFromAttribute(attributeCalledSummary), SectionView.CSS_CLASS_TEXT_VIEW, true);
   View.createAndAppendElement(outerDiv, "p");
 
   // create the editing controls, if we're in edit mode
-  var controlArea = View.createAndAppendElement(outerDiv, "p", RootView.ELEMENT_CLASS_EDIT_MODE_ONLY_CONTROL);
+  var controlArea = View.createAndAppendElement(outerDiv, "p", RootView.CSS_CLASS_EDIT_MODE_ONLY_CONTROL);
   var textShowMeA = document.createTextNode("Show me a ");
   controlArea.appendChild(textShowMeA);
 
@@ -362,7 +362,7 @@
   var entrySpan = View.createAndAppendElement(this._queryEditSpan, "span");
   
   var entryTextView =  new TextView(this, entrySpan, myQuery, attributeCalledQueryMatchingValue, matchingEntry,
-    RootView.ELEMENT_CLASS_EDIT_MODE);
+    RootView.CSS_CLASS_EDIT_MODE);
   entryTextView.setSuggestions(listOfPossibleEntries);
   entryTextView.alwaysUseEditField();
   entryTextView.setAutoWiden(true);

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/TablePlugin.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -69,8 +69,8 @@
   PluginView.call(this, inSectionView, inHTMLElement, inQuery, inLayout);
 
   // PENDING should probably make this independent of sectionview
-  this.myClass = SectionView.ELEMENT_CLASS_SIMPLE_TABLE;
-  this.myCellClass = SectionView.ELEMENT_CLASS_PLAIN;
+  this.myClass = SectionView.CSS_CLASS_SIMPLE_TABLE;
+  this.myCellClass = SectionView.CSS_CLASS_PLAIN;
   this.myTable = null;
   this._sortAttribute = null;
   this._ascendingOrder = true;

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-29 21:40:59 UTC (rev 193)
+++ trunk/source/TextView.js	2005-06-29 23:04:06 UTC (rev 194)
@@ -41,7 +41,7 @@
 // -------------------------------------------------------------------
 // TextView public class constants
 // -------------------------------------------------------------------
-TextView.ELEMENT_CLASS_TEXT_BLOCK = "text_block"; 
+// TextView.ELEMENT_CLASS_TEXT_BLOCK = "text_block"; 
 TextView.CSS_CLASS_VALUE_IS_ITEM = "textViewItem";
 TextView.PROVISIONAL_COLOR = '#999999';
 



From skinner at sheep.berlios.de  Thu Jun 30 04:18:43 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 30 Jun 2005 04:18:43 +0200
Subject: [openrecord-svn] r195 - trunk/source
Message-ID: <200506300218.j5U2IhwN007111@sheep.berlios.de>

Author: skinner
Date: 2005-06-30 04:18:39 +0200 (Thu, 30 Jun 2005)
New Revision: 195

Modified:
   trunk/source/NavbarView.js
   trunk/source/RootView.js
   trunk/source/SectionView.js
Log:
Wired up NavBar to observe changes in the list of pages and only redraw the menu items when the list of pages changes.  Fixed a minor glitch involving scrolling and anchor tags for new pages.  Also did some minor clean-up work.

Modified: trunk/source/NavbarView.js
===================================================================
--- trunk/source/NavbarView.js	2005-06-29 23:04:06 UTC (rev 194)
+++ trunk/source/NavbarView.js	2005-06-30 02:18:39 UTC (rev 195)
@@ -32,24 +32,33 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global window */
+/*global RootView */
 // -------------------------------------------------------------------
 
 
+// -------------------------------------------------------------------
+// NavbarView public class constants
+// -------------------------------------------------------------------
+NavbarView.CSS_CLASS_MENU_ITEM = "menu_item";
+
+
 /**
  * The RootView uses an instance of a NavbarView to display a navigation
  * bar, with links to pages.
  *
  * @scope    public instance constructor
  * @extends  View
- * @param    inSuperView    The view that this LoginView is nested in. 
- * @param    inHTMLElement    The HTMLElement to display the HTML in. 
+ * @param    superView    The view that this LoginView is nested in. 
+ * @param    htmlElement    The HTMLElement to display the HTML in. 
  */
 NavbarView.prototype = new View();  // makes NavbarView be a subclass of View
-function NavbarView(inSuperView, inHTMLElement) {
-  // instance properties
-  this.setSuperview(inSuperView);
-  this.setHTMLElement(inHTMLElement);
+function NavbarView(superView, htmlElement, htmlElementForAnchors) {
+  this.setSuperview(superView);
+  this.setHTMLElement(htmlElement);
+  this._htmlElementForAnchors = htmlElementForAnchors;
 }
 
 
@@ -59,39 +68,52 @@
  *
  * @scope    public instance method
  */
-NavbarView.prototype.refresh = function () {
+NavbarView.prototype.refresh = function() {
   if (!this.hasEverBeenDisplayed()) {
     this._rebuildView();
+    this._myHasEverBeenDisplayedFlag = true;
   }
 };
 
 
+// -------------------------------------------------------------------
+// Private instance methods
+// -------------------------------------------------------------------
+
 /**
  * Re-creates the HTML for the view, and hands the HTML to the 
  * browser to be re-drawn.
  *
  * @scope    private instance method
  */
-NavbarView.prototype._rebuildView = function () {
+NavbarView.prototype._rebuildView = function() {
+  var categoryCalledPage = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
+  categoryCalledPage.addObserver(this);
+  var listOfPages = this.getWorld().getItemsInCategory(categoryCalledPage);
+  var key;
+  var page;
+
+  for (key in listOfPages) {
+    page = listOfPages[key];
+    var anchor = View.createAndAppendElement(this._htmlElementForAnchors, "a");
+    anchor.setAttribute("name", RootView.URL_PAGE_PREFIX + page._getUuid());
+  }
+  
+  
   var divElement = this.getHTMLElement();
-  
-  var rootView = this.getRootView();
-  var listOfPages = rootView.getPages();
-
   //get rid of all child nodes 
   divElement.innerHTML = '';
 
   var listOfStrings = [];
-
   listOfStrings.push("<ul class=\"menu\">");
-  
-  for (var key in listOfPages) {
-    var page = listOfPages[key];
+  var rootView = this.getRootView();
+  for (key in listOfPages) {
+    page = listOfPages[key];
+    page.addObserver(this);
     var menuText = page.getDisplayString();
     var menuUrl = rootView.getUrlForItem(page);
-    listOfStrings.push("<li class=\"menu_item\"><a href=\"" + menuUrl + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
+    listOfStrings.push("<li class=\"" + NavbarView.CSS_CLASS_MENU_ITEM + "\"><a href=\"" + menuUrl + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
   }
-
   listOfStrings.push("</ul>");
   
   // write out the new nav bar content 
@@ -114,7 +136,7 @@
  *
  * @scope    private instance method
  */
-NavbarView.prototype._clickOnNewPageButton = function(inEventObject) {
+NavbarView.prototype._clickOnNewPageButton = function(eventObject) {
   var rootView = this.getRootView();
   var newPage = rootView.newPage();
   window.location = rootView.getUrlForItem(newPage);
@@ -123,5 +145,20 @@
 
 
 // -------------------------------------------------------------------
+// Observer methods
+// -------------------------------------------------------------------
+
+/**
+ * Called after there's been some change to one of the pages displayed
+ * in the Navbar.
+ *
+ * @scope    public instance method
+ */
+NavbarView.prototype.observedItemHasChanged = function(item, listOfRecordsForItem) {
+  // alert("Navbar observed: " + item.getDisplayString());
+  this._rebuildView();
+};
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/RootView.js
===================================================================
--- trunk/source/RootView.js	2005-06-29 23:04:06 UTC (rev 194)
+++ trunk/source/RootView.js	2005-06-30 02:18:39 UTC (rev 195)
@@ -32,10 +32,11 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   PageView.js
-//   World.js
-//   Util.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global window, document, alert, HTMLDivElement */
+/*global Item, World, Util */
+/*global View, PageView, ItemView, NavbarView, LoginView */
 // -------------------------------------------------------------------
 
 
@@ -62,7 +63,7 @@
 // -------------------------------------------------------------------
 // RootView class properties
 // -------------------------------------------------------------------
-RootView.ourSingleInstance = null;
+RootView._ourSingleInstance = null;
 
 
 /**
@@ -73,7 +74,7 @@
  * @scope    public instance constructor
  * @syntax   var rootView = new RootView()
  */
-function RootView(inWorld) {
+function RootView(world) {
   window.onerror = Util.handleError;
   // window.onunload = window.doOnunloadActions;
   // window.onfocus = window.doOnfocusActions;
@@ -81,46 +82,29 @@
   // window.onresize = window.doOnresizeActions;  
   Util.setTargetsForExternalLinks();
   
-  RootView.ourSingleInstance = this;
+  RootView._ourSingleInstance = this;
    
-  Util.assert(inWorld instanceof World);
+  Util.assert(world instanceof World);
 
   // instance properties
-  this._myWorld = inWorld;
-  this.myEditMode = false;
-  this.myNumberOfCallsToDebug = 0;
-  this.myDebugTextarea = null;
+  this._world = world;
+  this._editMode = false;
+  this._numberOfCallsToDebug = 0;
+  this._debugTextarea = null;
   
-  this._myHashTableOfItemViewsKeyedByUuid = {};
-  this._myHashTableOfPageViewsKeyedByUuid = {};
-  this._myCurrentContentView = null;
+  this._hashTableOfItemViewsKeyedByUuid = {};
+  this._hashTableOfPageViewsKeyedByUuid = {};
+  this._currentContentView = null;
   this._homePage = null;
   
-  this.myHashTableOfPagesKeyedByUuid = {};
-  var categoryCalledPage = this._myWorld.getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
-  var listOfPages = this._myWorld.getItemsInCategory(categoryCalledPage);
-  if (listOfPages && listOfPages.length > 0) {
-    this._homePage = listOfPages[0];
-  }
-  for (var key in listOfPages) {
-    var page = listOfPages[key];
-    this.myHashTableOfPagesKeyedByUuid[page._getUuid()] = page; 
-  }
-
   window.document.body.innerHTML = "";
   var rootDiv = View.createAndAppendElement(window.document.body, "div");
+  var anchorSpan = View.createAndAppendElement(rootDiv, "span");
  
-  for (var uuid in this.myHashTableOfPagesKeyedByUuid) {
-    var aPage = this.myHashTableOfPagesKeyedByUuid[uuid];
-    var anchor = View.createAndAppendElement(rootDiv, "a");
-    anchor.setAttribute("name", RootView.URL_PAGE_PREFIX + aPage._getUuid());
-  }
-  
   var headerP = View.createAndAppendElement(rootDiv, "p", "header");
   var logoSpan = View.createAndAppendElement(headerP, "span", "logo");
   logoSpan.innerHTML = '<a href="http://openrecord.org"><span class="logostart">open</span><span class="logomiddle">record</span><span class="logoend">.org</span></a>';
-  var mainControlSpan = View.createAndAppendElement(headerP, "span", null, "main_control_span");
-  mainControlSpan.className = RootView.CSS_CLASS_CONTROL_SPAN;
+  var mainControlSpan = View.createAndAppendElement(headerP, "span", RootView.CSS_CLASS_CONTROL_SPAN, "main_control_span");
   View.createAndAppendElement(headerP, "br");
   var navbarDiv = View.createAndAppendElement(rootDiv, "div", "navbar");
   var contentAreaDiv = View.createAndAppendElement(rootDiv, "div", "content_area");
@@ -136,12 +120,13 @@
   var statusBlurbSpan = View.createAndAppendElement(footerP, "span", "fileformat");
   View.createAndAppendElement(footerP, "br");
   
-  this.myMainControlSpanElement = mainControlSpan;
-  this.myNavbarDivElement = navbarDiv;
-  this._myContentViewDivElement = contentViewDiv;
-  this.myDebugDivElement = debugDiv;
-  this.myStatusBlurbSpanElement = statusBlurbSpan;
-  this._myRootDiv = rootDiv;
+  this._mainControlSpanElement = mainControlSpan;
+  this._anchorSpan = anchorSpan;
+  this._navbarDivElement = navbarDiv;
+  this._contentViewDivElement = contentViewDiv;
+  this._debugDivElement = debugDiv;
+  this._statusBlurbSpanElement = statusBlurbSpan;
+  this._rootDiv = rootDiv;
   
   Util.setErrorReportCallback(RootView.displayTextInDebugTextarea);
   this.setCurrentContentViewFromUrl();
@@ -159,8 +144,8 @@
  * @scope    public class method
  * @return   The singleton instance of RootView. 
  */
-RootView.getRootView = function (inText) {
-  return RootView.ourSingleInstance;
+RootView.getRootView = function() {
+  return RootView._ourSingleInstance;
 };
 
 
@@ -174,8 +159,8 @@
  * @scope    public instance method
  * @return   A World object. 
  */
-RootView.prototype.getWorld = function () {
-  return this._myWorld;
+RootView.prototype.getWorld = function() {
+  return this._world;
 };
 
 
@@ -185,7 +170,16 @@
  * @scope    public instance method
  * @return   A page item.
  */
-RootView.prototype.getHomePage = function () {
+RootView.prototype.getHomePage = function() {
+  if (!this._homePage) {
+    var categoryCalledPage = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
+    var listOfPages = this.getWorld().getItemsInCategory(categoryCalledPage);
+    if (listOfPages && listOfPages.length > 0) {
+      this._homePage = listOfPages[0];
+    } else {
+      Util.assert(false);
+    }
+  }
   return this._homePage;
 };
 
@@ -196,7 +190,7 @@
  * @scope    public instance method
  * @return   This view.
  */
-RootView.prototype.getRootView = function () {
+RootView.prototype.getRootView = function() {
   return this;
 };
 
@@ -207,8 +201,8 @@
  * @scope    public instance method
  * @return   A boolean value. True if we are in Edit Mode.
  */
-RootView.prototype.isInEditMode = function () {
-  return this.myEditMode;
+RootView.prototype.isInEditMode = function() {
+  return this._editMode;
 };
 
     
@@ -216,22 +210,22 @@
  * Switches the UI into and out of edit mode.
  *
  * @scope    public instance method
- * @param    inEditModeFlag    A boolean. True to switch into edit mode, false to switch out.
+ * @param    editModeFlag    A boolean. True to switch into edit mode, false to switch out.
  */
-RootView.prototype.setEditMode = function (inEditModeFlag) {
-  if (inEditModeFlag != this.myEditMode) {
+RootView.prototype.setEditMode = function(editModeFlag) {
+  if (editModeFlag != this._editMode) {
     var world = this.getWorld();
-    if (this.myEditMode) {
+    if (this._editMode) {
       // world.endTransaction();
       // window.document.body.style.cursor = "auto";
     } else {
       // world.beginTransaction();
       // window.document.body.style.cursor = "crosshair";
     }
-    this.myEditMode = !this.myEditMode;
+    this._editMode = !this._editMode;
     this.display();
-    // this.displayTextInDebugTextarea(this.myEditMode);
-    // if (!this.myEditMode && window.location && (window.location.protocol == "file:")) {
+    // this.displayTextInDebugTextarea(this._editMode);
+    // if (!this._editMode && window.location && (window.location.protocol == "file:")) {
     //  RootView.displayTextInDebugTextarea(world._getJsonStringRepresentingAllItems());
     // }
   }
@@ -245,7 +239,7 @@
  * @scope    public instance method
  * @param    item    Any item.
  */
-RootView.prototype.getUrlForItem = function (item) {
+RootView.prototype.getUrlForItem = function(item) {
   Util.assert(item instanceof Item);
   var categoryCalledPage = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
   var prefix;
@@ -266,7 +260,7 @@
  *
  * @scope    public instance method
  */
-RootView.prototype.setCurrentContentViewFromUrl = function () {
+RootView.prototype.setCurrentContentViewFromUrl = function() {
   var contentViewToSwitchTo = null;
   
   if (window.location) {
@@ -280,27 +274,27 @@
       var isUrlForItem = (originalHash.indexOf(RootView.URL_HASH_ITEM_PREFIX) != -1);
       if (isUrlForItem) {
         uuidText = originalHash.replace(RootView.URL_HASH_ITEM_PREFIX, "");
-        contentViewToSwitchTo = this._myHashTableOfItemViewsKeyedByUuid[uuidText];
+        contentViewToSwitchTo = this._hashTableOfItemViewsKeyedByUuid[uuidText];
         if (!contentViewToSwitchTo) {
-          itemFromUuid = this._myWorld.getItemFromUuid(uuidText);
+          itemFromUuid = this._world.getItemFromUuid(uuidText);
           if (itemFromUuid) {
             divElement = window.document.createElement("div"); 
-            this._myContentViewDivElement.appendChild(divElement);
+            this._contentViewDivElement.appendChild(divElement);
             contentViewToSwitchTo = new ItemView(this, divElement, itemFromUuid);
-            this._myHashTableOfItemViewsKeyedByUuid[uuidText] = contentViewToSwitchTo;
+            this._hashTableOfItemViewsKeyedByUuid[uuidText] = contentViewToSwitchTo;
           }
         }
       } else {
         if (isUrlForPage) {
           uuidText = originalHash.replace(RootView.URL_HASH_PAGE_PREFIX, "");
-          contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[uuidText];
+          contentViewToSwitchTo = this._hashTableOfPageViewsKeyedByUuid[uuidText];
           if (!contentViewToSwitchTo) {
-            pageFromUuid = this.myHashTableOfPagesKeyedByUuid[uuidText];
+            pageFromUuid = this.getWorld().getItemFromUuid(uuidText);
             if (pageFromUuid) {
               divElement = window.document.createElement("div"); 
-              this._myContentViewDivElement.appendChild(divElement);
+              this._contentViewDivElement.appendChild(divElement);
               contentViewToSwitchTo = new PageView(this, divElement, pageFromUuid);
-              this._myHashTableOfPageViewsKeyedByUuid[uuidText] = contentViewToSwitchTo;
+              this._hashTableOfPageViewsKeyedByUuid[uuidText] = contentViewToSwitchTo;
             }
           }
         } 
@@ -310,18 +304,18 @@
   
   if (!contentViewToSwitchTo) {
     var page = this.getHomePage();
-    contentViewToSwitchTo = this._myHashTableOfPageViewsKeyedByUuid[page._getUuid()];
+    contentViewToSwitchTo = this._hashTableOfPageViewsKeyedByUuid[page._getUuid()];
     if (!contentViewToSwitchTo) {
       divElement = window.document.createElement("div"); 
-      this._myContentViewDivElement.appendChild(divElement);
+      this._contentViewDivElement.appendChild(divElement);
       contentViewToSwitchTo = new PageView(this, divElement, page);
-      this._myHashTableOfPageViewsKeyedByUuid[page._getUuid()] = contentViewToSwitchTo;
+      this._hashTableOfPageViewsKeyedByUuid[page._getUuid()] = contentViewToSwitchTo;
     }
   }
-  if (this._myCurrentContentView) {
-    this._myCurrentContentView.includeOnScreen(false);
+  if (this._currentContentView) {
+    this._currentContentView.includeOnScreen(false);
   }
-  this._myCurrentContentView = contentViewToSwitchTo;
+  this._currentContentView = contentViewToSwitchTo;
   this.display();
 };
 
@@ -332,15 +326,15 @@
  *
  * @scope    public instance method
  */
-RootView.prototype.display = function () {
-  Util.assert(this._myCurrentContentView instanceof Object);
+RootView.prototype.display = function() {
+  Util.assert(this._currentContentView instanceof Object);
 
-  document.title = this._myCurrentContentView.getPageTitle() + " - openrecord.org";
-  this._myRootDiv.className = (this.isInEditMode()) ? RootView.CSS_CLASS_EDIT_MODE : RootView.CSS_CLASS_VIEW_MODE;
+  document.title = this._currentContentView.getPageTitle() + " - openrecord.org";
+  this._rootDiv.className = (this.isInEditMode()) ? RootView.CSS_CLASS_EDIT_MODE : RootView.CSS_CLASS_VIEW_MODE;
   this._displayLoginSpan();
   this._displayNavbar();
   this._displayDebugArea();
-  this._myCurrentContentView.includeOnScreen(true);
+  this._currentContentView.includeOnScreen(true);
   window.focus();
 };
 
@@ -353,7 +347,7 @@
  * @scope    public instance method
  * @return   The newly created page item.
  */
-RootView.prototype.newPage = function () {
+RootView.prototype.newPage = function() {
   var repository = this.getWorld();
   repository.beginTransaction();
   var newPage = repository.newItem("New Page");
@@ -366,31 +360,24 @@
 
   repository.endTransaction();
   
-  this.myHashTableOfPagesKeyedByUuid[newPage._getUuid()] = newPage;
-  
   return newPage;
 };
 
 
-/**
- * Returns a list of the page items in the repository.
- *
- * @scope    public instance method
- * @return   A list of items that represent pages.
- */
-RootView.prototype.getPages = function () {
-  return this.myHashTableOfPagesKeyedByUuid;
-};
-
-    
-
 // -------------------------------------------------------------------
 // Private instance methods
 // -------------------------------------------------------------------
+
+/**
+ * Creates the HTML for the LoginView, and hands the HTML to the browser 
+ * to be drawn.
+ *
+ * @scope    private instance method
+ */
 RootView.prototype._displayLoginSpan = function() {
-  if (!this.loginView) {
-    this.loginView = new LoginView(this,this.myMainControlSpanElement);
-    this.loginView.refresh();
+  if (!this._loginView) {
+    this._loginView = new LoginView(this, this._mainControlSpanElement);
+    this._loginView.refresh();
   }
 };
 
@@ -399,13 +386,13 @@
  * Re-creates the HTML for the Navbar, and hands the HTML to the browser 
  * to be re-drawn.
  *
- * @scope    public instance method
+ * @scope    private instance method
  */
-RootView.prototype._displayNavbar = function () {
-  if (!this.navbarView) {
-    this.navbarView = new NavbarView(this, this.myNavbarDivElement);
+RootView.prototype._displayNavbar = function() {
+  if (!this._navbarView) {
+    this._navbarView = new NavbarView(this, this._navbarDivElement, this._anchorSpan);
   }
-  this.navbarView.refresh();
+  this._navbarView.refresh();
 };
 
 
@@ -413,16 +400,16 @@
  * Re-creates the HTML for the Debug area, and hands the HTML to the browser 
  * to be re-drawn.
  *
- * @scope    public instance method
+ * @scope    private instance method
  */
-RootView.prototype._displayDebugArea = function () {
-  Util.assert(this.myDebugDivElement instanceof HTMLDivElement);
+RootView.prototype._displayDebugArea = function() {
+  Util.assert(this._debugDivElement instanceof HTMLDivElement);
 
   var listOfStrings = [];
   listOfStrings.push("<textarea readonly id=\"" + RootView.ELEMENT_ID_DEBUG_TEXTAREA + "\" rows=\"20\" cols=\"100\" wrap=\"virtual\"></textarea>");
   var finalString = listOfStrings.join("");
-  this.myDebugDivElement.innerHTML = finalString;
-  this.myDebugTextarea = document.getElementById(RootView.ELEMENT_ID_DEBUG_TEXTAREA);
+  this._debugDivElement.innerHTML = finalString;
+  this._debugTextarea = document.getElementById(RootView.ELEMENT_ID_DEBUG_TEXTAREA);
 };
 
 
@@ -434,10 +421,10 @@
  * Displays a text string in the status blurb span.
  *
  * @scope    public class method
- * @param    inText    A text string to be displayed. 
+ * @param    text    A text string to be displayed. 
  */
-RootView.displayStatusBlurb = function (inText) {
-  RootView.ourSingleInstance.displayStatusBlurb(inText);
+RootView.displayStatusBlurb = function(text) {
+  RootView._ourSingleInstance.displayStatusBlurb(text);
 };
 
 
@@ -445,10 +432,10 @@
  * Displays a text string in the status blurb span.
  *
  * @scope    public instance method
- * @param    inText    A text string to be displayed. 
+ * @param    text    A text string to be displayed. 
  */
-RootView.prototype.displayStatusBlurb = function (inText) {
-  this.myStatusBlurbSpanElement.innerHTML = inText;
+RootView.prototype.displayStatusBlurb = function(text) {
+  this._statusBlurbSpanElement.innerHTML = text;
 };
 
 
@@ -456,10 +443,10 @@
  * Displays a text string in the debug textarea.
  *
  * @scope    public class method
- * @param    inText    A text string to be displayed. 
+ * @param    text    A text string to be displayed. 
  */
-RootView.displayTextInDebugTextarea = function (inText) {
-  RootView.ourSingleInstance.displayTextInDebugTextarea(inText);
+RootView.displayTextInDebugTextarea = function(text) {
+  RootView._ourSingleInstance.displayTextInDebugTextarea(text);
 };
 
 
@@ -467,20 +454,22 @@
  * Displays a text string in the debug textarea.
  *
  * @scope    public instance method
- * @param    inText    A text string to be displayed. 
+ * @param    text    A text string to be displayed. 
  */
-RootView.prototype.displayTextInDebugTextarea = function (inText) {
-  this.myNumberOfCallsToDebug += 1;
-  if (this.myNumberOfCallsToDebug > 20) {
+RootView.prototype.displayTextInDebugTextarea = function(text) {
+  this._numberOfCallsToDebug += 1;
+  if (this._numberOfCallsToDebug > 20) {
     return;
   }
-  if (this.myDebugTextarea) {
-    this.myDebugTextarea.value += inText + "\n\n============================\n\n";
-    this.myDebugTextarea.style.visibility = "visible";
-    this.myDebugTextarea.style.display = "block";
-    this.myDebugTextarea.scrollIntoView();
+  if (this._debugTextarea) {
+    this._debugTextarea.value += text + "\n\n============================\n\n";
+    this._debugTextarea.style.visibility = "visible";
+    this._debugTextarea.style.display = "block";
+    this._debugTextarea.scrollIntoView();
   }
-  else {alert(inText);}
+  else {
+    alert(text);
+  }
 };
 
 
@@ -489,12 +478,12 @@
  * and displays them in the debug textarea.
  *
  * @scope    public instance method
- * @param    inObject    Any sort of object. 
+ * @param    object    Any sort of object. 
  */
-RootView.prototype.displayObjectInDebugTextarea = function (inObject) {
+RootView.prototype.displayObjectInDebugTextarea = function(object) {
   var outputText = "";
-  for (var property in inObject) {
-    outputText += property + " == " + inObject[property] + "\n";
+  for (var property in object) {
+    outputText += property + " == " + object[property] + "\n";
   }
   this.displayTextInDebugTextarea(outputText);
 };
@@ -514,8 +503,8 @@
  * @scope    public class method
  * @param    inEventObject    An event object. 
  */
-RootView.clickOnLocalLink = function (inEventObject) {
-  var eventObject = inEventObject || window.event;
+RootView.clickOnLocalLink = function(eventObject) {
+  eventObject = eventObject || window.event;
   
   var startTiming = new Date();
   
@@ -528,15 +517,16 @@
   var htmlAnchorElement = Util.getTargetFromEvent(eventObject);
   
   window.location = htmlAnchorElement.href;
-  RootView.ourSingleInstance.setCurrentContentViewFromUrl();
+  RootView._ourSingleInstance.setCurrentContentViewFromUrl();
 
   // window.document.body.style.cursor = "default";
   
   var stopTiming = new Date();
   var delayInMilliseconds = stopTiming.getTime() - startTiming.getTime();
-  RootView.ourSingleInstance.displayStatusBlurb("Page load: " + delayInMilliseconds + " milliseconds");
+  RootView._ourSingleInstance.displayStatusBlurb("Page load: " + delayInMilliseconds + " milliseconds");
 };
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-29 23:04:06 UTC (rev 194)
+++ trunk/source/SectionView.js	2005-06-30 02:18:39 UTC (rev 195)
@@ -398,7 +398,8 @@
 
 /**
  * Called when the query belong to this section has changed
- * @scope public instance method
+ *
+ * @scope    public instance method
  */
 SectionView.prototype.observedItemHasChanged = function(item) {
   item.removeObserver(this); //item no longer needs to be observed as query editor span is rebuilt



From skinner at sheep.berlios.de  Thu Jun 30 05:54:49 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 30 Jun 2005 05:54:49 +0200
Subject: [openrecord-svn] r196 - trunk/source
Message-ID: <200506300354.j5U3sn6h000368@sheep.berlios.de>

Author: skinner
Date: 2005-06-30 05:54:39 +0200 (Thu, 30 Jun 2005)
New Revision: 196

Modified:
   trunk/source/LoginView.js
   trunk/source/MultiEntriesView.js
   trunk/source/NavbarView.js
   trunk/source/OutlinePlugin.js
   trunk/source/PluginView.js
   trunk/source/SectionView.js
   trunk/source/TablePlugin.js
   trunk/source/TextView.js
   trunk/source/View.js
Log:
Converted NavbarView from DOM level 0 to DOM level 2.  Replaced a bunch of lines like "foo.innerHTML = '';" with calls to a new View helper method, removeChildrenOfElement().  Did some other minor clean-up.

Modified: trunk/source/LoginView.js
===================================================================
--- trunk/source/LoginView.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/LoginView.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -97,8 +97,7 @@
 LoginView.prototype._rebuildView = function () {
   var mySpan = this.getHTMLElement();
   
-  //get rid of all child nodes 
-  mySpan.innerHTML = '';
+  View.removeChildrenOfElement(mySpan);
   
   var currentUser = this.getWorld().getCurrentUser();
   if (!currentUser) {
@@ -220,7 +219,9 @@
  * @scope    private instance method
  */
 LoginView.prototype._clickOnSignoutLink = function(inEventObject) {
-  if (this.isInEditMode()) {this.getRootView().setEditMode(false);}
+  if (this.isInEditMode()) {
+    this.getRootView().setEditMode(false);
+  }
   this.myCookie.userUuid = null;
   this.myCookie.store();
   this.getWorld().logout();
@@ -457,7 +458,7 @@
     // make the suggestion box disappear
     this._mySuggestionBoxDivElement.style.display = "none";
   } else {
-    this._mySuggestionBoxDivElement.innerHTML = "";
+    View.removeChildrenOfElement(this._mySuggestionBoxDivElement);
     var table = document.createElement('table');
     var rowNumber = 0;
     var columnNumber = 0;

Modified: trunk/source/MultiEntriesView.js
===================================================================
--- trunk/source/MultiEntriesView.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/MultiEntriesView.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -262,7 +262,7 @@
  */
 MultiEntriesView.prototype._buildView = function() {
   var htmlElement = this.getHTMLElement();
-  htmlElement.innerHTML = '';
+  View.removeChildrenOfElement(htmlElement);
   this._entryViews = [];
   
   var entries = this._item.getEntriesForAttribute(this._attribute);

Modified: trunk/source/NavbarView.js
===================================================================
--- trunk/source/NavbarView.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/NavbarView.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -42,6 +42,7 @@
 // -------------------------------------------------------------------
 // NavbarView public class constants
 // -------------------------------------------------------------------
+NavbarView.CSS_CLASS_MENU      = "menu";
 NavbarView.CSS_CLASS_MENU_ITEM = "menu_item";
 
 
@@ -93,33 +94,29 @@
   var key;
   var page;
 
+  View.removeChildrenOfElement(this._htmlElementForAnchors);
   for (key in listOfPages) {
     page = listOfPages[key];
     var anchor = View.createAndAppendElement(this._htmlElementForAnchors, "a");
     anchor.setAttribute("name", RootView.URL_PAGE_PREFIX + page._getUuid());
   }
   
-  
   var divElement = this.getHTMLElement();
-  //get rid of all child nodes 
-  divElement.innerHTML = '';
-
-  var listOfStrings = [];
-  listOfStrings.push("<ul class=\"menu\">");
+  View.removeChildrenOfElement(divElement); 
+  var ulElement = View.createAndAppendElement(divElement, "ul", NavbarView.CSS_CLASS_MENU);
   var rootView = this.getRootView();
   for (key in listOfPages) {
     page = listOfPages[key];
     page.addObserver(this);
-    var menuText = page.getDisplayString();
+    var liElement = View.createAndAppendElement(ulElement, "li", NavbarView.CSS_CLASS_MENU_ITEM);
+    var anchorElement = View.createAndAppendElement(liElement, "a");
     var menuUrl = rootView.getUrlForItem(page);
-    listOfStrings.push("<li class=\"" + NavbarView.CSS_CLASS_MENU_ITEM + "\"><a href=\"" + menuUrl + "\" onclick=\"RootView.clickOnLocalLink(event)\">" + menuText + "</a></li>");
+    anchorElement.setAttribute("href", menuUrl);
+    var menuText = page.getDisplayString();
+    View.createAndAppendTextNode(anchorElement, menuText);
+    anchorElement.onclick = RootView.clickOnLocalLink.bindAsEventListener();
   }
-  listOfStrings.push("</ul>");
   
-  // write out the new nav bar content 
-  var finalString = listOfStrings.join("");
-  divElement.innerHTML = finalString;
-  
   var newPageButton = View.createAndAppendElement(divElement, "input", RootView.CSS_CLASS_EDIT_MODE_ONLY_CONTROL);
   newPageButton.type = "button";
   newPageButton.value = "New Page";

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/OutlinePlugin.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -97,7 +97,7 @@
 OutlinePlugin.prototype.refresh = function () {
   var listOfContentItems = this.fetchItems();
   var outlineDiv = this.getHTMLElement();
-  outlineDiv.innerHTML = "";
+  View.removeChildrenOfElement(outlineDiv);
   var ulElement = View.createAndAppendElement(outlineDiv, "ul");
   for (var contentItemKey in listOfContentItems) {
     var contentItem = listOfContentItems[contentItemKey];

Modified: trunk/source/PluginView.js
===================================================================
--- trunk/source/PluginView.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/PluginView.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -117,7 +117,7 @@
  * @scope    public instance method
  */
 PluginView.prototype.endOfLife = function () {
-  this.getHTMLElement().innerHTML = "";
+  View.removeChildrenOfElement(this.getHTMLElement());
 };
 
 

Modified: trunk/source/SectionView.js
===================================================================
--- trunk/source/SectionView.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/SectionView.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -326,7 +326,7 @@
  *
  */
 SectionView.prototype._refreshQueryEditSpan = function () {
-  this._queryEditSpan.innerHTML = '';
+  View.removeChildrenOfElement(this._queryEditSpan);
   
   var myQuery = this.getQuerySpec();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/TablePlugin.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -349,7 +349,7 @@
   }
   
   //create new table, remove old table if already exists
-  this._myHTMLElement.innerHTML = '';
+  View.removeChildrenOfElement(this._myHTMLElement);
   this.myTable = document.createElement("table");
   this.myTable.className = this.myClass;
   

Modified: trunk/source/TextView.js
===================================================================
--- trunk/source/TextView.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/TextView.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -68,7 +68,7 @@
   
   this.setSuperview(theSuperview);
   this.setHTMLElement(inElement);
-  inElement.style.width =
+  inElement.style.width = "100%";
   inElement.style.height = "100%"; // make this element expand to fill parent element where possible
   this._item = inItem;
   this._attribute = inAttribute;
@@ -175,7 +175,7 @@
  */
 TextView.prototype._buildView = function() {
   var htmlElement = this.getHTMLElement();
-  htmlElement.innerHTML = '';
+  View.removeChildrenOfElement(htmlElement);
   
   var textString = this._getText();
   
@@ -732,7 +732,6 @@
 };
 
 
-
 /**
  *
  */
@@ -761,7 +760,7 @@
     // make the suggestion box disappear
     this._myAttributeSuggestionBoxDivElement.style.display = "none";
   } else {
-    this._myAttributeSuggestionBoxDivElement.innerHTML = "";
+    View.removeChildrenOfElement(this._myAttributeSuggestionBoxDivElement);
     var table = document.createElement('table');
     var rowNumber = 0;
     var columnNumber = 0;

Modified: trunk/source/View.js
===================================================================
--- trunk/source/View.js	2005-06-30 02:18:39 UTC (rev 195)
+++ trunk/source/View.js	2005-06-30 03:54:39 UTC (rev 196)
@@ -184,6 +184,19 @@
 // -------------------------------------------------------------------
 
 /**
+ * Given an HTML element, this method deletes all of the contents from
+ * within the element.
+ *
+ * @scope    public class method
+ * @param    element    An HTML element. 
+ */
+View.removeChildrenOfElement = function(element) {
+  Util.assert(element instanceof HTMLElement);
+  element.innerHTML = '';
+};
+
+
+/**
  * Given an HTML element, we first call document.createElement() to 
  * create a new element, and then call appendChild() to add the new 
  * element to the given element.



From skinner at sheep.berlios.de  Thu Jun 30 07:18:52 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 30 Jun 2005 07:18:52 +0200
Subject: [openrecord-svn] r197 - trunk/source/model
Message-ID: <200506300518.j5U5IqPP007647@sheep.berlios.de>

Author: skinner
Date: 2005-06-30 07:18:45 +0200 (Thu, 30 Jun 2005)
New Revision: 197

Modified:
   trunk/source/model/ContentRecord.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/LintTest.js
   trunk/source/model/ModelTest.js
   trunk/source/model/Ordinal.js
   trunk/source/model/QueryRunner.js
   trunk/source/model/Record.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/Vote.js
   trunk/source/model/World.js
Log:
Did a lot of minor clean-up work on the data model code -- standardized on our new coding conventions.

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/ContentRecord.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -32,13 +32,14 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   Vote.js
-//   Ordinal.js
-//   Util.js
-//   World.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util  */
+/*global World  */
+/*global Record  */
 // -------------------------------------------------------------------
 
+
 /**
  * The ContentRecord class serves as an abstract superclass for the class Item
  * and the class Entry.

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -30,13 +30,12 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   Util.js
-//   World.js
-//   Item.js
-//   Vote.js
-//   Entry.js
-//   Ordinal.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global window */
+/*global XMLHttpRequest, ActiveXObject  */
+/*global Util  */
+/*global World, Item, Entry, Ordinal, Vote  */
 // -------------------------------------------------------------------
 
 
@@ -58,11 +57,9 @@
   var axiomaticFileName = "2005_june_axiomatic_items.json";
   var urlForAxiomaticFile = this._pathToTrunkDirectory + "source/model/" + axiomaticFileName;
   
-  this._myDehydratedAxiomFileURL = urlForAxiomaticFile;  
-  
+  this._dehydratedAxiomFileURL = urlForAxiomaticFile;  
   this._repositoryName = repositoryName;
-  
-  this._myHasEverFailedToSaveFlag = false;
+  this._hasEverFailedToSaveFlag = false;
 }
 
 
@@ -71,12 +68,12 @@
  * and does the initial loading of at least the axiomatic items.
  *
  * @scope    public instance method
- * @param    inWorld    The world that we provide data for. 
+ * @param    world    The world that we provide data for. 
  */
-DeltaVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
-  this._initialize(inWorld);
-  this._buildTypeHashTable();
-  this._loadAxiomaticItemsFromFileAtURL(this._myDehydratedAxiomFileURL);
+DeltaVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function(world) {
+  this._initialize(world);
+  // this._buildTypeHashTable();
+  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
 
   var pathToRepositoryDirectory = "source/repositories/";
   var repositoryFileName = this._repositoryName + ".json";
@@ -98,14 +95,14 @@
  * instances of items corresponding to the dehydrated data.
  * 
  * @scope    private instance method
- * @param    inJsonRepositoryString    A JSON string literal representing the world of items. 
+ * @param    jsonRepositoryString    A JSON string literal representing the world of items. 
  */
-DeltaVirtualServer.prototype._loadWorldFromJsonString = function (inJsonRepositoryString) {
+DeltaVirtualServer.prototype._loadWorldFromJsonString = function(jsonRepositoryString) {
 
   // load the list of records
-  Util.assert(Util.isString(inJsonRepositoryString));
+  Util.assert(Util.isString(jsonRepositoryString));
   var dehydratedRecords = null;
-  eval("dehydratedRecords = " + inJsonRepositoryString + ";");
+  eval("dehydratedRecords = " + jsonRepositoryString + ";");
   Util.assert(Util.isObject(dehydratedRecords));
   var recordFormat = dehydratedRecords[StubVirtualServer.JSON_MEMBER_FORMAT];
   Util.assert(recordFormat == StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
@@ -123,16 +120,16 @@
  * 25 characters long.
  *
  * @scope    public instance method
- * @param    inString    A string that may need truncating.
+ * @param    string    A string that may need truncating.
  * @return   A string that is. 
  */
-DeltaVirtualServer.prototype.truncateString = function (inString) {
+DeltaVirtualServer.prototype.truncateString = function(string) {
   var maxLength = 80;
   var ellipsis = "...";
-  if (inString.length > maxLength) {
-    return (inString.substring(0, (maxLength - ellipsis.length)) + ellipsis);
+  if (string.length > maxLength) {
+    return (string.substring(0, (maxLength - ellipsis.length)) + ellipsis);
   } else {
-    return inString;
+    return string;
   }
 };
 
@@ -142,12 +139,12 @@
  * representations of all of the records in a Transaction.
  *
  * @scope    private instance method
- * @param    inTransaction    A transaction object.
+ * @param    transaction    A transaction object.
  * @return   A JSON string literal, representing the records in the transaction. 
  */
-DeltaVirtualServer.prototype._getJsonStringRepresentingTransaction = function (inTransaction) {
+DeltaVirtualServer.prototype._getJsonStringRepresentingTransaction = function(transaction) {
   var indent = "  ";
-  var listOfRecords = inTransaction.getRecords();
+  var listOfRecords = transaction.getRecords();
   if (!listOfRecords || listOfRecords.length === 0) {
     return "";
   }
@@ -159,7 +156,7 @@
     var listOfStrings = [];
     listOfStrings.push("  // =======================================================================\n");
     listOfStrings.push('  { "' + StubVirtualServer.JSON_MEMBER_TRANSACTION_CLASS + '": [\n');
-    var content = this._getJsonStringRepresentingRecords(inTransaction.getRecords(), indent);
+    var content = this._getJsonStringRepresentingRecords(transaction.getRecords(), indent);
     listOfStrings.push(content);
     listOfStrings.push('  ]\n');
     listOfStrings.push('  }');
@@ -173,7 +170,7 @@
 /**
  *
  */
-DeltaVirtualServer.prototype._getTypedDisplayStringForItem = function (item) {
+DeltaVirtualServer.prototype._getTypedDisplayStringForItem = function(item) {
   var returnString = "(";
   if (item) {
     Util.assert(item instanceof Item);
@@ -193,12 +190,12 @@
  * representations of the records.
  *
  * @scope    private instance method
- * @param    inListOfRecords    A list of the records to include in the JSON string.
- * @param    inIndent    Optional. A string of spaces to prepend to each line.
+ * @param    listOfRecords    A list of the records to include in the JSON string.
+ * @param    indent    Optional. A string of spaces to prepend to each line.
  * @return   A JSON string literal, representing the records. 
  */
-DeltaVirtualServer.prototype._getJsonStringRepresentingRecords = function (inListOfRecords, inIndent) {
-  var indent = inIndent || "";
+DeltaVirtualServer.prototype._getJsonStringRepresentingRecords = function(listOfRecords, indent) {
+  indent = indent || "";
   var key;
   var listOfStrings = [];
   var firstContentRecord = true;
@@ -207,8 +204,8 @@
   var listOfUsers = null;
   var commentString;
 
-  for (key in inListOfRecords) {
-    var record = inListOfRecords[key];
+  for (key in listOfRecords) {
+    var record = listOfRecords[key];
     if (firstContentRecord) {
       firstContentRecord = false;
     } else {
@@ -230,7 +227,7 @@
       }
       if (Util.isObjectInSet(item, listOfUsers)) {
         var user = item;
-        var password = this.__myHashTableOfUserAuthenticationInfo[user.getUniqueKeyString()];
+        var password = this._hashTableOfUserAuthenticationInfo[user.getUniqueKeyString()];
         var passwordString = "null";
         if (password) {
           passwordString = '"' + password + '"';
@@ -352,7 +349,7 @@
  * @param    forceSave    Optional. Forces a save if set to true. 
  * @return   The list of changes made. 
  */
-DeltaVirtualServer.prototype.saveChangesToServer = function (forceSave) {
+DeltaVirtualServer.prototype.saveChangesToServer = function(forceSave) {
   var currentTransaction = this.getCurrentTransaction();
   var listOfChangesMade = currentTransaction.getRecords();
   if (!forceSave && listOfChangesMade.length === 0) {
@@ -365,9 +362,9 @@
       saveChanges = true;
     }
     if (window.location.protocol == "file:") {
-      if (!this._myHasEverFailedToSaveFlag) {
+      if (!this._hasEverFailedToSaveFlag) {
         window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
-        this._myHasEverFailedToSaveFlag = true;
+        this._hasEverFailedToSaveFlag = true;
       }
     }
   }
@@ -376,7 +373,7 @@
   var newRecord;
   for (key in listOfChangesMade) {
     newRecord = listOfChangesMade[key];
-    this.__myChronologicalListOfRecords.push(newRecord);
+    this._chronologicalListOfRecords.push(newRecord);
   }
 
   if (saveChanges) {
@@ -391,10 +388,10 @@
     // them is complicated, because the requests are asynchronous, so
     // we need to check to see if the last request is done before we 
     // can start a new request.
-    this.__myXMLHttpRequestObject = this.__newXMLHttpRequestObject();
-    this.__myXMLHttpRequestObject.open("POST", url, asynchronous);
-    this.__myXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
-    this.__myXMLHttpRequestObject.send(textToAppend);
+    var newXMLHttpRequestObject = this.__newXMLHttpRequestObject();
+    newXMLHttpRequestObject.open("POST", url, asynchronous);
+    newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
+    newXMLHttpRequestObject.send(textToAppend);
   }
   
   this._currentTransaction = null;
@@ -408,7 +405,7 @@
  * @scope    private instance method
  * @return   A newly created XMLHttpRequest object. 
  */
-DeltaVirtualServer.prototype.__newXMLHttpRequestObject = function () {
+DeltaVirtualServer.prototype.__newXMLHttpRequestObject = function() {
   var newXMLHttpRequestObject = null;
   if (window.XMLHttpRequest) {
     newXMLHttpRequestObject = new XMLHttpRequest();
@@ -432,6 +429,7 @@
   return newXMLHttpRequestObject;
 };
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/Entry.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -30,13 +30,14 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   Util.js
-//   Item.js
-//   World.js
-//   ContentRecord.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global ContentRecord */
+/*global Util */
+/*global World, Item */
 // -------------------------------------------------------------------
 
+
 /**
  * Instances of the Entry class hold literal values (like strings
  * and numbers), or reference values (pointers to Items).
@@ -48,20 +49,20 @@
  * constructor, call a method on Item, like item.addAttributeEntry()
  *
  * @scope    protected instance constructor
- * @param    inWorld    The world that this entry is a part of. 
- * @param    inUuid    The UUID for this entry. 
+ * @param    world    The world that this entry is a part of. 
+ * @param    uuid    The UUID for this entry. 
  */
 Entry.prototype = new ContentRecord();  // makes Entry be a subclass of ContentRecord
-function Entry(inWorld, inUuid) {
-  this._ContentRecord(inWorld, inUuid);
+function Entry(world, uuid) {
+  this._ContentRecord(world, uuid);
  
-  this.__myPreviousEntry = null;
-  this.__myListOfSubsequentEntries = [];
-  this.__myItem = null;
+  this._previousEntry = null;
+  this._listOfSubsequentEntries = [];
+  this._item = null;
 
-  this.__myAttribute = null;
-  this.__myValue = null;
-  this._myType = null;
+  this._attribute = null;
+  this._value = null;
+  this._type = null;
 }
 
 
@@ -84,38 +85,38 @@
  * @param    value    The value to initialize the entry with. 
  * @param    type    Optional.  The data type to interpret the value as. 
  */
-Entry.prototype._initialize = function (item, previousEntry, attribute, value, type) {
-  this.__myItem = item;
-  this.__myAttribute = attribute;
+Entry.prototype._initialize = function(item, previousEntry, attribute, value, type) {
+  this._item = item;
+  this._attribute = attribute;
 
   if (previousEntry) {
-    this.__myPreviousEntry = previousEntry;
-    this.__myPreviousEntry.__addSubsequentEntry(this);
+    this._previousEntry = previousEntry;
+    this._previousEntry.__addSubsequentEntry(this);
   } else {
-    this.__myPreviousEntry = null;
+    this._previousEntry = null;
   }
   
   if (type) {
-    this._myType = type;
+    this._type = type;
   } else {
     if (Util.isNumber(value)) {
-      this._myType = this.getWorld().getTypeCalledNumber();
+      this._type = this.getWorld().getTypeCalledNumber();
     }
     else if (Util.isString(value)) {
-      this._myType = this.getWorld().getTypeCalledText();
+      this._type = this.getWorld().getTypeCalledText();
     }
     else if (Util.isDate(value)) {
-      this._myType = this.getWorld().getTypeCalledDate();
+      this._type = this.getWorld().getTypeCalledDate();
     }
     else if (value instanceof Item) {
-      this._myType = this.getWorld().getTypeCalledItem();
+      this._type = this.getWorld().getTypeCalledItem();
     }
     else {Util.assert(false, "unknown data type:" + (typeof value) + ' value: ' + value);}
   }
   if (Util.isString(value)) {
-    this.__myValue = Util.getCleanString(value);
+    this._value = Util.getCleanString(value);
   } else {
-    this.__myValue = value;
+    this._value = value;
   }
 };
 
@@ -137,17 +138,17 @@
  * @param    itemTwo    One of the two items that this entry will connect. 
  * @param    attributeTwo    Optional. The attribute of itemTwo that this entry will be assigned to.  
  */
-Entry.prototype._initializeConnection = function (previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
+Entry.prototype._initializeConnection = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
   if (previousEntry) {
-    this.__myPreviousEntry = previousEntry;
-    this.__myPreviousEntry.__addSubsequentEntry(this);
+    this._previousEntry = previousEntry;
+    this._previousEntry.__addSubsequentEntry(this);
   } else {
-    this.__myPreviousEntry = null;
+    this._previousEntry = null;
   }
 
-  this.__myItem = [itemOne, itemTwo];
-  this.__myAttribute = [attributeOne, attributeTwo];
-  this._myType = this.getWorld().getTypeCalledConnection();
+  this._item = [itemOne, itemTwo];
+  this._attribute = [attributeOne, attributeTwo];
+  this._type = this.getWorld().getTypeCalledConnection();
 };
 
 
@@ -161,38 +162,38 @@
  * rehydrating dehydrated entry objects. 
  *
  * @scope    protected instance method
- * @param    inItem    The item that this is an entry of. 
+ * @param    item    The item that this is an entry of. 
  * @param    inAttribute    The attribute that this entry is assigned to. May be null. 
- * @param    inValue    The value to initialize the entry with. 
- * @param    inPreviousEntry    Optional. An old entry that this entry replaces. 
- * @param    inType    Optional. An item representing a data type. 
+ * @param    value    The value to initialize the entry with. 
+ * @param    previousEntry    Optional. An old entry that this entry replaces. 
+ * @param    type    Optional. An item representing a data type. 
  */
-Entry.prototype._rehydrate = function (inItem, inAttribute, inValue, inPreviousEntry, inType) {
-  this.__myItem = inItem;
-  if (inPreviousEntry) {
-    this.__myPreviousEntry = inPreviousEntry;
-    this.__myPreviousEntry.__addSubsequentEntry(this);
+Entry.prototype._rehydrate = function(item, attribute, value, previousEntry, type) {
+  this._item = item;
+  if (previousEntry) {
+    this._previousEntry = previousEntry;
+    this._previousEntry.__addSubsequentEntry(this);
   } else {
-    this.__myPreviousEntry = null;
+    this._previousEntry = null;
   }
 
-  this.__myAttribute = inAttribute;
-  this.__myValue = inValue;
+  this._attribute = attribute;
+  this._value = value;
   
-  this._myType = inType;
+  this._type = type;
 
-  if (this.__myItem instanceof Item) {
-    this.__myItem._addRehydratedEntry(this, inAttribute);
+  if (this._item instanceof Item) {
+    this._item._addRehydratedEntry(this, this._attribute);
   } else {
-    Util.assert(Util.isArray(this.__myItem));
-    Util.assert(this.__myItem.length == 2);
-    Util.assert(Util.isArray(this.__myAttribute));
-    Util.assert(this.__myAttribute.length == 2);
+    Util.assert(Util.isArray(this._item));
+    Util.assert(this._item.length == 2);
+    Util.assert(Util.isArray(this._attribute));
+    Util.assert(this._attribute.length == 2);
     
-    var firstItem = this.__myItem[0];
-    var secondItem = this.__myItem[1];
-    firstItem._addRehydratedEntry(this, this.__myAttribute[0]);
-    secondItem._addRehydratedEntry(this, this.__myAttribute[1]);
+    var firstItem = this._item[0];
+    var secondItem = this._item[1];
+    firstItem._addRehydratedEntry(this, this._attribute[0]);
+    secondItem._addRehydratedEntry(this, this._attribute[1]);
   }
 };
 
@@ -207,8 +208,8 @@
  * @scope    public instance method
  * @return   The item that this is a entry of.
  */
-Entry.prototype.getItem = function () {
-  return this.__myItem;
+Entry.prototype.getItem = function() {
+  return this._item;
 };
 
 
@@ -218,8 +219,8 @@
  * @scope    public instance method
  * @return   the type of this entry
  */
-Entry.prototype.getType = function () {
-  return this._myType;
+Entry.prototype.getType = function() {
+  return this._type;
 };
 
 
@@ -230,8 +231,8 @@
  * @scope    public instance method
  * @return   The previous entry, which this entry replaces. 
  */
-Entry.prototype.getPreviousEntry = function () {
-  return this.__myPreviousEntry;
+Entry.prototype.getPreviousEntry = function() {
+  return this._previousEntry;
 };
 
 
@@ -241,8 +242,8 @@
  * @scope    public instance method
  * @return   An attribute item.
  */
-Entry.prototype.getAttribute = function () {
-  return this.__myAttribute;
+Entry.prototype.getAttribute = function() {
+  return this._attribute;
 };
 
 
@@ -254,16 +255,16 @@
  * @param    item    The item that this is an entry of. 
  * @return   An attribute item.
  */
-Entry.prototype.getAttributeForItem = function (item) {
-  if (this.__myItem == item) {
-    return this.__myAttribute;
+Entry.prototype.getAttributeForItem = function(item) {
+  if (this._item == item) {
+    return this._attribute;
   }
-  if (Util.isArray(this.__myItem)) {
-    if (this.__myItem[0] == item) {
-      return this.__myAttribute[0];
+  if (Util.isArray(this._item)) {
+    if (this._item[0] == item) {
+      return this._attribute[0];
     }
-    if (this.__myItem[1] == item) {
-      return this.__myAttribute[1];
+    if (this._item[1] == item) {
+      return this._attribute[1];
     }
   }
   return null;
@@ -278,19 +279,19 @@
  * @param    item    The item that this is an entry of. 
  * @return   The item that is connected to the given item.
  */
-Entry.prototype.getConnectedItem = function (item) {
+Entry.prototype.getConnectedItem = function(item) {
   Util.assert(item instanceof Item);
-  if (this.__myItem == item) {
-    if (this._myType == this.getWorld().getTypeCalledItem()) {
-      return this.__myValue;
+  if (this._item == item) {
+    if (this._type == this.getWorld().getTypeCalledItem()) {
+      return this._value;
     }
   }
-  if (Util.isArray(this.__myItem)) {
-    if (this.__myItem[0] == item) {
-      return this.__myItem[1];
+  if (Util.isArray(this._item)) {
+    if (this._item[0] == item) {
+      return this._item[1];
     }
-    if (this.__myItem[1] == item) {
-      return this.__myItem[0];
+    if (this._item[1] == item) {
+      return this._item[0];
     }
   }
   return null;
@@ -304,17 +305,17 @@
  * @param    item    The item that this is an entry of. 
  * @return   The value this entry was initialized to hold.
  */
-Entry.prototype.getValue = function (item) {
-  if (Util.isArray(this.__myItem)) {
-    if (this.__myItem[0] == item) {
-      return this.__myItem[1];
+Entry.prototype.getValue = function(item) {
+  if (Util.isArray(this._item)) {
+    if (this._item[0] == item) {
+      return this._item[1];
     }
-    if (this.__myItem[1] == item) {
-      return this.__myItem[0];
+    if (this._item[1] == item) {
+      return this._item[0];
     }
     Util.assert(false, "Entry.getValue() was called on a connection entry, but was not passed an item as a parameter.");
   }
-  return this.__myValue; 
+  return this._value; 
 };
 
 
@@ -324,29 +325,29 @@
  * @scope    public instance method
  * @return   A string representing the literal data in this entry.
  */
-Entry.prototype.getDisplayString = function (myItem) {
+Entry.prototype.getDisplayString = function(callingItem) {
   var returnString = "";
-  switch (this._myType) {
+  switch (this._type) {
     case this.getWorld().getTypeCalledNumber():
-      returnString = "" + this.__myValue;
+      returnString = "" + this._value;
       break;
     case this.getWorld().getTypeCalledText():
-      returnString = this.__myValue;
+      returnString = this._value;
       break;
     case this.getWorld().getTypeCalledDate():
-      var aDate = this.__myValue;
+      var aDate = this._value;
       returnString = Util.getStringMonthDayYear(aDate);
       break;
     case this.getWorld().getTypeCalledItem():
-      returnString = this.__myValue.getDisplayString();
+      returnString = this._value.getDisplayString();
       break;
     case this.getWorld().getTypeCalledConnection():
-      var firstItem = this.__myItem[0];
-      var secondItem = this.__myItem[1];
-      if (myItem) {
-        if (myItem == firstItem) {returnString = secondItem.getDisplayString();}
-        else if (myItem == secondItem) {returnString = firstItem.getDisplayString();}
-        else {Util.assert(false, "myItem isn't part of this Entry");}
+      var firstItem = this._item[0];
+      var secondItem = this._item[1];
+      if (callingItem) {
+        if (callingItem == firstItem) {returnString = secondItem.getDisplayString();}
+        else if (callingItem == secondItem) {returnString = firstItem.getDisplayString();}
+        else {Util.assert(false, "callingItem isn't part of this Entry");}
       }
       else {
         returnString = 'connection between "' + firstItem.getDisplayString() + '" and "' + secondItem.getDisplayString() + '"';
@@ -363,7 +364,7 @@
  * @scope    public instance method
  * @return   A string with a description of the item.
  */
-Entry.prototype.toString = function () {
+Entry.prototype.toString = function() {
   var returnString = "[Entry #" + this.getUniqueKeyString() + 
     " \"" + this.getDisplayString() + "\"" + "]";
   return returnString;
@@ -376,8 +377,8 @@
  * @scope    public instance method
  * @return   True if this entry has been replaced. False if it has not.
  */
-Entry.prototype.hasBeenReplaced = function () {
-  var listOfEntries = this.__myListOfSubsequentEntries;
+Entry.prototype.hasBeenReplaced = function() {
+  var listOfEntries = this._listOfSubsequentEntries;
 
   if (!listOfEntries || listOfEntries.length === 0) {
     return false;
@@ -413,10 +414,10 @@
  * Called by a subsquent entry, to tell this entry that it has been replaced.
  *
  * @scope    private instance method
- * @param    inEntry    The entry that replaces this one.
+ * @param    entry    The entry that replaces this one.
  */
-Entry.prototype.__addSubsequentEntry = function (inEntry) {
-  this.__myListOfSubsequentEntries.push(inEntry);
+Entry.prototype.__addSubsequentEntry = function(entry) {
+  this._listOfSubsequentEntries.push(entry);
 };
 
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/Item.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -30,11 +30,11 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   Util.js
-//   World.js
-//   Entry.js
-//   ContentRecord.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global ContentRecord */
+/*global Util */
+/*global World, Entry */
 // -------------------------------------------------------------------
 
 
@@ -49,15 +49,15 @@
  * constructor, call the newItem() method on World: world.newItem()
  * 
  * @scope    protected instance constructor
- * @param    inWorld    The world that this item is a part of. 
- * @param    inUuid    The UUID for this item. 
+ * @param    world    The world that this item is a part of. 
+ * @param    uuid    The UUID for this item. 
  */
 Item.prototype = new ContentRecord();  // makes Item be a subclass of ContentRecord
-function Item(inWorld, inUuid) {
-  this._ContentRecord(inWorld, inUuid);
+function Item(world, uuid) {
+  this._ContentRecord(world, uuid);
   
-  this.__myHashTableOfEntryListsKeyedByAttributeUuid = {};
-  this.__myProvisionalFlag = false;
+  this._hashTableOfEntryListsKeyedByAttributeUuid = {};
+  this._provisionalFlag = false;
 }
 
 
@@ -72,15 +72,15 @@
  * need to call item.rehydrate();
  *
  * @scope    protected instance method
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
- * @param    inProvisionalFlag    True if the item is provisional; false if the item is normal. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    provisionalFlag    True if the item is provisional; false if the item is normal. 
  */
-Item.prototype._initialize = function (inObserver, inProvisionalFlag) {
-  if (inProvisionalFlag) {
-    this.__myProvisionalFlag = true;
+Item.prototype._initialize = function(observer, provisionalFlag) {
+  if (provisionalFlag) {
+    this._provisionalFlag = true;
   }
-  if (inObserver) {
-    this.addObserver(inObserver);
+  if (observer) {
+    this.addObserver(observer);
   }
 };
 
@@ -94,14 +94,14 @@
  * list of entries.
  *
  * @scope    public instance method
- * @param    inValue    The value to initialize the entry to.
- * @param    inType    Optional. An item representing a data type.
+ * @param    value    The value to initialize the entry to.
+ * @param    type    Optional. An item representing a data type.
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.addEntry = function (inValue, inType) {
+Item.prototype.addEntry = function(value, type) {
   var attributeCalledUnfiled = this.getWorld().getAttributeCalledUnfiled();
-  return this._createNewEntry(null, attributeCalledUnfiled, inValue, inType);
+  return this._createNewEntry(null, attributeCalledUnfiled, value, type);
 };
 
 
@@ -122,14 +122,14 @@
  * </pre>
  *
  * @scope    public instance method
- * @param    inAttribute    The attribute to assign the entry to. 
- * @param    inValue    The value to initialize the entry with.
- * @param    inType    Optional. An item representing a data type.
+ * @param    attribute    The attribute to assign the entry to. 
+ * @param    value    The value to initialize the entry with.
+ * @param    type    Optional. An item representing a data type.
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.addEntryForAttribute = function (inAttribute, inValue, inType) {
-  return this._createNewEntry(null, inAttribute, inValue, inType);
+Item.prototype.addEntryForAttribute = function(attribute, value, type) {
+  return this._createNewEntry(null, attribute, value, type);
 };
 
 
@@ -137,15 +137,15 @@
  * Replaces an existing entry with a new entry.
  *
  * @scope    public instance method
- * @param    inEntry    The old entry to be replaced.
- * @param    inValue    The value to initialize the new entry to.
- * @param    inType    Optional. An item representing a data type.
+ * @param    previousEntry    The old entry to be replaced.
+ * @param    value    The value to initialize the new entry to.
+ * @param    type    Optional. An item representing a data type.
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.replaceEntry = function (inEntry, inValue, inType) {
-  var attribute = inEntry.getAttributeForItem(this);
-  return this._createNewEntry(inEntry, attribute, inValue, inType);
+Item.prototype.replaceEntry = function(previousEntry, value, type) {
+  var attribute = previousEntry.getAttributeForItem(this);
+  return this._createNewEntry(previousEntry, attribute, value, type);
 };
 
 
@@ -154,15 +154,15 @@
  * to an attribute.
  *
  * @scope    public instance method
- * @param    inEntry    The old entry to be replaced.
- * @param    inAttribute    The attribute to assign the entry to. 
- * @param    inValue    The value to initialize the new entry to.
- * @param    inType    Optional. An item representing a data type.
+ * @param    previousEntry    The old entry to be replaced.
+ * @param    attribute    The attribute to assign the entry to. 
+ * @param    value    The value to initialize the new entry to.
+ * @param    type    Optional. An item representing a data type.
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.replaceEntryWithEntryForAttribute = function (inEntry, inAttribute, inValue, inType) {
-  return this._createNewEntry(inEntry, inAttribute, inValue, inType);
+Item.prototype.replaceEntryWithEntryForAttribute = function(previousEntry, attribute, value, type) {
+  return this._createNewEntry(previousEntry, attribute, value, type);
 };
 
 
@@ -176,7 +176,7 @@
  * @param    type    Optional. An item representing a data type.
  * @scope    private instance method
  */
-Item.prototype._createNewEntry = function (previousEntry, attribute, value, type) {
+Item.prototype._createNewEntry = function(previousEntry, attribute, value, type) {
 
   // If we've just been asked to replace the string "Foo" with the string "Foo",
   // then don't even bother creating a new entry. 
@@ -189,8 +189,8 @@
   }
   
   this.getWorld().beginTransaction();
-  if (this.__myProvisionalFlag) {
-    this.__myProvisionalFlag = false;
+  if (this._provisionalFlag) {
+    this._provisionalFlag = false;
     this.getWorld()._provisionalItemJustBecameReal(this);
   }
   
@@ -219,7 +219,7 @@
  * @return   The new entry object.
  * @throws   Throws an Error if no user is logged in.
  */
-Item.prototype.addConnectionEntry = function (myAttribute, otherItem, otherAttribute) {
+Item.prototype.addConnectionEntry = function(myAttribute, otherItem, otherAttribute) {
   return this.replaceEntryWithConnection(null, myAttribute, otherItem, otherAttribute);
 };
 
@@ -227,7 +227,7 @@
 /**
  *
  */
-Item.prototype.replaceEntryWithConnection = function (previousEntry, myAttribute, otherItem, otherAttribute) {
+Item.prototype.replaceEntryWithConnection = function(previousEntry, myAttribute, otherItem, otherAttribute) {
   Util.assert(otherItem instanceof Item);
   Util.assert(myAttribute instanceof Item);
 
@@ -251,12 +251,12 @@
   }
 
   this.getWorld().beginTransaction();
-  if (this.__myProvisionalFlag) {
-    this.__myProvisionalFlag = false;
+  if (this._provisionalFlag) {
+    this._provisionalFlag = false;
     this.getWorld()._provisionalItemJustBecameReal(this);
   }
-  if (otherItem.__myProvisionalFlag) {
-    otherItem.__myProvisionalFlag = false;
+  if (otherItem._provisionalFlag) {
+    otherItem._provisionalFlag = false;
     this.getWorld()._provisionalItemJustBecameReal(otherItem);
   }
   if (!otherAttribute) {
@@ -275,7 +275,7 @@
  * @scope    public instance method
  * @param    category    An item representing a category. 
  */
-Item.prototype.assignToCategory = function (category) {
+Item.prototype.assignToCategory = function(category) {
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
   this.addConnectionEntry(attributeCalledCategory, category, attributeCalledItemsInCategory);
@@ -299,12 +299,12 @@
  * </pre>
  *
  * @scope    public instance method
- * @param    inAttribute    An attribute that we want to know the entries of. 
+ * @param    attribute    An attribute that we want to know the entries of. 
  * @return   A list of entry objects.
  */
-Item.prototype.getEntriesForAttribute = function (inAttribute) {
-  Util.assert(inAttribute instanceof Item);
-  var listOfEntriesForAttribute = this.__myHashTableOfEntryListsKeyedByAttributeUuid[inAttribute._getUuid()];
+Item.prototype.getEntriesForAttribute = function(attribute) {
+  Util.assert(attribute instanceof Item);
+  var listOfEntriesForAttribute = this._hashTableOfEntryListsKeyedByAttributeUuid[attribute._getUuid()];
   if (!listOfEntriesForAttribute) {
     listOfEntriesForAttribute = [];
   }
@@ -350,11 +350,11 @@
  * @scope    public instance method
  * @return   A list of entry objects.
  */
-Item.prototype.getEntries = function () {
+Item.prototype.getEntries = function() {
   var listOfAllEntries = [];
   
-  for (var uuid in this.__myHashTableOfEntryListsKeyedByAttributeUuid) {
-    var listOfEntriesForAttribute = this.__myHashTableOfEntryListsKeyedByAttributeUuid[uuid];
+  for (var uuid in this._hashTableOfEntryListsKeyedByAttributeUuid) {
+    var listOfEntriesForAttribute = this._hashTableOfEntryListsKeyedByAttributeUuid[uuid];
     for (var key in listOfEntriesForAttribute) {
       var entry = listOfEntriesForAttribute[key];
       listOfAllEntries.push(entry);
@@ -371,10 +371,10 @@
  * @scope    public instance method
  * @return   A list of attribute items.
  */
-Item.prototype.getAttributes = function () {
+Item.prototype.getAttributes = function() {
   var listOfAttributes = [];
   
-  for (var uuid in this.__myHashTableOfEntryListsKeyedByAttributeUuid) {
+  for (var uuid in this._hashTableOfEntryListsKeyedByAttributeUuid) {
     var attribute = this.getWorld().getItemFromUuid(uuid);
     listOfAttributes.push(attribute);
   }
@@ -385,7 +385,7 @@
 /**
  *
  */
-Item.prototype.getFirstCategory = function () {
+Item.prototype.getFirstCategory = function() {
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var listOfCategoryEntries = this.getEntriesForAttribute(attributeCalledCategory);
   var returnEntry = null;
@@ -407,7 +407,7 @@
  * @return   Boolean whether item is provisional
  */
 Item.prototype.isProvisional = function() {
-  return this.__myProvisionalFlag;
+  return this._provisionalFlag;
 };
 
 
@@ -418,7 +418,7 @@
  * @param    defaultString    Optional.  This string will be returned if the item has no display name. 
  * @return   A string with a display name for the item.
  */
-Item.prototype.getDisplayName = function (defaultString) {
+Item.prototype.getDisplayName = function(defaultString) {
   var displayName = defaultString || "(no name)";
   var listOfNameEntries = this.getNameEntries();
   if (listOfNameEntries.length > 0) {
@@ -436,7 +436,7 @@
  * @param    defaultString    Optional.  This string will be returned if the item has no short name or name. 
  * @return   A string with a name for the item.
  */
-Item.prototype.getDisplayString = function (defaultString) {
+Item.prototype.getDisplayString = function(defaultString) {
   var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
   var shortNameString = this.getSingleStringValueFromAttribute(attributeCalledShortName);
   if (!shortNameString) {
@@ -449,7 +449,7 @@
 /**
  *
  */
-Item.prototype.getDisplayStringForEntry = function (entry) {
+Item.prototype.getDisplayStringForEntry = function(entry) {
   Util.assert(entry instanceof Entry);
   return entry.getDisplayString(this);
 };
@@ -461,7 +461,7 @@
  * @scope    public instance method
  * @return   A list of the entries assigned to the "name" attribute.
  */
-Item.prototype.getNameEntries = function () {
+Item.prototype.getNameEntries = function() {
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   return this.getEntriesForAttribute(attributeCalledName);
 };
@@ -473,7 +473,7 @@
  * @scope    public instance method
  * @return   A list of the entries assigned to the "short name" attribute.
  */
-Item.prototype.getShortNameEntries = function () {
+Item.prototype.getShortNameEntries = function() {
   var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
   return this.getEntriesForAttribute(attributeCalledShortName);
 };
@@ -486,7 +486,7 @@
  * @param    attribute    An item representing an attribute. 
  * @return   A string with a description of the item.
  */
-Item.prototype.getSingleEntryFromAttribute = function (attribute) {
+Item.prototype.getSingleEntryFromAttribute = function(attribute) {
   var listOfEntries = this.getEntriesForAttribute(attribute);
   if (listOfEntries) {
     return listOfEntries[0];
@@ -502,7 +502,7 @@
  * @param    attribute    An item representing an attribute. 
  * @return   A string with a description of the item.
  */
-Item.prototype.getSingleStringValueFromAttribute = function (attribute) {
+Item.prototype.getSingleStringValueFromAttribute = function(attribute) {
   var singleEntry = this.getSingleEntryFromAttribute(attribute);
   if (singleEntry) {return singleEntry.getDisplayString();}
   return "";
@@ -515,7 +515,7 @@
  * @scope    public instance method
  * @return   A string with a description of the item.
  */
-Item.prototype.toString = function () {
+Item.prototype.toString = function() {
   var returnString = "[Item #" + this.getUniqueKeyString() + " ";
   var attributeCategory = this.getWorld().getAttributeCalledCategory();
   var listOfCategories = this.getEntriesForAttribute(attributeCategory);
@@ -541,15 +541,15 @@
  * @scope public instance method
  * @return Boolean. True if this item has an attribute with the entry
  */
-Item.prototype.hasAttributeValue = function (inAttribute, inValue) {
-  Util.assert(inAttribute instanceof Item);
-  var entryList = this.getEntriesForAttribute(inAttribute);
+Item.prototype.hasAttributeValue = function(attribute, value) {
+  Util.assert(attribute instanceof Item);
+  var entryList = this.getEntriesForAttribute(attribute);
 
   // look at all the entries this item's attribute is assigned to, 
   // and see if one of them is "inEntry"
   for (var key in entryList) {
     var entry = entryList[key];
-    if (entry.getValue(this) == inValue) {
+    if (entry.getValue(this) == value) {
       return true;
     }
   }
@@ -563,11 +563,11 @@
  * @scope    public instance method
  * @return   A boolean.  True if the item has been assigned to the category.
  */
-Item.prototype.isInCategory = function (inCategory) {
-  Util.assert(inCategory instanceof Item);
+Item.prototype.isInCategory = function(category) {
+  Util.assert(category instanceof Item);
 
   var categoryAttribute = this.getWorld().getAttributeCalledCategory();
-  return this.hasAttributeValue(categoryAttribute, inCategory);
+  return this.hasAttributeValue(categoryAttribute, category);
 };
  
 
@@ -580,10 +580,10 @@
  * the observer will be notified when the item changes.
  *
  * @scope    public instance method
- * @param    inObserver    An object or method to be registered as an observer of the item. 
+ * @param    observer    An object or method to be registered as an observer of the item. 
  */
-Item.prototype.addObserver = function (inObserver) {
-  this.getWorld().addItemObserver(this, inObserver);
+Item.prototype.addObserver = function(observer) {
+  this.getWorld().addItemObserver(this, observer);
 };
 
 
@@ -592,10 +592,10 @@
  * that the observer will no longer be notified when the item changes.
  *
  * @scope    public instance method
- * @param    inObserver    The object or method to be removed from the set of observers. 
+ * @param    observer    The object or method to be removed from the set of observers. 
  */
-Item.prototype.removeObserver = function (inObserver) {
-  this.getWorld().removeItemObserver(this, inObserver);
+Item.prototype.removeObserver = function(observer) {
+  this.getWorld().removeItemObserver(this, observer);
 };
 
 
@@ -611,11 +611,11 @@
  * entry._rehydrate() method.
  * 
  * @scope    protected instance method
- * @param    inEntry    The entry to be associated with this item. 
- * @param    inAttribute    The attribute that this entry is assigned to. 
+ * @param    entry    The entry to be associated with this item. 
+ * @param    attribute    The attribute that this entry is assigned to. 
  */
-Item.prototype._addRehydratedEntry = function (inEntry, inAttribute) {
-  this.__addEntryToListOfEntriesForAttribute(inEntry, inAttribute);
+Item.prototype._addRehydratedEntry = function(entry, attribute) {
+  this.__addEntryToListOfEntriesForAttribute(entry, attribute);
 };
   
 
@@ -627,17 +627,17 @@
  * Adds an entry to the list of entries that have been set for this item.
  * 
  * @scope    private instance method
- * @param    inEntry    The entry to be associated with this item. 
+ * @param    entry    The entry to be associated with this item. 
  * @param    attribute    The attribute that this entry is assigned to. 
  */
-Item.prototype.__addEntryToListOfEntriesForAttribute = function (inEntry, attribute) {
+Item.prototype.__addEntryToListOfEntriesForAttribute = function(entry, attribute) {
   var attributeUuid = attribute._getUuid();
-  var listOfEntries = this.__myHashTableOfEntryListsKeyedByAttributeUuid[attributeUuid];
+  var listOfEntries = this._hashTableOfEntryListsKeyedByAttributeUuid[attributeUuid];
   if (!listOfEntries) {
     listOfEntries = [];
-    this.__myHashTableOfEntryListsKeyedByAttributeUuid[attributeUuid] = listOfEntries;
+    this._hashTableOfEntryListsKeyedByAttributeUuid[attributeUuid] = listOfEntries;
   }
-  listOfEntries.push(inEntry);
+  listOfEntries.push(entry);
 };
 
 

Modified: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/LintTest.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -28,6 +28,11 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
 
 function setUp() {
 }

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/ModelTest.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -28,6 +28,17 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util */
+/*global World, Item, Entry */
+/*global StubVirtualServer */
+/*global assertTrue, assertFalse, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
 var ModelTestVars = null;
 var world;
 
@@ -71,7 +82,7 @@
   var then = now;
   while (now.valueOf() == then.valueOf()) {
     now = new Date();
-  };
+  }
 }
 
 function testGetTimestamp() {
@@ -286,7 +297,7 @@
   listOfEntries = theHobbit.getEntriesForAttribute(attributeCalledName);
   assertTrue('"The Hobbit" has two names', listOfEntries.length == 2);
   assertTrue('getDisplayName() returns the first name', (starWars.getDisplayName() == "Star Wars"));
-  listOfNames = theHobbit.getNameEntries();
+  var listOfNames = theHobbit.getNameEntries();
   assertTrue('getContentData() returns a string', listOfNames[0].getValue() == "The Hobbit");
   hasAll = Util.areObjectsInSet(listOfNames, listOfEntries);
   hasAll = hasAll && Util.areObjectsInSet(listOfEntries, listOfNames);
@@ -569,7 +580,7 @@
   var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
   // listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
   var queryRunnerForNorthAmerica = world.newQueryRunner(northAmericaQuery);
-  var listOfCountries = queryRunnerForNorthAmerica.getResultItems();
+  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
   assertTrue('North America query returned only Seattle',
   listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
     
@@ -607,7 +618,7 @@
   assertTrue("Should be at least 3 categories", origNumberOfCategories >= 3);
   
   // Need to login before adding a category.
-  loginSuccess = world.login(userJane, janesPassword);
+  var loginSuccess = world.login(userJane, janesPassword);
   assertTrue('login succeeded', loginSuccess);
   assertTrue('Jane is logged in', world.getCurrentUser() == userJane);  
 

Modified: trunk/source/model/Ordinal.js
===================================================================
--- trunk/source/model/Ordinal.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/Ordinal.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -30,11 +30,12 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   User.js
-//   ContentRecord.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Record */
 // -------------------------------------------------------------------
 
+
 /**
  * Each instance of the Ordinal class keeps track of the fact that
  * a user set an ordinal number for an item or a entry of an item.
@@ -47,6 +48,8 @@
  */
 Ordinal.prototype = new Record();  // makes Ordinal be a subclass of Record
 function Ordinal(world, uuid, contentRecord, ordinalNumber) {
+  this._Record(world, uuid);
+
   this._contentRecord = contentRecord;
   this._ordinalNumber = ordinalNumber;
   this._contentRecord._addOrdinal(this);
@@ -59,7 +62,7 @@
  * @scope    public instance method
  * @return   An item or entry.
  */
-Ordinal.prototype.getContentRecord = function () {
+Ordinal.prototype.getContentRecord = function() {
   return this._contentRecord;
 };
 
@@ -70,7 +73,7 @@
  * @scope    public instance method
  * @return   An ordinal number.
  */
-Ordinal.prototype.getOrdinalNumber = function () {
+Ordinal.prototype.getOrdinalNumber = function() {
   return this._ordinalNumber;
 };
 

Modified: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/QueryRunner.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -29,6 +29,14 @@
 *****************************************************************************/
  
 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util  */
+/*global Item, World  */
+// -------------------------------------------------------------------
+
+
 /**
  * A QueryRunner is used to run a query.  A QueryRunner can be initialized with a
  * query spec item, so that when the QueryRunner is executed it will return the
@@ -71,7 +79,7 @@
  * @scope    public instance method
  * @return   A World object. 
  */
-QueryRunner.prototype.getWorld = function () {
+QueryRunner.prototype.getWorld = function() {
   return this._world;
 };
 
@@ -82,7 +90,7 @@
  * @scope    public instance method
  * @return   An attribute item. 
  */
-QueryRunner.prototype.getMatchingAttribute = function () {
+QueryRunner.prototype.getMatchingAttribute = function() {
   return this._matchingAttribute;
 };
 
@@ -93,7 +101,7 @@
  * @scope    public instance method
  * @return   A list of values. 
  */
-QueryRunner.prototype.getMatchingValues = function () {
+QueryRunner.prototype.getMatchingValues = function() {
   return this._listOfMatchingValues;
 };
 
@@ -104,7 +112,7 @@
  * @scope    public instance method
  * @return   The list of items in the query result set. 
  */
-QueryRunner.prototype.getResultItems = function () {
+QueryRunner.prototype.getResultItems = function() {
   return this._listOfResultItems;
 };
 

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/Record.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -31,6 +31,13 @@
 *****************************************************************************/
 
 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util  */
+// -------------------------------------------------------------------
+
+
 /**
  * The Record class serves as an abstract superclass for the classes Vote,
  * Ordinal, and ContentRecord.  ContentRecord is the abstract superclass

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/StubVirtualServer.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -30,14 +30,10 @@
  
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   Util.js
-//   World.js
-//   Item.js
-//   ContentRecord.js
-//   Ordinal.js
-//   Entry.js
-//   Vote.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util  */
+/*global World, Item, Entry, Ordinal, Vote, ContentRecord, Transaction  */
 // -------------------------------------------------------------------
 
 
@@ -93,7 +89,7 @@
   }
   urlForAxiomaticFile += "source/model/" + fileName;
   
-  this._myDehydratedAxiomFileURL = urlForAxiomaticFile;
+  this._dehydratedAxiomFileURL = urlForAxiomaticFile;
 }
 
 
@@ -101,21 +97,21 @@
  * Initializes the instance variables for a newly created StubVirtualServer.
  *
  * @scope    private instance method
- * @param    inWorld    The world that we provide data for. 
+ * @param    world    The world that we provide data for. 
  */
-StubVirtualServer.prototype._initialize = function (inWorld) {
-  this.__myWorld = inWorld;
+StubVirtualServer.prototype._initialize = function(world) {
+  this._world = world;
   
   this._countOfNestedTransactions = 0;
   this._currentTransaction = null;
 
-  this.__myHashTableOfItemsKeyedByUuid = {};
-  this.__myHashTableOfEntriesKeyedByUuid = {};
-  this.__myChronologicalListOfRecords = [];
+  this._hashTableOfItemsKeyedByUuid = {};
+  this._hashTableOfEntriesKeyedByUuid = {};
+  this._chronologicalListOfRecords = [];
   
-  this.__myListOfUsers = [];
-  this.__myHashTableOfUserAuthenticationInfo = {};
-  this.__myCurrentUser = null;
+  this._listOfUsers = [];
+  this._hashTableOfUserAuthenticationInfo = {};
+  this._currentUser = null;
 };
  
 
@@ -124,12 +120,12 @@
  * and does the initial loading of at least the axiomatic items.
  *
  * @scope    public instance method
- * @param    inWorld    The world that we provide data for. 
+ * @param    world    The world that we provide data for. 
  */
-StubVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function (inWorld) {
-  this._initialize(inWorld);
-  this._buildTypeHashTable();
-  this._loadAxiomaticItemsFromFileAtURL(this._myDehydratedAxiomFileURL);
+StubVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function(world) {
+  this._initialize(world);
+  // this._buildTypeHashTable();
+  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
 };
 
 
@@ -139,8 +135,8 @@
  * @scope    public instance method
  * @return   A World object. 
  */
-StubVirtualServer.prototype.getWorld = function () {
-  return this.__myWorld;
+StubVirtualServer.prototype.getWorld = function() {
+  return this._world;
 };
 
 
@@ -181,7 +177,7 @@
     if (listOfChangesMade.length > 0) {
       // alert(listOfChangesMade.length + " changes made");
       // Util.displayStatusBlurb(listOfChangesMade.length + " changes made");
-      this.__myWorld._notifyObserversOfChanges(listOfChangesMade);
+      this._world._notifyObserversOfChanges(listOfChangesMade);
     }
   }
 };
@@ -193,7 +189,7 @@
  * @scope    public instance method
  * @return   A Transaction object, or null if there is no transaction in progress. 
  */
-StubVirtualServer.prototype.getCurrentTransaction = function () {
+StubVirtualServer.prototype.getCurrentTransaction = function() {
   return this._currentTransaction;
 };
 
@@ -206,17 +202,17 @@
  * Returns a newly created item.
  *
  * @scope    public instance method
- * @param    inName    Optional. A string, which will be assigned to the name attribute of the new item. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    name    Optional. A string, which will be assigned to the name attribute of the new item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newItem = function (inName, inObserver) {
+StubVirtualServer.prototype.newItem = function(name, observer) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var item = this._createNewItem(inObserver, false);
-  if (inName) { 
-    var attributeCalledName = this.__myWorld.getAttributeCalledName();
-    item.addEntryForAttribute(attributeCalledName, inName);
+  var item = this._createNewItem(observer, false);
+  if (name) { 
+    var attributeCalledName = this._world.getAttributeCalledName();
+    item.addEntryForAttribute(attributeCalledName, name);
   }
   return item;
 };
@@ -230,13 +226,13 @@
  * an entry is set for one of the item's attributes.
  *
  * @scope    public instance method
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created provisional item.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newProvisionalItem = function (inObserver) {
+StubVirtualServer.prototype.newProvisionalItem = function(observer) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var item = this._createNewItem(inObserver, true);
+  var item = this._createNewItem(observer, true);
   return item;
 };
 
@@ -245,18 +241,17 @@
  * Returns a newly created item: either a provisional item or a normal item.
  *
  * @scope    private instance method
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
- * @param    inProvisionalFlag    True if the item is provisional; false if the item is normal. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    provisionalFlag    True if the item is provisional; false if the item is normal. 
  * @return   A newly created item.
  */
-StubVirtualServer.prototype._createNewItem = function (inObserver, inProvisionalFlag) {
+StubVirtualServer.prototype._createNewItem = function(observer, provisionalFlag) {
   var uuid = this._getNewUuid();
-  var item = new Item(this.__myWorld, uuid);
-  item._initialize(inObserver, inProvisionalFlag);
-  this.__myHashTableOfItemsKeyedByUuid[uuid] = item;
-  if (!inProvisionalFlag) {
+  var item = new Item(this._world, uuid);
+  item._initialize(observer, provisionalFlag);
+  this._hashTableOfItemsKeyedByUuid[uuid] = item;
+  if (!provisionalFlag) {
     this._currentTransaction.addRecord(item);
-    // this.__myChronologicalListOfNewlyCreatedRecords.push(item);
   }
   return item;
 };
@@ -266,10 +261,10 @@
  * Records the fact that a provisional item just became real.
  *
  * @scope    package instance method
- * @param    inItem    The item that was provisional and just became real. 
+ * @param    item    The item that was provisional and just became real. 
  */
-StubVirtualServer.prototype._provisionalItemJustBecameReal = function (inItem) {
-  this._currentTransaction.addRecord(inItem);
+StubVirtualServer.prototype._provisionalItemJustBecameReal = function(item) {
+  this._currentTransaction.addRecord(item);
 };
 
 
@@ -285,14 +280,14 @@
  * @return   A newly created entry.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newEntry = function (item, previousEntry, attribute, value, type) {
+StubVirtualServer.prototype.newEntry = function(item, previousEntry, attribute, value, type) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
-  var entry = new Entry(this.__myWorld, uuid);
+  var entry = new Entry(this._world, uuid);
   entry._initialize(item, previousEntry, attribute, value, type);
   item.__addEntryToListOfEntriesForAttribute(entry, attribute);
   
-  this.__myHashTableOfEntriesKeyedByUuid[uuid] = entry;
+  this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
   this._currentTransaction.addRecord(entry);
   return entry;
 };
@@ -313,13 +308,13 @@
 StubVirtualServer.prototype.newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
-  var entry = new Entry(this.__myWorld, uuid);
+  var entry = new Entry(this._world, uuid);
   entry._initializeConnection(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
 
   itemOne.__addEntryToListOfEntriesForAttribute(entry, attributeOne);
   itemTwo.__addEntryToListOfEntriesForAttribute(entry, attributeTwo);
 
-  this.__myHashTableOfEntriesKeyedByUuid[uuid] = entry;
+  this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
   this._currentTransaction.addRecord(entry);
   return entry;
 };
@@ -329,15 +324,15 @@
  * Returns a newly created ordinal.
  *
  * @scope    public instance method
- * @param    inContentRecord    The contentRecord that this is an ordinal for. 
- * @param    inOrdinalNumber    The ordinal number itself. 
+ * @param    contentRecord    The contentRecord that this is an ordinal for. 
+ * @param    ordinalNumber    The ordinal number itself. 
  * @return   A newly created ordinal.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newOrdinal = function (inContentRecord, inOrdinalNumber) {
+StubVirtualServer.prototype.newOrdinal = function(contentRecord, ordinalNumber) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
-  var ordinal = new Ordinal(this.__myWorld, uuid, inContentRecord, inOrdinalNumber);
+  var ordinal = new Ordinal(this._world, uuid, contentRecord, ordinalNumber);
   this._currentTransaction.addRecord(ordinal);
   return ordinal;
 };
@@ -347,15 +342,15 @@
  * Returns a newly created vote.
  *
  * @scope    public instance method
- * @param    inContentRecord    The contentRecord to attach this vote to. 
- * @param    inRetainFlag    True if this is a vote to retain. False if this is a vote to delete. 
+ * @param    contentRecord    The contentRecord to attach this vote to. 
+ * @param    retainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  * @return   A newly created vote.
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype.newVote = function (inContentRecord, inRetainFlag) {
+StubVirtualServer.prototype.newVote = function(contentRecord, retainFlag) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
-  var vote = new Vote(this.__myWorld, uuid, inContentRecord, inRetainFlag);
+  var vote = new Vote(this._world, uuid, contentRecord, retainFlag);
   this._currentTransaction.addRecord(vote);
   return vote;
 };
@@ -369,35 +364,35 @@
  * Creates a new item, where the new item represents a user of this datastore.
  *
  * @scope    public instance method
- * @param    inName    A string, which will be assigned to the name attribute of the new item. 
- * @param    inAuthentication    A string which will be used as the login password for the user. 
- * @param    inObserver    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    name    A string, which will be assigned to the name attribute of the new item. 
+ * @param    authentication    A string which will be used as the login password for the user. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A newly created item representing a user.
  * @throws   Throws an Error if a user is logged in.
  */
-StubVirtualServer.prototype.newUser = function (inName, inAuthentication, inObserver) {
-  if (this.__myCurrentUser) {
+StubVirtualServer.prototype.newUser = function(name, authentication, observer) {
+  if (this._currentUser) {
     var error = new Error("A user is logged in.  You can't create a new user when somebody is already logged in.");
     throw error;
   }
 
-  var newUser = this._createNewItem(inObserver, false);
-  this.__myListOfUsers.push(newUser);
+  var newUser = this._createNewItem(observer, false);
+  this._listOfUsers.push(newUser);
   
   var md5Authentication = null;
-  if (inAuthentication) {
-    md5Authentication = Util.hex_md5(inAuthentication);
+  if (authentication) {
+    md5Authentication = Util.hex_md5(authentication);
   }
-  this.__myHashTableOfUserAuthenticationInfo[newUser.getUniqueKeyString()] = md5Authentication;
+  this._hashTableOfUserAuthenticationInfo[newUser.getUniqueKeyString()] = md5Authentication;
 
-  this.__myCurrentUser = newUser;
+  this._currentUser = newUser;
   var categoryCalledPerson = this.getWorld().getCategoryCalledPerson();
   newUser.assignToCategory(categoryCalledPerson); 
-  if (inName) { 
+  if (name) { 
     var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
-    var entry = newUser.addEntryForAttribute(attributeCalledName, inName);
+    var entry = newUser.addEntryForAttribute(attributeCalledName, name);
   }
-  this.__myCurrentUser = null;
+  this._currentUser = null;
   
   return newUser;
 };
@@ -409,8 +404,8 @@
  * @scope    public instance method
  * @return   A list of items.
  */
-StubVirtualServer.prototype.getUsers = function () {
-  return this.__myListOfUsers;
+StubVirtualServer.prototype.getUsers = function() {
+  return this._listOfUsers;
 };
 
 
@@ -420,8 +415,8 @@
  * @scope    public instance method
  * @return   An item representing the user who is currently logged in.
  */
-StubVirtualServer.prototype.getCurrentUser = function () {
-  return this.__myCurrentUser;
+StubVirtualServer.prototype.getCurrentUser = function() {
+  return this._currentUser;
 };
 
 
@@ -437,38 +432,38 @@
  * @param    inPassword    Password supplied at login. 
  * @return   True if we were able to log in the user. False if the login failed.
  */
-StubVirtualServer.prototype.login = function (inUser, inPassword) {
+StubVirtualServer.prototype.login = function(user, password) {
   
   // Only one user can be logged in at once.  We consider it an error
   // if you try to log in a new user before logging out the old one.
-  if (this.__myCurrentUser) {
+  if (this._currentUser) {
     Util.assert(false);
   }
   
-  var isKnownUser = Util.isObjectInSet(inUser, this.__myListOfUsers);
+  var isKnownUser = Util.isObjectInSet(user, this._listOfUsers);
   if (!isKnownUser) {
     return false;
   }
 
-  if (inUser._getUuid() == World.UUID_FOR_USER_AMY) {
+  if (user._getUuid() == World.UUID_FOR_USER_AMY) {
     // nobody is allowed to log in as the axiomatic user
     return false;
   }
   
   var md5hashOfPassword = null;
-  if (inPassword) {
-    md5hashOfPassword = Util.hex_md5(inPassword);
+  if (password) {
+    md5hashOfPassword = Util.hex_md5(password);
   }
-  var realAuthentication = this._getAuthenticationInfoForUser(inUser);
+  var realAuthentication = this._getAuthenticationInfoForUser(user);
   var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);
   
   // PENDING: temporary hack
   // if (!successfulAuthentication) {
-  //  successfulAuthentication = ("PENDING: magic super password" == inAuthentication);
+  //  successfulAuthentication = ("PENDING: magic super password" == authentication);
   // }
   
   if (successfulAuthentication) {
-    this.__myCurrentUser = inUser;
+    this._currentUser = user;
     return true;
   } else {
     return false;
@@ -482,9 +477,9 @@
  * @scope    public instance method
  * @return   True if the current user was logged out. False if there was no current user logged in.
  */
-StubVirtualServer.prototype.logout = function () {
-  if (this.__myCurrentUser) {
-    this.__myCurrentUser = null;
+StubVirtualServer.prototype.logout = function() {
+  if (this._currentUser) {
+    this._currentUser = null;
     return true;
   } else {
     return false;
@@ -500,16 +495,16 @@
  * Given a UUID, returns the item identified by that UUID.
  *
  * @scope    public instance method
- * @param    inUuid    The UUID of the item to be returned. 
- * @param    inObserver    Optional. An object to be registered as an observer of the returned item. 
+ * @param    uuid    The UUID of the item to be returned. 
+ * @param    observer    Optional. An object to be registered as an observer of the returned item. 
  * @return   The item identified by the given UUID.
  */
-StubVirtualServer.prototype.getItemFromUuid = function (inUuid, inObserver) {
-  Util.assert(Util.isUuid(inUuid), inUuid + ' is not a Uuid');
+StubVirtualServer.prototype.getItemFromUuid = function(uuid, observer) {
+  Util.assert(Util.isUuid(uuid), uuid + ' is not a Uuid');
   
-  var item = this.__myHashTableOfItemsKeyedByUuid[inUuid];
-  if (item && inObserver) {
-    item.addObserver(inObserver);
+  var item = this._hashTableOfItemsKeyedByUuid[uuid];
+  if (item && observer) {
+    item.addObserver(observer);
   }
   return item;
 };
@@ -541,11 +536,11 @@
  *
  * @deprecated    PENDING: use getResultItemsForQueryRunner() instead.
  * @scope    public instance method
- * @param    inQuery    A query item. 
+ * @param    query    A query item. 
  * @return   A list of items.
  */
-StubVirtualServer.prototype.getResultItemsForQuery = function (inQuery, inObserver) {
-  Util.assert(inQuery instanceof Item);
+StubVirtualServer.prototype.getResultItemsForQuery = function(query, observer) {
+  Util.assert(query instanceof Item);
   
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
@@ -554,8 +549,8 @@
   var item = null;
   var key;
   var listOfQueryResultItems = [];
-  var listOfMatchingEntries = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
-  var listOfMatchingAttrs = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+  var listOfMatchingEntries = query.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var listOfMatchingAttrs = query.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
   if (!listOfMatchingEntries || listOfMatchingEntries.length === 0) {
     return [];
   }
@@ -571,8 +566,8 @@
 
   // This is a wildly inefficient search.  But maybe it doesn't matter,
   // because this code should all be replaced someday by server code.
-  for (uuid in this.__myHashTableOfItemsKeyedByUuid) {
-    item = this.__myHashTableOfItemsKeyedByUuid[uuid];
+  for (uuid in this._hashTableOfItemsKeyedByUuid) {
+    item = this._hashTableOfItemsKeyedByUuid[uuid];
     if (!item.hasBeenDeleted()) {
       var includeItem = true;
       for (key in listOfMatchingEntries) {
@@ -628,8 +623,8 @@
     }
   } else {
     // General case code for any sort of query. 
-    for (var uuid in this.__myHashTableOfItemsKeyedByUuid) {
-      var item = this.__myHashTableOfItemsKeyedByUuid[uuid];
+    for (var uuid in this._hashTableOfItemsKeyedByUuid) {
+      var item = this._hashTableOfItemsKeyedByUuid[uuid];
       var includeItem = queryRunner.doesItemMatch(item);
       if (includeItem) {
         listOfQueryResultItems.push(item);
@@ -647,19 +642,20 @@
  * included in query result list.
  *
  * @scope    public instance method
- * @param    inItem    An item, which will be modified so that it matches the query. 
- * @param    inQuery    A query item. 
+ * @param    item    An item, which will be modified so that it matches the query. 
+ * @param    query    A query item. 
  */
-StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList = function (inItem, inQuery) {
-  Util.assert(inItem instanceof Item);
-  Util.assert(inQuery instanceof Item);
+StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList = function(item, query) {
+  Util.assert(item instanceof Item);
+  Util.assert(query instanceof Item);
+  
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
   var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
   var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
   
-  var listOfMatchingEntries = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
-  var listOfMatchingAttrs = inQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+  var listOfMatchingEntries = query.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var listOfMatchingAttrs = query.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
   if (!(listOfMatchingEntries && (listOfMatchingEntries.length > 0))) {return;} // query not fully formed, so nothing to add
   var matchingAttribute;
   if (listOfMatchingAttrs.length === 0) {
@@ -674,11 +670,11 @@
   for (var key in listOfMatchingEntries) {
     var matchingEntry = listOfMatchingEntries[key];
     var match = matchingEntry.getValue();
-    if (!inItem.hasAttributeValue(matchingAttribute, match)) {
+    if (!item.hasAttributeValue(matchingAttribute, match)) {
       if ((matchingAttribute == attributeCalledCategory) && (match instanceof Item) && (match.isInCategory(categoryCalledCategory))) {
-        inItem.assignToCategory(match);
+        item.assignToCategory(match);
       } else {
-        inItem.addEntryForAttribute(matchingAttribute, match);
+        item.addEntryForAttribute(matchingAttribute, match);
       }
     }
   }
@@ -693,20 +689,9 @@
  * @param    inCategory    A category item. 
  * @return   A list of items.
  */
-StubVirtualServer.prototype.getItemsInCategory = function (category) {
+StubVirtualServer.prototype.getItemsInCategory = function(category) {
   Util.assert(category instanceof Item);
 
-/*  
-  var listOfItems = [];
-  for (var uuid in this.__myHashTableOfItemsKeyedByUuid) {
-    var item = this.__myHashTableOfItemsKeyedByUuid[uuid];
-    if (!item.hasBeenDeleted() && item.isInCategory(category)) {
-      listOfItems.push(item);
-    }
-  }
-  listOfItems.sort(ContentRecord.compareOrdinals);
-  return listOfItems; 
-  */
   var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
   var listOfEntries = category.getEntriesForAttribute(attributeCalledItemsInCategory);
   var listOfItems = [];
@@ -730,8 +715,8 @@
  * @scope    private instance method
  * @throws   Throws an Error if no user is logged in.
  */
-StubVirtualServer.prototype._throwErrorIfNoUserIsLoggedIn = function () {
-  if (!this.__myCurrentUser) {
+StubVirtualServer.prototype._throwErrorIfNoUserIsLoggedIn = function() {
+  if (!this._currentUser) {
     var error = new Error("No user is logged in.  You can't write to the repository when nobody is logged in.");
     throw error;
   }
@@ -742,15 +727,15 @@
  * Given a UUID, returns the item or entry identified by that UUID.
  *
  * @scope    private instance method
- * @param    inUuid    The UUID of the item or entry to be returned. 
+ * @param    uuid    The UUID of the item or entry to be returned. 
  * @return   The item or entry identified by the given UUID.
  */
-StubVirtualServer.prototype._getContentRecordFromUuid = function (inUuid) {
-  var item = this.getItemFromUuid(inUuid);
+StubVirtualServer.prototype._getContentRecordFromUuid = function(uuid) {
+  var item = this.getItemFromUuid(uuid);
   if (item) {
     return item;
   } else {
-    return this.__myHashTableOfEntriesKeyedByUuid[inUuid];
+    return this._hashTableOfEntriesKeyedByUuid[uuid];
   }
 };
 
@@ -763,8 +748,8 @@
  */
 StubVirtualServer.prototype._getNewUuid = function() {
   var newUuid;
-  if (this.__myCurrentUser) {
-    var uuidOfCurrentUser = this.__myCurrentUser._getUuid();
+  if (this._currentUser) {
+    var uuidOfCurrentUser = this._currentUser._getUuid();
     var arrayOfParts = uuidOfCurrentUser.split("-");
     var pseudoNodeOfCurrentUser = arrayOfParts[4];//"0123456789AB";
     newUuid = Util.generateTimeBasedUuid(pseudoNodeOfCurrentUser);
@@ -781,11 +766,11 @@
  * associated with that user.
  *
  * @scope    private instance method
- * @param    inUser    An item representing a user. 
+ * @param    user    An item representing a user. 
  * @return   The authentication info for the user.
  */
-StubVirtualServer.prototype._getAuthenticationInfoForUser = function (inUser) {
-  return this.__myHashTableOfUserAuthenticationInfo[inUser.getUniqueKeyString()];
+StubVirtualServer.prototype._getAuthenticationInfoForUser = function(user) {
+  return this._hashTableOfUserAuthenticationInfo[user.getUniqueKeyString()];
 };
 
 
@@ -794,15 +779,15 @@
  * or (b) creates an new item object, set its UUID, and returns that object.
  *
  * @scope    private instance method
- * @param    inUuid    The UUID of the item to be returned. 
+ * @param    uuid    The UUID of the item to be returned. 
  * @return   The item identified by the given UUID.
  */
-StubVirtualServer.prototype._getItemFromUuidOrCreateNewItem = function (inUuid) {
-  var item = this.getItemFromUuid(inUuid);
+StubVirtualServer.prototype._getItemFromUuidOrCreateNewItem = function(uuid) {
+  var item = this.getItemFromUuid(uuid);
   if (!item) {
-    item = new Item(this.__myWorld, inUuid);
+    item = new Item(this._world, uuid);
     item._initialize();
-    this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
+    this._hashTableOfItemsKeyedByUuid[uuid] = item;
     this._currentTransaction.addRecord(item);
   }
   return item;
@@ -815,7 +800,7 @@
  *
  * @scope    private instance method
  */
-StubVirtualServer.prototype._loadAxiomaticItemsFromFileAtURL = function (url) {
+StubVirtualServer.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
   var fileContentString = Util.getStringContentsOfFileAtURL(url);
   Util.assert(Util.isString(fileContentString));
   fileContentString += " ] }";
@@ -841,11 +826,11 @@
  * @param    inUuid    The UUID of the item to be returned. 
  * @return   The item identified by the given UUID.
  */
-StubVirtualServer.prototype.__getItemFromUuidOrBootstrapItem = function (inUuid) {
-  var item = this.getItemFromUuid(inUuid);
+StubVirtualServer.prototype.__getItemFromUuidOrBootstrapItem = function(uuid) {
+  var item = this.getItemFromUuid(uuid);
   if (!item) {
-    item = new Item(this.getWorld(), inUuid);
-    this.__myHashTableOfItemsKeyedByUuid[inUuid] = item;
+    item = new Item(this.getWorld(), uuid);
+    this._hashTableOfItemsKeyedByUuid[uuid] = item;
   }
   return item;
 };
@@ -856,14 +841,14 @@
  * or (b) creates an new entry object, set its UUID, and returns that object.
  *
  * @scope    private instance method
- * @param    inUuid    The UUID of the entry to be returned. 
+ * @param    uuid    The UUID of the entry to be returned. 
  * @return   The entry identified by the given UUID.
  */
-StubVirtualServer.prototype.__getEntryFromUuidOrBootstrapEntry = function (inUuid) {
-  var entry = this.__myHashTableOfEntriesKeyedByUuid[inUuid];
+StubVirtualServer.prototype.__getEntryFromUuidOrBootstrapEntry = function(uuid) {
+  var entry = this._hashTableOfEntriesKeyedByUuid[uuid];
   if (!entry) {
-    entry = new Entry(this.getWorld(), inUuid);
-    this.__myHashTableOfEntriesKeyedByUuid[inUuid] = entry;
+    entry = new Entry(this.getWorld(), uuid);
+    this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
   }
   return entry;
 };
@@ -874,7 +859,8 @@
  *
  * @scope    private instance method
  */
-StubVirtualServer.prototype._buildTypeHashTable = function () {
+/*
+StubVirtualServer.prototype._buildTypeHashTable = function() {
   var text      = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_TEXT);
   var number    = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_NUMBER);
   var dateType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_DATE);
@@ -883,64 +869,67 @@
   var itemType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_ITEM);
   var connectionType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CONNECTION);
   
-  this._myHashTableOfTypesKeyedByToken = {};
-  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_TEXT_VALUE] = text;
-  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_NUMBER_VALUE] = number;
-  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_DATE_VALUE] = dateType;
-  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
-  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_URL_VALUE] = url;
-  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_RELATED_UUID] = itemType;
-  this._myHashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CONNECTION] = connectionType;
+  this._hashTableOfTypesKeyedByToken = {};
+  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_TEXT_VALUE] = text;
+  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_NUMBER_VALUE] = number;
+  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_DATE_VALUE] = dateType;
+  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
+  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_URL_VALUE] = url;
+  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_RELATED_UUID] = itemType;
+  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CONNECTION] = connectionType;
 };
+*/
 
-
 /**
  * Given an item that represents that represents a basic data type, this method
  * returns the corresponding string token that represents the same data type.
  *
  * @scope    private instance method
- * @param    inType    An item that represents a basic data type, like Text, Number, or URL. 
+ * @param    type    An item that represents a basic data type, like Text, Number, or URL. 
  * @return   A string token that represents a basic data type.
  */
-StubVirtualServer.prototype._getTypeTokenFromType = function (inType) {
-  for (var token in this._myHashTableOfTypesKeyedByToken) {
-    typeItem = this._myHashTableOfTypesKeyedByToken[token];
-    if (inType == typeItem) {
+/*
+StubVirtualServer.prototype._getTypeTokenFromType = function(type) {
+  for (var token in this._hashTableOfTypesKeyedByToken) {
+    typeItem = this._hashTableOfTypesKeyedByToken[token];
+    if (type == typeItem) {
       return token;
     }
   }
-  Util.assert(false, "no such type: " + inType.getDisplayString());
+  Util.assert(false, "no such type: " + type.getDisplayString());
 };
+*/
 
-
 /**
  * Given a string token that represents a basic data type, this method
  * returns the corresponding item that represents the same data type.
  *
  * @scope    private instance method
- * @param    inToken    A string token that represents a basic data type.
+ * @param    token    A string token that represents a basic data type.
  * @return   An item that represents a basic data type, like Text, Number, or URL. 
  */
-StubVirtualServer.prototype._getTypeFromTypeToken = function (inToken) {
-  return this._myHashTableOfTypesKeyedByToken[inToken];
+/*
+StubVirtualServer.prototype._getTypeFromTypeToken = function(token) {
+  return this._hashTableOfTypesKeyedByToken[token];
 };
+*/
 
 
 /**
  * Given a dehydrated list of records, rehydrates each of the records.
  *
  * @scope    private instance method
- * @param    inListOfRecords    A list of dehydrated records. 
+ * @param    listOfDehydratedRecords    A list of dehydrated records. 
  */
-StubVirtualServer.prototype._rehydrateRecords = function (inListOfRecords) {
+StubVirtualServer.prototype._rehydrateRecords = function(listOfDehydratedRecords) {
   var key;
   var itemUuid;
   var item;
   var contentRecordUuid;
   var contentRecord;
 
-  for (key in inListOfRecords) {
-    var dehydratedRecord = inListOfRecords[key];
+  for (key in listOfDehydratedRecords) {
+    var dehydratedRecord = listOfDehydratedRecords[key];
 
     var dehydratedTransaction = dehydratedRecord[StubVirtualServer.JSON_MEMBER_TRANSACTION_CLASS];
     if (dehydratedTransaction) {
@@ -956,15 +945,15 @@
       if (dehydratedItem) {
         itemUuid = dehydratedItem[StubVirtualServer.JSON_MEMBER_UUID];
         item = this.__getItemFromUuidOrBootstrapItem(itemUuid);
-        this.__myChronologicalListOfRecords.push(item);
+        this._chronologicalListOfRecords.push(item);
       }
       
       if (dehydratedUser) {
         var userUuid = dehydratedUser[StubVirtualServer.JSON_MEMBER_USER];
         var userPasswordHash = dehydratedUser[StubVirtualServer.JSON_MEMBER_PASSWORD];
         var user = this.__getItemFromUuidOrBootstrapItem(userUuid);
-        this.__myListOfUsers.push(user);
-        this.__myHashTableOfUserAuthenticationInfo[user.getUniqueKeyString()] = userPasswordHash;
+        this._listOfUsers.push(user);
+        this._hashTableOfUserAuthenticationInfo[user.getUniqueKeyString()] = userPasswordHash;
       }
       
       if (dehydratedVote) {
@@ -981,7 +970,7 @@
         contentRecordUuid = dehydratedVote[StubVirtualServer.JSON_MEMBER_RECORD];
         contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
         var vote = new Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
-        this.__myChronologicalListOfRecords.push(vote);
+        this._chronologicalListOfRecords.push(vote);
       }
       
       if (dehydratedOrdinal) {
@@ -990,7 +979,7 @@
         contentRecordUuid = dehydratedOrdinal[StubVirtualServer.JSON_MEMBER_RECORD];
         contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
         var ordinal = new Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
-        this.__myChronologicalListOfRecords.push(ordinal);
+        this._chronologicalListOfRecords.push(ordinal);
       }
       
       if (dehydratedEntry) {
@@ -1010,9 +999,11 @@
           dataType = this.__getItemFromUuidOrBootstrapItem(dataTypeUuid);
         } else {
           // code to deal with the old pre-July-2005 file format
+          /*
           var dataTypeToken = dataTypeUuid;
           dataType = this._getTypeFromTypeToken(dataTypeToken);
           dataTypeUuid = dataType._getUuid();
+          */
         }
         
         if (dataTypeUuid == World.UUID_FOR_TYPE_CONNECTION) {
@@ -1060,11 +1051,11 @@
               finalData = new Date(rawData);
               break;
             default:
-              Util.assert(false,'Unknown data type while _rehydrating()');
+              Util.assert(false, 'Unknown data type while _rehydrating()');
           }
           entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
         }
-        this.__myChronologicalListOfRecords.push(entry);
+        this._chronologicalListOfRecords.push(entry);
       }
       
     }

Modified: trunk/source/model/Vote.js
===================================================================
--- trunk/source/model/Vote.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/Vote.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -30,11 +30,12 @@
 
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   User.js
-//   ContentRecord.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Record */
 // -------------------------------------------------------------------
 
+
 /**
  * Each instance of the Vote class keeps track of a vote to retain or delete
  * an item or a entry of an item.
@@ -61,7 +62,7 @@
  * @scope    public instance method
  * @return   An item or entry.
  */
-Vote.prototype.getContentRecord = function () {
+Vote.prototype.getContentRecord = function() {
   return this._contentRecord;
 };
 
@@ -73,7 +74,7 @@
  * @scope    public instance method
  * @return   A boolean. True if this is a vote to retain, or false if this is a vote to delete.
  */
-Vote.prototype.getRetainFlag = function () {
+Vote.prototype.getRetainFlag = function() {
   return this._retainFlag;
 };
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-30 03:54:39 UTC (rev 196)
+++ trunk/source/model/World.js	2005-06-30 05:18:45 UTC (rev 197)
@@ -30,10 +30,13 @@
  
 
 // -------------------------------------------------------------------
-// Dependencies:
-//   Util.js
-//   Item.js
-//   StubVirtualServer.js
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global window */
+/*global Util  */
+/*global Item, Entry, Ordinal, Vote, ContentRecord  */
+/*global QueryRunner  */ 
+/*global DeltaVirtualServer  */
 // -------------------------------------------------------------------
 
 
@@ -689,11 +692,11 @@
  * Returns a newly created item representing a query.
  *
  * @scope    public instance method
- * @param    matchingAttribute Attribute to query against
- * @param    matchingEntriesOrList an Entry or array of entries to be matched against,  
+ * @param    matchingAttribute    Attribute to query against
+ * @param    matchingEntryOrListOfEntries    an Entry or array of entries to be matched against,  
  * @return   A newly created item representing a query.
  */
-World.prototype.newQuery = function(matchingAttribute, matchingEntriesOrList) {
+World.prototype.newQuery = function(matchingAttribute, matchingEntryOrListOfEntries) {
   Util.assert(matchingAttribute instanceof Item);
   this.beginTransaction();
   var item = this._virtualServer.newItem("A query");
@@ -704,15 +707,15 @@
   var attributeCalledQueryMatchingValue = this.getAttributeCalledQueryMatchingValue();
   var matchingEntry;
   item.addEntryForAttribute(attributeCalledQueryMatchingAttribute, matchingAttribute);
-  if (matchingEntriesOrList) {
-    if (Util.isArray(matchingEntriesOrList)) {
-      for (var key in matchingEntriesOrList) {
-        matchingEntry = listOfCategories[key];
+  if (matchingEntryOrListOfEntries) {
+    if (Util.isArray(matchingEntryOrListOfEntries)) {
+      for (var key in matchingEntryOrListOfEntries) {
+        matchingEntry = matchingEntryOrListOfEntries[key];
         item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
       }
     }
     else {
-      matchingEntry = matchingEntriesOrList;
+      matchingEntry = matchingEntryOrListOfEntries;
       item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
     }
   }



From skinner at sheep.berlios.de  Thu Jun 30 19:36:44 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 30 Jun 2005 19:36:44 +0200
Subject: [openrecord-svn] r198 - in trunk/source: . model
Message-ID: <200506301736.j5UHai6q027837@sheep.berlios.de>

Author: skinner
Date: 2005-06-30 19:36:42 +0200 (Thu, 30 Jun 2005)
New Revision: 198

Modified:
   trunk/source/ItemView.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/ModelTest.js
   trunk/source/model/QueryRunner.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
Bug fix in DeltaVirtualServer.  Added QueryRunner support for explicit lists of items.

Modified: trunk/source/ItemView.js
===================================================================
--- trunk/source/ItemView.js	2005-06-30 05:18:45 UTC (rev 197)
+++ trunk/source/ItemView.js	2005-06-30 17:36:42 UTC (rev 198)
@@ -64,11 +64,10 @@
   this.setSuperview(inRootView);
   this.setHTMLElement(inHTMLElement);
   this.myItem = inItem;
-  // this.myDivElement = inHTMLElement;
-  // this.myRootView = inRootView;
   this.myPlugin = null;
 }
 
+
 /**
  * Returns a string that gives the name of the page.
  *
@@ -76,8 +75,8 @@
  * @return   A string that gives the name of the page.
  */
 ItemView.prototype.getPageTitle = function () {
-  var attributeCalledShortName = this.getWorld().getAttributeCalledShortName();
-  return this.myItem.getSingleStringValueFromAttribute(attributeCalledShortName);
+  var pageTitle = this.myItem.getDisplayString();
+  return pageTitle;
 };
 
 
@@ -106,7 +105,7 @@
 
   // let the detailPlugin add its own content
   var detailPluginElement = document.getElementById(detailDivId);
-  this.myPlugin = new DetailPlugin(this, detailPluginElement,[this.myItem]);
+  this.myPlugin = new DetailPlugin(this, detailPluginElement, [this.myItem]);
   this.myPlugin.refresh();
 };
 

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-06-30 05:18:45 UTC (rev 197)
+++ trunk/source/model/DeltaVirtualServer.js	2005-06-30 17:36:42 UTC (rev 198)
@@ -268,7 +268,7 @@
     if (record instanceof Entry) {
       var entry = record;
       var entryType = entry.getType();
-      var typeToken = this._getTypeTokenFromType(entryType);
+      // var typeToken = this._getTypeTokenFromType(entryType);
       var typeUuid = entryType._getUuid();
       commentString = "";
       var entryString = "";
@@ -320,7 +320,7 @@
             valueComment = this._getTypedDisplayStringForItem(contentData);
             break;
           default:
-            Util.assert(false, "no such type: " + typeToken);
+            Util.assert(false, "no such type: " + entryType.getDisplayString());
         }
         entryString += indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString;
         commentString += indent + '// ' + this._getTypedDisplayStringForItem(entry.getItem());

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-06-30 05:18:45 UTC (rev 197)
+++ trunk/source/model/ModelTest.js	2005-06-30 17:36:42 UTC (rev 198)
@@ -547,13 +547,6 @@
   assertTrue('Food query returns 3 foods', listOfFoods.length == 3);
   assertTrue('Food query returns all 3 foods', hasAll);
 
-/*  NO LONGER SUPPORT QUERY FOR SPECIFIC ITEMS 6/14/05
-  var queryForCities = world.newQueryForSpecificItems([tokyo, seattle]);
-  var listOfCities = world.getResultItemsForQuery(queryForCities);
-  hasAll = Util.areObjectsInSet([tokyo, seattle], listOfCities);
-  assertTrue('City query returns 2 cities', listOfCities.length == 2);
-  assertTrue('City query returns all cities', hasAll);*/
-
   world.setItemToBeIncludedInQueryResultList(tokyo, queryForFoods);
   assertTrue('Tokyo is now a food', tokyo.isInCategory(categoryCalledFood));
 
@@ -568,9 +561,7 @@
   var beijing = world.newItem("Beijing");
   beijing.addEntryForAttribute(attributeCalledContinent, "Asia");
   var seattleEntry = seattle.addEntryForAttribute(attributeCalledContinent, "North America");
-  // var asiaQuery = world.newQuery(attributeCalledContinent, "Asia")
-  // var listOfCountries = world.getResultItemsForQuery(asiaQuery);
-  var queryRunnerForAsia = world.newQueryRunner([attributeCalledContinent, "Asia"]);
+  var queryRunnerForAsia = world.newQueryRunner({attribute: attributeCalledContinent, values:["Asia"]});
   var listOfCountries = queryRunnerForAsia.getResultItems();
   
   assertTrue('Asia query returns 2 countries', listOfCountries.length == 2);
@@ -578,26 +569,22 @@
   assertTrue('Asia query returns all 2 countries', hasAll);
   
   var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
-  // listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
   var queryRunnerForNorthAmerica = world.newQueryRunner(northAmericaQuery);
   listOfCountries = queryRunnerForNorthAmerica.getResultItems();
   assertTrue('North America query returned only Seattle',
   listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
     
   seattle.addEntryForAttribute(attributeCalledContinent, "Asia");
-  // listOfCountries = world.getResultItemsForQuery(asiaQuery);
   listOfCountries = queryRunnerForAsia.getResultItems();
   assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
   hasAll = Util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
   assertTrue('Asia query returns all 3 countries', hasAll);
   
   world.setItemToBeIncludedInQueryResultList(beijing, northAmericaQuery);
-  // listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
   listOfCountries = queryRunnerForNorthAmerica.getResultItems();
   assertTrue('Beijing is now in North America',Util.isObjectInSet(beijing, listOfCountries));
   assertTrue('North America query returns 2 countries', listOfCountries.length == 2);
   world.setItemToBeIncludedInQueryResultList(seattle, northAmericaQuery);
-  // listOfCountries = world.getResultItemsForQuery(northAmericaQuery);
   listOfCountries = queryRunnerForNorthAmerica.getResultItems();
   assertTrue('North America still returns only 2 countries', listOfCountries.length == 2);
   
@@ -605,9 +592,9 @@
 }
 
 
-/*
-Tests World._getFilteredList, via World.getUsers and World.getCategories.
-*/
+/**
+ * Tests World._getFilteredList, via World.getUsers and World.getCategories.
+ */
 function testFilteredLists() {
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);  

Modified: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-06-30 05:18:45 UTC (rev 197)
+++ trunk/source/model/QueryRunner.js	2005-06-30 17:36:42 UTC (rev 198)
@@ -37,11 +37,30 @@
 // -------------------------------------------------------------------
 
 
+// -------------------------------------------------------------------
+// NavbarView public class constants
+// -------------------------------------------------------------------
+QueryRunner.JSON_MEMBER_ATTRIBUTE  = "attribute";
+QueryRunner.JSON_MEMBER_VALUES     = "values";
+
+QueryRunner.EXPLICIT_LIST_OF_ITEMS = QueryRunner;
+
+
 /**
- * A QueryRunner is used to run a query.  A QueryRunner can be initialized with a
- * query spec item, so that when the QueryRunner is executed it will return the
- * item specified by the query spec.
+ * A QueryRunner is used to run a query.  
  *
+ * A QueryRunner can be initialized with a query spec item, so that when the
+ * QueryRunner is executed it will return the item specified by the query spec.
+ * 
+ * Or, a QueryRunner can be initialized with an ad-hoc query instead of a 
+ * query spec item.  Here are some examples of ad-hoc queries:
+ *
+ *  {attribute: attributeState, values:["MD", "DC"]}             // all items where State is MD or DC
+ *  {attribute: attributeState, values:["MD", "DC", "CA", "WA"]} // all items in any of 4 states
+ *  {attribute: attributeCategory, values:[categoryBug]}         // all items assigned to category Bug
+ *  {values: [categoryBug]}                                      // all items assigned to category Bug
+ *  [berlin, moscow, tokyo, seattle]                             // just these 4 items
+ * 
  * @scope    public instance constructor
  * @param    world    The World of items this query will search within. 
  * @param    querySpec    Optional. A query spec item, or an ad-hoc query. 
@@ -226,24 +245,32 @@
       var matchingValue = matchingEntry.getValue();
       this._listOfMatchingValues.push(matchingValue);
     }
+    
+    return;
   }
   
-  // Handle the case where we have an ad-hoc query
+  // Handle the case where we have an ad-hoc query 
+  // that just has a list of items.
   if (Util.isArray(this._querySpec)) {
     var querySpecArray = this._querySpec;
-    if (querySpecArray.length === 0) {
-      return;
-    }
-    if (querySpecArray.length == 1) {
+    this._matchingAttribute = QueryRunner.EXPLICIT_LIST_OF_ITEMS;
+    this._listOfMatchingValues = querySpecArray;
+    
+    return;
+  }
+  
+  // Handle the case where we have an ad-hoc query that
+  // povides a matching attribute and matching values.
+  if (Util.isObject(this._querySpec)) {
+    var querySpecJson = this._querySpec;
+    this._matchingAttribute = querySpecJson[QueryRunner.JSON_MEMBER_ATTRIBUTE];
+    if (!this._matchingAttribute) {
       this._matchingAttribute = this.getWorld().getAttributeCalledCategory();
-      this._listOfMatchingValues = querySpecArray;
     }
-    if (querySpecArray.length > 1) {
-      this._matchingAttribute = querySpecArray.shift();
-      this._listOfMatchingValues = querySpecArray;
-    }
-  }
-  
+    this._listOfMatchingValues = querySpecJson[QueryRunner.JSON_MEMBER_VALUES];
+    
+    return;
+  }  
 };
 
 
@@ -253,7 +280,11 @@
  * @scope    public instance method
  */
 QueryRunner.prototype._runQuery = function() {
-  this._listOfResultItems = this.getWorld().getResultItemsForQueryRunner(this);
+  if (this._matchingAttribute == QueryRunner.EXPLICIT_LIST_OF_ITEMS) {
+    this._listOfResultItems = this._listOfMatchingValues;
+  } else {
+    this._listOfResultItems = this.getWorld().getResultItemsForQueryRunner(this);
+  }
 };
 
 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-30 05:18:45 UTC (rev 197)
+++ trunk/source/model/StubVirtualServer.js	2005-06-30 17:36:42 UTC (rev 198)
@@ -539,6 +539,7 @@
  * @param    query    A query item. 
  * @return   A list of items.
  */
+ /*
 StubVirtualServer.prototype.getResultItemsForQuery = function(query, observer) {
   Util.assert(query instanceof Item);
   
@@ -586,8 +587,8 @@
   listOfQueryResultItems.sort(ContentRecord.compareOrdinals);
   return listOfQueryResultItems; 
 };
+*/
 
-
 /**
  * Given a QueryRunner object, this method returns a list of all the items that 
  * match the query criteria.

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-30 05:18:45 UTC (rev 197)
+++ trunk/source/model/World.js	2005-06-30 17:36:42 UTC (rev 198)
@@ -877,13 +877,14 @@
  * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
  * @return   A list of items.
  */
+ /*
 World.prototype.getResultItemsForQuery = function(query, observer) {
   var listOfItems = this._virtualServer.getResultItemsForQuery(query);
   this.__addListObserver(listOfItems, observer);
   return listOfItems;
 };
+*/
 
-
 /**
  * Given a QueryRunner object, this method returns a list of all the items that 
  * match the query criteria.



From skinner at sheep.berlios.de  Thu Jun 30 20:13:01 2005
From: skinner at sheep.berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 30 Jun 2005 20:13:01 +0200
Subject: [openrecord-svn] r199 - in trunk/source: . model
Message-ID: <200506301813.j5UID1CP019808@sheep.berlios.de>

Author: skinner
Date: 2005-06-30 20:13:01 +0200 (Thu, 30 Jun 2005)
New Revision: 199

Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/PluginView.js
   trunk/source/model/QueryRunner.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
Log:
More bug fixing and cleaning up cruft.

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-06-30 17:36:42 UTC (rev 198)
+++ trunk/source/BarChartPlugin.js	2005-06-30 18:13:01 UTC (rev 199)
@@ -119,7 +119,7 @@
       if (listOfEntries) {
         firstEntry = listOfEntries[0];
         if (firstEntry) {
-          var value = firstEntry.getValue();
+          var value = firstEntry.getValue(contentItem);
           if (Util.isNumber(value)) {
             var count = hashTableOfNumericValueIncidenceKeyedByAttributeKey[attributeKeyString];
             if (!count) {

Modified: trunk/source/PluginView.js
===================================================================
--- trunk/source/PluginView.js	2005-06-30 17:36:42 UTC (rev 198)
+++ trunk/source/PluginView.js	2005-06-30 18:13:01 UTC (rev 199)
@@ -87,15 +87,6 @@
  */
 PluginView.prototype.fetchItems = function() {
   this._listOfItems = this._queryRunner.getResultItems();
-  /*
-  if (Util.isArray(this._querySpec)) {
-    //PENDING hack to allow Plugin to support list of items or query
-    this._listOfItems = this._querySpec;
-  }
-  else {
-    this._listOfItems = this._querySpec ? this.getWorld().getResultItemsForQuery(this._querySpec) : [];
-  }
-  */
   return this._listOfItems;
 };
 

Modified: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-06-30 17:36:42 UTC (rev 198)
+++ trunk/source/model/QueryRunner.js	2005-06-30 18:13:01 UTC (rev 199)
@@ -150,10 +150,14 @@
   
   var matchingAttribute = this.getMatchingAttribute();
   var listOfMatchingValues = this.getMatchingValues();
-  for (var key in listOfMatchingValues) {
-    var matchingValue = listOfMatchingValues[key];
-    if (item.hasAttributeValue(matchingAttribute, matchingValue)) {
-      return true;
+  if (matchingAttribute == QueryRunner.EXPLICIT_LIST_OF_ITEMS) {
+    return Util.isObjectInSet(item, listOfMatchingValues);
+  } else {
+    for (var key in listOfMatchingValues) {
+      var matchingValue = listOfMatchingValues[key];
+      if (item.hasAttributeValue(matchingAttribute, matchingValue)) {
+        return true;
+      }
     }
   }
   

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-06-30 17:36:42 UTC (rev 198)
+++ trunk/source/model/StubVirtualServer.js	2005-06-30 18:13:01 UTC (rev 199)
@@ -531,65 +531,6 @@
 // -------------------------------------------------------------------
 
 /**
- * Given a query item, this method returns a list of all the items that 
- * match the query criteria.
- *
- * @deprecated    PENDING: use getResultItemsForQueryRunner() instead.
- * @scope    public instance method
- * @param    query    A query item. 
- * @return   A list of items.
- */
- /*
-StubVirtualServer.prototype.getResultItemsForQuery = function(query, observer) {
-  Util.assert(query instanceof Item);
-  
-  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
-  var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
-
-  var uuid = null;
-  var item = null;
-  var key;
-  var listOfQueryResultItems = [];
-  var listOfMatchingEntries = query.getEntriesForAttribute(attributeCalledQueryMatchingValue);
-  var listOfMatchingAttrs = query.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
-  if (!listOfMatchingEntries || listOfMatchingEntries.length === 0) {
-    return [];
-  }
-  var matchingAttribute;
-  if (listOfMatchingAttrs.length === 0) {
-    // by default matching attribute is category
-    matchingAttribute = this.getWorld().getAttributeCalledCategory();
-  }
-  else {
-    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
-    matchingAttribute = listOfMatchingAttrs[0].getValue();
-  }
-
-  // This is a wildly inefficient search.  But maybe it doesn't matter,
-  // because this code should all be replaced someday by server code.
-  for (uuid in this._hashTableOfItemsKeyedByUuid) {
-    item = this._hashTableOfItemsKeyedByUuid[uuid];
-    if (!item.hasBeenDeleted()) {
-      var includeItem = true;
-      for (key in listOfMatchingEntries) {
-        var matchingEntry = listOfMatchingEntries[key];
-        var match = matchingEntry.getValue();
-        if (includeItem && !(item.hasAttributeValue(matchingAttribute, match))) {
-          includeItem = false;
-        }
-      }
-      if (includeItem) {
-        listOfQueryResultItems.push(item);
-      }
-    }
-  }
-  
-  listOfQueryResultItems.sort(ContentRecord.compareOrdinals);
-  return listOfQueryResultItems; 
-};
-*/
-
-/**
  * Given a QueryRunner object, this method returns a list of all the items that 
  * match the query criteria.
  *
@@ -856,67 +797,6 @@
 
 
 /**
- * PENDING.
- *
- * @scope    private instance method
- */
-/*
-StubVirtualServer.prototype._buildTypeHashTable = function() {
-  var text      = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_TEXT);
-  var number    = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_NUMBER);
-  var dateType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_DATE);
-  var checkMark = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CHECK_MARK);
-  var url       = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_URL);
-  var itemType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_ITEM);
-  var connectionType  = this.__getItemFromUuidOrBootstrapItem(World.UUID_FOR_TYPE_CONNECTION);
-  
-  this._hashTableOfTypesKeyedByToken = {};
-  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_TEXT_VALUE] = text;
-  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_NUMBER_VALUE] = number;
-  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_DATE_VALUE] = dateType;
-  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CHECKMARK_VALUE] = checkMark;
-  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_URL_VALUE] = url;
-  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_RELATED_UUID] = itemType;
-  this._hashTableOfTypesKeyedByToken[StubVirtualServer.JSON_TYPE_CONNECTION] = connectionType;
-};
-*/
-
-/**
- * Given an item that represents that represents a basic data type, this method
- * returns the corresponding string token that represents the same data type.
- *
- * @scope    private instance method
- * @param    type    An item that represents a basic data type, like Text, Number, or URL. 
- * @return   A string token that represents a basic data type.
- */
-/*
-StubVirtualServer.prototype._getTypeTokenFromType = function(type) {
-  for (var token in this._hashTableOfTypesKeyedByToken) {
-    typeItem = this._hashTableOfTypesKeyedByToken[token];
-    if (type == typeItem) {
-      return token;
-    }
-  }
-  Util.assert(false, "no such type: " + type.getDisplayString());
-};
-*/
-
-/**
- * Given a string token that represents a basic data type, this method
- * returns the corresponding item that represents the same data type.
- *
- * @scope    private instance method
- * @param    token    A string token that represents a basic data type.
- * @return   An item that represents a basic data type, like Text, Number, or URL. 
- */
-/*
-StubVirtualServer.prototype._getTypeFromTypeToken = function(token) {
-  return this._hashTableOfTypesKeyedByToken[token];
-};
-*/
-
-
-/**
  * Given a dehydrated list of records, rehydrates each of the records.
  *
  * @scope    private instance method

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-06-30 17:36:42 UTC (rev 198)
+++ trunk/source/model/World.js	2005-06-30 18:13:01 UTC (rev 199)
@@ -868,24 +868,6 @@
 // -------------------------------------------------------------------
 
 /**
- * Given a query item, this method returns a list of all the items that 
- * match the query criteria.
- *
- * @deprecated    PENDING: use getResultItemsForQueryRunner() instead.
- * @scope    public instance method
- * @param    query    A query item. 
- * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
- * @return   A list of items.
- */
- /*
-World.prototype.getResultItemsForQuery = function(query, observer) {
-  var listOfItems = this._virtualServer.getResultItemsForQuery(query);
-  this.__addListObserver(listOfItems, observer);
-  return listOfItems;
-};
-*/
-
-/**
  * Given a QueryRunner object, this method returns a list of all the items that 
  * match the query criteria.
  *



From chaolam at sheep.berlios.de  Thu Jun 30 20:23:19 2005
From: chaolam at sheep.berlios.de (Chih-Chao Lam at BerliOS)
Date: Thu, 30 Jun 2005 20:23:19 +0200
Subject: [openrecord-svn] r200 - trunk/source/repositories
Message-ID: <200506301823.j5UINJsu025415@sheep.berlios.de>

Author: chaolam
Date: 2005-06-30 20:19:00 +0200 (Thu, 30 Jun 2005)
New Revision: 200

Modified:
   trunk/source/repositories/dashboard.json
Log:
initial dashboard view


Modified: trunk/source/repositories/dashboard.json
===================================================================
--- trunk/source/repositories/dashboard.json	2005-06-30 18:13:01 UTC (rev 199)
+++ trunk/source/repositories/dashboard.json	2005-06-30 18:19:00 UTC (rev 200)
@@ -40,4 +40,1225 @@
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "This is a UI prototype of the dashboard view, built using OpenRecord." }
     } ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of New Section)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "9a071c60-e990-11d9-b90a-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of New Section).(Name) = "Layout data for Table of New Section"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "9a076a80-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+            "value": "Layout data for Table of New Section"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of New Section).(Category) = (Category: Layout Data)
+    // (Category: Layout Data).(Items in Category) = (Layout Data: Layout data for Table of New Section)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "9a07dfb0-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["9a071c60-e990-11d9-b90a-e24829d2f59b", "00040202-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Layout Data: Layout data for Table of New Section).(Applies To Plugin) = (Plugin View: Table)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "9a082dd0-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040103-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: New Section).(Layout Data) = (Layout Data: Layout data for Table of New Section)
+    // (Layout Data: Layout data for Table of New Section).(Section this layout data belongs to) = (Section: New Section)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "9a087bf0-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["99ea6ca0-e990-11d9-b90a-e24829d2f59b", "9a071c60-e990-11d9-b90a-e24829d2f59b"],
+        "attribute": ["00040102-ce7f-11d9-8cd5-0011113ae5d6", "00040104-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Page: New Page)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "99e90d10-e990-11d9-b90a-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Page: New Page).(Name) = "New Page"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99e95b30-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "99e90d10-e990-11d9-b90a-e24829d2f59b",
+            "value": "New Page"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Page: New Page).(Category) = (Category: Page)
+    // (Category: Page).(Items in Category) = (Page: New Page)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99e9a950-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["99e90d10-e990-11d9-b90a-e24829d2f59b", "00020000-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Page: New Page).(Summary) = "This is a new page."
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99e9f770-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001003-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "99e90d10-e990-11d9-b90a-e24829d2f59b",
+            "value": "This is a new page."  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: New Section)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "99ea6ca0-e990-11d9-b90a-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Section: New Section).(Name) = "New Section"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99eabac0-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "99ea6ca0-e990-11d9-b90a-e24829d2f59b",
+            "value": "New Section"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: New Section).(Category) = (Category: Section)
+    // (Category: Section).(Items in Category) = (Section: New Section)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99eb2ff0-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["99ea6ca0-e990-11d9-b90a-e24829d2f59b", "00020100-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Page: New Page).(Sections In Page) = (Section: New Section)
+    // (Section: New Section).(Page this section appears on) = (Page: New Page)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99eb7e10-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["99e90d10-e990-11d9-b90a-e24829d2f59b", "99ea6ca0-e990-11d9-b90a-e24829d2f59b"],
+        "attribute": ["00030000-ce7f-11d9-8cd5-0011113ae5d6", "00030001-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: New Section).(Plugin View) = (Plugin View: Table)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99ec1a50-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00040101-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "99ea6ca0-e990-11d9-b90a-e24829d2f59b",
+            "value": "00040301-ce7f-11d9-8cd5-0011113ae5d6"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "99ec6870-e990-11d9-b90a-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query).(Name) = "New Query"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99ecb690-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "99ec6870-e990-11d9-b90a-e24829d2f59b",
+            "value": "New Query"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Query Spec: New Query).(Category) = (Category: Query Spec)
+    // (Category: Query Spec).(Items in Category) = (Query Spec: New Query)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99ed04b0-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["99ec6870-e990-11d9-b90a-e24829d2f59b", "00001212-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Section: New Section).(Query Spec) = (Query Spec: New Query)
+    // (Query Spec: New Query).(Section this query spec belongs to) = (Section: New Section)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "99ed52d0-e990-11d9-b90a-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["99ea6ca0-e990-11d9-b90a-e24829d2f59b", "99ec6870-e990-11d9-b90a-e24829d2f59b"],
+        "attribute": ["00001006-ce7f-11d9-8cd5-0011113ae5d6", "00040105-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Query Spec: New Query).(Matching Value) = (Category: Category)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "9dee41a0-e990-11d9-b90a-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "99ec6870-e990-11d9-b90a-e24829d2f59b",
+          "value": "00001211-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Query Spec: New Query).(Matching Value) = (Category: Attribute)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "cc7a7480-e990-11d9-b90a-e24829d2f59b",
+  "previousEntry": "9dee41a0-e990-11d9-b90a-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "99ec6870-e990-11d9-b90a-e24829d2f59b",
+          "value": "00001210-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Task)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "580b3700-e991-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: Task).(Name) = "Task"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "86dd9aa0-e991-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "580b3700-e991-11d9-9146-e24829d2f59b",
+            "value": "Task"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Task).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Task)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "86de0fd0-e991-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["580b3700-e991-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: TaskType)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "b50873a0-e991-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Category: TaskType).(Name) = "TaskType"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "b508e8d0-e991-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "b50873a0-e991-11d9-9146-e24829d2f59b",
+            "value": "TaskType"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Category: TaskType).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: TaskType)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "b5098510-e991-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["b50873a0-e991-11d9-9146-e24829d2f59b", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Task).(Expected Type) = (Category: TaskType)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "b50a2150-e991-11d9-9146-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "580b3700-e991-11d9-9146-e24829d2f59b",
+            "value": "b50873a0-e991-11d9-9146-e24829d2f59b"  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: Task).(Inverse Attribute) = (Attribute: Items in Category)
+  // (Attribute: Items in Category).(Inverse Attribute) = (Attribute: Task)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "beb0ae40-e991-11d9-9146-e24829d2f59b",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["580b3700-e991-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Mail)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "86e20770-e991-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: Mail).(Name) = "Mail"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "41bf66a0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "86e20770-e991-11d9-9146-e24829d2f59b",
+            "value": "Mail"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Mail).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Mail)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "41c029f0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["86e20770-e991-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: Mail Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "470c5d70-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Category: Mail Status).(Name) = "Mail Status"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "470cd2a0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "470c5d70-e992-11d9-9146-e24829d2f59b",
+            "value": "Mail Status"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Category: Mail Status).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: Mail Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "470d6ee0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["470c5d70-e992-11d9-9146-e24829d2f59b", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Mail).(Expected Type) = (Category: Mail Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "470de410-e992-11d9-9146-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "86e20770-e991-11d9-9146-e24829d2f59b",
+            "value": "470c5d70-e992-11d9-9146-e24829d2f59b"  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: Mail).(Inverse Attribute) = (Attribute: Items in Category)
+  // (Attribute: Items in Category).(Inverse Attribute) = (Attribute: Mail)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "49732440-e992-11d9-9146-e24829d2f59b",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["86e20770-e991-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Who)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "41c86750-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: Who).(Name) = "Who"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "81aa29d0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "41c86750-e992-11d9-9146-e24829d2f59b",
+            "value": "Who"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Who).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Who)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "81aaed20-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["41c86750-e992-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: Who).(Expected Type) = (Category: Person)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "86cb2ea0-e992-11d9-9146-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "41c86750-e992-11d9-9146-e24829d2f59b",
+          "value": "00001201-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: Who).(Inverse Attribute) = (Attribute: Items in Category)
+  // (Attribute: Items in Category).(Inverse Attribute) = (Attribute: Who)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "8f1f9910-e992-11d9-9146-e24829d2f59b",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["41c86750-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: About)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "81b155c0-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: About).(Name) = "About"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "94784fb0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "81b155c0-e992-11d9-9146-e24829d2f59b",
+            "value": "About"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: About).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: About)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "94791300-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["81b155c0-e992-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: About).(Expected Type) = (Type: Text)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "95aa18f0-e992-11d9-9146-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "81b155c0-e992-11d9-9146-e24829d2f59b",
+          "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Calendar)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "94845da0-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: Calendar).(Name) = "Calendar"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "9e873b60-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "94845da0-e992-11d9-9146-e24829d2f59b",
+            "value": "Calendar"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Calendar).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Calendar)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "9e8825c0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["94845da0-e992-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: Calendar Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "a1a12590-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Category: Calendar Status).(Name) = "Calendar Status"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "a1a19ac0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "a1a12590-e992-11d9-9146-e24829d2f59b",
+            "value": "Calendar Status"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Category: Calendar Status).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: Calendar Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "a1a28520-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["a1a12590-e992-11d9-9146-e24829d2f59b", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Calendar).(Expected Type) = (Category: Calendar Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "a1a39690-e992-11d9-9146-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "94845da0-e992-11d9-9146-e24829d2f59b",
+            "value": "a1a12590-e992-11d9-9146-e24829d2f59b"  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: Calendar).(Inverse Attribute) = (Attribute: Items in Category)
+  // (Attribute: Items in Category).(Inverse Attribute) = (Attribute: Calendar)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "a6413a90-e992-11d9-9146-e24829d2f59b",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["94845da0-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: When)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "9e90ff60-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: When).(Name) = "When"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "ba51cb80-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "9e90ff60-e992-11d9-9146-e24829d2f59b",
+            "value": "When"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: When).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: When)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "ba528ed0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["9e90ff60-e992-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: When).(Expected Type) = (Type: Date)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "bc542b30-e992-11d9-9146-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9e90ff60-e992-11d9-9146-e24829d2f59b",
+          "value": "00001022-ce7f-11d9-8cd5-0011113ae5d6"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Project)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "ba630990-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: Project).(Name) = "Project"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "c13b8260-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "ba630990-e992-11d9-9146-e24829d2f59b",
+            "value": "Project"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Project).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Project)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "c13c45b0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["ba630990-e992-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: Project)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "c299b2d0-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Category: Project).(Name) = "Project"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "c29a2800-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "c299b2d0-e992-11d9-9146-e24829d2f59b",
+            "value": "Project"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Category: Project).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: Project)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "c29bd5b0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["c299b2d0-e992-11d9-9146-e24829d2f59b", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Project).(Expected Type) = (Category: Project)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "c29c71f0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "ba630990-e992-11d9-9146-e24829d2f59b",
+            "value": "c299b2d0-e992-11d9-9146-e24829d2f59b"  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: Project).(Inverse Attribute) = (Attribute: Items in Category)
+  // (Attribute: Items in Category).(Inverse Attribute) = (Attribute: Project)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "c4a00a20-e992-11d9-9146-e24829d2f59b",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["ba630990-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Attribute: Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "c1428740-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Attribute: Status).(Name) = "Status"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "c72ccf80-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "c1428740-e992-11d9-9146-e24829d2f59b",
+            "value": "Status"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Status).(Category) = (Category: Attribute)
+    // (Category: Attribute).(Items in Category) = (Attribute: Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "c72d44b0-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["c1428740-e992-11d9-9146-e24829d2f59b", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Category: Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "cae36ee0-e992-11d9-9146-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Category: Status).(Name) = "Status"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "cae3e410-e992-11d9-9146-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "cae36ee0-e992-11d9-9146-e24829d2f59b",
+            "value": "Status"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Category: Status).(Category) = (Category: Category)
+    // (Category: Category).(Items in Category) = (Category: Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "cae48050-e992-11d9-9146-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["cae36ee0-e992-11d9-9146-e24829d2f59b", "00001211-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (Attribute: Status).(Expected Type) = (Category: Status)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "cae4f580-e992-11d9-9146-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "c1428740-e992-11d9-9146-e24829d2f59b",
+            "value": "cae36ee0-e992-11d9-9146-e24829d2f59b"  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Attribute: Status).(Inverse Attribute) = (Attribute: Items in Category)
+  // (Attribute: Items in Category).(Inverse Attribute) = (Attribute: Status)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "ccd46970-e992-11d9-9146-e24829d2f59b",
+           "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": ["c1428740-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"],
+      "attribute": ["0000100b-ce7f-11d9-8cd5-0011113ae5d6", "0000100b-ce7f-11d9-8cd5-0011113ae5d6"]  }
+  },
+  // -----------------------------------------------------------------------
+  // (Query Spec: New Query).(Matching Value) = (Category: Status)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "e151ed00-e992-11d9-b345-e24829d2f59b",
+  "previousEntry": "cc7a7480-e990-11d9-b90a-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "99ec6870-e990-11d9-b90a-e24829d2f59b",
+          "value": "cae36ee0-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Status: Now)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "e1813a60-e992-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Status: Now).(Name) = "Now"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "e3991de0-e992-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "e1813a60-e992-11d9-b345-e24829d2f59b",
+            "value": "Now"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Status: Now).(Category) = (Category: Status)
+    // (Category: Status).(Items in Category) = (Status: Now)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "e399e130-e992-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["e1813a60-e992-11d9-b345-e24829d2f59b", "cae36ee0-e992-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Status: Later)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "e3a10d20-e992-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Status: Later).(Name) = "Later"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "e46101c0-e992-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "e3a10d20-e992-11d9-b345-e24829d2f59b",
+            "value": "Later"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Status: Later).(Category) = (Category: Status)
+    // (Category: Status).(Items in Category) = (Status: Later)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "e461c510-e992-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["e3a10d20-e992-11d9-b345-e24829d2f59b", "cae36ee0-e992-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Status: Done)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "e467df90-e992-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Status: Done).(Name) = "Done"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "e5a0fbd0-e992-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "e467df90-e992-11d9-b345-e24829d2f59b",
+            "value": "Done"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Status: Done).(Category) = (Category: Status)
+    // (Category: Status).(Items in Category) = (Status: Done)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "e5a19810-e992-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["e467df90-e992-11d9-b345-e24829d2f59b", "cae36ee0-e992-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Query Spec: New Query).(Matching Attribute) = (Attribute: Status)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "ef2d9820-e992-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001008-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "99ec6870-e990-11d9-b90a-e24829d2f59b",
+          "value": "c1428740-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  { "Vote": {                                              // vote to DELETE Status
+           "uuid": "ef639c40-e992-11d9-b345-e24829d2f59b",
+         "record": "e151ed00-e992-11d9-b345-e24829d2f59b",
+     "retainFlag": "false"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Query Spec: New Query).(Matching Value) = (Status: Now)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "f2481e90-e992-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001007-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "99ec6870-e990-11d9-b90a-e24829d2f59b",
+          "value": "e1813a60-e992-11d9-b345-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: Task)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "f896cdf0-e992-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "580b3700-e991-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: Mail)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "fc2090f0-e992-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "86e20770-e991-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: Who)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "fff2cea0-e992-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "41c86750-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: About)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "033b9100-e993-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "81b155c0-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: Calendar)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "06998910-e993-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "94845da0-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: When)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "0965c870-e993-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "9e90ff60-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: Project)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "0bd89d30-e993-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "ba630990-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Layout Data: Layout data for Table of New Section).(Table Columns) = (Attribute: Status)
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "0e985970-e993-11d9-b345-e24829d2f59b",
+           "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "0004010a-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "9a071c60-e990-11d9-b90a-e24829d2f59b",
+          "value": "c1428740-e992-11d9-9146-e24829d2f59b"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (TaskType: Research)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "12a703e0-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (TaskType: Research).(Name) = "Research"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "12a77910-e993-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "12a703e0-e993-11d9-b345-e24829d2f59b",
+            "value": "Research"  }
+    },
+    // -----------------------------------------------------------------------
+    // (TaskType: Research).(Category) = (Category: TaskType)
+    // (Category: TaskType).(Items in Category) = (TaskType: Research)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "12a7c730-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["12a703e0-e993-11d9-b345-e24829d2f59b", "b50873a0-e991-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "0ea096d0-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (???).(Task) = (TaskType: Research)
+    // (TaskType: Research).(Items in Category) = (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "12a81550-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0ea096d0-e993-11d9-b345-e24829d2f59b", "12a703e0-e993-11d9-b345-e24829d2f59b"],
+        "attribute": ["580b3700-e991-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???).(Status) = (Status: Now)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "12a88a80-e993-11d9-b345-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "c1428740-e992-11d9-9146-e24829d2f59b",
+             "item": "0ea096d0-e993-11d9-b345-e24829d2f59b",
+            "value": "e1813a60-e992-11d9-b345-e24829d2f59b"  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Person: Heikki)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "1613a1f0-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Person: Heikki).(Name) = "Heikki"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "16168820-e993-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "1613a1f0-e993-11d9-b345-e24829d2f59b",
+            "value": "Heikki"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Person: Heikki).(Category) = (Category: Person)
+    // (Category: Person).(Items in Category) = (Person: Heikki)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "16172460-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["1613a1f0-e993-11d9-b345-e24829d2f59b", "00001201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???).(Who) = (Person: Heikki)
+    // (Person: Heikki).(Items in Category) = (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "1617c0a0-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0ea096d0-e993-11d9-b345-e24829d2f59b", "1613a1f0-e993-11d9-b345-e24829d2f59b"],
+        "attribute": ["41c86750-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (???).(About) = "re: Accessibility"
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "198744e0-e993-11d9-b345-e24829d2f59b",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "81b155c0-e992-11d9-9146-e24829d2f59b",
+           "item": "0ea096d0-e993-11d9-b345-e24829d2f59b",
+          "value": "re: Accessibility"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Calendar Status: Confirmed)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "1c3d6430-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Calendar Status: Confirmed).(Name) = "Confirmed"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "1c3db250-e993-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "1c3d6430-e993-11d9-b345-e24829d2f59b",
+            "value": "Confirmed"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Calendar Status: Confirmed).(Category) = (Category: Calendar Status)
+    // (Category: Calendar Status).(Items in Category) = (Calendar Status: Confirmed)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "1c3e0070-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["1c3d6430-e993-11d9-b345-e24829d2f59b", "a1a12590-e992-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???).(Calendar) = (Calendar Status: Confirmed)
+    // (Calendar Status: Confirmed).(Items in Category) = (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "1c3e4e90-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0ea096d0-e993-11d9-b345-e24829d2f59b", "1c3d6430-e993-11d9-b345-e24829d2f59b"],
+        "attribute": ["94845da0-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (???).(When) = "TBD"
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "1d324b80-e993-11d9-b345-e24829d2f59b",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "9e90ff60-e992-11d9-9146-e24829d2f59b",
+           "item": "0ea096d0-e993-11d9-b345-e24829d2f59b",
+          "value": "TBD"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Project: Accessibility)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "2120ead0-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Project: Accessibility).(Name) = "Accessibility"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "21216000-e993-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "2120ead0-e993-11d9-b345-e24829d2f59b",
+            "value": "Accessibility"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Project: Accessibility).(Category) = (Category: Project)
+    // (Category: Project).(Items in Category) = (Project: Accessibility)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "2121fc40-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["2120ead0-e993-11d9-b345-e24829d2f59b", "c299b2d0-e992-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???).(Project) = (Project: Accessibility)
+    // (Project: Accessibility).(Items in Category) = (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "21229880-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0ea096d0-e993-11d9-b345-e24829d2f59b", "2120ead0-e993-11d9-b345-e24829d2f59b"],
+        "attribute": ["ba630990-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Project: 0.6 planning)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "25b7b100-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Project: 0.6 planning).(Name) = "0.6 planning"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "25b82630-e993-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "25b7b100-e993-11d9-b345-e24829d2f59b",
+            "value": "0.6 planning"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Project: 0.6 planning).(Category) = (Category: Project)
+    // (Category: Project).(Items in Category) = (Project: 0.6 planning)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "25b8c270-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["25b7b100-e993-11d9-b345-e24829d2f59b", "c299b2d0-e992-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???).(Project) = (Project: 0.6 planning)
+    // (Project: 0.6 planning).(Items in Category) = (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "25b937a0-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0ea096d0-e993-11d9-b345-e24829d2f59b", "25b7b100-e993-11d9-b345-e24829d2f59b"],
+        "attribute": ["ba630990-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Person: Ted)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "2d26c480-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Person: Ted).(Name) = "Ted"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "2d2712a0-e993-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "2d26c480-e993-11d9-b345-e24829d2f59b",
+            "value": "Ted"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Person: Ted).(Category) = (Category: Person)
+    // (Category: Person).(Items in Category) = (Person: Ted)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "2d2760c0-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["2d26c480-e993-11d9-b345-e24829d2f59b", "00001201-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "12afdd80-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (???).(Who) = (Person: Ted)
+    // (Person: Ted).(Items in Category) = (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "2d27aee0-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["12afdd80-e993-11d9-b345-e24829d2f59b", "2d26c480-e993-11d9-b345-e24829d2f59b"],
+        "attribute": ["41c86750-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???).(Status) = (Status: Now)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "2d282410-e993-11d9-b345-e24829d2f59b",
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "c1428740-e992-11d9-9146-e24829d2f59b",
+             "item": "12afdd80-e993-11d9-b345-e24829d2f59b",
+            "value": "e1813a60-e992-11d9-b345-e24829d2f59b"  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (???).(About) = "PyCon presentation"
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "32f4f940-e993-11d9-b345-e24829d2f59b",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "81b155c0-e992-11d9-9146-e24829d2f59b",
+           "item": "12afdd80-e993-11d9-b345-e24829d2f59b",
+          "value": "PyCon presentation"  }
+  },
+  // -----------------------------------------------------------------------
+  // (???).(When) = "Tue Apr 12 2005 00:00:00 GMT-0700 (PDT)"
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "36115470-e993-11d9-b345-e24829d2f59b",
+           "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "9e90ff60-e992-11d9-9146-e24829d2f59b",
+           "item": "12afdd80-e993-11d9-b345-e24829d2f59b",
+          "value": "Tue Apr 12 2005 00:00:00 GMT-0700 (PDT)"  }
+  },
+  // =======================================================================
+  { "Transaction": [
+    // -----------------------------------------------------------------------
+    // (Project: PyCon)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Item": { "uuid": "397b0c50-e993-11d9-b345-e24829d2f59b" } },
+    // -----------------------------------------------------------------------
+    // (Project: PyCon).(Name) = "PyCon"
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "397b8180-e993-11d9-b345-e24829d2f59b",
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": "397b0c50-e993-11d9-b345-e24829d2f59b",
+            "value": "PyCon"  }
+    },
+    // -----------------------------------------------------------------------
+    // (Project: PyCon).(Category) = (Category: Project)
+    // (Category: Project).(Items in Category) = (Project: PyCon)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "397bf6b0-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["397b0c50-e993-11d9-b345-e24829d2f59b", "c299b2d0-e992-11d9-9146-e24829d2f59b"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },
+    // -----------------------------------------------------------------------
+    // (???).(Project) = (Project: PyCon)
+    // (Project: PyCon).(Items in Category) = (???)
+    //           by (Chao) on (Jun 30, 2005)
+    { "Entry": {
+             "uuid": "397ce110-e993-11d9-b345-e24829d2f59b",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["12afdd80-e993-11d9-b345-e24829d2f59b", "397b0c50-e993-11d9-b345-e24829d2f59b"],
+        "attribute": ["ba630990-e992-11d9-9146-e24829d2f59b", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    }  ]
+  },
+  // -----------------------------------------------------------------------
+  // (Page: Dashboard View).(Name) = "Dashboard View"
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "40b1d1c0-e993-11d9-b345-e24829d2f59b",
+  "previousEntry": "99e95b30-e990-11d9-b90a-e24829d2f59b",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "99e90d10-e990-11d9-b90a-e24829d2f59b",
+          "value": "Dashboard View"  }
+  },
+  // -----------------------------------------------------------------------
+  // (Page: Dashboard).(Name) = "Intro"
+  //           by (Chao) on (Jun 30, 2005)
+  { "Entry": {
+           "uuid": "45b6ea20-e993-11d9-b345-e24829d2f59b",
+  "previousEntry": "8a3c6b5c-ce7f-11d9-8cd5-e24829d2f59b",
+           "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",
+      "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",
+           "item": "8a3c6b50-ce7f-11d9-8cd5-e24829d2f59b",
+          "value": "Intro"  }
   }
\ No newline at end of file



