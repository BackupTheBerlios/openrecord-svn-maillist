From mignon at berlios.de  Tue Nov  1 02:05:49 2005
From: mignon at berlios.de (Mignon Belongie at BerliOS)
Date: Tue, 1 Nov 2005 02:05:49 +0100
Subject: [openrecord-svn] r368 - trunk/tests/dojo
Message-ID: <200511010105.jA115nEP031066@sheep.berlios.de>

Author: mignon
Date: 2005-11-01 02:05:46 +0100 (Tue, 01 Nov 2005)
New Revision: 368

Modified:
   trunk/tests/dojo/SimpleDojoTest.js
Log:
Added testDojoInherits.

Modified: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-10-25 03:17:18 UTC (rev 367)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-11-01 01:05:46 UTC (rev 368)
@@ -64,6 +64,20 @@
   assertTrue("'Iggy Pop' is a string.", dojo.lang.isString("Iggy Pop"));
 }
 
+function testDojoInherits() {
+  classA = function() {
+    _a = 3;
+  };
+  classB = function() {
+    classA.call(this);
+    _b = 4;
+  };
+  dojo.inherits(classB, classA);  
+  var b = new classB();
+  assertTrue("b should be an instance of classB.", b instanceof classB);
+  assertTrue("b should be an instance of classA.", b instanceof classA);
+}
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From mignon at berlios.de  Tue Nov  1 03:17:05 2005
From: mignon at berlios.de (Mignon Belongie at BerliOS)
Date: Tue, 1 Nov 2005 03:17:05 +0100
Subject: [openrecord-svn] r369 - trunk/tests/storage
Message-ID: <200511010217.jA12H56n021788@sheep.berlios.de>

Author: mignon
Date: 2005-11-01 03:17:03 +0100 (Tue, 01 Nov 2005)
New Revision: 369

Modified:
   trunk/tests/storage/DirectoryReadingTest.html
   trunk/tests/storage/DirectoryReadingTest.js
Log:
changed dojo-0.1.0 to dojo-rev1759

Modified: trunk/tests/storage/DirectoryReadingTest.html
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.html	2005-11-01 01:05:46 UTC (rev 368)
+++ trunk/tests/storage/DirectoryReadingTest.html	2005-11-01 02:17:03 UTC (rev 369)
@@ -12,7 +12,7 @@
     <title>Test reading directories</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="DirectoryReadingTest.js"></script>
   </head>

Modified: trunk/tests/storage/DirectoryReadingTest.js
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.js	2005-11-01 01:05:46 UTC (rev 368)
+++ trunk/tests/storage/DirectoryReadingTest.js	2005-11-01 02:17:03 UTC (rev 369)
@@ -33,7 +33,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.storage.FileSystem");
   dojo.require("orp.util.Util");



From skinner at berlios.de  Tue Nov  1 05:16:24 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 1 Nov 2005 05:16:24 +0100
Subject: [openrecord-svn] r370 - trunk/source/storage
Message-ID: <200511010416.jA14GOEW012633@sheep.berlios.de>

Author: skinner
Date: 2005-11-01 05:16:22 +0100 (Tue, 01 Nov 2005)
New Revision: 370

Added:
   trunk/source/storage/fileProtocolUtil.js
Log:
Checkin of only fileProtocolUtil.js

Added: trunk/source/storage/fileProtocolUtil.js
===================================================================
--- trunk/source/storage/fileProtocolUtil.js	2005-11-01 02:17:03 UTC (rev 369)
+++ trunk/source/storage/fileProtocolUtil.js	2005-11-01 04:16:22 UTC (rev 370)
@@ -0,0 +1,152 @@
+/*****************************************************************************
+ fileProtocolUtil.js
+ 
+******************************************************************************
+ The code in this file is a heavily modified version of code that was copied
+ from the TiddlyWiki and GTDTiddlyWiki code base.
+ 
+ The original code is Copyright (c) Osmosoft Limited.  The original copyright 
+ notice is included below, along with the license conditions and disclaimer.  
+ 
+ OpenRecord modifications by Brian Douglas Skinner <brian.skinner at gumption.org>
+
+ For the OpenRecord modifications, the Copyright rights are relinquished under  
+ the Creative Commons Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+
+******************************************************************************
+TiddlyWiki 1.2.6 by Jeremy Ruston, (jeremy [at] osmosoft [dot] com)
+Incorporating improvements by Isao Sonobe, http://www-gauge.scphys.kyoto-u.ac.jp/~sonobe/OgreKit/OgreKitWiki.html
+GTDTiddlyWiki modification by Nathan Bowers, (wiki [at] snapgrid [dot] com)
+Safari Compatability by Jonathan Paisley at http://www.dcs.gla.ac.uk/~jp/
+
+Copyright (c) Osmosoft Limited, 14 April 2005
+
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer.
+
+Redistributions in binary form must reproduce the above copyright notice, this
+list of conditions and the following disclaimer in the documentation and/or other
+materials provided with the distribution.
+
+Neither the name of the Osmosoft Limited nor the names of its contributors may be
+used to endorse or promote products derived from this software without specific
+prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGE.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.fileProtocolUtil");
+
+
+/**
+ * This function looks at the URL value in the window.location property,
+ * strips the filename off the end, appends any given path elements,
+ * converts the whole thing to a format that is compatible with the 
+ * local file system, and returns the new local path.
+ *
+ * @scope    public function
+ * @return   Returns a full local pathname.
+ */
+orp.storage.getLocalPathFromWindowLocation = function(listOfAdditions) {
+  // Example location:
+  //   location.href     == file:///D:/amy/openrecord/foo.html#bar
+  //   location.protocol == file:
+  //   location.pathname ==        /D:/amy/openrecord/foo.html
+  //   location.hash     ==                                   #bar
+
+  // Get the URL of the document
+  var pathname = window.location.pathname;
+  
+  
+  // Step 1: Make the requested additions to the pathname
+  var arrayOfParts = pathname.split('/');
+  arrayOfParts.pop();  // get rid of the final "/foo.html" part
+  for (var i in listOfAdditions) {
+    var additionalPart = listOfAdditions[i];
+    arrayOfParts.push(additionalPart);
+  }
+  pathname = arrayOfParts.join('/');
+
+  
+  // Step 2: Figure out what type of URL we're working with
+  // Constants
+  var PathType = {
+    LOCAL_PC:        "LOCAL_PC",          // "file:///x:/path/path..." 
+    LOCAL_UNIX_MAC:  "LOCAL_UNIX_MAC",    // "file:///path/path..."
+    NETWORK_PC:      "NETWORK_PC",        // "file://server/share/path/path..."
+    NETWORK_FIREFOX: "NETWORK_FIREFOX" }; // "file://///server/share/path/path..."
+  // "file:///x:/path/path..."             == PathType.LOCAL_PC        --> "x:\path\path..."
+  // "file:///path/path..."                == PathType.LOCAL_UNIX_MAC  --> "/path/path..."
+  // "file://server/share/path/path..."    == PathType.NETWORK_PC      --> "\\server\share\path\path..."
+  // "file://///server/share/path/path..." == PathType.NETWORK_FIREFOX --> "\\server\share\path\path..."
+
+  var pathType = null;
+  if (pathname.charAt(2) == ":") {
+    pathType = PathType.LOCAL_PC;
+  } else if (pathname.indexOf("///") === 0) {
+    pathType = PathType.NETWORK_FIREFOX;
+  } else if (pathname.indexOf("/") === 0) {
+    pathType = PathType.LOCAL_UNIX_MAC;
+  } else {
+    pathType = PathType.NETWORK_PC;
+  }
+
+
+  // Step 3: Convert the URL to a file path
+  var localPath = pathname;
+  switch (pathType) {
+    case PathType.LOCAL_PC:
+      // example: "/x:/path/path..."
+      localPath = localPath.substring(1);  // get rid of initial '/'
+      localPath = unescape(localPath);
+      localPath = localPath.replace(new RegExp("/","g"),"\\");
+      // result: "x:\path\path..."
+      break;
+    case PathType.LOCAL_UNIX_MAC:         
+      // example: "/path/path..."
+      localPath = unescape(localPath);
+      // result: "/path/path..."
+      break;
+    case PathType.NETWORK_FIREFOX:
+      // example: "///server/share/path/path..."
+      localPath = localPath.substring(3);  // get rid of initial '///'
+      localPath = unescape(localPath);
+      localPath = localPath.replace(new RegExp("/","g"),"\\");
+      localPath = "\\\\" + localPath;      
+      // result: "\\server\share\path\path..."
+      break;
+    case PathType.NETWORK_PC:
+      // example: "server/share/path/path..."
+      localPath = unescape(localPath);
+      localPath = localPath.replace(new RegExp("/","g"),"\\");
+      localPath = "\\\\" + localPath;      
+      // result: "\\server\share\path\path..."
+      break;
+  }
+
+  return localPath;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at berlios.de  Tue Nov  1 06:23:24 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 1 Nov 2005 06:23:24 +0100
Subject: [openrecord-svn] r371 - in trunk: source source/archive source/model source/storage source/util source/view tests tests/archive tests/dom tests/lang tests/model tests/storage tests/util tests/uuid
Message-ID: <200511010523.jA15NOD7026348@sheep.berlios.de>

Author: skinner
Date: 2005-11-01 06:23:19 +0100 (Tue, 01 Nov 2005)
New Revision: 371

Added:
   trunk/source/storage/FileProtocolStorage.js
   trunk/source/storage/HttpProtocolStorage.js
   trunk/source/storage/directoryList.js
   trunk/source/storage/httpProtocolUtil.js
   trunk/tests/archive/TestSuite.html
   trunk/tests/archive/test_dependencies.html
   trunk/tests/archive/test_dependencies.js
   trunk/tests/dom/test_dom.html
   trunk/tests/dom/test_dom.js
   trunk/tests/model/test_AfterLogin.html
   trunk/tests/model/test_AfterLogin.js
   trunk/tests/model/test_BeforeLogin.html
   trunk/tests/model/test_BeforeLogin.js
   trunk/tests/model/test_SequentialUsers.html
   trunk/tests/model/test_SequentialUsers.js
   trunk/tests/model/test_dependencies.html
   trunk/tests/model/test_dependencies.js
   trunk/tests/storage/test_dependencies.html
   trunk/tests/storage/test_dependencies.js
   trunk/tests/util/test_dependencies.html
   trunk/tests/util/test_dependencies.js
Removed:
   trunk/source/storage/FileStorage.js
   trunk/source/storage/FileSystem.js
   trunk/source/storage/HttpStorage.js
   trunk/tests/dom/domTest.html
   trunk/tests/dom/domTest.js
Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/TablePlugin.js
   trunk/source/archive/DeltaArchive.js
   trunk/source/model/Item.js
   trunk/source/model/World.js
   trunk/source/storage/FakeStorage.js
   trunk/source/storage/Storage.js
   trunk/source/util/Util.js
   trunk/source/util/XmlConverter.js
   trunk/source/view/NavbarView.js
   trunk/source/view/SectionView.js
   trunk/tests/TestSuite.html
   trunk/tests/lang/LangTest.js
   trunk/tests/model/ModelTest.js
   trunk/tests/model/TestSuite.html
   trunk/tests/storage/DirectoryReadingTest.js
   trunk/tests/storage/LintTest.js
   trunk/tests/storage/StorageTest.js
   trunk/tests/storage/TestSuite.html
   trunk/tests/util/TestSuite.html
   trunk/tests/util/UtilTest.js
   trunk/tests/uuid/UuidTest.js
Log:
Finished conversion to new data model API.  Refactored data model unit tests.  Added unit tests to check for errant dependencies between packages.  Refactored code in the storage directory (and fixed a bug in directoryList.js).

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/BarChartPlugin.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -117,8 +117,8 @@
 
   var contentItem = null;
   var attribute = null;
-  var listOfEntries;
-  var firstEntry;
+  var listOfValues;
+  var firstValue;
   var attributeUuid;
   var hashTableOfNumericValueIncidenceKeyedByUuid = {};
   var hashTableOfAttributesKeyedByUuid = {};
@@ -132,19 +132,16 @@
       attribute = listOfAttributesForItem[i];
       attributeUuid = attribute.getUuid();
       hashTableOfAttributesKeyedByUuid[attributeUuid] = attribute;
-      listOfEntries = contentItem.getEntriesForAttribute(attribute);
-      if (listOfEntries) {
-        firstEntry = listOfEntries[0];
-        if (firstEntry) {
-          var value = firstEntry.getValue(contentItem);
-          if (dojo.lang.isNumber(value)) {
-            var count = hashTableOfNumericValueIncidenceKeyedByUuid[attributeUuid];
-            if (!count) {
-              count = 0;
-            }
-            count += 1;
-            hashTableOfNumericValueIncidenceKeyedByUuid[attributeUuid] = count;
+      listOfValues = contentItem.getValuesForAttribute(attribute);
+      if (listOfValues.length > 0) {
+        firstValue = listOfValues[0];
+        if (dojo.lang.isNumber(firstValue)) {
+          var count = hashTableOfNumericValueIncidenceKeyedByUuid[attributeUuid];
+          if (!count) {
+            count = 0;
           }
+          count += 1;
+          hashTableOfNumericValueIncidenceKeyedByUuid[attributeUuid] = count;
         }
       }
     }
@@ -166,13 +163,12 @@
     var maxValue = 0;
     for (var jkey in listOfContentItems) {
       contentItem = listOfContentItems[jkey];
-      listOfEntries = contentItem.getEntriesForAttribute(selectedAttribute);
-      if (listOfEntries && listOfEntries[0]) {
-        var nextEntry = listOfEntries[0];
-        var nextValue = nextEntry.getValue();
+      listOfValues = contentItem.getValuesForAttribute(selectedAttribute);
+      if (listOfValues.length > 0) {
+        var nextValue = listOfValues[0];
         if (dojo.lang.isNumber(nextValue)) {
           maxValue = Math.max(maxValue, nextValue);
-        }     
+        }
       }
     }
   }
@@ -196,10 +192,9 @@
     listOfStrings.push("<td class=\"" + orp.view.SectionView.cssClass.PLAIN + "\">" + contentItem.getDisplayName("{no name}") + "</td>");
     var numericValue = 0;
     if (selectedAttribute) {
-      listOfEntries = contentItem.getEntriesForAttribute(selectedAttribute);
-      if (listOfEntries && listOfEntries[0]) {
-        firstEntry = listOfEntries[0];
-        var firstValue = firstEntry.getValue();
+      listOfValues = contentItem.getValuesForAttribute(selectedAttribute);
+      if (listOfValues.length > 0) {
+        firstValue = listOfValues[0];
         if (dojo.lang.isNumber(firstValue)) {
           numericValue = firstValue;
         }

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/TablePlugin.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -409,7 +409,6 @@
     // alertString = "";
     for (var i in this._displayAttributes) {
       var attribute = this._displayAttributes[i];
-      // this._layout.addEntryForAttribute(attributeTableColumns, attribute);
       this._layout.addEntry({attribute:attributeTableColumns, value:attribute});
       // alertString += attribute.getDisplayString() + '\n';
     }
@@ -670,16 +669,21 @@
       var value = listOfFields[j];
       if (value !== "") {
         listOfTypes = hashTableOfTypesKeyedByAttributeUuid[attribute.getUuid()];
-        // value = orp.view.EntryView._transformValueToExpectedType(world, value, listOfTypes);
         value = world.transformValueToExpectedType(value, listOfTypes);
+        var inverseAttribute = attribute.getSingleValueFromAttribute(attributeCalledInverseAttribute);
+        newItem.addEntry({
+          attribute:attribute, 
+          value:value, 
+          inverseAttribute:inverseAttribute });
+/*
         var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
         if (inverseAttributeEntry) {
           var inverseAttribute = inverseAttributeEntry.getValue(attribute);
           newItem.addConnectionEntry(attribute, value, inverseAttribute);
         } else {
-          // newItem.addEntryForAttribute(attribute, value);
           newItem.addEntry({attribute:attribute, value:value});
         }
+*/
       }
     }
   }
@@ -732,12 +736,10 @@
     if (noStoredColumns) {
       for (i in this._displayAttributes) {
         var anAttribute = this._displayAttributes[i];
-        // this._layout.addEntryForAttribute(attributeTableColumns,anAttribute,typeCalledItem);
         this._layout.addEntry({attribute:attributeTableColumns, value:anAttribute, type:typeCalledItem});
       }
     } else {
       if (!removeAttribute) {
-        // this._layout.addEntryForAttribute(attributeTableColumns,changedAttribute,typeCalledItem);
         this._layout.addEntry({attribute:attributeTableColumns, value:changedAttribute, type:typeCalledItem});
       }
     }

Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/archive/DeltaArchive.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -36,8 +36,8 @@
 dojo.require("orp.archive.StubArchive");
 dojo.require("orp.model.World");
 dojo.require("orp.model.Vote");
-dojo.require("orp.storage.FileStorage");
-dojo.require("orp.storage.HttpStorage");
+dojo.require("orp.storage.FileProtocolStorage");
+dojo.require("orp.storage.HttpProtocolStorage");
 dojo.require("orp.lang.Lang");
 dojo.require("orp.archive.JsonSerializer");
 dojo.require("orp.archive.JsonDeserializer");
@@ -153,12 +153,12 @@
   }
   if (window.location) {
     if (window.location.protocol == "http:") {
-      this._saverObject = new orp.storage.HttpStorage(this._repositoryName,
+      this._saverObject = new orp.storage.HttpProtocolStorage(this._repositoryName,
                                                       orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
                                                       this._pathToTrunkDirectory);
     }
     if (window.location.protocol == "file:") {
-      this._saverObject = new orp.storage.FileStorage(this._repositoryName,
+      this._saverObject = new orp.storage.FileProtocolStorage(this._repositoryName,
                                                       orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
                                                       this._pathToTrunkDirectory);
     }
@@ -194,12 +194,12 @@
   if (!this._saverObject) {
     if (window.location) {
       if (window.location.protocol == "http:") {
-        this._saverObject = new orp.storage.HttpStorage(this._repositoryName,
+        this._saverObject = new orp.storage.HttpProtocolStorage(this._repositoryName,
                                                         orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
                                                         this._pathToTrunkDirectory);
       }
       if (window.location.protocol == "file:") {
-        this._saverObject = new orp.storage.FileStorage(this._repositoryName,
+        this._saverObject = new orp.storage.FileProtocolStorage(this._repositoryName,
                                                         orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
                                                         this._pathToTrunkDirectory);
       }

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/model/Item.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -81,15 +81,12 @@
 // Public class constants
 // -------------------------------------------------------------------
 orp.model.Item.NamedParameters = {
-  attribute:      "attribute",
-  value:          "value",
-  type:           "type",
-  previousEntry:  "previousEntry",
-  myAttribute:    "myAttribute",
-  otherItem:      "otherItem",
-  otherAttribute: "otherAttribute"};
+  attribute:        "attribute",
+  value:            "value",
+  type:             "type",
+  previousEntry:    "previousEntry",
+  inverseAttribute: "inverseAttribute"};
 
-
 // -------------------------------------------------------------------
 // Private methods
 // -------------------------------------------------------------------
@@ -121,22 +118,6 @@
 // Entry adding methods
 // -------------------------------------------------------------------
 
-/* PENDING: refactor these methods as per Sept 12 plan:
-// OLD
-item.addConnectionEntry(myAttribute, otherItem, otherAttribute)
-Item.replaceEntryWithConnection(previousEntry, myAttribute, otherItem, otherAttribute)
-
-// NEW
-item.addConnectionEntry({myAttribute:
-                        otherItem:
-                        otherAttribute: })
-
-item.replaceEntryWithConnection({previousEntry: 
-                        myAttribute:
-                        otherItem:
-                        otherAttribute: })
-*/
-
 /**
  * Creates a new entry object and adds the new entry to the item's 
  * list of entries.
@@ -156,26 +137,40 @@
  * </pre>
  * 
  * @scope    public instance method
- * @namedParam    value    The value to initialize the entry to. 
+ * @namedParam    value    The value to initialize the entry to. (Optional if previousEntry is provided.)
  * @namedParam    type    Optional. An item representing a data type.
- * @namedParam    attribute    Optional.  The attribute to assign the entry to. 
+ * @namedParam    attribute    Optional. The attribute to assign the entry to. 
+ * @namedParam    previousEntry    Optional. The old entry to be replaced.
+ * @namedParam    inverseAttribute    Optional. The attribute to use as the inverseAttribute of 'attribute'.
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
 orp.model.Item.prototype.addEntry = function(namedParameters) {
   orp.lang.assert(dojo.lang.isObject(namedParameters));
-  var arg = orp.model.Item.NamedParameters;
-  var value = namedParameters[arg.value];
-  var attribute = namedParameters[arg.attribute];
-  var type = namedParameters[arg.type];
+  var parameters = orp.model.Item.NamedParameters;
+  var value = namedParameters[parameters.value];
+  var attribute = namedParameters[parameters.attribute];
+  var type = namedParameters[parameters.type];
+  var previousEntry = namedParameters[parameters.previousEntry];
+  var inverseAttribute = namedParameters[parameters.inverseAttribute];
   
   // Check for typos in parameter names
-  orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type]));
+  orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, parameters));
   
-  if (!attribute) {
-    attribute = this.getWorld().getAttributeCalledUnfiled();
+  if (previousEntry) {
+    if (!attribute) {
+      attribute = previousEntry.getAttribute();
+    }
+    if (dojo.lang.isUndefined(value)) {
+      value = previousEntry.getValue();
+    }
+  } else {
+    if (!attribute) {
+      attribute = this.getWorld().getAttributeCalledUnfiled();
+    }
   }
-  return this._createNewEntry(null, attribute, value, type);
+
+  return this._createNewEntry(previousEntry, attribute, value, type, inverseAttribute);
 };
  
 
@@ -185,15 +180,15 @@
  * Examples:
  * <pre>
  *    var entry = item.addEntry({value: "green"});
- *    entry = item.replaceEntry({previousEntry: entry, value: "green"});
- *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "green"});
+ *    entry = item.replaceEntry({previousEntry: entry, value: "blue"});
+ *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "blue"});
  *    var textType = world.getTypeCalledText();
- *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "green", type: textType});
+ *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "blue", type: textType});
  * </pre>
  * 
  * @scope    public instance method
  * @namedParam    previousEntry    The old entry to be replaced.
- * @namedParam    value    The value to initialize the entry to. 
+ * @namedParam    value    Optional. The value to initialize the entry to. 
  * @namedParam    type    Optional. An item representing a data type.
  * @namedParam    attribute    Optional.  The attribute to assign the entry to. 
  * @return   The new replacement entry object.
@@ -201,25 +196,10 @@
  */
 orp.model.Item.prototype.replaceEntry = function(namedParameters) {
   orp.lang.assert(dojo.lang.isObject(namedParameters));
-  var arg = orp.model.Item.NamedParameters;
-  var value = namedParameters[arg.value];
-  var attribute = namedParameters[arg.attribute];
-  var type = namedParameters[arg.type];
-  var previousEntry = namedParameters[arg.previousEntry];
+  var previousEntry = namedParameters[orp.model.Item.NamedParameters.previousEntry];
 
-  // Check for typos in parameter names
-  orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type, arg.previousEntry]));
-  
   orp.lang.assert(dojo.lang.isObject(previousEntry));
-  if (!attribute) {
-    var FIXME_OCT_7_2005_EXPERIMENT = true;
-    if (FIXME_OCT_7_2005_EXPERIMENT) {
-      attribute = previousEntry.getAttribute();
-    } else {
-      attribute = previousEntry.getAttributeForItem(this);
-    }
-  }
-  return this._createNewEntry(previousEntry, attribute, value, type);
+  return this.addEntry(namedParameters);
 };
 
 
@@ -231,18 +211,46 @@
  * @param    attribute    The attribute to assign the entry to. 
  * @param    value    The value to initialize the new entry to.
  * @param    type    Optional. An item representing a data type.
+ * @param    inverseAttribute    Optional. The attribute to use as the inverseAttribute of 'attribute'.
  * @scope    private instance method
  */
-orp.model.Item.prototype._createNewEntry = function(previousEntry, attribute, value, type) {
-
-  // If we've just been asked to replace the string "Foo" with the string "Foo",
-  // then don't even bother creating a new entry. 
-  if (previousEntry) {
-    var oldValue = previousEntry.getValue();
-    var oldAttribute = previousEntry.getAttribute();
-    if ((oldValue == value) && (oldAttribute == attribute)) {
-      return null;
+orp.model.Item.prototype._createNewEntry = function(previousEntry, attribute, value, type, inverseAttribute) {
+  var newEntry;
+  
+  if (inverseAttribute) {
+    var otherItem = value;
+    var myAttribute = attribute;
+    var otherAttribute = inverseAttribute;
+    
+    orp.lang.assert(otherItem instanceof orp.model.Item);
+    orp.lang.assert(myAttribute instanceof orp.model.Item);
+  
+    // If we've just been asked to replace the string "Foo" with the string "Foo",
+    // then don't even bother creating a new entry. 
+    if (previousEntry) {
+      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
+        var oldItem = previousEntry.getItem();
+        var oldAttribute = previousEntry.getAttribute();
+        var oldValue = previousEntry.getValue();
+        var oldInverseAttribute = previousEntry.getInverseAttribute();
+        if (((oldAttribute == myAttribute) &&  (oldInverseAttribute == otherAttribute) &&
+          oldItem == this && oldValue == otherItem) ||
+          ((oldInverseAttribute == myAttribute) &&  (oldAttribute == otherAttribute) &&
+          oldValue == this && oldItem == otherItem)) {
+          return null;
+        }
+      }
     }
+  } else {
+    // If we've just been asked to replace the string "Foo" with the string "Foo",
+    // then don't even bother creating a new entry. 
+    if (previousEntry) {
+      oldValue = previousEntry.getValue();
+      oldAttribute = previousEntry.getAttribute();
+      if ((oldValue == value) && (oldAttribute == attribute)) {
+        return null;
+      }
+    }
   }
   
   this.getWorld().beginTransaction();
@@ -250,11 +258,31 @@
     this._provisionalFlag = false;
     this.getWorld()._provisionalItemJustBecameReal(this);
   }
-  
-  var entry = this.getWorld()._newEntry(this, previousEntry, attribute, value, type);
+  if (inverseAttribute) {
+    if (otherItem._provisionalFlag) {
+      otherItem._provisionalFlag = false;
+      this.getWorld()._provisionalItemJustBecameReal(otherItem);
+    }
+    if (!otherAttribute) {
+      otherAttribute = this.getWorld().getAttributeCalledUnfiled();
+    }
+    newEntry = this.getWorld()._newConnectionEntry(previousEntry, this, myAttribute, otherItem, otherAttribute);
+  } else {
+    newEntry = this.getWorld()._newEntry(this, previousEntry, attribute, value, type);
+  }
   this.getWorld().endTransaction();
   this._noteChanges(null);
-  return entry;
+  if (inverseAttribute) {
+    otherItem._noteChanges(null);
+    if (previousEntry) {
+      previousEntry.getItem()._noteChanges(null);
+      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
+        previousEntry.getValue()._noteChanges(null);
+      }
+    }
+  }
+  
+  return newEntry;
 };
 
 
@@ -278,7 +306,8 @@
  * @throws   Throws an Error if no user is logged in.
  */
 orp.model.Item.prototype.addConnectionEntry = function(myAttribute, otherItem, otherAttribute) {
-  return this.replaceEntryWithConnection(null, myAttribute, otherItem, otherAttribute);
+  var typeCalledConnection = this.getWorld().getTypeCalledConnection();
+  return this._createNewEntry(null, myAttribute, otherItem, typeCalledConnection, otherAttribute);
 };
 
 
@@ -286,79 +315,8 @@
  *
  */
 orp.model.Item.prototype.replaceEntryWithConnection = function(previousEntry, myAttribute, otherItem, otherAttribute) {
-  orp.lang.assert(otherItem instanceof orp.model.Item);
-  orp.lang.assert(myAttribute instanceof orp.model.Item);
-
-  // If we've just been asked to replace the string "Foo" with the string "Foo",
-  // then don't even bother creating a new entry. 
-  if (previousEntry) {
-    var FIXME_OCT_7_2005_EXPERIMENT = true;
-    if (FIXME_OCT_7_2005_EXPERIMENT) {
-      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
-        var oldItem = previousEntry.getItem();
-        var oldAttribute = previousEntry.getAttribute();
-        var oldValue = previousEntry.getValue();
-        var oldInverseAttribute = previousEntry.getInverseAttribute();
-        if (((oldAttribute == myAttribute) &&  (oldInverseAttribute == otherAttribute) &&
-          oldItem == this && oldValue == otherItem) ||
-          ((oldInverseAttribute == myAttribute) &&  (oldAttribute == otherAttribute) &&
-          oldValue == this && oldItem == otherItem)) {
-          return null;
-        }
-      }
-    } else {
-      // var oldValue = previousEntry.getValue(this);
-      var oldPairOfAttributes = previousEntry.getAttribute();
-      var oldPairOfItems = previousEntry.getItem();
-      if (dojo.lang.isArray(oldPairOfAttributes)) {
-        orp.lang.assert(oldPairOfAttributes.length == 2);
-        orp.lang.assert(oldPairOfItems.length == 2);
-        if (((oldPairOfAttributes[0] == myAttribute) &&  (oldPairOfAttributes[1] == otherAttribute) &&
-          oldPairOfItems[0] == this && oldPairOfItems[1] == otherItem) ||
-          ((oldPairOfAttributes[1] == myAttribute) &&  (oldPairOfAttributes[0] == otherAttribute) &&
-          oldPairOfItems[1] == this && oldPairOfItems[0] == otherItem)) {
-          return null;
-        }
-      }
-    }
-  }
-
-  this.getWorld().beginTransaction();
-  if (this._provisionalFlag) {
-    this._provisionalFlag = false;
-    this.getWorld()._provisionalItemJustBecameReal(this);
-  }
-  if (otherItem._provisionalFlag) {
-    otherItem._provisionalFlag = false;
-    this.getWorld()._provisionalItemJustBecameReal(otherItem);
-  }
-  if (!otherAttribute) {
-    otherAttribute = this.getWorld().getAttributeCalledUnfiled();
-  }
-
-  var entry = this.getWorld()._newConnectionEntry(previousEntry, this, myAttribute, otherItem, otherAttribute);
-  this.getWorld().endTransaction();
-  this._noteChanges(null);
-  otherItem._noteChanges(null);
-  if (previousEntry) {
-    FIXME_OCT_7_2005_EXPERIMENT = true;
-    if (FIXME_OCT_7_2005_EXPERIMENT) {
-      previousEntry.getItem()._noteChanges(null);
-      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
-        previousEntry.getValue()._noteChanges(null);
-      }
-    } else {
-      var oldItemOrPairOfItems = previousEntry.getItem();
-      if (oldItemOrPairOfItems instanceof orp.model.Item) {
-        oldItemOrPairOfItems._noteChanges(null);
-      }
-      if (dojo.lang.isArray(oldItemOrPairOfItems)) {
-        oldItemOrPairOfItems[0]._noteChanges(null);
-        oldItemOrPairOfItems[1]._noteChanges(null);
-      }
-    }
-  }
-  return entry;  
+  var typeCalledConnection = this.getWorld().getTypeCalledConnection();
+  return this._createNewEntry(previousEntry, myAttribute, otherItem, typeCalledConnection, otherAttribute);
 };
 
 
@@ -378,24 +336,44 @@
 // -------------------------------------------------------------------
 // Accessor methods where the answer depends on the retrieval filter
 // -------------------------------------------------------------------
-/* PENDING: add this API
 
-var entries = item.getValuesForAttribute(height);
-for (var i in values) {
-  var value = value[i];
-  // display value on screen
-}
+/**
+ * Given an attribute, this method returns the list of all the values that 
+ * have been assigned to that attribute for this item.
+ *
+ * For example, to find out what color Kermit is: 
+ * <pre>
+ * var listOfValues = kermit.getValuesForAttribute(color);
+ * for (var i in listOfValues) {
+ *   var value = listOfValues[i];
+ *   alert("Kermit is " + value);
+ * }
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    attribute    An attribute that we want to know the value of. 
+ * @return   A list of value objects (may include strings, numbers, Items, Dates, etc.)
 */
+orp.model.Item.prototype.getValuesForAttribute = function(attribute) {
+  var listOfEntries = this.getEntriesForAttribute(attribute);
+  var listOfValues = [];
+  for (var i in listOfEntries) {
+    var entry = listOfEntries[i];
+    listOfValues.push(entry.getValue());
+  }
+  return listOfValues;
+};
 
+
 /**
  * Given an attribute, this method returns the list of all the entries that 
  * have been assigned to that attribute for this item.
  *
  * For example, to find out what color Kermit is: 
  * <pre>
- *    var entryList = kermit.getEntriesForAttribute(color);
- *    for (var i = 0; i < entryList.length; ++i) {
- *      alert("Kermit is " + entryList[i].getDisplayString());
+ *    var listOfEntries = kermit.getEntriesForAttribute(color);
+ *    for (var i in listOfEntries) {
+ *      alert("Kermit is " + listOfEntries[i].getDisplayString());
  *    }
  * </pre>
  *
@@ -500,20 +478,12 @@
 /**
  *
  */
-orp.model.Item.prototype.getFirstCategory = function() {
-  if (this._cachedFirstCategory !== null) {
-    return this._cachedFirstCategory;
-  } else {
+orp.model.Item.prototype.getFirstCategory = function() { 
+  if (!this._cachedFirstCategory) {
     var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
-    var listOfCategoryEntries = this.getEntriesForAttribute(attributeCalledCategory);
-    var returnEntry = null;
-    if (listOfCategoryEntries && listOfCategoryEntries.length > 0) {
-      var firstEntry = listOfCategoryEntries[0];
-      var returnCategory = firstEntry.getValue(this);
-    }
-    this._cachedFirstCategory = returnCategory;
-    return returnCategory;
+    this._cachedFirstCategory = this.getSingleValueFromAttribute(attributeCalledCategory);
   }
+  return this._cachedFirstCategory;
 };
 
 // -------------------------------------------------------------------
@@ -626,6 +596,22 @@
 
 
 /**
+ * Returns just the first entry of an item's attribute.
+ *
+ * @scope    public instance method
+ * @param    attribute    An item representing an attribute. 
+ * @return   A string with a description of the item.
+ */
+orp.model.Item.prototype.getSingleValueFromAttribute = function(attribute) {
+  var listOfEntries = this.getEntriesForAttribute(attribute);
+  if (listOfEntries[0]) {
+    return listOfEntries[0].getValue();
+  }
+  return null;
+};
+
+
+/**
  * Returns just the first entry's display string of an item's attribute.
  *
  * @scope    public instance method
@@ -648,9 +634,9 @@
 orp.model.Item.prototype.toString = function() {
   var returnString = "[Item #" + this.getUuid() + " ";
   var attributeCategory = this.getWorld().getAttributeCalledCategory();
-  var listOfCategories = this.getEntriesForAttribute(attributeCategory);
-  for (var key in listOfCategories) {
-    var category = listOfCategories[key];
+  var listOfCategories = this.getValuesForAttribute(attributeCategory);
+  for (var i in listOfCategories) {
+    var category = listOfCategories[i];
     if (category instanceof orp.model.Item) {
       returnString += "(" + category.getDisplayString() + ")";
     }
@@ -668,18 +654,14 @@
  * Does this item have an attribute with a particular entry?
  * Used in getting query results
  *
- * @scope public instance method
- * @return Boolean. True if this item has an attribute with the entry
+ * @scope   public instance method
+ * @return   Boolean. True if this item has an attribute with the entry
  */
 orp.model.Item.prototype.hasAttributeValue = function(attribute, value) {
   orp.lang.assert(attribute instanceof orp.model.Item);
-  var entryList = this.getEntriesForAttribute(attribute);
-
-  // look at all the entries this item's attribute is assigned to, 
-  // and see if one of them is "inEntry"
-  for (var i in entryList) {
-    var entry = entryList[i];
-    if (entry.getValue(this) == value) {
+  var listOfValues = this.getValuesForAttribute(attribute);
+  for (var i in listOfValues) {
+    if (listOfValues[i] == value) {
       return true;
     }
   }

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/model/World.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -760,8 +760,7 @@
         matchingEntry = matchingEntryOrListOfEntries[key];
         item.addEntry({attribute:attributeCalledQueryMatchingValue, value:matchingEntry});
       }
-    }
-    else {
+    } else {
       matchingEntry = matchingEntryOrListOfEntries;
       item.addEntry({attribute:attributeCalledQueryMatchingValue, value:matchingEntry});
     }
@@ -1002,7 +1001,6 @@
   var listOfSuggestedItems = [];
   var key;
   var categoryCalledCategory = this.getCategoryCalledCategory();
-  // var attributeCalledCategory = this.getAttributeCalledCategory();
   var attributeCalledExpectedType = this.getAttributeCalledExpectedType();
   var listOfExpectedTypeEntries = attribute.getEntriesForAttribute(attributeCalledExpectedType);
   var listOfCategories = [];

Modified: trunk/source/storage/FakeStorage.js
===================================================================
--- trunk/source/storage/FakeStorage.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/storage/FakeStorage.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -41,7 +41,7 @@
 // -------------------------------------------------------------------
 /**
  * The Storage class is the abstract superclass for the other storage 
- * classes, including FileStorage and HttpStorage.
+ * classes, including FileProtocolStorage and HttpProtocolStorage.
  *
  * @param    repositoryName                         // e.g. demo_page
  * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.

Copied: trunk/source/storage/FileProtocolStorage.js (from rev 367, trunk/source/storage/FileStorage.js)
===================================================================
--- trunk/source/storage/FileStorage.js	2005-10-25 03:17:18 UTC (rev 367)
+++ trunk/source/storage/FileProtocolStorage.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,219 @@
+/*****************************************************************************
+ FileProtocolStorage.js
+ 
+******************************************************************************
+ The code in this file is a heavily modified version of code that was copied
+ from the TiddlyWiki and GTDTiddlyWiki code base.
+ 
+ The original code is Copyright (c) Osmosoft Limited.  The original copyright 
+ notice is included below, along with the license conditions and disclaimer.  
+ 
+ OpenRecord modifications by Brian Douglas Skinner <brian.skinner at gumption.org>
+
+ For the OpenRecord modifications, the Copyright rights are relinquished under  
+ the Creative Commons Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+
+******************************************************************************
+TiddlyWiki 1.2.6 by Jeremy Ruston, (jeremy [at] osmosoft [dot] com)
+Incorporating improvements by Isao Sonobe, http://www-gauge.scphys.kyoto-u.ac.jp/~sonobe/OgreKit/OgreKitWiki.html
+GTDTiddlyWiki modification by Nathan Bowers, (wiki [at] snapgrid [dot] com)
+Safari Compatability by Jonathan Paisley at http://www.dcs.gla.ac.uk/~jp/
+
+Copyright (c) Osmosoft Limited, 14 April 2005
+
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer.
+
+Redistributions in binary form must reproduce the above copyright notice, this
+list of conditions and the following disclaimer in the documentation and/or other
+materials provided with the distribution.
+
+Neither the name of the Osmosoft Limited nor the names of its contributors may be
+used to endorse or promote products derived from this software without specific
+prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGE.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.FileProtocolStorage");
+dojo.require("orp.storage.Storage");
+dojo.require("orp.storage.fileProtocolUtil");
+dojo.require("orp.lang.Lang");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The FileProtocolStorage class knows how to save text to a local file.
+ *
+ * @param    repositoryName                 // e.g. demo_page
+ * @param    pathToTrunkDirectory           // Not needed if window.location.pathname is in the trunk directory.
+ * @scope    public instance constructor
+ */
+orp.storage.FileProtocolStorage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectory) {
+  orp.storage.Storage.call(this, repositoryName, repositoryDirectoryName, pathToTrunkDirectory);
+  
+  // Step 1: Build the fileUrl
+  // 
+  // Our saveTextToFile() method needs a fileUrl that looks like this:
+  //   fileUrl = "K:\\www\\htdocs\\openrecord\\demo\\current\\trunk\\repositories\\demo_page.json";
+  // 
+  // We start with a value in this.getRepositoryName() that looks like this:
+  //   this.getRepositoryName() == "demo_page"
+
+  // URLs like these don't work:
+  //   fileUrl = "repositories/demo_page.json";
+  //   fileUrl = "repositories\\demo_page.json";
+  //   fileUrl = "\\repositories\\demo_page.json";
+  //   fileUrl = "K:/www/htdocs/openrecord/demo/current/trunk/repositories/demo_page.json";
+
+  var listOfAdditions = [];
+  if (pathToTrunkDirectory && pathToTrunkDirectory !== "") {
+    listOfAdditions.push(pathToTrunkDirectory);
+  }
+  listOfAdditions.push(this._repositoryDirectoryName);
+  listOfAdditions.push(this.getRepositoryName() + ".json");
+  this._fileUrl = orp.storage.getLocalPathFromWindowLocation(listOfAdditions);
+};
+
+dojo.inherits(orp.storage.FileProtocolStorage, orp.storage.Storage);  // makes FileProtocolStorage be a subclass of Storage
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Appends text to a file.
+ *
+ * @scope    public instance method
+ */
+orp.storage.FileProtocolStorage.prototype.appendText = function(textToAppend) {
+  var append = true;
+  this._saveTextToFile(textToAppend, this._fileUrl, append);
+};
+
+
+/**
+ * Writes text to a file, completely replacing the contents of the file.
+ *
+ * @scope    public instance method
+ */
+orp.storage.FileProtocolStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  var append = false;
+  this._saveTextToFile(textToWrite, this._fileUrl, append);
+};
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Save the text to the file at the given URL.
+ *
+ * @scope    private instance method
+ * @return   Returns true if the text was saved.
+ */
+orp.storage.FileProtocolStorage.prototype._saveTextToFile = function(text, fileUrl, append) {
+  // Make sure we were loaded from a "file:" URL
+  if (window.location.protocol != "file:") {
+    orp.lang.assert(false, 'FileProtocolStorage.js can only be used for pages loaded from a "file:///" location');
+  }
+
+  var success = this._mozillaSaveToFile(text, fileUrl, append);
+  if (!success) {
+    success = this._ieSaveToFile(text, fileUrl, append);
+  }
+  return(success);
+};
+
+
+/**
+ * Save the text to the file at the given filePath.
+ *
+ * @scope    private instance method
+ * @return   Returns true if the text was saved, false if there was an error, or null if we couldn't even try.
+ */
+orp.storage.FileProtocolStorage.prototype._mozillaSaveToFile = function(text, filePath, append) {
+  if (window.Components) {
+    try {
+      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+      var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
+      file.initWithPath(filePath);
+      if (!file.exists()) {
+        // Not all JavaScript implementations  support octal literals,
+        // so it's not safe to use '0664' here:
+        //   file.create(0, 0664);
+        //   file.permissions = 0664; // Because create ignores the permissions argument, at least on Mignon's Mac.
+        file.create(0, 0x1B4);
+        file.permissions = 0x1B4; // Because create ignores the permissions argument, at least on Mignon's Mac.
+      }
+      var outputStream = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
+      if (append) {
+        outputStream.init(file, 0x10 | 0x02, 0x0004, null);
+      } else {
+        outputStream.init(file, 0x20 | 0x02, 0x0004, null);
+      }
+      outputStream.write(text, text.length);
+      outputStream.flush();
+      outputStream.close();
+      return true;
+    } catch(exception) {
+      alert("Exception while attempting to save\n\n" + exception);
+      return false;
+    }
+  } else {
+    alert("window.Components == null");
+  }
+  return null;
+};
+
+
+/**
+ * Save the text to the file at the given filePath.
+ *
+ * @scope    private instance method
+ * @return   Returns true if the text was saved, or false if there was an error.
+ */
+orp.storage.FileProtocolStorage.prototype._ieSaveToFile = function(text, filePath, append) {
+  try {
+    var fileSystemObject = new ActiveXObject("Scripting.FileSystemObject");
+  } catch(exception) {
+    alert("Exception while attempting to save\n\n" + exception.toString());
+    return false;
+  }
+  if (append) {
+    orp.lang.assert(false, "FIXME: still need to write code for this");
+  } else {
+    var file = fileSystemObject.OpenTextFile(filePath, 2, -1, 0);
+  }
+  file.Write(text);
+  file.Close();
+  return true;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Deleted: trunk/source/storage/FileStorage.js
===================================================================
--- trunk/source/storage/FileStorage.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/storage/FileStorage.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -1,310 +0,0 @@
-/*****************************************************************************
- FileStorage.js
- 
-******************************************************************************
- The code in this file is a heavily modified version of code that was copied
- from the TiddlyWiki and GTDTiddlyWiki code base.
- 
- The original code is Copyright (c) Osmosoft Limited.  The original copyright 
- notice is included below, along with the license conditions and disclaimer.  
- 
- OpenRecord modifications by Brian Douglas Skinner <brian.skinner at gumption.org>
-
- For the OpenRecord modifications, the Copyright rights are relinquished under  
- the Creative Commons Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-
-******************************************************************************
-TiddlyWiki 1.2.6 by Jeremy Ruston, (jeremy [at] osmosoft [dot] com)
-Incorporating improvements by Isao Sonobe, http://www-gauge.scphys.kyoto-u.ac.jp/~sonobe/OgreKit/OgreKitWiki.html
-GTDTiddlyWiki modification by Nathan Bowers, (wiki [at] snapgrid [dot] com)
-Safari Compatability by Jonathan Paisley at http://www.dcs.gla.ac.uk/~jp/
-
-Copyright (c) Osmosoft Limited, 14 April 2005
-
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without modification,
-are permitted provided that the following conditions are met:
-
-Redistributions of source code must retain the above copyright notice, this
-list of conditions and the following disclaimer.
-
-Redistributions in binary form must reproduce the above copyright notice, this
-list of conditions and the following disclaimer in the documentation and/or other
-materials provided with the distribution.
-
-Neither the name of the Osmosoft Limited nor the names of its contributors may be
-used to endorse or promote products derived from this software without specific
-prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
-EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
-TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
-BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
-DAMAGE.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.storage.FileStorage");
-dojo.require("orp.storage.Storage");
-dojo.require("orp.lang.Lang");
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-/**
- * The FileStorage class knows how to save text to a local file.
- *
- * @param    repositoryName                 // e.g. demo_page
- * @param    pathToTrunkDirectory           // Not needed if window.location.pathname is in the trunk directory.
- * @scope    public instance constructor
- */
-orp.storage.FileStorage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectory) {
-  orp.storage.Storage.call(this, repositoryName, repositoryDirectoryName, pathToTrunkDirectory);
-  
-  // Step 1: Build the fileUrl
-  // 
-  // Our saveTextToFile() method needs a fileUrl that looks like this:
-  //   fileUrl = "K:\\www\\htdocs\\openrecord\\demo\\current\\trunk\\repositories\\demo_page.json";
-  // 
-  // We start with a value in this.getRepositoryName() that looks like this:
-  //   this.getRepositoryName() == "demo_page"
-
-  // URLs like these don't work:
-  //   fileUrl = "repositories/demo_page.json";
-  //   fileUrl = "repositories\\demo_page.json";
-  //   fileUrl = "\\repositories\\demo_page.json";
-  //   fileUrl = "K:/www/htdocs/openrecord/demo/current/trunk/repositories/demo_page.json";
-
-  var listOfAdditions = [];
-  if (pathToTrunkDirectory && pathToTrunkDirectory !== "") {
-    listOfAdditions.push(pathToTrunkDirectory);
-  }
-  listOfAdditions.push(this._repositoryDirectoryName);
-  listOfAdditions.push(this.getRepositoryName() + ".json");
-  this._fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
-};
-
-dojo.inherits(orp.storage.FileStorage, orp.storage.Storage);  // makes FileStorage be a subclass of Storage
-
-
-// -------------------------------------------------------------------
-// Public methods
-// -------------------------------------------------------------------
-
-/**
- * Appends text to a file.
- *
- * @scope    public instance method
- */
-orp.storage.FileStorage.prototype.appendText = function(textToAppend) {
-  var append = true;
-  this._saveTextToFile(textToAppend, this._fileUrl, append);
-};
-
-
-/**
- * Writes text to a file, completely replacing the contents of the file.
- *
- * @scope    public instance method
- */
-orp.storage.FileStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
-  var append = false;
-  this._saveTextToFile(textToWrite, this._fileUrl, append);
-};
-
-
-// -------------------------------------------------------------------
-// Private methods
-// -------------------------------------------------------------------
-
-/**
- * Save the text to the file at the given URL.
- *
- * @scope    private instance method
- * @return   Returns true if the text was saved.
- */
-orp.storage.FileStorage.prototype._saveTextToFile = function(text, fileUrl, append) {
-  // Make sure we were loaded from a "file:" URL
-  if (window.location.protocol != "file:") {
-    orp.lang.assert(false, 'FileStorage.js can only be used for pages loaded from a "file:///" location');
-  }
-
-  var success = this._mozillaSaveToFile(text, fileUrl, append);
-  if (!success) {
-    success = this._ieSaveToFile(text, fileUrl, append);
-  }
-  return(success);
-};
-
-
-/**
- * Save the text to the file at the given filePath.
- *
- * @scope    private instance method
- * @return   Returns true if the text was saved, false if there was an error, or null if we couldn't even try.
- */
-orp.storage.FileStorage.prototype._mozillaSaveToFile = function(text, filePath, append) {
-  if (window.Components) {
-    try {
-      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
-      var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
-      file.initWithPath(filePath);
-      if (!file.exists()) {
-        // Not all JavaScript implementations  support octal literals,
-        // so it's not safe to use '0664' here:
-        //   file.create(0, 0664);
-        //   file.permissions = 0664; // Because create ignores the permissions argument, at least on Mignon's Mac.
-        file.create(0, 0x1B4);
-        file.permissions = 0x1B4; // Because create ignores the permissions argument, at least on Mignon's Mac.
-      }
-      var outputStream = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
-      if (append) {
-        outputStream.init(file, 0x10 | 0x02, 0x0004, null);
-      } else {
-        outputStream.init(file, 0x20 | 0x02, 0x0004, null);
-      }
-      outputStream.write(text, text.length);
-      outputStream.flush();
-      outputStream.close();
-      return true;
-    }
-    catch(exception) {
-      alert("Exception while attempting to save\n\n" + exception);
-      return false;
-    }
-  } else {
-    alert("window.Components == null");
-  }
-  return null;
-};
-
-
-/**
- * Save the text to the file at the given filePath.
- *
- * @scope    private instance method
- * @return   Returns true if the text was saved, or false if there was an error.
- */
-orp.storage.FileStorage.prototype._ieSaveToFile = function(text, filePath, append) {
-  try {
-    var fileSystemObject = new ActiveXObject("Scripting.FileSystemObject");
-  }
-  catch(exception) {
-    alert("Exception while attempting to save\n\n" + exception.toString());
-    return false;
-  }
-  if (append) {
-    orp.lang.assert(false, "PENDING: still need to write code for this");
-  } else {
-    var file = fileSystemObject.OpenTextFile(filePath, 2, -1, 0);
-  }
-  file.Write(text);
-  file.Close();
-  return true;
-};
-
-
-/**
- * This method looks at the URL value in the window.location property,
- * strips the filename off the end, appends any given path elements,
- * converts the whole thing to a format that is compatible with the 
- * local file system, and returns the new local path.
- *
- * @scope    private instance method
- * @return   Returns a full local pathname.
- */
-orp.storage.FileStorage.prototype._getLocalPathFromWindowLocation = function(listOfAdditions) {
-  // Example location:
-  //   location.href     == file:///D:/amy/openrecord/foo.html#bar
-  //   location.protocol == file:
-  //   location.pathname ==        /D:/amy/openrecord/foo.html
-  //   location.hash     ==                                   #bar
-
-  // Get the URL of the document
-  var pathname = window.location.pathname;
-  
-  
-  // Step 1: Make the requested additions to the pathname
-  var arrayOfParts = pathname.split('/');
-  arrayOfParts.pop();  // get rid of the final "/foo.html" part
-  for (var i in listOfAdditions) {
-    var additionalPart = listOfAdditions[i];
-    arrayOfParts.push(additionalPart);
-  }
-  pathname = arrayOfParts.join('/');
-
-  
-  // Step 2: Figure out what type of URL we're working with
-  // Constants
-  var PathType = {
-    LOCAL_PC:        "LOCAL_PC",          // "file:///x:/path/path..." 
-    LOCAL_UNIX_MAC:  "LOCAL_UNIX_MAC",    // "file:///path/path..."
-    NETWORK_PC:      "NETWORK_PC",        // "file://server/share/path/path..."
-    NETWORK_FIREFOX: "NETWORK_FIREFOX" }; // "file://///server/share/path/path..."
-  // "file:///x:/path/path..."             == PathType.LOCAL_PC        --> "x:\path\path..."
-  // "file:///path/path..."                == PathType.LOCAL_UNIX_MAC  --> "/path/path..."
-  // "file://server/share/path/path..."    == PathType.NETWORK_PC      --> "\\server\share\path\path..."
-  // "file://///server/share/path/path..." == PathType.NETWORK_FIREFOX --> "\\server\share\path\path..."
-
-  var pathType = null;
-  if (pathname.charAt(2) == ":") {
-    pathType = PathType.LOCAL_PC;
-  } else if (pathname.indexOf("///") === 0) {
-    pathType = PathType.NETWORK_FIREFOX;
-  } else if (pathname.indexOf("/") === 0) {
-    pathType = PathType.LOCAL_UNIX_MAC;
-  } else {
-    pathType = PathType.NETWORK_PC;
-  }
-
-
-  // Step 3: Convert the URL to a file path
-  var localPath = pathname;
-  switch (pathType) {
-    case PathType.LOCAL_PC:
-      // example: "/x:/path/path..."
-      localPath = localPath.substring(1);  // get rid of initial '/'
-      localPath = unescape(localPath);
-      localPath = localPath.replace(new RegExp("/","g"),"\\");
-      // result: "x:\path\path..."
-      break;
-    case PathType.LOCAL_UNIX_MAC:         
-    // example: "/path/path..."
-      localPath = unescape(localPath);
-      // result: "/path/path..."
-      break;
-    case PathType.NETWORK_FIREFOX:
-      // example: "///server/share/path/path..."
-      localPath = localPath.substring(3);  // get rid of initial '///'
-      localPath = unescape(localPath);
-      localPath = localPath.replace(new RegExp("/","g"),"\\");
-      localPath = "\\\\" + localPath;      
-      // result: "\\server\share\path\path..."
-      break;
-    case PathType.NETWORK_PC:
-      // example: "server/share/path/path..."
-      localPath = unescape(localPath);
-      localPath = localPath.replace(new RegExp("/","g"),"\\");
-      localPath = "\\\\" + localPath;      
-      // result: "\\server\share\path\path..."
-      break;
-  }
-
-  return localPath;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/storage/FileSystem.js
===================================================================
--- trunk/source/storage/FileSystem.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/storage/FileSystem.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -1,131 +0,0 @@
-/*****************************************************************************
- FileSystem.js
- 
-******************************************************************************
- Written in 2005 by Mignon Belongie
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-dojo.provide("orp.storage.FileSystem");
-dojo.require("orp.storage.Storage");
-
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-/*global window, document  */
-// -------------------------------------------------------------------
-
-/**
- * @scope    public function
- * @param    dirNameRelativeToWindowLocation
- * @param    suffix                                   // if null or undefined, all files will be listed
- * @return   an array of the files in the directory
- * @throws   Throws an Error if directory doesn't exist, isn't a directory, or can't be read.
- */
-orp.storage.getDirList = function(dirNameRelativeToWindowLocation, suffix) {
-  var dirList = [];
-  var thisUrl = window.location.pathname; // e.g .../someDirectory/currentWindow.html
-  var arrayOfPathComponents = thisUrl.split('/');
-  arrayOfPathComponents.pop();
-  var thisDirectory = arrayOfPathComponents.join('/'); // e.g .../someDirectory
-  if (window.location.protocol == "http:") {
-    var response = this._getDirListFromPhp(thisDirectory, dirNameRelativeToWindowLocation, suffix);
-    if (response[0] != '[') { // i.e. get_list_of_files_in_dir.php returned a message instead of an array
-      throw new Error(response);
-    }
-    eval("dirList = " + response);
-  }
-  else {
-    if (window.Components) {
-      dirList = this._getDirListFromMozillaComponent(thisDirectory, dirNameRelativeToWindowLocation, suffix);
-    }
-    else {
-      throw new Error("window.Components == null");
-    }
-  }
-  return dirList;
-};
-
-// FIXME: This hack should be replaced by something better, perhaps using dojo.hostenv.getBaseScriptUri().
-orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION = null;
-orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY = null;
-
-orp.storage._getDirListFromPhp = function(thisDirectory, dirNameRelativeToWindowLocation, suffix) {
-  var newXMLHttpRequestObject = new XMLHttpRequest();
-  var pathToTrunkFromPhpFile = "../..";
-  
-  var dirNameRelativeToPhpFile = pathToTrunkFromPhpFile + '/';
-  if (orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY) {
-    dirNameRelativeToPhpFile += orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY + '/';
-  }
-  dirNameRelativeToPhpFile += dirNameRelativeToWindowLocation;
-  
-  var pathToPhpDirectoryFromWindowLocation = "";
-  if (orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION) {
-    pathToPhpDirectoryFromWindowLocation += orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION + '/';
-  }
-  pathToPhpDirectoryFromWindowLocation += orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK + '/';
-
-  var pathToPhpFileFromWindowLocation = pathToPhpDirectoryFromWindowLocation + "get_list_of_files_in_dir.php";
-  var url = thisDirectory + '/' + pathToPhpFileFromWindowLocation + 
-            "?dir=" + dirNameRelativeToPhpFile;
-  if (suffix) {
-    url += "&suffix=" + suffix;
-  }
-  newXMLHttpRequestObject.open("GET", url, false);
-  newXMLHttpRequestObject.send(null);
-  return newXMLHttpRequestObject.responseText;
-};
-
-orp.storage._getDirListFromMozillaComponent = function(thisDirectory, dirNameRelativeToWindowLocation, suffix) {
-  var dirList = [];
-  netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
-  var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
-  var dirPath = thisDirectory + "/" + dirNameRelativeToWindowLocation;
-  file.initWithPath(dirPath);
-  if (!file.exists()) {
-    throw new Error(dirPath + " not found.");
-  }
-  if (!file.isDirectory()) {
-    throw new Error(dirPath + " is not a directory.");
-  }
-  // file is the given directory (nsIFile)
-  var entries = file.directoryEntries;
-  while(entries.hasMoreElements()) {
-    var entry = entries.getNext();
-    entry.QueryInterface(Components.interfaces.nsIFile);
-    if (suffix) {
-      var parts = entry.leafName.split('.');
-      if (parts.length != 2 || parts[1] != suffix) {
-        continue;
-      }
-    }
-    dirList.push(entry.leafName); // could be entry.path instead, if needed...
-  }
-  return dirList;
-};
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Copied: trunk/source/storage/HttpProtocolStorage.js (from rev 367, trunk/source/storage/HttpStorage.js)
===================================================================
--- trunk/source/storage/HttpStorage.js	2005-10-25 03:17:18 UTC (rev 367)
+++ trunk/source/storage/HttpProtocolStorage.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,155 @@
+/*****************************************************************************
+ HttpProtocolStorage.js
+  
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.HttpProtocolStorage");
+dojo.require("orp.storage.Storage");
+dojo.require("orp.storage.httpProtocolUtil");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The HttpProtocolStorage class knows how to save content to a server by using
+ * XMLHttpRequest to call a PHP script.
+ *
+ * @param    repositoryName                         // e.g. demo_page
+ * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
+ * @scope    public instance constructor
+ */
+orp.storage.HttpProtocolStorage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation) {
+  orp.storage.Storage.call(this, repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation);
+
+  var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk or /openrecord/trunk/source/model
+  if (pathToTrunkDirectoryFromWindowLocation) {
+    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectoryFromWindowLocation;
+  } else {
+    this._completePathToTrunkDirectory = thisDirectory;
+  }
+};
+
+dojo.inherits(orp.storage.HttpProtocolStorage, orp.storage.Storage);  // makes HttpProtocolStorage be a subclass of Storage
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Appends text to a file.
+ *
+ * @scope    public instance method
+ */
+orp.storage.HttpProtocolStorage.prototype.appendText = function(textToAppend) {
+  var url = this._completePathToTrunkDirectory;
+  url += '/' + orp.storage.httpProtocolUtil.PATH_TO_PHP_FILES_FROM_TRUNK;
+  // FIXME: Should also pass in this._repositoryDirectoryName, rather than having "repositories" hardcoded in append_to_repository_file.php.
+  url += "/append_to_repository_file.php?file=" + this.getRepositoryName();
+  
+  // PENDING: 
+  // It might be more efficient to re-use the XMLHttpRequestObject,
+  // rather than creating a new one for new request.  But re-using 
+  // them is complicated, because the requests are asynchronous, so
+  // we need to check to see if the last request is done before we 
+  // can start a new request.
+  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
+  var asynchronous = true;
+  newXMLHttpRequestObject.open("POST", url, asynchronous);
+  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
+  newXMLHttpRequestObject.send(textToAppend);
+};
+
+
+/**
+ * Writes text to a file, completely replacing the contents of the file.
+ *
+ * @scope    public instance method
+ */
+orp.storage.HttpProtocolStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  var url = this._completePathToTrunkDirectory;
+  url += '/' + orp.storage.httpProtocolUtil.PATH_TO_PHP_FILES_FROM_TRUNK;
+  // FIXME: Should also pass in this._repositoryDirectoryName, rather than having "repositories" hardcoded in write_to_repository_file.php.
+  url += "/write_to_repository_file.php?file=" + this.getRepositoryName();
+  if (overwriteIfExists) {
+    url += "&overwrite=T";
+  }
+  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
+  var asynchronous = true;
+  newXMLHttpRequestObject.open("POST", url, asynchronous);
+  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
+  newXMLHttpRequestObject.send(textToWrite);
+};
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a newly created XMLHttpRequest object.
+ *
+ * @scope    private instance method
+ * @return   A newly created XMLHttpRequest object. 
+ */
+orp.storage.HttpProtocolStorage.prototype._newXMLHttpRequestObject = function() {
+  var newXMLHttpRequestObject = null;
+  if (window.XMLHttpRequest) {
+    newXMLHttpRequestObject = new XMLHttpRequest();
+  } else {
+    if (window.ActiveXObject) {
+      newXMLHttpRequestObject = new ActiveXObject("Microsoft.XMLHTTP");
+    }
+  }
+  if (newXMLHttpRequestObject) {
+    newXMLHttpRequestObject.onreadystatechange = function() {
+      var statusText = newXMLHttpRequestObject.statusText;
+      if (statusText != "OK") {
+        window.alert("onreadystatechange:\n" +
+          "readyState: " + newXMLHttpRequestObject.readyState + "\n" +
+          "status: " + newXMLHttpRequestObject.status + "\n" +
+          "statusText: " + newXMLHttpRequestObject.statusText + "\n" +
+          "responseText: " + newXMLHttpRequestObject.responseText + "\n");
+      }
+    };
+  }
+  return newXMLHttpRequestObject;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Deleted: trunk/source/storage/HttpStorage.js
===================================================================
--- trunk/source/storage/HttpStorage.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/storage/HttpStorage.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -1,154 +0,0 @@
-/*****************************************************************************
- HttpStorage.js
-  
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.storage.HttpStorage");
-dojo.require("orp.storage.Storage");
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-/**
- * The HttpStorage class knows how to save content to a server by using
- * XMLHttpRequest to call a PHP script.
- *
- * @param    repositoryName                         // e.g. demo_page
- * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
- * @scope    public instance constructor
- */
-orp.storage.HttpStorage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation) {
-  orp.storage.Storage.call(this, repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation);
-
-  var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
-  var arrayOfPathComponents = thisUrl.split('/');
-  arrayOfPathComponents.pop();
-  var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk or /openrecord/trunk/source/model
-  if (pathToTrunkDirectoryFromWindowLocation) {
-    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectoryFromWindowLocation;
-  } else {
-    this._completePathToTrunkDirectory = thisDirectory;
-  }
-};
-
-dojo.inherits(orp.storage.HttpStorage, orp.storage.Storage);  // makes HttpStorage be a subclass of Storage
-
-
-// -------------------------------------------------------------------
-// Public methods
-// -------------------------------------------------------------------
-
-/**
- * Appends text to a file.
- *
- * @scope    public instance method
- */
-orp.storage.HttpStorage.prototype.appendText = function(textToAppend) {
-  var url = this._completePathToTrunkDirectory;
-  url += '/' + orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK;
-  // FIXME: Should also pass in this._repositoryDirectoryName, rather than having "repositories" hardcoded in append_to_repository_file.php.
-  url += "/append_to_repository_file.php?file=" + this.getRepositoryName();
-  
-  // PENDING: 
-  // It might be more efficient to re-use the XMLHttpRequestObject,
-  // rather than creating a new one for new request.  But re-using 
-  // them is complicated, because the requests are asynchronous, so
-  // we need to check to see if the last request is done before we 
-  // can start a new request.
-  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
-  var asynchronous = true;
-  newXMLHttpRequestObject.open("POST", url, asynchronous);
-  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
-  newXMLHttpRequestObject.send(textToAppend);
-};
-
-
-/**
- * Writes text to a file, completely replacing the contents of the file.
- *
- * @scope    public instance method
- */
-orp.storage.HttpStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
-  var url = this._completePathToTrunkDirectory;
-  url += '/' + orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK;
-  // FIXME: Should also pass in this._repositoryDirectoryName, rather than having "repositories" hardcoded in write_to_repository_file.php.
-  url += "/write_to_repository_file.php?file=" + this.getRepositoryName();
-  if (overwriteIfExists) {
-    url += "&overwrite=T";
-  }
-  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
-  var asynchronous = true;
-  newXMLHttpRequestObject.open("POST", url, asynchronous);
-  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
-  newXMLHttpRequestObject.send(textToWrite);
-};
-
-
-// -------------------------------------------------------------------
-// Private methods
-// -------------------------------------------------------------------
-
-/**
- * Returns a newly created XMLHttpRequest object.
- *
- * @scope    private instance method
- * @return   A newly created XMLHttpRequest object. 
- */
-orp.storage.HttpStorage.prototype._newXMLHttpRequestObject = function() {
-  var newXMLHttpRequestObject = null;
-  if (window.XMLHttpRequest) {
-    newXMLHttpRequestObject = new XMLHttpRequest();
-  } else {
-    if (window.ActiveXObject) {
-      newXMLHttpRequestObject = new ActiveXObject("Microsoft.XMLHTTP");
-    }
-  }
-  if (newXMLHttpRequestObject) {
-    newXMLHttpRequestObject.onreadystatechange = function() {
-      var statusText = newXMLHttpRequestObject.statusText;
-      if (statusText != "OK") {
-        window.alert("onreadystatechange:\n" +
-          "readyState: " + newXMLHttpRequestObject.readyState + "\n" +
-          "status: " + newXMLHttpRequestObject.status + "\n" +
-          "statusText: " + newXMLHttpRequestObject.statusText + "\n" +
-          "responseText: " + newXMLHttpRequestObject.responseText + "\n");
-      }
-    };
-  }
-  return newXMLHttpRequestObject;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/storage/Storage.js
===================================================================
--- trunk/source/storage/Storage.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/storage/Storage.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -40,7 +40,7 @@
 // -------------------------------------------------------------------
 /**
  * The Storage class is the abstract superclass for the other storage 
- * classes, including FileStorage and HttpStorage.
+ * classes, including FileProtocolStorage and HttpProtocolStorage.
  *
  * @param    repositoryName                         // e.g. demo_page
  * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
@@ -52,10 +52,6 @@
   this._pathToTrunkDirectory = pathToTrunkDirectoryFromWindowLocation;
 };
 
-// -------------------------------------------------------------------
-// Public constants
-// -------------------------------------------------------------------
-orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK = "source/storage";
 
 // -------------------------------------------------------------------
 // Public methods

Copied: trunk/source/storage/directoryList.js (from rev 367, trunk/source/storage/FileSystem.js)
===================================================================
--- trunk/source/storage/FileSystem.js	2005-10-25 03:17:18 UTC (rev 367)
+++ trunk/source/storage/directoryList.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,134 @@
+/*****************************************************************************
+ directoryList.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+dojo.provide("orp.storage.directoryList");
+dojo.require("orp.storage.fileProtocolUtil");
+dojo.require("orp.storage.httpProtocolUtil");
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+/*global window, document  */
+// -------------------------------------------------------------------
+
+/**
+ * @scope    public function
+ * @param    dirNameRelativeToWindowLocation
+ * @param    suffix                                   // if null or undefined, all files will be listed
+ * @return   an array of the files in the directory
+ * @throws   Throws an Error if directory doesn't exist, isn't a directory, or can't be read.
+ */
+orp.storage.getDirList = function(dirNameRelativeToWindowLocation, suffix) {
+  var dirList = [];
+  var thisUrl = window.location.pathname; // e.g .../someDirectory/currentWindow.html
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  var thisDirectory = arrayOfPathComponents.join('/'); // e.g .../someDirectory
+  if (window.location.protocol == "http:") {
+    var response = this._getDirListFromPhp(thisDirectory, dirNameRelativeToWindowLocation, suffix);
+    if (response[0] != '[') { // i.e. get_list_of_files_in_dir.php returned a message instead of an array
+      throw new Error(response);
+    }
+    eval("dirList = " + response);
+  }
+  if (window.location.protocol == "file:") {
+    if (window.Components) {
+      var arrayOfAdditions = dirNameRelativeToWindowLocation.split('/');
+      var pathToDirectory = orp.storage.getLocalPathFromWindowLocation(arrayOfAdditions);
+      dirList = this._getDirListFromMozillaComponent(pathToDirectory, suffix);
+    } else {
+      throw new Error("window.Components == null");
+    }
+  }
+  return dirList;
+};
+
+// FIXME: This hack should be replaced by something better, perhaps using dojo.hostenv.getBaseScriptUri().
+orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION = null;
+orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY = null;
+
+orp.storage._getDirListFromPhp = function(thisDirectory, dirNameRelativeToWindowLocation, suffix) {
+  var newXMLHttpRequestObject = new XMLHttpRequest();
+  var pathToTrunkFromPhpFile = "../..";
+  
+  var dirNameRelativeToPhpFile = pathToTrunkFromPhpFile + '/';
+  if (orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY) {
+    dirNameRelativeToPhpFile += orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY + '/';
+  }
+  dirNameRelativeToPhpFile += dirNameRelativeToWindowLocation;
+  
+  var pathToPhpDirectoryFromWindowLocation = "";
+  if (orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION) {
+    pathToPhpDirectoryFromWindowLocation += orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION + '/';
+  }
+  pathToPhpDirectoryFromWindowLocation += orp.storage.httpProtocolUtil.PATH_TO_PHP_FILES_FROM_TRUNK + '/';
+
+  var pathToPhpFileFromWindowLocation = pathToPhpDirectoryFromWindowLocation + "get_list_of_files_in_dir.php";
+  var url = "";
+  url += thisDirectory + '/' + pathToPhpFileFromWindowLocation + 
+            "?dir=" + dirNameRelativeToPhpFile;
+  if (suffix) {
+    url += "&suffix=" + suffix;
+  }
+  newXMLHttpRequestObject.open("GET", url, false);
+  newXMLHttpRequestObject.send(null);
+  return newXMLHttpRequestObject.responseText;
+};
+
+orp.storage._getDirListFromMozillaComponent = function(pathToDirectory, suffix) {
+  var dirList = [];
+  var dirPath = pathToDirectory;
+  netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+  var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
+  file.initWithPath(dirPath);
+  if (!file.exists()) {
+    throw new Error(dirPath + " not found.");
+  }
+  if (!file.isDirectory()) {
+    throw new Error(dirPath + " is not a directory.");
+  }
+  // file is the given directory (nsIFile)
+  var entries = file.directoryEntries;
+  while(entries.hasMoreElements()) {
+    var entry = entries.getNext();
+    entry.QueryInterface(Components.interfaces.nsIFile);
+    if (suffix) {
+      var parts = entry.leafName.split('.');
+      if (parts.length != 2 || parts[1] != suffix) {
+        continue;
+      }
+    }
+    dirList.push(entry.leafName); // could be entry.path instead, if needed...
+  }
+  return dirList;
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/storage/httpProtocolUtil.js
===================================================================
--- trunk/source/storage/httpProtocolUtil.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/storage/httpProtocolUtil.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,47 @@
+/*****************************************************************************
+ httpProtocolUtil.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.httpProtocolUtil");
+
+
+// -------------------------------------------------------------------
+// Public constants
+// -------------------------------------------------------------------
+orp.storage.httpProtocolUtil.PATH_TO_PHP_FILES_FROM_TRUNK = "source/storage";
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/util/Util.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -212,8 +212,15 @@
 };
 
 orp.util.hasNoUnexpectedProperties = function(object, expectedProperties) {
-  for (var key in object) {
-    if (!orp.util.isObjectInSet(key, expectedProperties)) { return false; }
+  var key;
+  if (dojo.lang.isArray(expectedProperties)) {
+    for (key in object) {
+      if (!orp.util.isObjectInSet(key, expectedProperties)) { return false; }
+    }
+  } else {
+    for (key in object) {
+      if (!orp.util.hasProperty(expectedProperties, key)) { return false; }
+    }
   }
   return true;
 };

Modified: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/util/XmlConverter.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -315,11 +315,17 @@
   if (level == maxLevel) {
     if (node.childNodes && node.childNodes.length > 0 && node.childNodes[0].nodeType == Node.TEXT_NODE) {
       value = this._world.transformValueToExpectedType(node.childNodes[0].nodeValue, xmlToAttributeSpecifier._listOfTypes);
+      newItem.addEntry({
+        attribute: xmlToAttributeSpecifier._attribute, 
+        value: value,
+        inverseAttribute: xmlToAttributeSpecifier._inverseAttribute });
+/*
       if (xmlToAttributeSpecifier._inverseAttribute) {
         newItem.addConnectionEntry(xmlToAttributeSpecifier._attribute, value, xmlToAttributeSpecifier._inverseAttribute);
       } else {
         newItem.addEntry({attribute:xmlToAttributeSpecifier._attribute, value:value});
       }
+*/
     }
     return;
   }

Modified: trunk/source/view/NavbarView.js
===================================================================
--- trunk/source/view/NavbarView.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/view/NavbarView.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -238,6 +238,14 @@
   newPageButton.value = "New Page";
   dojo.event.connect(newPageButton, "onclick", this, "_clickOnNewPageButton");
 
+  var FIXME_OCT_19_2005_EXPERIMENT = false;
+  if (FIXME_OCT_19_2005_EXPERIMENT) {
+    var getTrunkButton = orp.view.View.appendNewElement(divElement, "input");
+    getTrunkButton.type = "button";
+    getTrunkButton.value = "getBaseScriptUri()";
+    dojo.event.connect(getTrunkButton, "onclick", this, "getBaseScriptUri");
+  }
+
   var FIXME_OCT_14_2005_EXPERIMENT = false;
   if (FIXME_OCT_14_2005_EXPERIMENT) {
     var stage = this;
@@ -272,24 +280,31 @@
 
 };
 
+var FIXME_OCT_19_2005_EXPERIMENT = false;
+if (FIXME_OCT_19_2005_EXPERIMENT) {
+  orp.view.NavbarView.prototype.getBaseScriptUri = function(event) {
+    alert(window.location.pathname + "\n" + dojo.hostenv.getBaseScriptUri());
+  };
+}
+
 var FIXME_OCT_14_2005_EXPERIMENT = false;
 if (FIXME_OCT_14_2005_EXPERIMENT) {
-orp.view.NavbarView.prototype.plusMuppet = function(event) {
-  alert(event.target.muppetName);
-  delete event.target.muppetName;
-  dojo.event.disconnect(window.kermitButton, "onclick", this, "plusMuppet");
-};
-
-orp.view.NavbarView.prototype.addMuppet = function(muppetName) {
-  muppetName = muppetName || "nobody :-(";
-  alert(muppetName);
-};
-
-orp.view.NavbarView.prototype.addMuppetEvent = function(event, muppetName) {
+  orp.view.NavbarView.prototype.plusMuppet = function(event) {
+    alert(event.target.muppetName);
+    delete event.target.muppetName;
+    dojo.event.disconnect(window.kermitButton, "onclick", this, "plusMuppet");
+  };
   
-  muppetName = muppetName || "nobody :-(";
-  alert(event.target.orp_name);
-};
+  orp.view.NavbarView.prototype.addMuppet = function(muppetName) {
+    muppetName = muppetName || "nobody :-(";
+    alert(muppetName);
+  };
+  
+  orp.view.NavbarView.prototype.addMuppetEvent = function(event, muppetName) {
+    
+    muppetName = muppetName || "nobody :-(";
+    alert(event.target.orp_name);
+  };
 }
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/source/view/SectionView.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -454,11 +454,16 @@
     this._pluginView = this.getPluginInstanceFromPluginItem(newPluginViewItem, this._pluginDiv);
 
     var oldEntry = this._section.getSingleEntryFromAttribute(attributeCalledPluginView);
-    if (oldEntry) {
+    this._section.addEntry({
+      previousEntry:oldEntry, 
+      attribute:attributeCalledPluginView, 
+      value:newPluginViewItem});
+/*  if (oldEntry) {
       this._section.replaceEntry({previousEntry:oldEntry, value:newPluginViewItem});
     } else {
       this._section.addEntry({attribute:attributeCalledPluginView, value:newPluginViewItem});
     }
+*/
     this.refresh();
   }
 };
@@ -486,20 +491,26 @@
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
   var listOfMatchingAttrs = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
   var matchingAttribute;
+  var entryToBeReplaced = null;
   if (listOfMatchingAttrs.length === 0) {
     // by default matching attribute is category
     matchingAttribute = this.getWorld().getAttributeCalledCategory();
-  }
-  else {
+  } else {
     orp.lang.assert(listOfMatchingAttrs.length == 1, 'more than one matching attributes');
+    entryToBeReplaced = listOfMatchingAttrs[0];
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
   if (matchingAttribute.getDisplayString() != newChoiceName) {
-    if (listOfMatchingAttrs.length === 0) {
+      myQuery.addEntry({
+        previousEntry:entryToBeReplaced, 
+        attribute:attributeCalledQueryMatchingAttribute, 
+        value:newQueryMatchingAttribute});
+/*  if (listOfMatchingAttrs.length === 0) {
       myQuery.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:newQueryMatchingAttribute});
     } else {
-      myQuery.replaceEntry({previousEntry:listOfMatchingAttrs[0], value:newQueryMatchingAttribute});
+      myQuery.replaceEntry({previousEntry:entryToBeReplaced, value:newQueryMatchingAttribute});
     }
+*/
 
     /* PENDING, PROBLEM to check Can't delete entries already created by previous matching attribute */
     var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/TestSuite.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -25,12 +25,12 @@
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../tests/SimpleTest.html");
         testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
-        testSuite.addTestPage("../../../tests/dom/domTest.html");
+        testSuite.addTestPage("../../../tests/dom/test_dom.html");
         testSuite.addTestPage("../../../tests/lang/LangTest.html");
         testSuite.addTestPage("../../../tests/util/TestSuite.html");
         testSuite.addTestPage("../../../tests/uuid/TestSuite.html");
         testSuite.addTestPage("../../../tests/model/TestSuite.html");
-        testSuite.addTestPage("../../../tests/archive/LintTest.html");
+        testSuite.addTestPage("../../../tests/archive/TestSuite.html");
         testSuite.addTestPage("../../../tests/storage/TestSuite.html");
         testSuite.addTestPage("../../../tests/view/LintTest.html");
         testSuite.addTestPage("../../../tests/LintTest.html");

Added: trunk/tests/archive/TestSuite.html
===================================================================
--- trunk/tests/archive/TestSuite.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/archive/TestSuite.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>orp.archive Test Suite</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestSuite(utilTestSuite());
+        return testSuite;
+      }
+      
+      function utilTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../../tests/archive/LintTest.html");
+        testSuite.addTestPage("../../../tests/archive/test_dependencies.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>UUID Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/archive/test_dependencies.html
===================================================================
--- trunk/tests/archive/test_dependencies.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/archive/test_dependencies.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Dependency tests for the orp.archive package</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="test_dependencies.js"></script>
+  </head>
+  
+  <body>
+    <h1>Dependency tests for the orp.archive package</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/archive/test_dependencies.js
===================================================================
--- trunk/tests/archive/test_dependencies.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/archive/test_dependencies.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,62 @@
+/*****************************************************************************
+ test_dependencies.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.archive.JsonFormat");
+  dojo.require("orp.archive.JsonSerializer");
+  dojo.require("orp.archive.JsonDeserializer");
+  dojo.require("orp.archive.StubArchive");
+  dojo.require("orp.archive.DeltaArchive");
+  dojo.require("orp.archive.TextEncoding");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDependencies() {
+  assertTrue("orp.archive depends only on lang, util, uuid, model, and storage", orp.util.hasExactlyTheseProperties(orp, ["archive", "lang", "util", "uuid", "model", "storage"]));
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Deleted: trunk/tests/dom/domTest.html
===================================================================
--- trunk/tests/dom/domTest.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/dom/domTest.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -1,76 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests for orp.dom</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="domTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests for orp.dom</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>You should be able to run these unit tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button. </p>
-
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/tests/dom/domTest.js
===================================================================
--- trunk/tests/dom/domTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/dom/domTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -1,79 +0,0 @@
-/*****************************************************************************
- domTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-
-// -------------------------------------------------------------------
-// setUp and tearDown
-// -------------------------------------------------------------------
-
-function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.require("orp.dom");
-}
-
-function tearDown() {
-}
-
-
-// -------------------------------------------------------------------
-// Test functions
-// -------------------------------------------------------------------
-
-function testSimpleErrorCatching() {
-  divElementOne = window.document.createElement('div');
-  divElementTwo = window.document.createElement('div');
-  
-  document.body.appendChild(divElementOne);
-  document.body.appendChild(divElementTwo);
-  
-  orp.dom.setKeywordValueForElement(divElementOne, "foo", 34);
-  var fooValueOne = orp.dom.getKeywordValueForElement(divElementOne, "foo");
-  var fooValueTwo = orp.dom.getKeywordValueForElement(divElementTwo, "foo");
- 
-  assertTrue('divElementOne has a "foo" value of 34', (fooValueOne === 34));
-  assertTrue('divElementTwo does not have a "foo" value', (fooValueTwo === null));
-
-  var barValueOne = {a: 1, b: 2};
-  var barValueTwo = "Kermit the Frog";
-  orp.dom.setKeywordValueForElement(divElementOne, "bar", barValueOne);
-  orp.dom.setKeywordValueForElement(divElementTwo, "bar", barValueTwo);
-  
-  var barOneToo = orp.dom.getKeywordValueForElement(divElementOne, "bar");
-  var barTwoToo = orp.dom.getKeywordValueForElement(divElementTwo, "bar");
-  
-  assertTrue('divElementOne has a "foo" value of 34', (barValueOne === barOneToo));
-  assertTrue('divElementTwo does not have a "foo" value', (barValueTwo === barTwoToo));
-
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Copied: trunk/tests/dom/test_dom.html (from rev 364, trunk/tests/dom/domTest.html)
===================================================================
--- trunk/tests/dom/domTest.html	2005-10-18 02:15:08 UTC (rev 364)
+++ trunk/tests/dom/test_dom.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for orp.dom</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="test_dom.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for orp.dom</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/dom/test_dom.js (from rev 364, trunk/tests/dom/domTest.js)
===================================================================
--- trunk/tests/dom/domTest.js	2005-10-18 02:15:08 UTC (rev 364)
+++ trunk/tests/dom/test_dom.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,89 @@
+/*****************************************************************************
+ test_dom.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.dom");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDependencies() {
+  assertTrue("orp.lang is defined", ((typeof orp.lang) === 'object'));
+  assertTrue("orp.dom is defined", ((typeof orp.dom) === 'object'));
+  var i = 0;  
+  for (var key in orp) {
+    ++i;
+  }
+  assertTrue("Only orp.lang and orp.dom are defined", (i === 2));
+}
+
+function testKeywordValueAccessors() {
+  divElementOne = window.document.createElement('div');
+  divElementTwo = window.document.createElement('div');
+  
+  document.body.appendChild(divElementOne);
+  document.body.appendChild(divElementTwo);
+  
+  orp.dom.setKeywordValueForElement(divElementOne, "foo", 34);
+  var fooValueOne = orp.dom.getKeywordValueForElement(divElementOne, "foo");
+  var fooValueTwo = orp.dom.getKeywordValueForElement(divElementTwo, "foo");
+ 
+  assertTrue('divElementOne has a "foo" value of 34', (fooValueOne === 34));
+  assertTrue('divElementTwo does not have a "foo" value', (fooValueTwo === null));
+
+  var barValueOne = {a: 1, b: 2};
+  var barValueTwo = "Kermit the Frog";
+  orp.dom.setKeywordValueForElement(divElementOne, "bar", barValueOne);
+  orp.dom.setKeywordValueForElement(divElementTwo, "bar", barValueTwo);
+  
+  var barOneToo = orp.dom.getKeywordValueForElement(divElementOne, "bar");
+  var barTwoToo = orp.dom.getKeywordValueForElement(divElementTwo, "bar");
+  
+  assertTrue('divElementOne has a "foo" value of 34', (barValueOne === barOneToo));
+  assertTrue('divElementTwo does not have a "foo" value', (barValueTwo === barTwoToo));
+
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/lang/LangTest.js
===================================================================
--- trunk/tests/lang/LangTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/lang/LangTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -47,6 +47,16 @@
 // Test functions
 // -------------------------------------------------------------------
 
+
+function testDependencies() {
+  assertTrue("orp.lang is defined", ((typeof orp.lang) === 'object'));
+  var i = 0;  
+  for (var key in orp) {
+    ++i;
+  }
+  assertTrue("Only orp.lang is defined", (i === 1));
+}
+
 function testSimpleErrorCatching() {
   var caughtError = false;
   try {
@@ -222,6 +232,7 @@
   assertTrue("Bind works with 1 argument.", (box.getVolume() == (1)) );  
 }
 
+
 // -------------------------------------------------------------------
 // Helper functions
 // -------------------------------------------------------------------

Modified: trunk/tests/model/ModelTest.js
===================================================================
--- trunk/tests/model/ModelTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/ModelTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -1,5 +1,5 @@
 /*****************************************************************************
- ModelTest.js
+ test_BeforeLogin.js
  
 ******************************************************************************
  Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
@@ -38,7 +38,6 @@
 // -------------------------------------------------------------------
 
 
-var ModelTestVars = null;
 var world;
 
 // -------------------------------------------------------------------
@@ -52,141 +51,20 @@
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.util.DateValue");
 
-  ModelTestVars = {};
-
   var pathToTrunkDirectory = "../..";
   var stubArchive = new orp.archive.StubArchive(pathToTrunkDirectory);
   world = new orp.model.World(stubArchive);
 }
 
 function tearDown() {
-  ModelTestVars = null;
 }
 
 
 // -------------------------------------------------------------------
 // Test functions
 // -------------------------------------------------------------------
-
-function testUuids() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);  
-
-  world.login(userJane, janesPassword);
-  var apple = world.newItem("Apple");
-  var brownie = world.newItem("Brownie");
-  var cupcake = world.newItem("Cupcake");
   
-  var appleUuidString = apple.getUuidString();
-  var appleToo = world.getItemFromUuid(appleUuidString);
-  assertTrue('We can retrieve "apple" from its UUID string', (apple == appleToo)); 
-  
-  var appleUuid = apple.getUuid();
-  var appleAgain = world.getItemFromUuid(appleUuid);
-  assertTrue('We can retrieve "apple" from its UUID', (apple == appleAgain)); 
-}
 
-function testGetUserstamp() {
-  var listOfUsers = world.getUsers();  
-
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  var passwordForChris = "Kringlishous!";
-  var userChris = world.newUser("Chris Kringle", passwordForChris);
-
-  world.login(userJane, janesPassword);
-
-  assertTrue('The user Jane created the user Jane', (userJane.getUserstamp() == userJane));
-  
-  var starWars = world.newItem("Star Wars");
-  var recoveredUser = starWars.getUserstamp();
-  assertTrue("The user that created 'starWars' should be Jane", recoveredUser == userJane);
-  
-  world.logout();
-  world.login(userChris, passwordForChris);
-  var elephant = world.newItem("Elephant");
-  recoveredUser = elephant.getUserstamp();
-  assertTrue("The user that created 'elephant' should be Chris", recoveredUser == userChris);
-  recoveredUser = starWars.getUserstamp();
-  assertTrue("The user that created 'starWars' should be Jane", recoveredUser == userJane);  
-}
-
-function testGetTimestamp() {
-  var tZero = new Date();
-  var janesPassword = "jane's password";
-  waitForNextMillisecond();
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-  waitForNextMillisecond();
-  var starWars = world.newItem("Star Wars");
-  var starWarsTimestamp = starWars.getTimestamp();
-  waitForNextMillisecond();
-  var now = new Date();
-  assertTrue('"Star Wars" has a timestamp in the past', now.valueOf() > starWarsTimestamp);
-  assertTrue('"Star Wars" was created after tZero', starWarsTimestamp > tZero.valueOf());
-  waitForNextMillisecond();
-  var starTrek = world.newItem("Star Trek");
-  var starTrekTimestamp = starTrek.getTimestamp();
-  assertTrue('"Star Wars" was created before "Star Trek"', starWarsTimestamp < starTrekTimestamp);
-  var janesTimestamp = userJane.getTimestamp();
-  assertTrue('"Star Wars" was created after user Jane', starWarsTimestamp > janesTimestamp);
-}
-
-function testLoginLogout() {
-  var listOfUsers;
-  var loginSuccess;
-  
-  listOfUsers = world.getUsers();
-  var originalLength = listOfUsers.length;
-  // assertTrue("Initially, there's only an axiomatic user", listOfUsers.length == 1);
-  // assertTrue('Nobody is logged in', world.getCurrentUser() === null);
-
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);  
-  listOfUsers = world.getUsers();
-  assertTrue("Now there is another user", listOfUsers.length == (originalLength + 1));
-  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
-
-  loginSuccess = world.login(userJane, "wrong password");
-  assertFalse('Can not log in with wrong password', loginSuccess);
-  assertTrue('Jane is not logged in', world.getCurrentUser() === null);
-
-  loginSuccess = world.login(userJane, janesPassword);
-  assertTrue('Can log in with right password', loginSuccess);
-  assertTrue('Jane is logged in', world.getCurrentUser() == userJane);
-  
-  world.logout();
-  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
-  
-  var passwordForChris = "Kringlishous!";
-  var userChris = world.newUser("Chris Kringle", passwordForChris);
-  world.login(userChris, passwordForChris);
-  assertTrue('Chris is logged in', world.getCurrentUser() == userChris);
-  world.logout();
-  
-  world.login(userJane, janesPassword);
-  assertTrue('Jane is logged in', world.getCurrentUser() == userJane);
-  assertFalse('Chris is not logged in', world.getCurrentUser() == userChris);
-  var caughtError = false;
-  var oprahsPassword = "Oprah's password";
-  try {
-    var userOprah = world.newUser("Oprah", oprahsPassword);
-  } catch (error) {
-    caughtError = true;
-  }
-  assertTrue("We can't create a new user while Jane is logged in", caughtError);
-  world.logout();
-  
-  caughtError = false;
-  try {
-    var newItem = world.newItem("The Great Wall of China");
-  } catch (error) {
-    caughtError = true;
-  }
-  assertTrue("We can't create a new item without being logged in", caughtError);
-}
-  
-
 function testAccessorsForAxiomaticItems() {
   var key;
   var item;
@@ -225,452 +103,8 @@
   }
 }
 
-  
-function noyet_testAdditionsAndRetrievals() {
-  var nameAttribute = world.getAttributeCalledName();
-  
-  var janesPassword = "jane's password";
-  var listOfCharacters = null;
-  var listOfEntries = null;
-  var listOfAttributes = null;
-  var worldRetrievalFilter = null;
-  var hasAll;
-  
-  var tZero = new Date();
-  
-  // operations done by Jane
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  assertTrue('The user Jane created the user Jane', (userJane.getUserstamp() == userJane));
-   
-  world.login(userJane, janesPassword);
 
-  var characterAttribute = world.newAttribute("Characters");
-  var starWars = world.newItem("Star Wars");
-  assertTrue('getDisplayName() works for "Star Wars"', (starWars.getDisplayName() == "Star Wars"));
 
-  var luck = starWars.addEntry({attribute:characterAttribute, value:"Luck Skywalker"});
-  var c3po = starWars.addEntry({attribute:characterAttribute, value:"C3PO"});
-  var r2d2 = starWars.addEntry({value:"R2D2"});
-  assertTrue('"Star Wars" has not been deleted', !starWars.hasBeenDeleted());
-  assertTrue('"R2D2" has not been deleted', !r2d2.hasBeenDeleted());
-  assertTrue('"R2D2" has not been replaced', !r2d2.hasBeenReplaced());
-
-  listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
-  hasAll = orp.util.areObjectsInSet([luck, c3po], listOfCharacters);
-  assertTrue('"Star Wars" has characters: luck, c3po', hasAll);
-  assertTrue('Exactly 2 characters in Star Wars', listOfCharacters.length == 2);
-
-  listOfEntries = starWars.getEntries();
-  hasAll = orp.util.areObjectsInSet([luck, c3po, r2d2], listOfEntries);
-  assertTrue('"Star Wars" has entries: luck, c3po, r2d2', hasAll);  
-  
-  var ordinalA = starWars.getOrdinalNumberAtCreation();
-  var ordinalB = starWars.getOrdinalNumber();
-  assertTrue('"Star Wars" ordinal values match', ordinalA == ordinalB);  
-  
-  var starWarsTimestamp = starWars.getTimestamp();
-  var now = new Date();
-  // alert("now: " + now + "\nstar wars: " + starWarsTimestamp);
-  assertTrue('"Star Wars" has a timestamp in the past', now >= starWarsTimestamp);  
-  assertTrue('"Star Wars" was created after tZero', starWarsTimestamp >= tZero);  
-
-  var starWarsUserstamp = starWars.getUserstamp();
-  assertTrue('"Star Wars" was made by Jane', starWarsUserstamp == userJane);    
-
-  listOfAttributes = starWars.getAttributes();
-  hasAll = orp.util.areObjectsInSet([nameAttribute, characterAttribute], listOfAttributes);
-  assertTrue('"Star Wars" has both expected attributes', hasAll);
-  
-  worldRetrievalFilter = world.getRetrievalFilter();
-  assertTrue('Default retrieval filter is "last edit wins"', worldRetrievalFilter == orp.model.World.RetrievalFilter.LAST_EDIT_WINS);
-  
-  var luke = starWars.replaceEntry({previousEntry:luck, value:"Luke Skywalker"});
-  var previousEntry = luke.getPreviousEntry();
-  assertTrue('"Luke" has the previous version "Luck"', previousEntry !== null);
-  assertTrue('"Luck" has been replaced', luck.hasBeenReplaced());
-  assertTrue('"Luck" is a entry in "Star Wars"', luck.getItem() == starWars);
-
-  listOfEntries = starWars.getEntries();
-  hasAll = orp.util.areObjectsInSet([luke, c3po, r2d2], listOfEntries);
-  assertTrue('"Star Wars" has entries: luke, c3po, r2d2', hasAll);  
-
-  listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
-  hasAll = orp.util.areObjectsInSet([luke, c3po], listOfCharacters);
-  assertTrue('"Star Wars" has characters: luke, c3po', hasAll);
-  assertTrue('Exactly 2 characters in the star wars', listOfCharacters.length == 2);
-
-  world.logout();
-  
-  // operations done by Chris
-  var passwordForChris = "Kringlishous!";
-  var userChris = world.newUser("Chris Kringle", passwordForChris);
-  world.login(userChris, passwordForChris);
-
-  // r2d2 = starWars.replaceEntryWithEntryForAttribute(r2d2, characterAttribute, "R2D2");
-  r2d2 = starWars.replaceEntry({previousEntry:r2d2, attribute:characterAttribute, value:"R2D2"});
-  assertTrue('"R2D2" is now character', r2d2.getAttribute() == characterAttribute);
-
-  var failure = starWars.replaceEntry({previousEntry:r2d2, value:"R2D2"});
-  assertTrue("Can't replace a value with an identical value", failure === null);
-
-  listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
-  var hasR2d2 = orp.util.isObjectInSet(r2d2, listOfCharacters);
-  hasAll = orp.util.areObjectsInSet([luke, c3po, r2d2], listOfCharacters);
-  assertTrue('Chris sees R2D2 as a character', hasR2d2);
-  assertTrue('Chris sees characters: luke, c3po, r2d2', hasAll);
-  assertTrue('Chris sees 3 characters in "Star Wars"', listOfCharacters.length == 3);
-  
-  var attributeCalledName = world.getAttributeCalledName();
-  var theHobbit = world.newItem("The Hobbit");
-  theHobbit.addEntry({attribute:attributeCalledName, value:"There and Back Again"});
-  listOfEntries = theHobbit.getEntriesForAttribute(attributeCalledName);
-  assertTrue('"The Hobbit" has two names', listOfEntries.length == 2);
-  assertTrue('getDisplayName() returns the first name', (starWars.getDisplayName() == "Star Wars"));
-  var listOfNames = theHobbit.getNameEntries();
-  assertTrue('getContentData() returns a string', listOfNames[0].getValue() == "The Hobbit");
-  hasAll = orp.util.areObjectsInSet(listOfNames, listOfEntries);
-  hasAll = hasAll && orp.util.areObjectsInSet(listOfEntries, listOfNames);
-  assertTrue('getName() matches getEntriesForAttribute(attributeCalledName)', hasAll);
-  
-  world.logout();
-}
-
-
-function testCategories() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-
-  var attributeCalledCategory = world.getAttributeCalledCategory();
-  var attributeCalledName = world.getAttributeCalledName();
-  var categoryCalledAttribute = world.getCategoryCalledAttribute();
-
-  var isInCategory;
-  isInCategory = attributeCalledName.isInCategory(categoryCalledAttribute);
-  assertTrue('The attribute "Name" is in the category "Attribute"', isInCategory);
-  isInCategory = categoryCalledAttribute.isInCategory(categoryCalledAttribute);
-  assertTrue('The category "Attribute" is NOT in the category "Attribute"', !isInCategory);
-  
-  var theHobbit = world.newItem("The Hobbit");
-  var theWisdomOfCrowds = world.newItem("The Wisdom of Crowds");
-  var theTransparentSociety = world.newItem("The Transparent Society");
-  isInCategory = theHobbit.isInCategory(categoryCalledAttribute);
-  assertTrue('"The Hobbit" is NOT in the category "Attribute"', !isInCategory);
-  
-  var categoryCalledBook = world.newCategory("Book");
-  isInCategory = theHobbit.isInCategory(categoryCalledBook);
-  assertTrue('"The Hobbit" is NOT in the category "Book"', !isInCategory);
-  
-  theHobbit.assignToCategory(categoryCalledBook);
-  theWisdomOfCrowds.assignToCategory(categoryCalledBook);
-  theTransparentSociety.assignToCategory(categoryCalledBook);
-  isInCategory = theHobbit.isInCategory(categoryCalledBook);
-  assertTrue('"The Hobbit" is in the category "Book"', isInCategory);
- 
-  var allBooks = world.getItemsInCategory(categoryCalledBook);
-  var hasAll = orp.util.areObjectsInSet([theHobbit, theWisdomOfCrowds, theTransparentSociety], allBooks);
-  assertTrue('All three books are in the category "Book"', hasAll);
-  
-  world.logout();
-}
-
-function testOrdinals() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-  
-  var attributeCalledCategory = world.getAttributeCalledCategory();
-  
-  var apple = world.newItem("Apple");
-  var cupcake = world.newItem("Cupcake");
-  var brownie = world.newItem("Brownie");  
-
-  var categoryCalledFood = world.newCategory("Food");
-  apple.assignToCategory(categoryCalledFood);
-  cupcake.assignToCategory(categoryCalledFood);
-  brownie.assignToCategory(categoryCalledFood);
-
-  var foodItems = world.getItemsInCategory(categoryCalledFood);
-  assertTrue('Apple starts out first in the list"', foodItems[0] == apple);
-  assertTrue('Cupcake starts out second in the list"', foodItems[1] == cupcake);
-  assertTrue('Brownie starts out second in the list"', foodItems[2] == brownie);
-
-  brownie.reorderBetween(apple, cupcake);
-  foodItems = world.getItemsInCategory(categoryCalledFood);
-  assertTrue('Apple is now first in the list"', foodItems[0] == apple);
-  assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
-  assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
-
-  cupcake.reorderBetween(null, apple);
-  foodItems = world.getItemsInCategory(categoryCalledFood);
-  assertTrue('Cupcake is now first in the list"', foodItems[0] == cupcake);
-  assertTrue('Apple is now second in the list"', foodItems[1] == apple);
-  assertTrue('Brownie is now third in the list"', foodItems[2] == brownie);
-
-  cupcake.reorderBetween(brownie, null);
-  foodItems = world.getItemsInCategory(categoryCalledFood);
-  assertTrue('Apple is now first in the list"', foodItems[0] == apple);
-  assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
-  assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
-  
-  world.logout();
-}
-  
-function testDeletion() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-  
-  var hydrogen = world.newItem("Hydrogen");
-  var oxygen = world.newItem("Oxygen");
-  
-  assertTrue('Hydrogen starts out not having been deleted"', !hydrogen.hasBeenDeleted());
-
-  hydrogen.voteToDelete();
-  assertTrue('After a voteToDelete(), hydrogen hasBeenDeleted()"', hydrogen.hasBeenDeleted());
-  
-  hydrogen.voteToRetain();
-  assertTrue('After a voteToRetain(), hydrogen no longer hasBeenDeleted()', !hydrogen.hasBeenDeleted());
-
-  world.logout();
-}
-
-
-function testItemObservation() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-  
-  var tokyo = world.newItem("Tokyo");
-  var seattle = world.newItem("Seattle");
-  
-  var changesObservedByObject = null;
-  var tokyoObserverObject = {};
-  tokyoObserverObject.observedItemHasChanged = function (inItem, inListOfRecords) {
-    changesObservedByObject = inListOfRecords;
-  };
-  tokyo.addObserver(tokyoObserverObject);
-
-  var changesObservedByFunction = null;
-  var tokyoObserverFunction = function (inItem, inListOfRecords) {
-    changesObservedByFunction = inListOfRecords;
-  };
-  tokyo.addObserver(tokyoObserverFunction);
-  
-  seattle.voteToDelete();
-  assertTrue('tokyoObserverObject does not observe Seattle', (changesObservedByObject === null));
-  assertTrue('tokyoObserverFunction does not observe Seattle', (changesObservedByFunction === null));
-
-  tokyo.voteToDelete();
-  assertTrue('tokyoObserverObject does observe Tokyo', (changesObservedByObject !== null));
-  assertTrue('tokyoObserverObject sees exactly one change', (changesObservedByObject.length == 1));
-  assertTrue('tokyoObserverFunction does observe Tokyo', (changesObservedByFunction !== null));
-  assertTrue('tokyoObserverFunction sees exactly one change', (changesObservedByFunction.length == 1));
-
-  changesObservedByObject = null;
-  changesObservedByFunction = null;
-  world.beginTransaction();
-  tokyo.voteToRetain();
-  tokyo.addEntry({value:"Japan"});
-  assertTrue('tokyoObserverObject does not yet see changes', (changesObservedByObject === null));
-  assertTrue('tokyoObserverFunction does not yet see changes', (changesObservedByFunction === null));
-  world.endTransaction();
-  assertTrue('tokyoObserverObject now sees changes', (changesObservedByObject !== null));
-  assertTrue('tokyoObserverObject now sees two changes', (changesObservedByObject.length == 2));
-  assertTrue('tokyoObserverFunction now sees changes', (changesObservedByFunction !== null));
-  assertTrue('tokyoObserverFunction now sees two changes', (changesObservedByFunction.length == 2));
-
-  changesObservedByObject = null;
-  changesObservedByFunction = null;
-  tokyo.removeObserver(tokyoObserverObject);
-  tokyo.removeObserver(tokyoObserverFunction);
-  tokyo.voteToDelete();
-  assertTrue('tokyoObserverObject no longer observes Tokyo', (changesObservedByObject === null));
-  assertTrue('tokyoObserverFunction no longer observes Tokyo', (changesObservedByFunction === null));
-  
-  world.logout();
-}
-
-
-function testListObservation() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-
-  var attributeCalledCategory = world.getAttributeCalledCategory();
-  
-  var apple = world.newItem("Apple");
-  var brownie = world.newItem("Brownie");  
-  var cupcake = world.newItem("Cupcake");
-
-  var categoryCalledFood = world.newCategory("Food");
-  apple.assignToCategory(categoryCalledFood);
-  brownie.assignToCategory(categoryCalledFood);
-  cupcake.assignToCategory(categoryCalledFood);
-
-  var tokyo = world.newItem("Tokyo");
-  var seattle = world.newItem("Seattle");
-
-  var changesObservedByObject = null;
-  var foodObserverObject = {};
-  foodObserverObject.observedListHasChanged = function (inList, inListOfChangeReports) {
-    changesObservedByObject = inListOfChangeReports;
-  };
-  var foodItems = world.getItemsInCategory(categoryCalledFood, foodObserverObject);
-
-  var changesObservedByFunction = null;
-  var foodObserverFunction = function (inList, inListOfChangeReports) {
-    changesObservedByFunction = inListOfChangeReports;
-  };
-  var alsoFoodItems = world.getItemsInCategory(categoryCalledFood, foodObserverFunction);
-  
-  apple.addEntry({value:"Red"});
-  assertTrue('foodObserverObject sees a change to apple', (changesObservedByObject !== null));
-  assertTrue('foodObserverFunction sees a change to apple', (changesObservedByFunction !== null));
-
-  changesObservedByObject = null;
-  changesObservedByFunction = null;
-  tokyo.addEntry({value:"Japan"});
-  assertTrue('foodObserverObject does not see a change to tokyo', (changesObservedByObject === null));
-  assertTrue('foodObserverFunction does not see a change to tokyo', (changesObservedByFunction === null));
-
-  world.removeListObserver(foodItems, foodObserverObject);
-  world.removeListObserver(alsoFoodItems, foodObserverFunction);
-  brownie.addEntry({value:"Brown"});
-  assertTrue('foodObserverObject no longer sees changes to food items', (changesObservedByObject === null));
-  assertTrue('foodObserverFunction no longer sees changes to food items', (changesObservedByFunction === null));
-  
-  world.logout();
-}
-
-
-function testQueries() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-  
-  var attributeCalledCategory = world.getAttributeCalledCategory();
-  
-  var apple = world.newItem("Apple");
-  var brownie = world.newItem("Brownie");  
-  var cupcake = world.newItem("Cupcake");
-
-  var categoryCalledFood = world.newCategory("Food");
-  assertTrue('The category "Food" is an item', (categoryCalledFood instanceof orp.model.Item));
-  apple.assignToCategory(categoryCalledFood);
-  brownie.assignToCategory(categoryCalledFood);
-  cupcake.assignToCategory(categoryCalledFood);
-
-  var tokyo = world.newItem("Tokyo");
-  var seattle = world.newItem("Seattle");
-
-  var hasAll;
-  var queryForFoods = world.newQueryForItemsByCategory(categoryCalledFood);
-  var queryRunnerForFoods = world.newQueryRunner(queryForFoods);
-  var listOfFoods = queryRunnerForFoods.getResultItems();
-  
-  hasAll = orp.util.areObjectsInSet([apple, brownie, cupcake], listOfFoods);
-  assertTrue('Food query returns 3 foods', listOfFoods.length == 3);
-  assertTrue('Food query returns all 3 foods', hasAll);
-
-  world.setItemToBeIncludedInQueryResultList(tokyo, queryForFoods);
-  assertTrue('Tokyo is now a food', tokyo.isInCategory(categoryCalledFood));
-
-  listOfFoods = queryRunnerForFoods.getResultItems();
-  hasAll = orp.util.areObjectsInSet([apple, brownie, cupcake, tokyo], listOfFoods);
-  assertTrue('Food query returns 4 foods', listOfFoods.length == 4);
-  assertTrue('Food query returns all 4 foods', hasAll);
-
-  // test for queries using non-category attribute e.g. continent
-  var attributeCalledContinent = world.newItem("Continent");
-  tokyo.addEntry({attribute:attributeCalledContinent, value:"Asia"});
-  var beijing = world.newItem("Beijing");
-  beijing.addEntry({attribute:attributeCalledContinent, value:"Asia"});
-  var seattleEntry = seattle.addEntry({attribute:attributeCalledContinent, value:"North America"});
-  var queryRunnerForAsia = world.newQueryRunner({attribute: attributeCalledContinent, values:["Asia"]});
-  var listOfCountries = queryRunnerForAsia.getResultItems();
-  
-  assertTrue('Asia query returns 2 countries', listOfCountries.length == 2);
-  hasAll = orp.util.areObjectsInSet([tokyo,beijing], listOfCountries);
-  assertTrue('Asia query returns all 2 countries', hasAll);
-  
-  var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
-  var queryRunnerForNorthAmerica = world.newQueryRunner(northAmericaQuery);
-  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
-  assertTrue('North America query returned only Seattle',
-  listOfCountries.length == 1 && orp.util.isObjectInSet(seattle, listOfCountries));
-    
-  seattle.addEntry({attribute:attributeCalledContinent, value:"Asia"});
-  listOfCountries = queryRunnerForAsia.getResultItems();
-  assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
-  hasAll = orp.util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
-  assertTrue('Asia query returns all 3 countries', hasAll);
-  
-  world.setItemToBeIncludedInQueryResultList(beijing, northAmericaQuery);
-  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
-  assertTrue('Beijing is now in North America',orp.util.isObjectInSet(beijing, listOfCountries));
-  assertTrue('North America query returns 2 countries', listOfCountries.length == 2);
-  world.setItemToBeIncludedInQueryResultList(seattle, northAmericaQuery);
-  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
-  assertTrue('North America still returns only 2 countries', listOfCountries.length == 2);
-  
-  world.logout();
-}
-
-
-
-// Tests World._getFilteredList, via World.getUsers and World.getCategories.
-
-function testFilteredLists() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);  
-  var listOfUsers = world.getUsers();
-
-  var listOfCategories = world.getCategories();
-  var origNumberOfCategories = listOfCategories.length;
-  assertTrue("Should be at least 3 categories", origNumberOfCategories >= 3);
-  
-  // Need to login before adding a category.
-  var loginSuccess = world.login(userJane, janesPassword);
-  assertTrue('login succeeded', loginSuccess);
-  assertTrue('Jane is logged in', world.getCurrentUser() == userJane);  
-
-  var categoryCalledBlueThings = world.newCategory("BlueThings");
-  listOfCategories = world.getCategories();
-  assertTrue("Should be exactly one more category than before.", listOfCategories.length == origNumberOfCategories + 1);
-}
-
-function testItemTypes() {
-  var janesPassword = "jane's password";
-  var userJane = world.newUser("Jane Doe", janesPassword);
-  world.login(userJane, janesPassword);
-  
-  var anEmail = world.newItem("Money saved for you at Nigerian Bank");
-  var fromAttribute = world.newAttribute("From");
-  var dateReceivedAttribute = world.newAttribute("Received");
-  var noOfAttachments = world.newAttribute("Number of attachments");
-  var subjectAttribute = world.newAttribute("Subject");
-  var aPerson = world.newItem("John Doe");
-  var subjectEntry = anEmail.addEntry({attribute:subjectAttribute, value:"Money saved for you at Nigerian Bank"});
-  var fromEntry = anEmail.addEntry({attribute:fromAttribute, value:aPerson});
-  var receivedEntry = anEmail.addEntry({attribute:dateReceivedAttribute, value:(new orp.util.DateValue("6/8/05"))});
-  var numAttachmentsEntry = anEmail.addEntry({attribute:noOfAttachments, value:4});
-}
-
-
 // -------------------------------------------------------------------
-// Helper functions
-// -------------------------------------------------------------------
-
-function waitForNextMillisecond() {
-  var now = new Date();
-  var then = now;
-  while (now.valueOf() == then.valueOf()) {
-    now = new Date();
-  }
-}
-
-
-// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/model/TestSuite.html
===================================================================
--- trunk/tests/model/TestSuite.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/TestSuite.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -24,10 +24,13 @@
       function dataModelTestSuite() {
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../tests/model/LintTest.html");
-        testSuite.addTestPage("../../../tests/model/ModelTest.html");
+        testSuite.addTestPage("../../../tests/model/test_BeforeLogin.html");
+        testSuite.addTestPage("../../../tests/model/test_AfterLogin.html");
+        testSuite.addTestPage("../../../tests/model/test_SequentialUsers.html");
         testSuite.addTestPage("../../../tests/model/RepositoryWritingTest.html");
         testSuite.addTestPage("../../../tests/model/TestReorderingForTypicalOrdinals.html");
         testSuite.addTestPage("../../../tests/model/TestReorderingForSpecialCases.html");
+        testSuite.addTestPage("../../../tests/model/test_dependencies.html");
         return testSuite;
       }
     </script>

Added: trunk/tests/model/test_AfterLogin.html
===================================================================
--- trunk/tests/model/test_AfterLogin.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_AfterLogin.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for the data model</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="test_AfterLogin.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for the data model</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/model/test_AfterLogin.js
===================================================================
--- trunk/tests/model/test_AfterLogin.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_AfterLogin.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,415 @@
+/*****************************************************************************
+ test_AfterLogin.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util */
+/*global World, Item, Entry */
+/*global StubArchive */
+/*global assertTrue, assertFalse, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+var world;
+var userJane;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.model.World");
+  dojo.require("orp.archive.StubArchive");
+  dojo.require("orp.util.DateValue");
+
+  var pathToTrunkDirectory = "../..";
+  var stubArchive = new orp.archive.StubArchive(pathToTrunkDirectory);
+  world = new orp.model.World(stubArchive);
+
+  var janesPassword = "jane's password";
+  userJane = world.newUser("Jane Doe", janesPassword);  
+  world.login(userJane, janesPassword);
+}
+
+function tearDown() {
+  world.logout();
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testUuids() {
+  var apple = world.newItem("Apple");
+  var brownie = world.newItem("Brownie");
+  var cupcake = world.newItem("Cupcake");
+  
+  var appleUuidString = apple.getUuidString();
+  var appleToo = world.getItemFromUuid(appleUuidString);
+  assertTrue('We can retrieve "apple" from its UUID string', (apple == appleToo)); 
+  
+  var appleUuid = apple.getUuid();
+  var appleAgain = world.getItemFromUuid(appleUuid);
+  assertTrue('We can retrieve "apple" from its UUID', (apple == appleAgain)); 
+}
+
+function testGetTimestamp() {
+  var tZero = new Date();
+  waitForNextMillisecond();
+  var starWars = world.newItem("Star Wars");
+  var starWarsTimestamp = starWars.getTimestamp();
+  waitForNextMillisecond();
+  var now = new Date();
+  assertTrue('"Star Wars" has a timestamp in the past', now.valueOf() > starWarsTimestamp);
+  assertTrue('"Star Wars" was created after tZero', starWarsTimestamp > tZero.valueOf());
+  waitForNextMillisecond();
+  var starTrek = world.newItem("Star Trek");
+  var starTrekTimestamp = starTrek.getTimestamp();
+  assertTrue('"Star Wars" was created before "Star Trek"', starWarsTimestamp < starTrekTimestamp);
+  var janesTimestamp = userJane.getTimestamp();
+  assertTrue('"Star Wars" was created after user Jane', starWarsTimestamp > janesTimestamp);
+}
+ 
+
+function testConnections() { 
+  var utah = world.newItem("Utah");
+  var provo = world.newItem("Provo");
+  var ogden = world.newItem("Ogden");
+  
+  var locatedIn = world.newAttribute("Located in");
+  var cities = world.newAttribute("Cities");
+  
+  utah.addEntry({attribute: cities, value: provo, inverseAttribute: locatedIn});
+  var listOfCities = utah.getValuesForAttribute(cities);
+  assertTrue('Utah now has Provo as a city.', listOfCities[0] == provo);
+  assertTrue('Provo is now located in Utah.', provo.hasAttributeValue(locatedIn, utah));
+  
+  utah.addEntry({
+    attribute: cities, 
+    value: ogden, 
+    inverseAttribute: locatedIn});
+  assertTrue('Utah still has Provo as a city.', utah.hasAttributeValue(cities, provo));
+  assertTrue('Utah now has Ogden as a city.', utah.hasAttributeValue(cities, ogden));
+  assertTrue('Provo is still located in Utah.', provo.hasAttributeValue(locatedIn, utah));
+  assertTrue('Ogden is now located in Utah.', ogden.hasAttributeValue(locatedIn, utah));
+}
+
+function testCategories() {
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  var attributeCalledName = world.getAttributeCalledName();
+  var categoryCalledAttribute = world.getCategoryCalledAttribute();
+
+  var isInCategory;
+  isInCategory = attributeCalledName.isInCategory(categoryCalledAttribute);
+  assertTrue('The attribute "Name" is in the category "Attribute"', isInCategory);
+  isInCategory = categoryCalledAttribute.isInCategory(categoryCalledAttribute);
+  assertTrue('The category "Attribute" is NOT in the category "Attribute"', !isInCategory);
+  
+  var theHobbit = world.newItem("The Hobbit");
+  var theWisdomOfCrowds = world.newItem("The Wisdom of Crowds");
+  var theTransparentSociety = world.newItem("The Transparent Society");
+  isInCategory = theHobbit.isInCategory(categoryCalledAttribute);
+  assertTrue('"The Hobbit" is NOT in the category "Attribute"', !isInCategory);
+  
+  var categoryCalledBook = world.newCategory("Book");
+  isInCategory = theHobbit.isInCategory(categoryCalledBook);
+  assertTrue('"The Hobbit" is NOT in the category "Book"', !isInCategory);
+  
+  theHobbit.assignToCategory(categoryCalledBook);
+  theWisdomOfCrowds.assignToCategory(categoryCalledBook);
+  theTransparentSociety.assignToCategory(categoryCalledBook);
+  isInCategory = theHobbit.isInCategory(categoryCalledBook);
+  assertTrue('"The Hobbit" is in the category "Book"', isInCategory);
+ 
+  var allBooks = world.getItemsInCategory(categoryCalledBook);
+  var hasAll = orp.util.areObjectsInSet([theHobbit, theWisdomOfCrowds, theTransparentSociety], allBooks);
+  assertTrue('All three books are in the category "Book"', hasAll);
+}
+
+function testOrdinals() {
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  
+  var apple = world.newItem("Apple");
+  var cupcake = world.newItem("Cupcake");
+  var brownie = world.newItem("Brownie");  
+
+  var categoryCalledFood = world.newCategory("Food");
+  apple.assignToCategory(categoryCalledFood);
+  cupcake.assignToCategory(categoryCalledFood);
+  brownie.assignToCategory(categoryCalledFood);
+
+  var foodItems = world.getItemsInCategory(categoryCalledFood);
+  assertTrue('Apple starts out first in the list"', foodItems[0] == apple);
+  assertTrue('Cupcake starts out second in the list"', foodItems[1] == cupcake);
+  assertTrue('Brownie starts out second in the list"', foodItems[2] == brownie);
+
+  brownie.reorderBetween(apple, cupcake);
+  foodItems = world.getItemsInCategory(categoryCalledFood);
+  assertTrue('Apple is now first in the list"', foodItems[0] == apple);
+  assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
+  assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
+
+  cupcake.reorderBetween(null, apple);
+  foodItems = world.getItemsInCategory(categoryCalledFood);
+  assertTrue('Cupcake is now first in the list"', foodItems[0] == cupcake);
+  assertTrue('Apple is now second in the list"', foodItems[1] == apple);
+  assertTrue('Brownie is now third in the list"', foodItems[2] == brownie);
+
+  cupcake.reorderBetween(brownie, null);
+  foodItems = world.getItemsInCategory(categoryCalledFood);
+  assertTrue('Apple is now first in the list"', foodItems[0] == apple);
+  assertTrue('Brownie is now second in the list"', foodItems[1] == brownie);
+  assertTrue('Cupcake is now third in the list"', foodItems[2] == cupcake);
+}
+  
+function testDeletion() {
+  var hydrogen = world.newItem("Hydrogen");
+  var oxygen = world.newItem("Oxygen");
+  
+  assertTrue('Hydrogen starts out not having been deleted"', !hydrogen.hasBeenDeleted());
+
+  hydrogen.voteToDelete();
+  assertTrue('After a voteToDelete(), hydrogen hasBeenDeleted()"', hydrogen.hasBeenDeleted());
+  
+  hydrogen.voteToRetain();
+  assertTrue('After a voteToRetain(), hydrogen no longer hasBeenDeleted()', !hydrogen.hasBeenDeleted());
+}
+
+function testItemObservation() {
+  var tokyo = world.newItem("Tokyo");
+  var seattle = world.newItem("Seattle");
+  
+  var changesObservedByObject = null;
+  var tokyoObserverObject = {};
+  tokyoObserverObject.observedItemHasChanged = function (inItem, inListOfRecords) {
+    changesObservedByObject = inListOfRecords;
+  };
+  tokyo.addObserver(tokyoObserverObject);
+
+  var changesObservedByFunction = null;
+  var tokyoObserverFunction = function (inItem, inListOfRecords) {
+    changesObservedByFunction = inListOfRecords;
+  };
+  tokyo.addObserver(tokyoObserverFunction);
+  
+  seattle.voteToDelete();
+  assertTrue('tokyoObserverObject does not observe Seattle', (changesObservedByObject === null));
+  assertTrue('tokyoObserverFunction does not observe Seattle', (changesObservedByFunction === null));
+
+  tokyo.voteToDelete();
+  assertTrue('tokyoObserverObject does observe Tokyo', (changesObservedByObject !== null));
+  assertTrue('tokyoObserverObject sees exactly one change', (changesObservedByObject.length == 1));
+  assertTrue('tokyoObserverFunction does observe Tokyo', (changesObservedByFunction !== null));
+  assertTrue('tokyoObserverFunction sees exactly one change', (changesObservedByFunction.length == 1));
+
+  changesObservedByObject = null;
+  changesObservedByFunction = null;
+  world.beginTransaction();
+  tokyo.voteToRetain();
+  tokyo.addEntry({value:"Japan"});
+  assertTrue('tokyoObserverObject does not yet see changes', (changesObservedByObject === null));
+  assertTrue('tokyoObserverFunction does not yet see changes', (changesObservedByFunction === null));
+  world.endTransaction();
+  assertTrue('tokyoObserverObject now sees changes', (changesObservedByObject !== null));
+  assertTrue('tokyoObserverObject now sees two changes', (changesObservedByObject.length == 2));
+  assertTrue('tokyoObserverFunction now sees changes', (changesObservedByFunction !== null));
+  assertTrue('tokyoObserverFunction now sees two changes', (changesObservedByFunction.length == 2));
+
+  changesObservedByObject = null;
+  changesObservedByFunction = null;
+  tokyo.removeObserver(tokyoObserverObject);
+  tokyo.removeObserver(tokyoObserverFunction);
+  tokyo.voteToDelete();
+  assertTrue('tokyoObserverObject no longer observes Tokyo', (changesObservedByObject === null));
+  assertTrue('tokyoObserverFunction no longer observes Tokyo', (changesObservedByFunction === null));
+}
+
+
+function testListObservation() {
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  
+  var apple = world.newItem("Apple");
+  var brownie = world.newItem("Brownie");  
+  var cupcake = world.newItem("Cupcake");
+
+  var categoryCalledFood = world.newCategory("Food");
+  apple.assignToCategory(categoryCalledFood);
+  brownie.assignToCategory(categoryCalledFood);
+  cupcake.assignToCategory(categoryCalledFood);
+
+  var tokyo = world.newItem("Tokyo");
+  var seattle = world.newItem("Seattle");
+
+  var changesObservedByObject = null;
+  var foodObserverObject = {};
+  foodObserverObject.observedListHasChanged = function (inList, inListOfChangeReports) {
+    changesObservedByObject = inListOfChangeReports;
+  };
+  var foodItems = world.getItemsInCategory(categoryCalledFood, foodObserverObject);
+
+  var changesObservedByFunction = null;
+  var foodObserverFunction = function (inList, inListOfChangeReports) {
+    changesObservedByFunction = inListOfChangeReports;
+  };
+  var alsoFoodItems = world.getItemsInCategory(categoryCalledFood, foodObserverFunction);
+  
+  apple.addEntry({value:"Red"});
+  assertTrue('foodObserverObject sees a change to apple', (changesObservedByObject !== null));
+  assertTrue('foodObserverFunction sees a change to apple', (changesObservedByFunction !== null));
+
+  changesObservedByObject = null;
+  changesObservedByFunction = null;
+  tokyo.addEntry({value:"Japan"});
+  assertTrue('foodObserverObject does not see a change to tokyo', (changesObservedByObject === null));
+  assertTrue('foodObserverFunction does not see a change to tokyo', (changesObservedByFunction === null));
+
+  world.removeListObserver(foodItems, foodObserverObject);
+  world.removeListObserver(alsoFoodItems, foodObserverFunction);
+  brownie.addEntry({value:"Brown"});
+  assertTrue('foodObserverObject no longer sees changes to food items', (changesObservedByObject === null));
+  assertTrue('foodObserverFunction no longer sees changes to food items', (changesObservedByFunction === null));
+}
+
+
+function testQueries() {
+  var attributeCalledCategory = world.getAttributeCalledCategory();
+  
+  var apple = world.newItem("Apple");
+  var brownie = world.newItem("Brownie");  
+  var cupcake = world.newItem("Cupcake");
+
+  var categoryCalledFood = world.newCategory("Food");
+  assertTrue('The category "Food" is an item', (categoryCalledFood instanceof orp.model.Item));
+  apple.assignToCategory(categoryCalledFood);
+  brownie.assignToCategory(categoryCalledFood);
+  cupcake.assignToCategory(categoryCalledFood);
+
+  var tokyo = world.newItem("Tokyo");
+  var seattle = world.newItem("Seattle");
+
+  var hasAll;
+  var queryForFoods = world.newQueryForItemsByCategory(categoryCalledFood);
+  var queryRunnerForFoods = world.newQueryRunner(queryForFoods);
+  var listOfFoods = queryRunnerForFoods.getResultItems();
+  
+  hasAll = orp.util.areObjectsInSet([apple, brownie, cupcake], listOfFoods);
+  assertTrue('Food query returns 3 foods', listOfFoods.length == 3);
+  assertTrue('Food query returns all 3 foods', hasAll);
+
+  world.setItemToBeIncludedInQueryResultList(tokyo, queryForFoods);
+  assertTrue('Tokyo is now a food', tokyo.isInCategory(categoryCalledFood));
+
+  listOfFoods = queryRunnerForFoods.getResultItems();
+  hasAll = orp.util.areObjectsInSet([apple, brownie, cupcake, tokyo], listOfFoods);
+  assertTrue('Food query returns 4 foods', listOfFoods.length == 4);
+  assertTrue('Food query returns all 4 foods', hasAll);
+
+  // test for queries using non-category attribute e.g. continent
+  var attributeCalledContinent = world.newItem("Continent");
+  tokyo.addEntry({attribute:attributeCalledContinent, value:"Asia"});
+  var beijing = world.newItem("Beijing");
+  beijing.addEntry({attribute:attributeCalledContinent, value:"Asia"});
+  var seattleEntry = seattle.addEntry({attribute:attributeCalledContinent, value:"North America"});
+  var queryRunnerForAsia = world.newQueryRunner({attribute: attributeCalledContinent, values:["Asia"]});
+  var listOfCountries = queryRunnerForAsia.getResultItems();
+  
+  assertTrue('Asia query returns 2 countries', listOfCountries.length == 2);
+  hasAll = orp.util.areObjectsInSet([tokyo,beijing], listOfCountries);
+  assertTrue('Asia query returns all 2 countries', hasAll);
+  
+  var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
+  var queryRunnerForNorthAmerica = world.newQueryRunner(northAmericaQuery);
+  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
+  assertTrue('North America query returned only Seattle',
+  listOfCountries.length == 1 && orp.util.isObjectInSet(seattle, listOfCountries));
+    
+  seattle.addEntry({attribute:attributeCalledContinent, value:"Asia"});
+  listOfCountries = queryRunnerForAsia.getResultItems();
+  assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
+  hasAll = orp.util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
+  assertTrue('Asia query returns all 3 countries', hasAll);
+  
+  world.setItemToBeIncludedInQueryResultList(beijing, northAmericaQuery);
+  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
+  assertTrue('Beijing is now in North America',orp.util.isObjectInSet(beijing, listOfCountries));
+  assertTrue('North America query returns 2 countries', listOfCountries.length == 2);
+  world.setItemToBeIncludedInQueryResultList(seattle, northAmericaQuery);
+  listOfCountries = queryRunnerForNorthAmerica.getResultItems();
+  assertTrue('North America still returns only 2 countries', listOfCountries.length == 2);
+}
+
+
+
+// Tests World._getFilteredList, via World.getUsers and World.getCategories.
+
+function testFilteredLists() {
+  var listOfCategories = world.getCategories();
+  var origNumberOfCategories = listOfCategories.length;
+  assertTrue("Should be at least 3 categories", origNumberOfCategories >= 3);
+  
+  var categoryCalledBlueThings = world.newCategory("BlueThings");
+  listOfCategories = world.getCategories();
+  assertTrue("Should be exactly one more category than before.", listOfCategories.length == origNumberOfCategories + 1);
+}
+
+function testItemTypes() {
+  var anEmail = world.newItem("Money saved for you at Nigerian Bank");
+  var fromAttribute = world.newAttribute("From");
+  var dateReceivedAttribute = world.newAttribute("Received");
+  var noOfAttachments = world.newAttribute("Number of attachments");
+  var subjectAttribute = world.newAttribute("Subject");
+  var aPerson = world.newItem("John Doe");
+  var subjectEntry = anEmail.addEntry({attribute:subjectAttribute, value:"Money saved for you at Nigerian Bank"});
+  var fromEntry = anEmail.addEntry({attribute:fromAttribute, value:aPerson});
+  var receivedEntry = anEmail.addEntry({attribute:dateReceivedAttribute, value:(new orp.util.DateValue("6/8/05"))});
+  var numAttachmentsEntry = anEmail.addEntry({attribute:noOfAttachments, value:4});
+}
+
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function waitForNextMillisecond() {
+  var now = new Date();
+  var then = now;
+  while (now.valueOf() == then.valueOf()) {
+    now = new Date();
+  }
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/model/test_BeforeLogin.html
===================================================================
--- trunk/tests/model/test_BeforeLogin.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_BeforeLogin.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for the data model</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="test_BeforeLogin.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for the data model</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/model/test_BeforeLogin.js
===================================================================
--- trunk/tests/model/test_BeforeLogin.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_BeforeLogin.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,154 @@
+/*****************************************************************************
+ test_BeforeLogin.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util */
+/*global World, Item, Entry */
+/*global StubArchive */
+/*global assertTrue, assertFalse, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+var world;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.model.World");
+  dojo.require("orp.archive.StubArchive");
+  dojo.require("orp.util.DateValue");
+
+  var pathToTrunkDirectory = "../..";
+  var stubArchive = new orp.archive.StubArchive(pathToTrunkDirectory);
+  world = new orp.model.World(stubArchive);
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+  
+function testIllegalAttemptToCreateItem() {
+  var caughtError = false;
+  try {
+    var newItem = world.newItem("The Great Wall of China");
+  } catch (error) {
+    caughtError = true;
+  }
+  assertTrue("We can't create a new item without being logged in", caughtError);
+}
+
+function testIllegalAttemptToCreateEntry() {
+  var caughtError = false;
+  var attributeCalledName = world.getAttributeCalledName();
+  try {
+    var newEntry = attributeCalledName.addEntry({value: "Name Too"});
+  } catch (error) {
+    caughtError = true;
+  }
+  assertTrue("We can't create a new entry without being logged in", caughtError);
+}
+
+function testAccessorsForAxiomaticItems() {
+  var i;
+  var item;
+  var uuid;
+  var listOfAssignedNames;
+  var nameEntry;
+  
+  var categoryCalledAttribute = world.getCategoryCalledAttribute();
+  var listOfAttributes = [];
+  listOfAttributes.push(world.getAttributeCalledName());
+  listOfAttributes.push(world.getAttributeCalledShortName());
+  listOfAttributes.push(world.getAttributeCalledSummary());
+  listOfAttributes.push(world.getAttributeCalledCategory());
+  listOfAttributes.push(world.getAttributeCalledUnfiled());
+  listOfAttributes.push(world.getAttributeCalledTag());
+  for (i in listOfAttributes) {
+    item = listOfAttributes[i];
+    listOfAssignedNames = item.getNameEntries();
+    assertTrue('Every axiomatic attribute has an array of names', dojo.lang.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic attribute has one name assigned', listOfAssignedNames.length == 1);
+    nameEntry = listOfAssignedNames[0];
+    assertTrue('Every axiomatic attribute has a name which is an entry', (nameEntry instanceof orp.model.Entry));
+    assertTrue('Every entry can be displayed as a string', dojo.lang.isString(nameEntry.getDisplayString()));
+    assertTrue('Every axiomatic attribute is in the category "Attribute"', item.isInCategory(categoryCalledAttribute));
+    var uuid = item.getUuid();
+    assertTrue('Every axiomatic attribute has a UUID', (uuid instanceof orp.uuid.Uuid));
+    assertTrue('getItemFromUuid() returns the right attribute', (world.getItemFromUuid(uuid) == item));
+  }
+  
+  var listOfCategories = [];
+  listOfCategories.push(world.getCategoryCalledAttribute());
+  listOfCategories.push(world.getCategoryCalledCategory());
+  listOfCategories.push(world.getCategoryCalledType());
+  for (i in listOfCategories) {
+    item = listOfCategories[i];
+    listOfAssignedNames = item.getNameEntries();
+    assertTrue('Every axiomatic category has an array of names', dojo.lang.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic category has one name assigned', listOfAssignedNames.length == 1);
+    nameEntry = listOfAssignedNames[0];
+    assertTrue('Every axiomatic category has a name which is entry', (nameEntry instanceof orp.model.Entry));
+    assertTrue('Every entry can be displayed as a string', dojo.lang.isString(nameEntry.getDisplayString()));
+  }
+  
+  var listOfTypes = [];
+  listOfTypes.push(world.getTypeCalledText());
+  listOfTypes.push(world.getTypeCalledNumber());
+  listOfTypes.push(world.getTypeCalledDate());
+  listOfTypes.push(world.getTypeCalledCheckMark());
+  listOfTypes.push(world.getTypeCalledUrl());
+  listOfTypes.push(world.getTypeCalledItem());
+  listOfTypes.push(world.getTypeCalledConnection());
+  for (i in listOfTypes) {
+    item = listOfTypes[i];
+    listOfAssignedNames = item.getNameEntries();
+    assertTrue('Every axiomatic type has an array of names', dojo.lang.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic type has one name assigned', listOfAssignedNames.length == 1);
+    nameEntry = listOfAssignedNames[0];
+    assertTrue('Every axiomatic type has a name which is entry', (nameEntry instanceof orp.model.Entry));
+    assertTrue('Every entry can be displayed as a string', dojo.lang.isString(nameEntry.getDisplayString()));
+  }
+}
+
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/model/test_SequentialUsers.html
===================================================================
--- trunk/tests/model/test_SequentialUsers.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_SequentialUsers.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for the data model</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="test_SequentialUsers.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for the data model</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/model/test_SequentialUsers.js
===================================================================
--- trunk/tests/model/test_SequentialUsers.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_SequentialUsers.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,282 @@
+/*****************************************************************************
+ test_SequentialUsers.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util */
+/*global World, Item, Entry */
+/*global StubArchive */
+/*global assertTrue, assertFalse, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+var world;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.model.World");
+  dojo.require("orp.archive.StubArchive");
+  dojo.require("orp.util.DateValue");
+
+  var pathToTrunkDirectory = "../..";
+  var stubArchive = new orp.archive.StubArchive(pathToTrunkDirectory);
+  world = new orp.model.World(stubArchive);
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+
+function testGetUserstamp() {
+  var listOfUsers = world.getUsers();  
+
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  var passwordForChris = "Kringlishous!";
+  var userChris = world.newUser("Chris Kringle", passwordForChris);
+
+  world.login(userJane, janesPassword);
+
+  assertTrue('The user Jane created the user Jane', (userJane.getUserstamp() == userJane));
+  
+  var starWars = world.newItem("Star Wars");
+  var recoveredUser = starWars.getUserstamp();
+  assertTrue("The user that created 'starWars' should be Jane", recoveredUser == userJane);
+  
+  world.logout();
+  world.login(userChris, passwordForChris);
+  var elephant = world.newItem("Elephant");
+  recoveredUser = elephant.getUserstamp();
+  assertTrue("The user that created 'elephant' should be Chris", recoveredUser == userChris);
+  recoveredUser = starWars.getUserstamp();
+  assertTrue("The user that created 'starWars' should be Jane", recoveredUser == userJane);  
+  world.logout();
+}
+
+
+function testLoginLogout() {
+  var listOfUsers;
+  var loginSuccess;
+  
+  listOfUsers = world.getUsers();
+  var originalLength = listOfUsers.length;
+  // assertTrue("Initially, there's only an axiomatic user", listOfUsers.length == 1);
+  // assertTrue('Nobody is logged in', world.getCurrentUser() === null);
+
+  var janesPassword = "jane's password";
+  var userJane = world.newUser("Jane Doe", janesPassword);  
+  listOfUsers = world.getUsers();
+  assertTrue("Now there is another user", listOfUsers.length == (originalLength + 1));
+  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
+
+  loginSuccess = world.login(userJane, "wrong password");
+  assertFalse('Can not log in with wrong password', loginSuccess);
+  assertTrue('Jane is not logged in', world.getCurrentUser() === null);
+
+  loginSuccess = world.login(userJane, janesPassword);
+  assertTrue('Can log in with right password', loginSuccess);
+  assertTrue('Jane is logged in', world.getCurrentUser() == userJane);
+  
+  world.logout();
+  assertTrue('Nobody is logged in', world.getCurrentUser() === null);
+  
+  var passwordForChris = "Kringlishous!";
+  var userChris = world.newUser("Chris Kringle", passwordForChris);
+  world.login(userChris, passwordForChris);
+  assertTrue('Chris is logged in', world.getCurrentUser() == userChris);
+  world.logout();
+  
+  world.login(userJane, janesPassword);
+  assertTrue('Jane is logged in', world.getCurrentUser() == userJane);
+  assertFalse('Chris is not logged in', world.getCurrentUser() == userChris);
+  var caughtError = false;
+  var oprahsPassword = "Oprah's password";
+  try {
+    var userOprah = world.newUser("Oprah", oprahsPassword);
+  } catch (error) {
+    caughtError = true;
+  }
+  assertTrue("We can't create a new user while Jane is logged in", caughtError);
+  world.logout();
+  
+  caughtError = false;
+  try {
+    var newItem = world.newItem("The Great Wall of China");
+  } catch (error) {
+    caughtError = true;
+  }
+  assertTrue("We can't create a new item without being logged in", caughtError);
+}
+ 
+
+  
+function testAdditionsAndRetrievals() {
+  var nameAttribute = world.getAttributeCalledName();
+  
+  var janesPassword = "jane's password";
+  var listOfCharacters = null;
+  var listOfEntries = null;
+  var listOfAttributes = null;
+  var worldRetrievalFilter = null;
+  var hasAll;
+  
+  var tZero = new Date();
+  
+  // operations done by Jane
+  var userJane = world.newUser("Jane Doe", janesPassword);
+  assertTrue('The user Jane created the user Jane', (userJane.getUserstamp() == userJane));
+   
+  world.login(userJane, janesPassword);
+
+  var characterAttribute = world.newAttribute("Characters");
+  var starWars = world.newItem("Star Wars");
+  assertTrue('getDisplayName() works for "Star Wars"', (starWars.getDisplayName() == "Star Wars"));
+
+  var luck = starWars.addEntry({attribute:characterAttribute, value:"Luck Skywalker"});
+  var c3po = starWars.addEntry({attribute:characterAttribute, value:"C3PO"});
+  var r2d2 = starWars.addEntry({value:"R2D2"});
+  assertTrue('"Star Wars" has not been deleted', !starWars.hasBeenDeleted());
+  assertTrue('"R2D2" has not been deleted', !r2d2.hasBeenDeleted());
+  assertTrue('"R2D2" has not been replaced', !r2d2.hasBeenReplaced());
+
+  listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
+  hasAll = orp.util.areObjectsInSet([luck, c3po], listOfCharacters);
+  assertTrue('"Star Wars" has characters: luck, c3po', hasAll);
+  assertTrue('Exactly 2 characters in Star Wars', listOfCharacters.length == 2);
+
+  var listOfValues = starWars.getValuesForAttribute(characterAttribute);
+  hasAll = orp.util.areObjectsInSet(["Luck Skywalker", "C3PO"], listOfValues);
+  assertTrue('"Star Wars" has characters: "Luck Skywalker", "C3PO"', hasAll);
+  assertTrue('Exactly 2 values for Star Wars characters', listOfValues.length == 2);
+
+  listOfEntries = starWars.getEntries();
+  hasAll = orp.util.areObjectsInSet([luck, c3po, r2d2], listOfEntries);
+  assertTrue('"Star Wars" has entries: luck, c3po, r2d2', hasAll);  
+  
+  var ordinalA = starWars.getOrdinalNumberAtCreation();
+  var ordinalB = starWars.getOrdinalNumber();
+  assertTrue('"Star Wars" ordinal values match', ordinalA == ordinalB);  
+  
+  var starWarsTimestamp = starWars.getTimestamp();
+  var now = new Date();
+  // alert("now: " + now + "\nstar wars: " + starWarsTimestamp);
+  assertTrue('"Star Wars" has a timestamp in the past', now.valueOf() >= starWarsTimestamp);  
+  assertTrue('"Star Wars" was created after tZero', starWarsTimestamp >= tZero.valueOf());  
+
+  var starWarsUserstamp = starWars.getUserstamp();
+  assertTrue('"Star Wars" was made by Jane', starWarsUserstamp == userJane);    
+
+  listOfAttributes = starWars.getAttributes();
+  hasAll = orp.util.areObjectsInSet([nameAttribute, characterAttribute], listOfAttributes);
+  assertTrue('"Star Wars" has both expected attributes', hasAll);
+  
+  worldRetrievalFilter = world.getRetrievalFilter();
+  assertTrue('Default retrieval filter is "last edit wins"', worldRetrievalFilter == orp.model.World.RetrievalFilter.LAST_EDIT_WINS);
+  
+  var luke = starWars.replaceEntry({previousEntry:luck, value:"Luke Skywalker"});
+  var previousEntry = luke.getPreviousEntry();
+  assertTrue('"Luke" has the previous version "Luck"', previousEntry !== null);
+  assertTrue('"Luck" has been replaced', luck.hasBeenReplaced());
+  assertTrue('"Luck" is a entry in "Star Wars"', luck.getItem() == starWars);
+
+  listOfEntries = starWars.getEntries();
+  hasAll = orp.util.areObjectsInSet([luke, c3po, r2d2], listOfEntries);
+  assertTrue('"Star Wars" has entries: luke, c3po, r2d2', hasAll);  
+
+  listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
+  hasAll = orp.util.areObjectsInSet([luke, c3po], listOfCharacters);
+  assertTrue('"Star Wars" has characters: luke, c3po', hasAll);
+  assertTrue('Exactly 2 characters in the star wars', listOfCharacters.length == 2);
+
+  world.logout();
+  
+  // operations done by Chris
+  var passwordForChris = "Kringlishous!";
+  var userChris = world.newUser("Chris Kringle", passwordForChris);
+  world.login(userChris, passwordForChris);
+
+  r2d2 = starWars.addEntry({previousEntry:r2d2, attribute:characterAttribute, value:"R2D2"});
+  assertTrue('"R2D2" is now character', r2d2.getAttribute() == characterAttribute);
+  previousEntry = r2d2.getPreviousEntry();
+  assertTrue('"R2D2" has a previous version', previousEntry !== null);
+
+  var failure = starWars.addEntry({previousEntry:r2d2, value:"R2D2"});
+  assertTrue("Can't replace a value with an identical value", failure === null);
+
+  listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
+  var hasR2d2 = orp.util.isObjectInSet(r2d2, listOfCharacters);
+  hasAll = orp.util.areObjectsInSet([luke, c3po, r2d2], listOfCharacters);
+  assertTrue('Chris sees R2D2 as a character', hasR2d2);
+  assertTrue('Chris sees characters: luke, c3po, r2d2', hasAll);
+  assertTrue('Chris sees 3 characters in "Star Wars"', listOfCharacters.length == 3);
+  
+  var attributeCalledName = world.getAttributeCalledName();
+  var theHobbit = world.newItem("The Hobbit");
+  theHobbit.addEntry({attribute:attributeCalledName, value:"There and Back Again"});
+  listOfEntries = theHobbit.getEntriesForAttribute(attributeCalledName);
+  assertTrue('"The Hobbit" has two names', listOfEntries.length == 2);
+  assertTrue('getDisplayName() returns the first name', (starWars.getDisplayName() == "Star Wars"));
+  var listOfNames = theHobbit.getNameEntries();
+  assertTrue('getContentData() returns a string', listOfNames[0].getValue() == "The Hobbit");
+  hasAll = orp.util.areObjectsInSet(listOfNames, listOfEntries);
+  hasAll = hasAll && orp.util.areObjectsInSet(listOfEntries, listOfNames);
+  assertTrue('getName() matches getEntriesForAttribute(attributeCalledName)', hasAll);
+  
+  world.logout();
+}
+
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function waitForNextMillisecond() {
+  var now = new Date();
+  var then = now;
+  while (now.valueOf() == then.valueOf()) {
+    now = new Date();
+  }
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/model/test_dependencies.html
===================================================================
--- trunk/tests/model/test_dependencies.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_dependencies.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Dependency tests for the orp.model package</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="test_dependencies.js"></script>
+  </head>
+  
+  <body>
+    <h1>Dependency tests for the orp.model package</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/model/test_dependencies.js
===================================================================
--- trunk/tests/model/test_dependencies.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/model/test_dependencies.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,66 @@
+/*****************************************************************************
+ test_dependencies.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.model.ContentRecord");
+  dojo.require("orp.model.Entry");
+  dojo.require("orp.model.Item");
+  dojo.require("orp.model.Ordinal");
+  dojo.require("orp.model.ProxyEntry");
+  dojo.require("orp.model.QueryRunner");
+  dojo.require("orp.model.Record");
+  dojo.require("orp.model.Transaction");
+  dojo.require("orp.model.Vote");
+  dojo.require("orp.model.World");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDependencies() {
+  assertTrue("orp.model depends only on lang, util, uuid, archive, and storage", orp.util.hasExactlyTheseProperties(orp, ["model", "lang", "util", "uuid", "archive", "storage"]));
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/storage/DirectoryReadingTest.js
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/storage/DirectoryReadingTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -35,7 +35,7 @@
 function setUp() {
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.require("orp.storage.FileSystem");
+  dojo.require("orp.storage.directoryList");
   dojo.require("orp.util.Util");
   orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION = "../..";
   orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY = "tests/storage";
@@ -60,7 +60,11 @@
   assertTrue("List should include 'suffixless_file_1'.", orp.util.isObjectInSet("suffixless_file_1", dirList));
   assertTrue("List should include 'javascript_file_2.js'.", orp.util.isObjectInSet("javascript_file_2.js", dirList));
   assertTrue("List should include 'text_file_1.txt'.", orp.util.isObjectInSet("text_file_1.txt", dirList));
-  assertTrue("List should include exactly six files.", dirList.length == 6);
+  var expectedNumberOfFiles = 6;
+  if (orp.util.isObjectInSet(".svn", dirList)) {
+    expectedNumberOfFiles += 1;
+  }
+  assertTrue("List should include the expected number of files.", dirList.length == expectedNumberOfFiles);
 }
 
 function testGetDirListForMissingDir() {

Modified: trunk/tests/storage/LintTest.js
===================================================================
--- trunk/tests/storage/LintTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/storage/LintTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -57,9 +57,10 @@
   var listOfSourceCodeFiles = [
     "Storage.js",
     "FakeStorage.js",
-    "FileStorage.js",
-    "HttpStorage.js",
-    "FileSystem.js"];
+    "FileProtocolStorage.js",
+    "HttpProtocolStorage.js",
+    "directoryList.js",
+    "fileProtocolUtil.js"];
   var prefix = "../../../source/storage/";
   var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
   var message = "Lint check \n" + errorReport;

Modified: trunk/tests/storage/StorageTest.js
===================================================================
--- trunk/tests/storage/StorageTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/storage/StorageTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -41,15 +41,15 @@
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.Util");
-  dojo.require("orp.storage.FileStorage");
-  dojo.require("orp.storage.HttpStorage");
+  dojo.require("orp.storage.FileProtocolStorage");
+  dojo.require("orp.storage.HttpProtocolStorage");
 
   utilAssertReportedError = false;
   orp.util.setErrorReportCallback(errorReporter)
 
-  var isHttp = window.location.protocol == "http:";
-  saver = isHttp? new orp.storage.HttpStorage(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromThisDirectory) 
-                : new orp.storage.FileStorage(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromThisDirectory);
+  var isHttp = (window.location.protocol == "http:");
+  saver = isHttp? new orp.storage.HttpProtocolStorage(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromThisDirectory) 
+                : new orp.storage.FileProtocolStorage(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromThisDirectory);
 
   // Examples of what window.location.pathname should look like:
   // for http: protocol: /openrecord/trunk/source/model/TestRepositoryWriting.html
@@ -124,22 +124,18 @@
 }
 
 function fileHasExpectedContents(expectedContents) {
-  // var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
   var contents = dojo.hostenv.getText(fileUrl);
   for (var i = 0; contents != expectedContents && i < 5; ++i) {
     waitASecond();
-    // contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
     contents = dojo.hostenv.getText(fileUrl);
   }
   return (contents == expectedContents);
 }
 
 function fileHasExpectedSubstring(expectedSubstring) {
-  // var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
   var contents = dojo.hostenv.getText(fileUrl);
   for (var i = 0; contents.indexOf(expectedSubstring) == -1 && i < 5; ++i) {
     waitASecond();
-    // contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
     contents = dojo.hostenv.getText(fileUrl);
   }
   return (contents.indexOf(expectedSubstring) != -1);

Modified: trunk/tests/storage/TestSuite.html
===================================================================
--- trunk/tests/storage/TestSuite.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/storage/TestSuite.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -26,6 +26,7 @@
         testSuite.addTestPage("../../../tests/storage/StorageTest.html");
         testSuite.addTestPage("../../../tests/storage/DirectoryReadingTest.html");
         testSuite.addTestPage("../../../tests/storage/LintTest.html");
+        testSuite.addTestPage("../../../tests/storage/test_dependencies.html");
         return testSuite;
       }
     </script>

Added: trunk/tests/storage/test_dependencies.html
===================================================================
--- trunk/tests/storage/test_dependencies.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/storage/test_dependencies.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Dependency tests for the orp.storage package</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="test_dependencies.js"></script>
+  </head>
+  
+  <body>
+    <h1>Dependency tests for the orp.storage package</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/storage/test_dependencies.js
===================================================================
--- trunk/tests/storage/test_dependencies.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/storage/test_dependencies.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,68 @@
+/*****************************************************************************
+ test_dependencies.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.storage.Storage");
+  dojo.require("orp.storage.FakeStorage");
+  dojo.require("orp.storage.FileProtocolStorage");
+  dojo.require("orp.storage.HttpProtocolStorage");
+  dojo.require("orp.storage.directoryList");
+  dojo.require("orp.storage.fileProtocolUtil");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDependencies() {
+  assertTrue("orp.lang is defined", ((typeof orp.lang) === 'object'));
+  assertTrue("orp.storage is defined", ((typeof orp.storage) === 'object'));
+  var i = 0;  
+  for (var key in orp) {
+    ++i;
+  }
+  assertTrue("Only orp.lang and orp.storage are defined", (i === 2));
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/util/TestSuite.html
===================================================================
--- trunk/tests/util/TestSuite.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/util/TestSuite.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -29,6 +29,7 @@
         testSuite.addTestPage("../../../tests/util/UtilTest.html");
         testSuite.addTestPage("../../../tests/util/XmlConverterTest.html");
         testSuite.addTestPage("../../../tests/util/XmlConverterMultiplePassesTest.html");
+        testSuite.addTestPage("../../../tests/util/test_dependencies.html");
         return testSuite;
       }
     </script>

Modified: trunk/tests/util/UtilTest.js
===================================================================
--- trunk/tests/util/UtilTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/util/UtilTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -106,6 +106,8 @@
 }
 
 function testHasProperty() {
+  var expectedProperties = {name: "name", provinces: "provinces" };
+  var unexpectedProperties = {foo: "foo", bar: "bar" };
   var canada = {name:"Canada", provinces:8};
   var atlantis = {};
 
@@ -115,17 +117,24 @@
   assertTrue('Atlantis does not have a name', !orp.util.hasProperty(atlantis, "name"));
 
   assertTrue('Atlantis has []', orp.util.hasProperties(atlantis, []));
+  assertTrue('Atlantis has {}', orp.util.hasProperties(atlantis, {}));
   assertTrue('Canada has ["name", "provinces"]', orp.util.hasProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada has expectedProperties', orp.util.hasProperties(canada, expectedProperties));
   assertTrue('Canada has ["name"]', orp.util.hasProperties(canada, ["name"]));
   assertTrue('Canada has []', orp.util.hasProperties(canada, []));
+  assertTrue('Canada has {}', orp.util.hasProperties(canada, {}));
   assertTrue('Canada does not have ["foo", "bar"]', !orp.util.hasProperties(canada, ["foo", "bar"]));
+  assertTrue('Canada does not have unexpectedProperties', !orp.util.hasProperties(canada, unexpectedProperties));
 
   assertTrue('Canada has only ["name", "provinces"]', orp.util.hasNoUnexpectedProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada has only expectedProperties', orp.util.hasNoUnexpectedProperties(canada, expectedProperties));
   assertTrue('Canada does not have just ["name"]', !orp.util.hasNoUnexpectedProperties(canada, ["name"]));
   
   assertTrue('Canada does not have just ["name"]', !orp.util.hasExactlyTheseProperties(canada, ["name"]));
   assertTrue('Canada has ["name", "provinces"]', orp.util.hasExactlyTheseProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada has expectedProperties', orp.util.hasExactlyTheseProperties(canada, expectedProperties));
   assertTrue('Canada does not have ["name", "provinces", "foo"]', !orp.util.hasExactlyTheseProperties(canada, ["name", "provinces", "foo"]));
+  assertTrue('Canada does not have unexpectedProperties', !orp.util.hasExactlyTheseProperties(canada, unexpectedProperties));
 }
 
 // -------------------------------------------------------------------

Added: trunk/tests/util/test_dependencies.html
===================================================================
--- trunk/tests/util/test_dependencies.html	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/util/test_dependencies.html	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Dependency tests for the orp.util package</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="test_dependencies.js"></script>
+  </head>
+  
+  <body>
+    <h1>Dependency tests for the orp.util package</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/util/test_dependencies.js
===================================================================
--- trunk/tests/util/test_dependencies.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/util/test_dependencies.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -0,0 +1,63 @@
+/*****************************************************************************
+ test_dependencies.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.Util");
+  dojo.require("orp.util.Cookie");
+  dojo.require("orp.util.CsvParser");
+  dojo.require("orp.util.DateValue");
+  dojo.require("orp.util.LintTool");
+  // dojo.require("orp.util.XmlConverter");  // FIX_ME: need to move XmlConverter out of util
+}
+
+function tearDown() {
+  UtilTestVars = null;
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDependencies() {
+  assertTrue("Only orp.lang and orp.util are defined", orp.util.hasExactlyTheseProperties(orp, ["lang", "util"]));
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/uuid/UuidTest.js
===================================================================
--- trunk/tests/uuid/UuidTest.js	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/tests/uuid/UuidTest.js	2005-11-01 05:23:19 UTC (rev 371)
@@ -60,6 +60,10 @@
 // Test functions
 // -------------------------------------------------------------------
 
+function testDependencies() {
+  assertTrue("orp.uuid depends on only opr.lang and orp.util.", orp.util.hasExactlyTheseProperties(orp, ["uuid", "lang", "util"]));
+}
+
 function testGet64bitArrayFromFloat() {
   var x = Math.pow(2, 63) + Math.pow(2, 15);
   var result = TimeBasedUuid._get64bitArrayFromFloat(x);
@@ -206,61 +210,6 @@
   arrayOfParts = uuid4.split("-");
   section4 = arrayOfParts[4];
   assertTrue('Section 4 = node input', section4 == "123456789ABC");
-
-  /* 
-  // Old code that Brian wrote to try to get a sense of how
-  // many UUIDs we can create in a single millisecond 
-  var array = [];
-  var now = new Date();
-  var then = new Date();
-  while (now.valueOf() == then.valueOf()) {
-    then = new Date();
-  }
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  alert(array[0] + "\n" + 
-        array[1] + "\n" + 
-        array[2] + "\n" + 
-        array[3] + "\n" + 
-        array[4] + "\n" + 
-        array[5] + "\n" + 
-        array[6] + "\n" + 
-        array[7] + "\n" + 
-        array[8] + "\n" + 
-        array[9] + "\n" + 
-        array[10] + "\n" + 
-        array[11] + "\n" + 
-        array[12] + "\n" + 
-        array[13] + "\n" + 
-        array[14] + "\n" + 
-        array[15] + "\n" + 
-        array[16] + "\n" + 
-        array[17] + "\n" + 
-        array[18] + "\n" + 
-        array[19] + "\n");
-  */
 }
 
 function testGenericUuids() {



From skinner at berlios.de  Wed Nov  2 02:02:15 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 2 Nov 2005 02:02:15 +0100
Subject: [openrecord-svn] r372 - trunk/repositories
Message-ID: <200511020102.jA212FfR005009@sheep.berlios.de>

Author: skinner
Date: 2005-11-02 02:02:09 +0100 (Wed, 02 Nov 2005)
New Revision: 372

Modified:
   trunk/repositories/open_agenda.json
Log:
Made a few little changes to the open_agenda.json demo repository.

Modified: trunk/repositories/open_agenda.json
===================================================================
--- trunk/repositories/open_agenda.json	2005-11-01 05:23:19 UTC (rev 371)
+++ trunk/repositories/open_agenda.json	2005-11-02 01:02:09 UTC (rev 372)
@@ -3051,4 +3051,84 @@
          "uuid": "99bbf350-1a48-11da-8163-000c414ce854",
        "record": "7b5e3b80-0c6e-11da-beea-000c414ce854",
         "value": "11da0c6e295652f0809241c4c94a9e4b91b99370"  }
+},
+{ "Vote": {
+         "uuid": "3ad820c0-4b3a-11da-87ec-000c414ce854",
+       "record": "50c72f40-0c7c-11da-9290-000c414ce854",
+   "retainFlag": "false"  }
+},
+{ "Vote": {
+         "uuid": "3d9e93c0-4b3a-11da-87ec-000c414ce854",
+       "record": "4e9470c0-0c7c-11da-9290-000c414ce854",
+   "retainFlag": "false"  }
+},
+{ "Vote": {
+         "uuid": "40604bd0-4b3a-11da-87ec-000c414ce854",
+       "record": "4bac9310-0c7c-11da-9290-000c414ce854",
+   "retainFlag": "false"  }
+},
+{ "Vote": {
+         "uuid": "43568160-4b3a-11da-87ec-000c414ce854",
+       "record": "f49d4830-0c7b-11da-9290-000c414ce854",
+   "retainFlag": "false"  }
+},
+{ "Entry": {
+         "uuid": "7bc44e60-4b3a-11da-87ec-000c414ce854",
+"previousEntry": "0a153be0-0c7d-11da-9290-000c414ce854",
+         "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "7da5a790-0c7b-11da-9290-000c414ce854",
+         "item": "2a165120-0c7a-11da-9290-000c414ce854",
+        "value": "Jan 2002"  }
+},
+{ "Entry": {
+         "uuid": "98e60a10-4b3a-11da-87ec-000c414ce854",
+         "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "7da5a790-0c7b-11da-9290-000c414ce854",
+         "item": "23d66ed0-0c7a-11da-9290-000c414ce854",
+        "value": "1999"  }
+},
+{ "Entry": {
+         "uuid": "9acc5640-4b3a-11da-87ec-000c414ce854",
+"previousEntry": "89a76d20-0c7c-11da-9290-000c414ce854",
+         "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "7da5a790-0c7b-11da-9290-000c414ce854",
+         "item": "0fb64d80-0c7a-11da-9290-000c414ce854",
+        "value": "1957"  }
+},
+{ "Entry": {
+         "uuid": "9f091590-4b3a-11da-87ec-000c414ce854",
+"previousEntry": "c7cd00b0-0c7c-11da-9290-000c414ce854",
+         "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "7da5a790-0c7b-11da-9290-000c414ce854",
+         "item": "08bedb00-0c7a-11da-9290-000c414ce854",
+        "value": "Aug 1974"  }
+},
+{ "Entry": {
+         "uuid": "a6991e90-4b3a-11da-87ec-000c414ce854",
+"previousEntry": "98e60a10-4b3a-11da-87ec-000c414ce854",
+         "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "7da5a790-0c7b-11da-9290-000c414ce854",
+         "item": "23d66ed0-0c7a-11da-9290-000c414ce854",
+        "value": "Thursday, August 12, 1999"  }
+},
+{ "Entry": {
+         "uuid": "b0cbbee0-4b3a-11da-87ec-000c414ce854",
+"previousEntry": "9acc5640-4b3a-11da-87ec-000c414ce854",
+         "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "7da5a790-0c7b-11da-9290-000c414ce854",
+         "item": "0fb64d80-0c7a-11da-9290-000c414ce854",
+        "value": "Mon Aug 12 1957 11:02:00 GMT-0800 (Pacific Standard Time)"  }
+},
+{ "Entry": {
+         "uuid": "b2c78ee0-4b3a-11da-87ec-000c414ce854",
+"previousEntry": "9438ebc0-0c7b-11da-9290-000c414ce854",
+         "type": "00001022-ce7f-11d9-8cd5-0011113ae5d6",
+    "attribute": "7da5a790-0c7b-11da-9290-000c414ce854",
+         "item": "cacb53f0-0c79-11da-9290-000c414ce854",
+        "value": "1987"  }
+},
+{ "Ordinal": {
+         "uuid": "bfd3dc10-4b3a-11da-87ec-000c414ce854",
+       "record": "f1598550-0c6f-11da-beea-000c414ce854",
+        "value": "11da0c6ff159855049dfc611cb5c6294"  }
 }
\ No newline at end of file



From skinner at berlios.de  Wed Nov  2 04:20:24 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 2 Nov 2005 04:20:24 +0100
Subject: [openrecord-svn] r373 - in trunk: documentation web_pages/content
Message-ID: <200511020320.jA23KOG0003968@sheep.berlios.de>

Author: skinner
Date: 2005-11-02 04:20:21 +0100 (Wed, 02 Nov 2005)
New Revision: 373

Added:
   trunk/documentation/old_iteration_1_plans.txt
   trunk/documentation/to_do_history.txt
   trunk/documentation/to_do_list.txt
Removed:
   trunk/documentation/release_planning.txt
Modified:
   trunk/web_pages/content/dev.html
Log:
Split the old release_planning.txt file into three new files: to_do_list.txt, to_do_history.txt, and old_iteration_1_plans.txt

Added: trunk/documentation/old_iteration_1_plans.txt
===================================================================
--- trunk/documentation/old_iteration_1_plans.txt	2005-11-02 01:02:09 UTC (rev 372)
+++ trunk/documentation/old_iteration_1_plans.txt	2005-11-02 03:20:21 UTC (rev 373)
@@ -0,0 +1,108 @@
+================================================================
+Old Release Planning doc for release 0.1 of OpenRecord
+================================================================
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+----------------------------------------------------------------
+    
+    
+
+===================================================
+Iterations
+===================================================
+Three iterations that last 1-month each?
+  1. May iteration
+  2. June iteration
+  3. July iteration
+  
+Release 0.1 at the start of August?
+
+
+
+
+=======================================================
+"User Stories" we want to include in release 0.1
+=======================================================
+ + A user can see a list of user stories, sorted by the "priority" attribute.
+ + A user can see a list of tasks planned for an iteration
+ + A user can see a list of tasks finished in an iteration.
+
+ + A user can see a list of all known tasks.
+ + A user can see a list of all completed tasks.
+ + A user can see a list of the tasks that they have signed up for.
+ + A user can see the measured velocity for previous iterations.
+
+ + A user can log into the web site, and log out.
+ + A logged-in user can create items to track:
+    tasks, stories, bugs, iterations, and releases.
+ + A logged-in user can delete items (tasks, stories, bugs, etc.).
+ + A logged-in user can edit the attributes of a task, story, bug, etc.
+ + A logged-in user can assign a task to a user story.
+ + A logged-in user can assign a story to a release.
+ + A logged-in user can assign a task to an iteration.
+ + A logged-in user can sign up to do a task.
+ + A logged-in user can report a bug.
+ + A logged-in user can assign a number to the "priority" attribute of a story.
+ + Different users can each have their own "priority" attribute; each user can prioritize a story differently.
+ 
+ + The data store is reliable. Users can trust that data won't be lost.
+ 
+ 
+ 
+=======================================================
+"User Stories" we want to defer until after release 0.1
+=======================================================
+ + A user can see everything that was ever saved.
+ + A user can see past versions of an item.
+ + We can move all the content on the current "static" openrecord.org 
+   site to a new replacement openrecord.org site built using the 
+   OpenRecord software.
+ + A logged-in user can write up weekly status reports.
+                               
+
+
+=======================================================
+Categories and Attributes we might use for release 0.1
+=======================================================
+(*) == reference to another item
+
+User Story
+  name
+  summary
+  priority
+  release this story is assigned to (*)
+  
+Iteration
+  name
+  date completed
+  tasks we plan to do in this iteration (*)
+  release (*)
+  
+Release
+  name
+  date completed
+  iterations leading up to this release (*)
+  user stories assigned to this release (*)
+  
+User
+  name
+  tasks this person is signed-up for (*)
+  
+Task
+  name
+  summary
+  user story (or category) this task falls into (*)
+  person who has signed-up to do this task (*)
+  estimate of how long this task will take
+  iteration in which we plan to do this task (*)
+  iteration in which this task was started (*)
+  iteration in which this task was finished (*)
+  status text
+  
+Bug
+  name
+  summary
+  (most Bug items will also be categorized as Task items, so each Bug will also 
+  have all the attributes of a Task)
+  
\ No newline at end of file

Deleted: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-11-02 01:02:09 UTC (rev 372)
+++ trunk/documentation/release_planning.txt	2005-11-02 03:20:21 UTC (rev 373)
@@ -1,707 +0,0 @@
-================================================================
-Release Planning
-   for release 0.1 of OpenRecord
-================================================================
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-----------------------------------------------------------------
-    
-    
-
-===================================================
-Iterations
-===================================================
-Three iterations that last 1-month each?
-  1. May iteration
-  2. June iteration
-  3. July iteration
-  
-Release 0.1 at the start of August?
-
-
-
-
-=======================================================
-"User Stories" we want to include in release 0.1
-=======================================================
- + A user can see a list of user stories, sorted by the "priority" attribute.
- + A user can see a list of tasks planned for an iteration
- + A user can see a list of tasks finished in an iteration.
-
- + A user can see a list of all known tasks.
- + A user can see a list of all completed tasks.
- + A user can see a list of the tasks that they have signed up for.
- + A user can see the measured velocity for previous iterations.
-
- + A user can log into the web site, and log out.
- + A logged-in user can create items to track:
-    tasks, stories, bugs, iterations, and releases.
- + A logged-in user can delete items (tasks, stories, bugs, etc.).
- + A logged-in user can edit the attributes of a task, story, bug, etc.
- + A logged-in user can assign a task to a user story.
- + A logged-in user can assign a story to a release.
- + A logged-in user can assign a task to an iteration.
- + A logged-in user can sign up to do a task.
- + A logged-in user can report a bug.
- + A logged-in user can assign a number to the "priority" attribute of a story.
- + Different users can each have their own "priority" attribute; each user can prioritize a story differently.
- 
- + The data store is reliable. Users can trust that data won't be lost.
- 
- 
- 
- 
-=======================================================
-"User Stories" we want to defer until after release 0.1
-=======================================================
- + A user can see everything that was ever saved.
- + A user can see past versions of an item.
- + We can move all the content on the current "static" openrecord.org 
-   site to a new replacement openrecord.org site built using the 
-   OpenRecord software.
- + A logged-in user can write up weekly status reports.
- 
- 
- 
-################################################################################
-################################################################################
-##                                                                            ##
-##                                Iteration #1                                ##
-##                                  May 2005                                  ##
-##                                                                            ##
-################################################################################
-################################################################################
- 
-
-=======================================================
-Tasks we need to do for the release 0.1 user stories
-=======================================================
-
-IED == an "ideal engineering day", with just coding, and no distractions
-
----------------------------------------------------------------------------
-   Tasks we originally identified for release 0.1, back on May 2, 2005
--------+----------+---------+----------------------------------------------
-Who    | Priority | Estimate| Task
--------+----------+---------+----------------------------------------------
- Chao  |    done? | 1   IED | UI for adding an attribute to an item
-Brian  |    done? |         | UI for setting the expected data type of an attribute
-Mignon |    done  | 1   IED | UI for creating a new category
-Mignon | High     | 1   IED | UI for deleting a row from a table 
- Chao  |   done   | 1.5 IED | UI for logging in and logging out; cookies and auto-login; display of who you're logged in as
- Chao  |   done   | 0.5 IED | UI to sort a table when you click on a column header (2 ied, needed to refactor TablePlugin to DOM level 2)
-Brian  |   done   | 1   IED | Data model: change "Value" to "Entry"; refactor entries to be per-attribute
-Brian  |   done   | 2   IED | Convert UI code to use new data model
-       | High     |         | UI for entering a number literal (instead of a string literal) in a table
-Brian  |    done? |         | UI for entering references to categories or to other items
- Chao  |    done  | 0.5 IED | UI for adding a new section to a page
-Mignon |    done? |         | UI for editing the query that a section uses
-       | Medium   |         | Verify/fix the bug that happens when you call the PHP server code with no POST data
-Brian  |   done   | 0   IED | Replace the Edit/Save button with a Lock/Unlock UI; automatically save changes as they happen
-Brian  |   done   | 1   IED | Replace the BigLumpVirtualServer with an DeltaVirtualServer; Change PHP code to append to the data file
-       | Low      |         | Convert UI code from DOM level 0 to DOM level 2
-       | Low      |         | Write a plugin view that calculates and displays the measured project velocity
-Mignon |   done   |         | UI for creating a new page
- Chao  |   done   |         | UI for creating a new user
--------+----------+---------+----------------------------------------------
- 
-
----------------------------------------------------------------------------
-   Additional "hidden" tasks that we uncovered during May
--------+----------+---------+----------------------------------------------
-Who    | Priority | Estimate| Task
--------+----------+---------+----------------------------------------------
- Chao  |   done   | 0   IED | Re-implement UI for entering a new row in a table (1.5 IED actual)
- Chao  |   done   |         | Refactor TablePlugin to DOM Level 2 (1.5 IED actual)
-Brian  |   done   | 1   IED | Ensure that UUIDs are unique in multi-user use case
- Chao  |   done   | 1   IED | Refactor plugin class, pass a query to plugin, create Plugin base class
--------+----------+---------+----------------------------------------------
-
-
----------------------------------------------------------------------------
-   New tasks that we decided to take on for release 0.1
--------+----------+---------+----------------------------------------------
-Who    | Priority | Estimate| Task
--------+----------+---------+----------------------------------------------
-Mignon |   done   |         | Generate time-based UUIDs ("version 1" UUIDs)
-Chao   |   done   | 1   IED | Allow users to view multiple entries in a table plugin cell (0.5 IED actual)
-Chao   |   done   | 2   IED | Allow users to enter/edit multiple entries in a table plugin cell (1 IED actual)
-Chao   |   done   |         | Have Escape key undo current editing in active field
-Chao   |   done   |         | In table columns where the expected type is a Category, when the user enters text, create a new item with that name and category
--------+----------+---------+----------------------------------------------
-
-
-
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-     Summary of Iteration #1
-            May 2005
-      May 2 to June 6, 2005
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-  14    = number of PLANNED tasks that were finished 
-   4    = number of HIDDEN tasks that were finished 
-   5    = number of ADDITIONAL tasks that were finished 
- ~19   = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
-   5    = number of weeks in May iteration
- ~ 3.8 = Velocity (in estimated IEDs per week)
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
- 
-
-################################################################################
-################################################################################
-##                                                                            ##
-##                                Iteration #2                                ##
-##                                  June 2005                                 ##
-##                                                                            ##
-################################################################################
-################################################################################
- 
-
----------------------------------------------------------------------------
-   Tasks we originally identified for Iteration #2, in June 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  | 0.25     | 0.25    |  1. Set up a prototype of the OpenRecord.org "dogfood" site
-mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
-mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
-brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
-       |          |         |  5. UI for deleting a row from a table
-brian  | 0.5  IED | 0.25    |  6. Save provisional item and then set the category, in that order, and in one transaction
-brian  | 0.25 IED | 0.25    |  7. Fix the bug that happens when you call the PHP server code with no POST data
-chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
-chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
-brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
-chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
-       |          |         | 12. Make sure view code uses transactions
-       |          |         | 13. Deal with \n in page name or summary fields
-       |          |         | 14. BUG: problems with newlines and HTML characters in text strings
-brian  | 0.5  IED |         | 15. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
--------+----------+---------+----------------------------------------------
-
-
----------------------------------------------------------------------------
- Additional "hidden" tasks we uncovered during Iteration #2, in June 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  |          | 0.5     |     Update the JSON repository file to use time-based UUIDs
-brian  |          | 0.25    |     Get deletion votes working again after switching to time-based UUIDs
-brian  |          | 0.25    |     Enabled one server to serve N pages running against N repository files
-brian  |          | 0.5     |     Convert the code to use bi-directional references
-brian  |          | 0.25    |     Convert the axiomatic items to use bi-directional reference
-brian  |          | 0.75    |     Misc. other improvements to the repository JSON format
--------+----------+---------+----------------------------------------------
-
-
----------------------------------------------------------------------------
-   New tasks that we decided to take on for Iteration #2, in June 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-chao   |          | done    | 16. Have text-entries and reference-entries look different
-mignon |          | done    | 24. Display Navbar pages in the right order
-chao   |          | done    | 25. Arrow keys in SuggestionBox
-chao   | 1.5 IED  | done    | 27. Change UI so that non-literal entries are immutable
-mignon |          | done    | 30. Have identifiedRecord.getTimestamp() get the time from the UUID 
-chao   | 1.5 IED  | 1.5 IED | 39. improve UI for editing the query that a section uses
-chao   | 0.5 IED  | 0.5 IED |     Improved UI for autocomplete
-chao   | 0.5 IED  | 0.5 IED |     Allow plugins to store layout data
-chao   | 0.5 IED  | 0.5 IED |     Table plugin persists column order
-brian  |          | 0.5 IED | 48. Add a Query.js class, and/or an Attribute.js class
--------+----------+---------+----------------------------------------------
-
-
-
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-     Summary of Iteration #2
-            June 2005
-     June 6 to July 4, 2005
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-  10    = number of PLANNED tasks that were finished 
-   6    = number of HIDDEN tasks that were finished 
-  10    = number of ADDITIONAL tasks that were finished 
- ~14   = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
-   4    = number of weeks in June iteration
- ~ 3.5 = Velocity (in estimated IEDs per week)
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-   
-
-################################################################################
-################################################################################
-##                                                                            ##
-##                                Iteration #3                                ##
-##                                  July 2005                                 ##
-##                                                                            ##
-################################################################################
-################################################################################
-
-
----------------------------------------------------------------------------
-   Tasks we originally identified for Iteration #3, in July 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  | 0        | done    |  1. Change "Edit"/"Done Editing" button to "Show Tools"/"Hide Tools"
-brian  | 0.25 IED | 0.25    |  2. Allow editing for any logged in user, even if edit tools aren't shown
-chao   |          | done    |  8. be able to select a lozenge 
-chao   |          | done    | 12. be able to delete a selected lozenge 
-chao   | 0.5  IED | done    | 14. improve keyboard navigation: tab, arrow, and return keys
-mignon |          | done    | 15. Get data model to pass the ordinal unit tests again
-chao   |          | done    | 16. copy lozenges via drag-and-drop
-brian  |          | 0.5     | 17. drag-and-drop to re-order navbar menu items
-brian  |          | 0.5     | 19. drag-and-drop to re-order table columns
-brian  |          | 0.25    | 25. BUG: need to encode reserved characters(<&>\n"') back at client-server layer
-brian  |          | 0.5     | 35. Add support for saving content when used from a file:// URL
--------+----------+---------+----------------------------------------------
-
-
----------------------------------------------------------------------------
-   New tasks that we decided to take on for Iteration #3, in July 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  | 1    IED | 0.75    |     Add a DateValue class that supports dates like "2005"
-brian  |          | 0.25    |     Be able to make html files with just one <script> element, not dozens 
-brian  |          | 0.25    |     Be able to easily create new documents that are empty
-brian  |          | 0.5     |     Import CSV data files when running from a file:/// page
--------+----------+---------+----------------------------------------------
-
-
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-     Summary of Iteration #3
-            July 2005
-     July 4 to August 1, 2005
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-  11    = number of PLANNED tasks that were finished 
-   4    = number of ADDITIONAL tasks that were finished 
-  ~9    = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
-   4    = number of weeks in June iteration
- ~ 2.25 = Velocity (in estimated IEDs per week)
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-   
-
-################################################################################
-################################################################################
-##                                                                            ##
-##                                Iteration #4                                ##
-##                                 August 2005                                ##
-##                                                                            ##
-################################################################################
-################################################################################
-
-
----------------------------------------------------------------------------
-   Tasks we originally identified for Iteration #4, in August 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  |          | 3    IED|  1. Create demo documents (quotes, dictionary, movies, books, oil-change, etc.)
-brian  |          | 2.5  IED|  2. Make demo hand-outs with notes about architecture, data model, use cases
-brian  | 1    IED | 0.75 IED|  3. Configure demo machine (install Subversion, Firefox, Apache, PHP, jEdit, etc.)
-chao   | 0.25 IED | done    |  5. Show start time for DateValues if time was entered
-chao   | 0.25 IED | done    |  6. Suppport for relative date entry e.g. "today", "end of day/week", "tomorrow"
-chao   | 0.25 IED | done    |  7. Display relative dates for entries e.g. "today"
-chao   | 0.25 IED | 0.25 IED|  8. Support for Year/Month entry for DateValue, e.g. 2005/07, July 2005
-chao   | 0.25 IED | 0.1  IED|  9. Support anchor links to each section on a PageView
-brian  |          | 0    IED| 12. drag-and-drop lozenges: move instead of copy
--------+----------+---------+----------------------------------------------
-
-
----------------------------------------------------------------------------
-   New tasks that we decided to take on for Iteration #4, in August 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  |          | 0.25 IED|     display numbers with commas and allow commas during entry 
-brian  |          | 0.5  IED|     profiling and performance improvements
-brian  |          | 1    IED|     moved from string-UUIDs to object-UUIDs; refactored and cleaned-up
-brian  |          | 0    IED|     BUG: as you drag-and-drop, other text gets selected 
-chao   | 		      | 0.1  IED|     Show current active page on sidebar
--------+----------+---------+----------------------------------------------
-
-
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-     Summary of Iteration #4
-           August 2005
-  August 1 to September 5, 2005
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-   9    = number of PLANNED tasks that were finished 
-   5    = number of ADDITIONAL tasks that were finished 
- ~10    = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
-   5    = number of weeks in August iteration
- ~ 2    = Velocity (in estimated IEDs per week)
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-
-
-################################################################################
-################################################################################
-##                                                                            ##
-##                                Iteration #5                                ##
-##                               September 2005                               ##
-##                                                                            ##
-################################################################################
-################################################################################
-
-
----------------------------------------------------------------------------
-   Tasks we originally identified for Iteration #5, in September 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  |          | 0.5  IED|  1. look into using the Dojo Package System
--------+----------+---------+----------------------------------------------
-
-
----------------------------------------------------------------------------
-   New tasks that we decided to take on for Iteration #5, in September 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  |          | 2    IED|     convert code to use Dojo Package System
-brian  |          | 0    IED|     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
-brian  |          | 0    IED|     replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
-brian  |          | 0.5  IED|     move isUuid out of Util.js, and add more error checking code
-brian  |          | 0    IED|     in model, get rid of ._Record() and ._ContentRecord()
-brian  |          | 0.75 IED|     make some sort of assertType() method
-brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
-brian  | 0.25 IED | 0.25 IED|     refactor UUID constructor API, and other UUID improvements
--------+----------+---------+----------------------------------------------
-
-
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-     Summary of Iteration #5
-         September 2005
-  September 5 to October 3, 2005
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-   1    = number of PLANNED tasks that were finished 
-   8    = number of ADDITIONAL tasks that were finished 
-  ~4    = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
-   4    = number of weeks in September iteration
- ~ 1    = Velocity (in estimated IEDs per week)
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-
-
-################################################################################
-################################################################################
-##                                                                            ##
-##                                Iteration #6                                ##
-##                                October 2005                                ##
-##                                                                            ##
-################################################################################
-################################################################################
-
-
----------------------------------------------------------------------------
-   Tasks we originally identified for Iteration #6, in October 2005
--------+----------+---------+----------------------------------------------
-Who    | Estimate | Actual  | Task
--------+----------+---------+----------------------------------------------
-brian  |          | 1    IED|  1. get djConfig.debugAtAllCosts to work
-brian  |          | 0.75 IED|  2. replace orpBindAsEventListener() with dojo.event.connect()
-brian  |          | 0.1  IED|  3. move UUID files from source/util to source/uuid
-brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API
-brian  |          | 0.5  IED|  5. split half the code in source/model off into source/_____
-brian  |          | 0.35 IED|  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 
-       |          |         |  7. merge StubArchive + DeltaArchive, and re-name the result
-brian  |          | 0.25 IED|  8. create a FakeStorage class, + rename FileSaver + HttpSaver
-       |          |         |     update unit tests to use the FakeStorage instead of StubArchive
-       |          |         |     try to convert one unit test over to the dojo jum framework
-       |          |         |     move DOM methods from orp.view.View.xxx to orp.dom.xxx
-brian  |          | 0    IED|  9. change "endOfLife()" to "destroy()"
-       |          |         | 10. Rationalize the View API and document public API
-mignon | 1    IED |         | 11. Rationalize the ViewPlugin API
-mignon | 0.25 IED |         | 12. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 
-mignon | 2    IED |         | 13. Automatically load ViewPlugins found in the view_plugins directory 
-       |          |         | 14. Make RootView subclass from View, or add comments explaining why it doesn't
-       |          |         | 15. Make DateValue wrap an internal Date object
--------+----------+---------+----------------------------------------------
-       |          |         | 16. Document the Data model public API
-       |          |         | 17. research standard text representations for DateValues
-       |          |         | 18. make ordinal value strings not grow long so quickly
-       |          |         | 19. Do lazy creation of layout data items
-       |          |         | 20. try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
-       |          |         | 21. try to replace View.appendNewElement() with dojo.xml.domUtil methods
-       |          |         |     try to replace md5.js with dojo.crypto.MD5 methods
-       |          |         | 22. try to replace remaining Util.js functions with dojo.lang functions
-       |          |         | 23. try using Ant and the Dojo build system to build OpenRecord into a single-file 
-       |          |         | 24. move XmlConverter.js out of util, because it depends on model code
-brian  |          | 0.75 IED| 25. Decide whether or not to replace bi-directional connection entries with twin-entries
-brian  |          | 0.5  IED|     Write initial code to augment bi-directional connection entries with twin ProxyEntries
-       |          |         | 26. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
-       |          |         | 27. Pick one file, and do a group code review on it
-       |          |         | 28. Implement a good URL-to-content mapping, so that URLs won't go bad in future releases
-brian  | 1    IED |         | 29. Rationalize our CSS style sheet approach
-       |          |         | 30. Fix the message that says "Sorry, for some reason OpenRecord was not able to launch."
--------+----------+---------+----------------------------------------------
-       |          |         | 31. Assign system attributes & categories to a "System" category
-       |          |         | 32. Hide "System" items most of the time
-       |          |         | 33. improve UI for creating a new category
-       |          |         | 34. Deal with \n in page name or summary fields
-       |          |         | 35. be able to select a table row 
-       |          |         | 36. be able to delete a selected table row 
-       |          |         | 37. drag-and-drop to re-order table rows
-       |          |         | 38. improve UI for "add new attribute" in Table View 
-       |          |         | 39. improve UI for setting the expected data type of an attribute
-       |          |         | 40. have Detail View use textarea instead of text input, for long strings
-       |          |         | 41. make it possible to add a new attribute in Detail View 
-       |          |         | 42. improve UI for initial "out of the box" experience
-       |          |         | 43. improve UI for creating a new page
-       |          |         | 44. improve UI for adding a new section to a page
-       |          |         | 45. UI to move/delete sections?
--------+----------+---------+----------------------------------------------
-       |          |         | 46. Better time parsing e.g. 3pm
-       |          |         | 47. Refactor our observer notification API (and implementation)
-       |          |         | 48. Wire up observers & keep views in sync
-       |          |         | 49. Attempt to embed an OpenRecord view in a MediaWiki page
-       |          |         | 50. Data model: boolean, URL, entries that apply to timespan (e.g. annual population)
-       |          |         | 51. Make currently sorted column have a special CSS class so that it can look different
-       |          |         | 52. Resolve: How should table cells deal with <enter>, move down a cell or to the right?
-       |          |         | 53. be able to select a non-lozenge literal entry
-       |          |         | 54. be able to select the text within an entry
-       |          |         | 55. Reach consensus on (colors, padding, and borders) and then implement
-       |          |         | 56. Make sure view code uses transactions
-       |          |         | 57. UI and data model design to support collaboration
-       |          |         | 58. config option so that only logged-in users have read-access
-       |          |         | 59. have an "icon" attribute, and use icons in suggestion box and in EntryView
-       |          |         | 60. run in IE as well as Firefox
--------+----------+---------+----------------------------------------------
-       |          |         | 61. Write one unit test that tests GUI code
-       |          |         | 62. Write one performance test that measures the time some code takes
-       |          |         | 63. Provide GUI feedback about what's editable
-       |          |         | 64. Convert UI code from DOM level 0 to DOM level 2
-       |          |         | 65. improve UI for entering references to categories or to other items
-       |          |         | 66. improve UI for creating a new user
-       |          |         | 67. Check for incorrect dependencies (e.g. a Util dependency on model code)
-       |          |         | 68. Add support for repository merging
-       |          |         | 69. BUG: back button is broken
-       |          |         | 70. BUG: "Waiting for localhost..." (may be related to how we load images)
-       |          |         | 71. BUG: "Node was not found" exception in EntryView/LoginView?
-       |          |         | 72. Do some testing to find other existing bugs
-       |          |         | 73. Have explicit save instead of (or in addition to) autosave
-       |          |         | 74. Be able to cancel out of creating a new account
-       |          |         | 75. Save view layout choice and user preferences
--------+----------+---------+----------------------------------------------
-       |          |         | 76. Do code reviews
-       |          |         | 77. Write concurrency tests 
-       |          |         | 78. Write scalability tests 
-       |          |         | 79. Ensure that PHP scripts and file I/O works for concurrent multi-user access
-       |          |         | 80. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
-       |          |         | 81. Have different documents use different style-sheets
-       |          |         | 82. replace /source/util/Cookie.js with dojo.io.cookies
--------+----------+---------+----------------------------------------------
-                              
-
-
-=======================================================
-Categories and Attributes we might use for release 0.1
-=======================================================
-(*) == reference to another item
-
-User Story
-  name
-  summary
-  priority
-  release this story is assigned to (*)
-  
-Iteration
-  name
-  date completed
-  tasks we plan to do in this iteration (*)
-  release (*)
-  
-Release
-  name
-  date completed
-  iterations leading up to this release (*)
-  user stories assigned to this release (*)
-  
-User
-  name
-  tasks this person is signed-up for (*)
-  
-Task
-  name
-  summary
-  user story (or category) this task falls into (*)
-  person who has signed-up to do this task (*)
-  estimate of how long this task will take
-  iteration in which we plan to do this task (*)
-  iteration in which this task was started (*)
-  iteration in which this task was finished (*)
-  status text
-  
-Bug
-  name
-  summary
-  (most Bug items will also be categorized as Task items, so each Bug will also 
-  have all the attributes of a Task)
-  
-
-   
-  
-=======================================================
-Tasks we want to defer until after release 0.1
-=======================================================
----------------------------------------------------
- + Figure out how to write unit tests for GUI code
----------------------------------------------------
- + BUG: Back button is broken
-    The browser's back button doesn't work after you click from 
-    page to page in the navbar.
----------------------------------------------------
- + BUG: problems with HTML in text strings
-    We still have some problems with handling text strings that 
-    have HTML in them. If an item has an attribute value with some 
-    HTML in it, like '<cite>', we incorrectly render it like 
-    '& lt;cite& gt;' instead of '<cite>'
----------------------------------------------------
- + Editable Detail Plugin
-    Make a new version of the current DetailPlugin.js.  The 
-    current one just lets the user view the attribute values, 
-    but we should make a better one that lets the user change 
-    the values, and add new values, and add new ad-hoc attributes.
----------------------------------------------------
- + List/Detail Combo Plugin
-    We could make a plugin that takes a list of items and
-    displays them in a format like what you see in a mail
-    reader or a news reader.  So you'd have some sort of
-    table-view on top, with one item per row, and then a
-    detail view below, to show more info about a single
-    item.  We could copy a lot of code from the current
-    TablePlugin.js and DetailPlugin.js, so it shouldn't be
-    too hard to make a simple read-only version.
----------------------------------------------------
- + Table Plugin with ad-hoc attributes
-    We should change the TablePlugin.js so that the user is
-    able to add new columns on the fly, where each new
-    column is for some new ad-hoc attribute.
----------------------------------------------------
- + Be able to edit in outline mode
-    In the outline plugin, add code to handle editing. The
-    user should be able to add new items to an outline,
-    chagne existing items, indent existing items, etc.
----------------------------------------------------
- + Have Table plugin group by category
-    Make the Table plugin be about to to show groupings by
-    category. For example, in a table that shows a list of
-    cities, you might want to see them grouped by country.
----------------------------------------------------
- + Have Outline plugin group by category
-    Make the Outline plugin be able to show groupings by
-    category. For example, in an outline that shows a list of
-    cities, you might want to see them grouped by country.
----------------------------------------------------
- + In Outline plugin, show detail locally
-    When you click on the "more" link in an outline, the
-    detail information should show up on the current page,
-    within the current list item, rather than whisking you
-    away to a completely separate item detail page.
----------------------------------------------------
- + Draft a Contributor Agreement
-     We need to draft some sort of Contributor Agreement, like the Apache 
-     Contributor Agreement or the Python Contributor Agreement.
-     See:
-       http://www.apache.org/licenses/icla.txt
-       http://www.python.org/psf/contrib-form.html
----------------------------------------------------
- + Move this task list from here into OpenRecord!
----------------------------------------------------
- + Consider having a build system
-    A build system could:
-      * run unit tests
-      * run JSLint on the code
-      * compress the code by removing white space and comments
-      * compress the code by copying everything into a single file
-      * generate documentation
-      * remove Util.assert() statements from the code
----------------------------------------------------
- + Skins/Themes/Chrome
-    Make it possible for different web sites to each of their own
-    logos, color-schemes, and branding.
----------------------------------------------------
- + search engine indexing
-    Figure out how to make sure that search engines like
-    Google are able to index all the "virtual" pages that 
-    OpenRecord serves.
-    I don't know just what's involved in making sure the search
-    engines can index a page.  That's something I'll have to
-    learn more about.  If I had to guess, I think we're going to
-    have to do two thing: (1) make each page have it's own real
-    URL, rather than using the #anchor tag scheme that
-    OpenRecord is using now, and (2) have the server generate
-    html pages that have all the content elements already in
-    place, rather than relying on client JavaScript to do all
-    the work.
----------------------------------------------------
- + Rationalize CSS style sheets
-    Need to figure out a consistent "style" for using style sheets applicable
-    to the way we architect our view widgets
----------------------------------------------------
- + Need to rationalize View api and document public api
-    - wire up superview/subview after creation of subview
-    - get rid of display()
-    - rename refersh()
-    - settle on standard constructor parameters
- Q: Should getListofContentItems() in superview be replaced by an argument into plugin's constructor
-   Also, should plugin get a CSS class?
- Q: Should we decouple plugins from SectionView? in general, should we make objects less tightly coupled?
-     Parent objects can know about children objects, but not vice versa.
----------------------------------------------------
- + UI design/improvement for:
-    - toggle for "edit"/"view" or "editable"/"locked"
-    - adding a row to a table
-    - deleting a row from a table
-    - dragging rows up and down to re-order (conflict with sort columns?)
-    - adding an entry to a table cell
-    - replacing an entry with new text
-    - adding a new column to a table
-    - creating a new attribute
-    - setting the expected data type of an attribute
-    - doing data type validation on a new entry
-    - adding a cell entry which is a reference to another item
-    - creating a new category & putting things in categories
-    - creating a new user account for yourself
-    - logging in and logging out
-    - creating a new page
-    - creating a new section on a page
-    - editing the query for a section
-    - GUI feedback to show what text is editable?
----------------------------------------------------
- + talk about different designs for:
-    - doing authentication (e.g. where to store passwords?)
-    - representing queries (hold query matching criteria in normal attributes?)
-    - ad-hoc queries as well as persistant queries?
-    - bi-directional references as a type of entry?
----------------------------------------------------
- + Bug: "Waiting for localhost..."
-    Load the demo_page.html page from http://localhost:...
-    Go into Edit mode and change some entry.  The Firefox status 
-    bar (bottom left) sometimes gets stuck saying 
-    "Waiting for localhost...", even though it doesn't seem to
-    be waiting
----------------------------------------------------
- + Bug: "Node was not found" exception
-    Load the demo_page.html page from file:///...
-    Go into Edit mode and change some entry.  
-    You get an exception in EntryView.js:
-      Util.handleError()
-      uncaught exception: [Exception... "Node was not found"  
-      code: "8" nsresult: "0x80530008 (NS_ERROR_DOM_NOT_FOUND_ERR)"  
-      location: "file:///K:/www/htdocs/openrecord/demo/current/trunk/source/EntryView.js Line: 221"]
-      line: 0
-    
-===========================       
-Issues for post iteration#2
-===========================       
- + How should we interoperate with other repositories(openrecord + other sources of data)?
- + Should we rename "World"?
- + BUG: Can't really create own plugins yet (e.g. UUID need to be assigned, plugin item created)
- + Q: Do we (and how) need a concept of focus for Views? Currently, only Text input 
-    and Textarea gets keyboard focus. We need it for table selections and possibly 
-    selecting "lozenges" (item references stored in the EntryView)
\ No newline at end of file

Added: trunk/documentation/to_do_history.txt
===================================================================
--- trunk/documentation/to_do_history.txt	2005-11-02 01:02:09 UTC (rev 372)
+++ trunk/documentation/to_do_history.txt	2005-11-02 03:20:21 UTC (rev 373)
@@ -0,0 +1,404 @@
+================================================================
+To-do History for old OpenRecord development iterations #1 to #6
+================================================================
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+----------------------------------------------------------------
+
+
+----------------------------------------------------------------
+WHAT IS THIS FILE?
+
+This is an archive that records all the to-do list tasks that 
+we've marked as finished.  This archive is organized into
+monthly iterations, starting at "Iteration #1" in May 2005.
+The current to-do list is in the to_do_list.txt file.
+
+Key:
+  IED == an "ideal engineering day", with just coding, and no distractions
+----------------------------------------------------------------
+
+
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #1                                ##
+##                                  May 2005                                  ##
+##                                                                            ##
+################################################################################
+################################################################################
+ 
+
+---------------------------------------------------------------------------
+   Tasks we originally identified for release 0.1, back on May 2, 2005
+-------+----------+---------+----------------------------------------------
+Who    | Priority | Estimate| Task
+-------+----------+---------+----------------------------------------------
+ Chao  |    done? | 1   IED | UI for adding an attribute to an item
+Brian  |    done? |         | UI for setting the expected data type of an attribute
+Mignon |    done  | 1   IED | UI for creating a new category
+Mignon | High     | 1   IED | UI for deleting a row from a table 
+ Chao  |   done   | 1.5 IED | UI for logging in and logging out; cookies and auto-login; display of who you're logged in as
+ Chao  |   done   | 0.5 IED | UI to sort a table when you click on a column header (2 ied, needed to refactor TablePlugin to DOM level 2)
+Brian  |   done   | 1   IED | Data model: change "Value" to "Entry"; refactor entries to be per-attribute
+Brian  |   done   | 2   IED | Convert UI code to use new data model
+       | High     |         | UI for entering a number literal (instead of a string literal) in a table
+Brian  |    done? |         | UI for entering references to categories or to other items
+ Chao  |    done  | 0.5 IED | UI for adding a new section to a page
+Mignon |    done? |         | UI for editing the query that a section uses
+       | Medium   |         | Verify/fix the bug that happens when you call the PHP server code with no POST data
+Brian  |   done   | 0   IED | Replace the Edit/Save button with a Lock/Unlock UI; automatically save changes as they happen
+Brian  |   done   | 1   IED | Replace the BigLumpVirtualServer with an DeltaVirtualServer; Change PHP code to append to the data file
+       | Low      |         | Convert UI code from DOM level 0 to DOM level 2
+       | Low      |         | Write a plugin view that calculates and displays the measured project velocity
+Mignon |   done   |         | UI for creating a new page
+ Chao  |   done   |         | UI for creating a new user
+-------+----------+---------+----------------------------------------------
+ 
+
+---------------------------------------------------------------------------
+   Additional "hidden" tasks that we uncovered during May
+-------+----------+---------+----------------------------------------------
+Who    | Priority | Estimate| Task
+-------+----------+---------+----------------------------------------------
+ Chao  |   done   | 0   IED | Re-implement UI for entering a new row in a table (1.5 IED actual)
+ Chao  |   done   |         | Refactor TablePlugin to DOM Level 2 (1.5 IED actual)
+Brian  |   done   | 1   IED | Ensure that UUIDs are unique in multi-user use case
+ Chao  |   done   | 1   IED | Refactor plugin class, pass a query to plugin, create Plugin base class
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for release 0.1
+-------+----------+---------+----------------------------------------------
+Who    | Priority | Estimate| Task
+-------+----------+---------+----------------------------------------------
+Mignon |   done   |         | Generate time-based UUIDs ("version 1" UUIDs)
+Chao   |   done   | 1   IED | Allow users to view multiple entries in a table plugin cell (0.5 IED actual)
+Chao   |   done   | 2   IED | Allow users to enter/edit multiple entries in a table plugin cell (1 IED actual)
+Chao   |   done   |         | Have Escape key undo current editing in active field
+Chao   |   done   |         | In table columns where the expected type is a Category, when the user enters text, create a new item with that name and category
+-------+----------+---------+----------------------------------------------
+
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #1
+            May 2005
+      May 2 to June 6, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  14    = number of PLANNED tasks that were finished 
+   4    = number of HIDDEN tasks that were finished 
+   5    = number of ADDITIONAL tasks that were finished 
+ ~19   = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   5    = number of weeks in May iteration
+ ~ 3.8 = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+ 
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #2                                ##
+##                                  June 2005                                 ##
+##                                                                            ##
+################################################################################
+################################################################################
+ 
+
+---------------------------------------------------------------------------
+   Tasks we originally identified for Iteration #2, in June 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  | 0.25     | 0.25    |  1. Set up a prototype of the OpenRecord.org "dogfood" site
+mignon | 0.25 IED | 0.5 IED |  2. Have identifiedRecord.getUserstamp() get the user from the UUID
+mignon | 0.5  IED | 0.5 IED |  3. Switch data model to use time-based UUIDs for timestamps & userstamps
+brian  | 0.5  IED | 0.25    |  4. Store transaction info in repository
+       |          |         |  5. UI for deleting a row from a table
+brian  | 0.5  IED | 0.25    |  6. Save provisional item and then set the category, in that order, and in one transaction
+brian  | 0.25 IED | 0.25    |  7. Fix the bug that happens when you call the PHP server code with no POST data
+chao   | 0.5  IED | 0.5 IED |  8. UI for entering a number literal (instead of a string literal) in a table [with Brian]
+chao   | 1    IED | 1   IED |  9. UI for entering a date literal in a table (and data model support) [with Brian]
+brian  | 1    IED | 1   IED | 10. Add data model support for bi-directional references
+chao   | 2    IED | 1.5 IED | 11. Move to better persistent representation for queries [with Brian]
+       |          |         | 12. Make sure view code uses transactions
+       |          |         | 13. Deal with \n in page name or summary fields
+       |          |         | 14. BUG: problems with newlines and HTML characters in text strings
+brian  | 0.5  IED |         | 15. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+ Additional "hidden" tasks we uncovered during Iteration #2, in June 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  |          | 0.5     |     Update the JSON repository file to use time-based UUIDs
+brian  |          | 0.25    |     Get deletion votes working again after switching to time-based UUIDs
+brian  |          | 0.25    |     Enabled one server to serve N pages running against N repository files
+brian  |          | 0.5     |     Convert the code to use bi-directional references
+brian  |          | 0.25    |     Convert the axiomatic items to use bi-directional reference
+brian  |          | 0.75    |     Misc. other improvements to the repository JSON format
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for Iteration #2, in June 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+chao   |          | done    | 16. Have text-entries and reference-entries look different
+mignon |          | done    | 24. Display Navbar pages in the right order
+chao   |          | done    | 25. Arrow keys in SuggestionBox
+chao   | 1.5 IED  | done    | 27. Change UI so that non-literal entries are immutable
+mignon |          | done    | 30. Have identifiedRecord.getTimestamp() get the time from the UUID 
+chao   | 1.5 IED  | 1.5 IED | 39. improve UI for editing the query that a section uses
+chao   | 0.5 IED  | 0.5 IED |     Improved UI for autocomplete
+chao   | 0.5 IED  | 0.5 IED |     Allow plugins to store layout data
+chao   | 0.5 IED  | 0.5 IED |     Table plugin persists column order
+brian  |          | 0.5 IED | 48. Add a Query.js class, and/or an Attribute.js class
+-------+----------+---------+----------------------------------------------
+
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #2
+            June 2005
+     June 6 to July 4, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  10    = number of PLANNED tasks that were finished 
+   6    = number of HIDDEN tasks that were finished 
+  10    = number of ADDITIONAL tasks that were finished 
+ ~14   = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   4    = number of weeks in June iteration
+ ~ 3.5 = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+   
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #3                                ##
+##                                  July 2005                                 ##
+##                                                                            ##
+################################################################################
+################################################################################
+
+
+---------------------------------------------------------------------------
+   Tasks we originally identified for Iteration #3, in July 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  | 0        | done    |  1. Change "Edit"/"Done Editing" button to "Show Tools"/"Hide Tools"
+brian  | 0.25 IED | 0.25    |  2. Allow editing for any logged in user, even if edit tools aren't shown
+chao   |          | done    |  8. be able to select a lozenge 
+chao   |          | done    | 12. be able to delete a selected lozenge 
+chao   | 0.5  IED | done    | 14. improve keyboard navigation: tab, arrow, and return keys
+mignon |          | done    | 15. Get data model to pass the ordinal unit tests again
+chao   |          | done    | 16. copy lozenges via drag-and-drop
+brian  |          | 0.5     | 17. drag-and-drop to re-order navbar menu items
+brian  |          | 0.5     | 19. drag-and-drop to re-order table columns
+brian  |          | 0.25    | 25. BUG: need to encode reserved characters(<&>\n"') back at client-server layer
+brian  |          | 0.5     | 35. Add support for saving content when used from a file:// URL
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for Iteration #3, in July 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  | 1    IED | 0.75    |     Add a DateValue class that supports dates like "2005"
+brian  |          | 0.25    |     Be able to make html files with just one <script> element, not dozens 
+brian  |          | 0.25    |     Be able to easily create new documents that are empty
+brian  |          | 0.5     |     Import CSV data files when running from a file:/// page
+-------+----------+---------+----------------------------------------------
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #3
+            July 2005
+     July 4 to August 1, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  11    = number of PLANNED tasks that were finished 
+   4    = number of ADDITIONAL tasks that were finished 
+  ~9    = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   4    = number of weeks in June iteration
+ ~ 2.25 = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+   
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #4                                ##
+##                                 August 2005                                ##
+##                                                                            ##
+################################################################################
+################################################################################
+
+
+---------------------------------------------------------------------------
+   Tasks we originally identified for Iteration #4, in August 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  |          | 3    IED|  1. Create demo documents (quotes, dictionary, movies, books, oil-change, etc.)
+brian  |          | 2.5  IED|  2. Make demo hand-outs with notes about architecture, data model, use cases
+brian  | 1    IED | 0.75 IED|  3. Configure demo machine (install Subversion, Firefox, Apache, PHP, jEdit, etc.)
+chao   | 0.25 IED | done    |  5. Show start time for DateValues if time was entered
+chao   | 0.25 IED | done    |  6. Suppport for relative date entry e.g. "today", "end of day/week", "tomorrow"
+chao   | 0.25 IED | done    |  7. Display relative dates for entries e.g. "today"
+chao   | 0.25 IED | 0.25 IED|  8. Support for Year/Month entry for DateValue, e.g. 2005/07, July 2005
+chao   | 0.25 IED | 0.1  IED|  9. Support anchor links to each section on a PageView
+brian  |          | 0    IED| 12. drag-and-drop lozenges: move instead of copy
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for Iteration #4, in August 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  |          | 0.25 IED|     display numbers with commas and allow commas during entry 
+brian  |          | 0.5  IED|     profiling and performance improvements
+brian  |          | 1    IED|     moved from string-UUIDs to object-UUIDs; refactored and cleaned-up
+brian  |          | 0    IED|     BUG: as you drag-and-drop, other text gets selected 
+chao   | 		      | 0.1  IED|     Show current active page on sidebar
+-------+----------+---------+----------------------------------------------
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #4
+           August 2005
+  August 1 to September 5, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+   9    = number of PLANNED tasks that were finished 
+   5    = number of ADDITIONAL tasks that were finished 
+ ~10    = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   5    = number of weeks in August iteration
+ ~ 2    = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #5                                ##
+##                               September 2005                               ##
+##                                                                            ##
+################################################################################
+################################################################################
+
+
+---------------------------------------------------------------------------
+   Tasks we originally identified for Iteration #5, in September 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  |          | 0.5  IED|  1. look into using the Dojo Package System
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for Iteration #5, in September 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  |          | 2    IED|     convert code to use Dojo Package System
+brian  |          | 0    IED|     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
+brian  |          | 0    IED|     replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
+brian  |          | 0.5  IED|     move isUuid out of Util.js, and add more error checking code
+brian  |          | 0    IED|     in model, get rid of ._Record() and ._ContentRecord()
+brian  |          | 0.75 IED|     make some sort of assertType() method
+brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
+brian  | 0.25 IED | 0.25 IED|     refactor UUID constructor API, and other UUID improvements
+-------+----------+---------+----------------------------------------------
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #5
+         September 2005
+  September 5 to October 3, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+   1    = number of PLANNED tasks that were finished 
+   8    = number of ADDITIONAL tasks that were finished 
+  ~4    = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   4    = number of weeks in September iteration
+ ~ 1    = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #6                                ##
+##                                October 2005                                ##
+##                                                                            ##
+################################################################################
+################################################################################
+
+
+---------------------------------------------------------------------------
+   Tasks we originally identified for Iteration #6, in October 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  |          | 1    IED|  1. get djConfig.debugAtAllCosts to work
+brian  |          | 0.75 IED|  2. replace orpBindAsEventListener() with dojo.event.connect()
+brian  |          | 0.1  IED|  3. move UUID files from source/util to source/uuid
+brian  | 0.5  IED | 0.75 IED|  4. Make Item.js use namedParameter based API
+brian  |          | 0.5  IED|  5. split half the code in source/model off into source/_____
+brian  |          | 0.35 IED|  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 
+brian  |          | 0.25 IED|  8. create a FakeStorage class, + rename FileSaver + HttpSaver
+brian  |          | 0    IED|  9. change "endOfLife()" to "destroy()"
+brian  |          | 0.75 IED| 25. Decide whether or not to replace bi-directional connection entries with twin-entries
+brian  |          | 0.15 IED| 67. (Write unit tests to) Check for incorrect dependencies (e.g. a util dependency on model)
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for Iteration #6, in October 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+brian  |          | 0.5  IED|     Write initial code to augment bi-directional connection entries with twin ProxyEntries
+mignon |          |         |     write function to return the list of files in a directory (via file:// and http://)
+-------+----------+---------+----------------------------------------------
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #6
+          October 2005
+  October 3 to November 7, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+  10    = number of PLANNED tasks that were finished 
+   2    = number of ADDITIONAL tasks that were finished 
+  ~5.1  = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   5    = number of weeks in October iteration
+ ~ 1    = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #7                                ##
+##                                November 2005                               ##
+##                                                                            ##
+################################################################################
+################################################################################
+
+
+...FIXME...
+

Copied: trunk/documentation/to_do_list.txt (from rev 370, trunk/documentation/release_planning.txt)
===================================================================
--- trunk/documentation/release_planning.txt	2005-11-01 04:16:22 UTC (rev 370)
+++ trunk/documentation/to_do_list.txt	2005-11-02 03:20:21 UTC (rev 373)
@@ -0,0 +1,316 @@
+================================================================
+To-do list -- OpenRecord dev tasks
+================================================================
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+----------------------------------------------------------------
+
+
+----------------------------------------------------------------
+WHAT IS THIS FILE?
+
+This is a list of all the work we have ahead of us.  A history
+of completed tasks is in the file to_do_history.txt.
+
+HOW DO I USE THIS?
+
+If you think of a new task, add it to the bottom of the list.  
+Or add it somewhere in the middle of the list, if that makes
+more sense.
+
+Before you start working on a task, do four things: 
+ (1) add the task to the list, if it's not already there
+ (2) put your name to the "Who" column of the task, so 
+     that other people know you're working on it
+ (3) if you feel like it, put an estimate for how long
+     you think the task will take
+ (4) check this file back into SVN, so that other people
+     can see your changes
+     
+When you are done working on a task:
+ (1) put something in the "Actual" column -- you can just
+     put "done", or you can put the number of IEDs you
+     spent working on the task, if you know
+
+Key:
+  IED == an "ideal engineering day", with just coding, and no distractions
+----------------------------------------------------------------
+  
+
+
+---------------------------------------------------------------------------
+Tasks toward having a stable API for developers
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+       |          |         |  1. Document the Data model public API
+brian  |          | (0.7+)  |  2. Try to convert one unit test over to the dojo jum framework
+       |          |         |  3. Rationalize the View API and document public API
+mignon | 1    IED |         |  4. Rationalize the ViewPlugin API
+mignon | 0.25 IED |         |  5. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 
+mignon | 2    IED |         |  6. Automatically load ViewPlugins found in the view_plugins directory 
+       |          |         |  7. Move DOM methods from orp.view.View.xxx to orp.dom.xxx
+       |          |         |  8. Make RootView subclass from View, or add comments explaining why it doesn't
+       |          |         |  9. Refactor our observer notification API (and implementation)
+       |          |         | 10. Try using Ant and the Dojo build system to build OpenRecord into a single-file 
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+Tasks toward having a stable file format
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+       |          |         |  1. Research standard text representations for DateValues
+       |          |         |  2. Make DateValue support date ranges
+       |          |         |  3. Make ordinal value strings not grow long so quickly
+       |          |         |  4. Do lazy creation of layout data items
+       |          |         |  5. Make sure view code uses transactions
+       |          |         |  6. Write concurrency tests 
+       |          |         |  7. Ensure that PHP scripts and file I/O works for concurrent multi-user access
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+Big picture tasks
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+       |          |         |  1. Attempt to embed an OpenRecord view in a MediaWiki page
+       |          |         |  2. Have a server that supports repositories with thousands of items
+       |          |         |  3. Look at replacing our notion of Views with Dojo's notion of widgets
+       |          |         |  4. Run in IE as well as Firefox
+       |          |         |  5. Add support for repository merging
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+Tasks toward cleaning up the code base
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+       |          |         |  1. try to replace View.appendNewElement() with dojo.xml.domUtil methods
+       |          |         |  2. try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
+       |          |         |  3. try to replace md5.js with dojo.crypto.MD5 methods
+       |          |         |  4. try to replace /source/util/Cookie.js with dojo.io.cookies
+       |          |         |  5. try to replace remaining Util.js functions with dojo.lang functions
+       |          |         |  6. Make DateValue wrap an internal Date object
+       |          |         |  7. merge StubArchive + DeltaArchive, and re-name the result
+       |          |         |  8. update unit tests to use the FakeStorage instead of StubArchive
+       |          |         |  9. Pick one file, and do a group code review on it
+brian  | 1    IED |         | 10. Rationalize our CSS style sheet approach
+       |          |         | 11. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
+       |          |         | 12. move XmlConverter.js out of util, because it depends on model code
+       |          |         | 13. Write one unit test that tests GUI code
+       |          |         | 14. Write one performance test that measures the time some code takes
+       |          |         | 15. Convert UI code from DOM level 0 to DOM level 2
+       |          |         | 16. Start process for doing ongoing code reviews
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+Tasks to make the UI usable
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+       |          |         | 10. Implement a good URL-to-content mapping, so that URLs won't go bad in future releases
+       |          |         | 11. Assign system attributes & categories to a "System" category
+       |          |         | 12. Hide "System" items most of the time
+       |          |         | 13. improve UI for creating a new category
+       |          |         | 14. Deal with \n in page name or summary fields
+       |          |         | 15. be able to select a table row 
+       |          |         | 16. be able to delete a selected table row 
+       |          |         | 17. drag-and-drop to re-order table rows
+       |          |         | 18. improve UI for "add new attribute" in Table View 
+       |          |         | 19. improve UI for setting the expected data type of an attribute
+-------+----------+---------+----------------------------------------------
+       |          |         | 20. have Detail View use textarea instead of text input, for long strings
+       |          |         | 21. make it possible to add a new attribute in Detail View 
+       |          |         | 22. improve UI for initial "out of the box" experience
+       |          |         | 23. improve UI for creating a new page
+       |          |         | 24. improve UI for adding a new section to a page
+       |          |         | 25. UI to move/delete sections?
+       |          |         | 26. Better time parsing e.g. 3pm
+       |          |         | 27. Have different documents use different style-sheets
+       |          |         | 28. Wire up observers & keep views in sync
+       |          |         | 29. Provide GUI feedback about what's editable
+-------+----------+---------+----------------------------------------------
+       |          |         | 30. Data model: boolean, URL, entries that apply to timespan (e.g. annual population)
+       |          |         | 31. Make currently sorted column have a special CSS class so that it can look different
+       |          |         | 32. Resolve: How should table cells deal with <enter>, move down a cell or to the right?
+       |          |         | 33. be able to select a non-lozenge literal entry
+       |          |         | 34. be able to select the text within an entry
+       |          |         | 35. Reach consensus on (colors, padding, and borders) and then implement
+       |          |         | 36. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
+       |          |         | 37. UI and data model design to support collaboration
+       |          |         | 38. config option so that only logged-in users have read-access
+       |          |         | 39. have an "icon" attribute, and use icons in suggestion box and in EntryView
+-------+----------+---------+----------------------------------------------
+       |          |         | 40. improve UI for entering references to categories or to other items
+       |          |         | 41. improve UI for creating a new user
+       |          |         | 42. BUG: back button is broken
+       |          |         | 43. BUG: "Waiting for localhost..." (may be related to how we load images)
+       |          |         | 44. BUG: "Node was not found" exception in EntryView/LoginView?
+       |          |         | 45. Do some testing to find other existing bugs
+       |          |         | 46. Have explicit save instead of (or in addition to) autosave
+       |          |         | 47. Be able to cancel out of creating a new account
+       |          |         | 48. Save view layout choice and user preferences
+       |          |         | 49. Write scalability tests 
+       |          |         | 50. Fix the message that says "Sorry, for some reason OpenRecord was not able to launch."
+-------+----------+---------+----------------------------------------------
+                            
+
+
+   
+  
+=======================================================
+More tasks
+=======================================================
+---------------------------------------------------
+ + BUG: Back button is broken
+    The browser's back button doesn't work after you click from 
+    page to page in the navbar.
+---------------------------------------------------
+ + BUG: problems with HTML in text strings
+    We still have some problems with handling text strings that 
+    have HTML in them. If an item has an attribute value with some 
+    HTML in it, like '<cite>', we incorrectly render it like 
+    '& lt;cite& gt;' instead of '<cite>'
+---------------------------------------------------
+ + Editable Detail Plugin
+    Make a new version of the current DetailPlugin.js.  The 
+    current one just lets the user view the attribute values, 
+    but we should make a better one that lets the user change 
+    the values, and add new values, and add new ad-hoc attributes.
+---------------------------------------------------
+ + List/Detail Combo Plugin
+    We could make a plugin that takes a list of items and
+    displays them in a format like what you see in a mail
+    reader or a news reader.  So you'd have some sort of
+    table-view on top, with one item per row, and then a
+    detail view below, to show more info about a single
+    item.  We could copy a lot of code from the current
+    TablePlugin.js and DetailPlugin.js, so it shouldn't be
+    too hard to make a simple read-only version.
+---------------------------------------------------
+ + Table Plugin with ad-hoc attributes
+    We should change the TablePlugin.js so that the user is
+    able to add new columns on the fly, where each new
+    column is for some new ad-hoc attribute.
+---------------------------------------------------
+ + Be able to edit in outline mode
+    In the outline plugin, add code to handle editing. The
+    user should be able to add new items to an outline,
+    chagne existing items, indent existing items, etc.
+---------------------------------------------------
+ + Have Table plugin group by category
+    Make the Table plugin be about to to show groupings by
+    category. For example, in a table that shows a list of
+    cities, you might want to see them grouped by country.
+---------------------------------------------------
+ + Have Outline plugin group by category
+    Make the Outline plugin be able to show groupings by
+    category. For example, in an outline that shows a list of
+    cities, you might want to see them grouped by country.
+---------------------------------------------------
+ + In Outline plugin, show detail locally
+    When you click on the "more" link in an outline, the
+    detail information should show up on the current page,
+    within the current list item, rather than whisking you
+    away to a completely separate item detail page.
+---------------------------------------------------
+ + Move this task list from here into OpenRecord!
+---------------------------------------------------
+ + Consider having a build system
+    A build system could:
+      * run unit tests
+      * run JSLint on the code
+      * compress the code by removing white space and comments
+      * compress the code by copying everything into a single file
+      * generate documentation
+      * remove Util.assert() statements from the code
+---------------------------------------------------
+ + Skins/Themes/Chrome
+    Make it possible for different web sites to each of their own
+    logos, color-schemes, and branding.
+---------------------------------------------------
+ + search engine indexing
+    Figure out how to make sure that search engines like
+    Google are able to index all the "virtual" pages that 
+    OpenRecord serves.
+    I don't know just what's involved in making sure the search
+    engines can index a page.  That's something I'll have to
+    learn more about.  If I had to guess, I think we're going to
+    have to do two thing: (1) make each page have it's own real
+    URL, rather than using the #anchor tag scheme that
+    OpenRecord is using now, and (2) have the server generate
+    html pages that have all the content elements already in
+    place, rather than relying on client JavaScript to do all
+    the work.
+---------------------------------------------------
+ + Rationalize CSS style sheets
+    Need to figure out a consistent "style" for using style sheets applicable
+    to the way we architect our view widgets
+---------------------------------------------------
+ + Need to rationalize View api and document public api
+    - wire up superview/subview after creation of subview
+    - get rid of display()
+    - rename refersh()
+    - settle on standard constructor parameters
+ Q: Should getListofContentItems() in superview be replaced by an argument into plugin's constructor
+   Also, should plugin get a CSS class?
+ Q: Should we decouple plugins from SectionView? in general, should we make objects less tightly coupled?
+     Parent objects can know about children objects, but not vice versa.
+---------------------------------------------------
+ + UI design/improvement for:
+    - toggle for "edit"/"view" or "editable"/"locked"
+    - adding a row to a table
+    - deleting a row from a table
+    - dragging rows up and down to re-order (conflict with sort columns?)
+    - adding an entry to a table cell
+    - replacing an entry with new text
+    - adding a new column to a table
+    - creating a new attribute
+    - setting the expected data type of an attribute
+    - doing data type validation on a new entry
+    - adding a cell entry which is a reference to another item
+    - creating a new category & putting things in categories
+    - creating a new user account for yourself
+    - logging in and logging out
+    - creating a new page
+    - creating a new section on a page
+    - editing the query for a section
+    - GUI feedback to show what text is editable?
+---------------------------------------------------
+ + talk about different designs for:
+    - doing authentication (e.g. where to store passwords?)
+    - representing queries (hold query matching criteria in normal attributes?)
+    - ad-hoc queries as well as persistant queries?
+    - bi-directional references as a type of entry?
+---------------------------------------------------
+ + Bug: "Waiting for localhost..."
+    Load the demo_page.html page from http://localhost:...
+    Go into Edit mode and change some entry.  The Firefox status 
+    bar (bottom left) sometimes gets stuck saying 
+    "Waiting for localhost...", even though it doesn't seem to
+    be waiting
+---------------------------------------------------
+ + Bug: "Node was not found" exception
+    Load the demo_page.html page from file:///...
+    Go into Edit mode and change some entry.  
+    You get an exception in EntryView.js:
+      Util.handleError()
+      uncaught exception: [Exception... "Node was not found"  
+      code: "8" nsresult: "0x80530008 (NS_ERROR_DOM_NOT_FOUND_ERR)"  
+      location: "file:///K:/www/htdocs/openrecord/demo/current/trunk/source/EntryView.js Line: 221"]
+      line: 0
+    
+===========================       
+Open Issues
+===========================       
+ + How should we interoperate with other repositories(openrecord + other sources of data)?
+ + Should we rename "World"?
+ + Q: Do we (and how) need a concept of focus for Views? Currently, only Text input 
+    and Textarea gets keyboard focus. We need it for table selections and possibly 
+    selecting "lozenges" (item references stored in the EntryView)
\ No newline at end of file

Modified: trunk/web_pages/content/dev.html
===================================================================
--- trunk/web_pages/content/dev.html	2005-11-02 01:02:09 UTC (rev 372)
+++ trunk/web_pages/content/dev.html	2005-11-02 03:20:21 UTC (rev 373)
@@ -12,11 +12,11 @@
     <li class="detail"><a href="http://lists.berlios.de/mailman/listinfo/openrecord-svn" rel="external">subversion mailing list: openrecord-svn</a></li>
   </ul>
   
-  <h2>Lists of features, "user stories", tasks to do, and bugs to fix</h2>
+  <h2>Lists of features, tasks to do, and bugs to fix</h2>
   <p>For now, we're using a simple plain-text file to keep track of all 
   the work we need to do.</p> 
   <ul>
-    <li class="detail"><a href="http://svn.berlios.de/viewcvs/openrecord/trunk/documentation/release_planning.txt?view=markup" rel="external">tasks and user stories</a></li>
+    <li class="detail"><a href="http://svn.berlios.de/viewcvs/openrecord/trunk/documentation/to_do_list.txt?view=markup" rel="external">to do list</a></li>
   </ul>
 
   <h2>Source code: browsing</h2>



From skinner at berlios.de  Mon Nov 14 04:04:57 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Mon, 14 Nov 2005 04:04:57 +0100
Subject: [openrecord-svn] r374 - in trunk/web_pages: content page
Message-ID: <200511140304.jAE34vIL002057@sheep.berlios.de>

Author: skinner
Date: 2005-11-14 04:04:49 +0100 (Mon, 14 Nov 2005)
New Revision: 374

Modified:
   trunk/web_pages/content/about.html
   trunk/web_pages/page/index.html
Log:
Minor changes to the web site html files.

Modified: trunk/web_pages/content/about.html
===================================================================
--- trunk/web_pages/content/about.html	2005-11-02 03:20:21 UTC (rev 373)
+++ trunk/web_pages/content/about.html	2005-11-14 03:04:49 UTC (rev 374)
@@ -1,11 +1,22 @@
 <h1>About the OpenRecord project</h1>
 <div>
-  <p>The goal of the project is to create open-source software.  We're 
+  <p>The goal of the OpenRecord project is to create open source software.  We're 
   making a web-based collaboration system, somewhat like a wiki. To read 
   about what the software is supposed to do, see the <a href="spec.html">spec page</a>.</p>
-  <p>We're just getting started, so we don't yet have too much to show you.
-  Brian Skinner wrote the original spec in February 2005.  Chao Lam and Mignon
-  Belongie joined the project soon after, and we've been actively coding 
-  for about six months now.</p>
 </div>
+<h2>History</h2>
+  <p>We started writing code for OpenRecord in February 2005.  In August 
+  2005 we made our first real demo documents, and we began giving demos of a
+  0.1 release.  In November 2005 we became a project of the Dojo Foundation, 
+  and now we're gradually working on porting the OpenRecord over to use more and
+  more of the Dojo toolkit.</p>
+<h2>Status (as of November 2005)</h2>
+  We currently have two programmers working on OpenRecord part time, and we
+  hope to have two more programmers joining us in December 2005.  We're working 
+  on cleaning up our plugin API, and we hope to have a 0.2 developer release 
+  in early 2006 -- once that's in place we can invite people to start writing 
+  plugin views.  Later in 2006 we'll commit to a file format, and people will
+  be able to start actually saving their data in OpenRecord.</p>
 
+
+

Modified: trunk/web_pages/page/index.html
===================================================================
--- trunk/web_pages/page/index.html	2005-11-02 03:20:21 UTC (rev 373)
+++ trunk/web_pages/page/index.html	2005-11-14 03:04:49 UTC (rev 374)
@@ -24,7 +24,8 @@
         <a href="http://developer.berlios.de" title="BerliOS Developer" style="border-style: none;"> 
           <img src="http://developer.berlios.de/bslogo.php?group_id=3396" 
            width="124px" height="32px" alt="BerliOS Developer Logo" style="border-style: none;"></img>
-        </a>
+        </a><br/>
+      A project of the <a href="http://dojotoolkit.org/">Dojo Foundation</a>.
       </p>
     </div>
 



From skinner at berlios.de  Wed Nov 16 00:32:31 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Wed, 16 Nov 2005 00:32:31 +0100
Subject: [openrecord-svn] r375 - trunk/tests/tests_of_external_code
Message-ID: <200511152332.jAFNWVDa028882@sheep.berlios.de>

Author: skinner
Date: 2005-11-16 00:32:28 +0100 (Wed, 16 Nov 2005)
New Revision: 375

Modified:
   trunk/tests/tests_of_external_code/TimingTest.js
Log:
Minor clean-up in TimingTest.js

Modified: trunk/tests/tests_of_external_code/TimingTest.js
===================================================================
--- trunk/tests/tests_of_external_code/TimingTest.js	2005-11-14 03:04:49 UTC (rev 374)
+++ trunk/tests/tests_of_external_code/TimingTest.js	2005-11-15 23:32:28 UTC (rev 375)
@@ -338,9 +338,10 @@
     this._height = height;
     
     this.getArea = function() {
-      // do some busy work
-      var foo = [10];
-      for (var i in foo) {
+      // Here's some code that does some busy work, just so the  
+      // definition of the getArea method has more code in it,
+      // to eat up more memory.
+      for (var i = 0; i < 10; i++) {
         var area = (this._width * this._height);
       }
       return area;
@@ -354,9 +355,10 @@
 };
 
 shapes.TypeTwoBox.prototype.getArea = function() {
-  // do some busy work
-  var foo = [10];
-  for (var i in foo) {
+  // Here's some code that does some busy work, just so the  
+  // definition of the getArea method has more code in it,
+  // to eat up more memory.
+  for (var i = 0; i < 10; i++) {
     var area = (this._width * this._height);
   }
   return area;



From skinner at berlios.de  Wed Nov 16 00:35:25 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Wed, 16 Nov 2005 00:35:25 +0100
Subject: [openrecord-svn] r376 - trunk/third_party/dojo
Message-ID: <200511152335.jAFNZPD2032138@sheep.berlios.de>

Author: skinner
Date: 2005-11-16 00:34:47 +0100 (Wed, 16 Nov 2005)
New Revision: 376

Removed:
   trunk/third_party/dojo/dojo-0.1.0/
Log:




From skinner at berlios.de  Thu Nov 17 02:21:53 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Thu, 17 Nov 2005 02:21:53 +0100
Subject: [openrecord-svn] r377 - in trunk: source source/archive source/util tests/dojo tests/model tests/storage tests/util third_party third_party/dojo/dojo-rev1759/src/crypto
Message-ID: <200511170121.jAH1LrBN022858@sheep.berlios.de>

Author: skinner
Date: 2005-11-17 02:21:21 +0100 (Thu, 17 Nov 2005)
New Revision: 377

Removed:
   trunk/third_party/md5/
Modified:
   trunk/source/OpenRecordLoader.js
   trunk/source/archive/StubArchive.js
   trunk/source/util/Util.js
   trunk/tests/dojo/SimpleDojoTest.js
   trunk/tests/model/ModelTest.html
   trunk/tests/model/RepositoryWritingTest.html
   trunk/tests/model/TestReorderingForSpecialCases.html
   trunk/tests/model/TestReorderingForTypicalOrdinals.html
   trunk/tests/model/test_AfterLogin.html
   trunk/tests/model/test_BeforeLogin.html
   trunk/tests/model/test_SequentialUsers.html
   trunk/tests/model/test_dependencies.html
   trunk/tests/storage/DirectoryReadingTest.html
   trunk/tests/storage/StorageTest.html
   trunk/tests/util/UtilTest.html
   trunk/tests/util/UtilTest.js
   trunk/tests/util/XmlConverterMultiplePassesTest.html
   trunk/tests/util/XmlConverterTest.html
   trunk/tests/util/test_dependencies.html
   trunk/third_party/dojo/dojo-rev1759/src/crypto/MD5.js
Log:
Removed the file third_party/md5/md5.js, and replaced our calls to that package with calls to dojo.crypto package.  Also changed a couple lines of the dojo crypto/MD5.js in order to apply the fix described in this bug report: http://dojotoolkit.org/trac/ticket/183

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/source/OpenRecordLoader.js	2005-11-17 01:21:21 UTC (rev 377)
@@ -95,7 +95,6 @@
 orp.loader.loadStylesheet("source/base_style.css");
 
 orp.loader.loadScript("third_party/dojo/dojo-rev1759/dojo.js");
-orp.loader.loadScript("third_party/md5/md5.js");
 orp.loader.loadScript("third_party/scriptaculous/prototype.js");
 orp.loader.loadScript("third_party/scriptaculous/effects.js");
 orp.loader.loadScript("third_party/scriptaculous/dragdrop.js");

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/source/archive/StubArchive.js	2005-11-17 01:21:21 UTC (rev 377)
@@ -33,6 +33,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.archive.StubArchive");
 dojo.provide("orp.archive.ArchiveLoader");
+dojo.require("dojo.crypto.*");
 dojo.require("orp.model.World");
 dojo.require("orp.model.Item");
 dojo.require("orp.model.Entry");
@@ -389,7 +390,8 @@
   
   var md5Authentication = null;
   if (authentication) {
-    md5Authentication = orp.util.hex_md5(authentication);
+    // md5Authentication = orp.util.hex_md5(authentication);
+    md5Authentication = dojo.crypto.toBinHex(dojo.crypto.MD5.compute(authentication));
   }
   this._hashTableOfUserAuthenticationInfo[newUser.getUuid()] = md5Authentication;
 
@@ -460,7 +462,8 @@
   
   var md5hashOfPassword = null;
   if (password) {
-    md5hashOfPassword = orp.util.hex_md5(password);
+    // md5hashOfPassword = orp.util.hex_md5(password);
+    md5hashOfPassword = dojo.crypto.toBinHex(dojo.crypto.MD5.compute(password));
   }
   var realAuthentication = this.getAuthenticationInfoForUser(user);
   var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/source/util/Util.js	2005-11-17 01:21:21 UTC (rev 377)
@@ -388,17 +388,6 @@
 
 
 // -------------------------------------------------------------------
-// Methods for doing encryption
-// -------------------------------------------------------------------
-
-orp.util.hex_md5 = function(string) {
-  // Calls the hex_md5() function in .../trunk/third_party/md5/md5.js
-  return hex_md5(string);
-};
-
-
-
-// -------------------------------------------------------------------
 // Methods that deal with event handling
 // -------------------------------------------------------------------
 

Modified: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-11-17 01:21:21 UTC (rev 377)
@@ -78,6 +78,29 @@
   assertTrue("b should be an instance of classA.", b instanceof classA);
 }
 
+function testMD5() {
+  dojo.require("dojo.crypto.*");
+
+  var whenInTheCourse = "When in the course of human events: d41d8cd98f00b204e9800998ecf8427e";
+  var theQuickBrownFox = "The quick brown fox jumps over the lazy dog";
+  var theRainInSpain = "The rain in Spain falls mainly on the plain.";
+  assertTrue('md5 of "" is correct', (getHexMD5("") == "d41d8cd98f00b204e9800998ecf8427e"));
+  assertTrue('md5 of "abc" is correct', (getHexMD5("abc") == "900150983cd24fb0d6963f7d28e17f72"));
+  assertTrue('md5 of "iggy" is correct', (getHexMD5("iggy") == "0e026f55a72c0861a93e750c2a5427b1"));
+  assertTrue('md5 of "The quick brown fox..." is correct', (getHexMD5(theQuickBrownFox) == "9e107d9d372bb6826bd81d3542a419d6"));
+  assertTrue('md5 of "When in the course..." is correct', (getHexMD5(whenInTheCourse) == "4d694e03af399831c6f0c1f1bcc2fc93"));
+  assertTrue('md5 of "The rain in Spain..." is correct', (getHexMD5(theRainInSpain) == "3948716d567532d9aee33c7d2f34b970"));
+}
+
 // -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function getHexMD5(string) {
+  return dojo.crypto.toBinHex(dojo.crypto.MD5.compute(string));
+}
+
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/model/ModelTest.html
===================================================================
--- trunk/tests/model/ModelTest.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/ModelTest.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="ModelTest.js"></script>
   </head>
   

Modified: trunk/tests/model/RepositoryWritingTest.html
===================================================================
--- trunk/tests/model/RepositoryWritingTest.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/RepositoryWritingTest.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -13,7 +13,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="RepositoryWritingTest.js"></script>
   </head>
   

Modified: trunk/tests/model/TestReorderingForSpecialCases.html
===================================================================
--- trunk/tests/model/TestReorderingForSpecialCases.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/TestReorderingForSpecialCases.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -13,7 +13,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="TestReorderingForSpecialCases.js"></script>
   </head>

Modified: trunk/tests/model/TestReorderingForTypicalOrdinals.html
===================================================================
--- trunk/tests/model/TestReorderingForTypicalOrdinals.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/TestReorderingForTypicalOrdinals.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -13,7 +13,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="TestReorderingForTypicalOrdinals.js"></script>
   </head>

Modified: trunk/tests/model/test_AfterLogin.html
===================================================================
--- trunk/tests/model/test_AfterLogin.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/test_AfterLogin.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="test_AfterLogin.js"></script>
   </head>
   

Modified: trunk/tests/model/test_BeforeLogin.html
===================================================================
--- trunk/tests/model/test_BeforeLogin.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/test_BeforeLogin.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="test_BeforeLogin.js"></script>
   </head>
   

Modified: trunk/tests/model/test_SequentialUsers.html
===================================================================
--- trunk/tests/model/test_SequentialUsers.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/test_SequentialUsers.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="test_SequentialUsers.js"></script>
   </head>
   

Modified: trunk/tests/model/test_dependencies.html
===================================================================
--- trunk/tests/model/test_dependencies.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/model/test_dependencies.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="test_dependencies.js"></script>
   </head>
   

Modified: trunk/tests/storage/DirectoryReadingTest.html
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/storage/DirectoryReadingTest.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -13,7 +13,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="DirectoryReadingTest.js"></script>
   </head>
   

Modified: trunk/tests/storage/StorageTest.html
===================================================================
--- trunk/tests/storage/StorageTest.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/storage/StorageTest.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -13,7 +13,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="StorageTest.js"></script>
   </head>
   

Modified: trunk/tests/util/UtilTest.html
===================================================================
--- trunk/tests/util/UtilTest.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/util/UtilTest.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="UtilTest.js"></script>
   </head>
   

Modified: trunk/tests/util/UtilTest.js
===================================================================
--- trunk/tests/util/UtilTest.js	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/util/UtilTest.js	2005-11-17 01:21:21 UTC (rev 377)
@@ -86,13 +86,6 @@
   assertTrue('All members of setNumber2 are in setNumber2', orp.util.areObjectsInSet(setNumber2, setNumber2));
 }
 
-function testEncryptionMethods() {
-  var longString = "When in the course of human events: d41d8cd98f00b204e9800998ecf8427e";
-  assertTrue('md5 of "" is correct', (orp.util.hex_md5("") == "d41d8cd98f00b204e9800998ecf8427e"));
-  assertTrue('md5 of "iggy" is correct', (orp.util.hex_md5("iggy") == "0e026f55a72c0861a93e750c2a5427b1"));
-  assertTrue('md5 of longString is correct', (orp.util.hex_md5(longString) == "4d694e03af399831c6f0c1f1bcc2fc93"));
-}
-
 function testIsEmpty() {
   var canada = {name:"Canada", provinces:8};
   var atlantis = {};

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.html
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="XmlConverterMultiplePassesTest.js"></script>
   </head>
   

Modified: trunk/tests/util/XmlConverterTest.html
===================================================================
--- trunk/tests/util/XmlConverterTest.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/util/XmlConverterTest.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="XmlConverterTest.js"></script>
   </head>
   

Modified: trunk/tests/util/test_dependencies.html
===================================================================
--- trunk/tests/util/test_dependencies.html	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/tests/util/test_dependencies.html	2005-11-17 01:21:21 UTC (rev 377)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="test_dependencies.js"></script>
   </head>
   

Modified: trunk/third_party/dojo/dojo-rev1759/src/crypto/MD5.js
===================================================================
--- trunk/third_party/dojo/dojo-rev1759/src/crypto/MD5.js	2005-11-15 23:34:47 UTC (rev 376)
+++ trunk/third_party/dojo/dojo-rev1759/src/crypto/MD5.js	2005-11-17 01:21:21 UTC (rev 377)
@@ -22,8 +22,19 @@
 	}
 	function roll(num,cnt) { return (num<<cnt)|(num>>>(32-cnt)); }
 	this.compute=function(x,len) {
+  // -------------------------------------------------------
+  // FIXME
+  // 
+  // Brian Skinner changed these lines on 2005/11/16 to apply
+  // the fix supplied in the bug report created by wey at slupet.com 
+  // for this bug:
+  //    http://dojotoolkit.org/trac/ticket/183
+  //
+    if (!len) var len=x.length*chrsz;
 		if (typeof(x)=="string") x=dojo.crypto.toByteArray(x);
-		if (!len) var len=x.length;
+	//	if (typeof(x)=="string") x=dojo.crypto.toByteArray(x);
+  //	if (!len) var len=x.length;
+  // -------------------------------------------------------
 		x[len>>5]|=0x80<<((len)%32);
 		x[(((len+64)>>>9)<<4)+14]=len;
 		var a= 1732584193;



From skinner at berlios.de  Fri Nov 18 04:29:18 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Fri, 18 Nov 2005 04:29:18 +0100
Subject: [openrecord-svn] r378 - trunk/web_pages/content
Message-ID: <200511180329.jAI3TIch031659@sheep.berlios.de>

Author: skinner
Date: 2005-11-18 04:29:09 +0100 (Fri, 18 Nov 2005)
New Revision: 378

Modified:
   trunk/web_pages/content/about.html
   trunk/web_pages/content/bookmarks.html
Log:
Added content to a couple of pages on the web site (about.html and bookmarks.html).

Modified: trunk/web_pages/content/about.html
===================================================================
--- trunk/web_pages/content/about.html	2005-11-17 01:21:21 UTC (rev 377)
+++ trunk/web_pages/content/about.html	2005-11-18 03:29:09 UTC (rev 378)
@@ -11,12 +11,25 @@
   and now we're gradually working on porting the OpenRecord over to use more and
   more of the Dojo toolkit.</p>
 <h2>Status (as of November 2005)</h2>
-  We currently have two programmers working on OpenRecord part time, and we
+  <p>We currently have two programmers working on OpenRecord part time, and we
   hope to have two more programmers joining us in December 2005.  We're working 
   on cleaning up our plugin API, and we hope to have a 0.2 developer release 
   in early 2006 -- once that's in place we can invite people to start writing 
   plugin views.  Later in 2006 we'll commit to a file format, and people will
   be able to start actually saving their data in OpenRecord.</p>
+<h2>License</h2>
+  <p>All of the code we're writing is available under open source licenses.
+  Copyright rights to the OpenRecord have been relinquished using the 
+  <a href="http://creativecommons.org/licenses/publicdomain/" rel="external">Creative 
+  Commons Public Domain Dedication</a>, so you're free to copy freely from our files.
+  We've also contributed all the code to the 
+  <a href="http://dojotoolkit.org" rel="external">Dojo Foundation</a>,
+  and like the rest of the Dojo code, the OpenRecord code is available under the
+  <a href="http://opensource.org/licenses/afl-2.1.php" rel="external">Academic 
+  Free License (AFL)</a>.</p>
+<h2>Some similar apps</h2>
+  <p>Here's a list of <a href="bookmarks.html#similar">projects that have 
+  some similar features</a>.</p>
 
 
 

Modified: trunk/web_pages/content/bookmarks.html
===================================================================
--- trunk/web_pages/content/bookmarks.html	2005-11-17 01:21:21 UTC (rev 377)
+++ trunk/web_pages/content/bookmarks.html	2005-11-18 03:29:09 UTC (rev 378)
@@ -1,5 +1,116 @@
 <h1>Bookmarks</h1>
 <div>
+  <h2 id="similar">Apps with some similarities to OpenRecord</h2>
+  <blockquote>
+  <dl class="faq">
+    <di>
+      <dt><a href="http://base.google.com/base/about.html" rel="external">Google Base</a></dt>
+      <dd>Google Base has a data model that's vaguely similar to the OpenRecord
+      data model.  For example, in Google Base any item can have any number of 
+      ad-hoc attributes, any attribute can be multi-valued, any date
+      value can have an end-date as well as a start-date, and numbers can
+      have units (like "meters" or "meters/second").  However, I think the 
+      similarities end there.  Google Base seems to be oriented toward 
+      "monolithic" items, rather than big structures of small items -- for example
+      Google Base does not seem to be designed to support any type of references 
+      between items, or multi-item transactions.
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://developerdocumentation.ning.com/post.php?Post:slug=ContentStore" rel="external">The Ning Content Store</a></dt>
+      <dd>The ning.com site uses a custom Content Store that has a data model
+      which is similar in many ways to the OpenRecord data model.  A Ning "Content
+      Object" is like an OpenRecord "Item".  The most significant similarity is
+      that both Ning and OpenRecord lack any notion of pre-defined schema --
+      any items (content objects) can have any attributes.  Ning and OpenRecord
+      are also similar in that they both support bi-directional references.
+      However, there are a number of differences.  In Ning, each Object can be 
+      of only one type, and the type
+      of an Object cannot change once the Object is created -- OpenRecord has no
+      similar notion.  In Ning, an attribute is identified by its name (a string)
+      -- in OpenRecord attributes are identified by UUID, an attribute can have
+      different names in different languages, and each attribute is itself an
+      item, so it can have not only a 'name', but also a 'summary' description, 
+      and other descriptive attributes.  Like OpenRecord, Ning allows any attribute 
+      to be multi-valued, but in Ning all the values of a multi-valued attribute
+      must be of the same type.   Ning has a notion of public vs. private content, 
+      whereas OpenRecord treats all content as public.  OpenRecord includes some
+      support for transactions, whereas Ning generally doesn't.
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://dabbledb.com/about/" rel="external">Dabble DB</a></dt>
+      <dd>The Dabble web site currently (Nov 2005) only has a few screenshots,
+      and doesn't have much written documentation.  So, it's hard to know quite
+      what Dabble is, but judging by what is posted it certainly looks like
+      Dabble and OpenRecord are both trying to solve the same problems.  For 
+      more insight into Dabble, check out their weblog: 
+      <a href="http://smallthought.com/blog/" rel="external">Dabble weblog</a>
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://danbricklin.com/log/aboutwikicalc01.htm" rel="external">Dan Bricklin's wikiCalc</a></dt>
+      <dd>"The wikiCalc program is a web authoring tool for pages that include 
+      data that is more than just unformatted prose. It combines some of the 
+      ease of authoring and multi-person editing of a wiki with the familiar 
+      visual formatting and data organizing metaphor of a spreadsheet."
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://sproutliner.com/" rel="external">Sproutliner</a></dt>
+      <dd>Sproutliner is a web-based app that's good at outlines and tables of items.
+      It has a crisp UI.  I think that it does not support concurrent editing of 
+      pages, and it looks to be page-centric (like Sparrow) rather than database-centric
+      (like Dabble?).  
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://www2.parc.com/istl/projects/sparrow/" rel="external">Sparrow Web</a></dt>
+      <dd>Sparrow Web is a structured wiki tool that seems geared toward the 
+      same sort of uses as OpenRecord.  Unlike most of the other projects on this
+      list, Sparrow Web was written in the 1990s and has been in use for years and
+      years.  Sparrow Web has a forms-based UI where OpenRecord has an AJAX UI,
+      and Sparrow Web has page-centric content, rather than database-centric 
+      content that appears on pages as the result of queries.
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://meta.wikimedia.org/wiki/Semantic_MediaWiki" rel="external">Semantic MediaWiki</a></dt>
+      <dd>"The overall objective of the project is to develop a single solution for 
+      semantic annotation that fits the needs of most Wikimedia projects and still 
+      meets the Wiki-specific requirements of usability and performance." 
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://meta.wikimedia.org/wiki/Wikidata" rel="external">Wikidata</a></dt>
+      <dd>A MediaWiki project. "Wikidata is a proposed wiki-like database for 
+      various types of content." 
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://cocoondev.org/daisy/features.html" rel="external">Daisy CMS</a></dt>
+      <dd>An open source CMS that has at least a few similarities to OpenRecord.
+      For example: multi-value fields, documents identified by unique IDs (and
+      documents names need not be unique), and there's no intrinsic notion of 
+      file-system directories.
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://www.quickbase.com/p/CWG_features.asp?ps=CW" rel="external">Intuit QuickBase</a></dt>
+      <dd>Intuit QuickBase is an expensive, proprietary service geared toward 
+      corporate workgroups.  Seems to have lots of good features for charts,
+      timelines, etc.
+      </dd>
+    </di>
+    <di>
+      <dt><a href="http://km.aifb.uni-karlsruhe.de/services/xam/Wiki.jsp?page=RelatedWork" rel="external">"Semantic Wiki" projects</a></dt>
+      <dd>Links to a half dozen "Semantic Wiki" projects like Platypus, Rhizome, 
+      and Gnowsis, as well as links to desktop-app projects like Chandler and Haystack.
+      </dd>
+    </di>
+  </dl>
+  </blockquote>
+
   <h2>JavaScript UI examples</h2>
   <blockquote>
   <dl class="faq">
@@ -157,6 +268,7 @@
     </li>
     <li class="detail">JavaScript Articles
       <ul>
+        <li class="detail"><a href="http://mir.aculo.us/articles/2005/07/28/automatic-testing-of-your-web-pages-with-javascript" rel="external">Automatic Testing of JavaScript UI</a></li>
         <li class="detail"><a href="http://www.sitepoint.com/article/structural-markup-javascript" rel="external">sitepoint.com: Enhancing Structural Markup with JavaScript</a></li>
         <li class="detail"><a href="http://www.sitepoint.com/blog-post-view.php?id=249759" rel="external">sitepoint.com: Cross-browser event registration</a></li>
         <li class="detail"><a href="http://www.quirksmode.org/index.html?/dom/innerhtml.html" rel="external">quirksmode.org: innerHTML</a> </li>
@@ -176,7 +288,9 @@
     </li>
     <li class="detail">JavaScript Tools
       <ul>
+        <li class="detail"><a href="http://selenium.thoughtworks.com/index.html" rel="external">Selenium</a> -- UI unit tests </li>
         <li class="detail"><a href="http://www.crockford.com/javascript/lint.html" rel="external">JSLint</a> </li>
+        <li class="detail"><a href="http://www.javascriptlint.com/" rel="external">JavaScript Lint</a> </li>
         <li class="detail"><a href="http://www.mozilla.org/projects/venkman/" rel="external">venkman</a> </li>
         <li class="detail"><a href="http://www.edwardh.com/jsunit/" rel="external">jsunit</a> </li>
         <li class="detail"><a href="http://www.mozilla.org/docs/dom/domref/dom_shortIX.html" rel="external">mozilla.org: DOM reference</a> </li>



From skinner at berlios.de  Sat Nov 19 21:32:07 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Sat, 19 Nov 2005 21:32:07 +0100
Subject: [openrecord-svn] r379 - trunk/tests/dojo
Message-ID: <200511192032.jAJKW7DS002175@sheep.berlios.de>

Author: skinner
Date: 2005-11-19 21:32:06 +0100 (Sat, 19 Nov 2005)
New Revision: 379

Modified:
   trunk/tests/dojo/SimpleDojoTest.js
Log:
Minor tweak to SimpleDojoTest.js

Modified: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-11-18 03:29:09 UTC (rev 378)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-11-19 20:32:06 UTC (rev 379)
@@ -66,16 +66,17 @@
 
 function testDojoInherits() {
   classA = function() {
-    _a = 3;
+    this._a = 3;
   };
   classB = function() {
     classA.call(this);
-    _b = 4;
+    this._b = 4;
   };
   dojo.inherits(classB, classA);  
   var b = new classB();
   assertTrue("b should be an instance of classB.", b instanceof classB);
   assertTrue("b should be an instance of classA.", b instanceof classA);
+  assertTrue("b._a == 3", b._a == 3);
 }
 
 function testMD5() {



From skinner at berlios.de  Sat Nov 19 21:33:18 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Sat, 19 Nov 2005 21:33:18 +0100
Subject: [openrecord-svn] r380 - trunk/documentation
Message-ID: <200511192033.jAJKXIJ7002507@sheep.berlios.de>

Author: skinner
Date: 2005-11-19 21:33:17 +0100 (Sat, 19 Nov 2005)
New Revision: 380

Modified:
   trunk/documentation/to_do_list.txt
Log:
Updated to_do_list.txt to reflect time spent.

Modified: trunk/documentation/to_do_list.txt
===================================================================
--- trunk/documentation/to_do_list.txt	2005-11-19 20:32:06 UTC (rev 379)
+++ trunk/documentation/to_do_list.txt	2005-11-19 20:33:17 UTC (rev 380)
@@ -92,7 +92,7 @@
 -------+----------+---------+----------------------------------------------
        |          |         |  1. try to replace View.appendNewElement() with dojo.xml.domUtil methods
        |          |         |  2. try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
-       |          |         |  3. try to replace md5.js with dojo.crypto.MD5 methods
+brian  |          | (0.4+)  |  3. try to replace md5.js with dojo.crypto.MD5 methods
        |          |         |  4. try to replace /source/util/Cookie.js with dojo.io.cookies
        |          |         |  5. try to replace remaining Util.js functions with dojo.lang functions
        |          |         |  6. Make DateValue wrap an internal Date object
@@ -131,7 +131,7 @@
        |          |         | 23. improve UI for creating a new page
        |          |         | 24. improve UI for adding a new section to a page
        |          |         | 25. UI to move/delete sections?
-       |          |         | 26. Better time parsing e.g. 3pm
+brian  |          | 0.1  IED| 26. Better time parsing e.g. 3pm
        |          |         | 27. Have different documents use different style-sheets
        |          |         | 28. Wire up observers & keep views in sync
        |          |         | 29. Provide GUI feedback about what's editable



From skinner at berlios.de  Sat Nov 19 21:35:07 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Sat, 19 Nov 2005 21:35:07 +0100
Subject: [openrecord-svn] r381 - in trunk: source/util tests/util
Message-ID: <200511192035.jAJKZ7jx002858@sheep.berlios.de>

Author: skinner
Date: 2005-11-19 21:35:06 +0100 (Sat, 19 Nov 2005)
New Revision: 381

Modified:
   trunk/source/util/DateValue.js
   trunk/tests/util/DateValueTest.js
Log:
Minor bug fix in DateValue.js -- we now test to make sure that DateValue can parse in any value that it writes out.

Modified: trunk/source/util/DateValue.js
===================================================================
--- trunk/source/util/DateValue.js	2005-11-19 20:33:17 UTC (rev 380)
+++ trunk/source/util/DateValue.js	2005-11-19 20:35:06 UTC (rev 381)
@@ -223,10 +223,10 @@
       var todayInDays = Math.floor((Date.now()-timezoneOffsetMS)/DateValue.MILLISECS_IN_A_DAY);
       var dateInDays = Math.floor((this.getTime()-timezoneOffsetMS)/DateValue.MILLISECS_IN_A_DAY);
       var returnStr;
-      if (dateInDays == todayInDays) {
+      if (dateInDays == todayInDays && !this._hasTime) {
         returnStr = 'Today';
       }
-      else if (dateInDays == (todayInDays + 1)) {
+      else if (dateInDays == (todayInDays + 1) && !this._hasTime) {
         returnStr = 'Tomorrow';
       }
       else {
@@ -239,9 +239,7 @@
         var hours = date.getHours();
         if (minutes !== 0 || hours !== 0) {
           returnStr += ' ' + (hours % 12);
-          if (minutes !== 0) { 
-            returnStr += ':' + (minutes < 10 ? '0' + minutes : minutes);
-          }
+          returnStr += ':' + (minutes < 10 ? '0' + minutes : minutes);
           returnStr += ' ' + (hours > 12 ? 'pm' : 'am');
         }
       }

Modified: trunk/tests/util/DateValueTest.js
===================================================================
--- trunk/tests/util/DateValueTest.js	2005-11-19 20:33:17 UTC (rev 380)
+++ trunk/tests/util/DateValueTest.js	2005-11-19 20:35:06 UTC (rev 381)
@@ -85,12 +85,18 @@
   }
   assertTrue('Time display is right', dates[8].toShortLocaleDateString() == 'Feb 14, 1944 9:30 am');
   assertTrue('Today is parsed correctly', dates[10].toShortLocaleDateString() =='Today');
-  assertTrue('Today displays correctly', dates[11].toShortLocaleDateString().indexOf('Today') === 0);
+  assertTrue('Today does not display if _hasTime', dates[11].toShortLocaleDateString().indexOf('Today') != 0);
   assertTrue('Tomorrow is parsed correctly', dates[12].toShortLocaleDateString().toLowerCase() == 'tomorrow');
   assertTrue('today is correct in millisecs', Date.now() - dates[10].getTime() < DateValue.MILLISECS_IN_A_DAY);
   assertTrue('Month/Year parsing is right', dates[13].getYear() == 106 && dates[13].getMonth() == 3);
   assertTrue('Numeric month/year parsing correct', dates[14].getYear() == 103 && dates[14].getMonth() == 6);
+  for (i in dates) {
+    var asString = dates[i].toShortLocaleDateString();
+    assertTrue("All DateValue's should be round tripped: "+ i + ", " + asString, (new DateValue(asString)).isValid());
+  }
 
+  
+  
   var notDates = new Array();
   notDates[0] = new DateValue("194z");
   notDates[1] = new DateValue("");
@@ -105,7 +111,31 @@
   // alert(alertString);
 }
 
+function not_yet_testDateRangeConstructor() {
+  // NOTE:
+  //   The only DateValue methods that OpenRecord 
+  // actually relies on are:
+  //   toString()
+  //   isValid()
+  //   orp.util.DateValue.getStringMonthDayYear()
+  
+  // TO DO:
+  //   create a DateValue with range
+  //   serialize a DateValue with range
+  //   round trip DVs
+  //   make sure isValid is False for bad strings
+  var DateValue = orp.util.DateValue;
+  var dates = new Array();
+  dates[0] = new DateValue("1944");
+  dates[1] = new DateValue("1944 - 1994");
+  dates[2] = new DateValue("April 1944 - June 1944");
+  for (var i in dates) {
+    var dateValue = dates[i];
+    assertTrue('DateValue is valid', dateValue.isValid());
+  }
+}
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From skinner at berlios.de  Sun Nov 20 01:14:27 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Sun, 20 Nov 2005 01:14:27 +0100
Subject: [openrecord-svn] r382 - in trunk: source/archive source/model tests/model
Message-ID: <200511200014.jAK0ERch010014@sheep.berlios.de>

Author: skinner
Date: 2005-11-20 01:14:23 +0100 (Sun, 20 Nov 2005)
New Revision: 382

Modified:
   trunk/source/archive/StubArchive.js
   trunk/source/model/World.js
   trunk/tests/model/test_BeforeLogin.js
Log:
Added two new methods to World: importItem() and importEntry()


Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-11-19 20:35:06 UTC (rev 381)
+++ trunk/source/archive/StubArchive.js	2005-11-20 00:14:23 UTC (rev 382)
@@ -206,7 +206,7 @@
  */
 orp.archive.StubArchive.prototype.newItem = function(name, observer) {
   this._throwErrorIfNoUserIsLoggedIn();
-  var item = this._createNewItem(observer, false);
+  var item = this._createNewItem(observer);
   if (name) { 
     var attributeCalledName = this._world.getAttributeCalledName();
     item.addEntry({attribute:attributeCalledName, value:name});
@@ -235,15 +235,32 @@
 
 
 /**
+ * Records the fact that a provisional item just became real.
+ *
+ * @scope    package instance method
+ * @param    item    The item that was provisional and just became real. 
+ */
+orp.archive.StubArchive.prototype._provisionalItemJustBecameReal = function(item) {
+  this._currentTransaction.addRecord(item);
+};
+
+
+/**
  * Returns a newly created item: either a provisional item or a normal item.
  *
  * @scope    private instance method
  * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
- * @param    provisionalFlag    True if the item is provisional; false if the item is normal. 
+ * @param    provisionalFlag    Optional. True if the item is provisional; false if the item is normal. Default is false.
+ * @param    uuid    Optional. If no UUID is supplied, a new one will be generated.
  * @return   A newly created item.
  */
-orp.archive.StubArchive.prototype._createNewItem = function(observer, provisionalFlag) {
-  var uuid = this._getNewUuid();
+orp.archive.StubArchive.prototype._createNewItem = function(observer, provisionalFlag, uuid) {
+  if (!uuid) {
+    uuid = this._getNewUuid();
+  }
+  if (!provisionalFlag) {
+    provisionalFlag = false;
+  }
   var item = new orp.model.Item(this._world, uuid);
   item._initialize(observer, provisionalFlag);
   this._hashTableOfItemsKeyedByUuid[uuid] = item;
@@ -255,13 +272,39 @@
 
 
 /**
- * Records the fact that a provisional item just became real.
+ * Creates a new item in this repository that corresponds to an existing
+ * item from somewhere else.  The new item in this repository will have
+ * the same UUID as the corresponding item in other repositories.
+ * 
+ * @scope    public instance method
+ * @param    uuid    The UUID of the item.
+ * @return   The new item.
+ * @throws   Throws an Error if the UUID is already in use.
+ */
+orp.archive.StubArchive.prototype.importItem = function(uuid) {
+  if (this.getItemFromUuid(uuid)) {
+    var error = new Error("You attempted to import an item that has a UUID which is already in use.");
+    throw error;
+  }
+  return this._createNewItem(null, null, uuid);
+};
+
+
+/**
+ * Creates a new entry in this repository that corresponds to an existing
+ * entry from somewhere else.  The new entry in this repository will have
+ * the same UUID as the corresponding entries in other repositories.
  *
- * @scope    package instance method
- * @param    item    The item that was provisional and just became real. 
+ * @scope    public instance method
+ * @return   An entry object.
+ * @throws   Throws an Error if the UUID is already in use.
  */
-orp.archive.StubArchive.prototype._provisionalItemJustBecameReal = function(item) {
-  this._currentTransaction.addRecord(item);
+orp.archive.StubArchive.prototype.importEntry = function(uuid, item, previousEntry, attribute, value, type) {
+  if (this._getEntryFromUuid(uuid)) {
+    var error = new Error("You attempted to import an entry that has a UUID which is already in use.");
+    throw error;
+  }
+  return this._createNewEntry(uuid, item, previousEntry, attribute, value, type);
 };
 
 
@@ -269,17 +312,15 @@
  * Returns a newly created entry.
  *
  * @scope    public instance method
+ * @param    uuid    The uuid for the new entry. 
  * @param    item    The item that this is an entry of. 
  * @param    previousEntry    Optional. The old entry that this entry is replacing. 
  * @param    attribute    The attribute that this entry is assigned to. May be null. 
  * @param    value    The value to initialize the entry with. 
  * @param    type    Optional. An item representing the data type of the value. 
  * @return   A newly created entry.
- * @throws   Throws an Error if no user is logged in.
  */
-orp.archive.StubArchive.prototype.newEntry = function(item, previousEntry, attribute, value, type) {
-  this._throwErrorIfNoUserIsLoggedIn();
-  var uuid = this._getNewUuid();
+orp.archive.StubArchive.prototype._createNewEntry = function(uuid, item, previousEntry, attribute, value, type) {
   var entry = new orp.model.Entry(this._world, uuid);
   entry._initialize(item, previousEntry, attribute, value, type);
   item._addEntryToListOfEntriesForAttribute(entry, attribute);
@@ -288,23 +329,49 @@
   this._currentTransaction.addRecord(entry);
   return entry;
 };
- 
 
+
 /**
  * Returns a newly created entry.
  *
  * @scope    public instance method
- * @param    previousEntry    The entry that this entry will replace. Can be null.
- * @param    itemOne    One of the two items that this entry will connect. 
- * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
- * @param    itemTwo    One of the two items that this entry will connect. 
- * @param    attributeTwo    The attribute of itemTwo that this entry will be assigned to.  
+ * @param    item    The item that this is an entry of. 
+ * @param    previousEntry    Optional. The old entry that this entry is replacing. 
+ * @param    attribute    The attribute that this entry is assigned to. May be null. 
+ * @param    value    The value to initialize the entry with. 
+ * @param    type    Optional. An item representing the data type of the value. 
  * @return   A newly created entry.
  * @throws   Throws an Error if no user is logged in.
  */
-orp.archive.StubArchive.prototype.newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
+orp.archive.StubArchive.prototype.newEntry = function(item, previousEntry, attribute, value, type) {
   this._throwErrorIfNoUserIsLoggedIn();
   var uuid = this._getNewUuid();
+  return this._createNewEntry(uuid, item, previousEntry, attribute, value, type);
+};
+ 
+
+/**
+ * Returns a newly created entry.
+ *
+ * @scope    public instance method
+ * @return   A newly created entry.
+ */
+orp.archive.StubArchive.prototype.importConnectionEntry = function(uuid, previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
+  if (this._getEntryFromUuid(uuid)) {
+    var error = new Error("You attempted to import an entry that has a UUID which is already in use.");
+    throw error;
+  }
+  return this._createNewConnectionEntry(uuid, previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
+};
+
+
+/**
+ * Returns a newly created entry.
+ *
+ * @scope    public instance method
+ * @return   A newly created entry.
+ */
+orp.archive.StubArchive.prototype._createNewConnectionEntry = function(uuid, previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
   var entry = new orp.model.Entry(this._world, uuid);
   entry._initializeConnection(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
 
@@ -330,6 +397,25 @@
 
 
 /**
+ * Returns a newly created entry.
+ *
+ * @scope    public instance method
+ * @param    previousEntry    The entry that this entry will replace. Can be null.
+ * @param    itemOne    One of the two items that this entry will connect. 
+ * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
+ * @param    itemTwo    One of the two items that this entry will connect. 
+ * @param    attributeTwo    The attribute of itemTwo that this entry will be assigned to.  
+ * @return   A newly created entry.
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype.newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var uuid = this._getNewUuid();
+  return this._createNewConnectionEntry(uuid, previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
+};
+
+
+/**
  * Returns a newly created ordinal.
  *
  * @scope    public instance method
@@ -385,7 +471,7 @@
     throw error;
   }
 
-  var newUser = this._createNewItem(observer, false);
+  var newUser = this._createNewItem(observer);
   this._listOfUsers.push(newUser);
   
   var md5Authentication = null;
@@ -508,7 +594,7 @@
  * @scope    public instance method
  * @param    uuid    The UUID of the item to be returned. 
  * @param    observer    Optional. An object to be registered as an observer of the returned item. 
- * @return   The item identified by the given UUID.
+ * @return   Returns the item identified by the given UUID, or returns undefined if there is no item for that UUID.
  */
 orp.archive.StubArchive.prototype.getItemFromUuid = function(uuid, observer) {
   orp.lang.assert(dojo.lang.isString(uuid) || uuid instanceof orp.uuid.Uuid);
@@ -765,7 +851,7 @@
  * 
  * @scope    private instance method
  * @param    uuid    The UUID of the entry to be returned. 
- * @return   The entry identified by the given UUID.
+ * @return   Returns the entry identified by the given UUID, or returns undefined if there is no item for that UUID.
  */
 orp.archive.StubArchive.prototype._getEntryFromUuid = function(uuid) {
   return this._hashTableOfEntriesKeyedByUuid[uuid];

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-11-19 20:35:06 UTC (rev 381)
+++ trunk/source/model/World.js	2005-11-20 00:14:23 UTC (rev 382)
@@ -38,7 +38,7 @@
 dojo.require("orp.model.Vote");
 dojo.require("orp.model.Ordinal");
 dojo.require("dojo.lang.*");
-//-- dojo.require("orp.lang.Lang");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -902,7 +902,7 @@
  * @scope    public instance method
  * @param    uuid    The UUID of the item to be returned. 
  * @param    observer    Optional. An object to be registered as an observer of the returned item. 
- * @return   The item identified by the given UUID.
+ * @return   Returns he item identified by the given UUID, or returns undefined if there is no item for that UUID.
  */
 orp.model.World.prototype.getItemFromUuid = function(uuid, observer) {
   return (this._archive.getItemFromUuid(uuid, observer));
@@ -914,7 +914,7 @@
  *
  * @scope    public instance method
  * @param    uuid    The UUID of the item to be returned. 
- * @return   The entry identified by the given UUID.
+ * @return   Returns the entry identified by the given UUID, or returns undefined if there is no item for that UUID.
  */
 orp.model.World.prototype.getEntryFromUuid = function(uuid) {
   return (this._archive._getEntryFromUuid(uuid));
@@ -1179,5 +1179,73 @@
 
 
 // -------------------------------------------------------------------
+// Methods for importing content from other worlds/repositories
+// -------------------------------------------------------------------
+
+/**
+ * Creates a new item in this repository that corresponds to an existing
+ * item from somewhere else.  The new item in this repository will have
+ * the same UUID as the corresponding item in other repositories.
+ *
+ * @scope    public instance method
+ * @param    uuid    The UUID of the item.
+ * @return   The new item.
+ * @throws   Throws an Error if the UUID is already in use.
+ */
+orp.model.World.prototype.importItem = function(uuid) {
+  this.beginTransaction();
+  var item = this._archive.importItem(uuid);
+  this.endTransaction();
+  return item;
+};
+
+
+/**
+ * Creates a new entry in this repository that corresponds to an existing
+ * entry from somewhere else.  The new entry in this repository will have
+ * the same UUID as the corresponding entries in other repositories.
+ *
+ * @scope    public instance method
+ * @namedParam    uuid    The UUID of the entry.
+ * @namedParam    item    The item this is an entry of.
+ * @namedParam    value    The value to initialize the entry to. (Optional if previousEntry is provided.)
+ * @namedParam    type    Optional. An item representing a data type.
+ * @namedParam    attribute    Optional. The attribute to assign the entry to. 
+ * @namedParam    previousEntry    Optional. The old entry to be replaced.
+ * @namedParam    inverseAttribute    Optional. The attribute to use as the inverseAttribute of 'attribute'.
+ * @return   An entry object.
+ * @throws   Throws an Error if the UUID is already in use.
+ */
+orp.model.World.prototype.importEntry = function(namedParameters) {
+  orp.lang.assert(dojo.lang.isObject(namedParameters));
+
+  var parameters = orp.model.Item.NamedParameters;
+  var uuidParameter = "uuid";
+  var itemParameter = "item";
+
+  var value = namedParameters[parameters.value];
+  var attribute = namedParameters[parameters.attribute];
+  var type = namedParameters[parameters.type];
+  var previousEntry = namedParameters[parameters.previousEntry];
+  var inverseAttribute = namedParameters[parameters.inverseAttribute];
+  var uuid = namedParameters[uuidParameter];
+  var item = namedParameters[itemParameter];
+
+  this.beginTransaction();
+  var entry;
+  if (inverseAttribute) {
+    var attributeOne = attribute;
+    var itemTwo = value;
+    var attributeTwo = inverseAttribute;
+    entry = this._archive.importConnectionEntry(uuid, previousEntry, item, attributeOne, itemTwo, attributeTwo);
+  } else {
+    entry = this._archive.importEntry(uuid, item, previousEntry, attribute, value, type);
+  }
+  this.endTransaction();
+  return entry;
+};
+
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/model/test_BeforeLogin.js
===================================================================
--- trunk/tests/model/test_BeforeLogin.js	2005-11-19 20:35:06 UTC (rev 381)
+++ trunk/tests/model/test_BeforeLogin.js	2005-11-20 00:14:23 UTC (rev 382)
@@ -147,7 +147,35 @@
   }
 }
 
+function testImportMethodsWithDuplicateUuid() {
+  var caughtError = false;
+  try {
+    var item = world.importItem("00001000-ce7f-11d9-8cd5-0011113ae5d6");
+  } catch (error) {
+    caughtError = true;
+  }
+  assertTrue("We can't import an item with a duplicate UUID", caughtError);
+}
 
+function testImportMethods() {
+  var attributeCalledName = world.getAttributeCalledName();
+  
+  var caughtError = false;
+  try {
+    world.beginTransaction();
+    var item = world.importItem("00000001-ce7f-11d9-8888-0011113ae5d6");
+    var entry = world.importEntry({
+      uuid: "00000002-ce7f-11d9-8888-0011113ae5d6",
+      item: item,
+      attribute: attributeCalledName,
+      value: "My new item!" });
+    world.endTransaction();
+  } catch (error) {
+    throw error;
+    caughtError = true;
+  }
+  assertTrue("We can import an item with a unique UUID", !caughtError);
+}
 
 // -------------------------------------------------------------------
 // End of file



From mignon at berlios.de  Tue Nov 29 07:45:42 2005
From: mignon at berlios.de (mignon at BerliOS)
Date: Tue, 29 Nov 2005 07:45:42 +0100
Subject: [openrecord-svn] r383 - in trunk: source source/model source/storage source/view tests tests/lang tests/nonemptyPluginDir tests/storage tests/storage/directory_1 tests/view
Message-ID: <200511290645.jAT6jg6r010212@sheep.berlios.de>

Author: mignon
Date: 2005-11-29 07:45:28 +0100 (Tue, 29 Nov 2005)
New Revision: 383

Added:
   trunk/tests/emptyPluginDir/
   trunk/tests/nonemptyPluginDir/
   trunk/tests/nonemptyPluginDir/OutlinePlugin2.js
   trunk/tests/storage/directory_1/emptyDirectory/
   trunk/tests/view/SectionViewConstructorTest.html
   trunk/tests/view/SectionViewConstructorTest.js
   trunk/tests/view/TestSuite.html
Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/OutlinePlugin.js
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/storage/Storage.js
   trunk/source/storage/get_list_of_files_in_dir.php
   trunk/source/view/PluginView.js
   trunk/source/view/SectionView.js
   trunk/tests/TestSuite.html
   trunk/tests/lang/LangTest.js
   trunk/tests/storage/DirectoryReadingTest.js
Log:
Made extensive changes to SectionView involving plugins.  Wrote unit tests for the new functionality in SectionViewConstructorTest.js.  Made other miscellaneous minor changes.



Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/source/BarChartPlugin.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -71,10 +71,10 @@
 // -------------------------------------------------------------------
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
+
 orp.BarChartPlugin.UUID = { PLUGIN_VIEW_BAR_CHART: "00040304-ce7f-11d9-8cd5-0011113ae5d6" };
-// FIXME:
-// orp.view.SectionView.registerPlugin(orp.BarChartPlugin);
 
+orp.view.SectionView.registerPlugin(orp.BarChartPlugin);
 
 // -------------------------------------------------------------------
 // Public class methods

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/source/OutlinePlugin.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -70,10 +70,10 @@
 // -------------------------------------------------------------------
 // Register this plugin in the SectionView registry
 // -------------------------------------------------------------------
+
 orp.OutlinePlugin.UUID = { PLUGIN_VIEW_OUTLINE: "00040302-ce7f-11d9-8cd5-0011113ae5d6" };
-// FIXME:
-// orp.view.SectionView.registerPlugin(orp.OutlinePlugin);
 
+orp.view.SectionView.registerPlugin(orp.OutlinePlugin);
 
 // -------------------------------------------------------------------
 // Public class methods

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-11-29 06:45:28 UTC (rev 383)
@@ -1178,6 +1178,14 @@
             "value": "Table" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // TablePlugin
+             "uuid": "0040301d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",  // attributeCalledClassName
+             "item": "00040301-ce7f-11d9-8cd5-0011113ae5d6",  // Table View (Plugin View)
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "TablePlugin" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Outline View
              "uuid": "0040302a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -1203,6 +1211,14 @@
             "value": "Outline" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // OutlinePlugin
+             "uuid": "0040302d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",  // attributeCalledClassName
+             "item": "00040302-ce7f-11d9-8cd5-0011113ae5d6",  // Outline View (Plugin View)
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "OutlinePlugin" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Detail View
              "uuid": "0040303a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -1220,7 +1236,7 @@
         "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
     },  
     // -----------------------------------------------------------------------
-    { "Entry": {                                              // Outline
+    { "Entry": {                                              // Detail
              "uuid": "0040303c-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001002-ce7f-11d9-8cd5-0011113ae5d6",  // Short Name
              "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
@@ -1228,6 +1244,14 @@
             "value": "Detail" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // DetailPlugin
+             "uuid": "0040303d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",  // attributeCalledClassName
+             "item": "00040303-ce7f-11d9-8cd5-0011113ae5d6",  // Detail View (Plugin View)
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "DetailPlugin" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // Bar Chart View
              "uuid": "0040304a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
@@ -1251,6 +1275,14 @@
              "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
              "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
             "value": "Bar Chart" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // BarChartPlugin
+             "uuid": "0040304d-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",  // attributeCalledClassName
+             "item": "00040304-ce7f-11d9-8cd5-0011113ae5d6",  // Bar Chart View (Plugin View)
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "BarChartPlugin" }
     } ]
   },
   // =======================================================================

Modified: trunk/source/storage/Storage.js
===================================================================
--- trunk/source/storage/Storage.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/source/storage/Storage.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -103,6 +103,12 @@
   dj_unimplemented("writeText");
 };
 
+orp.storage.Storage.prototype.getCurrentLocationDirectory = function() {
+  var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  return arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk or /openrecord/trunk/source/model
+};
 
 // -------------------------------------------------------------------
 // End of file

Modified: trunk/source/storage/get_list_of_files_in_dir.php
===================================================================
--- trunk/source/storage/get_list_of_files_in_dir.php	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/source/storage/get_list_of_files_in_dir.php	2005-11-29 06:45:28 UTC (rev 383)
@@ -6,12 +6,12 @@
   $suffix = $_GET['suffix'];
 }
 if (!file_exists($dir)) {
-  exit("$dir not found."); 
+  exit("$dir not found.");
 }
-;
 if (!($dh = opendir($dir))) {
-  exit("Could not open $dir."); 
+  exit("Could not open $dir.");
 }
+$num_files = 0;
 while (false !== ($filename = readdir($dh))) {
   if ($filename == "." || $filename == "..") {
     continue;
@@ -19,7 +19,13 @@
   $array_of_file_name_parts = explode(".", $filename);
   if (!$suffix_specified || $array_of_file_name_parts[1] == $suffix) {
     $array_js[] = "\"" . $filename . "\"";
+    $num_files++;
   }
 }
-echo "[" . implode(',', $array_js) . "]";
+if ($num_files == 0) {
+  echo "[]";
+}
+else {
+  echo "[" . implode(',', $array_js) . "]";
+}
 ?>

Modified: trunk/source/view/PluginView.js
===================================================================
--- trunk/source/view/PluginView.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/source/view/PluginView.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -70,13 +70,19 @@
 
 dojo.inherits(orp.view.PluginView, orp.view.View);  // makes PluginView be a subclass of View
 
+// -------------------------------------------------------------------
+// Public class constants
+// -------------------------------------------------------------------
 
+orp.view.PluginView.PATH_TO_CORE_PLUGIN_DIRECTORY_FROM_TRUNK = "source";
+orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK = "source/plugins";
+
 // -------------------------------------------------------------------
 // Public instance methods
 // -------------------------------------------------------------------
 
 /**
- * Returns the registered name of this PluginView.
+ * Returns the item of this PluginView.
  *
  * @scope    public instance method
  * @return   A string.

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/source/view/SectionView.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -41,13 +41,9 @@
 dojo.require("orp.view.RootView");
 dojo.require("orp.model.Item");
 dojo.require("orp.lang.Lang");
+dojo.require("orp.storage.directoryList");
 dojo.require("dojo.event.*");
 
-// FIXME: We shouldn't need to include these three lines:
-dojo.require("orp.DetailPlugin");
-dojo.require("orp.OutlinePlugin");
-dojo.require("orp.BarChartPlugin");
-
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
 // 
@@ -62,14 +58,14 @@
 // Constructor
 // -------------------------------------------------------------------
 /**
- * A PageView uses instances of a SectionViews to display the Sections 
+ * A PageView uses instances of SectionViews to display the Sections 
  * of a page. 
  *
  * @scope    public instance constructor
  * @extends  View
  * @param    superview    The view that serves as the superview for this view. 
  * @param    htmlElement    The HTMLElement to display the HTML in. 
- * @param    sectionItem    The Section item to be displayed in by this view. 
+ * @param    sectionItem    The Section item to be displayed by this view. 
  * @syntax   var sectionView = new orp.view.SectionView()
  */
 orp.view.SectionView = function(superview, htmlElement, sectionItem) {
@@ -85,30 +81,75 @@
   this._headerView = null;
   this._queryEditSpan = null;
   
-  // -----------------------------------------------------------------------
-  // FIXME: temporary hack
-  // 
-  // Brian inserted this hack on 2005/09/21 as part of converting everything  
-  // to use the Dojo package system.  Now that we explicitly control the order 
-  // in which files are loaded, the old calls to "SectionView.registerPlugin()" 
-  // in (TablePlugin.js, OutlinePlugin.js etc.) no longer work, I think because 
-  // SectionView.registerPlugin doesn't exist at the time the calls are made.
   if (orp.view.SectionView._ourListOfRegisteredPluginClasses.length === 0) {
-    orp.view.SectionView.registerPlugin(orp.TablePlugin);
-    orp.view.SectionView.registerPlugin(orp.OutlinePlugin);
-    orp.view.SectionView.registerPlugin(orp.DetailPlugin);
-    orp.view.SectionView.registerPlugin(orp.BarChartPlugin);
-  }
-  // 
-  // -----------------------------------------------------------------------
-  
-  if (!orp.view.SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid) {
+    var categoryCalledPlugin = this.getWorld().getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW);
+    var listOfItems = this.getWorld().getItemsInCategory(categoryCalledPlugin);
+    var attributeCalledClassName = this.getWorld().getAttributeCalledClassName();
+    for (var key in listOfItems) {
+      var item = listOfItems[key];
+      var entry = item.getSingleEntryFromAttribute(attributeCalledClassName);
+      if (!entry) {
+        alert("Item '" + item.getDisplayName() + "' in category PluginView has no entry for attribute 'Class Name', and will be skipped.");
+        continue;
+      }
+      var className = entry.getValue();
+      
+      // This deals with any plugins which are already loaded.  Such pre-loaded plugins could not 
+      // self-register when they loaded, because of the order in which files are loaded, so we register them here.
+      // Currently, TableView and DetailView are the only plugins which should already be loaded.
+      if (orp[className]) {
+        orp.view.SectionView.registerPlugin(orp[className]);
+        continue;
+      }
+      
+      var sourceUrl = orp.storage.Storage.prototype.getCurrentLocationDirectory() + '/';
+      if (orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION) {
+        sourceUrl += orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION + '/';
+      }
+      sourceUrl += orp.view.PluginView.PATH_TO_CORE_PLUGIN_DIRECTORY_FROM_TRUNK +
+                    "/" + className + ".js";
+      var success = orp.view.SectionView._loadUri(sourceUrl);
+      if (!success) {
+        sourceUrl = orp.storage.Storage.prototype.getCurrentLocationDirectory() + '/';
+        if (orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION) {
+          sourceUrl += orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION + '/';
+        }
+        sourceUrl += orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK +
+                     "/" + className + ".js";
+        success = orp.view.SectionView._loadUri(sourceUrl);
+        if (!success) {
+          throw new Error(sourceUrl + " not found.");
+        }
+      }
+    }
+
     orp.view.SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid = {};
-    for (var key in orp.view.SectionView._ourListOfRegisteredPluginClasses) {
+    for (key in orp.view.SectionView._ourListOfRegisteredPluginClasses) {
       var pluginClass = orp.view.SectionView._ourListOfRegisteredPluginClasses[key];
       var pluginItemUuid = pluginClass.getPluginItemUuid();
       orp.view.SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[pluginItemUuid] = pluginClass;
     }
+  
+    var pathToPluginDirectoryFromWindowLocation = "";
+    if (orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION) {
+      pathToPluginDirectoryFromWindowLocation += orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION + '/';
+    }
+    pathToPluginDirectoryFromWindowLocation += orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK;
+    
+    var dirList = orp.storage.getDirList(pathToPluginDirectoryFromWindowLocation, "js");
+    for (var i = 0; i < dirList.length; ++i) {
+      var filenameWithoutExtension = (dirList[i].split('.'))[0];
+      var correspondingClassDefined = orp.plugins && orp.plugins[filenameWithoutExtension];
+      if (!correspondingClassDefined) {
+        sourceUrl = orp.storage.Storage.prototype.getCurrentLocationDirectory() + '/';
+        if (orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION) {
+          sourceUrl += orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION + '/';
+        }
+        sourceUrl += orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK +
+                     '/' + dirList[i];
+        this._installPlugin(sourceUrl);
+      }
+    }
   }
 };
 
@@ -159,18 +200,20 @@
 // -------------------------------------------------------------------
 
 /**
- * Given the name of a plugin ("Table", "Outline", etc.), returns a newly
- * created plugin object of that type, initialized to be the plugin for this 
- * SectionView.
- *
  * @scope    public class method
- * @param    pluginClass    A JavaScript class, such as TablePlugin. 
- * @param    pluginItemUuid    The UUID of the item representing that class of plugin. 
+ * @param    pluginClass    A JavaScript class, such as TablePlugin.
  */
-orp.view.SectionView.registerPlugin = function(pluginClass, pluginItemUuid) {
+orp.view.SectionView.registerPlugin = function(pluginClass) {
   orp.view.SectionView._ourListOfRegisteredPluginClasses.push(pluginClass);
 };
 
+/**
+ * @scope    public class method
+ * @return   number of plugins
+ */
+orp.view.SectionView.getNumPlugins = function() {
+  return orp.view.SectionView._ourListOfRegisteredPluginClasses.length;
+};
 
 // -------------------------------------------------------------------
 // Public instance methods
@@ -194,6 +237,9 @@
   pluginClass = orp.view.SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[pluginItem.getUuid()];
   if (pluginClass) {
     var pluginType = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
+
+orp.lang.assert(pluginItem == pluginType); // This seems to be true, so why not just use pluginItem?
+
     var layoutData = this._getLayoutDataForPlugin(pluginType);
     newPlugin = new pluginClass(this, pluginDiv, this.getQuerySpec(), layoutData);
   }
@@ -259,7 +305,9 @@
     selectedPluginItem = selectedPluginViewEntry.getValue();
     selectedPluginClass = orp.view.SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[selectedPluginItem.getUuid()];
   } else {
-    selectedPluginClass = orp.TablePlugin; 
+    selectedPluginClass = orp.TablePlugin;
+    //  This will result in an error when calling this.getPluginInstanceFromPluginItem(selectedPluginItem, this._pluginDiv) 
+    //  below, because selectedPluginItem will be undefined.
   }
   
   var sectionDiv = this.getHtmlElement();
@@ -392,7 +440,44 @@
   myQuery.addObserver(this);
 };
 
+/**
+ * Stores a new item representing a plugin class, with associated entries, as 
+ * specified in the source code for the plugin.
+ * 
+ * @scope    private instance method
+ * @param    world             An object of class World.
+ * @param    newPluginClass    A JavaScript class, such as TablePlugin.
+ */    
+orp.view.SectionView.prototype._addNewItemForNewPluginClass = function(world, newPluginClass) {
+  world.beginTransaction();
+  var newItem = world.importItem(newPluginClass.getPluginItemUuid());
+  var entries = newPluginClass.getEntriesForItemRepresentingPluginClass(newItem, world);
+  for (var i in entries) {
+    world.importEntry(entries[i]);
+  }
+  world.endTransaction();
+  return newItem;
+};
 
+/* FIXME: This is a hack.  Undoubtedly there is a more elegant way to accomplish
+   this using dojo, but I don't understand dojo well enough yet to find it.
+*/
+orp.view.SectionView._loadUri = function(sourceUrl) {
+  var success = false;
+  try {
+    if (dojo.hostenv.oldLoadUri) {
+      success = dojo.hostenv.oldLoadUri(sourceUrl, null, true);
+    }
+    else {
+      success = dojo.hostenv.loadUri(sourceUrl, null, true);
+    }
+  }
+  catch (e) {
+    success = false;
+  }
+  return success;
+};
+
 // -------------------------------------------------------------------
 // Event handler methods
 // -------------------------------------------------------------------
@@ -414,7 +499,7 @@
 
 
 /**
- * Called when the query belong to this section has changed
+ * Called when the query belonging to this section has changed
  *
  * @scope    public instance method
  */
@@ -501,10 +586,10 @@
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
   if (matchingAttribute.getDisplayString() != newChoiceName) {
-      myQuery.addEntry({
-        previousEntry:entryToBeReplaced, 
-        attribute:attributeCalledQueryMatchingAttribute, 
-        value:newQueryMatchingAttribute});
+    myQuery.addEntry({
+      previousEntry:entryToBeReplaced, 
+      attribute:attributeCalledQueryMatchingAttribute, 
+      value:newQueryMatchingAttribute});
 /*  if (listOfMatchingAttrs.length === 0) {
       myQuery.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:newQueryMatchingAttribute});
     } else {
@@ -536,6 +621,26 @@
   }
 };
 
+/**
+ * Loads the JavaScript code for a plugin.
+ * 
+ * @scope    private instance method
+ * @param    pluginUrl    Location of JavaScript file defining a plugin.
+ */
+orp.view.SectionView.prototype._installPlugin = function(pluginUrl) {
+  var numPluginsRegisteredBefore = orp.view.SectionView._ourListOfRegisteredPluginClasses.length;
+  var success = orp.view.SectionView._loadUri(pluginUrl);
+  if (!success) {
+    throw new Error("Error loading " + pluginUrl);
+  }
+  var numPluginsRegistered = orp.view.SectionView._ourListOfRegisteredPluginClasses.length;
+  orp.lang.assert(numPluginsRegistered == numPluginsRegisteredBefore + 1);
+  var newestPluginClass = orp.view.SectionView._ourListOfRegisteredPluginClasses[numPluginsRegistered - 1];
+  var newPluginViewItem = this._addNewItemForNewPluginClass(this.getWorld(), newestPluginClass);
+  var uuidOfNewPlugin = newPluginViewItem.getUuid();
+  orp.view.SectionView._ourHashTableOfPluginClassesKeyedByPluginItemUuid[uuidOfNewPlugin] = newestPluginClass;
+};
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/tests/TestSuite.html	2005-11-29 06:45:28 UTC (rev 383)
@@ -32,7 +32,7 @@
         testSuite.addTestPage("../../../tests/model/TestSuite.html");
         testSuite.addTestPage("../../../tests/archive/TestSuite.html");
         testSuite.addTestPage("../../../tests/storage/TestSuite.html");
-        testSuite.addTestPage("../../../tests/view/LintTest.html");
+        testSuite.addTestPage("../../../tests/view/TestSuite.html");
         testSuite.addTestPage("../../../tests/LintTest.html");
         return testSuite;
       }

Modified: trunk/tests/lang/LangTest.js
===================================================================
--- trunk/tests/lang/LangTest.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/tests/lang/LangTest.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -229,7 +229,7 @@
   // make the box be a zero-dimensional point
   var point = orp.lang.bind(box, "setDimensions");
   point();
-  assertTrue("Bind works with 1 argument.", (box.getVolume() == (1)) );  
+  assertTrue("Bind works with 0 arguments.", (box.getVolume() == (1)) );  
 }
 
 

Added: trunk/tests/nonemptyPluginDir/OutlinePlugin2.js
===================================================================
--- trunk/tests/nonemptyPluginDir/OutlinePlugin2.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/tests/nonemptyPluginDir/OutlinePlugin2.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -0,0 +1,153 @@
+/*****************************************************************************
+ OutlinePlugin2.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.plugins.OutlinePlugin2");
+dojo.require("orp.view.PluginView");
+dojo.require("orp.view.SectionView");
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util  */
+/*global View  */
+/*global RootView  */
+// -------------------------------------------------------------------
+
+/**
+ * An OutlinePlugin2 displays a set of content items for a SectionView. 
+ *
+ * @scope    public instance constructor
+ * @extends  PluginView
+ * @param    superview    The View that serves as the superview for this view. 
+ * @param    htmlElement    The HTMLElement to display this view in. 
+ * @param    querySpec    The Query Spec item that provides the items for this PluginView to display
+ * @param    layoutItem    ???. 
+ * @syntax   var plugin = new orp.plugins.OutlinePlugin2()
+ */
+orp.plugins.OutlinePlugin2 = function(superview, htmlElement, querySpec, layoutItem) {
+  orp.view.PluginView.call(this, superview, htmlElement, querySpec, layoutItem, "OutlinePlugin2");
+};
+
+dojo.inherits(orp.plugins.OutlinePlugin2, orp.view.PluginView);  // makes OutlinePlugin2 be a subclass of PluginView
+
+
+// -------------------------------------------------------------------
+// Register this plugin in the SectionView registry
+// -------------------------------------------------------------------
+
+orp.plugins.OutlinePlugin2.UUID = "99a09d90-598a-11da-87ac-c103016080e1";
+
+orp.view.SectionView.registerPlugin(orp.plugins.OutlinePlugin2);
+
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the UUID of the item that represents this class of plugin.
+ *
+ * @scope    public class method
+ * @return   The UUID of the item that represents this class of plugin
+ */
+orp.plugins.OutlinePlugin2.getPluginItemUuid = function() {
+  return orp.plugins.OutlinePlugin2.UUID;
+};
+
+orp.plugins.OutlinePlugin2.getEntriesForItemRepresentingPluginClass = function(pluginItem, world) {
+  return [
+    { uuid: "99a187f0-598a-11da-87ac-c103016080e1",
+      item: pluginItem,
+      attribute: world.getAttributeCalledName(),
+      value: "Outline2 View" },
+    { uuid: "99a24b40-598a-11da-87ac-c103016080e1",
+      item: pluginItem,
+      attribute: world.getAttributeCalledShortName(),
+      value: "Outline2" },
+    { uuid: "99a335a0-598a-11da-87ac-c103016080e1",
+      item: pluginItem,
+      attribute: world.getAttributeCalledClassName(),
+      value: "OutlinePlugin2" },
+    { uuid: "99a3f8f0-598a-11da-87ac-c103016080e1",
+      item: pluginItem,
+      attribute: world.getAttributeCalledCategory(),
+      inverseAttribute: world.getAttributeCalledItemsInCategory(),
+      value: world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW) }
+  ];
+};
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the class of this instance.
+ *
+ * @scope    public instance method
+ * @return   A JavaScript class. 
+ */
+orp.plugins.OutlinePlugin2.prototype.getClass = function() {
+  return orp.plugins.OutlinePlugin2;
+};
+
+/**
+ * Re-creates all the HTML for the OutlinePlugin2, and hands the HTML to the 
+ * browser to be re-drawn.
+ *
+ * @scope    public instance method
+ */
+orp.plugins.OutlinePlugin2.prototype.refresh = function() {
+  var listOfContentItems = this.fetchItems();
+  var outlineDiv = this.getHtmlElement();
+  orp.view.View.removeChildrenOfElement(outlineDiv);
+  var ulElement = orp.view.View.appendNewElement(outlineDiv, "ul");
+  for (var contentItemKey in listOfContentItems) {
+    var contentItem = listOfContentItems[contentItemKey];
+    var liText = contentItem.getDisplayName("{no name}") + " ";
+    var liElement = orp.view.View.appendNewElement(ulElement, "li", null, null, liText);
+    var anchorElement = orp.view.View.appendNewElement(liElement, "a", orp.view.SectionView.cssClass.MORE_LINK);
+
+    // PENDING: 
+    //  We need a better way to get the URL for a content item
+    anchorElement.setAttribute("href", orp.view.RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuidString());
+
+    // orp.view.View.appendNewTextNode(anchorElement, "(more &#8658;)");
+    anchorElement.innerHTML = "(more &#8658;)";
+
+    dojo.event.connect(anchorElement, "onclick", orp.view.RootView.clickOnLocalLink);
+  }
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/storage/DirectoryReadingTest.js
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/tests/storage/DirectoryReadingTest.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -78,6 +78,11 @@
   assertTrue("Exception should have been caught.", exceptionCaught);    
 }
 
+function testGetDirListForEmptyDir() {
+  var dirList = orp.storage.getDirList("directory_1/emptyDirectory", "js");
+  assertTrue("List should have length zero.", dirList.length == 0);
+}
+
 // -------------------------------------------------------------------
 // Helper functions
 // -------------------------------------------------------------------

Added: trunk/tests/view/SectionViewConstructorTest.html
===================================================================
--- trunk/tests/view/SectionViewConstructorTest.html	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/tests/view/SectionViewConstructorTest.html	2005-11-29 06:45:28 UTC (rev 383)
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Test SectionView Constructor</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="SectionViewConstructorTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Test SectionView Constructor</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>

Added: trunk/tests/view/SectionViewConstructorTest.js
===================================================================
--- trunk/tests/view/SectionViewConstructorTest.js	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/tests/view/SectionViewConstructorTest.js	2005-11-29 06:45:28 UTC (rev 383)
@@ -0,0 +1,227 @@
+/*****************************************************************************
+ SectionViewConstructorTest.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie
+
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+var world;
+var rootView;
+var categoryCalledPlugin;
+var sectionViewDiv;
+var sectionItem;
+var numAxiomaticPlugins = 4;
+
+MockRootView = function(world) {
+  orp.lang.assert(world instanceof orp.model.World);
+  this._world = world;
+}
+
+MockRootView.prototype.getWorld = function() {
+  return this._world;
+};
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.archive.StubArchive");
+  dojo.require("orp.model.World");
+  dojo.require("orp.view.SectionView");
+  orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION = "../..";
+  orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY = "tests/view";
+
+  // This simulates 'reloading' SectionView.js, so that for each test, it will be as if 
+  // the constructor had never been called before.
+  orp.view.SectionView._ourListOfRegisteredPluginClasses = [];
+
+  var archive = new orp.archive.StubArchive(orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION);
+  world = new orp.model.World(archive);
+  var annsPassword = "Ann's password";
+  var userAnn = world.newUser("Ann Doe", annsPassword);
+  world.login(userAnn, annsPassword);
+  rootView = new MockRootView(world);
+//  alert("dojo.hostenv.getBaseScriptUri() = " + dojo.hostenv.getBaseScriptUri()); 
+//  dojo.hostenv.setBaseScriptUri("../../../");
+  categoryCalledPlugin = world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW);
+  sectionViewDiv = document.createElement("div");
+  sectionItem = world.newItem("FakeSectionItem");
+}
+
+function tearDown() {
+  delete orp.plugins;
+  world.logout();
+}
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testCorePluginsLoaded() {
+  orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK = "tests/emptyPluginDir";
+  assertTrue2(orp.view.SectionView.getNumPlugins() == 0,                          "orp.view.SectionView.getNumPlugins should return 0.");
+
+  var sectionView = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+  assertTrue2(orp.view.SectionView.getNumPlugins() == numAxiomaticPlugins,        "orp.view.SectionView.getNumPlugins should return numAxiomaticPlugins.");
+
+  var sectionView2 = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+  assertTrue2(orp.view.SectionView.getNumPlugins() == numAxiomaticPlugins,        "orp.view.SectionView.getNumPlugins should return numAxiomaticPlugins.");
+}
+
+function testPluginFileWithoutPreexistingPluginItem() {
+  orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK = "tests/nonemptyPluginDir";
+
+  var listOfPluginItemsBefore = world.getItemsInCategory(categoryCalledPlugin);
+  assertTrue2(orp.view.SectionView.getNumPlugins() == 0,                          "orp.view.SectionView.getNumPlugins should return 0.");
+  assertTrue2(!dojo.lang.inArray(getListOfNamesOfPluginItems(), "Outline2 View"), "List of names of plugin items should not include 'Outline2 View'.");
+  assertTrue2(listOfPluginItemsBefore.length == numAxiomaticPlugins,              "List of plugin items should have length = numAxiomaticPlugins.");
+  assertTrue2(dojo.lang.isUndefined(orp.plugins),                                 "orp.plugins should be undefined.");
+
+  var sectionView = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+
+  var listOfPluginItemsAfter = world.getItemsInCategory(categoryCalledPlugin);
+  assertTrue2(orp.view.SectionView.getNumPlugins() == numAxiomaticPlugins + 1,    "orp.view.SectionView.getNumPlugins should return numAxiomaticPlugins + 1.");
+  assertTrue2(dojo.lang.inArray(getListOfNamesOfPluginItems(), "Outline2 View"),  "List of names of plugin items should include 'Outline2 View'.");
+  assertTrue2(listOfPluginItemsAfter.length == numAxiomaticPlugins + 1,           "List of plugin items should have length = numAxiomaticPlugins + 1.");
+  assertTrue2(!dojo.lang.isUndefined(orp.plugins.OutlinePlugin2),                 "orp.plugins.OutlinePlugin2 should be defined.");
+
+  var sectionView2 = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+  
+  var listOfPluginItemsAfterTwo = world.getItemsInCategory(categoryCalledPlugin);
+  assertTrue2(orp.view.SectionView.getNumPlugins() == numAxiomaticPlugins + 1,    "orp.view.SectionView.getNumPlugins should return numAxiomaticPlugins + 1.");
+  assertTrue2(listOfPluginItemsAfterTwo.length == numAxiomaticPlugins + 1,        "List of plugin items should have length = numAxiomaticPlugins + 1.");
+}
+
+function testCreatedPluginItemIsCorrect() {
+  orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK = "tests/nonemptyPluginDir";
+
+  var listOfPluginItemsBefore = world.getItemsInCategory(categoryCalledPlugin);
+  assertTrue2(listOfPluginItemsBefore.length == numAxiomaticPlugins,              "List of plugin items should have length = numAxiomaticPlugins.");
+
+  var sectionView = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+
+  var listOfPluginItemsAfter = world.getItemsInCategory(categoryCalledPlugin);
+  assertTrue2(listOfPluginItemsAfter.length == numAxiomaticPlugins + 1,           "List of plugin items should have length = numAxiomaticPlugins + 1.");
+
+  var item = world.getItemFromUuid(orp.plugins.OutlinePlugin2.getPluginItemUuid());
+  assertTrue2(item.getDisplayName() == "Outline2 View",                           "item should have name 'Outline2 View'.");
+  assertTrue2(getShortName(item) == "Outline2",                                   "item should have short name 'Outline2'.");
+  assertTrue2(getClassName(item) == "OutlinePlugin2",                             "item should have class name 'OutlinePlugin2'.");
+}
+
+// Here we test the SectionView constructor in the following situation: there is
+// an item representing OutlinePlugin2, and a file OutlinePlugin2.js in the plugin
+// folder, but class OutlinePlugin2 is undefined.  We'll check that afterwards,
+// OutlinePlugin2 is defined.
+function testPluginFileWithPreexistingPluginItem() {
+  orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK = "tests/nonemptyPluginDir";
+
+  // This is orp.plugins.OutlinePlugin2.UUID, but at this point of the test, orp.plugins.OutlinePlugin2 is undefined.
+  knownUuid = "99a09d90-598a-11da-87ac-c103016080e1";
+
+  var item = world.importItem(knownUuid);
+  world.importEntry({uuid: "99a187f0-598a-11da-87ac-c103016080e1",
+                     item: item,
+                     attribute: world.getAttributeCalledName(),
+                     value: "Outline2 View" });
+  world.importEntry({uuid: "99a24b40-598a-11da-87ac-c103016080e1",
+                     item: item,
+                     attribute: world.getAttributeCalledShortName(),
+                     value: "Outline2" });
+  world.importEntry({uuid: "99a335a0-598a-11da-87ac-c103016080e1",
+                     item: item,
+                     attribute: world.getAttributeCalledClassName(),
+                     value: "OutlinePlugin2" });
+  world.importEntry({uuid: "99a3f8f0-598a-11da-87ac-c103016080e1",
+                     item: item,
+                     attribute: world.getAttributeCalledCategory(),
+                     inverseAttribute: world.getAttributeCalledItemsInCategory(),
+                     value: world.getItemFromUuid(orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW) });
+
+  assertTrue2(dojo.lang.isUndefined(orp.plugins),                                 "orp.plugins should be undefined.");
+
+  var sectionView = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+
+  assertTrue2(!dojo.lang.isUndefined(orp.plugins.OutlinePlugin2),                 "orp.plugins.OutlinePlugin2 should be defined.");
+  assertTrue2(orp.plugins.OutlinePlugin2.getPluginItemUuid() == knownUuid,        "orp.plugins should be undefined.");
+  assertTrue2(orp.view.SectionView.getNumPlugins() == numAxiomaticPlugins + 1,    "orp.view.SectionView.getNumPlugins should return numAxiomaticPlugins + 1.");
+
+  var sectionView2 = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+
+  assertTrue2(orp.view.SectionView.getNumPlugins() == numAxiomaticPlugins + 1,    "orp.view.SectionView.getNumPlugins should return numAxiomaticPlugins + 1.");
+}
+
+function testPluginItemWithMissingPluginFile() {
+  orp.view.PluginView.PATH_TO_PLUGIN_DIRECTORY_FROM_TRUNK = "tests/emptyPluginDir";
+
+  //Make a plugin item for class BogusPlugin that doesn't have a corresponding file BogusPlugin.js in the plugin directory.
+  var bogusPluginItem = world.newItem("BogusPluginItem");
+  bogusPluginItem.addEntry({attribute: world.getAttributeCalledClassName(),
+                           value: "BogusPlugin"});
+  var uuid = orp.view.SectionView.UUID.CATEGORY_PLUGIN_VIEW;
+  bogusPluginItem.addConnectionEntry(world.getAttributeCalledCategory(),
+                                     world.getItemFromUuid(uuid),
+                                     world.getAttributeCalledItemsInCategory());
+
+  var exceptionCaught = false;
+  try {
+    var sectionView = new orp.view.SectionView(rootView, sectionViewDiv, sectionItem);
+  }
+  catch (exception) {
+    exceptionCaught = true;
+  }
+  assertTrue("Exception should have been caught.", exceptionCaught);    
+}
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+assertTrue2 = function(assertion, comment) {
+  assertTrue(comment, assertion);
+}
+
+function getListOfNamesOfPluginItems() {
+  var listOfPluginItems = world.getItemsInCategory(categoryCalledPlugin);
+  var listOfNamesOfPluginItems = [];
+  dojo.lang.map(listOfPluginItems, listOfNamesOfPluginItems, function(x){this.push(x.getDisplayName())});
+  return listOfNamesOfPluginItems;
+}
+
+function getShortName(item) {
+  return item.getSingleEntryFromAttribute(world.getAttributeCalledShortName()).getDisplayString();
+}
+
+function getClassName(item) {
+  return item.getSingleEntryFromAttribute(world.getAttributeCalledClassName()).getDisplayString();
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/view/TestSuite.html
===================================================================
--- trunk/tests/view/TestSuite.html	2005-11-20 00:14:23 UTC (rev 382)
+++ trunk/tests/view/TestSuite.html	2005-11-29 06:45:28 UTC (rev 383)
@@ -0,0 +1,87 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>View Test Suite</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestSuite(viewTestSuite());
+        return testSuite;
+      }
+      
+      function viewTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../../tests/view/SectionViewConstructorTest.html");
+        testSuite.addTestPage("../../../tests/view/LintTest.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>View Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>



From skinner at berlios.de  Wed Nov 30 21:28:18 2005
From: skinner at berlios.de (skinner at BerliOS)
Date: Wed, 30 Nov 2005 21:28:18 +0100
Subject: [openrecord-svn] r384 - trunk/source
Message-ID: <200511302028.jAUKSID4018300@sheep.berlios.de>

Author: skinner
Date: 2005-11-30 21:28:18 +0100 (Wed, 30 Nov 2005)
New Revision: 384

Added:
   trunk/source/plugins/
Log:
Added an empty directory source/plugins which seems to be needed to load SectionView 



