From skinner at berlios.de  Tue Oct  4 02:32:26 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 4 Oct 2005 02:32:26 +0200
Subject: [openrecord-svn] r346 - trunk/documentation
Message-ID: <200510040032.j940WQmt013118@sheep.berlios.de>

Author: skinner
Date: 2005-10-04 02:32:22 +0200 (Tue, 04 Oct 2005)
New Revision: 346

Modified:
   trunk/documentation/release_planning.txt
Log:
Closed iteration #5 and opened iteration #6.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/documentation/release_planning.txt	2005-10-04 00:32:22 UTC (rev 346)
@@ -336,8 +336,8 @@
  ~ 2    = Velocity (in estimated IEDs per week)
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
-       
-       
+
+
 ################################################################################
 ################################################################################
 ##                                                                            ##
@@ -347,106 +347,149 @@
 ################################################################################
 ################################################################################
 
+
 ---------------------------------------------------------------------------
    Tasks we originally identified for Iteration #5, in September 2005
 -------+----------+---------+----------------------------------------------
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
 brian  |          | 0.5  IED|  1. look into using the Dojo Package System
+-------+----------+---------+----------------------------------------------
+
+
+---------------------------------------------------------------------------
+   New tasks that we decided to take on for Iteration #5, in September 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
 brian  |          | 2    IED|     convert code to use Dojo Package System
 brian  |          | 0    IED|     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
 brian  |          | 0    IED|     replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
 brian  |          | 0.5  IED|     move isUuid out of Util.js, and add more error checking code
-brian  |          | (0.25+) |     replace orpBindAsEventListener() with dojo.event.connect()
-       |          | (0.25+) |     try to get djConfig.debugAtAllCosts to work (see sandbox.html)
-       |          |         |     try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
-       |          |         |     try to replace View.appendNewElement() with dojo.xml.domUtil methods
-       |          |         |     try to replace remaining Util.js functions with dojo.lang functions
-       |          |         |     try using Ant and the Dojo build system to build OpenRecord into a single-file 
-       |          |         |     change "endOfLife()" to "destroy()"
-       |          |         |     move XmlConverter.js out of util, because it depends on model code
 brian  |          | 0    IED|     in model, get rid of ._Record() and ._ContentRecord()
 brian  |          | 0.75 IED|     make some sort of assertType() method
 brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
 brian  | 0.25 IED | 0.25 IED|     refactor UUID constructor API, and other UUID improvements
-       |          |         |  2. create a FakeStorage class, + rename FileSaver + HttpSaver
-       |          |         |  3. rename Dehydrate and Rehydrate to Serialize and Deserialize
-       |          |         |  4. merge StubVirtualServer + DeltaVirtualServer, and re-name
-       |          |         |  5. research standard text representations for DateValues
-       |          |         |  6. make ordinal value strings not grow long so quickly
-       |          |         |  7. Do lazy creation of layout data items
-brian  | 0.5  IED | (0.5+)  |     Make Item.js use namedParameter based API
-brian  |          |         |     Decide whether or not to replace bi-directional connection entries with twin-entries
-       |          |         |  8. Document the Data model public API
-       |          |         |  9. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
-       |          |         | 10. Pick one file, and do a group code review on it
-       |          |         | 11. Implement a good URL-to-content mapping, so that URLs won't go bad in future releases
-       |          |         | 12. Rationalize the View API and document public API
-mignon | 1    IED |         |     Rationalize the ViewPlugin API
-mignon | 0.25 IED |         | 13. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 
-mignon | 2    IED |         |     Automatically load ViewPlugins found in the view_plugins directory 
+-------+----------+---------+----------------------------------------------
+
+
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+     Summary of Iteration #5
+         September 2005
+  September 5 to October 3, 2005
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+   1    = number of PLANNED tasks that were finished 
+   8    = number of ADDITIONAL tasks that were finished 
+  ~4    = total estimated IEDs for PLANNED and ADDITIONAL tasks that were finished
+   4    = number of weeks in September iteration
+ ~ 1    = Velocity (in estimated IEDs per week)
+~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+
+
+
+################################################################################
+################################################################################
+##                                                                            ##
+##                                Iteration #6                                ##
+##                                October 2005                                ##
+##                                                                            ##
+################################################################################
+################################################################################
+
+
+---------------------------------------------------------------------------
+   Tasks we originally identified for Iteration #6, in October 2005
+-------+----------+---------+----------------------------------------------
+Who    | Estimate | Actual  | Task
+-------+----------+---------+----------------------------------------------
+       |          | (0.25+) |  1. try to get djConfig.debugAtAllCosts to work (see sandbox.html)
+brian  |          | (0.25+) |  2. replace orpBindAsEventListener() with dojo.event.connect()
+       |          |         |  3. move UUID files from source/util to source/uuid
+brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API
+       |          |         |  5. split half the code in source/model off into source/_____
+       |          |         |  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 
+       |          |         |  7. merge StubVirtualServer + DeltaVirtualServer, and re-name
+       |          |         |  8. create a FakeStorage class, + rename FileSaver + HttpSaver
+       |          |         |  9. change "endOfLife()" to "destroy()"
+       |          |         | 10. Rationalize the View API and document public API
+mignon | 1    IED |         | 11. Rationalize the ViewPlugin API
+mignon | 0.25 IED |         | 12. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 
+mignon | 2    IED |         | 13. Automatically load ViewPlugins found in the view_plugins directory 
        |          |         | 14. Make RootView subclass from View, or add comments explaining why it doesn't
        |          |         | 15. Make DateValue subclass from Date, or wrap an internal Date object
 -------+----------+---------+----------------------------------------------
-       |          |         |     Fix the message that says "Sorry, for some reason OpenRecord was not able to launch."
-       |          |         | 16. Assign system attributes & categories to a "System" category
-       |          |         | 17. Hide "System" items most of the time
-       |          |         | 18. improve UI for creating a new category
-       |          |         | 19. Deal with \n in page name or summary fields
-       |          |         | 20. be able to select a table row 
-       |          |         | 21. be able to delete a selected table row 
-       |          |         | 22. drag-and-drop to re-order table rows
-       |          |         | 23. improve UI for "add new attribute" in Table View 
-       |          |         | 24. improve UI for setting the expected data type of an attribute
-       |          |         | 25. have Detail View use textarea instead of text input, for long strings
-       |          |         | 26. make it possible to add a new attribute in Detail View 
-       |          |         | 27. improve UI for initial "out of the box" experience
-       |          |         | 28. improve UI for creating a new page
-       |          |         | 29. improve UI for adding a new section to a page
-       |          |         | 30. UI to move/delete sections?
+       |          |         | 16. Document the Data model public API
+       |          |         | 17. research standard text representations for DateValues
+       |          |         | 18. make ordinal value strings not grow long so quickly
+       |          |         | 19. Do lazy creation of layout data items
+       |          |         | 20. try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
+       |          |         | 21. try to replace View.appendNewElement() with dojo.xml.domUtil methods
+       |          |         | 22. try to replace remaining Util.js functions with dojo.lang functions
+       |          |         | 23. try using Ant and the Dojo build system to build OpenRecord into a single-file 
+       |          |         | 24. move XmlConverter.js out of util, because it depends on model code
+brian  |          |         | 25. Decide whether or not to replace bi-directional connection entries with twin-entries
+       |          |         | 26. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
+       |          |         | 27. Pick one file, and do a group code review on it
+       |          |         | 28. Implement a good URL-to-content mapping, so that URLs won't go bad in future releases
+brian  | 1    IED |         | 29. Rationalize our CSS style sheet approach
+       |          |         | 30. Fix the message that says "Sorry, for some reason OpenRecord was not able to launch."
 -------+----------+---------+----------------------------------------------
-       |          |         | 31. Better time parsing e.g. 3pm
-       |          |         | 32. Refactor our observer notification API (and implementation)
-chao   | 0.5  IED |         | 33. Wire up observers & keep views in sync
-       |          |         | 34. Attempt to embed an OpenRecord view in a MediaWiki page
-brian  | 1    IED |         | 35. Rationalize our CSS style sheet approach
-       |          |         | 36. Data model: boolean, URL, entries that apply to timespan (e.g. annual population)
-chao   | 0.25 IED |         | 37. Make currently sorted column have a special CSS class so that it can look different
-chao   | 0.25 IED |         | 38. Resolve: How should table cells deal with <enter>, move down a cell or to the right?
-       |          |         | 39. be able to select a non-lozenge literal entry
-       |          |         | 40. be able to select the text within an entry
+       |          |         | 31. Assign system attributes & categories to a "System" category
+       |          |         | 32. Hide "System" items most of the time
+       |          |         | 33. improve UI for creating a new category
+       |          |         | 34. Deal with \n in page name or summary fields
+       |          |         | 35. be able to select a table row 
+       |          |         | 36. be able to delete a selected table row 
+       |          |         | 37. drag-and-drop to re-order table rows
+       |          |         | 38. improve UI for "add new attribute" in Table View 
+       |          |         | 39. improve UI for setting the expected data type of an attribute
+       |          |         | 40. have Detail View use textarea instead of text input, for long strings
+       |          |         | 41. make it possible to add a new attribute in Detail View 
+       |          |         | 42. improve UI for initial "out of the box" experience
+       |          |         | 43. improve UI for creating a new page
+       |          |         | 44. improve UI for adding a new section to a page
+       |          |         | 45. UI to move/delete sections?
 -------+----------+---------+----------------------------------------------
-       |          |         | 41. Reach consensus on (colors, padding, and borders) and then implement
-       |          |         | 42. Make sure view code uses transactions
-       |          |         | 43. UI and data model design to support collaboration
-       |          |         | 44. config option so that only logged-in users have read-access
-       |          |         | 45. have an "icon" attribute, and use icons in suggestion box and in EntryView
-       |          |         | 46. run in IE as well as Firefox
-       |          |         | 47. Write one unit test that tests GUI code
-       |          |         | 48. Write one performance test that measures the time some code takes
-       |          |         | 49. Provide GUI feedback about what's editable
-       |          |         | 50. Convert UI code from DOM level 0 to DOM level 2
+       |          |         | 46. Better time parsing e.g. 3pm
+       |          |         | 47. Refactor our observer notification API (and implementation)
+       |          |         | 48. Wire up observers & keep views in sync
+       |          |         | 49. Attempt to embed an OpenRecord view in a MediaWiki page
+       |          |         | 50. Data model: boolean, URL, entries that apply to timespan (e.g. annual population)
+       |          |         | 51. Make currently sorted column have a special CSS class so that it can look different
+       |          |         | 52. Resolve: How should table cells deal with <enter>, move down a cell or to the right?
+       |          |         | 53. be able to select a non-lozenge literal entry
+       |          |         | 54. be able to select the text within an entry
+       |          |         | 55. Reach consensus on (colors, padding, and borders) and then implement
+       |          |         | 56. Make sure view code uses transactions
+       |          |         | 57. UI and data model design to support collaboration
+       |          |         | 58. config option so that only logged-in users have read-access
+       |          |         | 59. have an "icon" attribute, and use icons in suggestion box and in EntryView
+       |          |         | 60. run in IE as well as Firefox
 -------+----------+---------+----------------------------------------------
-       |          |         | 51. improve UI for entering references to categories or to other items
-       |          |         | 52. improve UI for creating a new user
-       |          |         | 53. Check for incorrect dependencies (e.g. a Util dependency on model code)
-       |          |         | 54. Add support for repository merging
-       |          |         | 55. BUG: back button is broken
-       |          |         | 56. BUG: "Waiting for localhost..."
-       |          |         | 57. BUG: "Node was not found" exception in EntryView/LoginView?
-       |          |         | 58. Do some testing to find other existing bugs
-       |          |         | 59. Have explicit save instead of (or in addition to) autosave
+       |          |         | 61. Write one unit test that tests GUI code
+       |          |         | 62. Write one performance test that measures the time some code takes
+       |          |         | 63. Provide GUI feedback about what's editable
+       |          |         | 64. Convert UI code from DOM level 0 to DOM level 2
+       |          |         | 65. improve UI for entering references to categories or to other items
+       |          |         | 66. improve UI for creating a new user
+       |          |         | 67. Check for incorrect dependencies (e.g. a Util dependency on model code)
+       |          |         | 68. Add support for repository merging
+       |          |         | 69. BUG: back button is broken
+       |          |         | 70. BUG: "Waiting for localhost..." (may be related to how we load images)
+       |          |         | 71. BUG: "Node was not found" exception in EntryView/LoginView?
+       |          |         | 72. Do some testing to find other existing bugs
+       |          |         | 73. Have explicit save instead of (or in addition to) autosave
+       |          |         | 74. Be able to cancel out of creating a new account
+       |          |         | 75. Save view layout choice and user preferences
 -------+----------+---------+----------------------------------------------
-       |          |         | 60. Be able to cancel out of creating a new account
-       |          |         | 61. Save view layout choice and user preferences
-       |          |         | 62. Do code reviews
-       |          |         | 63. Write concurrency tests 
-       |          |         | 64. Write scalability tests 
-       |          |         | 65. Ensure that PHP scripts and file I/O works for concurrent multi-user access
-       |          |         | 66. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
-       |          |         | 67. Have different documents use different style-sheets
+       |          |         | 76. Do code reviews
+       |          |         | 77. Write concurrency tests 
+       |          |         | 78. Write scalability tests 
+       |          |         | 79. Ensure that PHP scripts and file I/O works for concurrent multi-user access
+       |          |         | 80. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
+       |          |         | 81. Have different documents use different style-sheets
+       |          |         | 82. replace /source/util/Cookie.js with dojo.io.cookies
 -------+----------+---------+----------------------------------------------
-       |          |         |     replace /source/util/Cookie.js with dojo.io.cookies
                               
 
 
@@ -534,15 +577,6 @@
     able to add new columns on the fly, where each new
     column is for some new ad-hoc attribute.
 ---------------------------------------------------
- + NavBar view
-    The NavBar should automatically update when the name of
-    a page changes, or when a new page gets added. The user
-    should be able to edit the NavBar itself to change the
-    name of a page or to create a new page. The user should
-    be able to drag the menu items up and down to re-order
-    the list.  For a drag-and-drop list example, see:
-    http://tool-man.org/examples/sorting.html
----------------------------------------------------
  + Be able to edit in outline mode
     In the outline plugin, add code to handle editing. The
     user should be able to add new items to an outline,
@@ -564,10 +598,6 @@
     within the current list item, rather than whisking you
     away to a completely separate item detail page.
 ---------------------------------------------------
- + Table Plugin column order
-   Add 'Table' plugin controls for column re-arranging, 
-   column hiding, etc.
----------------------------------------------------
  + Draft a Contributor Agreement
      We need to draft some sort of Contributor Agreement, like the Apache 
      Contributor Agreement or the Python Contributor Agreement.
@@ -577,8 +607,6 @@
 ---------------------------------------------------
  + Move this task list from here into OpenRecord!
 ---------------------------------------------------
- + Consider moving from JavaDoc-style comments to reflection-based comments
----------------------------------------------------
  + Consider having a build system
     A build system could:
       * run unit tests
@@ -620,8 +648,6 @@
  Q: Should we decouple plugins from SectionView? in general, should we make objects less tightly coupled?
      Parent objects can know about children objects, but not vice versa.
 ---------------------------------------------------
- + Q: How exactly should entering new items UI work? Not clear when an item is saved
----------------------------------------------------
  + UI design/improvement for:
     - toggle for "edit"/"view" or "editable"/"locked"
     - adding a row to a table



From skinner at berlios.de  Tue Oct  4 03:34:06 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 4 Oct 2005 03:34:06 +0200
Subject: [openrecord-svn] r347 - in trunk: source source/archive source/model source/storage tests tests/archive tests/model tests/storage tests/util
Message-ID: <200510040134.j941Y6sZ022189@sheep.berlios.de>

Author: skinner
Date: 2005-10-04 03:33:56 +0200 (Tue, 04 Oct 2005)
New Revision: 347

Added:
   trunk/source/archive/
   trunk/source/archive/DeltaArchive.js
   trunk/source/archive/StubArchive.js
   trunk/source/storage/
   trunk/source/storage/FileStorage.js
   trunk/source/storage/HttpStorage.js
   trunk/source/storage/append_to_repository_file.php
   trunk/source/storage/write_to_repository_file.php
   trunk/tests/archive/
   trunk/tests/archive/LintTest.html
   trunk/tests/archive/LintTest.js
   trunk/tests/storage/
   trunk/tests/storage/LintTest.html
   trunk/tests/storage/LintTest.js
Removed:
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/FileSaver.js
   trunk/source/model/HttpSaver.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/append_to_repository_file.php
   trunk/source/model/write_to_repository_file.php
Modified:
   trunk/source/model/World.js
   trunk/tests/TestSuite.html
   trunk/tests/model/LintTest.js
   trunk/tests/model/ModelTest.js
   trunk/tests/model/RepositoryWritingTest.js
   trunk/tests/model/TestReorderingForSpecialCases.js
   trunk/tests/model/TestReorderingForTypicalOrdinals.js
   trunk/tests/util/XmlConverterMultiplePassesTest.js
   trunk/tests/util/XmlConverterTest.js
Log:
Moved a half dozen files out of the "model" directory and into the new "storage" and "archive" directories.  Renamed the files that got moved.  Created corresponding unit test directories.  Got all the code working again.

Copied: trunk/source/archive/DeltaArchive.js (from rev 345, trunk/source/model/DeltaVirtualServer.js)
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/source/archive/DeltaArchive.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,498 @@
+/*****************************************************************************
+ DeltaArchive.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.archive.DeltaArchive");
+dojo.require("orp.archive.StubArchive");
+dojo.require("orp.model.World");
+dojo.require("orp.model.Vote");
+dojo.require("orp.storage.FileStorage");
+dojo.require("orp.storage.HttpStorage");
+dojo.require("orp.lang.Lang");
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global window */
+/*global XMLHttpRequest, ActiveXObject  */
+/*global Util, DateValue  */
+/*global World, Item, Entry, Ordinal, Vote  */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The DeltaArchive is a datastore that loads and saves
+ * an entire World of items as a single monolithic JSON string.
+ *
+ * @scope    public instance constructor
+ * @param    inJsonRepositoryString    A JSON string literal representing the world of items. 
+ */
+orp.archive.DeltaArchive = function(repositoryName, pathToTrunkDirectory, optionalDefaultOverrides) {
+  orp.archive.StubArchive.call(this, pathToTrunkDirectory, optionalDefaultOverrides);
+  this._repositoryName = repositoryName;
+  this._pathToTrunkDirectory = "";
+  if (pathToTrunkDirectory) {
+    this._pathToTrunkDirectory = pathToTrunkDirectory;
+  }
+  this._hasEverFailedToSaveFlag = false;
+};
+
+dj_inherits(orp.archive.DeltaArchive, orp.archive.StubArchive);  // makes DeltaArchive be a subclass of StubArchive
+
+
+// -------------------------------------------------------------------
+// Public constants
+// -------------------------------------------------------------------
+orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY = "repositories";
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Initializes the instance variables for a newly created DeltaArchive,
+ * and does the initial loading of at least the axiomatic items.
+ *
+ * @scope    public instance method
+ * @param    world    The world that we provide data for. 
+ */
+orp.archive.DeltaArchive.prototype.setWorldAndLoadAxiomaticItems = function(world) {
+  this._initialize(world);
+  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
+
+  var repositoryFileName = this._repositoryName + ".json";
+  var repositoryUrl = "";
+  if (this._needCompletePath) {
+    repositoryUrl = this._completePathToTrunkDirectory + '/';
+  }
+  repositoryUrl += orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY + "/" + repositoryFileName;
+  // var repositoryContentString = orp.util.getStringContentsOfFileAtURL(repositoryUrl);
+  var repositoryContentString = dojo.hostenv.getText(repositoryUrl);
+  repositoryContentString += " ] }";
+
+  this._loadWorldFromJsonString(repositoryContentString);
+};
+
+
+// -------------------------------------------------------------------
+// Private Methods
+// -------------------------------------------------------------------
+
+/**
+ * Loads a world of items from a dehydrated JSON string.
+ *
+ * Given a world of items in JSON format, bootstraps new 
+ * instances of items corresponding to the dehydrated data.
+ * 
+ * @scope    private instance method
+ * @param    jsonRepositoryString    A JSON string literal representing the world of items. 
+ */
+orp.archive.DeltaArchive.prototype._loadWorldFromJsonString = function(jsonRepositoryString) {
+
+  // load the list of records
+  orp.lang.assertType(jsonRepositoryString, String);
+  var dehydratedRecords = null;
+  eval("dehydratedRecords = " + jsonRepositoryString + ";");
+  orp.lang.assertType(dehydratedRecords, Object);
+  var recordFormat = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.FORMAT];
+  orp.lang.assert(recordFormat == orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
+  var listOfRecords = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.RECORDS];
+  orp.lang.assertType(listOfRecords, Array);
+  
+  var listOfUsers = null;
+  
+  this._rehydrateRecords(listOfRecords);
+};
+
+
+/**
+ * Given a string, returns a copy of the string that is less than
+ * 80 characters long.
+ *
+ * @scope    private instance method
+ * @param    string    A string that may need truncating.
+ * @return   A string that is no longer than 80 characters long.
+ */
+orp.archive.DeltaArchive.prototype._truncateString = function(string) {
+  var maxLength = 80;
+  var ellipsis = "...";
+  var returnString = "";
+  if (string.length > maxLength) {
+    returnString = (string.substring(0, (maxLength - ellipsis.length)) + ellipsis);
+  } else {
+    returnString = string;
+  }
+  return this.encodeText(returnString);
+};
+
+
+/**
+ * Returns a big string, containing JavaScript "object literal"
+ * representations of all of the records in a Transaction.
+ *
+ * @scope    private instance method
+ * @param    transaction    A transaction object.
+ * @return   A JSON string literal, representing the records in the transaction. 
+ */
+orp.archive.DeltaArchive.prototype._getJsonStringRepresentingTransaction = function(transaction) {
+  var indent = "  ";
+  var listOfRecords = transaction.getRecords();
+  if (!listOfRecords || listOfRecords.length === 0) {
+    return "";
+  }
+  
+  if (listOfRecords.length == 1) {
+    return this._getJsonStringRepresentingRecords(listOfRecords, indent);
+  } else {
+    indent = "    ";
+    var listOfStrings = [];
+    listOfStrings.push("  // =======================================================================\n");
+    listOfStrings.push('  { "' + orp.archive.StubArchive.JSON_MEMBER.TRANSACTION_CLASS + '": [\n');
+    var content = this._getJsonStringRepresentingRecords(transaction.getRecords(), indent);
+    listOfStrings.push(content);
+    listOfStrings.push('  ]\n');
+    listOfStrings.push('  }');
+    
+    var finalString = listOfStrings.join("");
+    return finalString;
+  }
+};
+
+
+/**
+ *
+ */
+orp.archive.DeltaArchive.prototype._getTypedDisplayStringForItem = function(item) {
+  var returnString = "(";
+  if (item) {
+    if (item instanceof orp.model.Item) {
+      var category = item.getFirstCategory();
+      if (category) {
+        returnString += this._truncateString(category.getDisplayString("???")) + ": ";
+      }
+      returnString += this._truncateString(item.getDisplayString("???"));
+    }
+    if (item instanceof orp.model.Entry) {
+      returnString += "Entry";
+    }
+  }
+  returnString += ")";
+  return returnString;
+};
+
+  
+/**
+ * Returns a big string, containing JavaScript "object literal"
+ * representations of the records.
+ *
+ * @scope    private instance method
+ * @param    listOfRecords    A list of the records to include in the JSON string.
+ * @param    indent    Optional. A string of spaces to prepend to each line.
+ * @return   A JSON string literal, representing the records. 
+ */
+orp.archive.DeltaArchive.prototype._getJsonStringRepresentingRecords = function(listOfRecords, indent) {
+  indent = indent || "";
+  var i;
+  var listOfStrings = [];
+  var firstContentRecord = true;
+  var itemDisplayNameSubstring;
+  var entryDisplayNameSubstring;
+  var listOfUsers = null;
+  var commentString;
+  var generateComments = false;
+  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
+
+  if (!generateComments) {
+    indent = "";
+  }
+  
+  for (i in listOfRecords) {
+    var record = listOfRecords[i];
+    if (firstContentRecord) {
+      firstContentRecord = false;
+    } else {
+      listOfStrings.push(',\n');
+    }
+    if (generateComments) {
+      listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
+    }
+    
+    if (record instanceof orp.model.Item) {
+      var item = record;
+      if (generateComments) {
+        listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(item) + '\n');
+        listOfStrings.push(indent + '//           by (' + this._truncateString(item.getUserstamp().getDisplayString()) + ')');
+        listOfStrings.push(' on (' + orp.util.DateValue.getStringMonthDayYear(item.getCreationDate()) + ')\n');
+      }
+      if (!this._jsonFragmentForItemPrefix) {
+        this._jsonFragmentForItemPrefix = indent + '{ "' + JSON_MEMBER.ITEM_CLASS + '": ';
+        this._jsonFragmentForItemPrefix += '{ "' + JSON_MEMBER.UUID + '": ';
+      }
+      listOfStrings.push(this._jsonFragmentForItemPrefix);
+      listOfStrings.push(item._getUuidInQuotes());
+      listOfStrings.push(' } }');
+      
+      if (!listOfUsers) {
+        listOfUsers = this.getUsers();
+      }
+      if (orp.util.isObjectInSet(item, listOfUsers)) {
+        var user = item;
+        var password = this._hashTableOfUserAuthenticationInfo[user.getUuid()];
+        var passwordString = "null";
+        if (password) {
+          passwordString = '"' + password + '"';
+        }
+        listOfStrings.push(',\n');
+        if (generateComments) {
+          listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
+          listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(user) + '\n');
+        }
+        listOfStrings.push(indent + '{ "' + JSON_MEMBER.USER_CLASS + '": ' + '{\n');
+        listOfStrings.push(indent + '         "' + JSON_MEMBER.USER + '": ' + user._getUuidInQuotes() + ',\n');
+        listOfStrings.push(indent + '     "' + JSON_MEMBER.PASSWORD + '": ' + passwordString + ' }\n');
+        listOfStrings.push(indent + '}');
+      }
+    }
+
+    if (record instanceof orp.model.Vote) {
+      var vote = record;
+      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(vote.getContentRecord());
+      var deleteVsRetainString = vote.getRetainFlag() ? "RETAIN" : "DELETE";
+      if (generateComments) {
+        listOfStrings.push(indent + '// vote to ' + deleteVsRetainString + " " + entryDisplayNameSubstring + '\n');
+      }
+      listOfStrings.push(indent + '{ "' + JSON_MEMBER.VOTE_CLASS + '": ' + '{\n');
+      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + vote._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + vote.getContentRecord()._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '   "' + JSON_MEMBER.RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
+    }
+
+    if (record instanceof orp.model.Ordinal) {
+      var ordinal = record;
+      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(ordinal.getContentRecord());
+      if (generateComments) {
+        listOfStrings.push(indent + '// ordinal # ' + ordinal.getOrdinalNumber() + " for " + entryDisplayNameSubstring + '\n');
+      }
+      listOfStrings.push(indent + '{ "' + JSON_MEMBER.ORDINAL_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + ordinal._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + ordinal.getContentRecord()._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '        "' + JSON_MEMBER.ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
+    }
+
+    if (record instanceof orp.model.Entry) {
+      var entry = record;
+      var entryType = entry.getType();
+      var typeUuid = entryType.getUuid();
+      // var entryString = "";
+      if (generateComments) {
+        listOfStringsForEntry = [];
+      } else {
+        listOfStringsForEntry = listOfStrings;
+      }
+      listOfStringsForEntry.push(indent + '{ "' + JSON_MEMBER.ENTRY_CLASS + '": ' + '{\n');
+      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + entry._getUuidInQuotes() + ',\n');
+      var previousEntry = entry.getPreviousEntry();
+      if (previousEntry) {
+        listOfStringsForEntry.push(indent + '"' + JSON_MEMBER.PREVIOUS_VALUE + '": ' + previousEntry._getUuidInQuotes() + ',\n');
+      }
+      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.TYPE + '": "' + typeUuid.toString() + '",\n');
+      if (generateComments) {
+        commentString = "";
+      }
+      if (typeUuid.toString() == orp.model.World.UUID.TYPE_CONNECTION) {
+        var pairOfItems = entry.getItem();
+        var firstItem = pairOfItems[0];
+        var secondItem = pairOfItems[1];
+        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": [' + firstItem._getUuidInQuotes() + ', ' + secondItem._getUuidInQuotes() + '],\n');
+        var pairOfAttributes = entry.getAttribute();
+        var firstAttribute = pairOfAttributes[0];
+        var secondAttribute = pairOfAttributes[1];
+        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": [' + firstAttribute._getUuidInQuotes() + ', ' + secondAttribute._getUuidInQuotes() + ']');
+        if (generateComments) {
+          commentString += indent + '// ' + this._getTypedDisplayStringForItem(firstItem);
+          commentString += ".(" + this._truncateString(firstAttribute.getDisplayString("???")) + ")";
+          commentString += " = " + this._getTypedDisplayStringForItem(secondItem) + "\n";
+          commentString += indent + '// ' + this._getTypedDisplayStringForItem(secondItem);
+          commentString += ".(" + this._truncateString(secondAttribute.getDisplayString("???")) + ")";
+          commentString += " = " + this._getTypedDisplayStringForItem(firstItem) + "\n";
+        }
+      } else {
+        var attribute = entry.getAttribute();
+        // if (!(attribute instanceof orp.model.Item)) {
+        //   alert(entry + "\n" + attribute);
+        // }
+        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": ' + attribute._getUuidInQuotes() + ',\n');
+        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": ' + entry.getItem()._getUuidInQuotes() + ',\n');
+        var contentData = entry.getValue();
+        
+        var valueString = null;
+        var valueComment = null;
+        switch (typeUuid.toString()) {
+          case orp.model.World.UUID.TYPE_NUMBER: 
+            valueString = '"' + contentData + '"';
+            if (generateComments) {valueComment = contentData;}
+            break;
+          case orp.model.World.UUID.TYPE_TEXT: 
+            valueString = '"' + this.encodeText(contentData) + '"';
+            if (generateComments) {valueComment = '"' + this._truncateString(contentData) + '"';}
+            break;
+          case orp.model.World.UUID.TYPE_DATE: 
+            valueString = '"' + contentData.toString() + '"';
+            if (generateComments) {valueComment = valueString;}
+            break;
+          case orp.model.World.UUID.TYPE_ITEM: 
+            valueString = contentData._getUuidInQuotes();
+            if (generateComments) {valueComment = this._getTypedDisplayStringForItem(contentData);}
+            break;
+          default:
+            orp.lang.assert(false, "no such type: " + entryType.getDisplayString());
+        }
+        listOfStringsForEntry.push(indent + '        "' + JSON_MEMBER.VALUE + '": ' + valueString);
+        if (generateComments) {
+          commentString += indent + '// ' + this._getTypedDisplayStringForItem(entry.getItem());
+          commentString += ".(" + this._truncateString(attribute.getDisplayString("???")) + ")";
+          commentString += " = " + valueComment + "\n";
+        }
+      }
+      if (generateComments) {
+        commentString += indent + '//           by (' + this._truncateString(entry.getUserstamp().getDisplayString()) + ')';
+        commentString += ' on (' + orp.util.DateValue.getStringMonthDayYear(entry.getCreationDate()) + ')\n';
+        listOfStrings.push(commentString);
+        for (var j in listOfStringsForEntry) {
+          listOfStrings.push(listOfStringsForEntry[j]);
+        }
+      }
+      // listOfStrings.push(entryString);
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
+    }
+  }
+  
+  var finalString = listOfStrings.join("");
+  return finalString;
+};
+
+
+/**
+ * @scope    private instance method
+ * @param    overwriteIfExists    Optional
+ * @return   success
+ */
+orp.archive.DeltaArchive.prototype._createNewRepository = function(overwriteIfExists) {
+  if (this._saverObject) {
+    alert("this._saverObject is already initialized.");
+    return false;
+  }
+  if (window.location) {
+    if (window.location.protocol == "http:") {
+      this._saverObject = new orp.storage.HttpStorage(this._repositoryName, this._pathToTrunkDirectory);
+    }
+    if (window.location.protocol == "file:") {
+      this._saverObject = new orp.storage.FileStorage(this._repositoryName, this._pathToTrunkDirectory);
+    }
+  }
+  if (!this._saverObject) {
+    if (!this._hasEverFailedToSaveFlag) {
+      window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
+      this._hasEverFailedToSaveFlag = true;
+    }
+    return false;
+  }
+  var text = '{ "format": "' + orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST + '", \n';
+  text +=    '  "records": [\n';
+  text +=    '  // =======================================================================\n';
+  text +=    '  { "Transaction": [ ]\n';
+  text +=    '  }';
+  return this._saverObject.writeText(text, overwriteIfExists);
+};
+
+
+/**
+ * Sends all the changes to the server, so that the server can record the
+ * changes.
+ *
+ * @scope    private instance method
+ * @param    forceSave    Optional. Forces a save if set to true. 
+ * @return   The list of changes made. 
+ */
+orp.archive.DeltaArchive.prototype._saveChangesToServer = function(forceSave) {
+  var currentTransaction = this.getCurrentTransaction();
+  var listOfChangesMade = currentTransaction.getRecords();
+  if (!forceSave && listOfChangesMade.length === 0) {
+    return listOfChangesMade;
+  }
+  
+  if (!this._saverObject) {
+    if (window.location) {
+      if (window.location.protocol == "http:") {
+        this._saverObject = new orp.storage.HttpStorage(this._repositoryName, this._pathToTrunkDirectory);
+      }
+      if (window.location.protocol == "file:") {
+        this._saverObject = new orp.storage.FileStorage(this._repositoryName, this._pathToTrunkDirectory);
+      }
+    }
+  }
+  
+  var key;
+  var newRecord;
+  for (key in listOfChangesMade) {
+    newRecord = listOfChangesMade[key];
+    this._chronologicalListOfRecords.push(newRecord);
+  }
+
+  if (this._saverObject) {
+    var textToAppend = ",\n" + this._getJsonStringRepresentingTransaction(currentTransaction);
+    this._saverObject.appendText(textToAppend);
+  } else {
+    if (!this._hasEverFailedToSaveFlag) {
+      window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
+      this._hasEverFailedToSaveFlag = true;
+    }
+  }
+  
+  this._currentTransaction = null;
+  return listOfChangesMade;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/source/archive/StubArchive.js (from rev 345, trunk/source/model/StubVirtualServer.js)
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/source/archive/StubArchive.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,1073 @@
+/*****************************************************************************
+ StubArchive.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.archive.StubArchive");
+dojo.require("orp.model.World");
+dojo.require("orp.model.Item");
+dojo.require("orp.model.Entry");
+dojo.require("orp.model.Transaction");
+dojo.require("orp.util.TimeBasedUuid");
+dojo.require("orp.util.DateValue");
+dojo.require("orp.lang.Lang");
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global Util  */
+/*global World, Item, Entry, Ordinal, Vote, ContentRecord, Transaction  */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The StubArchive is a dummy place-holder datastore that does
+ * a bare-minimum job of providing data to a World.
+ *
+ * @scope    public instance constructor
+ */
+orp.archive.StubArchive = function(pathToTrunkDirectory) {
+  var fileName = "2005_june_axiomatic_items.json";
+  var relUrlForAxiomaticFile = "source/model/" + fileName;
+  if (pathToTrunkDirectory) {
+    this._needCompletePath = true;
+    var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/source/model/TestRepositoryWriting.html.
+    var arrayOfPathComponents = thisUrl.split('/');
+    arrayOfPathComponents.pop();
+    var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
+    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectory;
+    this._dehydratedAxiomFileURL = this._completePathToTrunkDirectory + '/' + relUrlForAxiomaticFile;
+  } else {
+    this._needCompletePath = false;
+    this._dehydratedAxiomFileURL = relUrlForAxiomaticFile;    
+  }
+  
+  /*
+  if (optionalDefaultOverrides) {
+    this._processOptionalDefaultOverrides(optionalDefaultOverrides, "Stub");
+  }
+  */
+};
+
+
+// -------------------------------------------------------------------
+// Public constants
+// -------------------------------------------------------------------
+orp.archive.StubArchive.JSON_FORMAT = {
+  FORMAT_2005_JUNE_CHRONOLOGICAL_LIST: "2005_JUNE_CHRONOLOGICAL_LIST" };
+
+orp.archive.StubArchive.JSON_MEMBER = {
+  FORMAT: "format",
+  RECORDS: "records",
+  TYPE: "type",
+  VALUE: "value",
+  UUID: "uuid",
+  USER: "user",
+  PASSWORD: "password",
+  ITEM_CLASS: "Item",
+  ENTRY_CLASS: "Entry",
+  VOTE_CLASS: "Vote",
+  ORDINAL_CLASS: "Ordinal",
+  USER_CLASS: "User",
+  TRANSACTION_CLASS: "Transaction",
+  ATTRIBUTE: "attribute",
+  PREVIOUS_VALUE: "previousEntry",
+  RECORD: "record",
+  ITEM: "item",
+  RETAIN_FLAG: "retainFlag",
+  ORDINAL_NUMBER: "value" };
+
+
+/*
+OLD?
+StubArchive.JSON_TYPE_TEXT_VALUE = "TextValue";
+StubArchive.JSON_TYPE_RELATED_UUID = "RelatedUuid";
+StubArchive.JSON_TYPE_NUMBER_VALUE = "NumberValue";
+StubArchive.JSON_TYPE_DATE_VALUE = "DateValue";
+StubArchive.JSON_TYPE_CHECKMARK_VALUE = "CheckMarkValue";
+StubArchive.JSON_TYPE_URL_VALUE = "UrlValue";
+StubArchive.JSON_TYPE_CONNECTION = "Connection";
+*/
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Initializes the instance variables for a newly created StubArchive.
+ *
+ * @scope    private instance method
+ * @param    world    The world that we provide data for. 
+ */
+orp.archive.StubArchive.prototype._initialize = function(world) {
+  this._world = world;
+  
+  this._countOfNestedTransactions = 0;
+  this._currentTransaction = null;
+
+  this._hashTableOfItemsKeyedByUuid = {};
+  this._hashTableOfEntriesKeyedByUuid = {};
+  this._chronologicalListOfRecords = [];
+  
+  this._listOfUsers = [];
+  this._hashTableOfUserAuthenticationInfo = {};
+  this._currentUser = null;
+};
+ 
+
+// -------------------------------------------------------------------
+// Public Methods
+// -------------------------------------------------------------------
+
+/**
+ * Initializes the instance variables for a newly created StubArchive,
+ * and does the initial loading of at least the axiomatic items.
+ *
+ * @scope    public instance method
+ * @param    world    The world that we provide data for. 
+ */
+orp.archive.StubArchive.prototype.setWorldAndLoadAxiomaticItems = function(world) {
+  this._initialize(world);
+  // this._buildTypeHashTable();
+  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
+};
+
+
+/**
+ * Returns the World instance that this virtual server is using.
+ *
+ * @scope    public instance method
+ * @return   A World object. 
+ */
+orp.archive.StubArchive.prototype.getWorld = function() {
+  return this._world;
+};
+
+
+/**
+ * Given a text string, this method returns a copy of the text string, 
+ * with certain special characters replaced by escape sequences.
+ * 
+ * For example, given a string like this:
+ * <pre>
+ *    this.encodeText('The quick <brown> fox & the "lazy" hare.\n');
+ * </pre>
+ * The return value will be:
+ * <pre>
+ *    'The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;'
+ * </pre>
+ * 
+ * @scope    public instance method
+ * @param    rawText    A text string to encode. 
+ * @return   A copy of the rawText string, with the special characters escaped. 
+ */
+orp.archive.StubArchive.prototype.encodeText = function(rawText) {
+  // orp.util.assert(orp.util.isString(rawText));
+  orp.lang.assertType(rawText, String);
+
+  var returnString = rawText;
+  // Note: it's important that we do '&' first, otherwise we'll accidentally
+  // replace all the & characters that we add in the following lines.
+  returnString = returnString.replace(new RegExp('&','g'), "&amp;");
+  returnString = returnString.replace(new RegExp('<','g'), "&lt;");
+  returnString = returnString.replace(new RegExp('>','g'), "&gt;");
+  returnString = returnString.replace(new RegExp('"','g'), "&quot;");
+  returnString = returnString.replace(new RegExp('\n','g'), "&#10;");
+  returnString = returnString.replace(new RegExp('\r','g'), "&#13;");
+  return returnString;
+};
+
+
+/**
+ * Given a text string that was encoded using encodeText(), this method 
+ * returns a decoded copy of the text string, with the encoded escape 
+ * sequences now replaced by the original special characters.
+ *
+ * For example, given a string like this:
+ * <pre>
+ *    this.decodeText('The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;');
+ * </pre>
+ * The return value will be:
+ * <pre>
+ *    'The quick <brown> fox & the "lazy" hare.\n'
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    encodedText    A text string to decode. 
+ * @return   A copy of the encodedText string, with the escaped characters replaced by the original special characters. 
+ */
+orp.archive.StubArchive.prototype.decodeText = function(encodedText) {
+  // orp.util.assert(orp.util.isString(encodedText));
+  orp.lang.assertType(encodedText, String);
+  
+  var returnString = encodedText;
+  returnString = returnString.replace(new RegExp('&#13;','g'), "\r");
+  returnString = returnString.replace(new RegExp('&#10;','g'), "\n");
+  returnString = returnString.replace(new RegExp('&quot;','g'), '"');
+  returnString = returnString.replace(new RegExp('&gt;','g'), ">");
+  returnString = returnString.replace(new RegExp('&lt;','g'), "<");
+  returnString = returnString.replace(new RegExp('&amp;','g'), "&");
+  // Note: it's important that we do '&amp;' last, otherwise we won't correctly
+  // handle a case like this:
+  //   text = this.decodeText(this.encodeText('&lt;'));
+  return returnString;
+};
+
+
+// -------------------------------------------------------------------
+// Transaction Methods
+// -------------------------------------------------------------------
+
+/**
+ * Marks the beginning of a transaction.
+ *
+ * Each time you call beginTransaction() you open a new transaction, 
+ * which you need to close later using endTransaction().  Transactions
+ * may be nested, but the beginTransaction and endTransaction calls
+ * always need to come in pairs. 
+ *
+ * @scope    public instance method
+ */
+orp.archive.StubArchive.prototype.beginTransaction = function() {
+  if (this._countOfNestedTransactions === 0) {
+    this._currentTransaction = new orp.model.Transaction();
+  }
+  this._countOfNestedTransactions += 1;
+};
+ 
+
+/**
+ * Marks the end of a transaction.
+ *
+ * @scope    public instance method
+ */
+orp.archive.StubArchive.prototype.endTransaction = function() {
+  this._countOfNestedTransactions -= 1;
+  orp.lang.assert(this._countOfNestedTransactions >= 0);
+
+  if (this._countOfNestedTransactions === 0) {
+    var listOfChangesMade = this._saveChangesToServer();
+    this._currentTransaction = null;
+    if (listOfChangesMade.length > 0) {
+      // alert(listOfChangesMade.length + " changes made");
+      // orp.util.displayStatusBlurb(listOfChangesMade.length + " changes made");
+      this._world._notifyObserversOfChanges(listOfChangesMade);
+    }
+  }
+};
+
+
+/**
+ * Returns the Transaction object for the current transaction.
+ *
+ * @scope    public instance method
+ * @return   A Transaction object, or null if there is no transaction in progress. 
+ */
+orp.archive.StubArchive.prototype.getCurrentTransaction = function() {
+  return this._currentTransaction;
+};
+
+
+// -------------------------------------------------------------------
+// Methods for creating and changing items
+// -------------------------------------------------------------------
+
+/**
+ * Returns a newly created item.
+ *
+ * @scope    public instance method
+ * @param    name    Optional. A string, which will be assigned to the name attribute of the new item. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created item.
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype.newItem = function(name, observer) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var item = this._createNewItem(observer, false);
+  if (name) { 
+    var attributeCalledName = this._world.getAttributeCalledName();
+    // item.addEntryForAttribute(attributeCalledName, name);
+    item.addEntry({attribute:attributeCalledName, value:name});
+  }
+  return item;
+};
+
+
+/**
+ * Returns a newly created "provisional" item.  At the time this item is 
+ * created, it will only exist in local memory.  Unlike normal items, 
+ * provisional items are not saved to the repository at the time they 
+ * are created.  The provisional item is saved to the repository when 
+ * an entry is set for one of the item's attributes.
+ *
+ * @scope    public instance method
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created provisional item.
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype.newProvisionalItem = function(observer) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var item = this._createNewItem(observer, true);
+  return item;
+};
+
+
+/**
+ * Returns a newly created item: either a provisional item or a normal item.
+ *
+ * @scope    private instance method
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
+ * @param    provisionalFlag    True if the item is provisional; false if the item is normal. 
+ * @return   A newly created item.
+ */
+orp.archive.StubArchive.prototype._createNewItem = function(observer, provisionalFlag) {
+  var uuid = this._getNewUuid();
+  var item = new orp.model.Item(this._world, uuid);
+  item._initialize(observer, provisionalFlag);
+  this._hashTableOfItemsKeyedByUuid[uuid] = item;
+  if (!provisionalFlag) {
+    this._currentTransaction.addRecord(item);
+  }
+  return item;
+};
+
+
+/**
+ * Records the fact that a provisional item just became real.
+ *
+ * @scope    package instance method
+ * @param    item    The item that was provisional and just became real. 
+ */
+orp.archive.StubArchive.prototype._provisionalItemJustBecameReal = function(item) {
+  this._currentTransaction.addRecord(item);
+};
+
+
+/**
+ * Returns a newly created entry.
+ *
+ * @scope    public instance method
+ * @param    item    The item that this is an entry of. 
+ * @param    previousEntry    Optional. The old entry that this entry is replacing. 
+ * @param    attribute    The attribute that this entry is assigned to. May be null. 
+ * @param    value    The value to initialize the entry with. 
+ * @param    type    Optional. An item representing the data type of the value. 
+ * @return   A newly created entry.
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype.newEntry = function(item, previousEntry, attribute, value, type) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var uuid = this._getNewUuid();
+  var entry = new orp.model.Entry(this._world, uuid);
+  entry._initialize(item, previousEntry, attribute, value, type);
+  item._addEntryToListOfEntriesForAttribute(entry, attribute);
+  
+  this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
+  this._currentTransaction.addRecord(entry);
+  return entry;
+};
+ 
+
+/**
+ * Returns a newly created entry.
+ *
+ * @scope    public instance method
+ * @param    previousEntry    The entry that this entry will replace. Can be null.
+ * @param    itemOne    One of the two items that this entry will connect. 
+ * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
+ * @param    itemTwo    One of the two items that this entry will connect. 
+ * @param    attributeTwo    The attribute of itemTwo that this entry will be assigned to.  
+ * @return   A newly created entry.
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype.newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var uuid = this._getNewUuid();
+  var entry = new orp.model.Entry(this._world, uuid);
+  entry._initializeConnection(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
+
+  itemOne._addEntryToListOfEntriesForAttribute(entry, attributeOne);
+  itemTwo._addEntryToListOfEntriesForAttribute(entry, attributeTwo);
+
+  this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
+  this._currentTransaction.addRecord(entry);
+  return entry;
+};
+
+
+/**
+ * Returns a newly created ordinal.
+ *
+ * @scope    public instance method
+ * @param    contentRecord    The contentRecord that this is an ordinal for. 
+ * @param    ordinalNumber    The ordinal number itself. 
+ * @return   A newly created ordinal.
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype.newOrdinal = function(contentRecord, ordinalNumber) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var uuid = this._getNewUuid();
+  var ordinal = new orp.model.Ordinal(this._world, uuid, contentRecord, ordinalNumber);
+  this._currentTransaction.addRecord(ordinal);
+  return ordinal;
+};
+
+
+/**
+ * Returns a newly created vote.
+ *
+ * @scope    public instance method
+ * @param    contentRecord    The contentRecord to attach this vote to. 
+ * @param    retainFlag    True if this is a vote to retain. False if this is a vote to delete. 
+ * @return   A newly created vote.
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype.newVote = function(contentRecord, retainFlag) {
+  this._throwErrorIfNoUserIsLoggedIn();
+  var uuid = this._getNewUuid();
+  var vote = new orp.model.Vote(this._world, uuid, contentRecord, retainFlag);
+  this._currentTransaction.addRecord(vote);
+  return vote;
+};
+
+
+// -------------------------------------------------------------------
+// Methods having to do with users
+// -------------------------------------------------------------------
+
+/**
+ * Creates a new item, where the new item represents a user of this datastore.
+ *
+ * @scope    public instance method
+ * @param    name    A string, which will be assigned to the name attribute of the new item. 
+ * @param    authentication    A string which will be used as the login password for the user. 
+ * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
+ * @return   A newly created item representing a user.
+ * @throws   Throws an Error if a user is logged in.
+ */
+orp.archive.StubArchive.prototype.newUser = function(name, authentication, observer) {
+  if (this._currentUser) {
+    var error = new Error("A user is logged in.  You can't create a new user when somebody is already logged in.");
+    throw error;
+  }
+
+  var newUser = this._createNewItem(observer, false);
+  this._listOfUsers.push(newUser);
+  
+  var md5Authentication = null;
+  if (authentication) {
+    md5Authentication = orp.util.hex_md5(authentication);
+  }
+  this._hashTableOfUserAuthenticationInfo[newUser.getUuid()] = md5Authentication;
+
+  this._currentUser = newUser;
+  var categoryCalledPerson = this.getWorld().getCategoryCalledPerson();
+  newUser.assignToCategory(categoryCalledPerson); 
+  if (name) { 
+    var attributeCalledName = this.getItemFromUuid(orp.model.World.UUID.ATTRIBUTE_NAME);
+    var entry = newUser.addEntry({attribute:attributeCalledName, value:name});
+  }
+  this._currentUser = null;
+  
+  return newUser;
+};
+
+
+/**
+ * Returns an list of all the items that represent users of this datastore.
+ *
+ * @scope    public instance method
+ * @return   A list of items.
+ */
+orp.archive.StubArchive.prototype.getUsers = function() {
+  return this._listOfUsers;
+};
+
+
+/**
+ * Returns an item representing the user who is currently logged in.
+ *
+ * @scope    public instance method
+ * @return   An item representing the user who is currently logged in.
+ */
+orp.archive.StubArchive.prototype.getCurrentUser = function() {
+  return this._currentUser;
+};
+
+
+// -------------------------------------------------------------------
+// Login and logout methods
+// -------------------------------------------------------------------
+
+/**
+ * Attempts to login a user.
+ *
+ * @scope    public instance method
+ * @param    inUser    The user to be logged in. 
+ * @param    inPassword    Password supplied at login. 
+ * @return   True if we were able to log in the user. False if the login failed.
+ */
+orp.archive.StubArchive.prototype.login = function(user, password) {
+  
+  // Only one user can be logged in at once.  We consider it an error
+  // if you try to log in a new user before logging out the old one.
+  if (this._currentUser) {
+    orp.lang.assert(false);
+  }
+  
+  var isKnownUser = orp.util.isObjectInSet(user, this._listOfUsers);
+  if (!isKnownUser) {
+    return false;
+  }
+
+  if (user.getUuidString() == orp.model.World.UUID.USER_AMY) {
+    // nobody is allowed to log in as the axiomatic user
+    return false;
+  }
+  
+  var md5hashOfPassword = null;
+  if (password) {
+    md5hashOfPassword = orp.util.hex_md5(password);
+  }
+  var realAuthentication = this._getAuthenticationInfoForUser(user);
+  var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);
+  
+  // PENDING: temporary hack
+  // if (!successfulAuthentication) {
+  //  successfulAuthentication = ("PENDING: magic super password" == authentication);
+  // }
+  
+  if (successfulAuthentication) {
+    this._currentUser = user;
+    return true;
+  } else {
+    return false;
+  }
+};
+
+
+/**
+ * Logs out the current user.
+ *
+ * @scope    public instance method
+ * @return   True if the current user was logged out. False if there was no current user logged in.
+ */
+orp.archive.StubArchive.prototype.logout = function() {
+  if (this._currentUser) {
+    this._currentUser = null;
+    return true;
+  } else {
+    return false;
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Other public methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a UUID, returns the item identified by that UUID.
+ *
+ * @scope    public instance method
+ * @param    uuid    The UUID of the item to be returned. 
+ * @param    observer    Optional. An object to be registered as an observer of the returned item. 
+ * @return   The item identified by the given UUID.
+ */
+orp.archive.StubArchive.prototype.getItemFromUuid = function(uuid, observer) {
+  orp.lang.assert(dojo.lang.isString(uuid) || uuid instanceof orp.util.Uuid);
+  
+  var item = this._hashTableOfItemsKeyedByUuid[uuid];
+  if (item && observer) {
+    item.addObserver(observer);
+  }
+  return item;
+};
+
+
+/**
+ * Sends all the changes to the server, so that the server can record the
+ * changes.
+ *
+ * @scope    private instance method
+ */
+orp.archive.StubArchive.prototype._saveChangesToServer = function () {
+  // The StubArchive doesn't ever actually talk to a server.
+  // Other VirtualServer implementations would be expected to actually
+  // implement this method such that it saves changes to the server
+  var listOfChangesMade = this._currentTransaction.getRecords();
+  this._currentTransaction = null;
+  return listOfChangesMade;
+};
+
+
+// -------------------------------------------------------------------
+// Query methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a QueryRunner object, this method returns a list of all the items that 
+ * match the query criteria.
+ *
+ * @scope    public instance method
+ * @param    queryRunner    A QueryRunner object. 
+ * @return   A list of items.
+ */
+orp.archive.StubArchive.prototype.getResultItemsForQueryRunner = function(queryRunner) {
+  var matchingAttribute = queryRunner.getMatchingAttribute();
+  var listOfMatchingValues = queryRunner.getMatchingValues();
+  var listOfQueryResultItems = [];
+  var key;
+  
+  if (!matchingAttribute || !listOfMatchingValues) {
+    return listOfQueryResultItems;
+  }
+    
+  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+  if (matchingAttribute == attributeCalledCategory) {
+    // If this is a query for all the item in a category,
+    // then handle that as a special case, because we can
+    // do that way faster than more general queries.
+    var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
+    for (key in listOfMatchingValues) {
+      var category = listOfMatchingValues[key];
+      var listOfEntriesForItemsInCategory = category.getEntriesForAttribute(attributeCalledItemsInCategory);
+      for (var innerKey in listOfEntriesForItemsInCategory) {
+        var entry = listOfEntriesForItemsInCategory[innerKey];
+        var itemInCategory = entry.getValue(category);
+        orp.util.addObjectToSet(itemInCategory, listOfQueryResultItems);
+      }
+    }
+  } else {
+    // General case code for any sort of query. 
+    for (var uuid in this._hashTableOfItemsKeyedByUuid) {
+      var item = this._hashTableOfItemsKeyedByUuid[uuid];
+      var includeItem = queryRunner.doesItemMatch(item);
+      if (includeItem) {
+        listOfQueryResultItems.push(item);
+      }
+    }
+  }
+  listOfQueryResultItems.sort(orp.model.ContentRecord.compareOrdinals);
+  return listOfQueryResultItems; 
+};
+
+
+/**
+ * Given an item and a query item, this method modifies the attributes 
+ * of the item so that when the query is next evaluated the item will be 
+ * included in query result list.
+ *
+ * @scope    public instance method
+ * @param    item    An item, which will be modified so that it matches the query. 
+ * @param    query    A query item. 
+ */
+orp.archive.StubArchive.prototype.setItemToBeIncludedInQueryResultList = function(item, query) {
+  orp.lang.assert(item instanceof orp.model.Item);
+  orp.lang.assert(query instanceof orp.model.Item);
+  
+  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
+  var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
+  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
+  var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
+  
+  var listOfMatchingEntries = query.getEntriesForAttribute(attributeCalledQueryMatchingValue);
+  var listOfMatchingAttrs = query.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
+  if (!(listOfMatchingEntries && (listOfMatchingEntries.length > 0))) {return;} // query not fully formed, so nothing to add
+  var matchingAttribute;
+  if (listOfMatchingAttrs.length === 0) {
+    // by default matching attribute is category
+    matchingAttribute = attributeCalledCategory;
+  }
+  else {
+    orp.lang.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    matchingAttribute = listOfMatchingAttrs[0].getValue();
+  }
+
+  for (var key in listOfMatchingEntries) {
+    var matchingEntry = listOfMatchingEntries[key];
+    var match = matchingEntry.getValue();
+    if (!item.hasAttributeValue(matchingAttribute, match)) {
+      if ((matchingAttribute == attributeCalledCategory) && (match instanceof orp.model.Item) && (match.isInCategory(categoryCalledCategory))) {
+        item.assignToCategory(match);
+      } else {
+        // item.addEntryForAttribute(matchingAttribute, match);
+        item.addEntry({attribute:matchingAttribute, value:match});
+      }
+    }
+  }
+};
+
+
+/**
+ * Given a category, this method returns a list of all the items that have been 
+ * assigned to that category.
+ *
+ * @scope    public instance method
+ * @param    inCategory    A category item. 
+ * @return   A list of items.
+ */
+orp.archive.StubArchive.prototype.getItemsInCategory = function(category) {
+  orp.lang.assert(category instanceof orp.model.Item);
+
+  var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
+  var listOfEntries = category.getEntriesForAttribute(attributeCalledItemsInCategory);
+  var listOfItems = [];
+  for (var key in listOfEntries) {
+    var entry = listOfEntries[key];
+    var item = entry.getValue(category);
+    listOfItems.push(item);
+  }
+  listOfItems.sort(orp.model.ContentRecord.compareOrdinals);
+  return listOfItems; 
+};
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Throws an Error if there is no user currently logged in.
+ *
+ * @scope    private instance method
+ * @throws   Throws an Error if no user is logged in.
+ */
+orp.archive.StubArchive.prototype._throwErrorIfNoUserIsLoggedIn = function() {
+  if (!this._currentUser) {
+    var error = new Error("No user is logged in.  You can't write to the repository when nobody is logged in.");
+    throw error;
+  }
+};
+
+
+/**
+ * Given a UUID, returns the item or entry identified by that UUID.
+ *
+ * @scope    private instance method
+ * @param    uuid    The UUID of the item or entry to be returned. 
+ * @return   The item or entry identified by the given UUID.
+ */
+orp.archive.StubArchive.prototype._getContentRecordFromUuid = function(uuid) {
+  var item = this.getItemFromUuid(uuid);
+  if (item) {
+    return item;
+  } else {
+    return this._hashTableOfEntriesKeyedByUuid[uuid];
+  }
+};
+
+
+/**
+ * Returns a newly created UUID.
+ *
+ * @scope    private instance method
+ * @param    node    The node value that the new UUID should have. 
+ */
+orp.archive.StubArchive.prototype._generateUuid = function(node) {
+  if (node) {
+    return new orp.util.TimeBasedUuid({'node': node});
+  } else {
+    return new orp.util.TimeBasedUuid();
+  }
+};
+
+
+/**
+ * Creates a brand new UUID to allocate to an item or entry.
+ *
+ * @scope    private instance method
+ * @return   A newly created UUID.
+ */
+orp.archive.StubArchive.prototype._getNewUuid = function() {
+  var newUuid;
+  if (this._currentUser) {
+    var uuidOfCurrentUser = this._currentUser.getUuid();
+    var nodeForCurrentUser = uuidOfCurrentUser.getNode(); // "0123456789AB";
+    newUuid = this._generateUuid(nodeForCurrentUser);
+  } else {
+    newUuid = this._generateUuid();
+  }
+  return newUuid;
+};
+
+
+/**
+ * Given an item representing a user, return the authentication info
+ * associated with that user.
+ *
+ * @scope    private instance method
+ * @param    user    An item representing a user. 
+ * @return   The authentication info for the user.
+ */
+orp.archive.StubArchive.prototype._getAuthenticationInfoForUser = function(user) {
+  return this._hashTableOfUserAuthenticationInfo[user.getUuid()];
+};
+
+
+/**
+ * Given a UUID, either (a) returns the existing item identified by that UUID, 
+ * or (b) creates an new item object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    uuid    The UUID of the item to be returned. 
+ * @return   The item identified by the given UUID.
+ */
+orp.archive.StubArchive.prototype._getItemFromUuidOrCreateNewItem = function(uuid) {
+  var item = this.getItemFromUuid(uuid);
+  if (!item) {
+    item = new orp.model.Item(this._world, uuid);
+    item._initialize();
+    this._hashTableOfItemsKeyedByUuid[uuid] = item;
+    this._currentTransaction.addRecord(item);
+  }
+  return item;
+};
+
+
+/**
+ * Creates the basic items that needed in order to do anything else, 
+ * like the items for "name", "attribute", and "category".
+ *
+ * @scope    private instance method
+ */
+orp.archive.StubArchive.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
+  // var fileContentString = orp.util.getStringContentsOfFileAtURL(url);
+  var fileContentString = dojo.hostenv.getText(url);
+  // orp.util.assert(orp.util.isString(fileContentString));
+  orp.lang.assertType(fileContentString, String);
+  fileContentString += " ] }";
+
+  var dehydratedRecords = null;
+  eval("dehydratedRecords = " + fileContentString + ";");
+  // orp.util.assert(orp.util.isObject(dehydratedRecords));
+  orp.lang.assertType(dehydratedRecords, Object);
+  var recordFormat = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.FORMAT];
+  orp.lang.assert(recordFormat == orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
+  var listOfRecords = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.RECORDS];
+  // orp.util.assert(orp.util.isArray(listOfRecords));
+  orp.lang.assertType(listOfRecords, Array);
+  
+  this._rehydrateRecords(listOfRecords);
+};
+
+
+/**
+ * Given a UUID, either (a) returns the existing item identified by that UUID, 
+ * or (b) creates an new item object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    inUuid    The UUID of the item to be returned. 
+ * @return   The item identified by the given UUID.
+ */
+orp.archive.StubArchive.prototype._getItemFromUuidOrBootstrapItem = function(uuid) {
+  var item = this.getItemFromUuid(uuid);
+  if (!item) {
+    item = new orp.model.Item(this.getWorld(), uuid);
+    this._hashTableOfItemsKeyedByUuid[uuid] = item;
+  }
+  return item;
+};
+
+/**
+ * Given a UUID, returns the existing entry identified by that UUID. 
+ * 
+ * @scope    private instance method
+ * @param    uuid    The UUID of the entry to be returned. 
+ * @return   The entry identified by the given UUID.
+ */
+orp.archive.StubArchive.prototype._getEntryFromUuid = function(uuid) {
+  return this._hashTableOfEntriesKeyedByUuid[uuid];
+};
+
+/**
+ * Given a UUID, either (a) returns the existing entry identified by that UUID, 
+ * or (b) creates an new entry object, set its UUID, and returns that object.
+ *
+ * @scope    private instance method
+ * @param    uuid    The UUID of the entry to be returned. 
+ * @return   The entry identified by the given UUID.
+ */
+orp.archive.StubArchive.prototype._getEntryFromUuidOrBootstrapEntry = function(uuid) {
+  var entry = this._hashTableOfEntriesKeyedByUuid[uuid];
+  if (!entry) {
+    entry = new orp.model.Entry(this.getWorld(), uuid);
+    this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
+  }
+  return entry;
+};
+
+
+/**
+ * Given a dehydrated list of records, rehydrates each of the records.
+ *
+ * @scope    private instance method
+ * @param    listOfDehydratedRecords    A list of dehydrated records. 
+ */
+orp.archive.StubArchive.prototype._rehydrateRecords = function(listOfDehydratedRecords) {
+  var key;
+  var itemUuid;
+  var item;
+  var contentRecordUuid;
+  var contentRecord;
+  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
+
+  for (key in listOfDehydratedRecords) {
+    var dehydratedRecord = listOfDehydratedRecords[key];
+
+    var dehydratedTransaction = dehydratedRecord[JSON_MEMBER.TRANSACTION_CLASS];
+    if (dehydratedTransaction) {
+      var listOfRecordsInTransaction = dehydratedTransaction;
+      this._rehydrateRecords(listOfRecordsInTransaction);
+    } else {
+      var dehydratedItem = dehydratedRecord[JSON_MEMBER.ITEM_CLASS];
+      var dehydratedUser = dehydratedRecord[JSON_MEMBER.USER_CLASS];
+      var dehydratedVote = dehydratedRecord[JSON_MEMBER.VOTE_CLASS];
+      var dehydratedOrdinal = dehydratedRecord[JSON_MEMBER.ORDINAL_CLASS];
+      var dehydratedEntry = dehydratedRecord[JSON_MEMBER.ENTRY_CLASS];
+        
+      if (dehydratedItem) {
+        itemUuid = dehydratedItem[JSON_MEMBER.UUID];
+        item = this._getItemFromUuidOrBootstrapItem(itemUuid);
+        this._chronologicalListOfRecords.push(item);
+      }
+      
+      if (dehydratedUser) {
+        var userUuid = dehydratedUser[JSON_MEMBER.USER];
+        var userPasswordHash = dehydratedUser[JSON_MEMBER.PASSWORD];
+        var user = this._getItemFromUuidOrBootstrapItem(userUuid);
+        this._listOfUsers.push(user);
+        this._hashTableOfUserAuthenticationInfo[user.getUuid()] = userPasswordHash;
+      }
+      
+      if (dehydratedVote) {
+        var voteUuid = dehydratedVote[JSON_MEMBER.UUID];
+        var retainFlagString = dehydratedVote[JSON_MEMBER.RETAIN_FLAG];
+        var retainFlag = null;
+        if (retainFlagString == "true") {
+          retainFlag = true;
+        }
+        if (retainFlagString == "false") {
+          retainFlag = false;
+        }
+        orp.lang.assert(retainFlag !== null);
+        contentRecordUuid = dehydratedVote[JSON_MEMBER.RECORD];
+        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
+        var vote = new orp.model.Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
+        this._chronologicalListOfRecords.push(vote);
+      }
+      
+      if (dehydratedOrdinal) {
+        var ordinalUuid = dehydratedOrdinal[JSON_MEMBER.UUID];
+        var ordinalNumber = dehydratedOrdinal[JSON_MEMBER.ORDINAL_NUMBER];
+        contentRecordUuid = dehydratedOrdinal[JSON_MEMBER.RECORD];
+        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
+        var ordinal = new orp.model.Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
+        this._chronologicalListOfRecords.push(ordinal);
+      }
+      
+      if (dehydratedEntry) {
+        var entryUuid = dehydratedEntry[JSON_MEMBER.UUID];
+        var entry = this._getEntryFromUuidOrBootstrapEntry(entryUuid);
+        var previousEntryUuid = dehydratedEntry[JSON_MEMBER.PREVIOUS_VALUE];
+        var previousEntry = null;
+        if (previousEntryUuid) {
+          previousEntry = this._getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
+        }
+ 
+        var dataTypeUuid = dehydratedEntry[JSON_MEMBER.TYPE];
+        var dataType = this._getItemFromUuidOrBootstrapItem(dataTypeUuid);
+        
+        if (dataTypeUuid == orp.model.World.UUID.TYPE_CONNECTION) {
+          var listOfItemUuids = dehydratedEntry[JSON_MEMBER.ITEM];
+          var firstItemUuid = listOfItemUuids[0];
+          var secondItemUuid = listOfItemUuids[1];
+          var firstItem = this._getItemFromUuidOrBootstrapItem(firstItemUuid);
+          var secondItem = this._getItemFromUuidOrBootstrapItem(secondItemUuid);
+
+          var listOfAttributeUuids = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
+          var firstAttributeUuid = listOfAttributeUuids[0];
+          var secondAttributeUuid = listOfAttributeUuids[1];
+          var firstAttribute = this._getItemFromUuidOrBootstrapItem(firstAttributeUuid);
+          var secondAttribute = this._getItemFromUuidOrBootstrapItem(secondAttributeUuid);
+          
+          var pairOfItems = [firstItem, secondItem];
+          var pairOfAttributes = [firstAttribute, secondAttribute];
+          entry._rehydrate(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
+        } else {
+          itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
+          item = this._getItemFromUuidOrBootstrapItem(itemUuid);
+          var attributeUuid = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
+          var attribute = null;
+          if (attributeUuid) {
+            attribute = this._getItemFromUuidOrBootstrapItem(attributeUuid);
+          } else {
+            orp.lang.assert(false); // the attributeUuid should always be there
+          }
+          var rawData = dehydratedEntry[JSON_MEMBER.VALUE];
+          var finalData = null;
+          switch (dataTypeUuid) {
+            case orp.model.World.UUID.TYPE_ITEM:
+              finalData = this._getItemFromUuidOrBootstrapItem(rawData);
+              break;
+            case orp.model.World.UUID.TYPE_TEXT:
+              finalData = this.decodeText(rawData);
+              break;
+            case orp.model.World.UUID.TYPE_NUMBER:
+              finalData = parseFloat(rawData);
+              break;
+            case orp.model.World.UUID.TYPE_DATE:
+              finalData = new orp.util.DateValue(rawData);
+              // if (!finalData.isValid()) {
+              //   alert(rawData + " " + finalData);
+              // }
+              orp.lang.assert(finalData.isValid());
+              break;
+            default:
+              orp.lang.assert(false, 'Unknown data type while _rehydrating()');
+          }
+          entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
+        }
+        this._chronologicalListOfRecords.push(entry);
+      }
+      
+    }
+  }
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Deleted: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/source/model/DeltaVirtualServer.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -1,498 +0,0 @@
-/*****************************************************************************
- DeltaVirtualServer.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.model.DeltaVirtualServer");
-dojo.require("orp.model.StubVirtualServer");
-dojo.require("orp.model.World");
-dojo.require("orp.model.Vote");
-dojo.require("orp.model.FileSaver");
-dojo.require("orp.model.HttpSaver");
-dojo.require("orp.lang.Lang");
-
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-// 
-/*global window */
-/*global XMLHttpRequest, ActiveXObject  */
-/*global Util, DateValue  */
-/*global World, Item, Entry, Ordinal, Vote  */
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-/**
- * The DeltaVirtualServer is a datastore that loads and saves
- * an entire World of items as a single monolithic JSON string.
- *
- * @scope    public instance constructor
- * @param    inJsonRepositoryString    A JSON string literal representing the world of items. 
- */
-orp.model.DeltaVirtualServer = function(repositoryName, pathToTrunkDirectory, optionalDefaultOverrides) {
-  orp.model.StubVirtualServer.call(this, pathToTrunkDirectory, optionalDefaultOverrides);
-  this._repositoryName = repositoryName;
-  this._pathToTrunkDirectory = "";
-  if (pathToTrunkDirectory) {
-    this._pathToTrunkDirectory = pathToTrunkDirectory;
-  }
-  this._hasEverFailedToSaveFlag = false;
-};
-
-dj_inherits(orp.model.DeltaVirtualServer, orp.model.StubVirtualServer);  // makes DeltaVirtualServer be a subclass of StubVirtualServer
-
-
-// -------------------------------------------------------------------
-// Public constants
-// -------------------------------------------------------------------
-orp.model.DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY = "repositories";
-
-
-// -------------------------------------------------------------------
-// Public methods
-// -------------------------------------------------------------------
-
-/**
- * Initializes the instance variables for a newly created DeltaVirtualServer,
- * and does the initial loading of at least the axiomatic items.
- *
- * @scope    public instance method
- * @param    world    The world that we provide data for. 
- */
-orp.model.DeltaVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function(world) {
-  this._initialize(world);
-  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
-
-  var repositoryFileName = this._repositoryName + ".json";
-  var repositoryUrl = "";
-  if (this._needCompletePath) {
-    repositoryUrl = this._completePathToTrunkDirectory + '/';
-  }
-  repositoryUrl += orp.model.DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY + "/" + repositoryFileName;
-  // var repositoryContentString = orp.util.getStringContentsOfFileAtURL(repositoryUrl);
-  var repositoryContentString = dojo.hostenv.getText(repositoryUrl);
-  repositoryContentString += " ] }";
-
-  this._loadWorldFromJsonString(repositoryContentString);
-};
-
-
-// -------------------------------------------------------------------
-// Private Methods
-// -------------------------------------------------------------------
-
-/**
- * Loads a world of items from a dehydrated JSON string.
- *
- * Given a world of items in JSON format, bootstraps new 
- * instances of items corresponding to the dehydrated data.
- * 
- * @scope    private instance method
- * @param    jsonRepositoryString    A JSON string literal representing the world of items. 
- */
-orp.model.DeltaVirtualServer.prototype._loadWorldFromJsonString = function(jsonRepositoryString) {
-
-  // load the list of records
-  orp.lang.assertType(jsonRepositoryString, String);
-  var dehydratedRecords = null;
-  eval("dehydratedRecords = " + jsonRepositoryString + ";");
-  orp.lang.assertType(dehydratedRecords, Object);
-  var recordFormat = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.FORMAT];
-  orp.lang.assert(recordFormat == orp.model.StubVirtualServer.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
-  var listOfRecords = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.RECORDS];
-  orp.lang.assertType(listOfRecords, Array);
-  
-  var listOfUsers = null;
-  
-  this._rehydrateRecords(listOfRecords);
-};
-
-
-/**
- * Given a string, returns a copy of the string that is less than
- * 80 characters long.
- *
- * @scope    private instance method
- * @param    string    A string that may need truncating.
- * @return   A string that is no longer than 80 characters long.
- */
-orp.model.DeltaVirtualServer.prototype._truncateString = function(string) {
-  var maxLength = 80;
-  var ellipsis = "...";
-  var returnString = "";
-  if (string.length > maxLength) {
-    returnString = (string.substring(0, (maxLength - ellipsis.length)) + ellipsis);
-  } else {
-    returnString = string;
-  }
-  return this.encodeText(returnString);
-};
-
-
-/**
- * Returns a big string, containing JavaScript "object literal"
- * representations of all of the records in a Transaction.
- *
- * @scope    private instance method
- * @param    transaction    A transaction object.
- * @return   A JSON string literal, representing the records in the transaction. 
- */
-orp.model.DeltaVirtualServer.prototype._getJsonStringRepresentingTransaction = function(transaction) {
-  var indent = "  ";
-  var listOfRecords = transaction.getRecords();
-  if (!listOfRecords || listOfRecords.length === 0) {
-    return "";
-  }
-  
-  if (listOfRecords.length == 1) {
-    return this._getJsonStringRepresentingRecords(listOfRecords, indent);
-  } else {
-    indent = "    ";
-    var listOfStrings = [];
-    listOfStrings.push("  // =======================================================================\n");
-    listOfStrings.push('  { "' + orp.model.StubVirtualServer.JSON_MEMBER.TRANSACTION_CLASS + '": [\n');
-    var content = this._getJsonStringRepresentingRecords(transaction.getRecords(), indent);
-    listOfStrings.push(content);
-    listOfStrings.push('  ]\n');
-    listOfStrings.push('  }');
-    
-    var finalString = listOfStrings.join("");
-    return finalString;
-  }
-};
-
-
-/**
- *
- */
-orp.model.DeltaVirtualServer.prototype._getTypedDisplayStringForItem = function(item) {
-  var returnString = "(";
-  if (item) {
-    if (item instanceof orp.model.Item) {
-      var category = item.getFirstCategory();
-      if (category) {
-        returnString += this._truncateString(category.getDisplayString("???")) + ": ";
-      }
-      returnString += this._truncateString(item.getDisplayString("???"));
-    }
-    if (item instanceof orp.model.Entry) {
-      returnString += "Entry";
-    }
-  }
-  returnString += ")";
-  return returnString;
-};
-
-  
-/**
- * Returns a big string, containing JavaScript "object literal"
- * representations of the records.
- *
- * @scope    private instance method
- * @param    listOfRecords    A list of the records to include in the JSON string.
- * @param    indent    Optional. A string of spaces to prepend to each line.
- * @return   A JSON string literal, representing the records. 
- */
-orp.model.DeltaVirtualServer.prototype._getJsonStringRepresentingRecords = function(listOfRecords, indent) {
-  indent = indent || "";
-  var i;
-  var listOfStrings = [];
-  var firstContentRecord = true;
-  var itemDisplayNameSubstring;
-  var entryDisplayNameSubstring;
-  var listOfUsers = null;
-  var commentString;
-  var generateComments = false;
-  var JSON_MEMBER = orp.model.StubVirtualServer.JSON_MEMBER;
-
-  if (!generateComments) {
-    indent = "";
-  }
-  
-  for (i in listOfRecords) {
-    var record = listOfRecords[i];
-    if (firstContentRecord) {
-      firstContentRecord = false;
-    } else {
-      listOfStrings.push(',\n');
-    }
-    if (generateComments) {
-      listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
-    }
-    
-    if (record instanceof orp.model.Item) {
-      var item = record;
-      if (generateComments) {
-        listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(item) + '\n');
-        listOfStrings.push(indent + '//           by (' + this._truncateString(item.getUserstamp().getDisplayString()) + ')');
-        listOfStrings.push(' on (' + orp.util.DateValue.getStringMonthDayYear(item.getCreationDate()) + ')\n');
-      }
-      if (!this._jsonFragmentForItemPrefix) {
-        this._jsonFragmentForItemPrefix = indent + '{ "' + JSON_MEMBER.ITEM_CLASS + '": ';
-        this._jsonFragmentForItemPrefix += '{ "' + JSON_MEMBER.UUID + '": ';
-      }
-      listOfStrings.push(this._jsonFragmentForItemPrefix);
-      listOfStrings.push(item._getUuidInQuotes());
-      listOfStrings.push(' } }');
-      
-      if (!listOfUsers) {
-        listOfUsers = this.getUsers();
-      }
-      if (orp.util.isObjectInSet(item, listOfUsers)) {
-        var user = item;
-        var password = this._hashTableOfUserAuthenticationInfo[user.getUuid()];
-        var passwordString = "null";
-        if (password) {
-          passwordString = '"' + password + '"';
-        }
-        listOfStrings.push(',\n');
-        if (generateComments) {
-          listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
-          listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(user) + '\n');
-        }
-        listOfStrings.push(indent + '{ "' + JSON_MEMBER.USER_CLASS + '": ' + '{\n');
-        listOfStrings.push(indent + '         "' + JSON_MEMBER.USER + '": ' + user._getUuidInQuotes() + ',\n');
-        listOfStrings.push(indent + '     "' + JSON_MEMBER.PASSWORD + '": ' + passwordString + ' }\n');
-        listOfStrings.push(indent + '}');
-      }
-    }
-
-    if (record instanceof orp.model.Vote) {
-      var vote = record;
-      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(vote.getContentRecord());
-      var deleteVsRetainString = vote.getRetainFlag() ? "RETAIN" : "DELETE";
-      if (generateComments) {
-        listOfStrings.push(indent + '// vote to ' + deleteVsRetainString + " " + entryDisplayNameSubstring + '\n');
-      }
-      listOfStrings.push(indent + '{ "' + JSON_MEMBER.VOTE_CLASS + '": ' + '{\n');
-      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + vote._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + vote.getContentRecord()._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '   "' + JSON_MEMBER.RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
-      listOfStrings.push('  }\n');
-      listOfStrings.push(indent + '}');
-    }
-
-    if (record instanceof orp.model.Ordinal) {
-      var ordinal = record;
-      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(ordinal.getContentRecord());
-      if (generateComments) {
-        listOfStrings.push(indent + '// ordinal # ' + ordinal.getOrdinalNumber() + " for " + entryDisplayNameSubstring + '\n');
-      }
-      listOfStrings.push(indent + '{ "' + JSON_MEMBER.ORDINAL_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + ordinal._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + ordinal.getContentRecord()._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '        "' + JSON_MEMBER.ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
-      listOfStrings.push('  }\n');
-      listOfStrings.push(indent + '}');
-    }
-
-    if (record instanceof orp.model.Entry) {
-      var entry = record;
-      var entryType = entry.getType();
-      var typeUuid = entryType.getUuid();
-      // var entryString = "";
-      if (generateComments) {
-        listOfStringsForEntry = [];
-      } else {
-        listOfStringsForEntry = listOfStrings;
-      }
-      listOfStringsForEntry.push(indent + '{ "' + JSON_MEMBER.ENTRY_CLASS + '": ' + '{\n');
-      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + entry._getUuidInQuotes() + ',\n');
-      var previousEntry = entry.getPreviousEntry();
-      if (previousEntry) {
-        listOfStringsForEntry.push(indent + '"' + JSON_MEMBER.PREVIOUS_VALUE + '": ' + previousEntry._getUuidInQuotes() + ',\n');
-      }
-      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.TYPE + '": "' + typeUuid.toString() + '",\n');
-      if (generateComments) {
-        commentString = "";
-      }
-      if (typeUuid.toString() == orp.model.World.UUID.TYPE_CONNECTION) {
-        var pairOfItems = entry.getItem();
-        var firstItem = pairOfItems[0];
-        var secondItem = pairOfItems[1];
-        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": [' + firstItem._getUuidInQuotes() + ', ' + secondItem._getUuidInQuotes() + '],\n');
-        var pairOfAttributes = entry.getAttribute();
-        var firstAttribute = pairOfAttributes[0];
-        var secondAttribute = pairOfAttributes[1];
-        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": [' + firstAttribute._getUuidInQuotes() + ', ' + secondAttribute._getUuidInQuotes() + ']');
-        if (generateComments) {
-          commentString += indent + '// ' + this._getTypedDisplayStringForItem(firstItem);
-          commentString += ".(" + this._truncateString(firstAttribute.getDisplayString("???")) + ")";
-          commentString += " = " + this._getTypedDisplayStringForItem(secondItem) + "\n";
-          commentString += indent + '// ' + this._getTypedDisplayStringForItem(secondItem);
-          commentString += ".(" + this._truncateString(secondAttribute.getDisplayString("???")) + ")";
-          commentString += " = " + this._getTypedDisplayStringForItem(firstItem) + "\n";
-        }
-      } else {
-        var attribute = entry.getAttribute();
-        // if (!(attribute instanceof orp.model.Item)) {
-        //   alert(entry + "\n" + attribute);
-        // }
-        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": ' + attribute._getUuidInQuotes() + ',\n');
-        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": ' + entry.getItem()._getUuidInQuotes() + ',\n');
-        var contentData = entry.getValue();
-        
-        var valueString = null;
-        var valueComment = null;
-        switch (typeUuid.toString()) {
-          case orp.model.World.UUID.TYPE_NUMBER: 
-            valueString = '"' + contentData + '"';
-            if (generateComments) {valueComment = contentData;}
-            break;
-          case orp.model.World.UUID.TYPE_TEXT: 
-            valueString = '"' + this.encodeText(contentData) + '"';
-            if (generateComments) {valueComment = '"' + this._truncateString(contentData) + '"';}
-            break;
-          case orp.model.World.UUID.TYPE_DATE: 
-            valueString = '"' + contentData.toString() + '"';
-            if (generateComments) {valueComment = valueString;}
-            break;
-          case orp.model.World.UUID.TYPE_ITEM: 
-            valueString = contentData._getUuidInQuotes();
-            if (generateComments) {valueComment = this._getTypedDisplayStringForItem(contentData);}
-            break;
-          default:
-            orp.lang.assert(false, "no such type: " + entryType.getDisplayString());
-        }
-        listOfStringsForEntry.push(indent + '        "' + JSON_MEMBER.VALUE + '": ' + valueString);
-        if (generateComments) {
-          commentString += indent + '// ' + this._getTypedDisplayStringForItem(entry.getItem());
-          commentString += ".(" + this._truncateString(attribute.getDisplayString("???")) + ")";
-          commentString += " = " + valueComment + "\n";
-        }
-      }
-      if (generateComments) {
-        commentString += indent + '//           by (' + this._truncateString(entry.getUserstamp().getDisplayString()) + ')';
-        commentString += ' on (' + orp.util.DateValue.getStringMonthDayYear(entry.getCreationDate()) + ')\n';
-        listOfStrings.push(commentString);
-        for (var j in listOfStringsForEntry) {
-          listOfStrings.push(listOfStringsForEntry[j]);
-        }
-      }
-      // listOfStrings.push(entryString);
-      listOfStrings.push('  }\n');
-      listOfStrings.push(indent + '}');
-    }
-  }
-  
-  var finalString = listOfStrings.join("");
-  return finalString;
-};
-
-
-/**
- * @scope    private instance method
- * @param    overwriteIfExists    Optional
- * @return   success
- */
-orp.model.DeltaVirtualServer.prototype._createNewRepository = function(overwriteIfExists) {
-  if (this._saverObject) {
-    alert("this._saverObject is already initialized.");
-    return false;
-  }
-  if (window.location) {
-    if (window.location.protocol == "http:") {
-      this._saverObject = new orp.model.HttpSaver(this._repositoryName, this._pathToTrunkDirectory);
-    }
-    if (window.location.protocol == "file:") {
-      this._saverObject = new orp.model.FileSaver(this._repositoryName, this._pathToTrunkDirectory);
-    }
-  }
-  if (!this._saverObject) {
-    if (!this._hasEverFailedToSaveFlag) {
-      window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
-      this._hasEverFailedToSaveFlag = true;
-    }
-    return false;
-  }
-  var text = '{ "format": "' + orp.model.StubVirtualServer.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST + '", \n';
-  text +=    '  "records": [\n';
-  text +=    '  // =======================================================================\n';
-  text +=    '  { "Transaction": [ ]\n';
-  text +=    '  }';
-  return this._saverObject.writeText(text, overwriteIfExists);
-};
-
-
-/**
- * Sends all the changes to the server, so that the server can record the
- * changes.
- *
- * @scope    private instance method
- * @param    forceSave    Optional. Forces a save if set to true. 
- * @return   The list of changes made. 
- */
-orp.model.DeltaVirtualServer.prototype._saveChangesToServer = function(forceSave) {
-  var currentTransaction = this.getCurrentTransaction();
-  var listOfChangesMade = currentTransaction.getRecords();
-  if (!forceSave && listOfChangesMade.length === 0) {
-    return listOfChangesMade;
-  }
-  
-  if (!this._saverObject) {
-    if (window.location) {
-      if (window.location.protocol == "http:") {
-        this._saverObject = new orp.model.HttpSaver(this._repositoryName, this._pathToTrunkDirectory);
-      }
-      if (window.location.protocol == "file:") {
-        this._saverObject = new orp.model.FileSaver(this._repositoryName, this._pathToTrunkDirectory);
-      }
-    }
-  }
-  
-  var key;
-  var newRecord;
-  for (key in listOfChangesMade) {
-    newRecord = listOfChangesMade[key];
-    this._chronologicalListOfRecords.push(newRecord);
-  }
-
-  if (this._saverObject) {
-    var textToAppend = ",\n" + this._getJsonStringRepresentingTransaction(currentTransaction);
-    this._saverObject.appendText(textToAppend);
-  } else {
-    if (!this._hasEverFailedToSaveFlag) {
-      window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
-      this._hasEverFailedToSaveFlag = true;
-    }
-  }
-  
-  this._currentTransaction = null;
-  return listOfChangesMade;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/model/FileSaver.js
===================================================================
--- trunk/source/model/FileSaver.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/source/model/FileSaver.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -1,289 +0,0 @@
-/*****************************************************************************
- FileSaver.js
- 
-******************************************************************************
- The code in this file is a heavily modified version of code that was copied
- from the TiddlyWiki and GTDTiddlyWiki code base.
- 
- The original code is Copyright (c) Osmosoft Limited.  The original copyright 
- notice is included below, along with the license conditions and disclaimer.  
- 
- OpenRecord modifications by Brian Douglas Skinner <brian.skinner at gumption.org>
-
- For the OpenRecord modifications, the Copyright rights are relinquished under  
- the Creative Commons Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-
-******************************************************************************
-TiddlyWiki 1.2.6 by Jeremy Ruston, (jeremy [at] osmosoft [dot] com)
-Incorporating improvements by Isao Sonobe, http://www-gauge.scphys.kyoto-u.ac.jp/~sonobe/OgreKit/OgreKitWiki.html
-GTDTiddlyWiki modification by Nathan Bowers, (wiki [at] snapgrid [dot] com)
-Safari Compatability by Jonathan Paisley at http://www.dcs.gla.ac.uk/~jp/
-
-Copyright (c) Osmosoft Limited, 14 April 2005
-
-All rights reserved.
-
-Redistribution and use in source and binary forms, with or without modification,
-are permitted provided that the following conditions are met:
-
-Redistributions of source code must retain the above copyright notice, this
-list of conditions and the following disclaimer.
-
-Redistributions in binary form must reproduce the above copyright notice, this
-list of conditions and the following disclaimer in the documentation and/or other
-materials provided with the distribution.
-
-Neither the name of the Osmosoft Limited nor the names of its contributors may be
-used to endorse or promote products derived from this software without specific
-prior written permission.
-
-THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
-EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
-OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
-SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
-INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
-TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
-BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
-CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
-ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
-DAMAGE.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.model.FileSaver");
-dojo.require("orp.model.DeltaVirtualServer");
-dojo.require("orp.lang.Lang");
-
-/**
- * The FileSaver class knows how to save text to a local file.
- *
- * @param    repositoryName                 // e.g. demo_page
- * @param    pathToTrunkDirectory           // Not needed if window.location.pathname is in the trunk directory.
- * @scope    public instance constructor
- */
-orp.model.FileSaver = function(repositoryName, pathToTrunkDirectory) {
-  this._repositoryName = repositoryName;
-  
-  // Step 1: Build the fileUrl
-  // 
-  // Our saveTextToFile() method needs a fileUrl that looks like this:
-  //   fileUrl = "K:\\www\\htdocs\\openrecord\\demo\\current\\trunk\\repositories\\demo_page.json";
-  // 
-  // We start with a value in this._repositoryName that looks like this:
-  //   this._repositoryName == "demo_page"
-
-  // URLs like these don't work:
-  //   fileUrl = "repositories/demo_page.json";
-  //   fileUrl = "repositories\\demo_page.json";
-  //   fileUrl = "\\repositories\\demo_page.json";
-  //   fileUrl = "K:/www/htdocs/openrecord/demo/current/trunk/repositories/demo_page.json";
-
-  var listOfAdditions = [];
-  if (pathToTrunkDirectory && pathToTrunkDirectory !== "") {
-    listOfAdditions.push(pathToTrunkDirectory);
-  }
-  listOfAdditions.push(orp.model.DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY);
-  listOfAdditions.push(this._repositoryName + ".json");
-  this._fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
-};
-
-
-/**
- * Appends text to a file.
- *
- * @scope    public instance method
- */
-orp.model.FileSaver.prototype.appendText = function(textToAppend) {
-  var append = true;
-  this._saveTextToFile(textToAppend, this._fileUrl, append);
-};
-
-orp.model.FileSaver.prototype.writeText = function(textToWrite, overwriteIfExists) {
-  var append = false;
-  this._saveTextToFile(textToWrite, this._fileUrl, append);
-};
-
-/**
- * Save the text to the file at the given URL.
- *
- * @scope    private instance method
- * @return   Returns true if the text was saved.
- */
-orp.model.FileSaver.prototype._saveTextToFile = function(text, fileUrl, append) {
-  // Make sure we were loaded from a "file:" URL
-  if (window.location.protocol != "file:") {
-    orp.lang.assert(false, 'FileSaver.js can only be used for pages loaded from a "file:///" location');
-  }
-
-  var success = this._mozillaSaveToFile(text, fileUrl, append);
-  if (!success) {
-    success = this._ieSaveToFile(text, fileUrl, append);
-  }
-  return(success);
-};
-
-
-/**
- * Save the text to the file at the given filePath.
- *
- * @scope    private instance method
- * @return   Returns true if the text was saved, false if there was an error, or null if we couldn't even try.
- */
-orp.model.FileSaver.prototype._mozillaSaveToFile = function(text, filePath, append) {
-  if (window.Components) {
-    try {
-      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
-      var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
-      file.initWithPath(filePath);
-      if (!file.exists()) {
-        // Not all JavaScript implementations  support octal literals,
-        // so it's not safe to use '0664' here:
-        //   file.create(0, 0664);
-        //   file.permissions = 0664; // Because create ignores the permissions argument, at least on Mignon's Mac.
-        file.create(0, 0x1B4);
-        file.permissions = 0x1B4; // Because create ignores the permissions argument, at least on Mignon's Mac.
-      }
-      var outputStream = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
-      if (append) {
-        outputStream.init(file, 0x10 | 0x02, 0x0004, null);
-      } else {
-        outputStream.init(file, 0x20 | 0x02, 0x0004, null);
-      }
-      outputStream.write(text, text.length);
-      outputStream.flush();
-      outputStream.close();
-      return true;
-    }
-    catch(exception) {
-      alert("Exception while attempting to save\n\n" + exception);
-      return false;
-    }
-  } else {
-    alert("window.Components == null");
-  }
-  return null;
-};
-
-
-/**
- * Save the text to the file at the given filePath.
- *
- * @scope    private instance method
- * @return   Returns true if the text was saved, or false if there was an error.
- */
-orp.model.FileSaver.prototype._ieSaveToFile = function(text, filePath, append) {
-  try {
-    var fileSystemObject = new ActiveXObject("Scripting.FileSystemObject");
-  }
-  catch(exception) {
-    alert("Exception while attempting to save\n\n" + exception.toString());
-    return false;
-  }
-  if (append) {
-    orp.lang.assert(false, "PENDING: still need to write code for this");
-  } else {
-    var file = fileSystemObject.OpenTextFile(filePath, 2, -1, 0);
-  }
-  file.Write(text);
-  file.Close();
-  return true;
-};
-
-
-/**
- * This method looks at the URL value in the window.location property,
- * strips the filename off the end, appends any given path elements,
- * converts the whole thing to a format that is compatible with the 
- * local file system, and returns the new local path.
- *
- * @scope    private instance method
- * @return   Returns a full local pathname.
- */
-orp.model.FileSaver.prototype._getLocalPathFromWindowLocation = function(listOfAdditions) {
-  // Example location:
-  //   location.href     == file:///D:/amy/openrecord/foo.html#bar
-  //   location.protocol == file:
-  //   location.pathname ==        /D:/amy/openrecord/foo.html
-  //   location.hash     ==                                   #bar
-
-  // Get the URL of the document
-  var pathname = window.location.pathname;
-  
-  
-  // Step 1: Make the requested additions to the pathname
-  var arrayOfParts = pathname.split('/');
-  arrayOfParts.pop();  // get rid of the final "/foo.html" part
-  for (var i in listOfAdditions) {
-    var additionalPart = listOfAdditions[i];
-    arrayOfParts.push(additionalPart);
-  }
-  pathname = arrayOfParts.join('/');
-
-  
-  // Step 2: Figure out what type of URL we're working with
-  // Constants
-  var PathType = {
-    LOCAL_PC:        "LOCAL_PC",          // "file:///x:/path/path..." 
-    LOCAL_UNIX_MAC:  "LOCAL_UNIX_MAC",    // "file:///path/path..."
-    NETWORK_PC:      "NETWORK_PC",        // "file://server/share/path/path..."
-    NETWORK_FIREFOX: "NETWORK_FIREFOX" }; // "file://///server/share/path/path..."
-  // "file:///x:/path/path..."             == PathType.LOCAL_PC        --> "x:\path\path..."
-  // "file:///path/path..."                == PathType.LOCAL_UNIX_MAC  --> "/path/path..."
-  // "file://server/share/path/path..."    == PathType.NETWORK_PC      --> "\\server\share\path\path..."
-  // "file://///server/share/path/path..." == PathType.NETWORK_FIREFOX --> "\\server\share\path\path..."
-
-  var pathType = null;
-  if (pathname.charAt(2) == ":") {
-    pathType = PathType.LOCAL_PC;
-  } else if (pathname.indexOf("///") === 0) {
-    pathType = PathType.NETWORK_FIREFOX;
-  } else if (pathname.indexOf("/") === 0) {
-    pathType = PathType.LOCAL_UNIX_MAC;
-  } else {
-    pathType = PathType.NETWORK_PC;
-  }
-
-
-  // Step 3: Convert the URL to a file path
-  var localPath = pathname;
-  switch (pathType) {
-    case PathType.LOCAL_PC:
-      // example: "/x:/path/path..."
-      localPath = localPath.substring(1);  // get rid of initial '/'
-      localPath = unescape(localPath);
-      localPath = localPath.replace(new RegExp("/","g"),"\\");
-      // result: "x:\path\path..."
-      break;
-    case PathType.LOCAL_UNIX_MAC:         
-    // example: "/path/path..."
-      localPath = unescape(localPath);
-      // result: "/path/path..."
-      break;
-    case PathType.NETWORK_FIREFOX:
-      // example: "///server/share/path/path..."
-      localPath = localPath.substring(3);  // get rid of initial '///'
-      localPath = unescape(localPath);
-      localPath = localPath.replace(new RegExp("/","g"),"\\");
-      localPath = "\\\\" + localPath;      
-      // result: "\\server\share\path\path..."
-      break;
-    case PathType.NETWORK_PC:
-      // example: "server/share/path/path..."
-      localPath = unescape(localPath);
-      localPath = localPath.replace(new RegExp("/","g"),"\\");
-      localPath = "\\\\" + localPath;      
-      // result: "\\server\share\path\path..."
-      break;
-  }
-
-  return localPath;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/model/HttpSaver.js
===================================================================
--- trunk/source/model/HttpSaver.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/source/model/HttpSaver.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -1,140 +0,0 @@
-/*****************************************************************************
- HttpSaver.js
-  
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.model.HttpSaver");
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-/**
- * The HttpSaver class knows how to save content to a server by using
- * XMLHttpRequest to call a PHP script.
- *
- * @param    repositoryName                         // e.g. demo_page
- * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
- * @scope    public instance constructor
- */
-orp.model.HttpSaver = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
-  this._repositoryName = repositoryName;
-  var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
-  var arrayOfPathComponents = thisUrl.split('/');
-  arrayOfPathComponents.pop();
-  var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk or /openrecord/trunk/source/model
-  if (pathToTrunkDirectoryFromWindowLocation) {
-    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectoryFromWindowLocation;
-  } else {
-    this._completePathToTrunkDirectory = thisDirectory;
-  }
-};
-
-
-// -------------------------------------------------------------------
-// Public methods
-// -------------------------------------------------------------------
-
-/**
- */
-orp.model.HttpSaver.prototype.appendText = function(textToAppend) {
-  var url = this._completePathToTrunkDirectory;
-  url += "/source/model/append_to_repository_file.php?file=" + this._repositoryName;
-  
-  // PENDING: 
-  // It might be more efficient to re-use the XMLHttpRequestObject,
-  // rather than creating a new one for new request.  But re-using 
-  // them is complicated, because the requests are asynchronous, so
-  // we need to check to see if the last request is done before we 
-  // can start a new request.
-  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
-  var asynchronous = true;
-  newXMLHttpRequestObject.open("POST", url, asynchronous);
-  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
-  newXMLHttpRequestObject.send(textToAppend);
-};
-
-
-/**
- */
-orp.model.HttpSaver.prototype.writeText = function(textToWrite, overwriteIfExists) {
-  var url = this._completePathToTrunkDirectory;
-  url += "/source/model/write_to_repository_file.php?file=" + this._repositoryName;
-  if (overwriteIfExists) {
-    url += "&overwrite=T";
-  }
-  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
-  var asynchronous = true;
-  newXMLHttpRequestObject.open("POST", url, asynchronous);
-  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
-  newXMLHttpRequestObject.send(textToWrite);
-};
-
-
-// -------------------------------------------------------------------
-// Private methods
-// -------------------------------------------------------------------
-
-/**
- * Returns a newly created XMLHttpRequest object.
- *
- * @scope    private instance method
- * @return   A newly created XMLHttpRequest object. 
- */
-orp.model.HttpSaver.prototype._newXMLHttpRequestObject = function() {
-  var newXMLHttpRequestObject = null;
-  if (window.XMLHttpRequest) {
-    newXMLHttpRequestObject = new XMLHttpRequest();
-  } else {
-    if (window.ActiveXObject) {
-      newXMLHttpRequestObject = new ActiveXObject("Microsoft.XMLHTTP");
-    }
-  }
-  if (newXMLHttpRequestObject) {
-    newXMLHttpRequestObject.onreadystatechange = function() {
-      var statusText = newXMLHttpRequestObject.statusText;
-      if (statusText != "OK") {
-        window.alert("onreadystatechange:\n" +
-          "readyState: " + newXMLHttpRequestObject.readyState + "\n" +
-          "status: " + newXMLHttpRequestObject.status + "\n" +
-          "statusText: " + newXMLHttpRequestObject.statusText + "\n" +
-          "responseText: " + newXMLHttpRequestObject.responseText + "\n");
-      }
-    };
-  }
-  return newXMLHttpRequestObject;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/source/model/StubVirtualServer.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -1,1073 +0,0 @@
-/*****************************************************************************
- StubVirtualServer.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.model.StubVirtualServer");
-dojo.require("orp.model.World");
-dojo.require("orp.model.Item");
-dojo.require("orp.model.Entry");
-dojo.require("orp.model.Transaction");
-dojo.require("orp.util.TimeBasedUuid");
-dojo.require("orp.util.DateValue");
-dojo.require("orp.lang.Lang");
-
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-// 
-/*global Util  */
-/*global World, Item, Entry, Ordinal, Vote, ContentRecord, Transaction  */
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-/**
- * The StubVirtualServer is a dummy place-holder datastore that does
- * a bare-minimum job of providing data to a World.
- *
- * @scope    public instance constructor
- */
-orp.model.StubVirtualServer = function(pathToTrunkDirectory) {
-  var fileName = "2005_june_axiomatic_items.json";
-  var relUrlForAxiomaticFile = "source/model/" + fileName;
-  if (pathToTrunkDirectory) {
-    this._needCompletePath = true;
-    var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/source/model/TestRepositoryWriting.html.
-    var arrayOfPathComponents = thisUrl.split('/');
-    arrayOfPathComponents.pop();
-    var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
-    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectory;
-    this._dehydratedAxiomFileURL = this._completePathToTrunkDirectory + '/' + relUrlForAxiomaticFile;
-  } else {
-    this._needCompletePath = false;
-    this._dehydratedAxiomFileURL = relUrlForAxiomaticFile;    
-  }
-  
-  /*
-  if (optionalDefaultOverrides) {
-    this._processOptionalDefaultOverrides(optionalDefaultOverrides, "Stub");
-  }
-  */
-};
-
-
-// -------------------------------------------------------------------
-// Public constants
-// -------------------------------------------------------------------
-orp.model.StubVirtualServer.JSON_FORMAT = {
-  FORMAT_2005_JUNE_CHRONOLOGICAL_LIST: "2005_JUNE_CHRONOLOGICAL_LIST" };
-
-orp.model.StubVirtualServer.JSON_MEMBER = {
-  FORMAT: "format",
-  RECORDS: "records",
-  TYPE: "type",
-  VALUE: "value",
-  UUID: "uuid",
-  USER: "user",
-  PASSWORD: "password",
-  ITEM_CLASS: "Item",
-  ENTRY_CLASS: "Entry",
-  VOTE_CLASS: "Vote",
-  ORDINAL_CLASS: "Ordinal",
-  USER_CLASS: "User",
-  TRANSACTION_CLASS: "Transaction",
-  ATTRIBUTE: "attribute",
-  PREVIOUS_VALUE: "previousEntry",
-  RECORD: "record",
-  ITEM: "item",
-  RETAIN_FLAG: "retainFlag",
-  ORDINAL_NUMBER: "value" };
-
-
-/*
-OLD?
-StubVirtualServer.JSON_TYPE_TEXT_VALUE = "TextValue";
-StubVirtualServer.JSON_TYPE_RELATED_UUID = "RelatedUuid";
-StubVirtualServer.JSON_TYPE_NUMBER_VALUE = "NumberValue";
-StubVirtualServer.JSON_TYPE_DATE_VALUE = "DateValue";
-StubVirtualServer.JSON_TYPE_CHECKMARK_VALUE = "CheckMarkValue";
-StubVirtualServer.JSON_TYPE_URL_VALUE = "UrlValue";
-StubVirtualServer.JSON_TYPE_CONNECTION = "Connection";
-*/
-
-
-// -------------------------------------------------------------------
-// Private methods
-// -------------------------------------------------------------------
-
-/**
- * Initializes the instance variables for a newly created StubVirtualServer.
- *
- * @scope    private instance method
- * @param    world    The world that we provide data for. 
- */
-orp.model.StubVirtualServer.prototype._initialize = function(world) {
-  this._world = world;
-  
-  this._countOfNestedTransactions = 0;
-  this._currentTransaction = null;
-
-  this._hashTableOfItemsKeyedByUuid = {};
-  this._hashTableOfEntriesKeyedByUuid = {};
-  this._chronologicalListOfRecords = [];
-  
-  this._listOfUsers = [];
-  this._hashTableOfUserAuthenticationInfo = {};
-  this._currentUser = null;
-};
- 
-
-// -------------------------------------------------------------------
-// Public Methods
-// -------------------------------------------------------------------
-
-/**
- * Initializes the instance variables for a newly created StubVirtualServer,
- * and does the initial loading of at least the axiomatic items.
- *
- * @scope    public instance method
- * @param    world    The world that we provide data for. 
- */
-orp.model.StubVirtualServer.prototype.setWorldAndLoadAxiomaticItems = function(world) {
-  this._initialize(world);
-  // this._buildTypeHashTable();
-  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
-};
-
-
-/**
- * Returns the World instance that this virtual server is using.
- *
- * @scope    public instance method
- * @return   A World object. 
- */
-orp.model.StubVirtualServer.prototype.getWorld = function() {
-  return this._world;
-};
-
-
-/**
- * Given a text string, this method returns a copy of the text string, 
- * with certain special characters replaced by escape sequences.
- * 
- * For example, given a string like this:
- * <pre>
- *    this.encodeText('The quick <brown> fox & the "lazy" hare.\n');
- * </pre>
- * The return value will be:
- * <pre>
- *    'The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;'
- * </pre>
- * 
- * @scope    public instance method
- * @param    rawText    A text string to encode. 
- * @return   A copy of the rawText string, with the special characters escaped. 
- */
-orp.model.StubVirtualServer.prototype.encodeText = function(rawText) {
-  // orp.util.assert(orp.util.isString(rawText));
-  orp.lang.assertType(rawText, String);
-
-  var returnString = rawText;
-  // Note: it's important that we do '&' first, otherwise we'll accidentally
-  // replace all the & characters that we add in the following lines.
-  returnString = returnString.replace(new RegExp('&','g'), "&amp;");
-  returnString = returnString.replace(new RegExp('<','g'), "&lt;");
-  returnString = returnString.replace(new RegExp('>','g'), "&gt;");
-  returnString = returnString.replace(new RegExp('"','g'), "&quot;");
-  returnString = returnString.replace(new RegExp('\n','g'), "&#10;");
-  returnString = returnString.replace(new RegExp('\r','g'), "&#13;");
-  return returnString;
-};
-
-
-/**
- * Given a text string that was encoded using encodeText(), this method 
- * returns a decoded copy of the text string, with the encoded escape 
- * sequences now replaced by the original special characters.
- *
- * For example, given a string like this:
- * <pre>
- *    this.decodeText('The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;');
- * </pre>
- * The return value will be:
- * <pre>
- *    'The quick <brown> fox & the "lazy" hare.\n'
- * </pre>
- *
- * @scope    public instance method
- * @param    encodedText    A text string to decode. 
- * @return   A copy of the encodedText string, with the escaped characters replaced by the original special characters. 
- */
-orp.model.StubVirtualServer.prototype.decodeText = function(encodedText) {
-  // orp.util.assert(orp.util.isString(encodedText));
-  orp.lang.assertType(encodedText, String);
-  
-  var returnString = encodedText;
-  returnString = returnString.replace(new RegExp('&#13;','g'), "\r");
-  returnString = returnString.replace(new RegExp('&#10;','g'), "\n");
-  returnString = returnString.replace(new RegExp('&quot;','g'), '"');
-  returnString = returnString.replace(new RegExp('&gt;','g'), ">");
-  returnString = returnString.replace(new RegExp('&lt;','g'), "<");
-  returnString = returnString.replace(new RegExp('&amp;','g'), "&");
-  // Note: it's important that we do '&amp;' last, otherwise we won't correctly
-  // handle a case like this:
-  //   text = this.decodeText(this.encodeText('&lt;'));
-  return returnString;
-};
-
-
-// -------------------------------------------------------------------
-// Transaction Methods
-// -------------------------------------------------------------------
-
-/**
- * Marks the beginning of a transaction.
- *
- * Each time you call beginTransaction() you open a new transaction, 
- * which you need to close later using endTransaction().  Transactions
- * may be nested, but the beginTransaction and endTransaction calls
- * always need to come in pairs. 
- *
- * @scope    public instance method
- */
-orp.model.StubVirtualServer.prototype.beginTransaction = function() {
-  if (this._countOfNestedTransactions === 0) {
-    this._currentTransaction = new orp.model.Transaction();
-  }
-  this._countOfNestedTransactions += 1;
-};
- 
-
-/**
- * Marks the end of a transaction.
- *
- * @scope    public instance method
- */
-orp.model.StubVirtualServer.prototype.endTransaction = function() {
-  this._countOfNestedTransactions -= 1;
-  orp.lang.assert(this._countOfNestedTransactions >= 0);
-
-  if (this._countOfNestedTransactions === 0) {
-    var listOfChangesMade = this._saveChangesToServer();
-    this._currentTransaction = null;
-    if (listOfChangesMade.length > 0) {
-      // alert(listOfChangesMade.length + " changes made");
-      // orp.util.displayStatusBlurb(listOfChangesMade.length + " changes made");
-      this._world._notifyObserversOfChanges(listOfChangesMade);
-    }
-  }
-};
-
-
-/**
- * Returns the Transaction object for the current transaction.
- *
- * @scope    public instance method
- * @return   A Transaction object, or null if there is no transaction in progress. 
- */
-orp.model.StubVirtualServer.prototype.getCurrentTransaction = function() {
-  return this._currentTransaction;
-};
-
-
-// -------------------------------------------------------------------
-// Methods for creating and changing items
-// -------------------------------------------------------------------
-
-/**
- * Returns a newly created item.
- *
- * @scope    public instance method
- * @param    name    Optional. A string, which will be assigned to the name attribute of the new item. 
- * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
- * @return   A newly created item.
- * @throws   Throws an Error if no user is logged in.
- */
-orp.model.StubVirtualServer.prototype.newItem = function(name, observer) {
-  this._throwErrorIfNoUserIsLoggedIn();
-  var item = this._createNewItem(observer, false);
-  if (name) { 
-    var attributeCalledName = this._world.getAttributeCalledName();
-    // item.addEntryForAttribute(attributeCalledName, name);
-    item.addEntry({attribute:attributeCalledName, value:name});
-  }
-  return item;
-};
-
-
-/**
- * Returns a newly created "provisional" item.  At the time this item is 
- * created, it will only exist in local memory.  Unlike normal items, 
- * provisional items are not saved to the repository at the time they 
- * are created.  The provisional item is saved to the repository when 
- * an entry is set for one of the item's attributes.
- *
- * @scope    public instance method
- * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
- * @return   A newly created provisional item.
- * @throws   Throws an Error if no user is logged in.
- */
-orp.model.StubVirtualServer.prototype.newProvisionalItem = function(observer) {
-  this._throwErrorIfNoUserIsLoggedIn();
-  var item = this._createNewItem(observer, true);
-  return item;
-};
-
-
-/**
- * Returns a newly created item: either a provisional item or a normal item.
- *
- * @scope    private instance method
- * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
- * @param    provisionalFlag    True if the item is provisional; false if the item is normal. 
- * @return   A newly created item.
- */
-orp.model.StubVirtualServer.prototype._createNewItem = function(observer, provisionalFlag) {
-  var uuid = this._getNewUuid();
-  var item = new orp.model.Item(this._world, uuid);
-  item._initialize(observer, provisionalFlag);
-  this._hashTableOfItemsKeyedByUuid[uuid] = item;
-  if (!provisionalFlag) {
-    this._currentTransaction.addRecord(item);
-  }
-  return item;
-};
-
-
-/**
- * Records the fact that a provisional item just became real.
- *
- * @scope    package instance method
- * @param    item    The item that was provisional and just became real. 
- */
-orp.model.StubVirtualServer.prototype._provisionalItemJustBecameReal = function(item) {
-  this._currentTransaction.addRecord(item);
-};
-
-
-/**
- * Returns a newly created entry.
- *
- * @scope    public instance method
- * @param    item    The item that this is an entry of. 
- * @param    previousEntry    Optional. The old entry that this entry is replacing. 
- * @param    attribute    The attribute that this entry is assigned to. May be null. 
- * @param    value    The value to initialize the entry with. 
- * @param    type    Optional. An item representing the data type of the value. 
- * @return   A newly created entry.
- * @throws   Throws an Error if no user is logged in.
- */
-orp.model.StubVirtualServer.prototype.newEntry = function(item, previousEntry, attribute, value, type) {
-  this._throwErrorIfNoUserIsLoggedIn();
-  var uuid = this._getNewUuid();
-  var entry = new orp.model.Entry(this._world, uuid);
-  entry._initialize(item, previousEntry, attribute, value, type);
-  item._addEntryToListOfEntriesForAttribute(entry, attribute);
-  
-  this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
-  this._currentTransaction.addRecord(entry);
-  return entry;
-};
- 
-
-/**
- * Returns a newly created entry.
- *
- * @scope    public instance method
- * @param    previousEntry    The entry that this entry will replace. Can be null.
- * @param    itemOne    One of the two items that this entry will connect. 
- * @param    attributeOne    The attribute of itemOne that this entry will be assigned to. 
- * @param    itemTwo    One of the two items that this entry will connect. 
- * @param    attributeTwo    The attribute of itemTwo that this entry will be assigned to.  
- * @return   A newly created entry.
- * @throws   Throws an Error if no user is logged in.
- */
-orp.model.StubVirtualServer.prototype.newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
-  this._throwErrorIfNoUserIsLoggedIn();
-  var uuid = this._getNewUuid();
-  var entry = new orp.model.Entry(this._world, uuid);
-  entry._initializeConnection(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
-
-  itemOne._addEntryToListOfEntriesForAttribute(entry, attributeOne);
-  itemTwo._addEntryToListOfEntriesForAttribute(entry, attributeTwo);
-
-  this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
-  this._currentTransaction.addRecord(entry);
-  return entry;
-};
-
-
-/**
- * Returns a newly created ordinal.
- *
- * @scope    public instance method
- * @param    contentRecord    The contentRecord that this is an ordinal for. 
- * @param    ordinalNumber    The ordinal number itself. 
- * @return   A newly created ordinal.
- * @throws   Throws an Error if no user is logged in.
- */
-orp.model.StubVirtualServer.prototype.newOrdinal = function(contentRecord, ordinalNumber) {
-  this._throwErrorIfNoUserIsLoggedIn();
-  var uuid = this._getNewUuid();
-  var ordinal = new orp.model.Ordinal(this._world, uuid, contentRecord, ordinalNumber);
-  this._currentTransaction.addRecord(ordinal);
-  return ordinal;
-};
-
-
-/**
- * Returns a newly created vote.
- *
- * @scope    public instance method
- * @param    contentRecord    The contentRecord to attach this vote to. 
- * @param    retainFlag    True if this is a vote to retain. False if this is a vote to delete. 
- * @return   A newly created vote.
- * @throws   Throws an Error if no user is logged in.
- */
-orp.model.StubVirtualServer.prototype.newVote = function(contentRecord, retainFlag) {
-  this._throwErrorIfNoUserIsLoggedIn();
-  var uuid = this._getNewUuid();
-  var vote = new orp.model.Vote(this._world, uuid, contentRecord, retainFlag);
-  this._currentTransaction.addRecord(vote);
-  return vote;
-};
-
-
-// -------------------------------------------------------------------
-// Methods having to do with users
-// -------------------------------------------------------------------
-
-/**
- * Creates a new item, where the new item represents a user of this datastore.
- *
- * @scope    public instance method
- * @param    name    A string, which will be assigned to the name attribute of the new item. 
- * @param    authentication    A string which will be used as the login password for the user. 
- * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
- * @return   A newly created item representing a user.
- * @throws   Throws an Error if a user is logged in.
- */
-orp.model.StubVirtualServer.prototype.newUser = function(name, authentication, observer) {
-  if (this._currentUser) {
-    var error = new Error("A user is logged in.  You can't create a new user when somebody is already logged in.");
-    throw error;
-  }
-
-  var newUser = this._createNewItem(observer, false);
-  this._listOfUsers.push(newUser);
-  
-  var md5Authentication = null;
-  if (authentication) {
-    md5Authentication = orp.util.hex_md5(authentication);
-  }
-  this._hashTableOfUserAuthenticationInfo[newUser.getUuid()] = md5Authentication;
-
-  this._currentUser = newUser;
-  var categoryCalledPerson = this.getWorld().getCategoryCalledPerson();
-  newUser.assignToCategory(categoryCalledPerson); 
-  if (name) { 
-    var attributeCalledName = this.getItemFromUuid(orp.model.World.UUID.ATTRIBUTE_NAME);
-    var entry = newUser.addEntry({attribute:attributeCalledName, value:name});
-  }
-  this._currentUser = null;
-  
-  return newUser;
-};
-
-
-/**
- * Returns an list of all the items that represent users of this datastore.
- *
- * @scope    public instance method
- * @return   A list of items.
- */
-orp.model.StubVirtualServer.prototype.getUsers = function() {
-  return this._listOfUsers;
-};
-
-
-/**
- * Returns an item representing the user who is currently logged in.
- *
- * @scope    public instance method
- * @return   An item representing the user who is currently logged in.
- */
-orp.model.StubVirtualServer.prototype.getCurrentUser = function() {
-  return this._currentUser;
-};
-
-
-// -------------------------------------------------------------------
-// Login and logout methods
-// -------------------------------------------------------------------
-
-/**
- * Attempts to login a user.
- *
- * @scope    public instance method
- * @param    inUser    The user to be logged in. 
- * @param    inPassword    Password supplied at login. 
- * @return   True if we were able to log in the user. False if the login failed.
- */
-orp.model.StubVirtualServer.prototype.login = function(user, password) {
-  
-  // Only one user can be logged in at once.  We consider it an error
-  // if you try to log in a new user before logging out the old one.
-  if (this._currentUser) {
-    orp.lang.assert(false);
-  }
-  
-  var isKnownUser = orp.util.isObjectInSet(user, this._listOfUsers);
-  if (!isKnownUser) {
-    return false;
-  }
-
-  if (user.getUuidString() == orp.model.World.UUID.USER_AMY) {
-    // nobody is allowed to log in as the axiomatic user
-    return false;
-  }
-  
-  var md5hashOfPassword = null;
-  if (password) {
-    md5hashOfPassword = orp.util.hex_md5(password);
-  }
-  var realAuthentication = this._getAuthenticationInfoForUser(user);
-  var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);
-  
-  // PENDING: temporary hack
-  // if (!successfulAuthentication) {
-  //  successfulAuthentication = ("PENDING: magic super password" == authentication);
-  // }
-  
-  if (successfulAuthentication) {
-    this._currentUser = user;
-    return true;
-  } else {
-    return false;
-  }
-};
-
-
-/**
- * Logs out the current user.
- *
- * @scope    public instance method
- * @return   True if the current user was logged out. False if there was no current user logged in.
- */
-orp.model.StubVirtualServer.prototype.logout = function() {
-  if (this._currentUser) {
-    this._currentUser = null;
-    return true;
-  } else {
-    return false;
-  }
-};
-
-
-// -------------------------------------------------------------------
-// Other public methods
-// -------------------------------------------------------------------
-
-/**
- * Given a UUID, returns the item identified by that UUID.
- *
- * @scope    public instance method
- * @param    uuid    The UUID of the item to be returned. 
- * @param    observer    Optional. An object to be registered as an observer of the returned item. 
- * @return   The item identified by the given UUID.
- */
-orp.model.StubVirtualServer.prototype.getItemFromUuid = function(uuid, observer) {
-  orp.lang.assert(dojo.lang.isString(uuid) || uuid instanceof orp.util.Uuid);
-  
-  var item = this._hashTableOfItemsKeyedByUuid[uuid];
-  if (item && observer) {
-    item.addObserver(observer);
-  }
-  return item;
-};
-
-
-/**
- * Sends all the changes to the server, so that the server can record the
- * changes.
- *
- * @scope    private instance method
- */
-orp.model.StubVirtualServer.prototype._saveChangesToServer = function () {
-  // The StubVirtualServer doesn't ever actually talk to a server.
-  // Other VirtualServer implementations would be expected to actually
-  // implement this method such that it saves changes to the server
-  var listOfChangesMade = this._currentTransaction.getRecords();
-  this._currentTransaction = null;
-  return listOfChangesMade;
-};
-
-
-// -------------------------------------------------------------------
-// Query methods
-// -------------------------------------------------------------------
-
-/**
- * Given a QueryRunner object, this method returns a list of all the items that 
- * match the query criteria.
- *
- * @scope    public instance method
- * @param    queryRunner    A QueryRunner object. 
- * @return   A list of items.
- */
-orp.model.StubVirtualServer.prototype.getResultItemsForQueryRunner = function(queryRunner) {
-  var matchingAttribute = queryRunner.getMatchingAttribute();
-  var listOfMatchingValues = queryRunner.getMatchingValues();
-  var listOfQueryResultItems = [];
-  var key;
-  
-  if (!matchingAttribute || !listOfMatchingValues) {
-    return listOfQueryResultItems;
-  }
-    
-  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
-  if (matchingAttribute == attributeCalledCategory) {
-    // If this is a query for all the item in a category,
-    // then handle that as a special case, because we can
-    // do that way faster than more general queries.
-    var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
-    for (key in listOfMatchingValues) {
-      var category = listOfMatchingValues[key];
-      var listOfEntriesForItemsInCategory = category.getEntriesForAttribute(attributeCalledItemsInCategory);
-      for (var innerKey in listOfEntriesForItemsInCategory) {
-        var entry = listOfEntriesForItemsInCategory[innerKey];
-        var itemInCategory = entry.getValue(category);
-        orp.util.addObjectToSet(itemInCategory, listOfQueryResultItems);
-      }
-    }
-  } else {
-    // General case code for any sort of query. 
-    for (var uuid in this._hashTableOfItemsKeyedByUuid) {
-      var item = this._hashTableOfItemsKeyedByUuid[uuid];
-      var includeItem = queryRunner.doesItemMatch(item);
-      if (includeItem) {
-        listOfQueryResultItems.push(item);
-      }
-    }
-  }
-  listOfQueryResultItems.sort(orp.model.ContentRecord.compareOrdinals);
-  return listOfQueryResultItems; 
-};
-
-
-/**
- * Given an item and a query item, this method modifies the attributes 
- * of the item so that when the query is next evaluated the item will be 
- * included in query result list.
- *
- * @scope    public instance method
- * @param    item    An item, which will be modified so that it matches the query. 
- * @param    query    A query item. 
- */
-orp.model.StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList = function(item, query) {
-  orp.lang.assert(item instanceof orp.model.Item);
-  orp.lang.assert(query instanceof orp.model.Item);
-  
-  var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
-  var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
-  var attributeCalledCategory = this.getWorld().getAttributeCalledCategory();
-  var categoryCalledCategory = this.getWorld().getCategoryCalledCategory();
-  
-  var listOfMatchingEntries = query.getEntriesForAttribute(attributeCalledQueryMatchingValue);
-  var listOfMatchingAttrs = query.getEntriesForAttribute(attributeCalledQueryMatchingAttribute);
-  if (!(listOfMatchingEntries && (listOfMatchingEntries.length > 0))) {return;} // query not fully formed, so nothing to add
-  var matchingAttribute;
-  if (listOfMatchingAttrs.length === 0) {
-    // by default matching attribute is category
-    matchingAttribute = attributeCalledCategory;
-  }
-  else {
-    orp.lang.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
-    matchingAttribute = listOfMatchingAttrs[0].getValue();
-  }
-
-  for (var key in listOfMatchingEntries) {
-    var matchingEntry = listOfMatchingEntries[key];
-    var match = matchingEntry.getValue();
-    if (!item.hasAttributeValue(matchingAttribute, match)) {
-      if ((matchingAttribute == attributeCalledCategory) && (match instanceof orp.model.Item) && (match.isInCategory(categoryCalledCategory))) {
-        item.assignToCategory(match);
-      } else {
-        // item.addEntryForAttribute(matchingAttribute, match);
-        item.addEntry({attribute:matchingAttribute, value:match});
-      }
-    }
-  }
-};
-
-
-/**
- * Given a category, this method returns a list of all the items that have been 
- * assigned to that category.
- *
- * @scope    public instance method
- * @param    inCategory    A category item. 
- * @return   A list of items.
- */
-orp.model.StubVirtualServer.prototype.getItemsInCategory = function(category) {
-  orp.lang.assert(category instanceof orp.model.Item);
-
-  var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
-  var listOfEntries = category.getEntriesForAttribute(attributeCalledItemsInCategory);
-  var listOfItems = [];
-  for (var key in listOfEntries) {
-    var entry = listOfEntries[key];
-    var item = entry.getValue(category);
-    listOfItems.push(item);
-  }
-  listOfItems.sort(orp.model.ContentRecord.compareOrdinals);
-  return listOfItems; 
-};
-
-
-// -------------------------------------------------------------------
-// Private methods
-// -------------------------------------------------------------------
-
-/**
- * Throws an Error if there is no user currently logged in.
- *
- * @scope    private instance method
- * @throws   Throws an Error if no user is logged in.
- */
-orp.model.StubVirtualServer.prototype._throwErrorIfNoUserIsLoggedIn = function() {
-  if (!this._currentUser) {
-    var error = new Error("No user is logged in.  You can't write to the repository when nobody is logged in.");
-    throw error;
-  }
-};
-
-
-/**
- * Given a UUID, returns the item or entry identified by that UUID.
- *
- * @scope    private instance method
- * @param    uuid    The UUID of the item or entry to be returned. 
- * @return   The item or entry identified by the given UUID.
- */
-orp.model.StubVirtualServer.prototype._getContentRecordFromUuid = function(uuid) {
-  var item = this.getItemFromUuid(uuid);
-  if (item) {
-    return item;
-  } else {
-    return this._hashTableOfEntriesKeyedByUuid[uuid];
-  }
-};
-
-
-/**
- * Returns a newly created UUID.
- *
- * @scope    private instance method
- * @param    node    The node value that the new UUID should have. 
- */
-orp.model.StubVirtualServer.prototype._generateUuid = function(node) {
-  if (node) {
-    return new orp.util.TimeBasedUuid({'node': node});
-  } else {
-    return new orp.util.TimeBasedUuid();
-  }
-};
-
-
-/**
- * Creates a brand new UUID to allocate to an item or entry.
- *
- * @scope    private instance method
- * @return   A newly created UUID.
- */
-orp.model.StubVirtualServer.prototype._getNewUuid = function() {
-  var newUuid;
-  if (this._currentUser) {
-    var uuidOfCurrentUser = this._currentUser.getUuid();
-    var nodeForCurrentUser = uuidOfCurrentUser.getNode(); // "0123456789AB";
-    newUuid = this._generateUuid(nodeForCurrentUser);
-  } else {
-    newUuid = this._generateUuid();
-  }
-  return newUuid;
-};
-
-
-/**
- * Given an item representing a user, return the authentication info
- * associated with that user.
- *
- * @scope    private instance method
- * @param    user    An item representing a user. 
- * @return   The authentication info for the user.
- */
-orp.model.StubVirtualServer.prototype._getAuthenticationInfoForUser = function(user) {
-  return this._hashTableOfUserAuthenticationInfo[user.getUuid()];
-};
-
-
-/**
- * Given a UUID, either (a) returns the existing item identified by that UUID, 
- * or (b) creates an new item object, set its UUID, and returns that object.
- *
- * @scope    private instance method
- * @param    uuid    The UUID of the item to be returned. 
- * @return   The item identified by the given UUID.
- */
-orp.model.StubVirtualServer.prototype._getItemFromUuidOrCreateNewItem = function(uuid) {
-  var item = this.getItemFromUuid(uuid);
-  if (!item) {
-    item = new orp.model.Item(this._world, uuid);
-    item._initialize();
-    this._hashTableOfItemsKeyedByUuid[uuid] = item;
-    this._currentTransaction.addRecord(item);
-  }
-  return item;
-};
-
-
-/**
- * Creates the basic items that needed in order to do anything else, 
- * like the items for "name", "attribute", and "category".
- *
- * @scope    private instance method
- */
-orp.model.StubVirtualServer.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
-  // var fileContentString = orp.util.getStringContentsOfFileAtURL(url);
-  var fileContentString = dojo.hostenv.getText(url);
-  // orp.util.assert(orp.util.isString(fileContentString));
-  orp.lang.assertType(fileContentString, String);
-  fileContentString += " ] }";
-
-  var dehydratedRecords = null;
-  eval("dehydratedRecords = " + fileContentString + ";");
-  // orp.util.assert(orp.util.isObject(dehydratedRecords));
-  orp.lang.assertType(dehydratedRecords, Object);
-  var recordFormat = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.FORMAT];
-  orp.lang.assert(recordFormat == orp.model.StubVirtualServer.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
-  var listOfRecords = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.RECORDS];
-  // orp.util.assert(orp.util.isArray(listOfRecords));
-  orp.lang.assertType(listOfRecords, Array);
-  
-  this._rehydrateRecords(listOfRecords);
-};
-
-
-/**
- * Given a UUID, either (a) returns the existing item identified by that UUID, 
- * or (b) creates an new item object, set its UUID, and returns that object.
- *
- * @scope    private instance method
- * @param    inUuid    The UUID of the item to be returned. 
- * @return   The item identified by the given UUID.
- */
-orp.model.StubVirtualServer.prototype._getItemFromUuidOrBootstrapItem = function(uuid) {
-  var item = this.getItemFromUuid(uuid);
-  if (!item) {
-    item = new orp.model.Item(this.getWorld(), uuid);
-    this._hashTableOfItemsKeyedByUuid[uuid] = item;
-  }
-  return item;
-};
-
-/**
- * Given a UUID, returns the existing entry identified by that UUID. 
- * 
- * @scope    private instance method
- * @param    uuid    The UUID of the entry to be returned. 
- * @return   The entry identified by the given UUID.
- */
-orp.model.StubVirtualServer.prototype._getEntryFromUuid = function(uuid) {
-  return this._hashTableOfEntriesKeyedByUuid[uuid];
-};
-
-/**
- * Given a UUID, either (a) returns the existing entry identified by that UUID, 
- * or (b) creates an new entry object, set its UUID, and returns that object.
- *
- * @scope    private instance method
- * @param    uuid    The UUID of the entry to be returned. 
- * @return   The entry identified by the given UUID.
- */
-orp.model.StubVirtualServer.prototype._getEntryFromUuidOrBootstrapEntry = function(uuid) {
-  var entry = this._hashTableOfEntriesKeyedByUuid[uuid];
-  if (!entry) {
-    entry = new orp.model.Entry(this.getWorld(), uuid);
-    this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
-  }
-  return entry;
-};
-
-
-/**
- * Given a dehydrated list of records, rehydrates each of the records.
- *
- * @scope    private instance method
- * @param    listOfDehydratedRecords    A list of dehydrated records. 
- */
-orp.model.StubVirtualServer.prototype._rehydrateRecords = function(listOfDehydratedRecords) {
-  var key;
-  var itemUuid;
-  var item;
-  var contentRecordUuid;
-  var contentRecord;
-  var JSON_MEMBER = orp.model.StubVirtualServer.JSON_MEMBER;
-
-  for (key in listOfDehydratedRecords) {
-    var dehydratedRecord = listOfDehydratedRecords[key];
-
-    var dehydratedTransaction = dehydratedRecord[JSON_MEMBER.TRANSACTION_CLASS];
-    if (dehydratedTransaction) {
-      var listOfRecordsInTransaction = dehydratedTransaction;
-      this._rehydrateRecords(listOfRecordsInTransaction);
-    } else {
-      var dehydratedItem = dehydratedRecord[JSON_MEMBER.ITEM_CLASS];
-      var dehydratedUser = dehydratedRecord[JSON_MEMBER.USER_CLASS];
-      var dehydratedVote = dehydratedRecord[JSON_MEMBER.VOTE_CLASS];
-      var dehydratedOrdinal = dehydratedRecord[JSON_MEMBER.ORDINAL_CLASS];
-      var dehydratedEntry = dehydratedRecord[JSON_MEMBER.ENTRY_CLASS];
-        
-      if (dehydratedItem) {
-        itemUuid = dehydratedItem[JSON_MEMBER.UUID];
-        item = this._getItemFromUuidOrBootstrapItem(itemUuid);
-        this._chronologicalListOfRecords.push(item);
-      }
-      
-      if (dehydratedUser) {
-        var userUuid = dehydratedUser[JSON_MEMBER.USER];
-        var userPasswordHash = dehydratedUser[JSON_MEMBER.PASSWORD];
-        var user = this._getItemFromUuidOrBootstrapItem(userUuid);
-        this._listOfUsers.push(user);
-        this._hashTableOfUserAuthenticationInfo[user.getUuid()] = userPasswordHash;
-      }
-      
-      if (dehydratedVote) {
-        var voteUuid = dehydratedVote[JSON_MEMBER.UUID];
-        var retainFlagString = dehydratedVote[JSON_MEMBER.RETAIN_FLAG];
-        var retainFlag = null;
-        if (retainFlagString == "true") {
-          retainFlag = true;
-        }
-        if (retainFlagString == "false") {
-          retainFlag = false;
-        }
-        orp.lang.assert(retainFlag !== null);
-        contentRecordUuid = dehydratedVote[JSON_MEMBER.RECORD];
-        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var vote = new orp.model.Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
-        this._chronologicalListOfRecords.push(vote);
-      }
-      
-      if (dehydratedOrdinal) {
-        var ordinalUuid = dehydratedOrdinal[JSON_MEMBER.UUID];
-        var ordinalNumber = dehydratedOrdinal[JSON_MEMBER.ORDINAL_NUMBER];
-        contentRecordUuid = dehydratedOrdinal[JSON_MEMBER.RECORD];
-        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var ordinal = new orp.model.Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
-        this._chronologicalListOfRecords.push(ordinal);
-      }
-      
-      if (dehydratedEntry) {
-        var entryUuid = dehydratedEntry[JSON_MEMBER.UUID];
-        var entry = this._getEntryFromUuidOrBootstrapEntry(entryUuid);
-        var previousEntryUuid = dehydratedEntry[JSON_MEMBER.PREVIOUS_VALUE];
-        var previousEntry = null;
-        if (previousEntryUuid) {
-          previousEntry = this._getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
-        }
- 
-        var dataTypeUuid = dehydratedEntry[JSON_MEMBER.TYPE];
-        var dataType = this._getItemFromUuidOrBootstrapItem(dataTypeUuid);
-        
-        if (dataTypeUuid == orp.model.World.UUID.TYPE_CONNECTION) {
-          var listOfItemUuids = dehydratedEntry[JSON_MEMBER.ITEM];
-          var firstItemUuid = listOfItemUuids[0];
-          var secondItemUuid = listOfItemUuids[1];
-          var firstItem = this._getItemFromUuidOrBootstrapItem(firstItemUuid);
-          var secondItem = this._getItemFromUuidOrBootstrapItem(secondItemUuid);
-
-          var listOfAttributeUuids = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
-          var firstAttributeUuid = listOfAttributeUuids[0];
-          var secondAttributeUuid = listOfAttributeUuids[1];
-          var firstAttribute = this._getItemFromUuidOrBootstrapItem(firstAttributeUuid);
-          var secondAttribute = this._getItemFromUuidOrBootstrapItem(secondAttributeUuid);
-          
-          var pairOfItems = [firstItem, secondItem];
-          var pairOfAttributes = [firstAttribute, secondAttribute];
-          entry._rehydrate(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
-        } else {
-          itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
-          item = this._getItemFromUuidOrBootstrapItem(itemUuid);
-          var attributeUuid = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
-          var attribute = null;
-          if (attributeUuid) {
-            attribute = this._getItemFromUuidOrBootstrapItem(attributeUuid);
-          } else {
-            orp.lang.assert(false); // the attributeUuid should always be there
-          }
-          var rawData = dehydratedEntry[JSON_MEMBER.VALUE];
-          var finalData = null;
-          switch (dataTypeUuid) {
-            case orp.model.World.UUID.TYPE_ITEM:
-              finalData = this._getItemFromUuidOrBootstrapItem(rawData);
-              break;
-            case orp.model.World.UUID.TYPE_TEXT:
-              finalData = this.decodeText(rawData);
-              break;
-            case orp.model.World.UUID.TYPE_NUMBER:
-              finalData = parseFloat(rawData);
-              break;
-            case orp.model.World.UUID.TYPE_DATE:
-              finalData = new orp.util.DateValue(rawData);
-              // if (!finalData.isValid()) {
-              //   alert(rawData + " " + finalData);
-              // }
-              orp.lang.assert(finalData.isValid());
-              break;
-            default:
-              orp.lang.assert(false, 'Unknown data type while _rehydrating()');
-          }
-          entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
-        }
-        this._chronologicalListOfRecords.push(entry);
-      }
-      
-    }
-  }
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/source/model/World.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -33,7 +33,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.model.World");
-dojo.require("orp.model.DeltaVirtualServer");
+dojo.require("orp.archive.DeltaArchive");
 dojo.require("orp.model.QueryRunner");
 dojo.require("orp.model.Vote");
 dojo.require("orp.model.Ordinal");
@@ -47,7 +47,7 @@
 /*global Util  */
 /*global Item, Entry, Ordinal, Vote, ContentRecord  */
 /*global QueryRunner  */ 
-/*global DeltaVirtualServer  */
+/*global DeltaArchive  */
 // -------------------------------------------------------------------
 
 
@@ -81,7 +81,7 @@
     var arrayWithFilenameAndExtension = lastSegment.split('.');
     var filename = arrayWithFilenameAndExtension[0];
     var repositoryName = filename;
-    server = new orp.model.DeltaVirtualServer(repositoryName);
+    server = new orp.archive.DeltaArchive(repositoryName);
   }
   this._virtualServer = server;
   server.setWorldAndLoadAxiomaticItems(this);

Deleted: trunk/source/model/append_to_repository_file.php
===================================================================
--- trunk/source/model/append_to_repository_file.php	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/source/model/append_to_repository_file.php	2005-10-04 01:33:56 UTC (rev 347)
@@ -1,34 +0,0 @@
-<?php
-$contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
-
-$url_of_this_php_script = $_SERVER['REQUEST_URI'];
-$array_of_url_parts = explode("?", $url_of_this_php_script);
-$search_part = $array_of_url_parts[1];
-$array_of_search_parts = explode("=", $search_part);
-$file_name_parameter = $array_of_search_parts[1];
-$array_of_file_name_parameter_parts = explode("/", $file_name_parameter);
-$safe_file_name_with_no_path_exploits = $array_of_file_name_parameter_parts[0];
-
-$file_path = "../../repositories/";
-$file_suffix = ".json";
-$repository_file_name = $file_path . $safe_file_name_with_no_path_exploits . $file_suffix;
-
-if (is_writable($repository_file_name)) {
-  echo "$repository_file_name is writable.";
-  if ($fileHandle = fopen($repository_file_name, "ab")) { /* ab == append in binary mode */
-    if (fwrite($fileHandle, $contentToWrite)) {
-      fclose($fileHandle);
-      echo "Appended to file ($repository_file_name)";
-    } else {
-      echo "Unable to write to file ($repository_file_name)";
-      exit;
-    }
-  } else {
-    echo "Unable to open file: $repository_file_name";
-    exit("Unable to open file."); 
-  }
-} else {
-  echo "The file $repository_file_name is not writable.";
-}
-?>
-

Deleted: trunk/source/model/write_to_repository_file.php
===================================================================
--- trunk/source/model/write_to_repository_file.php	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/source/model/write_to_repository_file.php	2005-10-04 01:33:56 UTC (rev 347)
@@ -1,37 +0,0 @@
-<?php
-$contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
-
-$url_of_this_php_script = $_SERVER['REQUEST_URI'];
-$file_name_parameter = $_GET['file'];
-$array_of_file_name_parameter_parts = explode("/", $file_name_parameter);
-$safe_file_name_with_no_path_exploits = $array_of_file_name_parameter_parts[0];
-$overwrite_parameter = $_GET['overwrite'];
-
-$file_path = "../../repositories/"; /* relative to this php file */
-$file_suffix = ".json";
-$repository_file_name = $file_path . $safe_file_name_with_no_path_exploits . $file_suffix;
-
-if ($overwrite_parameter != 'T') {
-  if (file_exists($repository_file_name)) {
-    exit("File $repository_file_name already exists."); 
-  }
-}
-if ($fileHandle = fopen($repository_file_name, "wb")) { /* wb == write in binary mode */
-  /* It would be nice if this could be 0664, but then it won't be openable with 'file:' protocol,
-     unless the user is the same as the user of httpd (typically 'nobody').  I'm assuming chmod is 
-     ignored on non-unix systems, and that this note is relevant only on unix systems.  
-     Even if the user is in the same group as nobody, nsIFileOutputStream (called by 
-     FileSaver._mozillaSaveToFile) still won't open the file, at least on Mignon's Mac. */
-  chmod($repository_file_name, 0666);
-  if (fwrite($fileHandle, $contentToWrite)) {
-    fclose($fileHandle);
-    exit("Wrote to file ($repository_file_name)");
-  } else {
-    fclose($fileHandle);
-    exit("Unable to write to file ($repository_file_name)");
-  }
-} else {
-  exit("Unable to open file: $repository_file_name"); 
-}
-?>
-

Copied: trunk/source/storage/FileStorage.js (from rev 345, trunk/source/model/FileSaver.js)
===================================================================
--- trunk/source/model/FileSaver.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/source/storage/FileStorage.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,289 @@
+/*****************************************************************************
+ FileStorage.js
+ 
+******************************************************************************
+ The code in this file is a heavily modified version of code that was copied
+ from the TiddlyWiki and GTDTiddlyWiki code base.
+ 
+ The original code is Copyright (c) Osmosoft Limited.  The original copyright 
+ notice is included below, along with the license conditions and disclaimer.  
+ 
+ OpenRecord modifications by Brian Douglas Skinner <brian.skinner at gumption.org>
+
+ For the OpenRecord modifications, the Copyright rights are relinquished under  
+ the Creative Commons Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+
+******************************************************************************
+TiddlyWiki 1.2.6 by Jeremy Ruston, (jeremy [at] osmosoft [dot] com)
+Incorporating improvements by Isao Sonobe, http://www-gauge.scphys.kyoto-u.ac.jp/~sonobe/OgreKit/OgreKitWiki.html
+GTDTiddlyWiki modification by Nathan Bowers, (wiki [at] snapgrid [dot] com)
+Safari Compatability by Jonathan Paisley at http://www.dcs.gla.ac.uk/~jp/
+
+Copyright (c) Osmosoft Limited, 14 April 2005
+
+All rights reserved.
+
+Redistribution and use in source and binary forms, with or without modification,
+are permitted provided that the following conditions are met:
+
+Redistributions of source code must retain the above copyright notice, this
+list of conditions and the following disclaimer.
+
+Redistributions in binary form must reproduce the above copyright notice, this
+list of conditions and the following disclaimer in the documentation and/or other
+materials provided with the distribution.
+
+Neither the name of the Osmosoft Limited nor the names of its contributors may be
+used to endorse or promote products derived from this software without specific
+prior written permission.
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY
+EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
+OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
+SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
+INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
+TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
+ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH
+DAMAGE.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.FileStorage");
+dojo.require("orp.archive.DeltaArchive");
+dojo.require("orp.lang.Lang");
+
+/**
+ * The FileStorage class knows how to save text to a local file.
+ *
+ * @param    repositoryName                 // e.g. demo_page
+ * @param    pathToTrunkDirectory           // Not needed if window.location.pathname is in the trunk directory.
+ * @scope    public instance constructor
+ */
+orp.storage.FileStorage = function(repositoryName, pathToTrunkDirectory) {
+  this._repositoryName = repositoryName;
+  
+  // Step 1: Build the fileUrl
+  // 
+  // Our saveTextToFile() method needs a fileUrl that looks like this:
+  //   fileUrl = "K:\\www\\htdocs\\openrecord\\demo\\current\\trunk\\repositories\\demo_page.json";
+  // 
+  // We start with a value in this._repositoryName that looks like this:
+  //   this._repositoryName == "demo_page"
+
+  // URLs like these don't work:
+  //   fileUrl = "repositories/demo_page.json";
+  //   fileUrl = "repositories\\demo_page.json";
+  //   fileUrl = "\\repositories\\demo_page.json";
+  //   fileUrl = "K:/www/htdocs/openrecord/demo/current/trunk/repositories/demo_page.json";
+
+  var listOfAdditions = [];
+  if (pathToTrunkDirectory && pathToTrunkDirectory !== "") {
+    listOfAdditions.push(pathToTrunkDirectory);
+  }
+  listOfAdditions.push(orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY);
+  listOfAdditions.push(this._repositoryName + ".json");
+  this._fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
+};
+
+
+/**
+ * Appends text to a file.
+ *
+ * @scope    public instance method
+ */
+orp.storage.FileStorage.prototype.appendText = function(textToAppend) {
+  var append = true;
+  this._saveTextToFile(textToAppend, this._fileUrl, append);
+};
+
+orp.storage.FileStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  var append = false;
+  this._saveTextToFile(textToWrite, this._fileUrl, append);
+};
+
+/**
+ * Save the text to the file at the given URL.
+ *
+ * @scope    private instance method
+ * @return   Returns true if the text was saved.
+ */
+orp.storage.FileStorage.prototype._saveTextToFile = function(text, fileUrl, append) {
+  // Make sure we were loaded from a "file:" URL
+  if (window.location.protocol != "file:") {
+    orp.lang.assert(false, 'FileStorage.js can only be used for pages loaded from a "file:///" location');
+  }
+
+  var success = this._mozillaSaveToFile(text, fileUrl, append);
+  if (!success) {
+    success = this._ieSaveToFile(text, fileUrl, append);
+  }
+  return(success);
+};
+
+
+/**
+ * Save the text to the file at the given filePath.
+ *
+ * @scope    private instance method
+ * @return   Returns true if the text was saved, false if there was an error, or null if we couldn't even try.
+ */
+orp.storage.FileStorage.prototype._mozillaSaveToFile = function(text, filePath, append) {
+  if (window.Components) {
+    try {
+      netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+      var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
+      file.initWithPath(filePath);
+      if (!file.exists()) {
+        // Not all JavaScript implementations  support octal literals,
+        // so it's not safe to use '0664' here:
+        //   file.create(0, 0664);
+        //   file.permissions = 0664; // Because create ignores the permissions argument, at least on Mignon's Mac.
+        file.create(0, 0x1B4);
+        file.permissions = 0x1B4; // Because create ignores the permissions argument, at least on Mignon's Mac.
+      }
+      var outputStream = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
+      if (append) {
+        outputStream.init(file, 0x10 | 0x02, 0x0004, null);
+      } else {
+        outputStream.init(file, 0x20 | 0x02, 0x0004, null);
+      }
+      outputStream.write(text, text.length);
+      outputStream.flush();
+      outputStream.close();
+      return true;
+    }
+    catch(exception) {
+      alert("Exception while attempting to save\n\n" + exception);
+      return false;
+    }
+  } else {
+    alert("window.Components == null");
+  }
+  return null;
+};
+
+
+/**
+ * Save the text to the file at the given filePath.
+ *
+ * @scope    private instance method
+ * @return   Returns true if the text was saved, or false if there was an error.
+ */
+orp.storage.FileStorage.prototype._ieSaveToFile = function(text, filePath, append) {
+  try {
+    var fileSystemObject = new ActiveXObject("Scripting.FileSystemObject");
+  }
+  catch(exception) {
+    alert("Exception while attempting to save\n\n" + exception.toString());
+    return false;
+  }
+  if (append) {
+    orp.lang.assert(false, "PENDING: still need to write code for this");
+  } else {
+    var file = fileSystemObject.OpenTextFile(filePath, 2, -1, 0);
+  }
+  file.Write(text);
+  file.Close();
+  return true;
+};
+
+
+/**
+ * This method looks at the URL value in the window.location property,
+ * strips the filename off the end, appends any given path elements,
+ * converts the whole thing to a format that is compatible with the 
+ * local file system, and returns the new local path.
+ *
+ * @scope    private instance method
+ * @return   Returns a full local pathname.
+ */
+orp.storage.FileStorage.prototype._getLocalPathFromWindowLocation = function(listOfAdditions) {
+  // Example location:
+  //   location.href     == file:///D:/amy/openrecord/foo.html#bar
+  //   location.protocol == file:
+  //   location.pathname ==        /D:/amy/openrecord/foo.html
+  //   location.hash     ==                                   #bar
+
+  // Get the URL of the document
+  var pathname = window.location.pathname;
+  
+  
+  // Step 1: Make the requested additions to the pathname
+  var arrayOfParts = pathname.split('/');
+  arrayOfParts.pop();  // get rid of the final "/foo.html" part
+  for (var i in listOfAdditions) {
+    var additionalPart = listOfAdditions[i];
+    arrayOfParts.push(additionalPart);
+  }
+  pathname = arrayOfParts.join('/');
+
+  
+  // Step 2: Figure out what type of URL we're working with
+  // Constants
+  var PathType = {
+    LOCAL_PC:        "LOCAL_PC",          // "file:///x:/path/path..." 
+    LOCAL_UNIX_MAC:  "LOCAL_UNIX_MAC",    // "file:///path/path..."
+    NETWORK_PC:      "NETWORK_PC",        // "file://server/share/path/path..."
+    NETWORK_FIREFOX: "NETWORK_FIREFOX" }; // "file://///server/share/path/path..."
+  // "file:///x:/path/path..."             == PathType.LOCAL_PC        --> "x:\path\path..."
+  // "file:///path/path..."                == PathType.LOCAL_UNIX_MAC  --> "/path/path..."
+  // "file://server/share/path/path..."    == PathType.NETWORK_PC      --> "\\server\share\path\path..."
+  // "file://///server/share/path/path..." == PathType.NETWORK_FIREFOX --> "\\server\share\path\path..."
+
+  var pathType = null;
+  if (pathname.charAt(2) == ":") {
+    pathType = PathType.LOCAL_PC;
+  } else if (pathname.indexOf("///") === 0) {
+    pathType = PathType.NETWORK_FIREFOX;
+  } else if (pathname.indexOf("/") === 0) {
+    pathType = PathType.LOCAL_UNIX_MAC;
+  } else {
+    pathType = PathType.NETWORK_PC;
+  }
+
+
+  // Step 3: Convert the URL to a file path
+  var localPath = pathname;
+  switch (pathType) {
+    case PathType.LOCAL_PC:
+      // example: "/x:/path/path..."
+      localPath = localPath.substring(1);  // get rid of initial '/'
+      localPath = unescape(localPath);
+      localPath = localPath.replace(new RegExp("/","g"),"\\");
+      // result: "x:\path\path..."
+      break;
+    case PathType.LOCAL_UNIX_MAC:         
+    // example: "/path/path..."
+      localPath = unescape(localPath);
+      // result: "/path/path..."
+      break;
+    case PathType.NETWORK_FIREFOX:
+      // example: "///server/share/path/path..."
+      localPath = localPath.substring(3);  // get rid of initial '///'
+      localPath = unescape(localPath);
+      localPath = localPath.replace(new RegExp("/","g"),"\\");
+      localPath = "\\\\" + localPath;      
+      // result: "\\server\share\path\path..."
+      break;
+    case PathType.NETWORK_PC:
+      // example: "server/share/path/path..."
+      localPath = unescape(localPath);
+      localPath = localPath.replace(new RegExp("/","g"),"\\");
+      localPath = "\\\\" + localPath;      
+      // result: "\\server\share\path\path..."
+      break;
+  }
+
+  return localPath;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/source/storage/HttpStorage.js (from rev 345, trunk/source/model/HttpSaver.js)
===================================================================
--- trunk/source/model/HttpSaver.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/source/storage/HttpStorage.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,140 @@
+/*****************************************************************************
+ HttpStorage.js
+  
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.HttpStorage");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The HttpStorage class knows how to save content to a server by using
+ * XMLHttpRequest to call a PHP script.
+ *
+ * @param    repositoryName                         // e.g. demo_page
+ * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
+ * @scope    public instance constructor
+ */
+orp.storage.HttpStorage = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
+  this._repositoryName = repositoryName;
+  var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk or /openrecord/trunk/source/model
+  if (pathToTrunkDirectoryFromWindowLocation) {
+    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectoryFromWindowLocation;
+  } else {
+    this._completePathToTrunkDirectory = thisDirectory;
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ */
+orp.storage.HttpStorage.prototype.appendText = function(textToAppend) {
+  var url = this._completePathToTrunkDirectory;
+  url += "/source/model/append_to_repository_file.php?file=" + this._repositoryName;
+  
+  // PENDING: 
+  // It might be more efficient to re-use the XMLHttpRequestObject,
+  // rather than creating a new one for new request.  But re-using 
+  // them is complicated, because the requests are asynchronous, so
+  // we need to check to see if the last request is done before we 
+  // can start a new request.
+  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
+  var asynchronous = true;
+  newXMLHttpRequestObject.open("POST", url, asynchronous);
+  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
+  newXMLHttpRequestObject.send(textToAppend);
+};
+
+
+/**
+ */
+orp.storage.HttpStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  var url = this._completePathToTrunkDirectory;
+  url += "/source/model/write_to_repository_file.php?file=" + this._repositoryName;
+  if (overwriteIfExists) {
+    url += "&overwrite=T";
+  }
+  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
+  var asynchronous = true;
+  newXMLHttpRequestObject.open("POST", url, asynchronous);
+  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
+  newXMLHttpRequestObject.send(textToWrite);
+};
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a newly created XMLHttpRequest object.
+ *
+ * @scope    private instance method
+ * @return   A newly created XMLHttpRequest object. 
+ */
+orp.storage.HttpStorage.prototype._newXMLHttpRequestObject = function() {
+  var newXMLHttpRequestObject = null;
+  if (window.XMLHttpRequest) {
+    newXMLHttpRequestObject = new XMLHttpRequest();
+  } else {
+    if (window.ActiveXObject) {
+      newXMLHttpRequestObject = new ActiveXObject("Microsoft.XMLHTTP");
+    }
+  }
+  if (newXMLHttpRequestObject) {
+    newXMLHttpRequestObject.onreadystatechange = function() {
+      var statusText = newXMLHttpRequestObject.statusText;
+      if (statusText != "OK") {
+        window.alert("onreadystatechange:\n" +
+          "readyState: " + newXMLHttpRequestObject.readyState + "\n" +
+          "status: " + newXMLHttpRequestObject.status + "\n" +
+          "statusText: " + newXMLHttpRequestObject.statusText + "\n" +
+          "responseText: " + newXMLHttpRequestObject.responseText + "\n");
+      }
+    };
+  }
+  return newXMLHttpRequestObject;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/source/storage/append_to_repository_file.php (from rev 345, trunk/source/model/append_to_repository_file.php)

Copied: trunk/source/storage/write_to_repository_file.php (from rev 345, trunk/source/model/write_to_repository_file.php)

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/TestSuite.html	2005-10-04 01:33:56 UTC (rev 347)
@@ -28,6 +28,8 @@
         testSuite.addTestPage("../../../tests/lang/LangTest.html");
         testSuite.addTestPage("../../../tests/util/TestSuite.html");
         testSuite.addTestPage("../../../tests/model/TestSuite.html");
+        testSuite.addTestPage("../../../tests/archive/LintTest.html");
+        testSuite.addTestPage("../../../tests/storage/LintTest.html");
         testSuite.addTestPage("../../../tests/view/LintTest.html");
         testSuite.addTestPage("../../../tests/LintTest.html");
         return testSuite;

Added: trunk/tests/archive/LintTest.html
===================================================================
--- trunk/tests/archive/LintTest.html	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/archive/LintTest.html	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/archive/LintTest.js
===================================================================
--- trunk/tests/archive/LintTest.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/archive/LintTest.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,69 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "DeltaArchive.js",
+    "StubArchive.js"];
+  var prefix = "../../../source/archive/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/model/LintTest.js
===================================================================
--- trunk/tests/model/LintTest.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/model/LintTest.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -56,15 +56,11 @@
 function testJsLintOnOpenRecordCode() {
   var listOfSourceCodeFiles = [
     "ContentRecord.js",
-    "DeltaVirtualServer.js",
     "Entry.js",
-    "FileSaver.js",
-    "HttpSaver.js",
     "Item.js",
     "Ordinal.js",
     "QueryRunner.js",
     "Record.js",
-    "StubVirtualServer.js",
     "Transaction.js",
     "Vote.js",
     "World.js"];

Modified: trunk/tests/model/ModelTest.js
===================================================================
--- trunk/tests/model/ModelTest.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/model/ModelTest.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -33,7 +33,7 @@
 // 
 /*global Util */
 /*global World, Item, Entry */
-/*global StubVirtualServer */
+/*global StubArchive */
 /*global assertTrue, assertFalse, setUp, tearDown */
 // -------------------------------------------------------------------
 
@@ -49,14 +49,14 @@
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.model.World");
-  dojo.require("orp.model.StubVirtualServer");
+  dojo.require("orp.archive.StubArchive");
   dojo.require("orp.util.DateValue");
 
   ModelTestVars = {};
 
   var pathToTrunkDirectory = "../..";
-  var stubVirtualServer = new orp.model.StubVirtualServer(pathToTrunkDirectory);
-  world = new orp.model.World(stubVirtualServer);
+  var stubArchive = new orp.archive.StubArchive(pathToTrunkDirectory);
+  world = new orp.model.World(stubArchive);
 }
 
 function tearDown() {

Modified: trunk/tests/model/RepositoryWritingTest.js
===================================================================
--- trunk/tests/model/RepositoryWritingTest.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/model/RepositoryWritingTest.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -44,15 +44,15 @@
 function setUp() {
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.require("orp.model.DeltaVirtualServer");
+  dojo.require("orp.archive.DeltaArchive");
   dojo.require("orp.model.World");
 
   utilAssertReportedError = false;
   orp.util.setErrorReportCallback(errorReporter)
 
   var isHttp = window.location.protocol == "http:";
-  saver = isHttp? new orp.model.HttpSaver(fileName, pathToTrunkDirectoryFromThisDirectory) 
-                : new orp.model.FileSaver(fileName, pathToTrunkDirectoryFromThisDirectory);
+  saver = isHttp? new orp.storage.HttpStorage(fileName, pathToTrunkDirectoryFromThisDirectory) 
+                : new orp.storage.FileStorage(fileName, pathToTrunkDirectoryFromThisDirectory);
 
   // Examples of what window.location.pathname should look like:
   // for http: protocol: /openrecord/trunk/source/model/TestRepositoryWriting.html
@@ -109,14 +109,14 @@
 }
 
 function testCreateNewRepository() {
-  var virtualServer = new orp.model.DeltaVirtualServer(fileName, pathToTrunkDirectoryFromThisDirectory);
+  var virtualServer = new orp.archive.DeltaArchive(fileName, pathToTrunkDirectoryFromThisDirectory);
   var overwriteIfExists = true;
   virtualServer._createNewRepository(overwriteIfExists);
   assertTrue("Contents should be '{ \"format\": \"2005_JUNE_CHRONOLOGICAL_LIST\", ...'.", fileHasExpectedContents(expectedRepositoryHeader));
 }
 
 function testAppendToRepository() {
-  var virtualServer = new orp.model.DeltaVirtualServer(fileName, pathToTrunkDirectoryFromThisDirectory);
+  var virtualServer = new orp.archive.DeltaArchive(fileName, pathToTrunkDirectoryFromThisDirectory);
   var overwriteIfExists = true;
   virtualServer._createNewRepository(overwriteIfExists);
   var world = new orp.model.World(virtualServer);

Modified: trunk/tests/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/tests/model/TestReorderingForSpecialCases.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/model/TestReorderingForSpecialCases.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -35,7 +35,7 @@
 // 
 /*global Util */
 /*global World, Item, Entry */
-/*global StubVirtualServer */
+/*global StubArchive */
 /*global assertTrue, assertFalse, setUp, tearDown */
 // -------------------------------------------------------------------
 
@@ -50,16 +50,16 @@
 function setUp() {
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.require("orp.model.StubVirtualServer");
+  dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");
 
   var pathToTrunkDirectory = "../..";
-  var virtualServer = new orp.model.StubVirtualServer(pathToTrunkDirectory);
+  var archive = new orp.archive.StubArchive(pathToTrunkDirectory);
 
-  realUuidGenerator = orp.model.StubVirtualServer.prototype._generateUuid;
-  orp.model.StubVirtualServer.prototype._generateUuid = mockUuidGenerator;
+  realUuidGenerator = orp.archive.StubArchive.prototype._generateUuid;
+  orp.archive.StubArchive.prototype._generateUuid = mockUuidGenerator;
 
-  world = new orp.model.World(virtualServer);
+  world = new orp.model.World(archive);
 
   annUuid1 = "10000000-2222-1333-F444-555555555555";
   annUuid2 = "10000001-2222-1333-F444-555555555555";
@@ -108,7 +108,7 @@
   var pesto = world.newItem("Pesto");
   var guava = world.newItem("Guava");
 
-  orp.model.StubVirtualServer.prototype._generateUuid = realUuidGenerator;
+  orp.archive.StubArchive.prototype._generateUuid = realUuidGenerator;
   
   assertTrue(sushi.getOrdinalNumber() == pesto.getOrdinalNumber());
   
@@ -140,11 +140,11 @@
   assertTrue('Sushi and Pesto have same timestamp', sushi.getTimestamp() == pesto.getTimestamp());
   assertTrue('Sushi and Guava have same timestamp', sushi.getTimestamp() == guava.getTimestamp());
 
-  orp.model.StubVirtualServer.prototype._generateUuid = realUuidGenerator;
+  orp.archive.StubArchive.prototype._generateUuid = realUuidGenerator;
 
   guava.reorderBetween(sushi, pesto);
 
-  orp.model.StubVirtualServer.prototype._generateUuid = mockUuidGenerator;
+  orp.archive.StubArchive.prototype._generateUuid = mockUuidGenerator;
 
   sushiLinkUuid    = "60000000-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(sushiLinkUuid);
@@ -155,7 +155,7 @@
   guavaLinkUuid    = "60000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(guavaLinkUuid);
   
-  orp.model.StubVirtualServer.prototype._generateUuid = realUuidGenerator;
+  orp.archive.StubArchive.prototype._generateUuid = realUuidGenerator;
 
   guava.assignToCategory(categoryCalledFood);
 

Modified: trunk/tests/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -35,7 +35,7 @@
 // 
 /*global Util */
 /*global World, Item, Entry */
-/*global StubVirtualServer */
+/*global StubArchive */
 /*global assertTrue, assertFalse, setUp, tearDown */
 // -------------------------------------------------------------------
 
@@ -54,23 +54,23 @@
 function setUp() {
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.require("orp.model.StubVirtualServer");
+  dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");
   
   ContentRecord = orp.model.ContentRecord;
 
   var pathToTrunkDirectory = "../..";
-  var virtualServer = new orp.model.StubVirtualServer(pathToTrunkDirectory);
-  var realUuidGenerator = orp.model.StubVirtualServer.prototype._generateUuid;
-  orp.model.StubVirtualServer.prototype._generateUuid = mockUuidGenerator;
+  var archive = new orp.archive.StubArchive(pathToTrunkDirectory);
+  var realUuidGenerator = orp.archive.StubArchive.prototype._generateUuid;
+  orp.archive.StubArchive.prototype._generateUuid = mockUuidGenerator;
 /*
-You can use DeltaVirtualServer instead if you want to append all transactions to a file for debugging purposes.
+You can use DeltaArchive instead if you want to append all transactions to a file for debugging purposes.
 Note that the tests will run a lot slower if you do.
 
-  var virtualServer = new orp.model.DeltaVirtualServer("OrdinalsTest", pathToTrunkDirectory, {"_generateUuid":mockUuidGenerator});
+  var archive = new orp.archive.DeltaArchive("OrdinalsTest", pathToTrunkDirectory, {"_generateUuid":mockUuidGenerator});
 */
 
-  world = new orp.model.World(virtualServer);
+  world = new orp.model.World(archive);
 
   annUuid1 = "10000000-2222-1333-F444-555555555555";
   annUuid2 = "10000001-2222-1333-F444-555555555555";
@@ -130,7 +130,7 @@
   mockUuidGenerator.queueOfUuids.push(taffyLinkUuid);
   taffy.assignToCategory(categoryCalledFood);
 
-  orp.model.StubVirtualServer.prototype._generateUuid = realUuidGenerator;
+  orp.archive.StubArchive.prototype._generateUuid = realUuidGenerator;
 }
 
 function tearDown() {

Added: trunk/tests/storage/LintTest.html
===================================================================
--- trunk/tests/storage/LintTest.html	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/storage/LintTest.html	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/storage/LintTest.js
===================================================================
--- trunk/tests/storage/LintTest.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/storage/LintTest.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -0,0 +1,69 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "FileStorage.js",
+    "HttpStorage.js"];
+  var prefix = "../../../source/storage/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.js
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -42,7 +42,7 @@
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.require("orp.util.XmlConverter");
   dojo.require("orp.util.Util");
-  dojo.require("orp.model.StubVirtualServer");
+  dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");
 
   XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
@@ -52,7 +52,7 @@
   // var pathToTrunkDirectoryFromThisFile = "../../../";
   var pathToTrunkDirectoryFromThisFile = "../..";
   
-  var virtualServer = new orp.model.StubVirtualServer(pathToTrunkDirectoryFromThisFile);  
+  var virtualServer = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
   world = new orp.model.World(virtualServer);
   var annsPassword = "Ann's password";
   var userAnn = world.newUser("Ann Doe", annsPassword);

Modified: trunk/tests/util/XmlConverterTest.js
===================================================================
--- trunk/tests/util/XmlConverterTest.js	2005-10-04 00:32:22 UTC (rev 346)
+++ trunk/tests/util/XmlConverterTest.js	2005-10-04 01:33:56 UTC (rev 347)
@@ -40,7 +40,7 @@
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.require("orp.util.XmlConverter");
   dojo.require("orp.util.Util");
-  dojo.require("orp.model.StubVirtualServer");
+  dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");
 
   XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
@@ -50,7 +50,7 @@
   // var pathToTrunkDirectoryFromThisFile = "../../../";
   pathToTrunkDirectoryFromThisFile = "../..";
   
-  var virtualServer = new orp.model.StubVirtualServer(pathToTrunkDirectoryFromThisFile);  
+  var virtualServer = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
   world = new orp.model.World(virtualServer);
   var annsPassword = "Ann's password";
   var userAnn = world.newUser("Ann Doe", annsPassword);



From skinner at berlios.de  Tue Oct  4 04:13:13 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 4 Oct 2005 04:13:13 +0200
Subject: [openrecord-svn] r348 - in trunk: source/storage tests/storage
Message-ID: <200510040213.j942DDta026190@sheep.berlios.de>

Author: skinner
Date: 2005-10-04 04:13:10 +0200 (Tue, 04 Oct 2005)
New Revision: 348

Added:
   trunk/source/storage/FakeStorage.js
   trunk/source/storage/Storage.js
Modified:
   trunk/source/storage/FileStorage.js
   trunk/source/storage/HttpStorage.js
   trunk/tests/storage/LintTest.js
Log:
Created a new FakeStorage.js class, and a new Storage.js class that serves as an abstract superclass for all the storage classes.

Added: trunk/source/storage/FakeStorage.js
===================================================================
--- trunk/source/storage/FakeStorage.js	2005-10-04 01:33:56 UTC (rev 347)
+++ trunk/source/storage/FakeStorage.js	2005-10-04 02:13:10 UTC (rev 348)
@@ -0,0 +1,101 @@
+/*****************************************************************************
+ Storage.js
+  
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.FakeStorage");
+dojo.require("orp.storage.Storage");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The Storage class is the abstract superclass for the other storage 
+ * classes, including FileStorage and HttpStorage.
+ *
+ * @param    repositoryName                         // e.g. demo_page
+ * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
+ * @scope    public instance constructor
+ */
+orp.storage.FakeStorage = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
+  orp.storage.Storage.call(this, repositoryName, pathToTrunkDirectoryFromWindowLocation);
+  
+  this._fakeFileContents = "";
+};
+
+dj_inherits(orp.storage.FakeStorage, orp.storage.Storage);  // makes FakeStorage be a subclass of Storage
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Appends text to a file.
+ *
+ * @param    textToWrite      A string with the text to append to the file.
+ * @scope    public instance method
+ */
+orp.storage.FakeStorage.prototype.appendText = function(textToAppend) {
+  this._fakeFileContents += textToAppend;
+};
+
+
+/**
+ * Writes text to a file, completely replacing the contents of the file.
+ *
+ * @param    textToWrite      A string with the text to write to the file.
+ * @param    overwriteIfExists      A boolean.  True to overwrite any existing file, or false to exit if there's an existing file.  
+ * @scope    public instance method
+ */
+orp.storage.FakeStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  if (overwriteIfExists || !this._fakeFileContents) {
+    this._fakeFileContents = textToWrite;
+  }
+};
+
+
+/**
+ * Returns any text that was added using appendText() or writeText().
+ *
+ * @scope    public instance method
+ * @return   Returns any text that was added using appendText() or writeText().
+ */
+orp.storage.FakeStorage.prototype.getFileContents = function() {
+  return this._fakeFileContents;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/storage/FileStorage.js
===================================================================
--- trunk/source/storage/FileStorage.js	2005-10-04 01:33:56 UTC (rev 347)
+++ trunk/source/storage/FileStorage.js	2005-10-04 02:13:10 UTC (rev 348)
@@ -55,9 +55,14 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.storage.FileStorage");
+dojo.require("orp.storage.Storage");
 dojo.require("orp.archive.DeltaArchive");
 dojo.require("orp.lang.Lang");
 
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
 /**
  * The FileStorage class knows how to save text to a local file.
  *
@@ -66,15 +71,15 @@
  * @scope    public instance constructor
  */
 orp.storage.FileStorage = function(repositoryName, pathToTrunkDirectory) {
-  this._repositoryName = repositoryName;
+  orp.storage.Storage.call(this, repositoryName, pathToTrunkDirectory);
   
   // Step 1: Build the fileUrl
   // 
   // Our saveTextToFile() method needs a fileUrl that looks like this:
   //   fileUrl = "K:\\www\\htdocs\\openrecord\\demo\\current\\trunk\\repositories\\demo_page.json";
   // 
-  // We start with a value in this._repositoryName that looks like this:
-  //   this._repositoryName == "demo_page"
+  // We start with a value in this.getRepositoryName() that looks like this:
+  //   this.getRepositoryName() == "demo_page"
 
   // URLs like these don't work:
   //   fileUrl = "repositories/demo_page.json";
@@ -87,11 +92,17 @@
     listOfAdditions.push(pathToTrunkDirectory);
   }
   listOfAdditions.push(orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY);
-  listOfAdditions.push(this._repositoryName + ".json");
+  listOfAdditions.push(this.getRepositoryName() + ".json");
   this._fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
 };
 
+dj_inherits(orp.storage.FileStorage, orp.storage.Storage);  // makes FileStorage be a subclass of Storage
 
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
 /**
  * Appends text to a file.
  *
@@ -102,11 +113,22 @@
   this._saveTextToFile(textToAppend, this._fileUrl, append);
 };
 
+
+/**
+ * Writes text to a file, completely replacing the contents of the file.
+ *
+ * @scope    public instance method
+ */
 orp.storage.FileStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
   var append = false;
   this._saveTextToFile(textToWrite, this._fileUrl, append);
 };
 
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
 /**
  * Save the text to the file at the given URL.
  *

Modified: trunk/source/storage/HttpStorage.js
===================================================================
--- trunk/source/storage/HttpStorage.js	2005-10-04 01:33:56 UTC (rev 347)
+++ trunk/source/storage/HttpStorage.js	2005-10-04 02:13:10 UTC (rev 348)
@@ -33,6 +33,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.storage.HttpStorage");
+dojo.require("orp.storage.Storage");
 
 
 // -------------------------------------------------------------------
@@ -47,7 +48,8 @@
  * @scope    public instance constructor
  */
 orp.storage.HttpStorage = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
-  this._repositoryName = repositoryName;
+  orp.storage.Storage.call(this, repositoryName, pathToTrunkDirectoryFromWindowLocation);
+
   var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
   var arrayOfPathComponents = thisUrl.split('/');
   arrayOfPathComponents.pop();
@@ -59,16 +61,21 @@
   }
 };
 
+dj_inherits(orp.storage.HttpStorage, orp.storage.Storage);  // makes HttpStorage be a subclass of Storage
 
+
 // -------------------------------------------------------------------
 // Public methods
 // -------------------------------------------------------------------
 
 /**
+ * Appends text to a file.
+ *
+ * @scope    public instance method
  */
 orp.storage.HttpStorage.prototype.appendText = function(textToAppend) {
   var url = this._completePathToTrunkDirectory;
-  url += "/source/model/append_to_repository_file.php?file=" + this._repositoryName;
+  url += "/source/model/append_to_repository_file.php?file=" + this.getRepositoryName();
   
   // PENDING: 
   // It might be more efficient to re-use the XMLHttpRequestObject,
@@ -85,10 +92,13 @@
 
 
 /**
+ * Writes text to a file, completely replacing the contents of the file.
+ *
+ * @scope    public instance method
  */
 orp.storage.HttpStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
   var url = this._completePathToTrunkDirectory;
-  url += "/source/model/write_to_repository_file.php?file=" + this._repositoryName;
+  url += "/source/model/write_to_repository_file.php?file=" + this.getRepositoryName();
   if (overwriteIfExists) {
     url += "&overwrite=T";
   }

Added: trunk/source/storage/Storage.js
===================================================================
--- trunk/source/storage/Storage.js	2005-10-04 01:33:56 UTC (rev 347)
+++ trunk/source/storage/Storage.js	2005-10-04 02:13:10 UTC (rev 348)
@@ -0,0 +1,108 @@
+/*****************************************************************************
+ Storage.js
+  
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.storage.Storage");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The Storage class is the abstract superclass for the other storage 
+ * classes, including FileStorage and HttpStorage.
+ *
+ * @param    repositoryName                         // e.g. demo_page
+ * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
+ * @scope    public instance constructor
+ */
+orp.storage.Storage = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
+  this._repositoryName = repositoryName;
+  this._pathToTrunkDirectory = pathToTrunkDirectoryFromWindowLocation;
+};
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the _repositoryName value provided in the constructor.
+ *
+ * @scope    public instance method
+ */
+orp.storage.Storage.prototype.getRepositoryName = function() {
+  return this._repositoryName;
+};
+ 
+
+/**
+ * Returns the _pathToTrunkDirectory value provided in the constructor.
+ *
+ * @scope    public instance method
+ */
+orp.storage.Storage.prototype.getPathToTrunkDirectory = function() {
+  return this._pathToTrunkDirectory;
+};
+ 
+
+/**
+ * Appends text to a file.
+ *
+ * @param    textToWrite      A string with the text to append to the file.
+ * @scope    public instance method
+ */
+orp.storage.Storage.prototype.appendText = function(textToAppend) {
+  // Storage is an abstract superclass.
+  // This method must be implemented by the subclasses.
+  dj_unimplemented("appendText");
+};
+
+
+/**
+ * Writes text to a file, completely replacing the contents of the file.
+ *
+ * @param    textToWrite      A string with the text to write to the file.
+ * @param    overwriteIfExists      A boolean.  True to overwrite any existing file, or false to exit if there's an existing file.  
+ * @scope    public instance method
+ */
+orp.storage.Storage.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  // Storage is an abstract superclass.
+  // This method must be implemented by the subclasses.
+  dj_unimplemented("writeText");
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/storage/LintTest.js
===================================================================
--- trunk/tests/storage/LintTest.js	2005-10-04 01:33:56 UTC (rev 347)
+++ trunk/tests/storage/LintTest.js	2005-10-04 02:13:10 UTC (rev 348)
@@ -55,6 +55,8 @@
 
 function testJsLintOnOpenRecordCode() {
   var listOfSourceCodeFiles = [
+    "Storage.js",
+    "FakeStorage.js",
     "FileStorage.js",
     "HttpStorage.js"];
   var prefix = "../../../source/storage/";



From skinner at berlios.de  Wed Oct  5 05:23:45 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 5 Oct 2005 05:23:45 +0200
Subject: [openrecord-svn] r349 - in trunk: source/archive source/model source/storage tests/archive tests/util
Message-ID: <200510050323.j953NjMq025592@sheep.berlios.de>

Author: skinner
Date: 2005-10-05 05:23:29 +0200 (Wed, 05 Oct 2005)
New Revision: 349

Added:
   trunk/source/archive/JsonDeserializer.js
   trunk/source/archive/JsonSerializer.js
   trunk/source/archive/TextEncoding.js
Modified:
   trunk/source/archive/DeltaArchive.js
   trunk/source/archive/StubArchive.js
   trunk/source/model/World.js
   trunk/source/storage/HttpStorage.js
   trunk/tests/archive/LintTest.js
   trunk/tests/util/XmlConverterTest.js
Log:
Moved the Serialization and Deserialization code out of StubArchive and DeltaArchive and into their own classes.  Also fixed a bug in HttpStorage.js.

Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/source/archive/DeltaArchive.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -39,6 +39,9 @@
 dojo.require("orp.storage.FileStorage");
 dojo.require("orp.storage.HttpStorage");
 dojo.require("orp.lang.Lang");
+dojo.require("orp.archive.JsonSerializer");
+dojo.require("orp.archive.JsonDeserializer");
+dojo.require("orp.archive.Bootstrapper");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -122,7 +125,11 @@
  * @param    jsonRepositoryString    A JSON string literal representing the world of items. 
  */
 orp.archive.DeltaArchive.prototype._loadWorldFromJsonString = function(jsonRepositoryString) {
-
+  var bootstrapper = new orp.archive.Bootstrapper(this);
+  var deserializer = new orp.archive.JsonDeserializer(bootstrapper);
+  deserializer.deserializeFromString(jsonRepositoryString);
+  
+  /*
   // load the list of records
   orp.lang.assertType(jsonRepositoryString, String);
   var dehydratedRecords = null;
@@ -136,283 +143,12 @@
   var listOfUsers = null;
   
   this._rehydrateRecords(listOfRecords);
+  */
 };
 
 
 /**
- * Given a string, returns a copy of the string that is less than
- * 80 characters long.
- *
  * @scope    private instance method
- * @param    string    A string that may need truncating.
- * @return   A string that is no longer than 80 characters long.
- */
-orp.archive.DeltaArchive.prototype._truncateString = function(string) {
-  var maxLength = 80;
-  var ellipsis = "...";
-  var returnString = "";
-  if (string.length > maxLength) {
-    returnString = (string.substring(0, (maxLength - ellipsis.length)) + ellipsis);
-  } else {
-    returnString = string;
-  }
-  return this.encodeText(returnString);
-};
-
-
-/**
- * Returns a big string, containing JavaScript "object literal"
- * representations of all of the records in a Transaction.
- *
- * @scope    private instance method
- * @param    transaction    A transaction object.
- * @return   A JSON string literal, representing the records in the transaction. 
- */
-orp.archive.DeltaArchive.prototype._getJsonStringRepresentingTransaction = function(transaction) {
-  var indent = "  ";
-  var listOfRecords = transaction.getRecords();
-  if (!listOfRecords || listOfRecords.length === 0) {
-    return "";
-  }
-  
-  if (listOfRecords.length == 1) {
-    return this._getJsonStringRepresentingRecords(listOfRecords, indent);
-  } else {
-    indent = "    ";
-    var listOfStrings = [];
-    listOfStrings.push("  // =======================================================================\n");
-    listOfStrings.push('  { "' + orp.archive.StubArchive.JSON_MEMBER.TRANSACTION_CLASS + '": [\n');
-    var content = this._getJsonStringRepresentingRecords(transaction.getRecords(), indent);
-    listOfStrings.push(content);
-    listOfStrings.push('  ]\n');
-    listOfStrings.push('  }');
-    
-    var finalString = listOfStrings.join("");
-    return finalString;
-  }
-};
-
-
-/**
- *
- */
-orp.archive.DeltaArchive.prototype._getTypedDisplayStringForItem = function(item) {
-  var returnString = "(";
-  if (item) {
-    if (item instanceof orp.model.Item) {
-      var category = item.getFirstCategory();
-      if (category) {
-        returnString += this._truncateString(category.getDisplayString("???")) + ": ";
-      }
-      returnString += this._truncateString(item.getDisplayString("???"));
-    }
-    if (item instanceof orp.model.Entry) {
-      returnString += "Entry";
-    }
-  }
-  returnString += ")";
-  return returnString;
-};
-
-  
-/**
- * Returns a big string, containing JavaScript "object literal"
- * representations of the records.
- *
- * @scope    private instance method
- * @param    listOfRecords    A list of the records to include in the JSON string.
- * @param    indent    Optional. A string of spaces to prepend to each line.
- * @return   A JSON string literal, representing the records. 
- */
-orp.archive.DeltaArchive.prototype._getJsonStringRepresentingRecords = function(listOfRecords, indent) {
-  indent = indent || "";
-  var i;
-  var listOfStrings = [];
-  var firstContentRecord = true;
-  var itemDisplayNameSubstring;
-  var entryDisplayNameSubstring;
-  var listOfUsers = null;
-  var commentString;
-  var generateComments = false;
-  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
-
-  if (!generateComments) {
-    indent = "";
-  }
-  
-  for (i in listOfRecords) {
-    var record = listOfRecords[i];
-    if (firstContentRecord) {
-      firstContentRecord = false;
-    } else {
-      listOfStrings.push(',\n');
-    }
-    if (generateComments) {
-      listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
-    }
-    
-    if (record instanceof orp.model.Item) {
-      var item = record;
-      if (generateComments) {
-        listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(item) + '\n');
-        listOfStrings.push(indent + '//           by (' + this._truncateString(item.getUserstamp().getDisplayString()) + ')');
-        listOfStrings.push(' on (' + orp.util.DateValue.getStringMonthDayYear(item.getCreationDate()) + ')\n');
-      }
-      if (!this._jsonFragmentForItemPrefix) {
-        this._jsonFragmentForItemPrefix = indent + '{ "' + JSON_MEMBER.ITEM_CLASS + '": ';
-        this._jsonFragmentForItemPrefix += '{ "' + JSON_MEMBER.UUID + '": ';
-      }
-      listOfStrings.push(this._jsonFragmentForItemPrefix);
-      listOfStrings.push(item._getUuidInQuotes());
-      listOfStrings.push(' } }');
-      
-      if (!listOfUsers) {
-        listOfUsers = this.getUsers();
-      }
-      if (orp.util.isObjectInSet(item, listOfUsers)) {
-        var user = item;
-        var password = this._hashTableOfUserAuthenticationInfo[user.getUuid()];
-        var passwordString = "null";
-        if (password) {
-          passwordString = '"' + password + '"';
-        }
-        listOfStrings.push(',\n');
-        if (generateComments) {
-          listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
-          listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(user) + '\n');
-        }
-        listOfStrings.push(indent + '{ "' + JSON_MEMBER.USER_CLASS + '": ' + '{\n');
-        listOfStrings.push(indent + '         "' + JSON_MEMBER.USER + '": ' + user._getUuidInQuotes() + ',\n');
-        listOfStrings.push(indent + '     "' + JSON_MEMBER.PASSWORD + '": ' + passwordString + ' }\n');
-        listOfStrings.push(indent + '}');
-      }
-    }
-
-    if (record instanceof orp.model.Vote) {
-      var vote = record;
-      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(vote.getContentRecord());
-      var deleteVsRetainString = vote.getRetainFlag() ? "RETAIN" : "DELETE";
-      if (generateComments) {
-        listOfStrings.push(indent + '// vote to ' + deleteVsRetainString + " " + entryDisplayNameSubstring + '\n');
-      }
-      listOfStrings.push(indent + '{ "' + JSON_MEMBER.VOTE_CLASS + '": ' + '{\n');
-      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + vote._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + vote.getContentRecord()._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '   "' + JSON_MEMBER.RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
-      listOfStrings.push('  }\n');
-      listOfStrings.push(indent + '}');
-    }
-
-    if (record instanceof orp.model.Ordinal) {
-      var ordinal = record;
-      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(ordinal.getContentRecord());
-      if (generateComments) {
-        listOfStrings.push(indent + '// ordinal # ' + ordinal.getOrdinalNumber() + " for " + entryDisplayNameSubstring + '\n');
-      }
-      listOfStrings.push(indent + '{ "' + JSON_MEMBER.ORDINAL_CLASS + '": ' + '{' + '\n');
-      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + ordinal._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + ordinal.getContentRecord()._getUuidInQuotes() + ',\n');
-      listOfStrings.push(indent + '        "' + JSON_MEMBER.ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
-      listOfStrings.push('  }\n');
-      listOfStrings.push(indent + '}');
-    }
-
-    if (record instanceof orp.model.Entry) {
-      var entry = record;
-      var entryType = entry.getType();
-      var typeUuid = entryType.getUuid();
-      // var entryString = "";
-      if (generateComments) {
-        listOfStringsForEntry = [];
-      } else {
-        listOfStringsForEntry = listOfStrings;
-      }
-      listOfStringsForEntry.push(indent + '{ "' + JSON_MEMBER.ENTRY_CLASS + '": ' + '{\n');
-      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + entry._getUuidInQuotes() + ',\n');
-      var previousEntry = entry.getPreviousEntry();
-      if (previousEntry) {
-        listOfStringsForEntry.push(indent + '"' + JSON_MEMBER.PREVIOUS_VALUE + '": ' + previousEntry._getUuidInQuotes() + ',\n');
-      }
-      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.TYPE + '": "' + typeUuid.toString() + '",\n');
-      if (generateComments) {
-        commentString = "";
-      }
-      if (typeUuid.toString() == orp.model.World.UUID.TYPE_CONNECTION) {
-        var pairOfItems = entry.getItem();
-        var firstItem = pairOfItems[0];
-        var secondItem = pairOfItems[1];
-        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": [' + firstItem._getUuidInQuotes() + ', ' + secondItem._getUuidInQuotes() + '],\n');
-        var pairOfAttributes = entry.getAttribute();
-        var firstAttribute = pairOfAttributes[0];
-        var secondAttribute = pairOfAttributes[1];
-        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": [' + firstAttribute._getUuidInQuotes() + ', ' + secondAttribute._getUuidInQuotes() + ']');
-        if (generateComments) {
-          commentString += indent + '// ' + this._getTypedDisplayStringForItem(firstItem);
-          commentString += ".(" + this._truncateString(firstAttribute.getDisplayString("???")) + ")";
-          commentString += " = " + this._getTypedDisplayStringForItem(secondItem) + "\n";
-          commentString += indent + '// ' + this._getTypedDisplayStringForItem(secondItem);
-          commentString += ".(" + this._truncateString(secondAttribute.getDisplayString("???")) + ")";
-          commentString += " = " + this._getTypedDisplayStringForItem(firstItem) + "\n";
-        }
-      } else {
-        var attribute = entry.getAttribute();
-        // if (!(attribute instanceof orp.model.Item)) {
-        //   alert(entry + "\n" + attribute);
-        // }
-        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": ' + attribute._getUuidInQuotes() + ',\n');
-        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": ' + entry.getItem()._getUuidInQuotes() + ',\n');
-        var contentData = entry.getValue();
-        
-        var valueString = null;
-        var valueComment = null;
-        switch (typeUuid.toString()) {
-          case orp.model.World.UUID.TYPE_NUMBER: 
-            valueString = '"' + contentData + '"';
-            if (generateComments) {valueComment = contentData;}
-            break;
-          case orp.model.World.UUID.TYPE_TEXT: 
-            valueString = '"' + this.encodeText(contentData) + '"';
-            if (generateComments) {valueComment = '"' + this._truncateString(contentData) + '"';}
-            break;
-          case orp.model.World.UUID.TYPE_DATE: 
-            valueString = '"' + contentData.toString() + '"';
-            if (generateComments) {valueComment = valueString;}
-            break;
-          case orp.model.World.UUID.TYPE_ITEM: 
-            valueString = contentData._getUuidInQuotes();
-            if (generateComments) {valueComment = this._getTypedDisplayStringForItem(contentData);}
-            break;
-          default:
-            orp.lang.assert(false, "no such type: " + entryType.getDisplayString());
-        }
-        listOfStringsForEntry.push(indent + '        "' + JSON_MEMBER.VALUE + '": ' + valueString);
-        if (generateComments) {
-          commentString += indent + '// ' + this._getTypedDisplayStringForItem(entry.getItem());
-          commentString += ".(" + this._truncateString(attribute.getDisplayString("???")) + ")";
-          commentString += " = " + valueComment + "\n";
-        }
-      }
-      if (generateComments) {
-        commentString += indent + '//           by (' + this._truncateString(entry.getUserstamp().getDisplayString()) + ')';
-        commentString += ' on (' + orp.util.DateValue.getStringMonthDayYear(entry.getCreationDate()) + ')\n';
-        listOfStrings.push(commentString);
-        for (var j in listOfStringsForEntry) {
-          listOfStrings.push(listOfStringsForEntry[j]);
-        }
-      }
-      // listOfStrings.push(entryString);
-      listOfStrings.push('  }\n');
-      listOfStrings.push(indent + '}');
-    }
-  }
-  
-  var finalString = listOfStrings.join("");
-  return finalString;
-};
-
-
-/**
- * @scope    private instance method
  * @param    overwriteIfExists    Optional
  * @return   success
  */
@@ -479,7 +215,8 @@
   }
 
   if (this._saverObject) {
-    var textToAppend = ",\n" + this._getJsonStringRepresentingTransaction(currentTransaction);
+    var jsonSerializer = new orp.archive.JsonSerializer(this);
+    var textToAppend = ",\n" + jsonSerializer.serializeToString(currentTransaction);
     this._saverObject.appendText(textToAppend);
   } else {
     if (!this._hasEverFailedToSaveFlag) {

Added: trunk/source/archive/JsonDeserializer.js
===================================================================
--- trunk/source/archive/JsonDeserializer.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/source/archive/JsonDeserializer.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -0,0 +1,242 @@
+/*****************************************************************************
+ JsonDeserializer.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.archive.JsonDeserializer");
+dojo.require("orp.archive.TextEncoding");
+dojo.require("orp.archive.StubArchive");      // FIXME: we should try to remove this dependency
+dojo.require("orp.archive.Bootstrapper");
+dojo.require("orp.util.DateValue");
+dojo.require("orp.lang.Lang");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The JsonDeserializer class knows how to take a JSON string 
+ * representing data model records and deserialize them back into 
+ * records in the in-memory model.  The service that the 
+ * JsonDeserializer class provides the inverse of what the 
+ * JsonSerializer class provides.
+ *
+ * @scope    public instance constructor
+ * @param    bootstrapper    The orp.archive.StubArchive instance that this serializer is working for.
+ */
+orp.archive.JsonDeserializer = function(bootstrapper) {
+  this._bootstrapper = bootstrapper;
+};
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a JSON string containing a serialized representation of data
+ * model records, this method reads the string and creates corresponding
+ * records.
+ *
+ * @scope    private instance method
+ * @param    jsonString    A JSON string containing serialized records. 
+ */
+orp.archive.JsonDeserializer.prototype.deserializeFromString = function(jsonString) {
+  var dehydratedRecords = null;
+  dehydratedRecords = eval("(" + jsonString + ")");
+  
+  orp.lang.assertType(dehydratedRecords, Object);
+  var recordFormat = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.FORMAT];
+  orp.lang.assert(recordFormat == orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
+  var listOfRecords = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.RECORDS];
+  orp.lang.assertType(listOfRecords, Array);
+  
+  this._rehydrateRecords(listOfRecords);
+};
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the bootstrapper object we were provided with in our constructor.
+ *
+ * @scope    private instance method
+ * @return   The bootstrapper object we were given in our constructor.
+ */
+orp.archive.JsonDeserializer.prototype._getBootstrapper = function() {
+  return this._bootstrapper;
+};
+
+
+/**
+ * Given a dehydrated list of records, rehydrates each of the records.
+ *
+ * @scope    private instance method
+ * @param    listOfDehydratedRecords    A list of dehydrated records. 
+ */
+orp.archive.JsonDeserializer.prototype._rehydrateRecords = function(listOfDehydratedRecords) {
+  var key;
+  var itemUuid;
+  var item;
+  var contentRecordUuid;
+  var contentRecord;
+  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
+  var bootstrapper = this._getBootstrapper();
+  var world = bootstrapper.getWorld();
+
+  for (key in listOfDehydratedRecords) {
+    var dehydratedRecord = listOfDehydratedRecords[key];
+
+    var dehydratedTransaction = dehydratedRecord[JSON_MEMBER.TRANSACTION_CLASS];
+    if (dehydratedTransaction) {
+      var listOfRecordsInTransaction = dehydratedTransaction;
+      this._rehydrateRecords(listOfRecordsInTransaction);
+    } else {
+      var dehydratedItem = dehydratedRecord[JSON_MEMBER.ITEM_CLASS];
+      var dehydratedUser = dehydratedRecord[JSON_MEMBER.USER_CLASS];
+      var dehydratedVote = dehydratedRecord[JSON_MEMBER.VOTE_CLASS];
+      var dehydratedOrdinal = dehydratedRecord[JSON_MEMBER.ORDINAL_CLASS];
+      var dehydratedEntry = dehydratedRecord[JSON_MEMBER.ENTRY_CLASS];
+        
+      if (dehydratedItem) {
+        itemUuid = dehydratedItem[JSON_MEMBER.UUID];
+        item = bootstrapper.getItemFromUuidOrBootstrapItem(itemUuid);
+        bootstrapper.addRecordToChronologicalList(item);
+      }
+      
+      if (dehydratedUser) {
+        var userUuid = dehydratedUser[JSON_MEMBER.USER];
+        var userPasswordHash = dehydratedUser[JSON_MEMBER.PASSWORD];
+        var user = bootstrapper.getItemFromUuidOrBootstrapItem(userUuid);
+        bootstrapper.addUserToListOfUsers(user, userPasswordHash);
+      }
+      
+      if (dehydratedVote) {
+        var voteUuid = dehydratedVote[JSON_MEMBER.UUID];
+        var retainFlagString = dehydratedVote[JSON_MEMBER.RETAIN_FLAG];
+        var retainFlag = null;
+        if (retainFlagString == "true") {
+          retainFlag = true;
+        }
+        if (retainFlagString == "false") {
+          retainFlag = false;
+        }
+        orp.lang.assert(retainFlag !== null);
+        contentRecordUuid = dehydratedVote[JSON_MEMBER.RECORD];
+        contentRecord = bootstrapper.getContentRecordFromUuid(contentRecordUuid);
+        var vote = new orp.model.Vote(world, voteUuid, contentRecord, retainFlag);
+        bootstrapper.addRecordToChronologicalList(vote);
+      }
+      
+      if (dehydratedOrdinal) {
+        var ordinalUuid = dehydratedOrdinal[JSON_MEMBER.UUID];
+        var ordinalNumber = dehydratedOrdinal[JSON_MEMBER.ORDINAL_NUMBER];
+        contentRecordUuid = dehydratedOrdinal[JSON_MEMBER.RECORD];
+        contentRecord = bootstrapper.getContentRecordFromUuid(contentRecordUuid);
+        var ordinal = new orp.model.Ordinal(world, ordinalUuid, contentRecord, ordinalNumber);
+        bootstrapper.addRecordToChronologicalList(ordinal);
+      }
+      
+      if (dehydratedEntry) {
+        var entryUuid = dehydratedEntry[JSON_MEMBER.UUID];
+        var entry = bootstrapper.getEntryFromUuidOrBootstrapEntry(entryUuid);
+        var previousEntryUuid = dehydratedEntry[JSON_MEMBER.PREVIOUS_VALUE];
+        var previousEntry = null;
+        if (previousEntryUuid) {
+          previousEntry = bootstrapper.getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
+        }
+ 
+        var dataTypeUuid = dehydratedEntry[JSON_MEMBER.TYPE];
+        var dataType = bootstrapper.getItemFromUuidOrBootstrapItem(dataTypeUuid);
+        
+        if (dataTypeUuid == orp.model.World.UUID.TYPE_CONNECTION) {
+          var listOfItemUuids = dehydratedEntry[JSON_MEMBER.ITEM];
+          var firstItemUuid = listOfItemUuids[0];
+          var secondItemUuid = listOfItemUuids[1];
+          var firstItem = bootstrapper.getItemFromUuidOrBootstrapItem(firstItemUuid);
+          var secondItem = bootstrapper.getItemFromUuidOrBootstrapItem(secondItemUuid);
+
+          var listOfAttributeUuids = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
+          var firstAttributeUuid = listOfAttributeUuids[0];
+          var secondAttributeUuid = listOfAttributeUuids[1];
+          var firstAttribute = bootstrapper.getItemFromUuidOrBootstrapItem(firstAttributeUuid);
+          var secondAttribute = bootstrapper.getItemFromUuidOrBootstrapItem(secondAttributeUuid);
+          
+          var pairOfItems = [firstItem, secondItem];
+          var pairOfAttributes = [firstAttribute, secondAttribute];
+          entry._rehydrate(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
+        } else {
+          itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
+          item = bootstrapper.getItemFromUuidOrBootstrapItem(itemUuid);
+          var attributeUuid = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
+          var attribute = null;
+          if (attributeUuid) {
+            attribute = bootstrapper.getItemFromUuidOrBootstrapItem(attributeUuid);
+          } else {
+            orp.lang.assert(false); // the attributeUuid should always be there
+          }
+          var rawData = dehydratedEntry[JSON_MEMBER.VALUE];
+          var finalData = null;
+          switch (dataTypeUuid) {
+            case orp.model.World.UUID.TYPE_ITEM:
+              finalData = bootstrapper.getItemFromUuidOrBootstrapItem(rawData);
+              break;
+            case orp.model.World.UUID.TYPE_TEXT:
+              finalData = orp.archive.TextEncoding.decodeText(rawData);
+              break;
+            case orp.model.World.UUID.TYPE_NUMBER:
+              finalData = parseFloat(rawData);
+              break;
+            case orp.model.World.UUID.TYPE_DATE:
+              finalData = new orp.util.DateValue(rawData);
+              // if (!finalData.isValid()) {
+              //   alert(rawData + " " + finalData);
+              // }
+              orp.lang.assert(finalData.isValid());
+              break;
+            default:
+              orp.lang.assert(false, 'Unknown data type while _rehydrating()');
+          }
+          entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
+        }
+        bootstrapper.addRecordToChronologicalList(entry);
+      }
+      
+    }
+  }
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/archive/JsonSerializer.js
===================================================================
--- trunk/source/archive/JsonSerializer.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/source/archive/JsonSerializer.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -0,0 +1,355 @@
+/*****************************************************************************
+ JsonSerializer.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+  
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.archive.JsonSerializer");
+dojo.require("orp.archive.TextEncoding");
+dojo.require("orp.archive.StubArchive");    // FIXME: we should try to remove this dependency
+dojo.require("orp.model.Transaction");
+dojo.require("orp.util.DateValue");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The JsonSerializer class knows how to take records in our 
+ * model and serialize them into a JSON string representation.
+ * The service that the JsonSerializer class provides the 
+ * inverse of what the JsonDeserializer class provides.
+ *
+ * @scope    public instance constructor
+ * @param    archive    The orp.archive.StubArchive instance that this serializer is working for.
+ */
+orp.archive.JsonSerializer = function(archive) {
+  this._archive = archive;  // FIXME: we should try to remove this dependency on orp.archive.StubArchive
+};
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a big string, containing JavaScript "object literal"
+ * representations of all of the records in a Transaction.
+ *
+ * @scope    public instance method
+ * @param    transaction    An orp.model.Transaction object. 
+ * @return   A JSON string literal, representing the records in the transaction. 
+ */
+orp.archive.JsonSerializer.prototype.serializeToString = function(transaction) {
+  orp.lang.assert(transaction instanceof orp.model.Transaction);
+  
+  var indent = "  ";
+  var listOfRecords = transaction.getRecords();
+  if (!listOfRecords || listOfRecords.length === 0) {
+    return "";
+  }
+  
+  if (listOfRecords.length == 1) {
+    return this._getJsonStringRepresentingRecords(listOfRecords, indent);
+  } else {
+    indent = "    ";
+    var listOfStrings = [];
+    listOfStrings.push("  // =======================================================================\n");
+    listOfStrings.push('  { "' + orp.archive.StubArchive.JSON_MEMBER.TRANSACTION_CLASS + '": [\n');
+    var content = this._getJsonStringRepresentingRecords(transaction.getRecords(), indent);
+    listOfStrings.push(content);
+    listOfStrings.push('  ]\n');
+    listOfStrings.push('  }');
+    
+    var finalString = listOfStrings.join("");
+    return finalString;
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Private methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a big string, containing JavaScript "object literal"
+ * representations of the records.
+ *
+ * @scope    private instance method
+ * @param    listOfRecords    A list of the records to include in the JSON string.
+ * @param    indent    Optional. A string of spaces to prepend to each line.
+ * @return   A JSON string literal, representing the records. 
+ */
+orp.archive.JsonSerializer.prototype._getJsonStringRepresentingRecords = function(listOfRecords, indent) {
+  indent = indent || "";
+  var i;
+  var listOfStrings = [];
+  var firstContentRecord = true;
+  var itemDisplayNameSubstring;
+  var entryDisplayNameSubstring;
+  var listOfUsers = null;
+  var commentString;
+  var generateComments = false;
+  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
+
+  if (!generateComments) {
+    indent = "";
+  }
+  
+  for (i in listOfRecords) {
+    var record = listOfRecords[i];
+    if (firstContentRecord) {
+      firstContentRecord = false;
+    } else {
+      listOfStrings.push(',\n');
+    }
+    if (generateComments) {
+      listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
+    }
+    
+    if (record instanceof orp.model.Item) {
+      var item = record;
+      if (generateComments) {
+        listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(item) + '\n');
+        listOfStrings.push(indent + '//           by (' + this._truncateString(item.getUserstamp().getDisplayString()) + ')');
+        listOfStrings.push(' on (' + orp.util.DateValue.getStringMonthDayYear(item.getCreationDate()) + ')\n');
+      }
+      if (!this._jsonFragmentForItemPrefix) {
+        this._jsonFragmentForItemPrefix = indent + '{ "' + JSON_MEMBER.ITEM_CLASS + '": ';
+        this._jsonFragmentForItemPrefix += '{ "' + JSON_MEMBER.UUID + '": ';
+      }
+      listOfStrings.push(this._jsonFragmentForItemPrefix);
+      listOfStrings.push(item._getUuidInQuotes());
+      listOfStrings.push(' } }');
+      
+      if (!listOfUsers) {
+        listOfUsers = this._archive.getUsers();
+      }
+      if (orp.util.isObjectInSet(item, listOfUsers)) {
+        var user = item;
+        var password = this._archive.getAuthenticationInfoForUser(user);
+        var passwordString = "null";
+        if (password) {
+          passwordString = '"' + password + '"';
+        }
+        listOfStrings.push(',\n');
+        if (generateComments) {
+          listOfStrings.push(indent + '// -----------------------------------------------------------------------\n');
+          listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(user) + '\n');
+        }
+        listOfStrings.push(indent + '{ "' + JSON_MEMBER.USER_CLASS + '": ' + '{\n');
+        listOfStrings.push(indent + '         "' + JSON_MEMBER.USER + '": ' + user._getUuidInQuotes() + ',\n');
+        listOfStrings.push(indent + '     "' + JSON_MEMBER.PASSWORD + '": ' + passwordString + ' }\n');
+        listOfStrings.push(indent + '}');
+      }
+    }
+
+    if (record instanceof orp.model.Vote) {
+      var vote = record;
+      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(vote.getContentRecord());
+      var deleteVsRetainString = vote.getRetainFlag() ? "RETAIN" : "DELETE";
+      if (generateComments) {
+        listOfStrings.push(indent + '// vote to ' + deleteVsRetainString + " " + entryDisplayNameSubstring + '\n');
+      }
+      listOfStrings.push(indent + '{ "' + JSON_MEMBER.VOTE_CLASS + '": ' + '{\n');
+      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + vote._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + vote.getContentRecord()._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '   "' + JSON_MEMBER.RETAIN_FLAG + '": "' + vote.getRetainFlag() + '"');
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
+    }
+
+    if (record instanceof orp.model.Ordinal) {
+      var ordinal = record;
+      entryDisplayNameSubstring = this._getTypedDisplayStringForItem(ordinal.getContentRecord());
+      if (generateComments) {
+        listOfStrings.push(indent + '// ordinal # ' + ordinal.getOrdinalNumber() + " for " + entryDisplayNameSubstring + '\n');
+      }
+      listOfStrings.push(indent + '{ "' + JSON_MEMBER.ORDINAL_CLASS + '": ' + '{' + '\n');
+      listOfStrings.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + ordinal._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '       "' + JSON_MEMBER.RECORD + '": ' + ordinal.getContentRecord()._getUuidInQuotes() + ',\n');
+      listOfStrings.push(indent + '        "' + JSON_MEMBER.ORDINAL_NUMBER + '": "' + ordinal.getOrdinalNumber() + '"');
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
+    }
+
+    if (record instanceof orp.model.Entry) {
+      var entry = record;
+      var entryType = entry.getType();
+      var typeUuid = entryType.getUuid();
+      // var entryString = "";
+      if (generateComments) {
+        listOfStringsForEntry = [];
+      } else {
+        listOfStringsForEntry = listOfStrings;
+      }
+      listOfStringsForEntry.push(indent + '{ "' + JSON_MEMBER.ENTRY_CLASS + '": ' + '{\n');
+      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.UUID + '": ' + entry._getUuidInQuotes() + ',\n');
+      var previousEntry = entry.getPreviousEntry();
+      if (previousEntry) {
+        listOfStringsForEntry.push(indent + '"' + JSON_MEMBER.PREVIOUS_VALUE + '": ' + previousEntry._getUuidInQuotes() + ',\n');
+      }
+      listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.TYPE + '": "' + typeUuid.toString() + '",\n');
+      if (generateComments) {
+        commentString = "";
+      }
+      if (typeUuid.toString() == orp.model.World.UUID.TYPE_CONNECTION) {
+        var pairOfItems = entry.getItem();
+        var firstItem = pairOfItems[0];
+        var secondItem = pairOfItems[1];
+        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": [' + firstItem._getUuidInQuotes() + ', ' + secondItem._getUuidInQuotes() + '],\n');
+        var pairOfAttributes = entry.getAttribute();
+        var firstAttribute = pairOfAttributes[0];
+        var secondAttribute = pairOfAttributes[1];
+        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": [' + firstAttribute._getUuidInQuotes() + ', ' + secondAttribute._getUuidInQuotes() + ']');
+        if (generateComments) {
+          commentString += indent + '// ' + this._getTypedDisplayStringForItem(firstItem);
+          commentString += ".(" + this._truncateString(firstAttribute.getDisplayString("???")) + ")";
+          commentString += " = " + this._getTypedDisplayStringForItem(secondItem) + "\n";
+          commentString += indent + '// ' + this._getTypedDisplayStringForItem(secondItem);
+          commentString += ".(" + this._truncateString(secondAttribute.getDisplayString("???")) + ")";
+          commentString += " = " + this._getTypedDisplayStringForItem(firstItem) + "\n";
+        }
+      } else {
+        var attribute = entry.getAttribute();
+        // if (!(attribute instanceof orp.model.Item)) {
+        //   alert(entry + "\n" + attribute);
+        // }
+        listOfStringsForEntry.push(indent + '    "' + JSON_MEMBER.ATTRIBUTE + '": ' + attribute._getUuidInQuotes() + ',\n');
+        listOfStringsForEntry.push(indent + '         "' + JSON_MEMBER.ITEM + '": ' + entry.getItem()._getUuidInQuotes() + ',\n');
+        var contentData = entry.getValue();
+        
+        var valueString = null;
+        var valueComment = null;
+        switch (typeUuid.toString()) {
+          case orp.model.World.UUID.TYPE_NUMBER: 
+            valueString = '"' + contentData + '"';
+            if (generateComments) {valueComment = contentData;}
+            break;
+          case orp.model.World.UUID.TYPE_TEXT: 
+            valueString = '"' + orp.archive.TextEncoding.encodeText(contentData) + '"';
+            if (generateComments) {valueComment = '"' + this._truncateString(contentData) + '"';}
+            break;
+          case orp.model.World.UUID.TYPE_DATE: 
+            valueString = '"' + contentData.toString() + '"';
+            if (generateComments) {valueComment = valueString;}
+            break;
+          case orp.model.World.UUID.TYPE_ITEM: 
+            valueString = contentData._getUuidInQuotes();
+            if (generateComments) {valueComment = this._getTypedDisplayStringForItem(contentData);}
+            break;
+          default:
+            orp.lang.assert(false, "no such type: " + entryType.getDisplayString());
+        }
+        listOfStringsForEntry.push(indent + '        "' + JSON_MEMBER.VALUE + '": ' + valueString);
+        if (generateComments) {
+          commentString += indent + '// ' + this._getTypedDisplayStringForItem(entry.getItem());
+          commentString += ".(" + this._truncateString(attribute.getDisplayString("???")) + ")";
+          commentString += " = " + valueComment + "\n";
+        }
+      }
+      if (generateComments) {
+        commentString += indent + '//           by (' + this._truncateString(entry.getUserstamp().getDisplayString()) + ')';
+        commentString += ' on (' + orp.util.DateValue.getStringMonthDayYear(entry.getCreationDate()) + ')\n';
+        listOfStrings.push(commentString);
+        for (var j in listOfStringsForEntry) {
+          listOfStrings.push(listOfStringsForEntry[j]);
+        }
+      }
+      listOfStrings.push('  }\n');
+      listOfStrings.push(indent + '}');
+    }
+  }
+  
+  var finalString = listOfStrings.join("");
+  return finalString;
+};
+
+
+/**
+ * Given an item, this method returns a string with a description of the item.
+ *
+ * Here are some example of what the returned strings look like:
+ * <pre>
+ *   "(Food: Cupcake)"
+ *   "(Attribute: Height)"
+ *   "(Category: Food)"
+ *   "(Category: Things with names that have hundreds of let...)"
+ *   "(Banana)"
+ *   "()"
+ * </pre>
+ *
+ * @scope    private instance method
+ * @param    item    Any item (or entry).
+ * @return   A string with a description of the item. 
+ */
+orp.archive.JsonSerializer.prototype._getTypedDisplayStringForItem = function(item) {
+  var returnString = "(";
+  if (item) {
+    if (item instanceof orp.model.Item) {
+      var category = item.getFirstCategory();
+      if (category) {
+        returnString += this._truncateString(category.getDisplayString("???")) + ": ";
+      }
+      returnString += this._truncateString(item.getDisplayString("???"));
+    }
+    if (item instanceof orp.model.Entry) {
+      returnString += "Entry";
+    }
+  }
+  returnString += ")";
+  return returnString;
+};
+
+  
+/**
+ * Given a string, returns a copy of the string that is less than
+ * 80 characters long.
+ *
+ * @scope    private instance method
+ * @param    string    A string that may need truncating.
+ * @return   A string that is no longer than 80 characters long.
+ */
+orp.archive.JsonSerializer.prototype._truncateString = function(string) {
+  var maxLength = 80;
+  var ellipsis = "...";
+  var returnString = "";
+  if (string.length > maxLength) {
+    returnString = (string.substring(0, (maxLength - ellipsis.length)) + ellipsis);
+  } else {
+    returnString = string;
+  }
+  return orp.archive.TextEncoding.encodeText(returnString);
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/source/archive/StubArchive.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -32,6 +32,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.archive.StubArchive");
+dojo.provide("orp.archive.Bootstrapper");
 dojo.require("orp.model.World");
 dojo.require("orp.model.Item");
 dojo.require("orp.model.Entry");
@@ -39,6 +40,8 @@
 dojo.require("orp.util.TimeBasedUuid");
 dojo.require("orp.util.DateValue");
 dojo.require("orp.lang.Lang");
+dojo.require("orp.archive.TextEncoding");
+dojo.require("orp.archive.JsonDeserializer");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -72,12 +75,6 @@
     this._needCompletePath = false;
     this._dehydratedAxiomFileURL = relUrlForAxiomaticFile;    
   }
-  
-  /*
-  if (optionalDefaultOverrides) {
-    this._processOptionalDefaultOverrides(optionalDefaultOverrides, "Stub");
-  }
-  */
 };
 
 
@@ -109,18 +106,6 @@
   ORDINAL_NUMBER: "value" };
 
 
-/*
-OLD?
-StubArchive.JSON_TYPE_TEXT_VALUE = "TextValue";
-StubArchive.JSON_TYPE_RELATED_UUID = "RelatedUuid";
-StubArchive.JSON_TYPE_NUMBER_VALUE = "NumberValue";
-StubArchive.JSON_TYPE_DATE_VALUE = "DateValue";
-StubArchive.JSON_TYPE_CHECKMARK_VALUE = "CheckMarkValue";
-StubArchive.JSON_TYPE_URL_VALUE = "UrlValue";
-StubArchive.JSON_TYPE_CONNECTION = "Connection";
-*/
-
-
 // -------------------------------------------------------------------
 // Private methods
 // -------------------------------------------------------------------
@@ -160,7 +145,6 @@
  */
 orp.archive.StubArchive.prototype.setWorldAndLoadAxiomaticItems = function(world) {
   this._initialize(world);
-  // this._buildTypeHashTable();
   this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
 };
 
@@ -176,76 +160,8 @@
 };
 
 
-/**
- * Given a text string, this method returns a copy of the text string, 
- * with certain special characters replaced by escape sequences.
- * 
- * For example, given a string like this:
- * <pre>
- *    this.encodeText('The quick <brown> fox & the "lazy" hare.\n');
- * </pre>
- * The return value will be:
- * <pre>
- *    'The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;'
- * </pre>
- * 
- * @scope    public instance method
- * @param    rawText    A text string to encode. 
- * @return   A copy of the rawText string, with the special characters escaped. 
- */
-orp.archive.StubArchive.prototype.encodeText = function(rawText) {
-  // orp.util.assert(orp.util.isString(rawText));
-  orp.lang.assertType(rawText, String);
 
-  var returnString = rawText;
-  // Note: it's important that we do '&' first, otherwise we'll accidentally
-  // replace all the & characters that we add in the following lines.
-  returnString = returnString.replace(new RegExp('&','g'), "&amp;");
-  returnString = returnString.replace(new RegExp('<','g'), "&lt;");
-  returnString = returnString.replace(new RegExp('>','g'), "&gt;");
-  returnString = returnString.replace(new RegExp('"','g'), "&quot;");
-  returnString = returnString.replace(new RegExp('\n','g'), "&#10;");
-  returnString = returnString.replace(new RegExp('\r','g'), "&#13;");
-  return returnString;
-};
 
-
-/**
- * Given a text string that was encoded using encodeText(), this method 
- * returns a decoded copy of the text string, with the encoded escape 
- * sequences now replaced by the original special characters.
- *
- * For example, given a string like this:
- * <pre>
- *    this.decodeText('The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;');
- * </pre>
- * The return value will be:
- * <pre>
- *    'The quick <brown> fox & the "lazy" hare.\n'
- * </pre>
- *
- * @scope    public instance method
- * @param    encodedText    A text string to decode. 
- * @return   A copy of the encodedText string, with the escaped characters replaced by the original special characters. 
- */
-orp.archive.StubArchive.prototype.decodeText = function(encodedText) {
-  // orp.util.assert(orp.util.isString(encodedText));
-  orp.lang.assertType(encodedText, String);
-  
-  var returnString = encodedText;
-  returnString = returnString.replace(new RegExp('&#13;','g'), "\r");
-  returnString = returnString.replace(new RegExp('&#10;','g'), "\n");
-  returnString = returnString.replace(new RegExp('&quot;','g'), '"');
-  returnString = returnString.replace(new RegExp('&gt;','g'), ">");
-  returnString = returnString.replace(new RegExp('&lt;','g'), "<");
-  returnString = returnString.replace(new RegExp('&amp;','g'), "&");
-  // Note: it's important that we do '&amp;' last, otherwise we won't correctly
-  // handle a case like this:
-  //   text = this.decodeText(this.encodeText('&lt;'));
-  return returnString;
-};
-
-
 // -------------------------------------------------------------------
 // Transaction Methods
 // -------------------------------------------------------------------
@@ -318,7 +234,6 @@
   var item = this._createNewItem(observer, false);
   if (name) { 
     var attributeCalledName = this._world.getAttributeCalledName();
-    // item.addEntryForAttribute(attributeCalledName, name);
     item.addEntry({attribute:attributeCalledName, value:name});
   }
   return item;
@@ -561,7 +476,7 @@
   if (password) {
     md5hashOfPassword = orp.util.hex_md5(password);
   }
-  var realAuthentication = this._getAuthenticationInfoForUser(user);
+  var realAuthentication = this.getAuthenticationInfoForUser(user);
   var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);
   
   // PENDING: temporary hack
@@ -723,7 +638,6 @@
       if ((matchingAttribute == attributeCalledCategory) && (match instanceof orp.model.Item) && (match.isInCategory(categoryCalledCategory))) {
         item.assignToCategory(match);
       } else {
-        // item.addEntryForAttribute(matchingAttribute, match);
         item.addEntry({attribute:matchingAttribute, value:match});
       }
     }
@@ -774,23 +688,6 @@
 
 
 /**
- * Given a UUID, returns the item or entry identified by that UUID.
- *
- * @scope    private instance method
- * @param    uuid    The UUID of the item or entry to be returned. 
- * @return   The item or entry identified by the given UUID.
- */
-orp.archive.StubArchive.prototype._getContentRecordFromUuid = function(uuid) {
-  var item = this.getItemFromUuid(uuid);
-  if (item) {
-    return item;
-  } else {
-    return this._hashTableOfEntriesKeyedByUuid[uuid];
-  }
-};
-
-
-/**
  * Returns a newly created UUID.
  *
  * @scope    private instance method
@@ -828,11 +725,11 @@
  * Given an item representing a user, return the authentication info
  * associated with that user.
  *
- * @scope    private instance method
+ * @scope    public instance method
  * @param    user    An item representing a user. 
  * @return   The authentication info for the user.
  */
-orp.archive.StubArchive.prototype._getAuthenticationInfoForUser = function(user) {
+orp.archive.StubArchive.prototype.getAuthenticationInfoForUser = function(user) {
   return this._hashTableOfUserAuthenticationInfo[user.getUuid()];
 };
 
@@ -864,206 +761,156 @@
  * @scope    private instance method
  */
 orp.archive.StubArchive.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
-  // var fileContentString = orp.util.getStringContentsOfFileAtURL(url);
   var fileContentString = dojo.hostenv.getText(url);
-  // orp.util.assert(orp.util.isString(fileContentString));
   orp.lang.assertType(fileContentString, String);
   fileContentString += " ] }";
-
-  var dehydratedRecords = null;
-  eval("dehydratedRecords = " + fileContentString + ";");
-  // orp.util.assert(orp.util.isObject(dehydratedRecords));
-  orp.lang.assertType(dehydratedRecords, Object);
-  var recordFormat = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.FORMAT];
-  orp.lang.assert(recordFormat == orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
-  var listOfRecords = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.RECORDS];
-  // orp.util.assert(orp.util.isArray(listOfRecords));
-  orp.lang.assertType(listOfRecords, Array);
   
-  this._rehydrateRecords(listOfRecords);
+  var bootstrapper = new orp.archive.Bootstrapper(this);
+  
+  var deserializer = new orp.archive.JsonDeserializer(bootstrapper);
+  deserializer.deserializeFromString(fileContentString);
 };
 
 
 /**
+ * Given a UUID, returns the existing entry identified by that UUID. 
+ * 
+ * @scope    private instance method
+ * @param    uuid    The UUID of the entry to be returned. 
+ * @return   The entry identified by the given UUID.
+ */
+orp.archive.StubArchive.prototype._getEntryFromUuid = function(uuid) {
+  return this._hashTableOfEntriesKeyedByUuid[uuid];
+};
+
+
+// -------------------------------------------------------------------
+// Bootstrapper helper class
+// -------------------------------------------------------------------
+
+/**
+ * The Bootstrapper class...
+ *
+ * @scope    public instance constructor
+ * @param    archive    The orp.archive.StubArchive instance that this bootstrapper is working for.
+ */
+orp.archive.Bootstrapper = function(archive) {
+  this._archive = archive;
+};
+
+
+// -------------------------------------------------------------------
+// Bootstrapper private methods 
+// -------------------------------------------------------------------
+
+/**
+ * Returns the instance of orp.archive.StubArchive that this Bootstrapper is working for.
+ *
+ * @scope    private instance method
+ * @return   An instance of orp.archive.StubArchive.
+ */
+orp.archive.Bootstrapper.prototype._getArchive = function() {
+  return this._archive;
+};
+
+
+// -------------------------------------------------------------------
+// Bootstrapper public methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the World instance that this virtual server is using.
+ *
+ * @scope    public instance method
+ * @return   A World object. 
+ */
+orp.archive.Bootstrapper.prototype.getWorld = function() {
+  return this._getArchive().getWorld();
+};
+
+
+
+/**
  * Given a UUID, either (a) returns the existing item identified by that UUID, 
  * or (b) creates an new item object, set its UUID, and returns that object.
  *
- * @scope    private instance method
+ * @scope    public instance method
  * @param    inUuid    The UUID of the item to be returned. 
  * @return   The item identified by the given UUID.
  */
-orp.archive.StubArchive.prototype._getItemFromUuidOrBootstrapItem = function(uuid) {
-  var item = this.getItemFromUuid(uuid);
+orp.archive.Bootstrapper.prototype.getItemFromUuidOrBootstrapItem = function(uuid) {
+  var archive = this._getArchive();
+  
+  var item = archive.getItemFromUuid(uuid);
   if (!item) {
-    item = new orp.model.Item(this.getWorld(), uuid);
-    this._hashTableOfItemsKeyedByUuid[uuid] = item;
+    item = new orp.model.Item(archive.getWorld(), uuid);
+    archive._hashTableOfItemsKeyedByUuid[uuid] = item;
   }
   return item;
 };
 
-/**
- * Given a UUID, returns the existing entry identified by that UUID. 
- * 
- * @scope    private instance method
- * @param    uuid    The UUID of the entry to be returned. 
- * @return   The entry identified by the given UUID.
- */
-orp.archive.StubArchive.prototype._getEntryFromUuid = function(uuid) {
-  return this._hashTableOfEntriesKeyedByUuid[uuid];
-};
 
 /**
  * Given a UUID, either (a) returns the existing entry identified by that UUID, 
  * or (b) creates an new entry object, set its UUID, and returns that object.
  *
- * @scope    private instance method
+ * @scope    public instance method
  * @param    uuid    The UUID of the entry to be returned. 
  * @return   The entry identified by the given UUID.
  */
-orp.archive.StubArchive.prototype._getEntryFromUuidOrBootstrapEntry = function(uuid) {
-  var entry = this._hashTableOfEntriesKeyedByUuid[uuid];
+orp.archive.Bootstrapper.prototype.getEntryFromUuidOrBootstrapEntry = function(uuid) {
+  var archive = this._getArchive();
+
+  var entry = archive._hashTableOfEntriesKeyedByUuid[uuid];
   if (!entry) {
-    entry = new orp.model.Entry(this.getWorld(), uuid);
-    this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
+    entry = new orp.model.Entry(archive.getWorld(), uuid);
+    archive._hashTableOfEntriesKeyedByUuid[uuid] = entry;
   }
   return entry;
 };
 
 
 /**
- * Given a dehydrated list of records, rehydrates each of the records.
+ * Adds a record to the archive's _chronologicalListOfRecords.
  *
- * @scope    private instance method
- * @param    listOfDehydratedRecords    A list of dehydrated records. 
+ * @scope    public instance method
+ * @param    record    An orp.model.Record object. 
  */
-orp.archive.StubArchive.prototype._rehydrateRecords = function(listOfDehydratedRecords) {
-  var key;
-  var itemUuid;
-  var item;
-  var contentRecordUuid;
-  var contentRecord;
-  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
+orp.archive.Bootstrapper.prototype.addRecordToChronologicalList = function(record) {
+  var archive = this._getArchive();
+  archive._chronologicalListOfRecords.push(record);
+};
 
-  for (key in listOfDehydratedRecords) {
-    var dehydratedRecord = listOfDehydratedRecords[key];
 
-    var dehydratedTransaction = dehydratedRecord[JSON_MEMBER.TRANSACTION_CLASS];
-    if (dehydratedTransaction) {
-      var listOfRecordsInTransaction = dehydratedTransaction;
-      this._rehydrateRecords(listOfRecordsInTransaction);
-    } else {
-      var dehydratedItem = dehydratedRecord[JSON_MEMBER.ITEM_CLASS];
-      var dehydratedUser = dehydratedRecord[JSON_MEMBER.USER_CLASS];
-      var dehydratedVote = dehydratedRecord[JSON_MEMBER.VOTE_CLASS];
-      var dehydratedOrdinal = dehydratedRecord[JSON_MEMBER.ORDINAL_CLASS];
-      var dehydratedEntry = dehydratedRecord[JSON_MEMBER.ENTRY_CLASS];
-        
-      if (dehydratedItem) {
-        itemUuid = dehydratedItem[JSON_MEMBER.UUID];
-        item = this._getItemFromUuidOrBootstrapItem(itemUuid);
-        this._chronologicalListOfRecords.push(item);
-      }
-      
-      if (dehydratedUser) {
-        var userUuid = dehydratedUser[JSON_MEMBER.USER];
-        var userPasswordHash = dehydratedUser[JSON_MEMBER.PASSWORD];
-        var user = this._getItemFromUuidOrBootstrapItem(userUuid);
-        this._listOfUsers.push(user);
-        this._hashTableOfUserAuthenticationInfo[user.getUuid()] = userPasswordHash;
-      }
-      
-      if (dehydratedVote) {
-        var voteUuid = dehydratedVote[JSON_MEMBER.UUID];
-        var retainFlagString = dehydratedVote[JSON_MEMBER.RETAIN_FLAG];
-        var retainFlag = null;
-        if (retainFlagString == "true") {
-          retainFlag = true;
-        }
-        if (retainFlagString == "false") {
-          retainFlag = false;
-        }
-        orp.lang.assert(retainFlag !== null);
-        contentRecordUuid = dehydratedVote[JSON_MEMBER.RECORD];
-        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var vote = new orp.model.Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
-        this._chronologicalListOfRecords.push(vote);
-      }
-      
-      if (dehydratedOrdinal) {
-        var ordinalUuid = dehydratedOrdinal[JSON_MEMBER.UUID];
-        var ordinalNumber = dehydratedOrdinal[JSON_MEMBER.ORDINAL_NUMBER];
-        contentRecordUuid = dehydratedOrdinal[JSON_MEMBER.RECORD];
-        contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
-        var ordinal = new orp.model.Ordinal(this.getWorld(), ordinalUuid, contentRecord, ordinalNumber);
-        this._chronologicalListOfRecords.push(ordinal);
-      }
-      
-      if (dehydratedEntry) {
-        var entryUuid = dehydratedEntry[JSON_MEMBER.UUID];
-        var entry = this._getEntryFromUuidOrBootstrapEntry(entryUuid);
-        var previousEntryUuid = dehydratedEntry[JSON_MEMBER.PREVIOUS_VALUE];
-        var previousEntry = null;
-        if (previousEntryUuid) {
-          previousEntry = this._getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
-        }
- 
-        var dataTypeUuid = dehydratedEntry[JSON_MEMBER.TYPE];
-        var dataType = this._getItemFromUuidOrBootstrapItem(dataTypeUuid);
-        
-        if (dataTypeUuid == orp.model.World.UUID.TYPE_CONNECTION) {
-          var listOfItemUuids = dehydratedEntry[JSON_MEMBER.ITEM];
-          var firstItemUuid = listOfItemUuids[0];
-          var secondItemUuid = listOfItemUuids[1];
-          var firstItem = this._getItemFromUuidOrBootstrapItem(firstItemUuid);
-          var secondItem = this._getItemFromUuidOrBootstrapItem(secondItemUuid);
+/**
+ * Adds a user to the archive's _listOfUsers.
+ *
+ * @scope    public instance method
+ * @param    user    An orp.model.Item object. 
+ * @param    userPasswordHash    A string with the user's password hash. 
+ */
+orp.archive.Bootstrapper.prototype.addUserToListOfUsers = function(user, userPasswordHash) {
+  var archive = this._getArchive();
+  archive._listOfUsers.push(user);
+  archive._hashTableOfUserAuthenticationInfo[user.getUuid()] = userPasswordHash;
+};
 
-          var listOfAttributeUuids = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
-          var firstAttributeUuid = listOfAttributeUuids[0];
-          var secondAttributeUuid = listOfAttributeUuids[1];
-          var firstAttribute = this._getItemFromUuidOrBootstrapItem(firstAttributeUuid);
-          var secondAttribute = this._getItemFromUuidOrBootstrapItem(secondAttributeUuid);
-          
-          var pairOfItems = [firstItem, secondItem];
-          var pairOfAttributes = [firstAttribute, secondAttribute];
-          entry._rehydrate(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
-        } else {
-          itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
-          item = this._getItemFromUuidOrBootstrapItem(itemUuid);
-          var attributeUuid = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
-          var attribute = null;
-          if (attributeUuid) {
-            attribute = this._getItemFromUuidOrBootstrapItem(attributeUuid);
-          } else {
-            orp.lang.assert(false); // the attributeUuid should always be there
-          }
-          var rawData = dehydratedEntry[JSON_MEMBER.VALUE];
-          var finalData = null;
-          switch (dataTypeUuid) {
-            case orp.model.World.UUID.TYPE_ITEM:
-              finalData = this._getItemFromUuidOrBootstrapItem(rawData);
-              break;
-            case orp.model.World.UUID.TYPE_TEXT:
-              finalData = this.decodeText(rawData);
-              break;
-            case orp.model.World.UUID.TYPE_NUMBER:
-              finalData = parseFloat(rawData);
-              break;
-            case orp.model.World.UUID.TYPE_DATE:
-              finalData = new orp.util.DateValue(rawData);
-              // if (!finalData.isValid()) {
-              //   alert(rawData + " " + finalData);
-              // }
-              orp.lang.assert(finalData.isValid());
-              break;
-            default:
-              orp.lang.assert(false, 'Unknown data type while _rehydrating()');
-          }
-          entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
-        }
-        this._chronologicalListOfRecords.push(entry);
-      }
-      
-    }
+
+/**
+ * Given a UUID, returns the item or entry identified by that UUID.
+ *
+ * @scope    public instance method
+ * @param    uuid    The UUID of the item or entry to be returned. 
+ * @return   The item or entry identified by the given UUID.
+ */
+orp.archive.Bootstrapper.prototype.getContentRecordFromUuid = function(uuid) {
+  var archive = this._getArchive();
+
+  var item = archive.getItemFromUuid(uuid);
+  if (item) {
+    return item;
+  } else {
+    return archive._hashTableOfEntriesKeyedByUuid[uuid];
   }
 };
 

Added: trunk/source/archive/TextEncoding.js
===================================================================
--- trunk/source/archive/TextEncoding.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/source/archive/TextEncoding.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -0,0 +1,112 @@
+/*****************************************************************************
+ TextEncoding.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.archive.TextEncoding");
+dojo.require("orp.lang.Lang");
+
+
+// -------------------------------------------------------------------
+// Public functions
+// -------------------------------------------------------------------
+
+/**
+ * Given a text string, this method returns a copy of the text string, 
+ * with certain special characters replaced by escape sequences.
+ * 
+ * For example, given a string like this:
+ * <pre>
+ *    this.encodeText('The quick <brown> fox & the "lazy" hare.\n');
+ * </pre>
+ * The return value will be:
+ * <pre>
+ *    'The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;'
+ * </pre>
+ * 
+ * @scope    public instance method
+ * @param    rawText    A text string to encode. 
+ * @return   A copy of the rawText string, with the special characters escaped. 
+ */
+orp.archive.TextEncoding.encodeText = function(rawText) {
+  orp.lang.assertType(rawText, String);
+
+  var returnString = rawText;
+  // Note: it's important that we do '&' first, otherwise we'll accidentally
+  // replace all the & characters that we add in the following lines.
+  returnString = returnString.replace(new RegExp('&','g'), "&amp;");
+  returnString = returnString.replace(new RegExp('<','g'), "&lt;");
+  returnString = returnString.replace(new RegExp('>','g'), "&gt;");
+  returnString = returnString.replace(new RegExp('"','g'), "&quot;");
+  returnString = returnString.replace(new RegExp('\n','g'), "&#10;");
+  returnString = returnString.replace(new RegExp('\r','g'), "&#13;");
+  return returnString;
+};
+
+
+/**
+ * Given a text string that was encoded using encodeText(), this method 
+ * returns a decoded copy of the text string, with the encoded escape 
+ * sequences now replaced by the original special characters.
+ *
+ * For example, given a string like this:
+ * <pre>
+ *    this.decodeText('The quick &lt;brown&gt; fox &amp; the &quot;lazy&quot; hare.&#10;');
+ * </pre>
+ * The return value will be:
+ * <pre>
+ *    'The quick <brown> fox & the "lazy" hare.\n'
+ * </pre>
+ *
+ * @scope    public instance method
+ * @param    encodedText    A text string to decode. 
+ * @return   A copy of the encodedText string, with the escaped characters replaced by the original special characters. 
+ */
+orp.archive.TextEncoding.decodeText = function(encodedText) {
+  orp.lang.assertType(encodedText, String);
+  
+  var returnString = encodedText;
+  returnString = returnString.replace(new RegExp('&#13;','g'), "\r");
+  returnString = returnString.replace(new RegExp('&#10;','g'), "\n");
+  returnString = returnString.replace(new RegExp('&quot;','g'), '"');
+  returnString = returnString.replace(new RegExp('&gt;','g'), ">");
+  returnString = returnString.replace(new RegExp('&lt;','g'), "<");
+  returnString = returnString.replace(new RegExp('&amp;','g'), "&");
+  // Note: it's important that we do '&amp;' last, otherwise we won't correctly
+  // handle a case like this:
+  //   text = this.decodeText(this.encodeText('&lt;'));
+  return returnString;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/source/model/World.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -84,6 +84,7 @@
     server = new orp.archive.DeltaArchive(repositoryName);
   }
   this._virtualServer = server;
+
   server.setWorldAndLoadAxiomaticItems(this);
   this._loadAxiomaticItems();
 };

Modified: trunk/source/storage/HttpStorage.js
===================================================================
--- trunk/source/storage/HttpStorage.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/source/storage/HttpStorage.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -75,7 +75,7 @@
  */
 orp.storage.HttpStorage.prototype.appendText = function(textToAppend) {
   var url = this._completePathToTrunkDirectory;
-  url += "/source/model/append_to_repository_file.php?file=" + this.getRepositoryName();
+  url += "/source/storage/append_to_repository_file.php?file=" + this.getRepositoryName();
   
   // PENDING: 
   // It might be more efficient to re-use the XMLHttpRequestObject,
@@ -98,7 +98,7 @@
  */
 orp.storage.HttpStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
   var url = this._completePathToTrunkDirectory;
-  url += "/source/model/write_to_repository_file.php?file=" + this.getRepositoryName();
+  url += "/source/storage/write_to_repository_file.php?file=" + this.getRepositoryName();
   if (overwriteIfExists) {
     url += "&overwrite=T";
   }

Modified: trunk/tests/archive/LintTest.js
===================================================================
--- trunk/tests/archive/LintTest.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/tests/archive/LintTest.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -55,8 +55,11 @@
 
 function testJsLintOnOpenRecordCode() {
   var listOfSourceCodeFiles = [
+    "StubArchive.js",
     "DeltaArchive.js",
-    "StubArchive.js"];
+    "TextEncoding.js",
+    "JsonSerializer.js",
+    "JsonDeserializer.js"];
   var prefix = "../../../source/archive/";
   var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
   var message = "Lint check \n" + errorReport;

Modified: trunk/tests/util/XmlConverterTest.js
===================================================================
--- trunk/tests/util/XmlConverterTest.js	2005-10-04 02:13:10 UTC (rev 348)
+++ trunk/tests/util/XmlConverterTest.js	2005-10-05 03:23:29 UTC (rev 349)
@@ -50,8 +50,8 @@
   // var pathToTrunkDirectoryFromThisFile = "../../../";
   pathToTrunkDirectoryFromThisFile = "../..";
   
-  var virtualServer = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
-  world = new orp.model.World(virtualServer);
+  var archive = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
+  world = new orp.model.World(archive);
   var annsPassword = "Ann's password";
   var userAnn = world.newUser("Ann Doe", annsPassword);
   world.login(userAnn, annsPassword);



From skinner at berlios.de  Wed Oct  5 05:29:35 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 5 Oct 2005 05:29:35 +0200
Subject: [openrecord-svn] r350 - trunk/documentation
Message-ID: <200510050329.j953TZTQ027581@sheep.berlios.de>

Author: skinner
Date: 2005-10-05 05:29:29 +0200 (Wed, 05 Oct 2005)
New Revision: 350

Modified:
   trunk/documentation/release_planning.txt
Log:
Updated the to-do list.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-05 03:23:29 UTC (rev 349)
+++ trunk/documentation/release_planning.txt	2005-10-05 03:29:29 UTC (rev 350)
@@ -406,10 +406,11 @@
 brian  |          | (0.25+) |  2. replace orpBindAsEventListener() with dojo.event.connect()
        |          |         |  3. move UUID files from source/util to source/uuid
 brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API
-       |          |         |  5. split half the code in source/model off into source/_____
-       |          |         |  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 
-       |          |         |  7. merge StubVirtualServer + DeltaVirtualServer, and re-name
-       |          |         |  8. create a FakeStorage class, + rename FileSaver + HttpSaver
+brian  |          | 0.5  IED|  5. split half the code in source/model off into source/_____
+brian  |          | (0.25+) |  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 
+       |          |         |  7. merge StubArchive + DeltaArchive, and re-name the result
+brian  |          | 0.25 IED|  8. create a FakeStorage class, + rename FileSaver + HttpSaver
+       |          |         |     update unit tests to use the FakeStorage instead of StubArchive
        |          |         |  9. change "endOfLife()" to "destroy()"
        |          |         | 10. Rationalize the View API and document public API
 mignon | 1    IED |         | 11. Rationalize the ViewPlugin API



From skinner at berlios.de  Fri Oct  7 01:23:47 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 7 Oct 2005 01:23:47 +0200
Subject: [openrecord-svn] r351 - trunk/source/archive
Message-ID: <200510062323.j96NNl6g024069@sheep.berlios.de>

Author: skinner
Date: 2005-10-07 01:23:31 +0200 (Fri, 07 Oct 2005)
New Revision: 351

Added:
   trunk/source/archive/JsonFormat.js
Modified:
   trunk/source/archive/DeltaArchive.js
   trunk/source/archive/JsonDeserializer.js
   trunk/source/archive/JsonSerializer.js
   trunk/source/archive/StubArchive.js
Log:
Minor clean-up work on the code in the archive directory.

Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-10-05 03:29:29 UTC (rev 350)
+++ trunk/source/archive/DeltaArchive.js	2005-10-06 23:23:31 UTC (rev 351)
@@ -41,7 +41,7 @@
 dojo.require("orp.lang.Lang");
 dojo.require("orp.archive.JsonSerializer");
 dojo.require("orp.archive.JsonDeserializer");
-dojo.require("orp.archive.Bootstrapper");
+dojo.require("orp.archive.ArchiveLoader");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -103,9 +103,9 @@
     repositoryUrl = this._completePathToTrunkDirectory + '/';
   }
   repositoryUrl += orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY + "/" + repositoryFileName;
-  // var repositoryContentString = orp.util.getStringContentsOfFileAtURL(repositoryUrl);
   var repositoryContentString = dojo.hostenv.getText(repositoryUrl);
-  repositoryContentString += " ] }";
+  var jsonFormat = new orp.archive.JsonFormat();
+  repositoryContentString += jsonFormat.getRepositoryFooter();
 
   this._loadWorldFromJsonString(repositoryContentString);
 };
@@ -125,25 +125,9 @@
  * @param    jsonRepositoryString    A JSON string literal representing the world of items. 
  */
 orp.archive.DeltaArchive.prototype._loadWorldFromJsonString = function(jsonRepositoryString) {
-  var bootstrapper = new orp.archive.Bootstrapper(this);
-  var deserializer = new orp.archive.JsonDeserializer(bootstrapper);
+  var archiveLoader = new orp.archive.ArchiveLoader(this);
+  var deserializer = new orp.archive.JsonDeserializer(archiveLoader);
   deserializer.deserializeFromString(jsonRepositoryString);
-  
-  /*
-  // load the list of records
-  orp.lang.assertType(jsonRepositoryString, String);
-  var dehydratedRecords = null;
-  eval("dehydratedRecords = " + jsonRepositoryString + ";");
-  orp.lang.assertType(dehydratedRecords, Object);
-  var recordFormat = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.FORMAT];
-  orp.lang.assert(recordFormat == orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
-  var listOfRecords = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.RECORDS];
-  orp.lang.assertType(listOfRecords, Array);
-  
-  var listOfUsers = null;
-  
-  this._rehydrateRecords(listOfRecords);
-  */
 };
 
 
@@ -172,11 +156,8 @@
     }
     return false;
   }
-  var text = '{ "format": "' + orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST + '", \n';
-  text +=    '  "records": [\n';
-  text +=    '  // =======================================================================\n';
-  text +=    '  { "Transaction": [ ]\n';
-  text +=    '  }';
+  var jsonSerializer = new orp.archive.JsonSerializer(this);
+  var text = jsonSerializer.getRepositoryHeader();
   return this._saverObject.writeText(text, overwriteIfExists);
 };
 

Modified: trunk/source/archive/JsonDeserializer.js
===================================================================
--- trunk/source/archive/JsonDeserializer.js	2005-10-05 03:29:29 UTC (rev 350)
+++ trunk/source/archive/JsonDeserializer.js	2005-10-06 23:23:31 UTC (rev 351)
@@ -32,9 +32,9 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.archive.JsonDeserializer");
+dojo.require("orp.archive.JsonFormat");
 dojo.require("orp.archive.TextEncoding");
-dojo.require("orp.archive.StubArchive");      // FIXME: we should try to remove this dependency
-dojo.require("orp.archive.Bootstrapper");
+dojo.require("orp.archive.ArchiveLoader");
 dojo.require("orp.util.DateValue");
 dojo.require("orp.lang.Lang");
 
@@ -50,13 +50,16 @@
  * JsonSerializer class provides.
  *
  * @scope    public instance constructor
- * @param    bootstrapper    The orp.archive.StubArchive instance that this serializer is working for.
+ * @param    archiveLoader    The orp.archive.ArchiveLoader instance that this serializer is working for.
  */
-orp.archive.JsonDeserializer = function(bootstrapper) {
-  this._bootstrapper = bootstrapper;
+orp.archive.JsonDeserializer = function(archiveLoader) {
+  orp.archive.JsonFormat.call(this);
+  this._archiveLoader = archiveLoader;
 };
 
+dj_inherits(orp.archive.JsonDeserializer, orp.archive.JsonFormat);  // makes JsonDeserializer be a subclass of JsonFormat
 
+
 // -------------------------------------------------------------------
 // Public methods
 // -------------------------------------------------------------------
@@ -74,9 +77,9 @@
   dehydratedRecords = eval("(" + jsonString + ")");
   
   orp.lang.assertType(dehydratedRecords, Object);
-  var recordFormat = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.FORMAT];
-  orp.lang.assert(recordFormat == orp.archive.StubArchive.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
-  var listOfRecords = dehydratedRecords[orp.archive.StubArchive.JSON_MEMBER.RECORDS];
+  var recordFormat = dehydratedRecords[orp.archive.JsonFormat.JSON_MEMBER.FORMAT];
+  orp.lang.assert(recordFormat == orp.archive.JsonFormat.FILE_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
+  var listOfRecords = dehydratedRecords[orp.archive.JsonFormat.JSON_MEMBER.RECORDS];
   orp.lang.assertType(listOfRecords, Array);
   
   this._rehydrateRecords(listOfRecords);
@@ -88,13 +91,13 @@
 // -------------------------------------------------------------------
 
 /**
- * Returns the bootstrapper object we were provided with in our constructor.
+ * Returns the archiveLoader object we were provided with in our constructor.
  *
  * @scope    private instance method
- * @return   The bootstrapper object we were given in our constructor.
+ * @return   The archiveLoader object we were given in our constructor.
  */
-orp.archive.JsonDeserializer.prototype._getBootstrapper = function() {
-  return this._bootstrapper;
+orp.archive.JsonDeserializer.prototype._getArchiveLoader = function() {
+  return this._archiveLoader;
 };
 
 
@@ -110,9 +113,9 @@
   var item;
   var contentRecordUuid;
   var contentRecord;
-  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
-  var bootstrapper = this._getBootstrapper();
-  var world = bootstrapper.getWorld();
+  var JSON_MEMBER = orp.archive.JsonFormat.JSON_MEMBER;
+  var archiveLoader = this._getArchiveLoader();
+  var world = archiveLoader.getWorld();
 
   for (key in listOfDehydratedRecords) {
     var dehydratedRecord = listOfDehydratedRecords[key];
@@ -130,15 +133,15 @@
         
       if (dehydratedItem) {
         itemUuid = dehydratedItem[JSON_MEMBER.UUID];
-        item = bootstrapper.getItemFromUuidOrBootstrapItem(itemUuid);
-        bootstrapper.addRecordToChronologicalList(item);
+        item = archiveLoader.getItemFromUuidOrBootstrapItem(itemUuid);
+        archiveLoader.addRecordToChronologicalList(item);
       }
       
       if (dehydratedUser) {
         var userUuid = dehydratedUser[JSON_MEMBER.USER];
         var userPasswordHash = dehydratedUser[JSON_MEMBER.PASSWORD];
-        var user = bootstrapper.getItemFromUuidOrBootstrapItem(userUuid);
-        bootstrapper.addUserToListOfUsers(user, userPasswordHash);
+        var user = archiveLoader.getItemFromUuidOrBootstrapItem(userUuid);
+        archiveLoader.addUserToListOfUsers(user, userPasswordHash);
       }
       
       if (dehydratedVote) {
@@ -153,55 +156,55 @@
         }
         orp.lang.assert(retainFlag !== null);
         contentRecordUuid = dehydratedVote[JSON_MEMBER.RECORD];
-        contentRecord = bootstrapper.getContentRecordFromUuid(contentRecordUuid);
+        contentRecord = archiveLoader.getContentRecordFromUuid(contentRecordUuid);
         var vote = new orp.model.Vote(world, voteUuid, contentRecord, retainFlag);
-        bootstrapper.addRecordToChronologicalList(vote);
+        archiveLoader.addRecordToChronologicalList(vote);
       }
       
       if (dehydratedOrdinal) {
         var ordinalUuid = dehydratedOrdinal[JSON_MEMBER.UUID];
         var ordinalNumber = dehydratedOrdinal[JSON_MEMBER.ORDINAL_NUMBER];
         contentRecordUuid = dehydratedOrdinal[JSON_MEMBER.RECORD];
-        contentRecord = bootstrapper.getContentRecordFromUuid(contentRecordUuid);
+        contentRecord = archiveLoader.getContentRecordFromUuid(contentRecordUuid);
         var ordinal = new orp.model.Ordinal(world, ordinalUuid, contentRecord, ordinalNumber);
-        bootstrapper.addRecordToChronologicalList(ordinal);
+        archiveLoader.addRecordToChronologicalList(ordinal);
       }
       
       if (dehydratedEntry) {
         var entryUuid = dehydratedEntry[JSON_MEMBER.UUID];
-        var entry = bootstrapper.getEntryFromUuidOrBootstrapEntry(entryUuid);
+        var entry = archiveLoader.getEntryFromUuidOrBootstrapEntry(entryUuid);
         var previousEntryUuid = dehydratedEntry[JSON_MEMBER.PREVIOUS_VALUE];
         var previousEntry = null;
         if (previousEntryUuid) {
-          previousEntry = bootstrapper.getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
+          previousEntry = archiveLoader.getEntryFromUuidOrBootstrapEntry(previousEntryUuid);
         }
  
         var dataTypeUuid = dehydratedEntry[JSON_MEMBER.TYPE];
-        var dataType = bootstrapper.getItemFromUuidOrBootstrapItem(dataTypeUuid);
+        var dataType = archiveLoader.getItemFromUuidOrBootstrapItem(dataTypeUuid);
         
         if (dataTypeUuid == orp.model.World.UUID.TYPE_CONNECTION) {
           var listOfItemUuids = dehydratedEntry[JSON_MEMBER.ITEM];
           var firstItemUuid = listOfItemUuids[0];
           var secondItemUuid = listOfItemUuids[1];
-          var firstItem = bootstrapper.getItemFromUuidOrBootstrapItem(firstItemUuid);
-          var secondItem = bootstrapper.getItemFromUuidOrBootstrapItem(secondItemUuid);
+          var firstItem = archiveLoader.getItemFromUuidOrBootstrapItem(firstItemUuid);
+          var secondItem = archiveLoader.getItemFromUuidOrBootstrapItem(secondItemUuid);
 
           var listOfAttributeUuids = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
           var firstAttributeUuid = listOfAttributeUuids[0];
           var secondAttributeUuid = listOfAttributeUuids[1];
-          var firstAttribute = bootstrapper.getItemFromUuidOrBootstrapItem(firstAttributeUuid);
-          var secondAttribute = bootstrapper.getItemFromUuidOrBootstrapItem(secondAttributeUuid);
+          var firstAttribute = archiveLoader.getItemFromUuidOrBootstrapItem(firstAttributeUuid);
+          var secondAttribute = archiveLoader.getItemFromUuidOrBootstrapItem(secondAttributeUuid);
           
           var pairOfItems = [firstItem, secondItem];
           var pairOfAttributes = [firstAttribute, secondAttribute];
           entry._rehydrate(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
         } else {
           itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
-          item = bootstrapper.getItemFromUuidOrBootstrapItem(itemUuid);
+          item = archiveLoader.getItemFromUuidOrBootstrapItem(itemUuid);
           var attributeUuid = dehydratedEntry[JSON_MEMBER.ATTRIBUTE];
           var attribute = null;
           if (attributeUuid) {
-            attribute = bootstrapper.getItemFromUuidOrBootstrapItem(attributeUuid);
+            attribute = archiveLoader.getItemFromUuidOrBootstrapItem(attributeUuid);
           } else {
             orp.lang.assert(false); // the attributeUuid should always be there
           }
@@ -209,7 +212,7 @@
           var finalData = null;
           switch (dataTypeUuid) {
             case orp.model.World.UUID.TYPE_ITEM:
-              finalData = bootstrapper.getItemFromUuidOrBootstrapItem(rawData);
+              finalData = archiveLoader.getItemFromUuidOrBootstrapItem(rawData);
               break;
             case orp.model.World.UUID.TYPE_TEXT:
               finalData = orp.archive.TextEncoding.decodeText(rawData);
@@ -229,7 +232,7 @@
           }
           entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
         }
-        bootstrapper.addRecordToChronologicalList(entry);
+        archiveLoader.addRecordToChronologicalList(entry);
       }
       
     }

Added: trunk/source/archive/JsonFormat.js
===================================================================
--- trunk/source/archive/JsonFormat.js	2005-10-05 03:29:29 UTC (rev 350)
+++ trunk/source/archive/JsonFormat.js	2005-10-06 23:23:31 UTC (rev 351)
@@ -0,0 +1,116 @@
+/*****************************************************************************
+ JsonFormat.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.archive.JsonFormat");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * The JsonFormat class knows some basic things about our
+ * JSON repository format.  JsonFormat serves as the base
+ * class for the JsonSerializer and JsonDeserializer.
+ *
+ * @scope    public instance constructor
+ */
+orp.archive.JsonFormat = function() {
+  // no need to do anything
+};
+
+
+// -------------------------------------------------------------------
+// Public methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a string, containing the JavaScript "object literal"
+ * fragment needed as the header for new repositories.
+ *
+ * @scope    public instance method
+ * @return   A JSON fragment used for initializing new repositories. 
+ */
+orp.archive.JsonFormat.prototype.getRepositoryHeader = function() {
+  var text = '{ "format": "' + orp.archive.JsonFormat.FILE_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST + '", \n';
+  text +=    '  "records": [\n';
+  text +=    '  // =======================================================================\n';
+  text +=    '  { "Transaction": [ ]\n';
+  text +=    '  }';
+  return text;
+};
+
+
+/**
+ * Returns a string, containing the JavaScript "object literal" fragment
+ * needed to match the header string returned by getRepositoryHeader().
+ *
+ * @scope    public instance method
+ * @return   A JSON fragment used for initializing new repositories. 
+ */
+orp.archive.JsonFormat.prototype.getRepositoryFooter = function() {
+  return " ] }";
+};
+
+
+// -------------------------------------------------------------------
+// Public constants
+// -------------------------------------------------------------------
+
+orp.archive.JsonFormat.FILE_FORMAT = {
+  FORMAT_2005_JUNE_CHRONOLOGICAL_LIST: "2005_JUNE_CHRONOLOGICAL_LIST" };
+
+orp.archive.JsonFormat.JSON_MEMBER = {
+  FORMAT: "format",
+  RECORDS: "records",
+  TYPE: "type",
+  VALUE: "value",
+  UUID: "uuid",
+  USER: "user",
+  PASSWORD: "password",
+  ITEM_CLASS: "Item",
+  ENTRY_CLASS: "Entry",
+  VOTE_CLASS: "Vote",
+  ORDINAL_CLASS: "Ordinal",
+  USER_CLASS: "User",
+  TRANSACTION_CLASS: "Transaction",
+  ATTRIBUTE: "attribute",
+  PREVIOUS_VALUE: "previousEntry",
+  RECORD: "record",
+  ITEM: "item",
+  RETAIN_FLAG: "retainFlag",
+  ORDINAL_NUMBER: "value" };
+  
+  
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/archive/JsonSerializer.js
===================================================================
--- trunk/source/archive/JsonSerializer.js	2005-10-05 03:29:29 UTC (rev 350)
+++ trunk/source/archive/JsonSerializer.js	2005-10-06 23:23:31 UTC (rev 351)
@@ -32,6 +32,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.archive.JsonSerializer");
+dojo.require("orp.archive.JsonFormat");
 dojo.require("orp.archive.TextEncoding");
 dojo.require("orp.archive.StubArchive");    // FIXME: we should try to remove this dependency
 dojo.require("orp.model.Transaction");
@@ -51,10 +52,13 @@
  * @param    archive    The orp.archive.StubArchive instance that this serializer is working for.
  */
 orp.archive.JsonSerializer = function(archive) {
+  orp.archive.JsonFormat.call(this);
   this._archive = archive;  // FIXME: we should try to remove this dependency on orp.archive.StubArchive
 };
 
+dj_inherits(orp.archive.JsonSerializer, orp.archive.JsonFormat);  // makes JsonSerializer be a subclass of JsonFormat
 
+
 // -------------------------------------------------------------------
 // Public methods
 // -------------------------------------------------------------------
@@ -82,7 +86,7 @@
     indent = "    ";
     var listOfStrings = [];
     listOfStrings.push("  // =======================================================================\n");
-    listOfStrings.push('  { "' + orp.archive.StubArchive.JSON_MEMBER.TRANSACTION_CLASS + '": [\n');
+    listOfStrings.push('  { "' + orp.archive.JsonFormat.JSON_MEMBER.TRANSACTION_CLASS + '": [\n');
     var content = this._getJsonStringRepresentingRecords(transaction.getRecords(), indent);
     listOfStrings.push(content);
     listOfStrings.push('  ]\n');
@@ -117,7 +121,7 @@
   var listOfUsers = null;
   var commentString;
   var generateComments = false;
-  var JSON_MEMBER = orp.archive.StubArchive.JSON_MEMBER;
+  var JSON_MEMBER = orp.archive.JsonFormat.JSON_MEMBER;
 
   if (!generateComments) {
     indent = "";

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-10-05 03:29:29 UTC (rev 350)
+++ trunk/source/archive/StubArchive.js	2005-10-06 23:23:31 UTC (rev 351)
@@ -32,7 +32,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.archive.StubArchive");
-dojo.provide("orp.archive.Bootstrapper");
+dojo.provide("orp.archive.ArchiveLoader");
 dojo.require("orp.model.World");
 dojo.require("orp.model.Item");
 dojo.require("orp.model.Entry");
@@ -79,34 +79,6 @@
 
 
 // -------------------------------------------------------------------
-// Public constants
-// -------------------------------------------------------------------
-orp.archive.StubArchive.JSON_FORMAT = {
-  FORMAT_2005_JUNE_CHRONOLOGICAL_LIST: "2005_JUNE_CHRONOLOGICAL_LIST" };
-
-orp.archive.StubArchive.JSON_MEMBER = {
-  FORMAT: "format",
-  RECORDS: "records",
-  TYPE: "type",
-  VALUE: "value",
-  UUID: "uuid",
-  USER: "user",
-  PASSWORD: "password",
-  ITEM_CLASS: "Item",
-  ENTRY_CLASS: "Entry",
-  VOTE_CLASS: "Vote",
-  ORDINAL_CLASS: "Ordinal",
-  USER_CLASS: "User",
-  TRANSACTION_CLASS: "Transaction",
-  ATTRIBUTE: "attribute",
-  PREVIOUS_VALUE: "previousEntry",
-  RECORD: "record",
-  ITEM: "item",
-  RETAIN_FLAG: "retainFlag",
-  ORDINAL_NUMBER: "value" };
-
-
-// -------------------------------------------------------------------
 // Private methods
 // -------------------------------------------------------------------
 
@@ -763,11 +735,10 @@
 orp.archive.StubArchive.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
   var fileContentString = dojo.hostenv.getText(url);
   orp.lang.assertType(fileContentString, String);
-  fileContentString += " ] }";
   
-  var bootstrapper = new orp.archive.Bootstrapper(this);
-  
-  var deserializer = new orp.archive.JsonDeserializer(bootstrapper);
+  var archiveLoader = new orp.archive.ArchiveLoader(this);
+  var deserializer = new orp.archive.JsonDeserializer(archiveLoader);
+  fileContentString += deserializer.getRepositoryFooter();
   deserializer.deserializeFromString(fileContentString);
 };
 
@@ -785,37 +756,39 @@
 
 
 // -------------------------------------------------------------------
-// Bootstrapper helper class
+// ArchiveLoader helper class
 // -------------------------------------------------------------------
 
 /**
- * The Bootstrapper class...
+ * The ArchiveLoader class provides a "package-level" interface to the 
+ * StubArchive class, which the deserialization code can use to load
+ * serialized records from disk or from over a network.
  *
  * @scope    public instance constructor
- * @param    archive    The orp.archive.StubArchive instance that this bootstrapper is working for.
+ * @param    archive    The orp.archive.StubArchive instance that this ArchiveLoader is working for.
  */
-orp.archive.Bootstrapper = function(archive) {
+orp.archive.ArchiveLoader = function(archive) {
   this._archive = archive;
 };
 
 
 // -------------------------------------------------------------------
-// Bootstrapper private methods 
+// ArchiveLoader private methods 
 // -------------------------------------------------------------------
 
 /**
- * Returns the instance of orp.archive.StubArchive that this Bootstrapper is working for.
+ * Returns the instance of orp.archive.StubArchive that this ArchiveLoader is working for.
  *
  * @scope    private instance method
  * @return   An instance of orp.archive.StubArchive.
  */
-orp.archive.Bootstrapper.prototype._getArchive = function() {
+orp.archive.ArchiveLoader.prototype._getArchive = function() {
   return this._archive;
 };
 
 
 // -------------------------------------------------------------------
-// Bootstrapper public methods
+// ArchiveLoader public methods
 // -------------------------------------------------------------------
 
 /**
@@ -824,7 +797,7 @@
  * @scope    public instance method
  * @return   A World object. 
  */
-orp.archive.Bootstrapper.prototype.getWorld = function() {
+orp.archive.ArchiveLoader.prototype.getWorld = function() {
   return this._getArchive().getWorld();
 };
 
@@ -838,7 +811,7 @@
  * @param    inUuid    The UUID of the item to be returned. 
  * @return   The item identified by the given UUID.
  */
-orp.archive.Bootstrapper.prototype.getItemFromUuidOrBootstrapItem = function(uuid) {
+orp.archive.ArchiveLoader.prototype.getItemFromUuidOrBootstrapItem = function(uuid) {
   var archive = this._getArchive();
   
   var item = archive.getItemFromUuid(uuid);
@@ -858,7 +831,7 @@
  * @param    uuid    The UUID of the entry to be returned. 
  * @return   The entry identified by the given UUID.
  */
-orp.archive.Bootstrapper.prototype.getEntryFromUuidOrBootstrapEntry = function(uuid) {
+orp.archive.ArchiveLoader.prototype.getEntryFromUuidOrBootstrapEntry = function(uuid) {
   var archive = this._getArchive();
 
   var entry = archive._hashTableOfEntriesKeyedByUuid[uuid];
@@ -876,7 +849,7 @@
  * @scope    public instance method
  * @param    record    An orp.model.Record object. 
  */
-orp.archive.Bootstrapper.prototype.addRecordToChronologicalList = function(record) {
+orp.archive.ArchiveLoader.prototype.addRecordToChronologicalList = function(record) {
   var archive = this._getArchive();
   archive._chronologicalListOfRecords.push(record);
 };
@@ -889,7 +862,7 @@
  * @param    user    An orp.model.Item object. 
  * @param    userPasswordHash    A string with the user's password hash. 
  */
-orp.archive.Bootstrapper.prototype.addUserToListOfUsers = function(user, userPasswordHash) {
+orp.archive.ArchiveLoader.prototype.addUserToListOfUsers = function(user, userPasswordHash) {
   var archive = this._getArchive();
   archive._listOfUsers.push(user);
   archive._hashTableOfUserAuthenticationInfo[user.getUuid()] = userPasswordHash;
@@ -903,7 +876,7 @@
  * @param    uuid    The UUID of the item or entry to be returned. 
  * @return   The item or entry identified by the given UUID.
  */
-orp.archive.Bootstrapper.prototype.getContentRecordFromUuid = function(uuid) {
+orp.archive.ArchiveLoader.prototype.getContentRecordFromUuid = function(uuid) {
   var archive = this._getArchive();
 
   var item = archive.getItemFromUuid(uuid);



From skinner at berlios.de  Fri Oct  7 04:47:03 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 7 Oct 2005 04:47:03 +0200
Subject: [openrecord-svn] r352 - in trunk: documentation source source/archive source/model source/util source/uuid tests tests/model tests/util tests/uuid
Message-ID: <200510070247.j972l3qS009307@sheep.berlios.de>

Author: skinner
Date: 2005-10-07 04:46:57 +0200 (Fri, 07 Oct 2005)
New Revision: 352

Added:
   trunk/source/uuid/
   trunk/source/uuid/RandomUuid.js
   trunk/source/uuid/TimeBasedUuid.js
   trunk/source/uuid/Uuid.js
   trunk/source/uuid/factory.js
   trunk/tests/uuid/
   trunk/tests/uuid/LintTest.html
   trunk/tests/uuid/LintTest.js
   trunk/tests/uuid/TestSuite.html
   trunk/tests/uuid/UuidTest.html
   trunk/tests/uuid/UuidTest.js
Removed:
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Uuid.js
   trunk/tests/util/UuidTest.html
   trunk/tests/util/UuidTest.js
Modified:
   trunk/documentation/release_planning.txt
   trunk/source/archive/DeltaArchive.js
   trunk/source/archive/StubArchive.js
   trunk/source/model/Record.js
   trunk/source/util/Util.js
   trunk/tests/TestSuite.html
   trunk/tests/model/MockUuidGenerator.js
   trunk/tests/util/LintTest.js
   trunk/tests/util/TestSuite.html
Log:
Moved the UUID code out of the "util" directory and into a new "uuid" directory.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/documentation/release_planning.txt	2005-10-07 02:46:57 UTC (rev 352)
@@ -404,7 +404,7 @@
 -------+----------+---------+----------------------------------------------
        |          | (0.25+) |  1. try to get djConfig.debugAtAllCosts to work (see sandbox.html)
 brian  |          | (0.25+) |  2. replace orpBindAsEventListener() with dojo.event.connect()
-       |          |         |  3. move UUID files from source/util to source/uuid
+brian  |          | 0.1  IED|  3. move UUID files from source/util to source/uuid
 brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API
 brian  |          | 0.5  IED|  5. split half the code in source/model off into source/_____
 brian  |          | (0.25+) |  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 

Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/archive/DeltaArchive.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -63,8 +63,8 @@
  * @scope    public instance constructor
  * @param    inJsonRepositoryString    A JSON string literal representing the world of items. 
  */
-orp.archive.DeltaArchive = function(repositoryName, pathToTrunkDirectory, optionalDefaultOverrides) {
-  orp.archive.StubArchive.call(this, pathToTrunkDirectory, optionalDefaultOverrides);
+orp.archive.DeltaArchive = function(repositoryName, pathToTrunkDirectory) {
+  orp.archive.StubArchive.call(this, pathToTrunkDirectory);
   this._repositoryName = repositoryName;
   this._pathToTrunkDirectory = "";
   if (pathToTrunkDirectory) {

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/archive/StubArchive.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -37,8 +37,9 @@
 dojo.require("orp.model.Item");
 dojo.require("orp.model.Entry");
 dojo.require("orp.model.Transaction");
-dojo.require("orp.util.TimeBasedUuid");
 dojo.require("orp.util.DateValue");
+// dojo.require("orp.uuid.Uuid");
+dojo.require("orp.uuid.TimeBasedUuid");
 dojo.require("orp.lang.Lang");
 dojo.require("orp.archive.TextEncoding");
 dojo.require("orp.archive.JsonDeserializer");
@@ -494,7 +495,7 @@
  * @return   The item identified by the given UUID.
  */
 orp.archive.StubArchive.prototype.getItemFromUuid = function(uuid, observer) {
-  orp.lang.assert(dojo.lang.isString(uuid) || uuid instanceof orp.util.Uuid);
+  orp.lang.assert(dojo.lang.isString(uuid) || uuid instanceof orp.uuid.Uuid);
   
   var item = this._hashTableOfItemsKeyedByUuid[uuid];
   if (item && observer) {
@@ -667,9 +668,9 @@
  */
 orp.archive.StubArchive.prototype._generateUuid = function(node) {
   if (node) {
-    return new orp.util.TimeBasedUuid({'node': node});
+    return new orp.uuid.TimeBasedUuid({'node': node});
   } else {
-    return new orp.util.TimeBasedUuid();
+    return new orp.uuid.TimeBasedUuid();
   }
 };
 

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/model/Record.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -35,7 +35,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.model.Record");
-dojo.require("orp.util.TimeBasedUuid");
+dojo.require("orp.uuid.TimeBasedUuid");
 dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
@@ -60,15 +60,15 @@
 orp.model.Record = function(world, uuid) {
   if (dojo.lang.isString(uuid)) {
     var uuidString = uuid;
-    uuid = new orp.util.TimeBasedUuid(uuidString);
-    orp.lang.assert(uuid instanceof orp.util.TimeBasedUuid);
+    uuid = new orp.uuid.TimeBasedUuid(uuidString);
+    orp.lang.assert(uuid instanceof orp.uuid.TimeBasedUuid);
   }
 
   // Unfortunately, we need to treat 'world' and 'uuid' as 'Optional'. 
   // I think this constructor is invoked by dj_inherits() calls 
   // (in ContentRecord, Vote, and Ordinal), which do not pass
   // in any values for world and uuid.
-  orp.lang.assertTypeForOptionalValue(uuid, orp.util.TimeBasedUuid);
+  orp.lang.assertTypeForOptionalValue(uuid, orp.uuid.TimeBasedUuid);
   orp.lang.assertTypeForOptionalValue(world, orp.model.World);
   
   this._world = world;

Deleted: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/util/RandomUuid.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -1,147 +0,0 @@
-/*****************************************************************************
- RandomUuid.js
- 
-******************************************************************************
- Written in 2005 by 
-    Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.util.RandomUuid");
-dojo.require("orp.util.Uuid");
-dojo.require("orp.util.Util");
-dojo.require("orp.lang.Lang");
-
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-/*global Util  */
-/*global Uuid  */
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-
-/**
- * The RandomUuid class offers methods for working with 
- * random UUIDs, meaning "version 4" UUIDs.
- * 
- * For more info, see 
- * http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt
- *
- * Examples:
- * <pre>
- *   var uuid = new orp.util.RandomUuid();
- *   var uuid = new orp.util.RandomUuid("3B12F1DF-5232-4804-897E-917BF397618A");
- *   var uuid = new orp.util.RandomUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
- * </pre>
- *
- * @scope    public instance constructor
- * @param    uuidString    A 36-character string that conforms to the UUID spec. 
- * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
- */
-orp.util.RandomUuid = function(namedParameters) {
-  orp.util.Uuid.call(this);
-  var uuidString;
-  if (namedParameters) {
-    if (dojo.lang.isString(namedParameters)) {
-      uuidString = namedParameters;
-    } else {
-      if (dojo.lang.isObject(namedParameters)) {
-        uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
-      } else {
-        orp.lang.assert(false);
-      }
-    }
-    orp.lang.assertType(uuidString, String);
-    this._uuidString = uuidString;
-    orp.lang.assert(this.isValid());
-  } else {
-    this._uuidString = this._generateUuidString();
-  }
-  orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
-};
-
-dj_inherits(orp.util.RandomUuid, orp.util.Uuid);  // makes RandomUuid be a subclass of Uuid
-
-
-// -------------------------------------------------------------------
-// Public instance methods
-// -------------------------------------------------------------------
-
-/**
- * Returns true if the UUID was initialized with a valid value. 
- *
- * @scope    public instance method
- * @return   True if the UUID is valid, or false if it is not.
- */
-orp.util.RandomUuid.prototype.isValid = function() {
-  try {
-    orp.lang.assert(orp.util.Uuid.prototype.isValid.call(this));
-    orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
-    orp.lang.assert(this.getVariant() == orp.util.Uuid.Variant.DCE);
-    return true;
-  } catch (e) {
-    return false;
-  }
-};
-
-
-// -------------------------------------------------------------------
-// Private class methods
-// -------------------------------------------------------------------
-
-/**
- * Generates a random UUID, meaning a "version 4" UUID.  Hopefully this 
- * implementation conforms to the existing standards for UUIDs and GUIDs.  
- * 
- * @scope    public instance method
- * @return   Returns a 36-character string, which will look something like "3B12F1DF-5232-4804-897E-917BF397618A".
- */
-orp.util.RandomUuid.prototype._generateUuidString = function() {
-  var hyphen = "-";
-  var versionCodeForRandomlyGeneratedUuids = "4"; // 8 == binary2hex("0100")
-  var variantCodeForDCEUuids = "8"; // 8 == binary2hex("1000")
-  var a = this._generateRandomEightCharacterHexString();
-  var b = this._generateRandomEightCharacterHexString();
-  b = b.substring(0, 4) + hyphen + versionCodeForRandomlyGeneratedUuids + b.substring(5, 8);
-  var c = this._generateRandomEightCharacterHexString();
-  c = variantCodeForDCEUuids + c.substring(1, 4) + hyphen + c.substring(4, 8);
-  var d = this._generateRandomEightCharacterHexString();
-  var result = a + hyphen + b + hyphen + c + d;
-  
-  return result;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/util/TimeBasedUuid.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -1,547 +0,0 @@
-/*****************************************************************************
- TimeBasedUuid.js
- 
-******************************************************************************
- Written in 2005 by 
-    Brian Douglas Skinner <brian.skinner at gumption.org>
-    Mignon Belongie
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.util.TimeBasedUuid");
-dojo.require("orp.util.Uuid");
-dojo.require("orp.util.Util");
-dojo.require("orp.lang.Lang");
-
-
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-/*global Util  */
-/*global Uuid  */
-// -------------------------------------------------------------------
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-
-/**
- * The TimeBasedUuid class offers methods for working with 
- * time-based UUIDs, meaning "version 1" UUIDs.
- *
- * For more info, see 
- *   http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt
- *   http://www.infonuovo.com/dma/csdocs/sketch/instidid.htm
- *   http://kruithof.xs4all.nl/uuid/uuidgen
- *   http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagcjh_20
- *   http://jakarta.apache.org/commons/sandbox/id/apidocs/org/apache/commons/id/uuid/clock/Clock.html
- *
- * Examples:
- * <pre>
- *   var uuid = new orp.util.TimeBasedUuid();
- *   var uuid = new orp.util.TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A");
- *   var uuid = new orp.util.TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
- *   var uuid = new orp.util.TimeBasedUuid({node: "017BF397618A"});
- *   var uuid = new orp.util.TimeBasedUuid({node: "F17BF397618A"});
- *   var uuid = new orp.util.TimeBasedUuid({hardwareNode: "017BF397618A"});
- *   var uuid = new orp.util.TimeBasedUuid({pseudoNode:   "F17BF397618A"});
- * </pre>
- *
- * @scope    public instance constructor
- * @param    uuidString    A 36-character string that conforms to the UUID spec. 
- * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
- * @namedParam    node    A 12-character hex string representing a pseudoNode or hardwareNode. 
- * @namedParam    hardwareNode    A 12-character hex string containing an IEEE 802.3 network node identificator. 
- * @namedParam    pseudoNode    A 12-character hex string representing a pseudoNode. 
- */
-orp.util.TimeBasedUuid = function(namedParameters) {
-  orp.util.Uuid.call(this);
-  var uuidString;
-  if (namedParameters) {
-    if (dojo.lang.isString(namedParameters)) {
-      uuidString = namedParameters;
-      // orp.lang.assert(uuidString.length == 36);
-      this._uuidString = uuidString;
-    } else {
-      if (dojo.lang.isObject(namedParameters)) {
-        uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-        var node = namedParameters["node"];
-        var pseudoNode = namedParameters["pseudoNode"];
-        var hardwareNode = namedParameters["hardwareNode"];
-        var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
-        orp.lang.assert(atLeastOneParameter);
-        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
-        if (uuidString) {
-          orp.lang.assert(!node && !pseudoNode && !hardwareNode);
-          // orp.lang.assert(uuidString.length == 36);
-          this._uuidString = uuidString;
-        }
-        if (node || pseudoNode || hardwareNode) {
-          orp.lang.assert((node || pseudoNode).length == 12);
-          var firstCharacter = (node || pseudoNode).charAt(0);
-          var firstDigit = parseInt(firstCharacter, orp.util.Uuid.HEX_RADIX);
-          if (hardwareNode) { 
-            orp.lang.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
-          }
-          if (pseudoNode) { 
-            orp.lang.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
-          }
-          this._uuidString = this._generateUuidString(node || pseudoNode || hardwareNode);
-        }
-      } else {
-        orp.lang.assert(false);
-      }
-    }
-    orp.lang.assert(this.isValid());
-  } else {
-    this._uuidString = this._generateUuidString();
-  }
-    
-  orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
-};
-
-dj_inherits(orp.util.TimeBasedUuid, orp.util.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
-
-
-// -------------------------------------------------------------------
-// Public class constants
-// -------------------------------------------------------------------
-// Number of seconds between October 15, 1582 and January 1, 1970:
-// orp.util.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
-//
-// Number of hours between October 15, 1582 and January 1, 1970:
-orp.util.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;
-
-
-// -------------------------------------------------------------------
-// Private class variables
-// -------------------------------------------------------------------
-orp.util.TimeBasedUuid._ourUuidClockSeqString = null;
-orp.util.TimeBasedUuid._ourDateValueOfPreviousUuid = null;
-orp.util.TimeBasedUuid._ourNextIntraMillisecondIncrement = 0;
-
-orp.util.TimeBasedUuid._ourCachedMillisecondsBetween1582and1970 = null;
-orp.util.TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond = null;
-
-
-// -------------------------------------------------------------------
-// Public instance methods
-// -------------------------------------------------------------------
-
-/**
- * Returns true if the UUID was initialized with a valid value. 
- *
- * @scope    public instance method
- * @return   True if the UUID is valid, or false if it is not.
- */
-orp.util.TimeBasedUuid.prototype.isValid = function() {
-  try {
-    orp.lang.assert(orp.util.Uuid.prototype.isValid.call(this));
-    orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
-    orp.lang.assert(this.getVariant() == orp.util.Uuid.Variant.DCE);
-    return true;
-  } catch (e) {
-    return false;
-  }
-};
-
-
-/**
- * Returns a 12-character string with the "node" or "pseudonode" portion of 
- * the UUID, which is the rightmost 12 characters.
- * 
- * @scope    public instance method
- * @return   Returns a 12-character string, which will look something like "917BF397618A".
- */
-orp.util.TimeBasedUuid.prototype.getNode = function() {
-  return orp.util.TimeBasedUuid._getNodeFromUuidString(this._uuidString);
-};
-
-
-/**
- * Returns a JavaScript Date object with a value equal to the value in the
- * time fields of the UUID.
- * 
- * @scope    public instance method
- * @return   Returns a JavaScript Date object.
- */
-orp.util.TimeBasedUuid.prototype.getDate = function() {
-  if (!this._date) {
-    this._date = orp.util.TimeBasedUuid._getDateFromUuidString(this._uuidString);
-  } 
-  return this._date;
-};
-
-
-/**
- * Returns a 15-character string of hex digits that contains the creation
- * timestamp for this UUID, with the high-order bits first.  
- * 
- * @scope    public instance method
- * @return   A 15-character string of hex digits.
- */
-orp.util.TimeBasedUuid.prototype.getTimestampAsHexString = function() {
-  if (!this._timestampAsHexString) {
-    this._timestampAsHexString = orp.util.TimeBasedUuid._getTimestampAsHexString(this.toString());
-  }
-  return this._timestampAsHexString;
-};
-
-
-// -------------------------------------------------------------------
-// Private instance methods
-// -------------------------------------------------------------------
-
-/**
- * Generates a time-based UUID, meaning a "version 1" UUID.  JavaScript
- * code running in a browser doesn't have access to the IEEE 802.3 address
- * of the computer, so we generate a random pseudonode value instead.
- * Hopefully this implementation conforms to the existing standards for 
- * UUIDs and GUIDs.  
- * 
- * @scope    private instance method
- * @param    pseudoNode    Optional. A 12-character string to use as the node in the new UUID.
- * @return   Returns a 36 character string, which will look something like "3B12F1DF-5232-1804-897E-917BF397618A".
- */
-orp.util.TimeBasedUuid.prototype._generateUuidString = function(pseudoNode) {
-  var Uuid          = orp.util.Uuid;
-  var TimeBasedUuid = orp.util.TimeBasedUuid;
-  
-  // orp.util.assert(!pseudoNode || orp.util.isString(pseudoNode));
-  orp.lang.assertTypeForOptionalValue(pseudoNode, String);
-  if (pseudoNode) {
-    orp.lang.assert(pseudoNode.length == 12);  
-  } else {
-    var pseudoNodeIndicatorBit = 0x8000;
-    var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
-    var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(Uuid.HEX_RADIX);
-    pseudoNode = leftmost4HexCharacters + this._generateRandomEightCharacterHexString();
-  }
-  if (!TimeBasedUuid._ourUuidClockSeqString) {
-    var variantCodeForDCEUuids = 0x8000; // 10--------------, i.e. uses only first two of 16 bits.
-    var random14bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 14) );
-    TimeBasedUuid._ourUuidClockSeqString = (variantCodeForDCEUuids | random14bitNumber).toString(Uuid.HEX_RADIX);
-  }
-
-  // Maybe someday think about trying to make the code more readable to
-  // newcomers by creating a class called "WholeNumber" that encapsulates
-  // the methods and data structures for working with these arrays that 
-  // hold 4 16-bit numbers?  And then these variables below have names  
-  // like "wholeSecondsPerHour" rather than "arraySecondsPerHour"?
-  var now = new Date();
-  var nowArray = TimeBasedUuid._get64bitArrayFromFloat(now.valueOf());
-  if (!TimeBasedUuid._ourCachedMillisecondsBetween1582and1970) {
-    var arraySecondsPerHour = TimeBasedUuid._get64bitArrayFromFloat(60 * 60);
-    var arrayHoursBetween1582and1970 = TimeBasedUuid._get64bitArrayFromFloat(TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS);
-    var arraySecondsBetween1582and1970 = TimeBasedUuid._multiplyTwo64bitArrays(arrayHoursBetween1582and1970, arraySecondsPerHour);
-    var arrayMillisecondsPerSecond = TimeBasedUuid._get64bitArrayFromFloat(1000);
-    TimeBasedUuid._ourCachedMillisecondsBetween1582and1970 = TimeBasedUuid._multiplyTwo64bitArrays(arraySecondsBetween1582and1970, arrayMillisecondsPerSecond);
-    TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond = TimeBasedUuid._get64bitArrayFromFloat(10000);
-  }
-  var arrayMillisecondsSince1970 = nowArray;
-  var arrayMillisecondsSince1582 = TimeBasedUuid._addTwo64bitArrays(TimeBasedUuid._ourCachedMillisecondsBetween1582and1970, arrayMillisecondsSince1970);
-  // var arrayMicrosecondsPerMillisecond = TimeBasedUuid._get64bitArrayFromFloat(1000);
-  // var arrayMicrosecondsSince1582 = TimeBasedUuid._multiplyTwo64bitArrays(arrayMillisecondsSince1582, arrayMicrosecondsPerMillisecond);
-  // var arrayHundredNanosecondIntervalsPerMicrosecond = TimeBasedUuid._get64bitArrayFromFloat(10);
-  // var arrayHundredNanosecondIntervalsSince1582 = TimeBasedUuid._multiplyTwo64bitArrays(arrayMicrosecondsSince1582, arrayHundredNanosecondIntervalsPerMicrosecond);
-  var arrayHundredNanosecondIntervalsSince1582 = TimeBasedUuid._multiplyTwo64bitArrays(arrayMillisecondsSince1582, TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond);
-  
-  if (now.valueOf() == TimeBasedUuid._ourDateValueOfPreviousUuid) {
-    arrayHundredNanosecondIntervalsSince1582[3] += TimeBasedUuid._ourNextIntraMillisecondIncrement;
-    TimeBasedUuid._carry(arrayHundredNanosecondIntervalsSince1582);
-    TimeBasedUuid._ourNextIntraMillisecondIncrement += 1;
-    if (TimeBasedUuid._ourNextIntraMillisecondIncrement == 10000) {
-      // If we've gotten to here, it means we've already generated 10,000
-      // UUIDs in this single millisecond, which is the most that the UUID
-      // timestamp field allows for.  So now we'll just sit here and wait
-      // for a fraction of a millisecond, so as to ensure that the next 
-      // time this method is called there will be a different millisecond 
-      // value in the timestamp field.
-      while (now.valueOf() == TimeBasedUuid._ourDateValueOfPreviousUuid) {
-        now = new Date();
-      }
-    }
-  } else {
-    TimeBasedUuid._ourDateValueOfPreviousUuid = now.valueOf();
-    TimeBasedUuid._ourNextIntraMillisecondIncrement = 1;
-  }
-  
-  var hexTimeLowLeftHalf  = arrayHundredNanosecondIntervalsSince1582[2].toString(Uuid.HEX_RADIX);
-  var hexTimeLowRightHalf = arrayHundredNanosecondIntervalsSince1582[3].toString(Uuid.HEX_RADIX);
-  var hexTimeLow = TimeBasedUuid._padWithLeadingZeros(hexTimeLowLeftHalf, 4) + TimeBasedUuid._padWithLeadingZeros(hexTimeLowRightHalf, 4);
-  var hexTimeMid = arrayHundredNanosecondIntervalsSince1582[1].toString(Uuid.HEX_RADIX);
-  hexTimeMid = TimeBasedUuid._padWithLeadingZeros(hexTimeMid, 4);
-  var hexTimeHigh = arrayHundredNanosecondIntervalsSince1582[0].toString(Uuid.HEX_RADIX);
-  hexTimeHigh = TimeBasedUuid._padWithLeadingZeros(hexTimeHigh, 3);
-  var hyphen = "-";
-  var versionCodeForTimeBasedUuids = "1"; // binary2hex("0001")
-  var resultUuid = hexTimeLow + hyphen + hexTimeMid + hyphen +
-        versionCodeForTimeBasedUuids + hexTimeHigh + hyphen +
-        TimeBasedUuid._ourUuidClockSeqString + hyphen + pseudoNode;
-  return resultUuid;
-};
-
-
-// -------------------------------------------------------------------
-// Private class methods
-// -------------------------------------------------------------------
-
-/**
- * Given a 36-character UUID string, this method returns the "node" or 
- * "pseudonode" portion of the UUID, which is the rightmost 12 characters.
- * 
- * @scope    private class method
- * @param    uuidString    A 36-character UUID string.
- * @return   Returns a 12-character string, which will look something like "917BF397618A".
- */
-orp.util.TimeBasedUuid._getNodeFromUuidString = function(uuidString) {
-  var arrayOfStrings = uuidString.split('-');
-  var nodeString = arrayOfStrings[4];
-  return nodeString;
-};
-
-
-/**
- * Given a 36-character UUID string for a time-based UUID, this method 
- * returns a JavaScript Date object.
- * 
- * @scope    private class method
- * @param    uuidString    A 36-character UUID string for a time-based UUID.
- * @return   Returns a JavaScript Date objects
- */
-orp.util.TimeBasedUuid._getDateFromUuidString = function(uuidString) {
-  var Uuid          = orp.util.Uuid;
-  var TimeBasedUuid = orp.util.TimeBasedUuid;
-  
-  var hexTimeLow = uuidString.split('-')[0];
-  var hexTimeMid = uuidString.split('-')[1];
-  var hexTimeHigh = uuidString.split('-')[2];
-  var timeLow = parseInt(hexTimeLow, Uuid.HEX_RADIX);
-  var timeMid = parseInt(hexTimeMid, Uuid.HEX_RADIX);
-  var timeHigh = parseInt(hexTimeHigh, Uuid.HEX_RADIX);
-  var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
-  hundredNanosecondIntervalsSince1582 <<= 16;
-  hundredNanosecondIntervalsSince1582 += timeMid;
-  // What we really want to do next is shift left 32 bits, but the result will be too big
-  // to fit in an int, so we'll multiply by 2^32, and the result will be a floating point approximation.
-  hundredNanosecondIntervalsSince1582 *= 0x100000000;
-  hundredNanosecondIntervalsSince1582 += timeLow;
-  var millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;
-
-  // Again, this will be a floating point approximation.
-  // We can make things exact later if we need to.
-  var secondsPerHour = 60 * 60;
-  var hoursBetween1582and1970 = TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS;
-  var secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;
-  var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
-
-  var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
-
-  var date = new Date(millisecondsSince1970);
-  return date;
-};
-
-
-/**
- * Returns a 15-character string of hex digits that contains the creation
- * timestamp for this UUID, with the high-order bits first.  
- * 
- * @scope    private class method
- * @return   A 15-character string of hex digits.
- */
-orp.util.TimeBasedUuid._getTimestampAsHexString = function(uuidString) {
-  var arrayOfParts = uuidString.split('-');
-  var hexTimeLow = arrayOfParts[0];
-  var hexTimeMid = arrayOfParts[1];
-  var hexTimeHigh = arrayOfParts[2];
-
-  // Chop off the leading "1" character, which is the UUID version number for
-  // time-based UUIDs.
-  hexTimeHigh = hexTimeHigh.slice(1); 
-  
-  var returnString = hexTimeHigh + hexTimeMid + hexTimeLow;
-  
-  orp.lang.assert(returnString.length == 15);
-  return returnString;
-};
-
-
-/**
- * Given an array which holds a 64-bit number broken into 4 16-bit elements,
- * this method carries any excess bits (greater than 16-bits) from each array
- * element into the next.
- *
- * @scope    private class method
- * @param    arrayA    An array with 4 elements, each of which is a 16-bit number.
- */
-orp.util.TimeBasedUuid._carry = function(arrayA) {
-  arrayA[2] += arrayA[3] >>> 16;
-  arrayA[3] &= 0xFFFF;
-  arrayA[1] += arrayA[2] >>> 16;
-  arrayA[2] &= 0xFFFF;
-  arrayA[0] += arrayA[1] >>> 16;
-  arrayA[1] &= 0xFFFF;
-  orp.lang.assert((arrayA[0] >>> 16) === 0);
-};
-
-
-/**
- * Given a floating point number, this method returns an array which holds a 
- * 64-bit number broken into 4 16-bit elements.
- *
- * @scope    private class method
- * @param    x    A floating point number.
- * @return   An array with 4 elements, each of which is a 16-bit number.
- */
-orp.util.TimeBasedUuid._get64bitArrayFromFloat = function(x) {
-  var result = new Array(0, 0, 0, 0);
-  result[3] = x % 0x10000;
-  x -= result[3];
-  x /= 0x10000;
-  result[2] = x % 0x10000;
-  x -= result[2];
-  x /= 0x10000;
-  result[1] = x % 0x10000;
-  x -= result[1];
-  x /= 0x10000;
-  result[0] = x;
-  return result;
-};
-
-
-/**
- * Takes two arrays, each of which holds a 64-bit number broken into 4 
- * 16-bit elements, and returns a new array that holds a 64-bit number
- * that is the sum of the two original numbers.
- *
- * @scope    private class method
- * @param    arrayA    An array with 4 elements, each of which is a 16-bit number.
- * @param    arrayB    An array with 4 elements, each of which is a 16-bit number.
- * @return   An array with 4 elements, each of which is a 16-bit number.
- */
-orp.util.TimeBasedUuid._addTwo64bitArrays = function(arrayA, arrayB) {
-  // orp.util.assert(orp.util.isArray(arrayA));
-  // orp.util.assert(arrayA.length == 4);
-  // orp.util.assert(orp.util.isArray(arrayB));
-  // orp.util.assert(arrayB.length == 4);
-  orp.lang.assertType(arrayA, Array);
-  orp.lang.assertType(arrayB, Array);
-  orp.lang.assert(arrayA.length == 4);
-  orp.lang.assert(arrayB.length == 4);
-
-  var result = new Array(0, 0, 0, 0);
-  result[3] = arrayA[3] + arrayB[3];
-  result[2] = arrayA[2] + arrayB[2];
-  result[1] = arrayA[1] + arrayB[1];
-  result[0] = arrayA[0] + arrayB[0];
-  orp.util.TimeBasedUuid._carry(result);
-  return result;
-};
-
-
-/**
- * Takes two arrays, each of which holds a 64-bit number broken into 4 
- * 16-bit elements, and returns a new array that holds a 64-bit number
- * that is the product of the two original numbers.
- *
- * @scope    private class method
- * @param    arrayA    An array with 4 elements, each of which is a 16-bit number.
- * @param    arrayB    An array with 4 elements, each of which is a 16-bit number.
- * @return   An array with 4 elements, each of which is a 16-bit number.
- */
-orp.util.TimeBasedUuid._multiplyTwo64bitArrays = function(arrayA, arrayB) {
-  var TimeBasedUuid = orp.util.TimeBasedUuid;
-
-  //orp.util.assert(orp.util.isArray(arrayA));
-  //orp.util.assert(arrayA.length == 4);
-  //orp.util.assert(orp.util.isArray(arrayB));
-  //orp.util.assert(arrayB.length == 4);
-  orp.lang.assertType(arrayA, Array);
-  orp.lang.assertType(arrayB, Array);
-  orp.lang.assert(arrayA.length == 4);
-  orp.lang.assert(arrayB.length == 4);
-
-  var overflow = false;
-  if (arrayA[0] * arrayB[0] !== 0) { overflow = true; }
-  if (arrayA[0] * arrayB[1] !== 0) { overflow = true; }
-  if (arrayA[0] * arrayB[2] !== 0) { overflow = true; }
-  if (arrayA[1] * arrayB[0] !== 0) { overflow = true; }
-  if (arrayA[1] * arrayB[1] !== 0) { overflow = true; }
-  if (arrayA[2] * arrayB[0] !== 0) { overflow = true; }
-  orp.lang.assert(!overflow);
-  
-  var result = new Array(0, 0, 0, 0);
-  result[0] += arrayA[0] * arrayB[3];
-  TimeBasedUuid._carry(result);
-  result[0] += arrayA[1] * arrayB[2];
-  TimeBasedUuid._carry(result);
-  result[0] += arrayA[2] * arrayB[1];
-  TimeBasedUuid._carry(result);
-  result[0] += arrayA[3] * arrayB[0];
-  TimeBasedUuid._carry(result);
-  result[1] += arrayA[1] * arrayB[3];
-  TimeBasedUuid._carry(result);
-  result[1] += arrayA[2] * arrayB[2];
-  TimeBasedUuid._carry(result);
-  result[1] += arrayA[3] * arrayB[1];
-  TimeBasedUuid._carry(result);
-  result[2] += arrayA[2] * arrayB[3];
-  TimeBasedUuid._carry(result);
-  result[2] += arrayA[3] * arrayB[2];
-  TimeBasedUuid._carry(result);
-  result[3] += arrayA[3] * arrayB[3];
-  TimeBasedUuid._carry(result);
-  return result;
-};
-
-
-/**
- * Pads a string with leading zeros and returns the result.
- * For example:
- * <pre>
- *   result = TimeBasedUuid._padWithLeadingZeros("abc", 6);
- *   orp.lang.assert(result == "000abc");
- * </pre>
- * 
- * @scope    private class method
- * @param    string    A string to add padding to.
- * @param    desiredLength    The number of characters the return string should have.
- * @return   A string.
- */
-orp.util.TimeBasedUuid._padWithLeadingZeros = function(string, desiredLength) {
-  while (string.length < desiredLength) {
-    string = "0" + string;
-  }
-  return string;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/util/Util.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -34,7 +34,7 @@
 dojo.provide("orp.util.Util");
 dojo.require("orp.lang.Lang");
 dojo.require("dojo.lang.*");
-// dojo.require("orp.util.Uuid");
+// dojo.require("orp.uuid.Uuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -331,8 +331,8 @@
  * @return   A boolean value. True if value is a UUID object.
  */
 orp.util.isUuid = function(value) {
-  dj_deprecated("orp.util.isUuid() is deprecated. Use orp.util.Uuid.prototype.isValid().");
-  // return (value instanceof orp.util.Uuid);
+  dj_deprecated("orp.util.isUuid() is deprecated. Use orp.uuid.Uuid.prototype.isValid().");
+  // return (value instanceof orp.uuid.Uuid);
   return true; // PENDING: FIXME.
 };
 
@@ -347,7 +347,7 @@
  * @return   A boolean value. True if value is a UUID.
  */
 orp.util.isUuidValue = function(value) {
-  dj_deprecated("orp.util.isUuidValue() is deprecated. Use orp.util.Uuid.prototype.isValid().");
+  dj_deprecated("orp.util.isUuidValue() is deprecated. Use orp.uuid.Uuid.prototype.isValid().");
   if (orp.util.isUuid(value)) {
     return true;
   }

Deleted: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/util/Uuid.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -1,297 +0,0 @@
-/*****************************************************************************
- Uuid.js
- 
-******************************************************************************
- Written in 2005 by 
-    Brian Douglas Skinner <brian.skinner at gumption.org>
-    Mignon Belongie
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Provides and Requires
-// -------------------------------------------------------------------
-dojo.provide("orp.util.Uuid");
-dojo.require("orp.util.Util");
-dojo.require("orp.lang.Lang");
-dojo.require("dojo.lang.*");
-
-
-// -------------------------------------------------------------------
-// Constructor
-// -------------------------------------------------------------------
-
-/**
- * The Uuid class offers methods for generating UUIDs and 
- * inspecting existing UUIDs.
- *
- * Examples:
- * <pre>
- *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
- *   var uuid = new orp.util.Uuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
- * </pre>
- *
- * @scope    public instance constructor
- * @param    uuidString    A 36-character string that conforms to the UUID spec. 
- * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
- */
-orp.util.Uuid = function(uuidString) {
-  this._uuidString = null;
-  if (uuidString) {
-    if (dojo.lang.isString(uuidString)) {
-      this._uuidString = uuidString;
-    } else {
-      if (dojo.lang.isObject(uuidString)) {
-        var namedParameters = uuidString;
-        this._uuidString = namedParameters["uuidString"];
-        
-        // Check for typos in parameter names
-        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
-      } else {
-        orp.lang.assert(false, "The orp.util.Uuid() constructor must be initializated with a UUID string.");
-      }
-    }
-    orp.lang.assert(this.isValid());
-  }
-};
-
-
-// -------------------------------------------------------------------
-// Public constants
-// -------------------------------------------------------------------
-orp.util.Uuid.HEX_RADIX = 16;
-orp.util.Uuid.Version = {
-  UNKNOWN: 0,
-  TIME_BASED: 1,
-  DCE_SECURITY: 2,
-  NAME_BASED_MD5: 3,
-  RANDOM: 4,
-  NAME_BASED_SHA1: 5 };
-orp.util.Uuid.Variant = {
-  NCS: "0",
-  DCE: "10",
-  MICROSOFT: "110",
-  UNKNOWN: "111" };
-orp.util.Uuid.NamedParameters = {
-  uuidString: "uuidString" };
-
-// -------------------------------------------------------------------
-// Public class methods
-// -------------------------------------------------------------------
-
-/**
- * Given a 36-character string representing a UUID, returns a new UUID object.
- *
- * @scope    public class method
- * @param    uuidString    A 36-character string that conforms to the UUID spec. 
- * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
- * @return   A new instance of Uuid, TimeBasedUuid, or RandomUuid.
- */
-orp.util.Uuid.newUuid = function(namedParameters) {
-  dojo.require("orp.util.RandomUuid");
-  dojo.require("orp.util.TimeBasedUuid");
-  
-  var uuidString;
-  if (dojo.lang.isString(namedParameters)) {
-    uuidString = namedParameters;
-  } else {
-    orp.lang.assertType(namedParameters, Object);
-    uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-    orp.lang.assertType(uuidString, String);
-    
-    // Check for typos in parameter names
-    orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
-  }
-
-  var uuid = new orp.util.Uuid(uuidString);
-  if (uuid.getVersion() == orp.util.Uuid.Version.TIME_BASED) {
-    uuid = new orp.util.TimeBasedUuid(uuidString);
-  }
-  if (uuid.getVersion() == orp.util.Uuid.Version.RANDOM) {
-    uuid = new orp.util.RandomUuid(uuidString);
-  }
-  return uuid;
-};
-
-
-// -------------------------------------------------------------------
-// Private class constants
-// -------------------------------------------------------------------
-orp.util.Uuid._ourVariantLookupTable = null;
-
-
-// -------------------------------------------------------------------
-// Public instance methods
-// -------------------------------------------------------------------
-
-/**
- * Returns a 36-character string representing the UUID, such as: 
- * <pre>
- *   "3B12F1DF-5232-1804-897E-917BF397618A"
- * </pre>
- *
- * @scope    public instance method
- * @return   Returns a 36-character UUID string.
- */
-orp.util.Uuid.prototype.toString = function() {
-  return this._uuidString;
-};
-
-
-/**
- * Returns true if the UUID was initialized with a valid value. 
- *
- * @scope    public instance method
- * @return   True if the UUID is valid, or false if it is not.
- */
-orp.util.Uuid.prototype.isValid = function() {
-  try {
-    orp.lang.assertType(this._uuidString, String);
-    orp.lang.assert(this._uuidString.length == 36);
-    var arrayOfParts = this._uuidString.split("-");
-    orp.lang.assert(arrayOfParts.length == 5);   
-    orp.lang.assert(arrayOfParts[0].length == 8);
-    orp.lang.assert(arrayOfParts[1].length == 4);
-    orp.lang.assert(arrayOfParts[2].length == 4);
-    orp.lang.assert(arrayOfParts[3].length == 4);
-    orp.lang.assert(arrayOfParts[4].length == 12);
-    for (var i in arrayOfParts) {
-      var part = arrayOfParts[i];
-      var integer = parseInt(part, orp.util.Uuid.HEX_RADIX);
-      orp.lang.assert(isFinite(integer));
-    }
-    return true;
-  } catch (e) {
-    return false;
-  }
-};
-
-
-/**
- * Returns a version number that indicates what type of UUID this is. 
- * For example:
- * <pre>
- *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
- *   var version = uuid.getVersion();
- *   orp.lang.assert(version == orp.util.Uuid.Version.TIME_BASED);
- * </pre>
- *
- * @scope    public instance method
- * @return   Returns one of the enumarted orp.util.Uuid.Version values.
- */
-orp.util.Uuid.prototype.getVersion = function() {
-  // "3B12F1DF-5232-1804-897E-917BF397618A"
-  //                ^
-  //                |
-  //       (version 1 == TIME_BASED)
-  var versionCharacter = this._uuidString.charAt(14);
-  var versionNumber = parseInt(versionCharacter, orp.util.Uuid.HEX_RADIX);
-  return versionNumber;
-};
-
-
-/**
- * Returns a variant code that indicates what type of UUID this is. 
- * For example:
- * <pre>
- *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
- *   var variant = uuid.getVariant();
- *   orp.lang.assert(variant == orp.util.Uuid.Variant.DCE);
- * </pre>
- *
- * @scope    public instance method
- * @return   Returns one of the enumarted orp.util.Uuid.Variant values.
- */
-orp.util.Uuid.prototype.getVariant = function() {
-  // "3B12F1DF-5232-1804-897E-917BF397618A"
-  //                     ^
-  //                     |
-  //         (variant "10__" == DCE)
-  var variantCharacter = this._uuidString.charAt(19);
-  var variantNumber = parseInt(variantCharacter, orp.util.Uuid.HEX_RADIX);
-  orp.lang.assert((variantNumber >= 0) && (variantNumber <= 16));
-  
-  if (!orp.util.Uuid._ourVariantLookupTable) {
-    var Variant = orp.util.Uuid.Variant;
-    var lookupTable = [];
-    orp.util.Uuid._ourVariantLookupTable = lookupTable;
-    
-    lookupTable[0x0] = Variant.NCS;       // 0000
-    lookupTable[0x1] = Variant.NCS;       // 0001
-    lookupTable[0x2] = Variant.NCS;       // 0010
-    lookupTable[0x3] = Variant.NCS;       // 0011
-    
-    lookupTable[0x4] = Variant.NCS;       // 0100
-    lookupTable[0x5] = Variant.NCS;       // 0101
-    lookupTable[0x6] = Variant.NCS;       // 0110
-    lookupTable[0x7] = Variant.NCS;       // 0111
-
-    lookupTable[0x8] = Variant.DCE;       // 1000
-    lookupTable[0x9] = Variant.DCE;       // 1001
-    lookupTable[0xA] = Variant.DCE;       // 1010
-    lookupTable[0xB] = Variant.DCE;       // 1011
-    
-    lookupTable[0xC] = Variant.MICROSOFT; // 1100
-    lookupTable[0xD] = Variant.MICROSOFT; // 1101
-    lookupTable[0xE] = Variant.UNKNOWN;   // 1110
-    lookupTable[0xF] = Variant.UNKNOWN;   // 1111
-  }
-  
-  return orp.util.Uuid._ourVariantLookupTable[variantNumber];
-};
-
-
-// -------------------------------------------------------------------
-// Private instance methods
-// -------------------------------------------------------------------
-
-/**
- * Returns a randomly generated 8-character string of hex digits.
- *
- * @scope    private instance method
- */
-orp.util.Uuid.prototype._generateRandomEightCharacterHexString = function() {
-  // PENDING: 
-  // This isn't really random.  We should find some source of real 
-  // randomness, and feed it to an MD5 hash algorithm.
-  
-  
-  // random32bitNumber is a randomly generated floating point number 
-  // between 0 and (4,294,967,296 - 1), inclusive.
-  var random32bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 32) );
-  
-  var eightCharacterString = random32bitNumber.toString(orp.util.Uuid.HEX_RADIX);
-  while (eightCharacterString.length < 8) {
-    eightCharacterString = "0" + eightCharacterString;
-  }
-  return eightCharacterString;
-};
-
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Copied: trunk/source/uuid/RandomUuid.js (from rev 345, trunk/source/util/RandomUuid.js)
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/source/uuid/RandomUuid.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,147 @@
+/*****************************************************************************
+ RandomUuid.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.uuid.RandomUuid");
+dojo.require("orp.uuid.Uuid");
+dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+/*global Util  */
+/*global Uuid  */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
+/**
+ * The RandomUuid class offers methods for working with 
+ * random UUIDs, meaning "version 4" UUIDs.
+ * 
+ * For more info, see 
+ * http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt
+ *
+ * Examples:
+ * <pre>
+ *   var uuid = new orp.uuid.RandomUuid();
+ *   var uuid = new orp.uuid.RandomUuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var uuid = new orp.uuid.RandomUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+ * </pre>
+ *
+ * @scope    public instance constructor
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
+ */
+orp.uuid.RandomUuid = function(namedParameters) {
+  orp.uuid.Uuid.call(this);
+  var uuidString;
+  if (namedParameters) {
+    if (dojo.lang.isString(namedParameters)) {
+      uuidString = namedParameters;
+    } else {
+      if (dojo.lang.isObject(namedParameters)) {
+        uuidString = namedParameters[orp.uuid.Uuid.NamedParameters.uuidString];
+        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.uuid.Uuid.NamedParameters.uuidString]));
+      } else {
+        orp.lang.assert(false);
+      }
+    }
+    orp.lang.assertType(uuidString, String);
+    this._uuidString = uuidString;
+    orp.lang.assert(this.isValid());
+  } else {
+    this._uuidString = this._generateUuidString();
+  }
+  orp.lang.assert(this.getVersion() == orp.uuid.Uuid.Version.RANDOM);
+};
+
+dj_inherits(orp.uuid.RandomUuid, orp.uuid.Uuid);  // makes RandomUuid be a subclass of Uuid
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns true if the UUID was initialized with a valid value. 
+ *
+ * @scope    public instance method
+ * @return   True if the UUID is valid, or false if it is not.
+ */
+orp.uuid.RandomUuid.prototype.isValid = function() {
+  try {
+    orp.lang.assert(orp.uuid.Uuid.prototype.isValid.call(this));
+    orp.lang.assert(this.getVersion() == orp.uuid.Uuid.Version.RANDOM);
+    orp.lang.assert(this.getVariant() == orp.uuid.Uuid.Variant.DCE);
+    return true;
+  } catch (e) {
+    return false;
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Private class methods
+// -------------------------------------------------------------------
+
+/**
+ * Generates a random UUID, meaning a "version 4" UUID.  Hopefully this 
+ * implementation conforms to the existing standards for UUIDs and GUIDs.  
+ * 
+ * @scope    public instance method
+ * @return   Returns a 36-character string, which will look something like "3B12F1DF-5232-4804-897E-917BF397618A".
+ */
+orp.uuid.RandomUuid.prototype._generateUuidString = function() {
+  var hyphen = "-";
+  var versionCodeForRandomlyGeneratedUuids = "4"; // 8 == binary2hex("0100")
+  var variantCodeForDCEUuids = "8"; // 8 == binary2hex("1000")
+  var a = this._generateRandomEightCharacterHexString();
+  var b = this._generateRandomEightCharacterHexString();
+  b = b.substring(0, 4) + hyphen + versionCodeForRandomlyGeneratedUuids + b.substring(5, 8);
+  var c = this._generateRandomEightCharacterHexString();
+  c = variantCodeForDCEUuids + c.substring(1, 4) + hyphen + c.substring(4, 8);
+  var d = this._generateRandomEightCharacterHexString();
+  var result = a + hyphen + b + hyphen + c + d;
+  
+  return result;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/source/uuid/TimeBasedUuid.js (from rev 345, trunk/source/util/TimeBasedUuid.js)
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/source/uuid/TimeBasedUuid.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,538 @@
+/*****************************************************************************
+ TimeBasedUuid.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.uuid.TimeBasedUuid");
+dojo.require("orp.uuid.Uuid");
+dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
+
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+/*global Util  */
+/*global Uuid  */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
+/**
+ * The TimeBasedUuid class offers methods for working with 
+ * time-based UUIDs, meaning "version 1" UUIDs.
+ *
+ * For more info, see 
+ *   http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt
+ *   http://www.infonuovo.com/dma/csdocs/sketch/instidid.htm
+ *   http://kruithof.xs4all.nl/uuid/uuidgen
+ *   http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagcjh_20
+ *   http://jakarta.apache.org/commons/sandbox/id/apidocs/org/apache/commons/id/uuid/clock/Clock.html
+ *
+ * Examples:
+ * <pre>
+ *   var uuid = new orp.uuid.TimeBasedUuid();
+ *   var uuid = new orp.uuid.TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A");
+ *   var uuid = new orp.uuid.TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+ *   var uuid = new orp.uuid.TimeBasedUuid({node: "017BF397618A"});
+ *   var uuid = new orp.uuid.TimeBasedUuid({node: "F17BF397618A"});
+ *   var uuid = new orp.uuid.TimeBasedUuid({hardwareNode: "017BF397618A"});
+ *   var uuid = new orp.uuid.TimeBasedUuid({pseudoNode:   "F17BF397618A"});
+ * </pre>
+ *
+ * @scope    public instance constructor
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    node    A 12-character hex string representing a pseudoNode or hardwareNode. 
+ * @namedParam    hardwareNode    A 12-character hex string containing an IEEE 802.3 network node identificator. 
+ * @namedParam    pseudoNode    A 12-character hex string representing a pseudoNode. 
+ */
+orp.uuid.TimeBasedUuid = function(namedParameters) {
+  orp.uuid.Uuid.call(this);
+  var uuidString;
+  if (namedParameters) {
+    if (dojo.lang.isString(namedParameters)) {
+      uuidString = namedParameters;
+      // orp.lang.assert(uuidString.length == 36);
+      this._uuidString = uuidString;
+    } else {
+      if (dojo.lang.isObject(namedParameters)) {
+        uuidString = namedParameters[orp.uuid.Uuid.NamedParameters.uuidString];
+        var node = namedParameters["node"];
+        var pseudoNode = namedParameters["pseudoNode"];
+        var hardwareNode = namedParameters["hardwareNode"];
+        var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
+        orp.lang.assert(atLeastOneParameter);
+        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
+        if (uuidString) {
+          orp.lang.assert(!node && !pseudoNode && !hardwareNode);
+          // orp.lang.assert(uuidString.length == 36);
+          this._uuidString = uuidString;
+        }
+        if (node || pseudoNode || hardwareNode) {
+          orp.lang.assert((node || pseudoNode).length == 12);
+          var firstCharacter = (node || pseudoNode).charAt(0);
+          var firstDigit = parseInt(firstCharacter, orp.uuid.Uuid.HEX_RADIX);
+          if (hardwareNode) { 
+            orp.lang.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
+          }
+          if (pseudoNode) { 
+            orp.lang.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
+          }
+          this._uuidString = this._generateUuidString(node || pseudoNode || hardwareNode);
+        }
+      } else {
+        orp.lang.assert(false);
+      }
+    }
+    orp.lang.assert(this.isValid());
+  } else {
+    this._uuidString = this._generateUuidString();
+  }
+    
+  orp.lang.assert(this.getVersion() == orp.uuid.Uuid.Version.TIME_BASED);
+};
+
+dj_inherits(orp.uuid.TimeBasedUuid, orp.uuid.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
+
+
+// -------------------------------------------------------------------
+// Public class constants
+// -------------------------------------------------------------------
+// Number of seconds between October 15, 1582 and January 1, 1970:
+// orp.uuid.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
+//
+// Number of hours between October 15, 1582 and January 1, 1970:
+orp.uuid.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;
+
+
+// -------------------------------------------------------------------
+// Private class variables
+// -------------------------------------------------------------------
+orp.uuid.TimeBasedUuid._ourUuidClockSeqString = null;
+orp.uuid.TimeBasedUuid._ourDateValueOfPreviousUuid = null;
+orp.uuid.TimeBasedUuid._ourNextIntraMillisecondIncrement = 0;
+
+orp.uuid.TimeBasedUuid._ourCachedMillisecondsBetween1582and1970 = null;
+orp.uuid.TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond = null;
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns true if the UUID was initialized with a valid value. 
+ *
+ * @scope    public instance method
+ * @return   True if the UUID is valid, or false if it is not.
+ */
+orp.uuid.TimeBasedUuid.prototype.isValid = function() {
+  try {
+    orp.lang.assert(orp.uuid.Uuid.prototype.isValid.call(this));
+    orp.lang.assert(this.getVersion() == orp.uuid.Uuid.Version.TIME_BASED);
+    orp.lang.assert(this.getVariant() == orp.uuid.Uuid.Variant.DCE);
+    return true;
+  } catch (e) {
+    return false;
+  }
+};
+
+
+/**
+ * Returns a 12-character string with the "node" or "pseudonode" portion of 
+ * the UUID, which is the rightmost 12 characters.
+ * 
+ * @scope    public instance method
+ * @return   Returns a 12-character string, which will look something like "917BF397618A".
+ */
+orp.uuid.TimeBasedUuid.prototype.getNode = function() {
+  return orp.uuid.TimeBasedUuid._getNodeFromUuidString(this._uuidString);
+};
+
+
+/**
+ * Returns a JavaScript Date object with a value equal to the value in the
+ * time fields of the UUID.
+ * 
+ * @scope    public instance method
+ * @return   Returns a JavaScript Date object.
+ */
+orp.uuid.TimeBasedUuid.prototype.getDate = function() {
+  if (!this._date) {
+    this._date = orp.uuid.TimeBasedUuid._getDateFromUuidString(this._uuidString);
+  } 
+  return this._date;
+};
+
+
+/**
+ * Returns a 15-character string of hex digits that contains the creation
+ * timestamp for this UUID, with the high-order bits first.  
+ * 
+ * @scope    public instance method
+ * @return   A 15-character string of hex digits.
+ */
+orp.uuid.TimeBasedUuid.prototype.getTimestampAsHexString = function() {
+  if (!this._timestampAsHexString) {
+    this._timestampAsHexString = orp.uuid.TimeBasedUuid._getTimestampAsHexString(this.toString());
+  }
+  return this._timestampAsHexString;
+};
+
+
+// -------------------------------------------------------------------
+// Private instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Generates a time-based UUID, meaning a "version 1" UUID.  JavaScript
+ * code running in a browser doesn't have access to the IEEE 802.3 address
+ * of the computer, so we generate a random pseudonode value instead.
+ * Hopefully this implementation conforms to the existing standards for 
+ * UUIDs and GUIDs.  
+ * 
+ * @scope    private instance method
+ * @param    pseudoNode    Optional. A 12-character string to use as the node in the new UUID.
+ * @return   Returns a 36 character string, which will look something like "3B12F1DF-5232-1804-897E-917BF397618A".
+ */
+orp.uuid.TimeBasedUuid.prototype._generateUuidString = function(pseudoNode) {
+  var Uuid          = orp.uuid.Uuid;
+  var TimeBasedUuid = orp.uuid.TimeBasedUuid;
+  
+  orp.lang.assertTypeForOptionalValue(pseudoNode, String);
+  if (pseudoNode) {
+    orp.lang.assert(pseudoNode.length == 12);  
+  } else {
+    var pseudoNodeIndicatorBit = 0x8000;
+    var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
+    var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(Uuid.HEX_RADIX);
+    pseudoNode = leftmost4HexCharacters + this._generateRandomEightCharacterHexString();
+  }
+  if (!TimeBasedUuid._ourUuidClockSeqString) {
+    var variantCodeForDCEUuids = 0x8000; // 10--------------, i.e. uses only first two of 16 bits.
+    var random14bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 14) );
+    TimeBasedUuid._ourUuidClockSeqString = (variantCodeForDCEUuids | random14bitNumber).toString(Uuid.HEX_RADIX);
+  }
+
+  // Maybe someday think about trying to make the code more readable to
+  // newcomers by creating a class called "WholeNumber" that encapsulates
+  // the methods and data structures for working with these arrays that 
+  // hold 4 16-bit numbers?  And then these variables below have names  
+  // like "wholeSecondsPerHour" rather than "arraySecondsPerHour"?
+  var now = new Date();
+  var nowArray = TimeBasedUuid._get64bitArrayFromFloat(now.valueOf());
+  if (!TimeBasedUuid._ourCachedMillisecondsBetween1582and1970) {
+    var arraySecondsPerHour = TimeBasedUuid._get64bitArrayFromFloat(60 * 60);
+    var arrayHoursBetween1582and1970 = TimeBasedUuid._get64bitArrayFromFloat(TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS);
+    var arraySecondsBetween1582and1970 = TimeBasedUuid._multiplyTwo64bitArrays(arrayHoursBetween1582and1970, arraySecondsPerHour);
+    var arrayMillisecondsPerSecond = TimeBasedUuid._get64bitArrayFromFloat(1000);
+    TimeBasedUuid._ourCachedMillisecondsBetween1582and1970 = TimeBasedUuid._multiplyTwo64bitArrays(arraySecondsBetween1582and1970, arrayMillisecondsPerSecond);
+    TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond = TimeBasedUuid._get64bitArrayFromFloat(10000);
+  }
+  var arrayMillisecondsSince1970 = nowArray;
+  var arrayMillisecondsSince1582 = TimeBasedUuid._addTwo64bitArrays(TimeBasedUuid._ourCachedMillisecondsBetween1582and1970, arrayMillisecondsSince1970);
+  // var arrayMicrosecondsPerMillisecond = TimeBasedUuid._get64bitArrayFromFloat(1000);
+  // var arrayMicrosecondsSince1582 = TimeBasedUuid._multiplyTwo64bitArrays(arrayMillisecondsSince1582, arrayMicrosecondsPerMillisecond);
+  // var arrayHundredNanosecondIntervalsPerMicrosecond = TimeBasedUuid._get64bitArrayFromFloat(10);
+  // var arrayHundredNanosecondIntervalsSince1582 = TimeBasedUuid._multiplyTwo64bitArrays(arrayMicrosecondsSince1582, arrayHundredNanosecondIntervalsPerMicrosecond);
+  var arrayHundredNanosecondIntervalsSince1582 = TimeBasedUuid._multiplyTwo64bitArrays(arrayMillisecondsSince1582, TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond);
+  
+  if (now.valueOf() == TimeBasedUuid._ourDateValueOfPreviousUuid) {
+    arrayHundredNanosecondIntervalsSince1582[3] += TimeBasedUuid._ourNextIntraMillisecondIncrement;
+    TimeBasedUuid._carry(arrayHundredNanosecondIntervalsSince1582);
+    TimeBasedUuid._ourNextIntraMillisecondIncrement += 1;
+    if (TimeBasedUuid._ourNextIntraMillisecondIncrement == 10000) {
+      // If we've gotten to here, it means we've already generated 10,000
+      // UUIDs in this single millisecond, which is the most that the UUID
+      // timestamp field allows for.  So now we'll just sit here and wait
+      // for a fraction of a millisecond, so as to ensure that the next 
+      // time this method is called there will be a different millisecond 
+      // value in the timestamp field.
+      while (now.valueOf() == TimeBasedUuid._ourDateValueOfPreviousUuid) {
+        now = new Date();
+      }
+    }
+  } else {
+    TimeBasedUuid._ourDateValueOfPreviousUuid = now.valueOf();
+    TimeBasedUuid._ourNextIntraMillisecondIncrement = 1;
+  }
+  
+  var hexTimeLowLeftHalf  = arrayHundredNanosecondIntervalsSince1582[2].toString(Uuid.HEX_RADIX);
+  var hexTimeLowRightHalf = arrayHundredNanosecondIntervalsSince1582[3].toString(Uuid.HEX_RADIX);
+  var hexTimeLow = TimeBasedUuid._padWithLeadingZeros(hexTimeLowLeftHalf, 4) + TimeBasedUuid._padWithLeadingZeros(hexTimeLowRightHalf, 4);
+  var hexTimeMid = arrayHundredNanosecondIntervalsSince1582[1].toString(Uuid.HEX_RADIX);
+  hexTimeMid = TimeBasedUuid._padWithLeadingZeros(hexTimeMid, 4);
+  var hexTimeHigh = arrayHundredNanosecondIntervalsSince1582[0].toString(Uuid.HEX_RADIX);
+  hexTimeHigh = TimeBasedUuid._padWithLeadingZeros(hexTimeHigh, 3);
+  var hyphen = "-";
+  var versionCodeForTimeBasedUuids = "1"; // binary2hex("0001")
+  var resultUuid = hexTimeLow + hyphen + hexTimeMid + hyphen +
+        versionCodeForTimeBasedUuids + hexTimeHigh + hyphen +
+        TimeBasedUuid._ourUuidClockSeqString + hyphen + pseudoNode;
+  return resultUuid;
+};
+
+
+// -------------------------------------------------------------------
+// Private class methods
+// -------------------------------------------------------------------
+
+/**
+ * Given a 36-character UUID string, this method returns the "node" or 
+ * "pseudonode" portion of the UUID, which is the rightmost 12 characters.
+ * 
+ * @scope    private class method
+ * @param    uuidString    A 36-character UUID string.
+ * @return   Returns a 12-character string, which will look something like "917BF397618A".
+ */
+orp.uuid.TimeBasedUuid._getNodeFromUuidString = function(uuidString) {
+  var arrayOfStrings = uuidString.split('-');
+  var nodeString = arrayOfStrings[4];
+  return nodeString;
+};
+
+
+/**
+ * Given a 36-character UUID string for a time-based UUID, this method 
+ * returns a JavaScript Date object.
+ * 
+ * @scope    private class method
+ * @param    uuidString    A 36-character UUID string for a time-based UUID.
+ * @return   Returns a JavaScript Date objects
+ */
+orp.uuid.TimeBasedUuid._getDateFromUuidString = function(uuidString) {
+  var Uuid          = orp.uuid.Uuid;
+  var TimeBasedUuid = orp.uuid.TimeBasedUuid;
+  
+  var hexTimeLow = uuidString.split('-')[0];
+  var hexTimeMid = uuidString.split('-')[1];
+  var hexTimeHigh = uuidString.split('-')[2];
+  var timeLow = parseInt(hexTimeLow, Uuid.HEX_RADIX);
+  var timeMid = parseInt(hexTimeMid, Uuid.HEX_RADIX);
+  var timeHigh = parseInt(hexTimeHigh, Uuid.HEX_RADIX);
+  var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
+  hundredNanosecondIntervalsSince1582 <<= 16;
+  hundredNanosecondIntervalsSince1582 += timeMid;
+  // What we really want to do next is shift left 32 bits, but the result will be too big
+  // to fit in an int, so we'll multiply by 2^32, and the result will be a floating point approximation.
+  hundredNanosecondIntervalsSince1582 *= 0x100000000;
+  hundredNanosecondIntervalsSince1582 += timeLow;
+  var millisecondsSince1582 = hundredNanosecondIntervalsSince1582 / 10000;
+
+  // Again, this will be a floating point approximation.
+  // We can make things exact later if we need to.
+  var secondsPerHour = 60 * 60;
+  var hoursBetween1582and1970 = TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS;
+  var secondsBetween1582and1970 = hoursBetween1582and1970 * secondsPerHour;
+  var millisecondsBetween1582and1970 = secondsBetween1582and1970 * 1000;
+
+  var millisecondsSince1970 = millisecondsSince1582 - millisecondsBetween1582and1970;
+
+  var date = new Date(millisecondsSince1970);
+  return date;
+};
+
+
+/**
+ * Returns a 15-character string of hex digits that contains the creation
+ * timestamp for this UUID, with the high-order bits first.  
+ * 
+ * @scope    private class method
+ * @return   A 15-character string of hex digits.
+ */
+orp.uuid.TimeBasedUuid._getTimestampAsHexString = function(uuidString) {
+  var arrayOfParts = uuidString.split('-');
+  var hexTimeLow = arrayOfParts[0];
+  var hexTimeMid = arrayOfParts[1];
+  var hexTimeHigh = arrayOfParts[2];
+
+  // Chop off the leading "1" character, which is the UUID version number for
+  // time-based UUIDs.
+  hexTimeHigh = hexTimeHigh.slice(1); 
+  
+  var returnString = hexTimeHigh + hexTimeMid + hexTimeLow;
+  
+  orp.lang.assert(returnString.length == 15);
+  return returnString;
+};
+
+
+/**
+ * Given an array which holds a 64-bit number broken into 4 16-bit elements,
+ * this method carries any excess bits (greater than 16-bits) from each array
+ * element into the next.
+ *
+ * @scope    private class method
+ * @param    arrayA    An array with 4 elements, each of which is a 16-bit number.
+ */
+orp.uuid.TimeBasedUuid._carry = function(arrayA) {
+  arrayA[2] += arrayA[3] >>> 16;
+  arrayA[3] &= 0xFFFF;
+  arrayA[1] += arrayA[2] >>> 16;
+  arrayA[2] &= 0xFFFF;
+  arrayA[0] += arrayA[1] >>> 16;
+  arrayA[1] &= 0xFFFF;
+  orp.lang.assert((arrayA[0] >>> 16) === 0);
+};
+
+
+/**
+ * Given a floating point number, this method returns an array which holds a 
+ * 64-bit number broken into 4 16-bit elements.
+ *
+ * @scope    private class method
+ * @param    x    A floating point number.
+ * @return   An array with 4 elements, each of which is a 16-bit number.
+ */
+orp.uuid.TimeBasedUuid._get64bitArrayFromFloat = function(x) {
+  var result = new Array(0, 0, 0, 0);
+  result[3] = x % 0x10000;
+  x -= result[3];
+  x /= 0x10000;
+  result[2] = x % 0x10000;
+  x -= result[2];
+  x /= 0x10000;
+  result[1] = x % 0x10000;
+  x -= result[1];
+  x /= 0x10000;
+  result[0] = x;
+  return result;
+};
+
+
+/**
+ * Takes two arrays, each of which holds a 64-bit number broken into 4 
+ * 16-bit elements, and returns a new array that holds a 64-bit number
+ * that is the sum of the two original numbers.
+ *
+ * @scope    private class method
+ * @param    arrayA    An array with 4 elements, each of which is a 16-bit number.
+ * @param    arrayB    An array with 4 elements, each of which is a 16-bit number.
+ * @return   An array with 4 elements, each of which is a 16-bit number.
+ */
+orp.uuid.TimeBasedUuid._addTwo64bitArrays = function(arrayA, arrayB) {
+  orp.lang.assertType(arrayA, Array);
+  orp.lang.assertType(arrayB, Array);
+  orp.lang.assert(arrayA.length == 4);
+  orp.lang.assert(arrayB.length == 4);
+
+  var result = new Array(0, 0, 0, 0);
+  result[3] = arrayA[3] + arrayB[3];
+  result[2] = arrayA[2] + arrayB[2];
+  result[1] = arrayA[1] + arrayB[1];
+  result[0] = arrayA[0] + arrayB[0];
+  orp.uuid.TimeBasedUuid._carry(result);
+  return result;
+};
+
+
+/**
+ * Takes two arrays, each of which holds a 64-bit number broken into 4 
+ * 16-bit elements, and returns a new array that holds a 64-bit number
+ * that is the product of the two original numbers.
+ *
+ * @scope    private class method
+ * @param    arrayA    An array with 4 elements, each of which is a 16-bit number.
+ * @param    arrayB    An array with 4 elements, each of which is a 16-bit number.
+ * @return   An array with 4 elements, each of which is a 16-bit number.
+ */
+orp.uuid.TimeBasedUuid._multiplyTwo64bitArrays = function(arrayA, arrayB) {
+  var TimeBasedUuid = orp.uuid.TimeBasedUuid;
+
+  orp.lang.assertType(arrayA, Array);
+  orp.lang.assertType(arrayB, Array);
+  orp.lang.assert(arrayA.length == 4);
+  orp.lang.assert(arrayB.length == 4);
+
+  var overflow = false;
+  if (arrayA[0] * arrayB[0] !== 0) { overflow = true; }
+  if (arrayA[0] * arrayB[1] !== 0) { overflow = true; }
+  if (arrayA[0] * arrayB[2] !== 0) { overflow = true; }
+  if (arrayA[1] * arrayB[0] !== 0) { overflow = true; }
+  if (arrayA[1] * arrayB[1] !== 0) { overflow = true; }
+  if (arrayA[2] * arrayB[0] !== 0) { overflow = true; }
+  orp.lang.assert(!overflow);
+  
+  var result = new Array(0, 0, 0, 0);
+  result[0] += arrayA[0] * arrayB[3];
+  TimeBasedUuid._carry(result);
+  result[0] += arrayA[1] * arrayB[2];
+  TimeBasedUuid._carry(result);
+  result[0] += arrayA[2] * arrayB[1];
+  TimeBasedUuid._carry(result);
+  result[0] += arrayA[3] * arrayB[0];
+  TimeBasedUuid._carry(result);
+  result[1] += arrayA[1] * arrayB[3];
+  TimeBasedUuid._carry(result);
+  result[1] += arrayA[2] * arrayB[2];
+  TimeBasedUuid._carry(result);
+  result[1] += arrayA[3] * arrayB[1];
+  TimeBasedUuid._carry(result);
+  result[2] += arrayA[2] * arrayB[3];
+  TimeBasedUuid._carry(result);
+  result[2] += arrayA[3] * arrayB[2];
+  TimeBasedUuid._carry(result);
+  result[3] += arrayA[3] * arrayB[3];
+  TimeBasedUuid._carry(result);
+  return result;
+};
+
+
+/**
+ * Pads a string with leading zeros and returns the result.
+ * For example:
+ * <pre>
+ *   result = TimeBasedUuid._padWithLeadingZeros("abc", 6);
+ *   orp.lang.assert(result == "000abc");
+ * </pre>
+ * 
+ * @scope    private class method
+ * @param    string    A string to add padding to.
+ * @param    desiredLength    The number of characters the return string should have.
+ * @return   A string.
+ */
+orp.uuid.TimeBasedUuid._padWithLeadingZeros = function(string, desiredLength) {
+  while (string.length < desiredLength) {
+    string = "0" + string;
+  }
+  return string;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/source/uuid/Uuid.js (from rev 345, trunk/source/util/Uuid.js)
===================================================================
--- trunk/source/util/Uuid.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/source/uuid/Uuid.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,257 @@
+/*****************************************************************************
+ Uuid.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.uuid.Uuid");
+dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
+dojo.require("dojo.lang.*");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
+/**
+ * The Uuid class offers methods for generating UUIDs and 
+ * inspecting existing UUIDs.
+ *
+ * Examples:
+ * <pre>
+ *   var uuid = new orp.uuid.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var uuid = new orp.uuid.Uuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+ * </pre>
+ *
+ * @scope    public instance constructor
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
+ */
+orp.uuid.Uuid = function(uuidString) {
+  this._uuidString = null;
+  if (uuidString) {
+    if (dojo.lang.isString(uuidString)) {
+      this._uuidString = uuidString;
+    } else {
+      if (dojo.lang.isObject(uuidString)) {
+        var namedParameters = uuidString;
+        this._uuidString = namedParameters["uuidString"];
+        
+        // Check for typos in parameter names
+        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
+      } else {
+        orp.lang.assert(false, "The orp.uuid.Uuid() constructor must be initializated with a UUID string.");
+      }
+    }
+    orp.lang.assert(this.isValid());
+  }
+};
+
+
+// -------------------------------------------------------------------
+// Public constants
+// -------------------------------------------------------------------
+orp.uuid.Uuid.HEX_RADIX = 16;
+orp.uuid.Uuid.Version = {
+  UNKNOWN: 0,
+  TIME_BASED: 1,
+  DCE_SECURITY: 2,
+  NAME_BASED_MD5: 3,
+  RANDOM: 4,
+  NAME_BASED_SHA1: 5 };
+orp.uuid.Uuid.Variant = {
+  NCS: "0",
+  DCE: "10",
+  MICROSOFT: "110",
+  UNKNOWN: "111" };
+orp.uuid.Uuid.NamedParameters = {
+  uuidString: "uuidString" };
+
+// -------------------------------------------------------------------
+// Private class constants
+// -------------------------------------------------------------------
+orp.uuid.Uuid._ourVariantLookupTable = null;
+
+
+// -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a 36-character string representing the UUID, such as: 
+ * <pre>
+ *   "3B12F1DF-5232-1804-897E-917BF397618A"
+ * </pre>
+ *
+ * @scope    public instance method
+ * @return   Returns a 36-character UUID string.
+ */
+orp.uuid.Uuid.prototype.toString = function() {
+  return this._uuidString;
+};
+
+
+/**
+ * Returns true if the UUID was initialized with a valid value. 
+ *
+ * @scope    public instance method
+ * @return   True if the UUID is valid, or false if it is not.
+ */
+orp.uuid.Uuid.prototype.isValid = function() {
+  try {
+    orp.lang.assertType(this._uuidString, String);
+    orp.lang.assert(this._uuidString.length == 36);
+    var arrayOfParts = this._uuidString.split("-");
+    orp.lang.assert(arrayOfParts.length == 5);   
+    orp.lang.assert(arrayOfParts[0].length == 8);
+    orp.lang.assert(arrayOfParts[1].length == 4);
+    orp.lang.assert(arrayOfParts[2].length == 4);
+    orp.lang.assert(arrayOfParts[3].length == 4);
+    orp.lang.assert(arrayOfParts[4].length == 12);
+    for (var i in arrayOfParts) {
+      var part = arrayOfParts[i];
+      var integer = parseInt(part, orp.uuid.Uuid.HEX_RADIX);
+      orp.lang.assert(isFinite(integer));
+    }
+    return true;
+  } catch (e) {
+    return false;
+  }
+};
+
+
+/**
+ * Returns a version number that indicates what type of UUID this is. 
+ * For example:
+ * <pre>
+ *   var uuid = new orp.uuid.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var version = uuid.getVersion();
+ *   orp.lang.assert(version == orp.uuid.Uuid.Version.TIME_BASED);
+ * </pre>
+ *
+ * @scope    public instance method
+ * @return   Returns one of the enumarted orp.uuid.Uuid.Version values.
+ */
+orp.uuid.Uuid.prototype.getVersion = function() {
+  // "3B12F1DF-5232-1804-897E-917BF397618A"
+  //                ^
+  //                |
+  //       (version 1 == TIME_BASED)
+  var versionCharacter = this._uuidString.charAt(14);
+  var versionNumber = parseInt(versionCharacter, orp.uuid.Uuid.HEX_RADIX);
+  return versionNumber;
+};
+
+
+/**
+ * Returns a variant code that indicates what type of UUID this is. 
+ * For example:
+ * <pre>
+ *   var uuid = new orp.uuid.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var variant = uuid.getVariant();
+ *   orp.lang.assert(variant == orp.uuid.Uuid.Variant.DCE);
+ * </pre>
+ *
+ * @scope    public instance method
+ * @return   Returns one of the enumarted orp.uuid.Uuid.Variant values.
+ */
+orp.uuid.Uuid.prototype.getVariant = function() {
+  // "3B12F1DF-5232-1804-897E-917BF397618A"
+  //                     ^
+  //                     |
+  //         (variant "10__" == DCE)
+  var variantCharacter = this._uuidString.charAt(19);
+  var variantNumber = parseInt(variantCharacter, orp.uuid.Uuid.HEX_RADIX);
+  orp.lang.assert((variantNumber >= 0) && (variantNumber <= 16));
+  
+  if (!orp.uuid.Uuid._ourVariantLookupTable) {
+    var Variant = orp.uuid.Uuid.Variant;
+    var lookupTable = [];
+    orp.uuid.Uuid._ourVariantLookupTable = lookupTable;
+    
+    lookupTable[0x0] = Variant.NCS;       // 0000
+    lookupTable[0x1] = Variant.NCS;       // 0001
+    lookupTable[0x2] = Variant.NCS;       // 0010
+    lookupTable[0x3] = Variant.NCS;       // 0011
+    
+    lookupTable[0x4] = Variant.NCS;       // 0100
+    lookupTable[0x5] = Variant.NCS;       // 0101
+    lookupTable[0x6] = Variant.NCS;       // 0110
+    lookupTable[0x7] = Variant.NCS;       // 0111
+
+    lookupTable[0x8] = Variant.DCE;       // 1000
+    lookupTable[0x9] = Variant.DCE;       // 1001
+    lookupTable[0xA] = Variant.DCE;       // 1010
+    lookupTable[0xB] = Variant.DCE;       // 1011
+    
+    lookupTable[0xC] = Variant.MICROSOFT; // 1100
+    lookupTable[0xD] = Variant.MICROSOFT; // 1101
+    lookupTable[0xE] = Variant.UNKNOWN;   // 1110
+    lookupTable[0xF] = Variant.UNKNOWN;   // 1111
+  }
+  
+  return orp.uuid.Uuid._ourVariantLookupTable[variantNumber];
+};
+
+
+// -------------------------------------------------------------------
+// Private instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a randomly generated 8-character string of hex digits.
+ *
+ * @scope    private instance method
+ */
+orp.uuid.Uuid.prototype._generateRandomEightCharacterHexString = function() {
+  // PENDING: 
+  // This isn't really random.  We should find some source of real 
+  // randomness, and feed it to an MD5 hash algorithm.
+  
+  
+  // random32bitNumber is a randomly generated floating point number 
+  // between 0 and (4,294,967,296 - 1), inclusive.
+  var random32bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 32) );
+  
+  var eightCharacterString = random32bitNumber.toString(orp.uuid.Uuid.HEX_RADIX);
+  while (eightCharacterString.length < 8) {
+    eightCharacterString = "0" + eightCharacterString;
+  }
+  return eightCharacterString;
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/uuid/factory.js
===================================================================
--- trunk/source/uuid/factory.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/source/uuid/factory.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,85 @@
+/*****************************************************************************
+ factory.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.uuid.factory");
+dojo.require("orp.uuid.Uuid");
+dojo.require("orp.uuid.RandomUuid");
+dojo.require("orp.uuid.TimeBasedUuid");
+dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
+dojo.require("dojo.lang.*");
+
+
+// -------------------------------------------------------------------
+// Public functions
+// -------------------------------------------------------------------
+
+/**
+ * Given a 36-character string representing a UUID, returns a new UUID object.
+ *
+ * @scope    public class method
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @return   A new instance of Uuid, TimeBasedUuid, or RandomUuid.
+ */
+orp.uuid.newUuid = function(namedParameters) {
+  dojo.require("orp.uuid.RandomUuid");
+  dojo.require("orp.uuid.TimeBasedUuid");
+  
+  var uuidString;
+  if (dojo.lang.isString(namedParameters)) {
+    uuidString = namedParameters;
+  } else {
+    orp.lang.assertType(namedParameters, Object);
+    uuidString = namedParameters[orp.uuid.Uuid.NamedParameters.uuidString];
+    orp.lang.assertType(uuidString, String);
+    
+    // Check for typos in parameter names
+    orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.uuid.Uuid.NamedParameters.uuidString]));
+  }
+
+  var uuid = new orp.uuid.Uuid(uuidString);
+  if (uuid.getVersion() == orp.uuid.Uuid.Version.TIME_BASED) {
+    uuid = new orp.uuid.TimeBasedUuid(uuidString);
+  }
+  if (uuid.getVersion() == orp.uuid.Uuid.Version.RANDOM) {
+    uuid = new orp.uuid.RandomUuid(uuidString);
+  }
+  return uuid;
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/TestSuite.html	2005-10-07 02:46:57 UTC (rev 352)
@@ -27,6 +27,7 @@
         testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
         testSuite.addTestPage("../../../tests/lang/LangTest.html");
         testSuite.addTestPage("../../../tests/util/TestSuite.html");
+        testSuite.addTestPage("../../../tests/uuid/TestSuite.html");
         testSuite.addTestPage("../../../tests/model/TestSuite.html");
         testSuite.addTestPage("../../../tests/archive/LintTest.html");
         testSuite.addTestPage("../../../tests/storage/LintTest.html");

Modified: trunk/tests/model/MockUuidGenerator.js
===================================================================
--- trunk/tests/model/MockUuidGenerator.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/model/MockUuidGenerator.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -32,14 +32,14 @@
 // dojo.require("orp.util.TimeBasedUuid");
 
 function mockUuidGenerator() {
-  dojo.require("orp.util.TimeBasedUuid");
+  dojo.require("orp.uuid.TimeBasedUuid");
   
   if (mockUuidGenerator.queueOfUuids.length === 0) {
     // This should probably throw an exception instead.    
     return "00000000-0000-0000-0000-000000000000";
   }
   var uuidString = mockUuidGenerator.queueOfUuids.shift();
-  var uuid = new orp.util.TimeBasedUuid();
+  var uuid = new orp.uuid.TimeBasedUuid();
   uuid._uuidString = uuidString;
   return uuid;
 }

Modified: trunk/tests/util/LintTest.js
===================================================================
--- trunk/tests/util/LintTest.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/util/LintTest.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -58,10 +58,7 @@
     "CsvParser.js",
     "DateValue.js",
     "LintTool.js",
-    "RandomUuid.js",
-    "TimeBasedUuid.js",
     "Util.js",
-    "Uuid.js",
     "XmlConverter.js"];
   var prefix = "../../../source/util/";
   var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);

Modified: trunk/tests/util/TestSuite.html
===================================================================
--- trunk/tests/util/TestSuite.html	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/util/TestSuite.html	2005-10-07 02:46:57 UTC (rev 352)
@@ -27,7 +27,6 @@
         testSuite.addTestPage("../../../tests/util/DateValueTest.html");
         testSuite.addTestPage("../../../tests/util/LintTest.html");
         testSuite.addTestPage("../../../tests/util/UtilTest.html");
-        testSuite.addTestPage("../../../tests/util/UuidTest.html");
         testSuite.addTestPage("../../../tests/util/XmlConverterTest.html");
         testSuite.addTestPage("../../../tests/util/XmlConverterMultiplePassesTest.html");
         return testSuite;

Deleted: trunk/tests/util/UuidTest.html
===================================================================
--- trunk/tests/util/UuidTest.html	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/util/UuidTest.html	2005-10-07 02:46:57 UTC (rev 352)
@@ -1,76 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests for UUIDs</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
-    <script type="text/javascript" src="UuidTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests for UUIDs</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>You should be able to run these unit tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/tests/util/UuidTest.js
===================================================================
--- trunk/tests/util/UuidTest.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/util/UuidTest.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -1,426 +0,0 @@
-/*****************************************************************************
- UuidTest.js
- 
-******************************************************************************
- Written in 2005 by 
-    Brian Douglas Skinner <brian.skinner at gumption.org>
-    Mignon Belongie
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-var RandomUuid = null;
-var TimeBasedUuid = null;
-
-
-// -------------------------------------------------------------------
-// setUp and tearDown
-// -------------------------------------------------------------------
-
-function setUp() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
-  dojo.require("orp.util.Uuid");
-  dojo.require("orp.util.RandomUuid");
-  dojo.require("orp.util.TimeBasedUuid");
-  dojo.require("dojo.lang.*");
-
-  Uuid = orp.util.Uuid;
-  RandomUuid = orp.util.RandomUuid;
-  TimeBasedUuid = orp.util.TimeBasedUuid;
-}
-
-function tearDown() {
-}
-
-
-// -------------------------------------------------------------------
-// Test functions
-// -------------------------------------------------------------------
-
-function testGet64bitArrayFromFloat() {
-  var x = Math.pow(2, 63) + Math.pow(2, 15);
-  var result = TimeBasedUuid._get64bitArrayFromFloat(x);
-  assertTrue("result[0] == 0x8000", result[0] === 0x8000);
-  assertTrue("result[1] == 0x0000", result[1] === 0x0000);
-  assertTrue("result[2] == 0x0000", result[2] === 0x0000);
-  assertTrue("result[3] == 0x8000", result[3] === 0x8000);
-  
-  var date = new Date();
-  x = date.valueOf();
-  result = TimeBasedUuid._get64bitArrayFromFloat(x);
-  var reconstructedFloat = result[0];
-  reconstructedFloat *= 0x10000;
-  reconstructedFloat += result[1];
-  reconstructedFloat *= 0x10000;
-  reconstructedFloat += result[2];
-  reconstructedFloat *= 0x10000;
-  reconstructedFloat += result[3];
-  
-  assertTrue("reconstructedFloat === x", reconstructedFloat === x);
-}
-
-function testAddTwo64bitArrays() {
-  var a = [0x0000, 0x0000, 0x0000, 0x0001];
-  var b = [0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF];
-  var result = TimeBasedUuid._addTwo64bitArrays(a, b);
-  assert(result[0] === 0x1000);
-  assert(result[1] === 0x0000);
-  assert(result[2] === 0x0000);
-  assert(result[3] === 0x0000);
-  
-  a = [0x4000, 0x8000, 0x8000, 0x8000];
-  b = [0x8000, 0x8000, 0x8000, 0x8000];
-  result = TimeBasedUuid._addTwo64bitArrays(a, b);
-  assert(result[0] === 0xC001);
-  assert(result[1] === 0x0001);
-  assert(result[2] === 0x0001);
-  assert(result[3] === 0x0000);
-  
-  a = [7, 6, 2, 5];
-  b = [1, 0, 3, 4];
-  result = TimeBasedUuid._addTwo64bitArrays(a, b);
-  assert(result[0] === 8);
-  assert(result[1] === 6);
-  assert(result[2] === 5);
-  assert(result[3] === 9);  
-}  
-
-function testMultiplyTwo64bitArrays() {
-  var a = [     0, 0x0000, 0x0000, 0x0003];
-  var b = [0x1111, 0x1234, 0x0000, 0xFFFF];
-  var result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
-  assert(result[0] === 0x3333);
-  assert(result[1] === 0x369C);
-  assert(result[2] === 0x0002);
-  assert(result[3] === 0xFFFD);
-  
-  a = [0, 0, 0, 5];
-  b = [0, 0, 0, 4];
-  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
-  assert(result[0] === 0);
-  assert(result[1] === 0);
-  assert(result[2] === 0);
-  assert(result[3] === 20);  
-  
-  a = [0, 0, 2, 5];
-  b = [0, 0, 3, 4];
-  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
-  assert(result[0] === 0);
-  assert(result[1] === 6);
-  assert(result[2] === 23);
-  assert(result[3] === 20);  
-}  
-
-function testRandomUuids() {
-  var uuid1 = new RandomUuid();
-  var uuid2 = new RandomUuid();
-  var uuid3 = new RandomUuid("3B12F1DF-5232-4804-897E-917BF397618A");
-  var uuid4 = new RandomUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
-  var uuid5 = new RandomUuid(new String("3B12F1DF-5232-4804-897E-917BF397618A"));
-
-  // alert(uuid1 + "\n" + uuid2);
-  checkRandomUuidValidity(uuid1);
-  checkRandomUuidValidity(uuid2);
-  checkRandomUuidValidity(uuid3);
-  checkRandomUuidValidity(uuid4);
-  checkRandomUuidValidity(uuid5);
-
-  var uuidString1 = uuid1.toString();
-  var uuidString2 = uuid2.toString();
-  
-  assertTrue("uuid1 != uuid2", uuidString1 != uuidString2);
-}
-
-function testTimeBasedUuids() {
-  var uuid1 = new TimeBasedUuid();
-  var uuid2 = new TimeBasedUuid();
-  var uuid3 = new TimeBasedUuid();
-  var uuid4 = new TimeBasedUuid({node: "123456789ABC"});
-  var uuid5 = new TimeBasedUuid({'node': "123456789ABC"});
-  var uuid6 = new TimeBasedUuid({pseudoNode: "823456789ABC"});
-  var uuid7 = new TimeBasedUuid({'pseudoNode': "823456789ABC"});
-  var uuid8 = new TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
-  var uuid9 = new TimeBasedUuid({'uuidString': "3B12F1DF-5232-1804-897E-917BF397618A"});
-  var uuid10 = new TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A");
-  var uuid11 = new TimeBasedUuid(new String("3B12F1DF-5232-1804-897E-917BF397618A"));
-  
-  checkTimeBasedUuidValidity(uuid1);
-  checkTimeBasedUuidValidity(uuid2);
-  checkTimeBasedUuidValidity(uuid3);
-  checkTimeBasedUuidValidity(uuid4);
-  checkTimeBasedUuidValidity(uuid5);
-  checkTimeBasedUuidValidity(uuid6);
-  checkTimeBasedUuidValidity(uuid7);
-  checkTimeBasedUuidValidity(uuid8);
-  checkTimeBasedUuidValidity(uuid9);
-  checkTimeBasedUuidValidity(uuid10);
-  checkTimeBasedUuidValidity(uuid11);
-
-  uuid1 = uuid1.toString();
-  uuid2 = uuid2.toString();
-  uuid3 = uuid3.toString();
-  uuid4 = uuid4.toString();
-
-  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
-  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
-  
-  var arrayOfParts = uuid1.split("-");
-  var section4 = arrayOfParts[4];
-  var firstChar = section4.charAt(0);
-  var hexFirstChar = parseInt(firstChar, orp.util.Uuid.HEX_RADIX);
-  binaryString = hexFirstChar.toString(2);
-  var firstBit;
-  if (binaryString.length == 4) {
-    firstBit = binaryString.charAt(0);
-  } else {
-    firstBit = '0';
-  }
-  // alert("firstChar = " + firstChar + "\n as number = " + hexFirstChar + 
-  //       "\n in binary = " + binaryString + "\n first bit = " + firstBit);
-  assertTrue("first bit of section 4 is 1", firstBit == '1');
-
-
-  arrayOfParts = uuid4.split("-");
-  section4 = arrayOfParts[4];
-  assertTrue('Section 4 = node input', section4 == "123456789ABC");
-
-  /* 
-  // Old code that Brian wrote to try to get a sense of how
-  // many UUIDs we can create in a single millisecond 
-  var array = [];
-  var now = new Date();
-  var then = new Date();
-  while (now.valueOf() == then.valueOf()) {
-    then = new Date();
-  }
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  alert(array[0] + "\n" + 
-        array[1] + "\n" + 
-        array[2] + "\n" + 
-        array[3] + "\n" + 
-        array[4] + "\n" + 
-        array[5] + "\n" + 
-        array[6] + "\n" + 
-        array[7] + "\n" + 
-        array[8] + "\n" + 
-        array[9] + "\n" + 
-        array[10] + "\n" + 
-        array[11] + "\n" + 
-        array[12] + "\n" + 
-        array[13] + "\n" + 
-        array[14] + "\n" + 
-        array[15] + "\n" + 
-        array[16] + "\n" + 
-        array[17] + "\n" + 
-        array[18] + "\n" + 
-        array[19] + "\n");
-  */
-}
-
-function testGenericUuids() {
-  // Time-based UUIDs
-  var uuid1 = new Uuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
-  var uuid2 = new Uuid("3B12F1DF-5232-1804-897E-917BF397618A");
-
-  // Random UUIDs
-  var uuid3 = new Uuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
-  var uuid4 = new Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
-  
-  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid1.getVersion() == Uuid.Version.TIME_BASED));    
-  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid2.getVersion() == Uuid.Version.TIME_BASED));    
-
-  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid3.getVersion() == Uuid.Version.RANDOM));    
-  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid4.getVersion() == Uuid.Version.RANDOM));    
-
-  checkUuidValidity(uuid1);
-  checkUuidValidity(uuid2);
-  checkUuidValidity(uuid3);
-  checkUuidValidity(uuid4);
-}
-
-function testInvalidUuids() {
-  var uuidStrings = [];
-  uuidStrings.push("Hello world!");    // not a UUID
-  uuidStrings.push("3B12F1DF-5232-1804-897E-917BF39761");    // too short
-  uuidStrings.push("3B12F1DF-5232-1804-897E-917BF39761-8A"); // extra '-'
-  uuidStrings.push("3B12F1DF-5232-1804-897E917BF39761-8A");  // last '-' in wrong place
-  uuidStrings.push("HB12F1DF-5232-1804-897E-917BF397618A");  // "HB12F1DF" is not a hex string
-  
-  var numberOfFailures = 0;
-  for (var i in uuidStrings) {
-    var uuidString = uuidStrings[i];
-    try {
-      new Uuid(uuidString);
-    } catch (e) {
-      ++numberOfFailures;
-    }
-  }
-  assertTrue('All of the "new Uuid()" calls failed', (numberOfFailures == uuidStrings.length));  
-
-  
-  uuidStrings.push("3B12F1DF-5232-4804-897E-917BF397618A");  // valid UUID, but not a time based UUID
-  uuidStrings.push("3B12F1DF-5232-1804-F97E-917BF397618A");  // valid UUID, but not a DCE variant
-  numberOfFailures = 0;
-  for (i in uuidStrings) {
-    uuidString = uuidStrings[i];
-    try {
-      new TimeBasedUuid(uuidString);
-    } catch (e) {
-      ++numberOfFailures;
-    }
-  }
-  assertTrue('All of the "new TimeBasedUuid()" calls failed', (numberOfFailures == uuidStrings.length));  
-}
-
-
-function testUuidFactory() {
-  // Time-based UUIDs
-  var uuid1 = Uuid.newUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
-  var uuid2 = Uuid.newUuid("3B12F1DF-5232-1804-897E-917BF397618A");
-
-  // Random UUIDs
-  var uuid3 = Uuid.newUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
-  var uuid4 = Uuid.newUuid("3B12F1DF-5232-4804-897E-917BF397618A");
-  
-  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid1.getVersion() == Uuid.Version.TIME_BASED));    
-  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid2.getVersion() == Uuid.Version.TIME_BASED));    
-
-  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid3.getVersion() == Uuid.Version.RANDOM));    
-  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid4.getVersion() == Uuid.Version.RANDOM));    
-
-  checkTimeBasedUuidValidity(uuid1);
-  checkTimeBasedUuidValidity(uuid2);
-  
-  checkRandomUuidValidity(uuid3);
-  checkRandomUuidValidity(uuid4);
-}
-
-// -------------------------------------------------------------------
-// Helper functions
-// -------------------------------------------------------------------
-
-function checkUuidValidity(uuid) {
-  assertTrue('All UUIDs are instances of Uuid', (uuid instanceof Uuid));
-
-  var variant = uuid.getVariant();
-  assertTrue('All of our UUIDs are DCE UUIDs', (variant == Uuid.Variant.DCE));  
-  
-  var uuidString = uuid.toString();
-  
-  assertTrue('UUIDs have 36 characters', (uuidString.length == 36));
-
-  var validCharacters = "0123456789abcedfABCDEF-";
-  var character;
-  var position;
-  for (var i = 0; i < 36; ++i) {
-    character = uuidString.charAt(i);
-    position = validCharacters.indexOf(character);
-    assertTrue('UUIDs have only valid characters', (position != -1));
-  }
-  
-  var arrayOfParts = uuidString.split("-");
-  assertTrue('UUIDs have 5 sections separated by 4 hyphens', (arrayOfParts.length == 5));
-  assertTrue('Section 0 has 8 characters', (arrayOfParts[0].length == 8));
-  assertTrue('Section 1 has 4 characters', (arrayOfParts[1].length == 4));
-  assertTrue('Section 2 has 4 characters', (arrayOfParts[2].length == 4));
-  assertTrue('Section 3 has 4 characters', (arrayOfParts[3].length == 4));
-  assertTrue('Section 4 has 8 characters', (arrayOfParts[4].length == 12));
-  
-  // check to see that the "UUID variant code" starts with the binary bits '10'
-  var section3 = arrayOfParts[3];
-  var hex3 = parseInt(section3, orp.util.Uuid.HEX_RADIX);
-  var binaryString = hex3.toString(2);
-  // alert("section3 = " + section3 + "\n binaryString = " + binaryString);
-  assertTrue('section 3 has 16 bits', binaryString.length == 16);
-  assertTrue("first bit of section 3 is 1", binaryString.charAt(0) == '1');
-  assertTrue("second bit of section 3 is 0", binaryString.charAt(1) == '0');
-}
-
-function checkRandomUuidValidity(uuid) {
-  checkUuidValidity(uuid);
-
-  assertTrue('Random UUIDs are instances of RandomUuid', (uuid instanceof RandomUuid));
-  
-  var version = uuid.getVersion();
-  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (version == Uuid.Version.RANDOM));  
-  
-  var uuidString = uuid.toString();
-  var arrayOfParts = uuidString.split("-");
-  var section2 = arrayOfParts[2];
-  assertTrue('Section 2 starts with a 4', (section2.charAt(0) == "4"));
-}
-
-function checkTimeBasedUuidValidity(uuid) {
-  checkUuidValidity(uuid);
-
-  assertTrue('TimeBased UUIDs are instances of RandomUuid', (uuid instanceof TimeBasedUuid));
-
-  var version = uuid.getVersion();
-  assertTrue('TimeBased UUIDs return Uuid.Version.TIME_BASED', (version == Uuid.Version.TIME_BASED));  
-
-  var node = uuid.getNode();
-  assertTrue("A UUID's node is a string", dojo.lang.isString(node));
-  assertTrue("A UUID's node string is 12 characters long.", node.length == 12);
-
-  var date = uuid.getDate();
-  assertTrue("TimeBased UUIDs can return a Date", (date instanceof Date));
-
-  var timestampAsHexString = uuid.getTimestampAsHexString();
-  assertTrue("A UUID's timestamp hex string is 15 characters long.", timestampAsHexString.length == 15);
-  
-  var uuidString = uuid.toString();
-  var arrayOfParts = uuidString.split("-");
-  var section2 = arrayOfParts[2];
-  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
-
-
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Added: trunk/tests/uuid/LintTest.html
===================================================================
--- trunk/tests/uuid/LintTest.html	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/uuid/LintTest.html	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/uuid/LintTest.js
===================================================================
--- trunk/tests/uuid/LintTest.js	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/uuid/LintTest.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,71 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "Uuid.js",
+    "RandomUuid.js",
+    "TimeBasedUuid.js"];
+  var prefix = "../../../source/uuid/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/uuid/TestSuite.html
===================================================================
--- trunk/tests/uuid/TestSuite.html	2005-10-06 23:23:31 UTC (rev 351)
+++ trunk/tests/uuid/TestSuite.html	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>UUID Test Suite</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestSuite(utilTestSuite());
+        return testSuite;
+      }
+      
+      function utilTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../../tests/uuid/LintTest.html");
+        testSuite.addTestPage("../../../tests/uuid/UuidTest.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>UUID Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/uuid/UuidTest.html (from rev 345, trunk/tests/util/UuidTest.html)

Copied: trunk/tests/uuid/UuidTest.js (from rev 345, trunk/tests/util/UuidTest.js)
===================================================================
--- trunk/tests/util/UuidTest.js	2005-09-28 07:24:38 UTC (rev 345)
+++ trunk/tests/uuid/UuidTest.js	2005-10-07 02:46:57 UTC (rev 352)
@@ -0,0 +1,427 @@
+/*****************************************************************************
+ UuidTest.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var RandomUuid = null;
+var TimeBasedUuid = null;
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.require("orp.uuid.factory");
+  dojo.require("orp.uuid.Uuid");
+  dojo.require("orp.uuid.RandomUuid");
+  dojo.require("orp.uuid.TimeBasedUuid");
+  dojo.require("dojo.lang.*");
+
+  Uuid = orp.uuid.Uuid;
+  RandomUuid = orp.uuid.RandomUuid;
+  TimeBasedUuid = orp.uuid.TimeBasedUuid;
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testGet64bitArrayFromFloat() {
+  var x = Math.pow(2, 63) + Math.pow(2, 15);
+  var result = TimeBasedUuid._get64bitArrayFromFloat(x);
+  assertTrue("result[0] == 0x8000", result[0] === 0x8000);
+  assertTrue("result[1] == 0x0000", result[1] === 0x0000);
+  assertTrue("result[2] == 0x0000", result[2] === 0x0000);
+  assertTrue("result[3] == 0x8000", result[3] === 0x8000);
+  
+  var date = new Date();
+  x = date.valueOf();
+  result = TimeBasedUuid._get64bitArrayFromFloat(x);
+  var reconstructedFloat = result[0];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[1];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[2];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[3];
+  
+  assertTrue("reconstructedFloat === x", reconstructedFloat === x);
+}
+
+function testAddTwo64bitArrays() {
+  var a = [0x0000, 0x0000, 0x0000, 0x0001];
+  var b = [0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF];
+  var result = TimeBasedUuid._addTwo64bitArrays(a, b);
+  assert(result[0] === 0x1000);
+  assert(result[1] === 0x0000);
+  assert(result[2] === 0x0000);
+  assert(result[3] === 0x0000);
+  
+  a = [0x4000, 0x8000, 0x8000, 0x8000];
+  b = [0x8000, 0x8000, 0x8000, 0x8000];
+  result = TimeBasedUuid._addTwo64bitArrays(a, b);
+  assert(result[0] === 0xC001);
+  assert(result[1] === 0x0001);
+  assert(result[2] === 0x0001);
+  assert(result[3] === 0x0000);
+  
+  a = [7, 6, 2, 5];
+  b = [1, 0, 3, 4];
+  result = TimeBasedUuid._addTwo64bitArrays(a, b);
+  assert(result[0] === 8);
+  assert(result[1] === 6);
+  assert(result[2] === 5);
+  assert(result[3] === 9);  
+}  
+
+function testMultiplyTwo64bitArrays() {
+  var a = [     0, 0x0000, 0x0000, 0x0003];
+  var b = [0x1111, 0x1234, 0x0000, 0xFFFF];
+  var result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0x3333);
+  assert(result[1] === 0x369C);
+  assert(result[2] === 0x0002);
+  assert(result[3] === 0xFFFD);
+  
+  a = [0, 0, 0, 5];
+  b = [0, 0, 0, 4];
+  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0);
+  assert(result[1] === 0);
+  assert(result[2] === 0);
+  assert(result[3] === 20);  
+  
+  a = [0, 0, 2, 5];
+  b = [0, 0, 3, 4];
+  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0);
+  assert(result[1] === 6);
+  assert(result[2] === 23);
+  assert(result[3] === 20);  
+}  
+
+function testRandomUuids() {
+  var uuid1 = new RandomUuid();
+  var uuid2 = new RandomUuid();
+  var uuid3 = new RandomUuid("3B12F1DF-5232-4804-897E-917BF397618A");
+  var uuid4 = new RandomUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+  var uuid5 = new RandomUuid(new String("3B12F1DF-5232-4804-897E-917BF397618A"));
+
+  // alert(uuid1 + "\n" + uuid2);
+  checkRandomUuidValidity(uuid1);
+  checkRandomUuidValidity(uuid2);
+  checkRandomUuidValidity(uuid3);
+  checkRandomUuidValidity(uuid4);
+  checkRandomUuidValidity(uuid5);
+
+  var uuidString1 = uuid1.toString();
+  var uuidString2 = uuid2.toString();
+  
+  assertTrue("uuid1 != uuid2", uuidString1 != uuidString2);
+}
+
+function testTimeBasedUuids() {
+  var uuid1 = new TimeBasedUuid();
+  var uuid2 = new TimeBasedUuid();
+  var uuid3 = new TimeBasedUuid();
+  var uuid4 = new TimeBasedUuid({node: "123456789ABC"});
+  var uuid5 = new TimeBasedUuid({'node': "123456789ABC"});
+  var uuid6 = new TimeBasedUuid({pseudoNode: "823456789ABC"});
+  var uuid7 = new TimeBasedUuid({'pseudoNode': "823456789ABC"});
+  var uuid8 = new TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid9 = new TimeBasedUuid({'uuidString': "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid10 = new TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A");
+  var uuid11 = new TimeBasedUuid(new String("3B12F1DF-5232-1804-897E-917BF397618A"));
+  
+  checkTimeBasedUuidValidity(uuid1);
+  checkTimeBasedUuidValidity(uuid2);
+  checkTimeBasedUuidValidity(uuid3);
+  checkTimeBasedUuidValidity(uuid4);
+  checkTimeBasedUuidValidity(uuid5);
+  checkTimeBasedUuidValidity(uuid6);
+  checkTimeBasedUuidValidity(uuid7);
+  checkTimeBasedUuidValidity(uuid8);
+  checkTimeBasedUuidValidity(uuid9);
+  checkTimeBasedUuidValidity(uuid10);
+  checkTimeBasedUuidValidity(uuid11);
+
+  uuid1 = uuid1.toString();
+  uuid2 = uuid2.toString();
+  uuid3 = uuid3.toString();
+  uuid4 = uuid4.toString();
+
+  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
+  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
+  
+  var arrayOfParts = uuid1.split("-");
+  var section4 = arrayOfParts[4];
+  var firstChar = section4.charAt(0);
+  var hexFirstChar = parseInt(firstChar, orp.uuid.Uuid.HEX_RADIX);
+  binaryString = hexFirstChar.toString(2);
+  var firstBit;
+  if (binaryString.length == 4) {
+    firstBit = binaryString.charAt(0);
+  } else {
+    firstBit = '0';
+  }
+  // alert("firstChar = " + firstChar + "\n as number = " + hexFirstChar + 
+  //       "\n in binary = " + binaryString + "\n first bit = " + firstBit);
+  assertTrue("first bit of section 4 is 1", firstBit == '1');
+
+
+  arrayOfParts = uuid4.split("-");
+  section4 = arrayOfParts[4];
+  assertTrue('Section 4 = node input', section4 == "123456789ABC");
+
+  /* 
+  // Old code that Brian wrote to try to get a sense of how
+  // many UUIDs we can create in a single millisecond 
+  var array = [];
+  var now = new Date();
+  var then = new Date();
+  while (now.valueOf() == then.valueOf()) {
+    then = new Date();
+  }
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  alert(array[0] + "\n" + 
+        array[1] + "\n" + 
+        array[2] + "\n" + 
+        array[3] + "\n" + 
+        array[4] + "\n" + 
+        array[5] + "\n" + 
+        array[6] + "\n" + 
+        array[7] + "\n" + 
+        array[8] + "\n" + 
+        array[9] + "\n" + 
+        array[10] + "\n" + 
+        array[11] + "\n" + 
+        array[12] + "\n" + 
+        array[13] + "\n" + 
+        array[14] + "\n" + 
+        array[15] + "\n" + 
+        array[16] + "\n" + 
+        array[17] + "\n" + 
+        array[18] + "\n" + 
+        array[19] + "\n");
+  */
+}
+
+function testGenericUuids() {
+  // Time-based UUIDs
+  var uuid1 = new Uuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid2 = new Uuid("3B12F1DF-5232-1804-897E-917BF397618A");
+
+  // Random UUIDs
+  var uuid3 = new Uuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+  var uuid4 = new Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+  
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid1.getVersion() == Uuid.Version.TIME_BASED));    
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid2.getVersion() == Uuid.Version.TIME_BASED));    
+
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid3.getVersion() == Uuid.Version.RANDOM));    
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid4.getVersion() == Uuid.Version.RANDOM));    
+
+  checkUuidValidity(uuid1);
+  checkUuidValidity(uuid2);
+  checkUuidValidity(uuid3);
+  checkUuidValidity(uuid4);
+}
+
+function testInvalidUuids() {
+  var uuidStrings = [];
+  uuidStrings.push("Hello world!");    // not a UUID
+  uuidStrings.push("3B12F1DF-5232-1804-897E-917BF39761");    // too short
+  uuidStrings.push("3B12F1DF-5232-1804-897E-917BF39761-8A"); // extra '-'
+  uuidStrings.push("3B12F1DF-5232-1804-897E917BF39761-8A");  // last '-' in wrong place
+  uuidStrings.push("HB12F1DF-5232-1804-897E-917BF397618A");  // "HB12F1DF" is not a hex string
+  
+  var numberOfFailures = 0;
+  for (var i in uuidStrings) {
+    var uuidString = uuidStrings[i];
+    try {
+      new Uuid(uuidString);
+    } catch (e) {
+      ++numberOfFailures;
+    }
+  }
+  assertTrue('All of the "new Uuid()" calls failed', (numberOfFailures == uuidStrings.length));  
+
+  
+  uuidStrings.push("3B12F1DF-5232-4804-897E-917BF397618A");  // valid UUID, but not a time based UUID
+  uuidStrings.push("3B12F1DF-5232-1804-F97E-917BF397618A");  // valid UUID, but not a DCE variant
+  numberOfFailures = 0;
+  for (i in uuidStrings) {
+    uuidString = uuidStrings[i];
+    try {
+      new TimeBasedUuid(uuidString);
+    } catch (e) {
+      ++numberOfFailures;
+    }
+  }
+  assertTrue('All of the "new TimeBasedUuid()" calls failed', (numberOfFailures == uuidStrings.length));  
+}
+
+
+function testUuidFactory() {
+  // Time-based UUIDs
+  var uuid1 = orp.uuid.newUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid2 = orp.uuid.newUuid("3B12F1DF-5232-1804-897E-917BF397618A");
+
+  // Random UUIDs
+  var uuid3 = orp.uuid.newUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+  var uuid4 = orp.uuid.newUuid("3B12F1DF-5232-4804-897E-917BF397618A");
+  
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid1.getVersion() == Uuid.Version.TIME_BASED));    
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid2.getVersion() == Uuid.Version.TIME_BASED));    
+
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid3.getVersion() == Uuid.Version.RANDOM));    
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid4.getVersion() == Uuid.Version.RANDOM));    
+
+  checkTimeBasedUuidValidity(uuid1);
+  checkTimeBasedUuidValidity(uuid2);
+  
+  checkRandomUuidValidity(uuid3);
+  checkRandomUuidValidity(uuid4);
+}
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function checkUuidValidity(uuid) {
+  assertTrue('All UUIDs are instances of Uuid', (uuid instanceof Uuid));
+
+  var variant = uuid.getVariant();
+  assertTrue('All of our UUIDs are DCE UUIDs', (variant == Uuid.Variant.DCE));  
+  
+  var uuidString = uuid.toString();
+  
+  assertTrue('UUIDs have 36 characters', (uuidString.length == 36));
+
+  var validCharacters = "0123456789abcedfABCDEF-";
+  var character;
+  var position;
+  for (var i = 0; i < 36; ++i) {
+    character = uuidString.charAt(i);
+    position = validCharacters.indexOf(character);
+    assertTrue('UUIDs have only valid characters', (position != -1));
+  }
+  
+  var arrayOfParts = uuidString.split("-");
+  assertTrue('UUIDs have 5 sections separated by 4 hyphens', (arrayOfParts.length == 5));
+  assertTrue('Section 0 has 8 characters', (arrayOfParts[0].length == 8));
+  assertTrue('Section 1 has 4 characters', (arrayOfParts[1].length == 4));
+  assertTrue('Section 2 has 4 characters', (arrayOfParts[2].length == 4));
+  assertTrue('Section 3 has 4 characters', (arrayOfParts[3].length == 4));
+  assertTrue('Section 4 has 8 characters', (arrayOfParts[4].length == 12));
+  
+  // check to see that the "UUID variant code" starts with the binary bits '10'
+  var section3 = arrayOfParts[3];
+  var hex3 = parseInt(section3, orp.uuid.Uuid.HEX_RADIX);
+  var binaryString = hex3.toString(2);
+  // alert("section3 = " + section3 + "\n binaryString = " + binaryString);
+  assertTrue('section 3 has 16 bits', binaryString.length == 16);
+  assertTrue("first bit of section 3 is 1", binaryString.charAt(0) == '1');
+  assertTrue("second bit of section 3 is 0", binaryString.charAt(1) == '0');
+}
+
+function checkRandomUuidValidity(uuid) {
+  checkUuidValidity(uuid);
+
+  assertTrue('Random UUIDs are instances of RandomUuid', (uuid instanceof RandomUuid));
+  
+  var version = uuid.getVersion();
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (version == Uuid.Version.RANDOM));  
+  
+  var uuidString = uuid.toString();
+  var arrayOfParts = uuidString.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 4', (section2.charAt(0) == "4"));
+}
+
+function checkTimeBasedUuidValidity(uuid) {
+  checkUuidValidity(uuid);
+
+  assertTrue('TimeBased UUIDs are instances of RandomUuid', (uuid instanceof TimeBasedUuid));
+
+  var version = uuid.getVersion();
+  assertTrue('TimeBased UUIDs return Uuid.Version.TIME_BASED', (version == Uuid.Version.TIME_BASED));  
+
+  var node = uuid.getNode();
+  assertTrue("A UUID's node is a string", dojo.lang.isString(node));
+  assertTrue("A UUID's node string is 12 characters long.", node.length == 12);
+
+  var date = uuid.getDate();
+  assertTrue("TimeBased UUIDs can return a Date", (date instanceof Date));
+
+  var timestampAsHexString = uuid.getTimestampAsHexString();
+  assertTrue("A UUID's timestamp hex string is 15 characters long.", timestampAsHexString.length == 15);
+  
+  var uuidString = uuid.toString();
+  var arrayOfParts = uuidString.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
+
+
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at berlios.de  Fri Oct  7 05:30:40 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 7 Oct 2005 05:30:40 +0200
Subject: [openrecord-svn] r353 - in trunk: documentation source/archive source/model tests/model tests/util
Message-ID: <200510070330.j973Ue3E010087@sheep.berlios.de>

Author: skinner
Date: 2005-10-07 05:30:33 +0200 (Fri, 07 Oct 2005)
New Revision: 353

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/archive/DeltaArchive.js
   trunk/source/archive/JsonDeserializer.js
   trunk/source/archive/StubArchive.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/World.js
   trunk/tests/model/RepositoryWritingTest.js
   trunk/tests/util/XmlConverterMultiplePassesTest.js
Log:
Renamed some variables and methods in an effort to make our terminology more clear and consistent.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/documentation/release_planning.txt	2005-10-07 03:30:33 UTC (rev 353)
@@ -407,7 +407,7 @@
 brian  |          | 0.1  IED|  3. move UUID files from source/util to source/uuid
 brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API
 brian  |          | 0.5  IED|  5. split half the code in source/model off into source/_____
-brian  |          | (0.25+) |  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 
+brian  |          | 0.35 IED|  6. use terms Serialize and Deserialize for that code (replace some Dehydrate and Rehydrate) 
        |          |         |  7. merge StubArchive + DeltaArchive, and re-name the result
 brian  |          | 0.25 IED|  8. create a FakeStorage class, + rename FileSaver + HttpSaver
        |          |         |     update unit tests to use the FakeStorage instead of StubArchive
@@ -695,7 +695,6 @@
 ===========================       
 Issues for post iteration#2
 ===========================       
- + How should we rename "VirtualServer"?
  + How should we interoperate with other repositories(openrecord + other sources of data)?
  + Should we rename "World"?
  + BUG: Can't really create own plugins yet (e.g. UUID need to be assigned, plugin item created)

Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/source/archive/DeltaArchive.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -95,7 +95,7 @@
  */
 orp.archive.DeltaArchive.prototype.setWorldAndLoadAxiomaticItems = function(world) {
   this._initialize(world);
-  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
+  this._loadAxiomaticItemsFromFileAtURL(this._axiomaticJsonFileURL);
 
   var repositoryFileName = this._repositoryName + ".json";
   var repositoryUrl = "";
@@ -116,10 +116,10 @@
 // -------------------------------------------------------------------
 
 /**
- * Loads a world of items from a dehydrated JSON string.
+ * Loads a world of items from a serialized JSON string.
  *
  * Given a world of items in JSON format, bootstraps new 
- * instances of items corresponding to the dehydrated data.
+ * instances of items corresponding to the serialized data.
  * 
  * @scope    private instance method
  * @param    jsonRepositoryString    A JSON string literal representing the world of items. 

Modified: trunk/source/archive/JsonDeserializer.js
===================================================================
--- trunk/source/archive/JsonDeserializer.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/source/archive/JsonDeserializer.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -73,6 +73,8 @@
  * @param    jsonString    A JSON string containing serialized records. 
  */
 orp.archive.JsonDeserializer.prototype.deserializeFromString = function(jsonString) {
+  
+  // See the _rehydrateRecords() method for a note on what "dehydratedRecords" means.
   var dehydratedRecords = null;
   dehydratedRecords = eval("(" + jsonString + ")");
   
@@ -104,6 +106,23 @@
 /**
  * Given a dehydrated list of records, rehydrates each of the records.
  *
+ * A note on terminology: For the time being, we're using the term "dehydrated" 
+ * to refer to records in an itermediate stage of the deserialization process.
+ * When the records are represented as a text string, either in memory or
+ * in a file, we say that the records have been "serialized".  When the
+ * records are represented as instances of orp.model.Record (and its 
+ * subclasses, like orp.model.Item and orp.model.Entry), we say that the
+ * records have been completely "deserialized" or "revived".  Between the two 
+ * stages, the records pass through a "dehydrated" state, where they are 
+ * represented as "anonymous JavaScript objects".  
+ * 
+ * For example:
+ * <pre>
+ *   serializedBox = "({length: 4, width: 5})";
+ *   dehydratedBox = eval(serializedBox);
+ *   revivedBox = new orp.model.Box(dehydratedBox.length, dehydratedBox.width);
+ * </pre>
+ *
  * @scope    private instance method
  * @param    listOfDehydratedRecords    A list of dehydrated records. 
  */
@@ -197,7 +216,7 @@
           
           var pairOfItems = [firstItem, secondItem];
           var pairOfAttributes = [firstAttribute, secondAttribute];
-          entry._rehydrate(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
+          entry._revive(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
         } else {
           itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
           item = archiveLoader.getItemFromUuidOrBootstrapItem(itemUuid);
@@ -230,7 +249,7 @@
             default:
               orp.lang.assert(false, 'Unknown data type while _rehydrating()');
           }
-          entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
+          entry._revive(item, attribute, finalData, previousEntry, dataType);
         }
         archiveLoader.addRecordToChronologicalList(entry);
       }

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/source/archive/StubArchive.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -63,7 +63,7 @@
  */
 orp.archive.StubArchive = function(pathToTrunkDirectory) {
   var fileName = "2005_june_axiomatic_items.json";
-  var relUrlForAxiomaticFile = "source/model/" + fileName;
+  var relativeUrlForAxiomaticFile = "source/model/" + fileName;
   if (pathToTrunkDirectory) {
     this._needCompletePath = true;
     var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/source/model/TestRepositoryWriting.html.
@@ -71,10 +71,10 @@
     arrayOfPathComponents.pop();
     var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
     this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectory;
-    this._dehydratedAxiomFileURL = this._completePathToTrunkDirectory + '/' + relUrlForAxiomaticFile;
+    this._axiomaticJsonFileURL = this._completePathToTrunkDirectory + '/' + relativeUrlForAxiomaticFile;
   } else {
     this._needCompletePath = false;
-    this._dehydratedAxiomFileURL = relUrlForAxiomaticFile;    
+    this._axiomaticJsonFileURL = relativeUrlForAxiomaticFile;    
   }
 };
 
@@ -118,7 +118,7 @@
  */
 orp.archive.StubArchive.prototype.setWorldAndLoadAxiomaticItems = function(world) {
   this._initialize(world);
-  this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
+  this._loadAxiomaticItemsFromFileAtURL(this._axiomaticJsonFileURL);
 };
 
 
@@ -513,8 +513,8 @@
  */
 orp.archive.StubArchive.prototype._saveChangesToServer = function () {
   // The StubArchive doesn't ever actually talk to a server.
-  // Other VirtualServer implementations would be expected to actually
-  // implement this method such that it saves changes to the server
+  // Other orp.archive implementations would be expected to actually
+  // implement this method such that it saves changes to the server.
   var listOfChangesMade = this._currentTransaction.getRecords();
   this._currentTransaction = null;
   return listOfChangesMade;

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/source/model/Entry.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -54,8 +54,8 @@
  * Instances of the Entry class hold literal values (like strings
  * and numbers), or reference values (pointers to Items).
  *
- * WARNING: This constructor method should be called ONLY from a 
- * VirtualServer implementation.
+ * WARNING: This constructor method should be called ONLY from an 
+ * orp.archive implementation.
  *
  * If you're writing code in a view class, instead of calling this
  * constructor, call a method on Item, like item.addAttributeEntry()
@@ -85,12 +85,12 @@
 /**
  * Initializes a new entry that has just been created by a user action.
  *
- * WARNING: This method should be called ONLY from a 
- * VirtualServer implementation.
+ * WARNING: This method should be called ONLY from an orp.archive
+ * implementation.
  *
- * This method is NOT used for setting the properties of entrys that
- * are being rehydrated from a dehydrated JSON string.  For that, you
- * need to call entry.rehydrate();
+ * This method is NOT used for setting the properties of Entries that
+ * are being revived from a serialized JSON string.  For that, you
+ * need to call entry._revive();
  *
  * @scope    protected instance method
  * @param    inItemOrEntry    The item that this is a entry of, or the old entry that this entry replaces. 
@@ -136,12 +136,12 @@
 /**
  * Initializes a new entry that has just been created by a user action.
  *
- * WARNING: This method should be called ONLY from a 
- * VirtualServer implementation.
+ * WARNING: This method should be called ONLY from an orp.archive 
+ * implementation.
  *
  * This method is NOT used for setting the properties of entrys that
- * are being rehydrated from a dehydrated JSON string.  For that, you
- * need to call entry.rehydrate();
+ * are being revived from a serialized JSON string.  For that, you
+ * need to call entry._revive();
  *
  * @scope    protected instance method
  * @param    previousEntry    The entry that this entry will replace. Can be null.
@@ -165,14 +165,12 @@
 
 
 /**
- * Sets the properties of a newly rehydrated entry object.
+ * Sets the properties of a newly deserialized Entry object.
  *
- * WARNING: This method should be called ONLY from a 
- * VirtualServer implementation.
+ * WARNING: This method should be called ONLY from an orp.archive
+ * implementation. This method should only be called from orp.archive
+ * code that is reviving serialized Entry objects. 
  *
- * This method should only be called from VirtualServer code that is
- * rehydrating dehydrated entry objects. 
- *
  * @scope    protected instance method
  * @param    item    The item that this is an entry of. 
  * @param    inAttribute    The attribute that this entry is assigned to. May be null. 
@@ -180,7 +178,7 @@
  * @param    previousEntry    Optional. An old entry that this entry replaces. 
  * @param    type    Optional. An item representing a data type. 
  */
-orp.model.Entry.prototype._rehydrate = function(item, attribute, value, previousEntry, type) {
+orp.model.Entry.prototype._revive = function(item, attribute, value, previousEntry, type) {
   this._item = item;
   if (previousEntry) {
     this._previousEntry = previousEntry;
@@ -195,7 +193,7 @@
   this._type = type;
 
   if (this._item instanceof orp.model.Item) {
-    this._item._addRehydratedEntry(this, this._attribute);
+    this._item._addRevivedEntry(this, this._attribute);
   } else {
     orp.lang.assertType(this._item, Array);
     orp.lang.assertType(this._attribute, Array);
@@ -204,8 +202,8 @@
     
     var firstItem = this._item[0];
     var secondItem = this._item[1];
-    firstItem._addRehydratedEntry(this, this._attribute[0]);
-    secondItem._addRehydratedEntry(this, this._attribute[1]);
+    firstItem._addRevivedEntry(this, this._attribute[0]);
+    secondItem._addRevivedEntry(this, this._attribute[1]);
   }
 };
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/source/model/Item.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -55,8 +55,8 @@
  * Instances of the Item class know how to store and retrieve their
  * attribute entries.
  *
- * WARNING: This constructor method should be called ONLY from a 
- * VirtualServer implementation.
+ * WARNING: This constructor method should be called ONLY from an 
+ * orp.archive implementation.
  *
  * If you're writing code in a view class, instead of calling this
  * constructor, call the newItem() method on World: world.newItem()
@@ -97,12 +97,11 @@
 /**
  * Initializes a new item that has just been created by a user action.
  *
- * WARNING: This method should be called ONLY from a 
- * VirtualServer implementation.
+ * WARNING: This method should be called ONLY from an 
+ * orp.archive implementation.
  *
  * This method is NOT used for setting the properties of entries that
- * are being rehydrated from a dehydrated JSON string.  For that, you
- * need to call item.rehydrate();
+ * are being revived from a serialized JSON string.  
  *
  * @scope    protected instance method
  * @param    observer    Optional. An object or method to be registered as an observer of the returned item. 
@@ -727,16 +726,16 @@
 
 /**
  * Adds a new entry to the item when the items and entries are first
- * being loaded by the backing store.
+ * being loaded from storage.
  *
  * WARNING: This method should be called ONLY from the  
- * entry._rehydrate() method.
+ * entry._revive() method.
  * 
  * @scope    protected instance method
  * @param    entry    The entry to be associated with this item. 
  * @param    attribute    The attribute that this entry is assigned to. 
  */
-orp.model.Item.prototype._addRehydratedEntry = function(entry, attribute) {
+orp.model.Item.prototype._addRevivedEntry = function(entry, attribute) {
   this._addEntryToListOfEntriesForAttribute(entry, attribute);
 };
   

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/source/model/World.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -62,18 +62,17 @@
  * a world to edit the items there.
  *
  * @scope    public instance constructor
- * @param    virtualServer    Optional. The datastore that this world gets its data from. 
+ * @param    archive    Optional. The orp.archive that this world gets its data from. 
  */
-orp.model.World = function(virtualServer) {
+orp.model.World = function(archive) {
   this._hashTableOfObserverListsKeyedByItemUuid = {};
   this._listOfListObserverTuples = [];
   
   this._registeredQueryRunners = [];
   this._currentRetrievalFilter = "RETRIEVAL_FILTER_LAST_EDIT_WINS";
 
-  var server;
-  if (virtualServer) {
-    server = virtualServer;
+  if (archive) {
+    this._archive = archive;
   } else {
     var filepath = window.location.pathname;
     var arrayOfSegments = filepath.split('/');
@@ -81,11 +80,10 @@
     var arrayWithFilenameAndExtension = lastSegment.split('.');
     var filename = arrayWithFilenameAndExtension[0];
     var repositoryName = filename;
-    server = new orp.archive.DeltaArchive(repositoryName);
+    this._archive = new orp.archive.DeltaArchive(repositoryName);
   }
-  this._virtualServer = server;
 
-  server.setWorldAndLoadAxiomaticItems(this);
+  this._archive.setWorldAndLoadAxiomaticItems(this);
   this._loadAxiomaticItems();
 };
 
@@ -153,7 +151,7 @@
  */
 orp.model.World.prototype._loadAxiomaticItems = function() {
   var UUID = orp.model.World.UUID;
-  var server = this._virtualServer;
+  var server = this._archive;
 
   // load the axiomatic attributes
   this._attributeCalledName                   = server.getItemFromUuid(UUID.ATTRIBUTE_NAME);
@@ -206,7 +204,7 @@
  * @scope    public instance method
  */
 orp.model.World.prototype.beginTransaction = function() {
-  this._virtualServer.beginTransaction();
+  this._archive.beginTransaction();
 };
  
 
@@ -216,7 +214,7 @@
  * @scope    public instance method
  */
 orp.model.World.prototype.endTransaction = function() {
-  this._virtualServer.endTransaction();
+  this._archive.endTransaction();
 };
 
 
@@ -582,7 +580,7 @@
  * @return   True if we were able to log in the user. False if the login failed.
  */
 orp.model.World.prototype.login = function(user, authentication) {
-  return this._virtualServer.login(user, authentication);
+  return this._archive.login(user, authentication);
 };
 
 
@@ -593,7 +591,7 @@
  * @return   True if the current user was logged out. False if there was no current user logged in.
  */
 orp.model.World.prototype.logout = function() {
-  return this._virtualServer.logout();
+  return this._archive.logout();
 };
 
 
@@ -608,7 +606,7 @@
  * @return   A list of items that represent users.
  */
 orp.model.World.prototype.getUsers = function() {
-  var listOfUsers = this._virtualServer.getUsers();
+  var listOfUsers = this._archive.getUsers();
   return this._getFilteredList(listOfUsers);
 };
 
@@ -620,7 +618,7 @@
  * @return   An item representing the user who is currently logged in.
  */
 orp.model.World.prototype.getCurrentUser = function() {
-  return this._virtualServer.getCurrentUser();
+  return this._archive.getCurrentUser();
 };
 
 
@@ -636,7 +634,7 @@
  */
 orp.model.World.prototype.newUser = function(name, authentication, observer) {
   this.beginTransaction();
-  var newUser = this._virtualServer.newUser(name, authentication, observer);
+  var newUser = this._archive.newUser(name, authentication, observer);
   this.endTransaction();
   return newUser;
 };
@@ -657,7 +655,7 @@
  */
 orp.model.World.prototype.newItem = function(name, observer) {
   this.beginTransaction();
-  var item = this._virtualServer.newItem(name, observer);
+  var item = this._archive.newItem(name, observer);
   this.endTransaction();
   return item;
 };
@@ -676,7 +674,7 @@
  * @throws   Throws an Error if no user is logged in.
  */
 orp.model.World.prototype.newProvisionalItem = function(observer) {
-  return this._virtualServer.newProvisionalItem(observer);
+  return this._archive.newProvisionalItem(observer);
 };
 
 
@@ -687,7 +685,7 @@
  * @param    item    The item that was provisional and just became real. 
  */
 orp.model.World.prototype._provisionalItemJustBecameReal = function(item) {
-  this._virtualServer._provisionalItemJustBecameReal(item);
+  this._archive._provisionalItemJustBecameReal(item);
 };
 
 
@@ -702,7 +700,7 @@
  */
 orp.model.World.prototype.newAttribute = function(name, observer) {
   this.beginTransaction();
-  var item = this._virtualServer.newItem(name, observer);
+  var item = this._archive.newItem(name, observer);
   var categoryCalledAttribute = this.getCategoryCalledAttribute();
   item.assignToCategory(categoryCalledAttribute);
   this.endTransaction();
@@ -721,7 +719,7 @@
  */
 orp.model.World.prototype.newCategory = function(name, observer) {
   this.beginTransaction();
-  var item = this._virtualServer.newItem(name, observer);
+  var item = this._archive.newItem(name, observer);
   var categoryCalledCategory = this.getCategoryCalledCategory();
   item.assignToCategory(categoryCalledCategory);
   this.endTransaction();
@@ -740,7 +738,7 @@
 orp.model.World.prototype.newQuery = function(matchingAttribute, matchingEntryOrListOfEntries) {
   orp.lang.assert(matchingAttribute instanceof orp.model.Item);
   this.beginTransaction();
-  var item = this._virtualServer.newItem("A query");
+  var item = this._archive.newItem("A query");
   var categoryCalledQuery = this.getCategoryCalledQuery();
   item.assignToCategory(categoryCalledQuery);
 
@@ -837,7 +835,7 @@
  */
 orp.model.World.prototype._newEntry = function(item, previousEntry, attribute, value, type) {
   this.beginTransaction();
-  var entry = this._virtualServer.newEntry(item, previousEntry, attribute, value, type);
+  var entry = this._archive.newEntry(item, previousEntry, attribute, value, type);
   this.endTransaction();
   return entry;
 };
@@ -856,7 +854,7 @@
  */
 orp.model.World.prototype._newConnectionEntry = function(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo) {
   this.beginTransaction();
-  var entry = this._virtualServer.newConnectionEntry(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
+  var entry = this._archive.newConnectionEntry(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
   this.endTransaction();
   return entry;
 };
@@ -872,7 +870,7 @@
  */
 orp.model.World.prototype._newOrdinal = function(contentRecord, ordinalNumber) {
   this.beginTransaction();
-  var ordinal = this._virtualServer.newOrdinal(contentRecord, ordinalNumber);
+  var ordinal = this._archive.newOrdinal(contentRecord, ordinalNumber);
   this.endTransaction();
   return ordinal;
 };
@@ -888,7 +886,7 @@
  */
 orp.model.World.prototype._newVote = function(contentRecord, retainFlag) {
   this.beginTransaction();
-  var vote = this._virtualServer.newVote(contentRecord, retainFlag);
+  var vote = this._archive.newVote(contentRecord, retainFlag);
   this.endTransaction();
   return vote;
 };
@@ -903,7 +901,7 @@
  * @return   The item identified by the given UUID.
  */
 orp.model.World.prototype.getItemFromUuid = function(uuid, observer) {
-  return (this._virtualServer.getItemFromUuid(uuid, observer));
+  return (this._archive.getItemFromUuid(uuid, observer));
 };
 
 
@@ -915,7 +913,7 @@
  * @return   The entry identified by the given UUID.
  */
 orp.model.World.prototype.getEntryFromUuid = function(uuid) {
-  return (this._virtualServer._getEntryFromUuid(uuid));
+  return (this._archive._getEntryFromUuid(uuid));
 };
 
 
@@ -932,7 +930,7 @@
  * @return   A list of items.
  */
 orp.model.World.prototype.getResultItemsForQueryRunner = function(queryRunner) {
-  var listOfItems = this._virtualServer.getResultItemsForQueryRunner(queryRunner);
+  var listOfItems = this._archive.getResultItemsForQueryRunner(queryRunner);
   return listOfItems;
 };
 
@@ -948,7 +946,7 @@
  * @throws   Throws an Error if no user is logged in.
  */
 orp.model.World.prototype.setItemToBeIncludedInQueryResultList = function(item, query) {
-  this._virtualServer.setItemToBeIncludedInQueryResultList(item, query);
+  this._archive.setItemToBeIncludedInQueryResultList(item, query);
 };
 
 
@@ -962,7 +960,7 @@
  * @return   A list of items.
  */
 orp.model.World.prototype.getItemsInCategory = function(category, observer) {
-  var listOfItems = this._virtualServer.getItemsInCategory(category);
+  var listOfItems = this._archive.getItemsInCategory(category);
   // listOfItems = this._getFilteredList(listOfItems); PENDING: not sure if I should call this?
   this._addListObserver(listOfItems, observer);
   return (listOfItems);

Modified: trunk/tests/model/RepositoryWritingTest.js
===================================================================
--- trunk/tests/model/RepositoryWritingTest.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/tests/model/RepositoryWritingTest.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -109,17 +109,17 @@
 }
 
 function testCreateNewRepository() {
-  var virtualServer = new orp.archive.DeltaArchive(fileName, pathToTrunkDirectoryFromThisDirectory);
+  var archive = new orp.archive.DeltaArchive(fileName, pathToTrunkDirectoryFromThisDirectory);
   var overwriteIfExists = true;
-  virtualServer._createNewRepository(overwriteIfExists);
+  archive._createNewRepository(overwriteIfExists);
   assertTrue("Contents should be '{ \"format\": \"2005_JUNE_CHRONOLOGICAL_LIST\", ...'.", fileHasExpectedContents(expectedRepositoryHeader));
 }
 
 function testAppendToRepository() {
-  var virtualServer = new orp.archive.DeltaArchive(fileName, pathToTrunkDirectoryFromThisDirectory);
+  var archive = new orp.archive.DeltaArchive(fileName, pathToTrunkDirectoryFromThisDirectory);
   var overwriteIfExists = true;
-  virtualServer._createNewRepository(overwriteIfExists);
-  var world = new orp.model.World(virtualServer);
+  archive._createNewRepository(overwriteIfExists);
+  var world = new orp.model.World(archive);
   var listOfUsers = world.getUsers();
   var mignon = null;
   for (var key in listOfUsers) {

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.js
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-10-07 02:46:57 UTC (rev 352)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-10-07 03:30:33 UTC (rev 353)
@@ -52,8 +52,8 @@
   // var pathToTrunkDirectoryFromThisFile = "../../../";
   var pathToTrunkDirectoryFromThisFile = "../..";
   
-  var virtualServer = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
-  world = new orp.model.World(virtualServer);
+  var archive = new orp.archive.StubArchive(pathToTrunkDirectoryFromThisFile);  
+  world = new orp.model.World(archive);
   var annsPassword = "Ann's password";
   var userAnn = world.newUser("Ann Doe", annsPassword);
   world.login(userAnn, annsPassword);



From skinner at berlios.de  Fri Oct  7 05:35:49 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 7 Oct 2005 05:35:49 +0200
Subject: [openrecord-svn] r354 - in trunk: documentation source/model source/view
Message-ID: <200510070335.j973Zn4a014103@sheep.berlios.de>

Author: skinner
Date: 2005-10-07 05:35:47 +0200 (Fri, 07 Oct 2005)
New Revision: 354

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/model/QueryRunner.js
   trunk/source/view/PluginView.js
   trunk/source/view/SectionView.js
Log:
Changed "endOfLife()" to "destroy()", following the Dojo naming convention.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-07 03:30:33 UTC (rev 353)
+++ trunk/documentation/release_planning.txt	2005-10-07 03:35:47 UTC (rev 354)
@@ -411,7 +411,7 @@
        |          |         |  7. merge StubArchive + DeltaArchive, and re-name the result
 brian  |          | 0.25 IED|  8. create a FakeStorage class, + rename FileSaver + HttpSaver
        |          |         |     update unit tests to use the FakeStorage instead of StubArchive
-       |          |         |  9. change "endOfLife()" to "destroy()"
+brian  |          | 0    IED|  9. change "endOfLife()" to "destroy()"
        |          |         | 10. Rationalize the View API and document public API
 mignon | 1    IED |         | 11. Rationalize the ViewPlugin API
 mignon | 0.25 IED |         | 12. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 

Modified: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-10-07 03:30:33 UTC (rev 353)
+++ trunk/source/model/QueryRunner.js	2005-10-07 03:35:47 UTC (rev 354)
@@ -179,7 +179,7 @@
  *
  * @scope    public instance method
  */
-orp.model.QueryRunner.prototype.endOfLife = function() {
+orp.model.QueryRunner.prototype.destroy = function() {
   this.getWorld()._unregisterQueryRunner(this);
 };
 

Modified: trunk/source/view/PluginView.js
===================================================================
--- trunk/source/view/PluginView.js	2005-10-07 03:30:33 UTC (rev 353)
+++ trunk/source/view/PluginView.js	2005-10-07 03:35:47 UTC (rev 354)
@@ -119,7 +119,7 @@
  *
  * @scope    public instance method
  */
-orp.view.PluginView.prototype.endOfLife = function() {
+orp.view.PluginView.prototype.destroy = function() {
   orp.view.View.removeChildrenOfElement(this.getHtmlElement());
 };
 

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-10-07 03:30:33 UTC (rev 353)
+++ trunk/source/view/SectionView.js	2005-10-07 03:35:47 UTC (rev 354)
@@ -417,7 +417,7 @@
   var myQuery = this.getQuerySpec();
   orp.lang.assert(item == myQuery);
   var pluginItem = this._pluginView.getPluginItem();
-  this._pluginView.endOfLife();
+  this._pluginView.destroy();
   this._pluginView = this.getPluginInstanceFromPluginItem(pluginItem, this._pluginDiv);
   this.refresh();
 };
@@ -444,7 +444,7 @@
   if (this._pluginView.getPluginItem() == newPluginViewItem) { 
     return;
   } else {
-    this._pluginView.endOfLife();
+    this._pluginView.destroy();
     this._pluginView = this.getPluginInstanceFromPluginItem(newPluginViewItem, this._pluginDiv);
 
     var oldEntry = this._section.getSingleEntryFromAttribute(attributeCalledPluginView);
@@ -514,7 +514,7 @@
     // query item, and then the plugin itself can know what to do when the
     // query item changes.  
     var pluginItem = this._pluginView.getPluginItem();
-    this._pluginView.endOfLife();
+    this._pluginView.destroy();
     this._pluginView = this.getPluginInstanceFromPluginItem(pluginItem, this._pluginDiv);
 
     this.refresh();



From skinner at berlios.de  Tue Oct 11 04:10:43 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 11 Oct 2005 04:10:43 +0200
Subject: [openrecord-svn] r355 - in trunk/source: archive model util view
Message-ID: <200510110210.j9B2AhPK016277@sheep.berlios.de>

Author: skinner
Date: 2005-10-11 04:10:40 +0200 (Tue, 11 Oct 2005)
New Revision: 355

Modified:
   trunk/source/archive/DeltaArchive.js
   trunk/source/archive/JsonDeserializer.js
   trunk/source/archive/StubArchive.js
   trunk/source/model/ContentRecord.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/Record.js
   trunk/source/model/World.js
   trunk/source/util/LintTool.js
   trunk/source/view/EntryView.js
   trunk/source/view/MultiEntriesView.js
   trunk/source/view/PageView.js
   trunk/source/view/SectionView.js
Log:
New data model code that hopefully offers a simpler, easier Data Model API, at the expense of a more complicated implementation which introduces the ProxyEntry.js class.

Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/archive/DeltaArchive.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -88,7 +88,7 @@
 
 /**
  * Initializes the instance variables for a newly created DeltaArchive,
- * and does the initial loading of at least the axiomatic items.
+ * and does the initial loading of the axiomatic items.
  *
  * @scope    public instance method
  * @param    world    The world that we provide data for. 
@@ -96,7 +96,17 @@
 orp.archive.DeltaArchive.prototype.setWorldAndLoadAxiomaticItems = function(world) {
   this._initialize(world);
   this._loadAxiomaticItemsFromFileAtURL(this._axiomaticJsonFileURL);
+};
 
+
+/**
+ * Loads all the items in a repository. This method should only be called 
+ * after _loadAxiomaticItemsFromFileAtURL has been called, and after the 
+ * world has completely initialized itself. 
+ *
+ * @scope    public instance method
+ */
+orp.archive.DeltaArchive.prototype.loadRepository = function() {
   var repositoryFileName = this._repositoryName + ".json";
   var repositoryUrl = "";
   if (this._needCompletePath) {

Modified: trunk/source/archive/JsonDeserializer.js
===================================================================
--- trunk/source/archive/JsonDeserializer.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/archive/JsonDeserializer.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -214,9 +214,20 @@
           var firstAttribute = archiveLoader.getItemFromUuidOrBootstrapItem(firstAttributeUuid);
           var secondAttribute = archiveLoader.getItemFromUuidOrBootstrapItem(secondAttributeUuid);
           
-          var pairOfItems = [firstItem, secondItem];
-          var pairOfAttributes = [firstAttribute, secondAttribute];
-          entry._revive(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
+          var FIXME_OCT_7_2005_EXPERIMENT = true;
+          if (FIXME_OCT_7_2005_EXPERIMENT) {
+            /* 
+            if (entryUuid == "e3320eb0-0c70-11da-beea-000c414ce854") {
+              alert("rehydrating Entry e3320eb0-0c70-11da-beea-000c414ce854");
+              // alert("dataType: " + dataType.getDisplayString());
+            }
+            */
+            entry._reviveConnection(firstItem, firstAttribute, secondItem, secondAttribute, previousEntry);
+          } else {
+            var pairOfItems = [firstItem, secondItem];
+            var pairOfAttributes = [firstAttribute, secondAttribute];
+            entry._revive(pairOfItems, pairOfAttributes, null, previousEntry, dataType);
+          }
         } else {
           itemUuid = dehydratedEntry[JSON_MEMBER.ITEM];
           item = archiveLoader.getItemFromUuidOrBootstrapItem(itemUuid);

Modified: trunk/source/archive/StubArchive.js
===================================================================
--- trunk/source/archive/StubArchive.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/archive/StubArchive.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -36,6 +36,7 @@
 dojo.require("orp.model.World");
 dojo.require("orp.model.Item");
 dojo.require("orp.model.Entry");
+dojo.require("orp.model.ProxyEntry");
 dojo.require("orp.model.Transaction");
 dojo.require("orp.util.DateValue");
 // dojo.require("orp.uuid.Uuid");
@@ -306,11 +307,23 @@
   var entry = new orp.model.Entry(this._world, uuid);
   entry._initializeConnection(previousEntry, itemOne, attributeOne, itemTwo, attributeTwo);
 
-  itemOne._addEntryToListOfEntriesForAttribute(entry, attributeOne);
-  itemTwo._addEntryToListOfEntriesForAttribute(entry, attributeTwo);
+  var FIXME_OCT_7_2005_EXPERIMENT = true;
+  if (FIXME_OCT_7_2005_EXPERIMENT) {
+    var proxyOne = new orp.model.ProxyEntry(entry, itemOne, attributeOne, itemTwo, attributeTwo);
+    var proxyTwo = new orp.model.ProxyEntry(entry, itemTwo, attributeTwo, itemOne, attributeOne);
+    itemOne._addEntryToListOfEntriesForAttribute(proxyOne, attributeOne);
+    itemTwo._addEntryToListOfEntriesForAttribute(proxyTwo, attributeTwo);
+  } else {
+    itemOne._addEntryToListOfEntriesForAttribute(entry, attributeOne);
+    itemTwo._addEntryToListOfEntriesForAttribute(entry, attributeTwo);
+  }
 
   this._hashTableOfEntriesKeyedByUuid[uuid] = entry;
   this._currentTransaction.addRecord(entry);
+  
+  if (FIXME_OCT_7_2005_EXPERIMENT) {
+    entry = proxyOne;
+  }
   return entry;
 };
 

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/model/ContentRecord.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -125,7 +125,7 @@
  * Returns the ordinal number for this contentRecord. 
  *
  * @scope    public instance method
- * @return   A number.
+ * @return   A hex string.
  */
 orp.model.ContentRecord.prototype.getOrdinalNumber = function() {
   if (!this._setOfOrdinals || this._setOfOrdinals.length === 0) {

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/model/Entry.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -33,6 +33,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.model.Entry");
+dojo.require("orp.model.ProxyEntry");
 dojo.require("orp.model.ContentRecord");
 dojo.require("orp.model.World");
 dojo.require("orp.lang.Lang");
@@ -208,6 +209,43 @@
 };
 
 
+/**
+ * Sets the properties of a newly deserialized Entry object.
+ *
+ * WARNING: This method should be called ONLY from an orp.archive
+ * implementation. This method should only be called from orp.archive
+ * code that is reviving serialized Entry objects. 
+ *
+ * @scope    protected instance method
+ * @param    firstItem    One of the two item connected by this entry.
+ * @param    firstAttribute    The attribute on firstItem to assign the entry to. 
+ * @param    secondItem    The item connected to firstItem by this entry.
+ * @param    secondAttribute    An attribute on secondItem to assign the entry to.
+ * @param    previousEntry    Optional. An old entry that this entry replaces. 
+ */
+orp.model.Entry.prototype._reviveConnection = function(firstItem, firstAttribute, secondItem, secondAttribute, previousEntry) {
+  var FIXME_OCT_7_2005_EXPERIMENT = true;
+  if (FIXME_OCT_7_2005_EXPERIMENT) {
+    if (previousEntry) {
+      this._previousEntry = previousEntry;
+      this._previousEntry._addSubsequentEntry(this);
+    } else {
+      this._previousEntry = null;
+    }
+    this._item = [firstItem, secondItem];
+    this._attribute = [firstAttribute, secondAttribute];
+    this._value = null;
+    this._type = this.getWorld().getTypeCalledConnection();
+    
+    var firstProxy = new orp.model.ProxyEntry(this, firstItem, firstAttribute, secondItem, secondAttribute);
+    var secondProxy = new orp.model.ProxyEntry(this, secondItem, secondAttribute, firstItem, firstAttribute);
+    firstItem._addRevivedEntry(firstProxy, firstAttribute);
+    secondItem._addRevivedEntry(secondProxy, secondAttribute);
+  }
+};
+
+
+
 // -------------------------------------------------------------------
 // Accessor methods
 // -------------------------------------------------------------------
@@ -266,18 +304,23 @@
  * @return   An attribute item.
  */
 orp.model.Entry.prototype.getAttributeForItem = function(item) {
-  if (this._item == item) {
-    return this._attribute;
-  }
-  if (dojo.lang.isArray(this._item)) {
-    if (this._item[0] == item) {
-      return this._attribute[0];
+  var FIXME_OCT_7_2005_EXPERIMENT = true;
+  if (FIXME_OCT_7_2005_EXPERIMENT) {
+    orp.util.assert(false);  // we should never get called
+  } else {
+    if (this._item == item) {
+      return this._attribute;
     }
-    if (this._item[1] == item) {
-      return this._attribute[1];
+    if (dojo.lang.isArray(this._item)) {
+      if (this._item[0] == item) {
+        return this._attribute[0];
+      }
+      if (this._item[1] == item) {
+        return this._attribute[1];
+      }
     }
+    return null;
   }
-  return null;
 };
 
 
@@ -290,21 +333,26 @@
  * @return   The item that is connected to the given item.
  */
 orp.model.Entry.prototype.getConnectedItem = function(item) {
-  orp.lang.assert(item instanceof orp.model.Item);
-  if (this._item == item) {
-    if (this._type == this.getWorld().getTypeCalledItem()) {
-      return this._value;
+  var FIXME_OCT_7_2005_EXPERIMENT = true;
+  if (FIXME_OCT_7_2005_EXPERIMENT) {
+    orp.util.assert(false);  // we should never get called
+  } else {
+    orp.lang.assert(item instanceof orp.model.Item);
+    if (this._item == item) {
+      if (this._type == this.getWorld().getTypeCalledItem()) {
+        return this._value;
+      }
     }
-  }
-  if (dojo.lang.isArray(this._item)) {
-    if (this._item[0] == item) {
-      return this._item[1];
+    if (dojo.lang.isArray(this._item)) {
+      if (this._item[0] == item) {
+        return this._item[1];
+      }
+      if (this._item[1] == item) {
+        return this._item[0];
+      }
     }
-    if (this._item[1] == item) {
-      return this._item[0];
-    }
+    return null;
   }
-  return null;
 };
 
 
@@ -373,7 +421,6 @@
       break;
     case this.getWorld().getTypeCalledDate():
       var aDate = this._value;
-      // returnString = orp.util.getStringMonthDayYear(aDate);
       returnString = aDate.toShortLocaleDateString();
       break;
     case this.getWorld().getTypeCalledItem():
@@ -391,6 +438,10 @@
         returnString = 'connection between "' + firstItem.getDisplayString() + '" and "' + secondItem.getDisplayString() + '"';
       }
       break;
+    default:
+      // alert("this is a bad sign");
+      orp.lang.assert(false); // we should never get here
+      break;
   }
   return returnString;
 };

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/model/Item.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -212,7 +212,12 @@
   
   orp.lang.assert(dojo.lang.isObject(previousEntry));
   if (!attribute) {
-    attribute = previousEntry.getAttributeForItem(this);
+    var FIXME_OCT_7_2005_EXPERIMENT = true;
+    if (FIXME_OCT_7_2005_EXPERIMENT) {
+      attribute = previousEntry.getAttribute();
+    } else {
+      attribute = previousEntry.getAttributeForItem(this);
+    }
   }
   return this._createNewEntry(previousEntry, attribute, value, type);
 };
@@ -287,19 +292,34 @@
   // If we've just been asked to replace the string "Foo" with the string "Foo",
   // then don't even bother creating a new entry. 
   if (previousEntry) {
-    // var oldValue = previousEntry.getValue(this);
-    var oldPairOfAttributes = previousEntry.getAttribute();
-    var oldPairOfItems = previousEntry.getItem();
-    if (dojo.lang.isArray(oldPairOfAttributes)) {
-      orp.lang.assertType(oldPairOfAttributes, Array);
-      orp.lang.assert(oldPairOfAttributes.length == 2);
-      orp.lang.assert(oldPairOfItems.length == 2);
-      if (((oldPairOfAttributes[0] == myAttribute) &&  (oldPairOfAttributes[1] == otherAttribute) &&
-        oldPairOfItems[0] == this && oldPairOfItems[1] == otherItem) ||
-        ((oldPairOfAttributes[1] == myAttribute) &&  (oldPairOfAttributes[0] == otherAttribute) &&
-        oldPairOfItems[1] == this && oldPairOfItems[0] == otherItem)) {
-        return null;
+    var FIXME_OCT_7_2005_EXPERIMENT = true;
+    if (FIXME_OCT_7_2005_EXPERIMENT) {
+      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
+        var oldItem = previousEntry.getItem();
+        var oldAttribute = previousEntry.getAttribute();
+        var oldValue = previousEntry.getValue();
+        var oldInverseAttribute = previousEntry.getInverseAttribute();
+        if (((oldAttribute == myAttribute) &&  (oldInverseAttribute == otherAttribute) &&
+          oldItem == this && oldValue == otherItem) ||
+          ((oldInverseAttribute == myAttribute) &&  (oldAttribute == otherAttribute) &&
+          oldValue == this && oldItem == otherItem)) {
+          return null;
+        }
       }
+    } else {
+      // var oldValue = previousEntry.getValue(this);
+      var oldPairOfAttributes = previousEntry.getAttribute();
+      var oldPairOfItems = previousEntry.getItem();
+      if (dojo.lang.isArray(oldPairOfAttributes)) {
+        orp.lang.assert(oldPairOfAttributes.length == 2);
+        orp.lang.assert(oldPairOfItems.length == 2);
+        if (((oldPairOfAttributes[0] == myAttribute) &&  (oldPairOfAttributes[1] == otherAttribute) &&
+          oldPairOfItems[0] == this && oldPairOfItems[1] == otherItem) ||
+          ((oldPairOfAttributes[1] == myAttribute) &&  (oldPairOfAttributes[0] == otherAttribute) &&
+          oldPairOfItems[1] == this && oldPairOfItems[0] == otherItem)) {
+          return null;
+        }
+      }
     }
   }
 
@@ -321,14 +341,22 @@
   this._noteChanges(null);
   otherItem._noteChanges(null);
   if (previousEntry) {
-    var oldItemOrPairOfItems = previousEntry.getItem();
-    if (oldItemOrPairOfItems instanceof orp.model.Item) {
-      oldItemOrPairOfItems._noteChanges(null);
+    FIXME_OCT_7_2005_EXPERIMENT = true;
+    if (FIXME_OCT_7_2005_EXPERIMENT) {
+      previousEntry.getItem()._noteChanges(null);
+      if (previousEntry.getType() == this.getWorld().getTypeCalledConnection()) {
+        previousEntry.getValue()._noteChanges(null);
+      }
+    } else {
+      var oldItemOrPairOfItems = previousEntry.getItem();
+      if (oldItemOrPairOfItems instanceof orp.model.Item) {
+        oldItemOrPairOfItems._noteChanges(null);
+      }
+      if (dojo.lang.isArray(oldItemOrPairOfItems)) {
+        oldItemOrPairOfItems[0]._noteChanges(null);
+        oldItemOrPairOfItems[1]._noteChanges(null);
+      }
     }
-    if (dojo.lang.isArray(oldItemOrPairOfItems)) {
-      oldItemOrPairOfItems[0]._noteChanges(null);
-      oldItemOrPairOfItems[1]._noteChanges(null);
-    }
   }
   return entry;  
 };

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/model/Record.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -85,7 +85,7 @@
 // -------------------------------------------------------------------
 
 /**
- * Returns the world that this item was created in.
+ * Returns the world that this record was created in.
  *
  * @scope    public instance method
  * @return   A world object.
@@ -96,7 +96,7 @@
 
 
 /**
- * Returns the item representing the user who created this item.
+ * Returns the item representing the user who created this record.
  *
  * @scope    public instance method
  * @return   A user item.
@@ -140,11 +140,6 @@
  * @return   A Date object.
  */
 orp.model.Record.prototype.getCreationDate = function() {
-  /* if (!this._creationDate) {
-    this._creationDate = Uuid.getDateFromUuid(this._uuid.toString());
-  }
-  return this._creationDate;
-  */
   return this.getUuid().getDate();
 };
 

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/model/World.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -85,6 +85,11 @@
 
   this._archive.setWorldAndLoadAxiomaticItems(this);
   this._loadAxiomaticItems();
+  
+  // FIXME: this is a hack
+  if (this._archive.loadRepository) {
+    this._archive.loadRepository();
+  }
 };
 
 
@@ -745,19 +750,16 @@
   var attributeCalledQueryMatchingAttribute = this.getAttributeCalledQueryMatchingAttribute();
   var attributeCalledQueryMatchingValue = this.getAttributeCalledQueryMatchingValue();
   var matchingEntry;
-  // item.addEntryForAttribute(attributeCalledQueryMatchingAttribute, matchingAttribute);
   item.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:matchingAttribute});
   if (matchingEntryOrListOfEntries) {
     if (dojo.lang.isArray(matchingEntryOrListOfEntries)) {
       for (var key in matchingEntryOrListOfEntries) {
         matchingEntry = matchingEntryOrListOfEntries[key];
-        // item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
         item.addEntry({attribute:attributeCalledQueryMatchingValue, value:matchingEntry});
       }
     }
     else {
       matchingEntry = matchingEntryOrListOfEntries;
-      // item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
       item.addEntry({attribute:attributeCalledQueryMatchingValue, value:matchingEntry});
     }
   }

Modified: trunk/source/util/LintTool.js
===================================================================
--- trunk/source/util/LintTool.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/util/LintTool.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -160,7 +160,6 @@
 orp.util.LintTool.getErrorReportFromListOfFilesnames = function(listOfFilenames, path) {
   orp.lang.assertType(listOfFilenames, Array);
   if (path) {
-    // orp.util.assert(dojo.lang.isString(path));
     orp.lang.assertType(path, String);
   } else {
     path = "";

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/view/EntryView.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -72,7 +72,12 @@
   // orp.util.assert((!entry) || entry instanceof orp.model.Entry);
   orp.lang.assert(item instanceof orp.model.Item);
   orp.lang.assert(attribute instanceof orp.model.Item); // PENDING need to check that attribute is an attribute
-  orp.lang.assertTypeForOptionalValue(entry, orp.model.Entry);
+  var FIXME_OCT_7_2005_EXPERIMENT = true;
+  if (FIXME_OCT_7_2005_EXPERIMENT) {
+    // could be an orp.model.Entry or an orp.model.ProxyEntry
+  } else {
+    orp.lang.assertTypeForOptionalValue(entry, orp.model.Entry);
+  }
   
   orp.view.View.call(this, superview, htmlElement, "EntryView");
 
@@ -365,10 +370,6 @@
         editField.type = 'text';
       }
       var listener = this; 
-      // editField.onblur = this.onBlur.orpBindAsEventListener(this);
-      // editField.onkeypress = this.onKeyPress.orpBindAsEventListener(this);
-      // editField.onkeyup = this.onKeyUp.orpBindAsEventListener(this);
-      // editField.onfocus = this.onFocus.orpBindAsEventListener(this);
       dojo.event.connect(editField, "onblur", this, "onBlur");
       dojo.event.connect(editField, "onkeypress", this, "onKeyPress");
       dojo.event.connect(editField, "onkeyup", this, "onKeyUp");
@@ -471,7 +472,6 @@
       var entry = listOfExpectedTypeEntries[i];
       listOfTypes.push(entry.getValue());
     }
-    // return orp.view.EntryView._transformValueToExpectedType(world, value, listOfTypes);
     return world.transformValueToExpectedType(value, listOfTypes);
   }
   return value;
@@ -498,7 +498,6 @@
         var inverseAttr = inverseAttributeEntry.getValue(this._attribute);
         this._entry = this._item.replaceEntryWithConnection(this._entry, this._attribute, value, inverseAttr);
       } else {
-        // this._entry = this._item.replaceEntryWithEntryForAttribute(this._entry, this._attribute, value);
         this._entry = this._item.replaceEntry({previousEntry:this._entry, attribute:this._attribute, value:value});
       }
       var superview = this.getSuperview();
@@ -526,7 +525,13 @@
     return this._provisionalText;
   }
   if (this._entry) {
-    var text = this._item.getDisplayStringForEntry(this._entry);
+    var FIXME_OCT_7_2005_EXPERIMENT = true;
+    if (FIXME_OCT_7_2005_EXPERIMENT) {
+      var text = this._entry.getDisplayString();
+    } else {
+      // var text = this._item.getDisplayStringForEntry(this._entry);
+      text = this._item.getDisplayStringForEntry(this._entry);
+    }
     if (useNonBreakingSpaces) {
       var dataType = this._entry.getType();
       if (dataType != this.getWorld().getTypeCalledText()) {

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/view/MultiEntriesView.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -240,12 +240,17 @@
   if (!this.hasEntry(droppedEntry)) {
     var newEntry;
     if (droppedEntry.getType() == this.getWorld().getTypeCalledConnection()) {
-      var otherItem = droppedEntry.getConnectedItem(draggedEntryView._item);
-      var otherAttribute = droppedEntry.getAttributeForItem(otherItem);
-      // newEntry = this._item.addConnectionEntry(this._attribute,otherItem,otherAttribute);
-      newEntry = this._item.replaceEntryWithConnection(droppedEntry, this._attribute, otherItem, otherAttribute);
+      var FIXME_OCT_7_2005_EXPERIMENT = true;
+      if (FIXME_OCT_7_2005_EXPERIMENT) {
+        var inverseItem = droppedEntry.getValue();
+        var inverseAttribute = droppedEntry.getInverseAttribute();
+        newEntry = this._item.replaceEntryWithConnection(droppedEntry, this._attribute, inverseItem, inverseAttribute);
+      } else {
+        var otherItem = droppedEntry.getConnectedItem(draggedEntryView._item);
+        var otherAttribute = droppedEntry.getAttributeForItem(otherItem);
+        newEntry = this._item.replaceEntryWithConnection(droppedEntry, this._attribute, otherItem, otherAttribute);
+      }
     } else {
-      // newEntry = this._item.addNewEntryForAttribute(this._attribute,droppedEntry.getValue(),droppedEntry.getType());
       newEntry = this._item.replaceEntry(droppedEntry, droppedEntry.getValue(), droppedEntry.getType());
     }
     this._addEntryView(newEntry);

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/view/PageView.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -203,7 +203,13 @@
    
   for (var key in listOfEntriesForSections) {
     var entryForSection = listOfEntriesForSections[key];
-    var section = entryForSection.getConnectedItem(this._pageItem);
+    var FIXME_OCT_7_2005_EXPERIMENT = true;
+    if (FIXME_OCT_7_2005_EXPERIMENT) {
+      var section = entryForSection.getValue();
+    } else {
+      // var section = entryForSection.getConnectedItem(this._pageItem);
+      section = entryForSection.getConnectedItem(this._pageItem);
+    }
     if (section) {
       if (PENDING_include_links_to_sections && sectionNavigatorDiv) {
         orp.view.View.appendNewElement(sectionNavigatorDiv, "a", null, {'href' : '#' + section.getUuidString()}, section.getDisplayName());

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-10-07 03:35:47 UTC (rev 354)
+++ trunk/source/view/SectionView.js	2005-10-11 02:10:40 UTC (rev 355)
@@ -211,7 +211,12 @@
   var attributeCalledQuerySpec = this.getWorld().getAttributeCalledQuerySpec();
   var queryEntry = this._section.getSingleEntryFromAttribute(attributeCalledQuerySpec);
   if (queryEntry) {
-    return queryEntry.getConnectedItem(this._section);
+    var FIXME_OCT_7_2005_EXPERIMENT = true;
+    if (FIXME_OCT_7_2005_EXPERIMENT) {
+      return queryEntry.getValue();
+    } else {
+      return queryEntry.getConnectedItem(this._section);
+    }
   }
   return null;
 };
@@ -308,7 +313,13 @@
   var attributeAppliesToPlugin = repository.getItemFromUuid(orp.view.SectionView.UUID.ATTRIBUTE_APPLIES_TO_PLUGIN);
   if (entriesLayoutData) {
     for (var i=0; i < entriesLayoutData.length; ++i) {
-      var layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
+      var FIXME_OCT_7_2005_EXPERIMENT = true;
+      if (FIXME_OCT_7_2005_EXPERIMENT) {
+        var layoutItem = entriesLayoutData[i].getValue();
+      } else {
+        // var layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
+        layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
+      }
       var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attributeAppliesToPlugin);
       orp.lang.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
       if (entriesAppliesToPlugin[0].getValue() == pluginTypeItem) {



From skinner at berlios.de  Tue Oct 11 06:02:44 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 11 Oct 2005 06:02:44 +0200
Subject: [openrecord-svn] r356 - trunk/documentation
Message-ID: <200510110402.j9B42iX3007415@sheep.berlios.de>

Author: skinner
Date: 2005-10-11 06:02:42 +0200 (Tue, 11 Oct 2005)
New Revision: 356

Modified:
   trunk/documentation/release_planning.txt
Log:
changes to the to-do list

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-11 02:10:40 UTC (rev 355)
+++ trunk/documentation/release_planning.txt	2005-10-11 04:02:42 UTC (rev 356)
@@ -417,7 +417,7 @@
 mignon | 0.25 IED |         | 12. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 
 mignon | 2    IED |         | 13. Automatically load ViewPlugins found in the view_plugins directory 
        |          |         | 14. Make RootView subclass from View, or add comments explaining why it doesn't
-       |          |         | 15. Make DateValue subclass from Date, or wrap an internal Date object
+       |          |         | 15. Make DateValue wrap an internal Date object
 -------+----------+---------+----------------------------------------------
        |          |         | 16. Document the Data model public API
        |          |         | 17. research standard text representations for DateValues



From skinner at berlios.de  Tue Oct 11 06:03:45 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 11 Oct 2005 06:03:45 +0200
Subject: [openrecord-svn] r357 - trunk/source/view
Message-ID: <200510110403.j9B43jjY007452@sheep.berlios.de>

Author: skinner
Date: 2005-10-11 06:03:44 +0200 (Tue, 11 Oct 2005)
New Revision: 357

Modified:
   trunk/source/view/MultiEntriesView.js
Log:
minor fix


Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-10-11 04:02:42 UTC (rev 356)
+++ trunk/source/view/MultiEntriesView.js	2005-10-11 04:03:44 UTC (rev 357)
@@ -251,7 +251,8 @@
         newEntry = this._item.replaceEntryWithConnection(droppedEntry, this._attribute, otherItem, otherAttribute);
       }
     } else {
-      newEntry = this._item.replaceEntry(droppedEntry, droppedEntry.getValue(), droppedEntry.getType());
+      // newEntry = this._item.replaceEntry(droppedEntry, droppedEntry.getValue(), droppedEntry.getType());
+      newEntry = this._item.replaceEntry({previousEntry:droppedEntry, attribute:this._attribute, value:droppedEntry.getValue(), type:droppedEntry.getType()});
     }
     this._addEntryView(newEntry);
 



From skinner at berlios.de  Tue Oct 11 06:08:08 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 11 Oct 2005 06:08:08 +0200
Subject: [openrecord-svn] r358 - trunk/source/model
Message-ID: <200510110408.j9B488wb008370@sheep.berlios.de>

Author: skinner
Date: 2005-10-11 06:08:00 +0200 (Tue, 11 Oct 2005)
New Revision: 358

Added:
   trunk/source/model/ProxyEntry.js
Log:
Oops!  Forgot to commit ProxyEntry.js

Added: trunk/source/model/ProxyEntry.js
===================================================================
--- trunk/source/model/ProxyEntry.js	2005-10-11 04:03:44 UTC (rev 357)
+++ trunk/source/model/ProxyEntry.js	2005-10-11 04:08:00 UTC (rev 358)
@@ -0,0 +1,336 @@
+/*****************************************************************************
+ ProxyEntry.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.model.ProxyEntry");
+dojo.require("orp.model.Entry");
+
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+/**
+ * For each Connection Entry, two instances of the ProxyEntry class 
+ * serve as proxies between the connected items and the Connection Entry.
+ *
+ * <pre>
+ *   item1 -- proxyEntry1 -- connectionEntry -- proxyEntry2 -- item2
+ * </pre>
+ *
+ * @scope    protected instance constructor
+ * @param    connectionEntry    The connection entry that this proxy is a proxy for. 
+ * @param    item    The item that this is an entry of. 
+ * @param    attribute    That attribute that this is an entry of. 
+ * @param    value    The other item that this entry points to. 
+ * @param    inverseAttribute    That attribute this is item is assigned to on the other item. 
+ */
+orp.model.ProxyEntry = function(connectionEntry, item, attribute, value, inverseAttribute) {
+  this._connectionEntry = connectionEntry;
+  this._item = item;
+  this._attribute = attribute;
+  this._value = value;
+  this._inverseAttribute = inverseAttribute;
+};
+
+
+// -------------------------------------------------------------------
+// ProxyEntry methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns ...
+ *
+ * @scope    public instance method
+ * @return   ...
+ */
+orp.model.ProxyEntry.prototype.getInverseAttribute = function() {
+  return this._inverseAttribute;
+};
+
+
+// -------------------------------------------------------------------
+// Entry methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the item that this is a entry of.
+ *
+ * @scope    public instance method
+ * @return   The item that this is a entry of.
+ */
+orp.model.ProxyEntry.prototype.getItem = function() {
+  return this._item;
+};
+
+
+/**
+ * Returns the type of this entry
+ *
+ * @scope    public instance method
+ * @return   the type of this entry
+ */
+orp.model.ProxyEntry.prototype.getType = function() {
+  // alert("getType(): " + this._connectionEntry.toString());
+  // alert("getType(): " + this._connectionEntry.getDisplayString());
+  return this._connectionEntry.getType();
+};
+
+
+/**
+ * If this entry was established as the replacement for a previous
+ * entry, this method returns the previous entry.
+ *
+ * @scope    public instance method
+ * @return   The previous entry, which this entry replaces. 
+ */
+orp.model.ProxyEntry.prototype.getPreviousEntry = function() {
+  return this._connectionEntry.getPreviousEntry();
+};
+
+
+/**
+ * Returns the attribute that this entry was assigned to, if any.
+ *
+ * @scope    public instance method
+ * @return   An attribute item.
+ */
+orp.model.ProxyEntry.prototype.getAttribute = function() {
+  return this._attribute;
+};
+
+
+/**
+ * Returns the value that this entry holds.
+ *
+ * @scope    public instance method
+ * @return   The value this entry was initialized to hold.
+ */
+orp.model.ProxyEntry.prototype.getValue = function() {
+  return this._value;
+};
+  
+  
+/**
+ * Returns the value of this entry as a string.
+ *
+ * @scope    public instance method
+ * @return   A string representing the value in this entry.
+ */
+orp.model.ProxyEntry.prototype.getDisplayString = function() {
+  return this._value.getDisplayString();
+};
+
+
+/**
+ * Returns true if the entry has been replaced by a subsequent entry.
+ *
+ * @scope    public instance method
+ * @return   True if this entry has been replaced. False if it has not.
+ */
+orp.model.ProxyEntry.prototype.hasBeenReplaced = function() {
+  return this._connectionEntry.hasBeenReplaced();
+};
+
+
+/**
+ * Called by a subsquent entry, to tell this entry that it has been replaced.
+ *
+ * @scope    private instance method
+ * @param    entry    The entry that replaces this one.
+ */
+orp.model.ProxyEntry.prototype._addSubsequentEntry = function(entry) {
+  this._connectionEntry._addSubsequentEntry(entry);
+};
+
+
+// -------------------------------------------------------------------
+// ContentRecord methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the ordinal number that this contentRecord was given at creation. 
+ *
+ * @scope    public instance method
+ * @return   A number.
+ */
+orp.model.ProxyEntry.prototype.getOrdinalNumberAtCreation = function() {
+  return this._connectionEntry.getOrdinalNumberAtCreation();
+};
+
+
+/**
+ * Returns the ordinal number for this contentRecord. 
+ *
+ * @scope    public instance method
+ * @return   A hex string.
+ */
+orp.model.ProxyEntry.prototype.getOrdinalNumber = function() {
+  return this._connectionEntry.getOrdinalNumber();
+};
+
+
+/**
+ * Returns true if this contentRecord has been deleted. 
+ *
+ * @scope    public instance method
+ * @return   A boolean.
+ */
+orp.model.ProxyEntry.prototype.hasBeenDeleted = function() {
+  return this._connectionEntry.hasBeenDeleted();
+};
+
+  
+/**
+ * Moves this contentRecord to a new position in a list, by creating a new
+ * ordinal for this contentRecord with an ordinal number that is set such
+ * that this contentRecord appears between two other entries.
+ * The randomness is to avoid ever generating the same ordinal twice.
+ *
+ * @scope    public instance method
+ * @param    contentRecordFirst    The contentRecord that should come before this one. 
+ * @param    contentRecordThird    The contentRecord that should come after this one. 
+ */
+orp.model.ProxyEntry.prototype.reorderBetween = function(contentRecordFirst, contentRecordThird) {
+  this._connectionEntry.reorderBetween(contentRecordFirst, contentRecordThird);
+};
+
+
+/**
+ * Registers a vote to delete this contentRecord. 
+ *
+ * @scope    public instance method
+ */
+orp.model.ProxyEntry.prototype.voteToDelete = function() {
+  this._connectionEntry.voteToDelete();
+};
+
+
+/**
+ * Registers a vote to retain this contentRecord. 
+ *
+ * @scope    public instance method
+ */
+orp.model.ProxyEntry.prototype.voteToRetain = function() {
+  this._connectionEntry.voteToRetain();
+};
+
+
+// -------------------------------------------------------------------
+// Record methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns the world that this item was created in.
+ *
+ * @scope    public instance method
+ * @return   A world object.
+ */
+orp.model.ProxyEntry.prototype.getWorld = function() {
+  return this._connectionEntry.getWorld();
+};
+
+
+/**
+ * Returns the item representing the user who created this record.
+ *
+ * @scope    public instance method
+ * @return   A user item.
+ */
+orp.model.ProxyEntry.prototype.getUserstamp = function() {
+  return this._connectionEntry.getUserstamp();
+};
+
+
+/**
+ * Returns ???.
+ *
+ * @scope    public instance method
+ * @return   ???.
+ */
+orp.model.ProxyEntry.prototype.getTimestamp = function() {
+  return this._connectionEntry.getTimestamp();
+};
+
+
+/**
+ * Returns a Date object with the creation timestamp for this record.
+ *
+ * @scope    public instance method
+ * @return   A Date object.
+ */
+orp.model.ProxyEntry.prototype.getCreationDate = function() {
+  return this._connectionEntry.getCreationDate();
+};
+
+
+/**
+ * Returns the UUID of the record. 
+ *
+ * @scope    public instance method
+ * @return   The UUID of the record.
+ */
+orp.model.ProxyEntry.prototype.getUuid = function() {
+  return this._connectionEntry.getUuid();
+};
+
+
+/**
+ * Returns a string representation of the UUID of the record. 
+ *
+ * @scope    public instance method
+ * @return   A string representing the UUID of the record.
+ */
+orp.model.ProxyEntry.prototype.getUuidString = function() {
+  return this._connectionEntry.getUuidString();
+};
+
+
+/**
+ * Returns a string representation of the UUID of the item, wrapped in
+ * quotes.  The return value will always be a 38-character string, 
+ * where the first and last characters are quotes.  For example:  
+ *
+ * <pre>
+ *   "3B12F1DF-5232-1804-897E-917BF397618A"
+ * </pre>
+ *
+ * @scope    protected instance method
+ * @return   The record's UUID, as a string, wrapped in quotes.
+ */
+orp.model.ProxyEntry.prototype._getUuidInQuotes = function() {
+  return this._connectionEntry._getUuidInQuotes();
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at berlios.de  Fri Oct 14 04:37:01 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 14 Oct 2005 04:37:01 +0200
Subject: [openrecord-svn] r360 - in trunk: . documentation source source/archive source/lang source/model source/storage source/util source/uuid source/view tests tests/archive tests/dojo tests/lang tests/model tests/storage tests/tests_of_external_code tests/util tests/uuid tests/view
Message-ID: <200510140237.j9E2b1nk010176@sheep.berlios.de>

Author: skinner
Date: 2005-10-14 04:36:44 +0200 (Fri, 14 Oct 2005)
New Revision: 360

Added:
   trunk/source/OpenRecordLoaderStepThree.js
   trunk/source/OpenRecordLoaderStepTwo.js
Modified:
   trunk/dashboard.html
   trunk/demo_page.html
   trunk/documentation/release_planning.txt
   trunk/dogfood.html
   trunk/open_agenda.html
   trunk/sandbox.html
   trunk/source/BarChartPlugin.js
   trunk/source/DetailPlugin.js
   trunk/source/OpenRecordLoader.js
   trunk/source/OutlinePlugin.js
   trunk/source/TablePlugin.js
   trunk/source/archive/DeltaArchive.js
   trunk/source/archive/JsonDeserializer.js
   trunk/source/archive/JsonSerializer.js
   trunk/source/lang/Lang.js
   trunk/source/model/ContentRecord.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/Ordinal.js
   trunk/source/model/Record.js
   trunk/source/model/Vote.js
   trunk/source/model/World.js
   trunk/source/storage/FakeStorage.js
   trunk/source/storage/FileStorage.js
   trunk/source/storage/HttpStorage.js
   trunk/source/util/Util.js
   trunk/source/uuid/RandomUuid.js
   trunk/source/uuid/TimeBasedUuid.js
   trunk/source/view/EntryView.js
   trunk/source/view/ItemView.js
   trunk/source/view/LoginView.js
   trunk/source/view/MultiEntriesView.js
   trunk/source/view/NavbarView.js
   trunk/source/view/PageView.js
   trunk/source/view/PluginView.js
   trunk/source/view/SectionView.js
   trunk/tests/LintTest.html
   trunk/tests/LintTest.js
   trunk/tests/archive/LintTest.html
   trunk/tests/dojo/SimpleDojoTest.html
   trunk/tests/lang/LangTest.html
   trunk/tests/model/LintTest.html
   trunk/tests/model/ModelTest.html
   trunk/tests/model/RepositoryWritingTest.html
   trunk/tests/model/TestReorderingForSpecialCases.html
   trunk/tests/model/TestReorderingForTypicalOrdinals.html
   trunk/tests/storage/LintTest.html
   trunk/tests/tests_of_external_code/TimingTest.html
   trunk/tests/util/CsvParserTest.html
   trunk/tests/util/DateValueTest.html
   trunk/tests/util/LintTest.html
   trunk/tests/util/UtilTest.html
   trunk/tests/util/XmlConverterMultiplePassesTest.html
   trunk/tests/util/XmlConverterTest.html
   trunk/tests/uuid/LintTest.html
   trunk/tests/uuid/UuidTest.html
   trunk/tests/view/LintTest.html
   trunk/tobacco.html
   trunk/tuscany.html
Log:
Switched all of our code over from dojo-0.1.0 to dojo-rev1759.  Also did some work on OpenRecordLoader.js so that (a) it takes care of loading dojo.js for you, and (b) it works correctly with the Dojo djConfig flag "debugAtAllCosts".

Modified: trunk/dashboard.html
===================================================================
--- trunk/dashboard.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/dashboard.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,6 @@
 
   <head>
     <title>Dashboard Demo Page</title>
-    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/demo_page.html
===================================================================
--- trunk/demo_page.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/demo_page.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,6 @@
 
   <head>
     <title>openrecord.org - Demo Page</title>
-    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/documentation/release_planning.txt	2005-10-14 02:36:44 UTC (rev 360)
@@ -428,7 +428,8 @@
        |          |         | 22. try to replace remaining Util.js functions with dojo.lang functions
        |          |         | 23. try using Ant and the Dojo build system to build OpenRecord into a single-file 
        |          |         | 24. move XmlConverter.js out of util, because it depends on model code
-brian  |          |         | 25. Decide whether or not to replace bi-directional connection entries with twin-entries
+brian  |          | 0.75 IED| 25. Decide whether or not to replace bi-directional connection entries with twin-entries
+brian  |          | 0.5  IED|     Write initial code to augment bi-directional connection entries with twin ProxyEntries
        |          |         | 26. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
        |          |         | 27. Pick one file, and do a group code review on it
        |          |         | 28. Implement a good URL-to-content mapping, so that URLs won't go bad in future releases

Modified: trunk/dogfood.html
===================================================================
--- trunk/dogfood.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/dogfood.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,6 @@
 
   <head>
     <title>openrecord.org - Dogfood Page</title>
-    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/open_agenda.html
===================================================================
--- trunk/open_agenda.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/open_agenda.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,6 @@
 
   <head>
     <title>Collaborative Philanthropy</title>
-    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/sandbox.html
===================================================================
--- trunk/sandbox.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/sandbox.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,6 +12,8 @@
 
   <head>
     <title>openrecord.org - Sandbox Page</title>
+    <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
+<!-- 
     <link rel="stylesheet" type="text/css" href="source/base_style.css"></link>
     <script>
       djConfig = {
@@ -23,20 +25,25 @@
     <script type="text/javascript" src="third_party/scriptaculous/prototype.js"></script>
     <script type="text/javascript" src="third_party/scriptaculous/effects.js"></script>
     <script type="text/javascript" src="third_party/scriptaculous/dragdrop.js"></script>
-    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
-    <script>
-      dojo.hostenv.setModulePrefix("dojo", "../../dojo/dojo-0.1.0/src");
-      dojo.hostenv.setModulePrefix("orp", "../../../source");
+    <script type="text/javascript" src="third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript">
+      // dojo.hostenv.setModulePrefix("dojo", "../../dojo/dojo-rev1759/src");
+      dojo.hostenv.setModulePrefix("orp", "../../../source");  // path relative to dojo
       dojo.require("orp.model.World");
       dojo.require("orp.view.RootView");
       dojo.hostenv.writeIncludes(); // needed when using "debugAtAllCosts: true"
     </script>
     <script>
       window.onload = function() { 
-        var world = new orp.model.World();
-        new orp.view.RootView(world);
+        try {
+          var world = new orp.model.World();
+          new orp.view.RootView(world);
+        } catch(e) {
+          alert(e);
+        }
       };    
     </script>
+-->
   </head>
   
   <body>

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/BarChartPlugin.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -65,7 +65,7 @@
   orp.view.PluginView.call(this, superview, htmlElement, querySpec, layoutItem, "BarChartPlugin");
 };
 
-dj_inherits(orp.BarChartPlugin, orp.view.PluginView);  // makes BarChartPlugin be a subclass of PluginView
+dojo.inherits(orp.BarChartPlugin, orp.view.PluginView);  // makes BarChartPlugin be a subclass of PluginView
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/DetailPlugin.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -68,7 +68,7 @@
   orp.view.PluginView.call(this, superview, htmlElement, querySpec, layoutItem, "DetailPlugin");
 };
 
-dj_inherits(orp.DetailPlugin, orp.view.PluginView);  // makes DetailPlugin be a subclass of PluginView
+dojo.inherits(orp.DetailPlugin, orp.view.PluginView);  // makes DetailPlugin be a subclass of PluginView
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/OpenRecordLoader.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -28,122 +28,81 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
-
 /**
- * The OpenRecordLoader class bootstraps the OpenRecord by loading all the
- * other files in the OpenRecord app.
+ * OpenRecordLoader bootstraps OpenRecord by loading all the files required
+ * by the OpenRecord app: all the OpenRecord JavaScript files, plus third
+ * party libraries, plus the OpenRecord stylesheet file.  
  *
- * There is no need to ever call this constructor.  All the OpenRecordLoader
- * methods are class methods, not instance methods, and the only reason
- * this constructor exists is to cause the name "OpenRecordLoader" to be a 
- * globally-scoped class name, which the class methods can then be 
- * attached to.
- *
- * @scope    public instance constructor
- * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ * OpenRecordLoader.js relies on two follow-up files, OpenRecordLoaderStepTwo.js
+ * and OpenRecordLoaderStepThree.js.  It would be nice if we could merge these
+ * all into one file, but unfortunately they need to be loaded separately
+ * so that we get all the files evaluated in the right order -- first 
+ * OpenRecordLoader.js and then dojo.js, and only after dojo is loaded, then 
+ * OpenRecordLoaderStepThree.js, which uses dojo to load orp.model.World
+ * and orp.model.RootView.
  */
-function OpenRecordLoader() {
-  throw new Error("OpenRecord is a static class. You can't create instances of it.");
-}
+var orp = {};
+orp.loader = {};
 
 
 /**
- * Given the URL of a stylesheet file, this method loads the stylesheet
- * by creating a new link element that points to the stylesheet. 
- *
- * @scope    public class method
- * @param    stylesheetUrl    A string with the URL of a file containing the stylesheet. 
- */
-OpenRecordLoader.loadStylesheet = function(stylesheetUrl) {
-  var stylesheetElement = document.createElement('link');
-  stylesheetElement.setAttribute('rel', 'stylesheet');
-  stylesheetElement.type = 'text/css';
-  stylesheetElement.href = stylesheetUrl;
-  document.getElementsByTagName('head')[0].appendChild(stylesheetElement);  
-};
-
-
-/**
- * Given the URL of a JavaScript file, this method loads the JavaScript file
+ * Given the URL of a JavaScript file, this function loads the JavaScript file
  * by creating a new script element that points to the file. 
  *
- * @scope    public class method
  * @param    sourceUrl    A string with the URL of a file containing the JavaScript code. 
  */
-OpenRecordLoader.loadSingleScript = function(sourceUrl) {
-  var scriptElement = document.createElement('script');
-  document.getElementsByTagName('head')[0].appendChild(scriptElement);
-  scriptElement.language = 'javascript';
-  scriptElement.type = 'text/javascript';
-  scriptElement.src = sourceUrl;
+orp.loader.loadScript = function(sourceUrl) {
+  try {
+		document.write("<script type='text/javascript' src='" + sourceUrl + "'></script>");
+  } catch(e) {
+    var scriptElement = document.createElement('script');
+    scriptElement.language = 'javascript';
+    scriptElement.type = 'text/javascript';
+    scriptElement.src = sourceUrl;
+    var headElement = document.getElementsByTagName("head")[0];
+    headElement.appendChild(scriptElement);
+  }
 };
 
 
 /**
- * Given the path to the trunk directory of the OpenRecord code base,
- * this method loads the OpenRecord stylesheet and all of the OpenRecord
- * JavaScript files.
+ * Given the URL of a stylesheet file, this function loads the stylesheet
+ * by creating a new link element that points to the stylesheet. 
  *
- * @scope    public class method
- * @param    path    A string with the path to the trunk directory of the OpenRecord code base. 
+ * @param    stylesheetUrl    A string with the URL of a file containing the stylesheet. 
  */
-OpenRecordLoader.loadEverything = function(path) {
-  path = path || "";
-  OpenRecordLoader.loadStylesheet(path + "source/base_style.css"); 
-  var listOfSourceCodeFiles = [
-    // third_party
-    "third_party/md5/md5.js",
-    /* "third_party/dojo/dojo-0.1.0/dojo.js", */
-    "third_party/scriptaculous/prototype.js",
-    "third_party/scriptaculous/effects.js",
-    "third_party/scriptaculous/dragdrop.js"];
-  for (var i in listOfSourceCodeFiles) {
-    var fileName = listOfSourceCodeFiles[i];
-    var url = path + fileName;
-    OpenRecordLoader.loadSingleScript(url);
+orp.loader.loadStylesheet = function(stylesheetUrl) {
+  try {
+    document.write("<link rel='stylesheet' type='text/css' href='" + stylesheetUrl + "'></link>");
+  } catch(e) {
+    var stylesheetElement = document.createElement('link');
+    stylesheetElement.setAttribute('rel', 'stylesheet');
+    stylesheetElement.type = 'text/css';
+    stylesheetElement.href = stylesheetUrl;
+    var headElement = document.getElementsByTagName("head")[0];
+    headElement.appendChild(stylesheetElement);
   }
 };
 
-
 // -------------------------------------------------------------------
 // This code is immediately executed when this file is first loaded.
 // -------------------------------------------------------------------
-djConfig = {
-  isDebug: true,
-  debugAtAllCosts: true };
-  
-dojo.hostenv.setModulePrefix("dojo", "../../dojo/dojo-0.1.0/src");
-dojo.hostenv.setModulePrefix("orp", "../../../source");
+var djConfig = {
+  isDebug: true, 
+  debugAtAllCosts: true
+};
 
-OpenRecordLoader.loadEverything();
+orp.loader.loadStylesheet("source/base_style.css");
 
-dojo.require("orp.model.World");
-dojo.require("orp.view.RootView");
+orp.loader.loadScript("third_party/dojo/dojo-rev1759/dojo.js");
+orp.loader.loadScript("third_party/md5/md5.js");
+orp.loader.loadScript("third_party/scriptaculous/prototype.js");
+orp.loader.loadScript("third_party/scriptaculous/effects.js");
+orp.loader.loadScript("third_party/scriptaculous/dragdrop.js");
 
-dojo.hostenv.writeIncludes(); // needed when using "debugAtAllCosts: true"
+orp.loader.loadScript("source/OpenRecordLoaderStepTwo.js");
 
-window.onload = function() { 
-  // figure out if we're running in IE or Firefox
-  var firefox = true;  // PENDING: hack!
-  var errorMessage;
-  if (!firefox) {
-    errorMessage = "IE error message";
-    // display errorMessage
-    return;
-  }
-  if (firefox) {
-    errorMessage = "Loading...";
-    // display errorMessage
-    try {
-      var world = new orp.model.World();
-      new orp.view.RootView(world);
-    } catch (e) {
-      alert(e);
-    }
-  }
-};    
 
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Added: trunk/source/OpenRecordLoaderStepThree.js
===================================================================
--- trunk/source/OpenRecordLoaderStepThree.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/OpenRecordLoaderStepThree.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -0,0 +1,66 @@
+/*****************************************************************************
+ OpenRecordLoaderStepThree.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+dojo.hostenv.setModulePrefix("orp", "../../../source");  // path relative to dojo
+
+dojo.require("orp.model.World");
+dojo.require("orp.view.RootView");
+
+if (djConfig.debugAtAllCosts) {
+  dojo.hostenv.writeIncludes(); // needed when using "debugAtAllCosts: true"
+}
+
+function onload(){
+  // figure out if we're running in IE or Firefox
+  var firefox = true;  // PENDING: hack!
+  var errorMessage;
+  if (!firefox) {
+    errorMessage = "IE error message";
+    // display errorMessage
+    return;
+  }
+  if (firefox) {
+    errorMessage = "Loading...";
+    // display errorMessage
+    try {
+      var world = new orp.model.World();
+      new orp.view.RootView(world);
+    } catch (e) {
+      alert(e);
+    }
+  }
+}
+
+dojo.hostenv.modulesLoadedListeners.push(onload);
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/OpenRecordLoaderStepTwo.js
===================================================================
--- trunk/source/OpenRecordLoaderStepTwo.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/OpenRecordLoaderStepTwo.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -0,0 +1,36 @@
+/*****************************************************************************
+ OpenRecordLoaderStepTwo.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+document.write('<script type="text/javascript" src="source/OpenRecordLoaderStepThree.js"></script>');
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/OutlinePlugin.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -64,7 +64,7 @@
   orp.view.PluginView.call(this, superview, htmlElement, querySpec, layoutItem, "OutlinePlugin");
 };
 
-dj_inherits(orp.OutlinePlugin, orp.view.PluginView);  // makes OutlinePlugin be a subclass of PluginView
+dojo.inherits(orp.OutlinePlugin, orp.view.PluginView);  // makes OutlinePlugin be a subclass of PluginView
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/TablePlugin.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -80,7 +80,7 @@
   this._ascendingOrder = true;
 };
 
-dj_inherits(orp.TablePlugin, orp.view.PluginView);  // makes TablePlugin be a subclass of PluginView
+dojo.inherits(orp.TablePlugin, orp.view.PluginView);  // makes TablePlugin be a subclass of PluginView
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/archive/DeltaArchive.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -73,7 +73,7 @@
   this._hasEverFailedToSaveFlag = false;
 };
 
-dj_inherits(orp.archive.DeltaArchive, orp.archive.StubArchive);  // makes DeltaArchive be a subclass of StubArchive
+dojo.inherits(orp.archive.DeltaArchive, orp.archive.StubArchive);  // makes DeltaArchive be a subclass of StubArchive
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/archive/JsonDeserializer.js
===================================================================
--- trunk/source/archive/JsonDeserializer.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/archive/JsonDeserializer.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -57,7 +57,7 @@
   this._archiveLoader = archiveLoader;
 };
 
-dj_inherits(orp.archive.JsonDeserializer, orp.archive.JsonFormat);  // makes JsonDeserializer be a subclass of JsonFormat
+dojo.inherits(orp.archive.JsonDeserializer, orp.archive.JsonFormat);  // makes JsonDeserializer be a subclass of JsonFormat
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/archive/JsonSerializer.js
===================================================================
--- trunk/source/archive/JsonSerializer.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/archive/JsonSerializer.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -56,7 +56,7 @@
   this._archive = archive;  // FIXME: we should try to remove this dependency on orp.archive.StubArchive
 };
 
-dj_inherits(orp.archive.JsonSerializer, orp.archive.JsonFormat);  // makes JsonSerializer be a subclass of JsonFormat
+dojo.inherits(orp.archive.JsonSerializer, orp.archive.JsonFormat);  // makes JsonSerializer be a subclass of JsonFormat
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/lang/Lang.js
===================================================================
--- trunk/source/lang/Lang.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/lang/Lang.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -32,7 +32,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.lang.Lang");
-dojo.require("dojo.lang.Lang");
+dojo.require("dojo.lang.*");
 
 
 // -------------------------------------------------------------------
@@ -164,7 +164,7 @@
  * @param    type    A class of object, or a literal type.
  */
 orp.lang.assertTypeForOptionalValue = function(value, type) {
-  if (!dojo.lang.isUndefined(value)) {
+  if (!dojo.lang.isUndefined(value) && (value !== null)) {
     orp.lang.assertType(value, type);
   }
 };

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/model/ContentRecord.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -67,7 +67,7 @@
   // this._setOfOrdinals = null;
 };
 
-dj_inherits(orp.model.ContentRecord, orp.model.Record);  // makes ContentRecord be a subclass of Record
+dojo.inherits(orp.model.ContentRecord, orp.model.Record);  // makes ContentRecord be a subclass of Record
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/model/Entry.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -77,7 +77,7 @@
   this._type = null;
 };
 
-dj_inherits(orp.model.Entry, orp.model.ContentRecord);  // makes Entry be a subclass of ContentRecord
+dojo.inherits(orp.model.Entry, orp.model.ContentRecord);  // makes Entry be a subclass of ContentRecord
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/model/Item.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -74,7 +74,7 @@
   this._noteChanges(null);
 };
 
-dj_inherits(orp.model.Item, orp.model.ContentRecord);  // makes Item be a subclass of ContentRecord
+dojo.inherits(orp.model.Item, orp.model.ContentRecord);  // makes Item be a subclass of ContentRecord
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/model/Ordinal.js
===================================================================
--- trunk/source/model/Ordinal.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/model/Ordinal.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -63,7 +63,7 @@
   this._contentRecord._addOrdinal(this);
 };
 
-dj_inherits(orp.model.Ordinal, orp.model.Record);  // makes Ordinal be a subclass of Record
+dojo.inherits(orp.model.Ordinal, orp.model.Record);  // makes Ordinal be a subclass of Record
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/model/Record.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -65,7 +65,7 @@
   }
 
   // Unfortunately, we need to treat 'world' and 'uuid' as 'Optional'. 
-  // I think this constructor is invoked by dj_inherits() calls 
+  // I think this constructor is invoked by dojo.inherits() calls 
   // (in ContentRecord, Vote, and Ordinal), which do not pass
   // in any values for world and uuid.
   orp.lang.assertTypeForOptionalValue(uuid, orp.uuid.TimeBasedUuid);

Modified: trunk/source/model/Vote.js
===================================================================
--- trunk/source/model/Vote.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/model/Vote.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -63,7 +63,7 @@
   this._contentRecord._addVote(this);
 };
 
-dj_inherits(orp.model.Vote, orp.model.Record);  // makes Vote be a subclass of Record
+dojo.inherits(orp.model.Vote, orp.model.Record);  // makes Vote be a subclass of Record
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/model/World.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -540,6 +540,9 @@
 };
 
 orp.model.World.prototype.getTypeCalledConnection = function() {
+  if (!this._typeCalledConnection) {
+    this._typeCalledConnection = this._archive.getItemFromUuid(orp.model.World.UUID.TYPE_CONNECTION);
+  }
   return this._typeCalledConnection;
 };
 

Modified: trunk/source/storage/FakeStorage.js
===================================================================
--- trunk/source/storage/FakeStorage.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/storage/FakeStorage.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -53,7 +53,7 @@
   this._fakeFileContents = "";
 };
 
-dj_inherits(orp.storage.FakeStorage, orp.storage.Storage);  // makes FakeStorage be a subclass of Storage
+dojo.inherits(orp.storage.FakeStorage, orp.storage.Storage);  // makes FakeStorage be a subclass of Storage
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/storage/FileStorage.js
===================================================================
--- trunk/source/storage/FileStorage.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/storage/FileStorage.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -96,7 +96,7 @@
   this._fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
 };
 
-dj_inherits(orp.storage.FileStorage, orp.storage.Storage);  // makes FileStorage be a subclass of Storage
+dojo.inherits(orp.storage.FileStorage, orp.storage.Storage);  // makes FileStorage be a subclass of Storage
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/storage/HttpStorage.js
===================================================================
--- trunk/source/storage/HttpStorage.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/storage/HttpStorage.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -61,7 +61,7 @@
   }
 };
 
-dj_inherits(orp.storage.HttpStorage, orp.storage.Storage);  // makes HttpStorage be a subclass of Storage
+dojo.inherits(orp.storage.HttpStorage, orp.storage.Storage);  // makes HttpStorage be a subclass of Storage
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/util/Util.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -118,6 +118,7 @@
  * @param    line    The line number where the error was found.
  */
 orp.util.handleError = function(message, url, line) {
+  // orp.lang.assert(false);
   orp.util.ourErrorReporter("orp.util.handleError()\n" + message + "\nline: " + line + "\nURL: " + url);
 };
 

Modified: trunk/source/uuid/RandomUuid.js
===================================================================
--- trunk/source/uuid/RandomUuid.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/uuid/RandomUuid.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -90,7 +90,7 @@
   orp.lang.assert(this.getVersion() == orp.uuid.Uuid.Version.RANDOM);
 };
 
-dj_inherits(orp.uuid.RandomUuid, orp.uuid.Uuid);  // makes RandomUuid be a subclass of Uuid
+dojo.inherits(orp.uuid.RandomUuid, orp.uuid.Uuid);  // makes RandomUuid be a subclass of Uuid
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/uuid/TimeBasedUuid.js
===================================================================
--- trunk/source/uuid/TimeBasedUuid.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/uuid/TimeBasedUuid.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -126,7 +126,7 @@
   orp.lang.assert(this.getVersion() == orp.uuid.Uuid.Version.TIME_BASED);
 };
 
-dj_inherits(orp.uuid.TimeBasedUuid, orp.uuid.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
+dojo.inherits(orp.uuid.TimeBasedUuid, orp.uuid.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/EntryView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -104,7 +104,7 @@
   }
 };
 
-dj_inherits(orp.view.EntryView, orp.view.View);  // makes EntryView be a subclass of View
+dojo.inherits(orp.view.EntryView, orp.view.View);  // makes EntryView be a subclass of View
 
 
 // -------------------------------------------------------------------
@@ -801,6 +801,9 @@
  * @return   A string with the CSS className for that type.
  */
 orp.view.EntryView.prototype._getClassNameFromType = function(type) {
+  // if (!type) {
+  //   orp.lang.assert(false);
+  // }
   if (!orp.view.EntryView._ourHashTableOfClassNamesKeyedByTypeUuid) {
     this._buildTypeHashTable();
   }

Modified: trunk/source/view/ItemView.js
===================================================================
--- trunk/source/view/ItemView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/ItemView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -75,7 +75,7 @@
   this._pluginView = null;
 };
 
-dj_inherits(orp.view.ItemView, orp.view.View);  // makes ItemView be a subclass of View
+dojo.inherits(orp.view.ItemView, orp.view.View);  // makes ItemView be a subclass of View
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/LoginView.js
===================================================================
--- trunk/source/view/LoginView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/LoginView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -78,7 +78,7 @@
   this._cookie.load();
 };
 
-dj_inherits(orp.view.LoginView, orp.view.View);  // makes LoginView be a subclass of View
+dojo.inherits(orp.view.LoginView, orp.view.View);  // makes LoginView be a subclass of View
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/MultiEntriesView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -79,7 +79,7 @@
   this._listOfSuggestions = null;
 };
 
-dj_inherits(orp.view.MultiEntriesView, orp.view.View);  // makes MultiEntriesView be a subclass of View
+dojo.inherits(orp.view.MultiEntriesView, orp.view.View);  // makes MultiEntriesView be a subclass of View
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/NavbarView.js
===================================================================
--- trunk/source/view/NavbarView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/NavbarView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -69,7 +69,7 @@
   this._builtForEditMode = false;
 };
 
-dj_inherits(orp.view.NavbarView, orp.view.View);  // makes NavbarView be a subclass of View
+dojo.inherits(orp.view.NavbarView, orp.view.View);  // makes NavbarView be a subclass of View
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/PageView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -80,7 +80,7 @@
   this._listOfSectionViews = [];
 };
 
-dj_inherits(orp.view.PageView, orp.view.View);  // makes PageView be a subclass of View
+dojo.inherits(orp.view.PageView, orp.view.View);  // makes PageView be a subclass of View
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/PluginView.js
===================================================================
--- trunk/source/view/PluginView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/PluginView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -68,7 +68,7 @@
   this._pluginItem = null;
 };
 
-dj_inherits(orp.view.PluginView, orp.view.View);  // makes PluginView be a subclass of View
+dojo.inherits(orp.view.PluginView, orp.view.View);  // makes PluginView be a subclass of View
 
 
 // -------------------------------------------------------------------

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/source/view/SectionView.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -112,7 +112,7 @@
   }
 };
 
-dj_inherits(orp.view.SectionView, orp.view.View);  // makes SectionView be a subclass of View
+dojo.inherits(orp.view.SectionView, orp.view.View);  // makes SectionView be a subclass of View
 
 
 // -------------------------------------------------------------------
@@ -501,10 +501,8 @@
   }
   if (matchingAttribute.getDisplayString() != newChoiceName) {
     if (listOfMatchingAttrs.length === 0) {
-      // myQuery.addEntryForAttribute(attributeCalledQueryMatchingAttribute, newQueryMatchingAttribute);
       myQuery.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:newQueryMatchingAttribute});
     } else {
-      // myQuery.replaceEntry(listOfMatchingAttrs[0], newQueryMatchingAttribute);
       myQuery.replaceEntry({previousEntry:listOfMatchingAttrs[0], value:newQueryMatchingAttribute});
     }
 

Modified: trunk/tests/LintTest.html
===================================================================
--- trunk/tests/LintTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/LintTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/LintTest.js
===================================================================
--- trunk/tests/LintTest.js	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/LintTest.js	2005-10-14 02:36:44 UTC (rev 360)
@@ -71,7 +71,7 @@
 
 function testJsLintOnOpenRecordCode() {
   var listOfSourceCodeFiles = [
-    "OpenRecordLoader.js",
+    "OpenRecordLoaderStepThree.js",
     "TablePlugin.js",
     "OutlinePlugin.js",
     "DetailPlugin.js",

Modified: trunk/tests/archive/LintTest.html
===================================================================
--- trunk/tests/archive/LintTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/archive/LintTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/dojo/SimpleDojoTest.html
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/dojo/SimpleDojoTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit test - Dojo code availability</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="SimpleDojoTest.js"></script>
   </head>
   

Modified: trunk/tests/lang/LangTest.html
===================================================================
--- trunk/tests/lang/LangTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/lang/LangTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests for Lang.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="LangTest.js"></script>
   </head>
   

Modified: trunk/tests/model/LintTest.html
===================================================================
--- trunk/tests/model/LintTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/model/LintTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/model/ModelTest.html
===================================================================
--- trunk/tests/model/ModelTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/model/ModelTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests for the data model</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="ModelTest.js"></script>
   </head>

Modified: trunk/tests/model/RepositoryWritingTest.html
===================================================================
--- trunk/tests/model/RepositoryWritingTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/model/RepositoryWritingTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,7 @@
     <title>Test writing to repositories</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="RepositoryWritingTest.js"></script>
   </head>

Modified: trunk/tests/model/TestReorderingForSpecialCases.html
===================================================================
--- trunk/tests/model/TestReorderingForSpecialCases.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/model/TestReorderingForSpecialCases.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,7 @@
     <title>Test reordering of items for special cases of the corresponding ordinals (via a mock)</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="TestReorderingForSpecialCases.js"></script>

Modified: trunk/tests/model/TestReorderingForTypicalOrdinals.html
===================================================================
--- trunk/tests/model/TestReorderingForTypicalOrdinals.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/model/TestReorderingForTypicalOrdinals.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,7 @@
     <title>Test reordering items with typical ordinals (via a mock)</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="TestReorderingForTypicalOrdinals.js"></script>

Modified: trunk/tests/storage/LintTest.html
===================================================================
--- trunk/tests/storage/LintTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/storage/LintTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/tests_of_external_code/TimingTest.html
===================================================================
--- trunk/tests/tests_of_external_code/TimingTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/tests_of_external_code/TimingTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>JavaScript timing tests</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="TimingTest.js"></script>
   </head>
   

Modified: trunk/tests/util/CsvParserTest.html
===================================================================
--- trunk/tests/util/CsvParserTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/util/CsvParserTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests for CsvParser.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="CsvParserTest.js"></script>
   </head>
   

Modified: trunk/tests/util/DateValueTest.html
===================================================================
--- trunk/tests/util/DateValueTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/util/DateValueTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests for DateValue.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="DateValueTest.js"></script>
   </head>
   

Modified: trunk/tests/util/LintTest.html
===================================================================
--- trunk/tests/util/LintTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/util/LintTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/util/UtilTest.html
===================================================================
--- trunk/tests/util/UtilTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/util/UtilTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests for Util.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="UtilTest.js"></script>
   </head>

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.html
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Additional unit tests for XmlConverter.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="XmlConverterMultiplePassesTest.js"></script>
   </head>

Modified: trunk/tests/util/XmlConverterTest.html
===================================================================
--- trunk/tests/util/XmlConverterTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/util/XmlConverterTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests for XmlConverter.js</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="XmlConverterTest.js"></script>
   </head>

Modified: trunk/tests/uuid/LintTest.html
===================================================================
--- trunk/tests/uuid/LintTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/uuid/LintTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tests/uuid/UuidTest.html
===================================================================
--- trunk/tests/uuid/UuidTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/uuid/UuidTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests for UUIDs</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="UuidTest.js"></script>
   </head>
   

Modified: trunk/tests/view/LintTest.html
===================================================================
--- trunk/tests/view/LintTest.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tests/view/LintTest.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -14,7 +14,7 @@
     <title>Unit tests using jslint</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>

Modified: trunk/tobacco.html
===================================================================
--- trunk/tobacco.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tobacco.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,6 @@
 
   <head>
     <title>openrecord.org - Tobacco Control</title>
-    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/tuscany.html
===================================================================
--- trunk/tuscany.html	2005-10-14 02:30:33 UTC (rev 359)
+++ trunk/tuscany.html	2005-10-14 02:36:44 UTC (rev 360)
@@ -12,7 +12,6 @@
 
   <head>
     <title>openrecord.org - Tuscany</title>
-    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   



From skinner at berlios.de  Fri Oct 14 23:45:17 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 14 Oct 2005 23:45:17 +0200
Subject: [openrecord-svn] r361 - trunk/documentation
Message-ID: <200510142145.j9ELjHIs030958@sheep.berlios.de>

Author: skinner
Date: 2005-10-14 23:45:17 +0200 (Fri, 14 Oct 2005)
New Revision: 361

Modified:
   trunk/documentation/release_planning.txt
Log:
Updated release_planning.txt

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-14 02:36:44 UTC (rev 360)
+++ trunk/documentation/release_planning.txt	2005-10-14 21:45:17 UTC (rev 361)
@@ -402,7 +402,7 @@
 -------+----------+---------+----------------------------------------------
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
-       |          | (0.25+) |  1. try to get djConfig.debugAtAllCosts to work (see sandbox.html)
+brian  |          | 1    IED|  1. get djConfig.debugAtAllCosts to work
 brian  |          | (0.25+) |  2. replace orpBindAsEventListener() with dojo.event.connect()
 brian  |          | 0.1  IED|  3. move UUID files from source/util to source/uuid
 brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API



From skinner at berlios.de  Sat Oct 15 01:16:14 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 15 Oct 2005 01:16:14 +0200
Subject: [openrecord-svn] r362 - in trunk: documentation source source/model source/util source/view tests/model
Message-ID: <200510142316.j9ENGEuY031891@sheep.berlios.de>

Author: skinner
Date: 2005-10-15 01:16:03 +0200 (Sat, 15 Oct 2005)
New Revision: 362

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/OutlinePlugin.js
   trunk/source/model/Entry.js
   trunk/source/util/CsvParser.js
   trunk/source/util/Util.js
   trunk/source/util/XmlConverter.js
   trunk/source/view/SectionView.js
   trunk/source/view/View.js
   trunk/tests/model/ModelTest.js
   trunk/tests/model/RepositoryWritingTest.js
Log:
Minor clean-up work, removing old orp.util cruft.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/documentation/release_planning.txt	2005-10-14 23:16:03 UTC (rev 362)
@@ -425,6 +425,7 @@
        |          |         | 19. Do lazy creation of layout data items
        |          |         | 20. try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
        |          |         | 21. try to replace View.appendNewElement() with dojo.xml.domUtil methods
+       |          |         |     try to replace md5.js with dojo.crypto.MD5 methods
        |          |         | 22. try to replace remaining Util.js functions with dojo.lang functions
        |          |         | 23. try using Ant and the Dojo build system to build OpenRecord into a single-file 
        |          |         | 24. move XmlConverter.js out of util, because it depends on model code

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/source/OutlinePlugin.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -129,7 +129,11 @@
 
     // orp.view.View.appendNewTextNode(anchorElement, "(more &#8658;)");
     anchorElement.innerHTML = "(more &#8658;)";
-    orp.util.addEventListener(anchorElement, "click", orp.view.RootView.clickOnLocalLink);
+    // orp.util.addEventListener(anchorElement, "click", orp.view.RootView.clickOnLocalLink);
+
+    // orp.util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
+    // optionElement.onclick = this.clickOnAttributeMenu.orpBindAsEventListener(this);    
+    dojo.event.connect(anchorElement, "onclick", orp.view.RootView.clickOnLocalLink);
   }
 };
 

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/source/model/Entry.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -306,7 +306,7 @@
 orp.model.Entry.prototype.getAttributeForItem = function(item) {
   var FIXME_OCT_7_2005_EXPERIMENT = true;
   if (FIXME_OCT_7_2005_EXPERIMENT) {
-    orp.util.assert(false);  // we should never get called
+    orp.lang.assert(false);  // we should never get called
   } else {
     if (this._item == item) {
       return this._attribute;
@@ -335,7 +335,7 @@
 orp.model.Entry.prototype.getConnectedItem = function(item) {
   var FIXME_OCT_7_2005_EXPERIMENT = true;
   if (FIXME_OCT_7_2005_EXPERIMENT) {
-    orp.util.assert(false);  // we should never get called
+    orp.lang.assert(false);  // we should never get called
   } else {
     orp.lang.assert(item instanceof orp.model.Item);
     if (this._item == item) {

Modified: trunk/source/util/CsvParser.js
===================================================================
--- trunk/source/util/CsvParser.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/source/util/CsvParser.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -79,7 +79,6 @@
  * @return   Returns an array containing sub-arrays containing strings.
  */
 orp.util.CsvParser.prototype.getStringValuesFromCsvData = function(csvData) {
-  // orp.util.assert(dojo.lang.isString(csvData));
   orp.lang.assertType(csvData, String);
   
   var lineEndingCharacters = new RegExp("\r\n|\n|\r");

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/source/util/Util.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -34,7 +34,6 @@
 dojo.provide("orp.util.Util");
 dojo.require("orp.lang.Lang");
 dojo.require("dojo.lang.*");
-// dojo.require("orp.uuid.Uuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -44,26 +43,12 @@
 
 
 /**
- * The Util class offers general utility methods that might
+ * The Util file offers general utility functions that might
  * be useful in a wide variety of applications.
- *
- * There is no need to ever call this constructor.  All the Util
- * methods are class methods, not instance methods, and the only 
- * reason this constructor exists is to cause the name "Util"
- * to be a globally-scoped class name, which the class methods 
- * can then be attached to.
- *
- * @scope    public instance constructor
- * @syntax   DO NOT CALL THIS CONSTRUCTOR
  */
- /*
-function Util() {
-  throw new Error("Util is a static class. You can't create instances of it.");
-}
-*/
 
 // -------------------------------------------------------------------
-// Public class constants
+// Public constants
 // -------------------------------------------------------------------
 orp.util.ASCII = {
   RETURN: 13,
@@ -118,54 +103,11 @@
  * @param    line    The line number where the error was found.
  */
 orp.util.handleError = function(message, url, line) {
-  // orp.lang.assert(false);
   orp.util.ourErrorReporter("orp.util.handleError()\n" + message + "\nline: " + line + "\nURL: " + url);
 };
 
 
 /**
- * Pops up an alert box if the assertion fails.
- *
- * If the asserted condition is true, this method does nothing. If the condition
- * is false, this method pops up an alert box.  The alert box explains that an
- * assertion failed, and it gives a stack trace showing the file name and line
- * number where the assertion failed.
- *
- * @scope    public class method
- * @param    booleanValue    A boolean value, which needs to be true for the assertion to succeed. 
- * @param    message    Optional. A string describing the assertion.
- */
-/*
-orp.util.assert = function(booleanValue, message) {
-  if (orp.util.isBoolean(booleanValue)) {
-    if (!booleanValue) {    
-      var exception = new Error();  // create an exception, just to get a stack trace
-      var stackString = exception.stack;
-      var stackList = stackString.split("\n");
-      stackList.shift(); // get rid of the "ReferenceError()@:0" at the start of the list
-      stackList.shift(); // get rid of the "(false)@file ... util.js:67" at the start of the list
-      stackList.pop();   // get rid of the trailing "\n"
-      stackList.pop();   // get rid of the "@:0" at the end of the list
-      for (var key in stackList) {
-        var string = stackList[key];
-        var result = string.match(/[^\/]*$/);
-        stackList[key] = result[0];
-      }
-      stackString = stackList.join("\n");
-
-      orp.util.ourErrorReporter("An assert statement failed with message: \n" + message + " \nThe method orp.util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
-    }
-  } else {
-    orp.util.ourErrorReporter("An assert statement went sour.\nThe method orp.util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
-  }
-};
-*/
-orp.util.assert = function(booleanValue, message) {
-  dj_deprecated("orp.util.assert() is deprecated. Use orp.lang.assert().");
-  orp.lang.assert(booleanValue, message);
-};
-
-/**
  * Registers a function to be used to report status messages to the user.
  *
  * @scope    public class method
@@ -203,60 +145,8 @@
 // Type checking methods
 // -------------------------------------------------------------------
 
-/**
- * Returns true if the given value is a function.
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if inValue is a function.
- */
- /*
-orp.util.isFunction = function(value) {
-  return ((typeof value) == "function");
-};
-*/
-orp.util.isFunction = function(value) {
-  dj_deprecated("orp.util.isFunction() is deprecated. Use dojo.lang.isFunction().");
-  return dojo.lang.isFunction(value);
-};
 
 /**
- * Returns true if the given value is a string.
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if inValue is a string.
- */
- /*
-orp.util.isString = function(value) {
-  return ((typeof value) == "string");
-};
-*/
-orp.util.isString = function(value) {
-  dj_deprecated("orp.util.isString() is deprecated. Use dojo.lang.isString().");
-  return dojo.lang.isString(value);
-};
-
-
-/**
- * Returns true if the given value is a number (and is finite number).
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if inValue is a number.
- */
-/*
-orp.util.isNumber = function(value) {
-  return (((typeof value) == "number") && isFinite(value));
-};
-*/
-orp.util.isNumber = function(value) {
-  dj_deprecated("orp.util.isNumber() is deprecated. Use dojo.lang.isNumber().");
-  return dojo.lang.isNumber(value);
-};
-
-
-/**
  * Returns true if the given value is a number or a string that 
  * represents a number.
  *
@@ -279,40 +169,6 @@
 
 
 /**
- * Returns true if the given value is a boolean.
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if inValue is a boolean.
- */
-/*
-orp.util.isBoolean = function(value) {
-  return ((typeof value) == "boolean");
-};
-*/
-orp.util.isBoolean = function(value) {
-  dj_deprecated("orp.util.isBoolean() is deprecated. Use dojo.lang.isBoolean().");
-  return dojo.lang.isBoolean(value);
-};
-
-/**
- * Returns true if the given value is an object.
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if inValue is an object.
- */
- /*
-orp.util.isObject = function(value) {
-  return (value && ((typeof value) == "object"));
-};
-*/
-orp.util.isObject = function(value) {
-  dj_deprecated("orp.util.isObject() is deprecated. Use dojo.lang.isObject().");
-  return dojo.lang.isObject(value);
-};
-
-/**
  * Returns true if the given value is a Date.
  *
  * @scope    public class method
@@ -325,64 +181,6 @@
 
 
 /**
- * Returns true if the given value is a UUID object. 
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if value is a UUID object.
- */
-orp.util.isUuid = function(value) {
-  dj_deprecated("orp.util.isUuid() is deprecated. Use orp.uuid.Uuid.prototype.isValid().");
-  // return (value instanceof orp.uuid.Uuid);
-  return true; // PENDING: FIXME.
-};
-
-
-/**
- * Returns true if the given value is a UUID object or a string
- * that represents a UUID. Here's an example of a string that
- * represents a UUID: "e3bf3e14-e8f4-43e2-866c-121c5ab70c0b".
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if value is a UUID.
- */
-orp.util.isUuidValue = function(value) {
-  dj_deprecated("orp.util.isUuidValue() is deprecated. Use orp.uuid.Uuid.prototype.isValid().");
-  if (orp.util.isUuid(value)) {
-    return true;
-  }
-  if ((typeof value) == "string") {
-    // PENDING: 
-    // We should include more rigorous tests, to make sure this
-    // is really a UUID, not just a string with 36 characters.
-    return (value.length == 36);
-  }
-  return false;
-};
-
-
-/**
- * Returns true if the given value is an array.
- *
- * @scope    public class method
- * @param    value    Any object or literal value. 
- * @return   A boolean value. True if inValue is an array.
- */
- /*
-orp.util.isArray = function(value) {
-  if (!value) {
-    return false;
-  }
-  return (((typeof value) == "object") && (value.constructor == Array));
-};
-*/
-orp.util.isArray = function(value) {
-  dj_deprecated("orp.util.isArray() is deprecated. Use dojo.lang.isArray().");
-  return dojo.lang.isArray(value);
-};
-
-/**
  * Returns true if the given value is a hash table.
  *
  * @scope    public class method
@@ -462,7 +260,6 @@
  * @return   Returns true if the object was found in the set.
  */
 orp.util.isObjectInSet = function(object, set) {
-  // orp.util.assert(orp.util.isArray(set));
   orp.lang.assertType(set, Array);
   
   for (var key in set) {
@@ -483,8 +280,6 @@
  * @return   Returns true if each of the objects was found in the set.
  */
 orp.util.areObjectsInSet = function(array, set) {
-  // orp.util.assert(orp.util.isArray(array));
-  // orp.util.assert(orp.util.isArray(set));
   orp.lang.assertType(array, Array);
   orp.lang.assertType(set, Array);
   
@@ -508,7 +303,6 @@
  * @return   Returns true if the object was removed from the array.
  */
 orp.util.removeObjectFromSet = function(object, set) {
-  // orp.util.assert(orp.util.isArray(set));
   orp.lang.assertType(set, Array);
   
   if (!object) {
@@ -534,7 +328,6 @@
  * @return   Returns true if the object was added to the array.
  */
 orp.util.addObjectToSet = function(object, set) {
-  // orp.util.assert(orp.util.isArray(set));
   orp.lang.assertType(set, Array);
 
   if (!object) {
@@ -629,28 +422,6 @@
 
 
 /**
- * A cross-browser compatibility method for registering event listeners. 
- *
- * @scope public class method
- * @param element    An HTMLElement.
- * @param eventType    The type of event (e.g. "mousedown", "click").
- * @param callback    The function to call when the event happens.
- * @param captures    True if the event should be captured by this function.
- */
-orp.util.addEventListener = function(element, eventType, callback, captures) {
-  if (element.addEventListener) {
-    // for DOM Level 2 browsers, like Firefox
-    element.addEventListener(eventType, callback, captures);
-  } else {
-    if (element.attachEvent) {
-      // for Internet Explorer
-      element.attachEvent("on"+eventType, callback, captures);
-    }
-  } 
-};
-
-
-/**
  * When passing an EventListener (e.g. onclick) a function, it is often useful to
  * 1) have the function be called by an instance of an object
  * 2) have additional arguments passed as parameters to the function
@@ -675,31 +446,6 @@
 
 
 // -------------------------------------------------------------------
-// File I/O methods
-// -------------------------------------------------------------------
-
-/**
- * Given the URL of a file, returns the contents of the file as a text string.
- *
- * @scope    public class method
- * @param    url    A string with the URL of a file containing JavaScript code. 
- * @return   A string containing the contents of the file.
- */
-orp.util.getStringContentsOfFileAtURL = function(url) {
-  dj_deprecated("orp.util.getStringContentsOfFileAtURL() is deprecated. Use dojo.hostenv.getText().");
-  return dojo.hostenv.getText(url);
-
-  /* 
-  var anXMLHttpRequestObject = new window.XMLHttpRequest();
-  anXMLHttpRequestObject.open("GET", url, false);
-  anXMLHttpRequestObject.send(null);
-  var fileContents = anXMLHttpRequestObject.responseText;
-  return fileContents;
-  */
-};
-
-
-// -------------------------------------------------------------------
 // HTML document manipulation
 // -------------------------------------------------------------------
 
@@ -732,7 +478,7 @@
  * @return   An HTML "img" element.
  */
 orp.util.createImageElement = function(imageFileName) {
-  var imagesDirectory = "images/"; // PENDING: this shouldn't be hard-coded in Util
+  var imagesDirectory = "images/"; // FIXME: this shouldn't be hard-coded in Util
   var imageElement = document.createElement("img");
   imageElement.src = imagesDirectory + imageFileName;
   return imageElement;

Modified: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/source/util/XmlConverter.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -46,7 +46,6 @@
  * @scope    public instance constructor
  */
 orp.util.XmlTextNodeToAttributeSpecifier = function(tagPath, attribute) {
-  // orp.util.assert(tagPath instanceof Array);
   orp.lang.assertType(tagPath, Array);
   orp.lang.assert(attribute instanceof orp.model.Item);
   this._tagPath = tagPath;

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/source/view/SectionView.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -284,8 +284,7 @@
     optionElement.value = pluginClass.getPluginItemUuid();
     var pluginItem = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
     optionElement.text = pluginItem.getDisplayString();
-    listener = this; 
-    orp.util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
+    dojo.event.connect(optionElement, "onclick", this, "clickOnPluginSelectionMenu");
   }
   orp.view.View.appendNewTextNode(controlArea," of items whose ");
   this._queryEditSpan = orp.view.View.appendNewElement(controlArea, "span");
@@ -317,7 +316,6 @@
       if (FIXME_OCT_7_2005_EXPERIMENT) {
         var layoutItem = entriesLayoutData[i].getValue();
       } else {
-        // var layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
         layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
       }
       var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attributeAppliesToPlugin);
@@ -334,9 +332,7 @@
   repository.beginTransaction();
   layoutItem = repository.newItem("Layout data for " + pluginTypeItem.getDisplayString() + " of " + this._section.getDisplayString());
   layoutItem.assignToCategory(categoryCalledLayoutData);
-  // layoutItem.addEntryForAttribute(attributeAppliesToPlugin, pluginTypeItem);
   layoutItem.addEntry({attribute:attributeAppliesToPlugin, value:pluginTypeItem});
-  // this._section.addEntryForAttribute(attributeLayoutData, layoutItem, repository.getTypeCalledItem());
   this._section.addConnectionEntry(attributeLayoutData, layoutItem, attributeCalledSectionThisLayoutDataBelongsTo);
   repository.endTransaction();
   return layoutItem;
@@ -374,7 +370,6 @@
     var optionElement = orp.view.View.appendNewElement(selectElement, "option");
     optionElement.selected = (matchingAttribute.getDisplayString() == anAttribute.getDisplayString());
     optionElement.value = anAttribute.getUuidString();
-    // optionElement.onclick = this.clickOnAttributeMenu.orpBindAsEventListener(this);
     dojo.event.connect(optionElement, "onclick", this, "clickOnAttributeMenu");
     optionElement.text = anAttribute.getDisplayString();
   }

Modified: trunk/source/view/View.js
===================================================================
--- trunk/source/view/View.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/source/view/View.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -176,7 +176,6 @@
  * @param    visibleFlag    True if the view should be visible on screen. False if the view should be hidden off screen.
  */
 orp.view.View.prototype.includeOnScreen = function(visibleFlag) {
-  // orp.util.assert(orp.util.isBoolean(visibleFlag));
   orp.lang.assertType(visibleFlag, Boolean);
 
   if (visibleFlag) {
@@ -217,10 +216,6 @@
  * @return   The newly created HTML element.
  */
 orp.view.View.newElement = function(tagName, cssClassName, attributesInJson, text) {
-  // orp.util.assert(orp.util.isString(tagName));
-  // orp.util.assert(!cssClassName || orp.util.isString(cssClassName));
-  // orp.util.assert(!attributesInJson || orp.util.isObject(attributesInJson));
-  // orp.util.assert(!text|| orp.util.isString(text));
   orp.lang.assertType(tagName, String);
   orp.lang.assertTypeForOptionalValue(cssClassName, String);
   orp.lang.assertTypeForOptionalValue(attributesInJson, Object);
@@ -288,7 +283,6 @@
  */
 orp.view.View.appendNewTextNode = function(parentElement, textString) {
   orp.lang.assert(parentElement instanceof HTMLElement);
-  // orp.util.assert(orp.util.isString(textString));
   orp.lang.assertType(textString, String);
 
   var newTextNode = window.document.createTextNode(textString);

Modified: trunk/tests/model/ModelTest.js
===================================================================
--- trunk/tests/model/ModelTest.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/tests/model/ModelTest.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -203,11 +203,11 @@
   for (key in listOfAttributes) {
     item = listOfAttributes[key];
     listOfAssignedNames = item.getNameEntries();
-    assertTrue('Every axiomatic attribute has an array of names', orp.util.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic attribute has an array of names', dojo.lang.isArray(listOfAssignedNames));
     assertTrue('Every axiomatic attribute has one name assigned', listOfAssignedNames.length == 1);
     nameEntry = listOfAssignedNames[0];
     assertTrue('Every axiomatic attribute has a name which is an entry', (nameEntry instanceof orp.model.Entry));
-    assertTrue('Every entry can be displayed as a string', orp.util.isString(nameEntry.getDisplayString()));
+    assertTrue('Every entry can be displayed as a string', dojo.lang.isString(nameEntry.getDisplayString()));
     assertTrue('Every axiomatic attribute is in the category "Attribute"', item.isInCategory(categoryCalledAttribute));
   }
   
@@ -217,11 +217,11 @@
   for (key in listOfCategories) {
     item = listOfCategories[key];
     listOfAssignedNames = item.getNameEntries();
-    assertTrue('Every axiomatic category has an array of names', orp.util.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic category has an array of names', dojo.lang.isArray(listOfAssignedNames));
     assertTrue('Every axiomatic category has one name assigned', listOfAssignedNames.length == 1);
     nameEntry = listOfAssignedNames[0];
     assertTrue('Every axiomatic category has a name which is entry', (nameEntry instanceof orp.model.Entry));
-    assertTrue('Every entry can be displayed as a string', orp.util.isString(nameEntry.getDisplayString()));
+    assertTrue('Every entry can be displayed as a string', dojo.lang.isString(nameEntry.getDisplayString()));
   }
 }
 

Modified: trunk/tests/model/RepositoryWritingTest.js
===================================================================
--- trunk/tests/model/RepositoryWritingTest.js	2005-10-14 21:45:17 UTC (rev 361)
+++ trunk/tests/model/RepositoryWritingTest.js	2005-10-14 23:16:03 UTC (rev 362)
@@ -154,19 +154,23 @@
 }
 
 function fileHasExpectedContents(expectedContents) {
-  var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+  // var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+  var contents = dojo.hostenv.getText(fileUrl);
   for (var i = 0; contents != expectedContents && i < 5; ++i) {
     waitASecond();
-    contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+    // contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+    contents = dojo.hostenv.getText(fileUrl);
   }
   return (contents == expectedContents);
 }
 
 function fileHasExpectedSubstring(expectedSubstring) {
-  var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+  // var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+  var contents = dojo.hostenv.getText(fileUrl);
   for (var i = 0; contents.indexOf(expectedSubstring) == -1 && i < 5; ++i) {
     waitASecond();
-    contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+    // contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+    contents = dojo.hostenv.getText(fileUrl);
   }
   return (contents.indexOf(expectedSubstring) != -1);
 }



From skinner at berlios.de  Mon Oct 17 23:30:58 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Mon, 17 Oct 2005 23:30:58 +0200
Subject: [openrecord-svn] r363 - trunk/tests
Message-ID: <200510172130.j9HLUw7T001704@sheep.berlios.de>

Author: skinner
Date: 2005-10-17 23:30:58 +0200 (Mon, 17 Oct 2005)
New Revision: 363

Modified:
   trunk/tests/SimpleTest.js
Log:
added a simple error catching test

Modified: trunk/tests/SimpleTest.js
===================================================================
--- trunk/tests/SimpleTest.js	2005-10-14 23:16:03 UTC (rev 362)
+++ trunk/tests/SimpleTest.js	2005-10-17 21:30:58 UTC (rev 363)
@@ -49,6 +49,16 @@
   assertTrue("Two and two is four", (2 + 2) == 4);
 }
 
+function testErrorCatching() {
+  var caughtError = false;
+  try {
+    var foo = bar;  // syntax error: bar is undefined
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue('There was an error in "var foo = bar"', caughtError);
+}
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From skinner at berlios.de  Tue Oct 18 04:15:32 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 18 Oct 2005 04:15:32 +0200
Subject: [openrecord-svn] r364 - in trunk: documentation source source/lang source/util source/view tests tests/archive tests/dojo tests/dom tests/lang tests/model tests/storage tests/tests_of_external_code tests/util tests/uuid tests/view
Message-ID: <200510180215.j9I2FW0L032508@sheep.berlios.de>

Author: skinner
Date: 2005-10-18 04:15:08 +0200 (Tue, 18 Oct 2005)
New Revision: 364

Added:
   trunk/source/dom.js
   trunk/tests/dom/
   trunk/tests/dom/domTest.html
   trunk/tests/dom/domTest.js
Modified:
   trunk/documentation/release_planning.txt
   trunk/source/OutlinePlugin.js
   trunk/source/TablePlugin.js
   trunk/source/lang/Lang.js
   trunk/source/util/Util.js
   trunk/source/view/EntryView.js
   trunk/source/view/LoginView.js
   trunk/source/view/MultiEntriesView.js
   trunk/source/view/NavbarView.js
   trunk/source/view/PageView.js
   trunk/source/view/RootView.js
   trunk/source/view/SuggestionBox.js
   trunk/source/view/View.js
   trunk/tests/LintTest.js
   trunk/tests/TestSuite.html
   trunk/tests/archive/LintTest.js
   trunk/tests/dojo/SimpleDojoTest.js
   trunk/tests/lang/LangTest.js
   trunk/tests/model/LintTest.js
   trunk/tests/model/ModelTest.js
   trunk/tests/model/RepositoryWritingTest.js
   trunk/tests/model/TestReorderingForSpecialCases.js
   trunk/tests/model/TestReorderingForTypicalOrdinals.js
   trunk/tests/storage/LintTest.js
   trunk/tests/tests_of_external_code/TimingTest.js
   trunk/tests/util/CsvParserTest.js
   trunk/tests/util/DateValueTest.js
   trunk/tests/util/LintTest.js
   trunk/tests/util/UtilTest.js
   trunk/tests/util/XmlConverterMultiplePassesTest.js
   trunk/tests/util/XmlConverterTest.js
   trunk/tests/uuid/LintTest.js
   trunk/tests/uuid/UuidTest.js
   trunk/tests/view/LintTest.js
Log:
Finished replacing calls to orpBindAsEventListener() with calls to dojo.event.connect().  Deleted orpBindAsEventListener().  Added a new orp.lang.bind() method, and a new orp.dom placeholder package.  Updated the unit test JavaScript files to use dojo-rev1759 instead of dojo-0.1.0.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/documentation/release_planning.txt	2005-10-18 02:15:08 UTC (rev 364)
@@ -403,7 +403,7 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
 brian  |          | 1    IED|  1. get djConfig.debugAtAllCosts to work
-brian  |          | (0.25+) |  2. replace orpBindAsEventListener() with dojo.event.connect()
+brian  |          | done (0.25+) |  2. replace orpBindAsEventListener() with dojo.event.connect()
 brian  |          | 0.1  IED|  3. move UUID files from source/util to source/uuid
 brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API
 brian  |          | 0.5  IED|  5. split half the code in source/model off into source/_____
@@ -411,6 +411,8 @@
        |          |         |  7. merge StubArchive + DeltaArchive, and re-name the result
 brian  |          | 0.25 IED|  8. create a FakeStorage class, + rename FileSaver + HttpSaver
        |          |         |     update unit tests to use the FakeStorage instead of StubArchive
+       |          |         |     try to convert one unit test over to the dojo jum framework
+       |          |         |     move DOM methods from orp.view.View.xxx to orp.dom.xxx
 brian  |          | 0    IED|  9. change "endOfLife()" to "destroy()"
        |          |         | 10. Rationalize the View API and document public API
 mignon | 1    IED |         | 11. Rationalize the ViewPlugin API

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/OutlinePlugin.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -123,16 +123,12 @@
     var anchorElement = orp.view.View.appendNewElement(liElement, "a", orp.view.SectionView.cssClass.MORE_LINK);
 
     // PENDING: 
-    //  We shouldn't call the private method _getUuid()
     //  We need a better way to get the URL for a content item
     anchorElement.setAttribute("href", orp.view.RootView.URL_HASH_ITEM_PREFIX + contentItem.getUuidString());
 
     // orp.view.View.appendNewTextNode(anchorElement, "(more &#8658;)");
     anchorElement.innerHTML = "(more &#8658;)";
-    // orp.util.addEventListener(anchorElement, "click", orp.view.RootView.clickOnLocalLink);
 
-    // orp.util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
-    // optionElement.onclick = this.clickOnAttributeMenu.orpBindAsEventListener(this);    
     dojo.event.connect(anchorElement, "onclick", orp.view.RootView.clickOnLocalLink);
   }
 };

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/TablePlugin.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -226,7 +226,6 @@
     }
     optionElt.text += attribute.getDisplayString();
     optionElt.value = attribute.getUuidString();
-    // optionElt.onclick = this._attributeEditorChanged.orpBindAsEventListener(this);
     dojo.event.connect(optionElt, "onclick", this, "_attributeEditorChanged");
   }
   this._selectElement = selectElt;
@@ -246,7 +245,6 @@
     this._fileImportButton = orp.view.View.appendNewElement(importDiv, "input");
     this._fileImportButton.type = "file";
     
-    // this._fileImportButton.onchange = this._importData.orpBindAsEventListener(this);
     dojo.event.connect(this._fileImportButton, "onchange", this, "_importData");
   }
 };
@@ -441,9 +439,7 @@
       headerCellContentSpan.appendChild(this.getSortIcon());
     }
     
-    // FIXME: need to figure out how to pass "attribute" via dojo.event.connect()
-    Event.observe(headerCell, "click", this.clickOnHeader.orpBindAsEventListener(this, attribute));
-    // dojo.event.connect(headerCell, "onclick", this, "clickOnHeader");
+    dojo.event.connect(headerCell, "onclick", orp.lang.bind(this, "clickOnHeader", attribute));
     
     if (this.isInEditMode()) {
       var listener = this;
@@ -567,7 +563,7 @@
  * 
  * @scope    public instance method
  */
-orp.TablePlugin.prototype.clickOnHeader = function(event, clickAttribute) {
+orp.TablePlugin.prototype.clickOnHeader = function(clickAttribute) {
   if (clickAttribute == this._sortAttribute) {
     this._ascendingOrder = !this._ascendingOrder;
   }

Added: trunk/source/dom.js
===================================================================
--- trunk/source/dom.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/dom.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -0,0 +1,98 @@
+/*****************************************************************************
+ dom.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.dom");
+dojo.require("dojo.dom");
+dojo.require("orp.lang.Lang");
+
+
+// -------------------------------------------------------------------
+// Public functions
+// -------------------------------------------------------------------
+
+/**
+ * Given an HTMLElement, and a keyword-value pair, this method associates
+ * the value with the keyword for the given element.  To get the value
+ * back again, use the orp.dom.getKeywordValueForElement() function.
+ * 
+ * @scope    public function
+ * @param    element    Any HTMLElement.
+ * @param    keyword    A unique key string.
+ * @param    value    Any value.
+ */
+orp.dom.setKeywordValueForElement = function(element, keyword, value) {
+  orp.lang.assert(element instanceof HTMLElement);
+  orp.lang.assertType(keyword, String);
+  
+  if (!element.id) {
+    element.id = dojo.dom.getUniqueId();
+  }
+  if (!orp.dom._ourHashTableOfAssociationsKeyedByElementId) {
+    orp.dom._ourHashTableOfAssociationsKeyedByElementId = {};
+  }
+  if (!orp.dom._ourHashTableOfAssociationsKeyedByElementId[element.id]) {
+    orp.dom._ourHashTableOfAssociationsKeyedByElementId[element.id] = {};
+  }
+  var keyValueTable = orp.dom._ourHashTableOfAssociationsKeyedByElementId[element.id];
+  keyValueTable[keyword] = value;
+};
+
+  
+/**
+ * Given an HTMLElement and a keyword, this method returns the value
+ * that was associated with the keyword for the element using the
+ * orp.dom.setKeywordValueForElement() function.
+ * 
+ * @scope    public function
+ * @param    element    Any HTMLElement.
+ * @param    keyword    A unique key string.
+ * @return   The value associated with the element and keyword.
+ */
+orp.dom.getKeywordValueForElement = function(element, keyword) {
+  orp.lang.assert(element instanceof HTMLElement);
+  orp.lang.assertType(keyword, String);
+  
+  if (!orp.dom._ourHashTableOfAssociationsKeyedByElementId || !element.id) {
+    return null;
+  }
+  var keyValueTable = orp.dom._ourHashTableOfAssociationsKeyedByElementId[element.id];
+  if (!keyValueTable) {
+    return null;
+  }
+  return keyValueTable[keyword];
+};
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/lang/Lang.js
===================================================================
--- trunk/source/lang/Lang.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/lang/Lang.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -39,6 +39,21 @@
 // Public Functions
 // -------------------------------------------------------------------
 
+/**
+ * Throws an exception (actually throws a "new Error()").
+ *
+ * Calling "orp.lang.throwError('foo')" is essentially identical
+ * to doing "throw new Error('foo')", except that the Error object
+ * thrown by orp.lang.throwError() will include a copy of the stack
+ * trace in the message body, where the lines of text in that copy 
+ * of the stack trace have been abridged so that the stack trace
+ * is more likely to be readable in an alert window that only shows
+ * 40 or 50 characters per line. 
+ *
+ * @scope    public function
+ * @param    message    Optional. A string describing the assertion.
+ * @throws    Always throws an Error.
+ */
 orp.lang.throwError = function(message) {
   var extendedMessage = "";
   var exception = new Error(message);  // create an exception, just to get a stack trace
@@ -76,6 +91,7 @@
  * @scope    public function
  * @param    booleanValue    A boolean value, which needs to be true for the assertion to succeed. 
  * @param    message    Optional. A string describing the assertion.
+ * @throws    Throws an Error if 'booleanValue' is false.
  */
 orp.lang.assert = function(booleanValue, message) {
   if (dojo.lang.isBoolean(booleanValue)) {
@@ -113,6 +129,7 @@
  * @scope    public function
  * @param    value    Any literal value or object instance. 
  * @param    type    A class of object, or a literal type.
+ * @throws    Throws an Error if 'value' is not of type 'type'.
  */
 orp.lang.assertType = function(value, type) {
   if (!orp.lang.assertType._errorMessage) {
@@ -162,6 +179,7 @@
  * @scope    public function
  * @param    value    Optional.  Any literal value, or any object instance, or the value 'undefined'. 
  * @param    type    A class of object, or a literal type.
+ * @throws    Throws an Error if there is a 'value' AND it is not of type 'type'.
  */
 orp.lang.assertTypeForOptionalValue = function(value, type) {
   if (!dojo.lang.isUndefined(value) && (value !== null)) {
@@ -169,6 +187,48 @@
   }
 };
 
+
+/**
+ * Given an object, and the name of a method on that object, this
+ * function returns an anonymous function that, when called, will
+ * call the given method of the given object.
+ * 
+ * For example, doing:
+ * <pre>
+ *   foo.bar(a, b, c);
+ * </pre>
+ * should be the same as doing:
+ * <pre>
+ *   var func = orp.lang.bind(foo, "bar", a, b, c);
+ *   func();
+ * </pre>
+ *
+ * For some background about what's going on here, see:
+ * http://www.deepwood.net/writing/method-references.html.utf8
+ *
+ * @scope    public function
+ * @param    object    An object. 
+ * @param    methodName    A string with the name of a method that 'object' implements.
+ * @param    moreParameters    Optional.  As many additional arguments as you like.
+ */
+orp.lang.bind = function(object, methodName, moreParameters) {
+  var suppliedArguments = arguments;
+  if (suppliedArguments.length > 2) {
+    var argumentArray = [];
+    for (var i = 2; i < suppliedArguments.length; ++i) {
+      argumentArray.push(suppliedArguments[i]);
+    }
+    return function() {
+      object[methodName].apply(object, argumentArray);
+    }
+  } else {
+    return function() {
+      object[methodName].apply(object);
+    }
+  }
+};
+
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/util/Util.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -421,30 +421,6 @@
 };
 
 
-/**
- * When passing an EventListener (e.g. onclick) a function, it is often useful to
- * 1) have the function be called by an instance of an object
- * 2) have additional arguments passed as parameters to the function
- * 3) some of these additional parameters in (2) are known only when the
- *    EventListener function is bound, not when the function is called
- * This utility function returns  a function that satisfies the above 3 reqs.
- * For more details see, http://www.deepwood.net/writing/method-references.html.utf8
- * However, empirically, arguments is not an array in Firefox and cannot be
- * concat'd with an array, hence the mod.
- */
-Function.prototype.orpBindAsEventListener = function(object) {
-  var method = this;
-  var preappliedArguments = arguments;
-  return function (event) {
-    var args = [event || window.event];
-    for (var i = 1; i < preappliedArguments.length; ++i) {
-      args.push(preappliedArguments[i]);
-    }
-    method.apply(object, args);
-  };
-};
-
-
 // -------------------------------------------------------------------
 // HTML document manipulation
 // -------------------------------------------------------------------

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/EntryView.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -69,7 +69,6 @@
  * @param    isMultiLine     a boolean indicating if text view is single line or multi-line
  */
 orp.view.EntryView = function(superview, htmlElement, item, attribute, entry, isMultiLine) {
-  // orp.util.assert((!entry) || entry instanceof orp.model.Entry);
   orp.lang.assert(item instanceof orp.model.Item);
   orp.lang.assert(attribute instanceof orp.model.Item); // PENDING need to check that attribute is an attribute
   var FIXME_OCT_7_2005_EXPERIMENT = true;
@@ -197,7 +196,6 @@
  *
  */
 orp.view.EntryView.prototype.setExpectedTypeEntries = function(expectedTypeEntries) {
-  // orp.util.assert(orp.util.isArray(expectedTypeEntries));
   orp.lang.assertType(expectedTypeEntries, Array);
   for (var key in expectedTypeEntries) {
     orp.lang.assert(expectedTypeEntries[key] instanceof orp.model.Entry);
@@ -210,7 +208,6 @@
  *
  */
 orp.view.EntryView.prototype.setSuggestions = function(listOfSuggestions) {
-  // if (listOfSuggestions) {orp.util.assert(orp.util.isArray(listOfSuggestions));}
   orp.lang.assertTypeForOptionalValue(listOfSuggestions, Array);
   this._suggestions = listOfSuggestions;
 };
@@ -256,17 +253,10 @@
   var className = (this._isProvisional ? orp.view.EntryView.cssClass.PROVISIONAL : '');
   this._textSpan = orp.view.View.appendNewElement(htmlElement, "span", className, null);
   this._textNode = orp.view.View.appendNewTextNode(this._textSpan, textString);
-  // if (this._isProvisional) {
-  //   this._textSpan.className = orp.view.EntryView.cssClass.PROVISIONAL;
-  // }
-  // else if (!this._alwaysUseEditField) {
-  //   this._setClassName();
-  // }
   if (!this._isProvisional && !this._alwaysUseEditField) {
     this._setClassName();
   }
   
-  // htmlElement.onclick = this.onClick.orpBindAsEventListener(this);
   dojo.event.connect(htmlElement, "onclick", this, "onClick");
   if (this._alwaysUseEditField) {
     this.startEditing(true);
@@ -287,7 +277,6 @@
     var connectionType  = this.getWorld().getItemFromUuid(orp.model.World.UUID.TYPE_CONNECTION);
     if (dataType == itemType || dataType == connectionType) {
       if (this._isLozenge()) {
-        // this.getHtmlElement().ondblclick = this.onDoubleClick.orpBindAsEventListener(this);
         var htmlElement = this.getHtmlElement();
         dojo.event.connect(htmlElement, "ondblclick", this, "onDoubleClick");
         if (this.isInEditMode() && !this._draggable) {

Modified: trunk/source/view/LoginView.js
===================================================================
--- trunk/source/view/LoginView.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/LoginView.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -146,11 +146,9 @@
     this.usernameInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:20, value:"Albert Einstein"});
     orp.view.View.appendNewTextNode(mySpan," ");
     this.passwordInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:10, type:"password", value:"randomdots"});
-    // this.passwordInput.onkeypress = this._createAccountPasswordKeyPress.orpBindAsEventListener(this);
     dojo.event.connect(this.passwordInput, "onkeypress", this, "_createAccountPasswordKeyPress");
     orp.view.View.appendNewTextNode(mySpan, " ");
     var newAccountButton = orp.view.View.appendNewElement(mySpan ,"input", null, {value:"Create New Account", type:"button"});
-    // newAccountButton.onclick = this._clickOnNewAcctButton.orpBindAsEventListener(this);
     dojo.event.connect(newAccountButton, "onclick", this, "_clickOnNewAcctButton");
     this.usernameInput.select();
   } else if (currentUser) { 
@@ -160,12 +158,10 @@
     
     orp.view.View.appendNewTextNode(mySpan, "Hello " + currentUser.getDisplayString() + ". ");
     var signOutLink = orp.view.View.appendNewElement(mySpan, "a", null, null, "Sign out");
-    // signOutLink.onclick = this._clickOnSignoutLink.orpBindAsEventListener(this);
     dojo.event.connect(signOutLink, "onclick", this, "_clickOnSignoutLink");
     orp.view.View.appendNewTextNode(mySpan, " ");
     var showToolsButton = orp.view.View.appendNewElement(mySpan, "input", null, {type:"button", value:
       (this.getRootView().isInShowToolsMode()) ? "Hide Tools" : "Show Tools"});
-    // showToolsButton.onclick = this._clickOnShowToolsButton.orpBindAsEventListener(this);
     dojo.event.connect(showToolsButton, "onclick", this, "_clickOnShowToolsButton");
   }
   else {
@@ -174,20 +170,16 @@
     //   _Create Account_  or sign in:  _username_  _password_  [Sign in]
     
     var createAccountLink = orp.view.View.appendNewElement(mySpan, "a", null, null, "Create Account");
-    // createAccountLink.onclick = this._clickOnCreateAccountLink.orpBindAsEventListener(this);
     dojo.event.connect(createAccountLink, "onclick", this, "_clickOnCreateAccountLink");
     orp.view.View.appendNewTextNode(mySpan, " or sign in: ");
     this.usernameInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:20,value:"Albert Einstein"});
     mySpan.appendChild(document.createTextNode(" "));
     this.passwordInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:10,type:"password",value:"randomdots"});
-    // this.passwordInput.onkeypress = this._signinPasswordKeyPress.orpBindAsEventListener(this);
-    // this.passwordInput.onfocus = this._signinPasswordFocus.orpBindAsEventListener(this);
     dojo.event.connect(this.passwordInput, "onkeypress", this, "_signinPasswordKeyPress");
     dojo.event.connect(this.passwordInput, "onfocus", this, "_signinPasswordFocus");
     this._myUsernameSuggestionBox = new orp.view.UserSuggestionBox(this.usernameInput, this.getWorld().getUsers(), this.passwordInput);
     mySpan.appendChild(document.createTextNode(" "));
     var signInButton = orp.view.View.appendNewElement(mySpan, "input", null, {value:"Sign in",type:"button"});
-    // signInButton.onclick = this._clickOnSignInButton.orpBindAsEventListener(this);
     dojo.event.connect(signInButton, "onclick", this, "_clickOnSignInButton");
   }
   
@@ -404,9 +396,6 @@
   this._userSuggestionBoxDivElement.style.display = "none";
   document.body.appendChild(this._userSuggestionBoxDivElement);
   
-  // this._inputField.onkeyup = this._keyPressOnInputField.orpBindAsEventListener(this);
-  // this._inputField.onfocus = this._focusOnInputField.orpBindAsEventListener(this);
-  // this._inputField.onblur = this._blurOnInputField.orpBindAsEventListener(this);
   dojo.event.connect(this._inputField, "onkeyup", this, "_keyPressOnInputField");
   dojo.event.connect(this._inputField, "onfocus", this, "_focusOnInputField");
   dojo.event.connect(this._inputField, "onblur", this, "_blurOnInputField");
@@ -466,7 +455,7 @@
 /**
  *
  */
-orp.view.UserSuggestionBox.prototype._clickOnSelection = function(eventObject, string) {
+orp.view.UserSuggestionBox.prototype._clickOnSelection = function(string) {
   this._inputField.value = string;
   this._nextField.select();
 };
@@ -507,7 +496,7 @@
       var row = table.insertRow(rowNumber);
       var cell = row.insertCell(columnNumber);
       cell.appendChild(textNode);
-      cell.onmousedown = this._clickOnSelection.orpBindAsEventListener(this, string);
+      dojo.event.connect(cell, "onmousedown", orp.lang.bind(this, "_clickOnSelection", string));
       rowNumber += 1;
     }
     this._userSuggestionBoxDivElement.appendChild(table);

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/MultiEntriesView.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -368,7 +368,6 @@
   }
   
   if (this.isInEditMode()) {
-    // htmlElement.onclick = this._handleOwnClick.orpBindAsEventListener(this);
     dojo.event.connect(htmlElement, "onclick", this, "_handleOwnClick");
     var listener = this;
     Droppables.add(htmlElement, {accept: [orp.view.EntryView.cssClass.CONNECTION_VALUE, orp.view.EntryView.CSS_ITEM_VALUE, orp.view.EntryView.cssClass.SELECTED],

Modified: trunk/source/view/NavbarView.js
===================================================================
--- trunk/source/view/NavbarView.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/NavbarView.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -236,11 +236,62 @@
   var newPageButton = orp.view.View.appendNewElement(divElement, "input", orp.view.RootView.cssClass.EDIT_TOOL);
   newPageButton.type = "button";
   newPageButton.value = "New Page";
-  // newPageButton.onclick = this._clickOnNewPageButton.orpBindAsEventListener(this);
   dojo.event.connect(newPageButton, "onclick", this, "_clickOnNewPageButton");
+
+  var FIXME_OCT_14_2005_EXPERIMENT = false;
+  if (FIXME_OCT_14_2005_EXPERIMENT) {
+    var stage = this;
+    
+    var kermitButton = orp.view.View.appendNewElement(divElement, "input");
+    kermitButton.type = "button";
+    kermitButton.value = "Kermit";
+    // dojo.event.connect(kermitButton, "onclick", function(evt){stage.addMuppet("Kermit was added");});
+    dojo.event.connect(kermitButton, "onclick", this, "plusMuppet");
+
+    var elmoButton = orp.view.View.appendNewElement(divElement, "input");
+    elmoButton.type = "button";
+    elmoButton.value = "Elmo";
+    // dojo.event.connect(elmoButton, "onclick", function(evt){stage.addMuppet("Elmo was added");});
+    dojo.event.connect(elmoButton, "onclick", this, "plusMuppet");
+
+    kermitButton.muppetName = "Kermit the Frog";
+    elmoButton.muppetName = "Elmo the Red";
+    window.kermitButton = kermitButton;
+    window.elmoButton = elmoButton;
+
+    var nobodyButton = orp.view.View.appendNewElement(divElement, "input");
+    nobodyButton.type = "button";
+    nobodyButton.value = "nobody";
+    nobodyButton.orp_name = "nobody :-(";
+    dojo.event.kwConnect({
+      srcObj:     nobodyButton, 
+      srcFunc:    "onclick", 
+      targetObj:  stage,
+      targetFunc: "addMuppetEvent" });
+  }
+
 };
 
+var FIXME_OCT_14_2005_EXPERIMENT = false;
+if (FIXME_OCT_14_2005_EXPERIMENT) {
+orp.view.NavbarView.prototype.plusMuppet = function(event) {
+  alert(event.target.muppetName);
+  delete event.target.muppetName;
+  dojo.event.disconnect(window.kermitButton, "onclick", this, "plusMuppet");
+};
 
+orp.view.NavbarView.prototype.addMuppet = function(muppetName) {
+  muppetName = muppetName || "nobody :-(";
+  alert(muppetName);
+};
+
+orp.view.NavbarView.prototype.addMuppetEvent = function(event, muppetName) {
+  
+  muppetName = muppetName || "nobody :-(";
+  alert(event.target.orp_name);
+};
+}
+
 // -------------------------------------------------------------------
 // Event handler methods
 // -------------------------------------------------------------------

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/PageView.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -272,7 +272,6 @@
     var editButton = orp.view.View.appendNewElement(this._editModeDiv, "input");
     editButton.type = "Button";
     editButton.value = "New Section";
-    // editButton.onclick = this._addNewSection.orpBindAsEventListener(this);
     dojo.event.connect(editButton, "onclick", this, "_addNewSection");
   }
 };

Modified: trunk/source/view/RootView.js
===================================================================
--- trunk/source/view/RootView.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/RootView.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -92,11 +92,8 @@
   
   this._currentlyInDisplayMethod = false;
   
-  // document.addEventListener("keypress", this._onKeyPress.orpBindAsEventListener(this),false);
   dojo.event.connect(document, "onkeypress", this, "_onKeyPress");
   
-  // window.document.body.innerHTML = "";
-  // var rootDiv = orp.view.View.appendNewElement(window.document.body, "div");
   var rootDiv = document.getElementById('OpenRecord');
   if (!rootDiv) {
     alert('Sorry, I could not find my <div id="OpenRecord"> element');

Modified: trunk/source/view/SuggestionBox.js
===================================================================
--- trunk/source/view/SuggestionBox.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/SuggestionBox.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -37,6 +37,7 @@
 dojo.provide("orp.view.SuggestionBox");
 dojo.require("orp.util.Util");
 dojo.require("dojo.event.*");
+dojo.require("orp.dom");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -195,7 +196,7 @@
 /**
  *
  */
-orp.view.SuggestionBox.prototype._clickOnSelection = function(eventObject, item) {
+orp.view.SuggestionBox.prototype._clickOnSelection = function(item) {
   this._selectedItem = item;
 };
 
@@ -254,12 +255,8 @@
       var row = table.insertRow(rowNumber);
       var cell = row.insertCell(columnNumber);
       row.className = (this._selectedItem == item) ? "selected":"";
-      cell.appendChild(textNode);
-      
-      // FIXME: need to figure out how to pass "item" as a parameter via dojo.event.connect()
-      cell.onmousedown = this._clickOnSelection.orpBindAsEventListener(this, item);
-      // dojo.event.connect(cell, "onmousedown", this, "_clickOnSelection");
-      
+      cell.appendChild(textNode);    
+      dojo.event.connect(cell, "onmousedown", orp.lang.bind(this, "_clickOnSelection", item));
       rowNumber += 1;
     }
     this._suggestionBoxDivElement.appendChild(table);

Modified: trunk/source/view/View.js
===================================================================
--- trunk/source/view/View.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/source/view/View.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -34,6 +34,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.view.View");
 dojo.require("orp.util.Util");
+dojo.require("orp.uuid.TimeBasedUuid");
 dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------

Modified: trunk/tests/LintTest.js
===================================================================
--- trunk/tests/LintTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/LintTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -71,6 +71,7 @@
 
 function testJsLintOnOpenRecordCode() {
   var listOfSourceCodeFiles = [
+    "dom.js",
     "OpenRecordLoaderStepThree.js",
     "TablePlugin.js",
     "OutlinePlugin.js",

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/TestSuite.html	2005-10-18 02:15:08 UTC (rev 364)
@@ -25,6 +25,7 @@
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../tests/SimpleTest.html");
         testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
+        testSuite.addTestPage("../../../tests/dom/domTest.html");
         testSuite.addTestPage("../../../tests/lang/LangTest.html");
         testSuite.addTestPage("../../../tests/util/TestSuite.html");
         testSuite.addTestPage("../../../tests/uuid/TestSuite.html");

Modified: trunk/tests/archive/LintTest.js
===================================================================
--- trunk/tests/archive/LintTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/archive/LintTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -40,7 +40,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.LintTool");
 }

Modified: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -33,7 +33,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
 }
 
 function tearDown() {

Added: trunk/tests/dom/domTest.html
===================================================================
--- trunk/tests/dom/domTest.html	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/dom/domTest.html	2005-10-18 02:15:08 UTC (rev 364)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for orp.dom</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="domTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for orp.dom</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/dom/domTest.js
===================================================================
--- trunk/tests/dom/domTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/dom/domTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -0,0 +1,79 @@
+/*****************************************************************************
+ domTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.dom");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testSimpleErrorCatching() {
+  divElementOne = window.document.createElement('div');
+  divElementTwo = window.document.createElement('div');
+  
+  document.body.appendChild(divElementOne);
+  document.body.appendChild(divElementTwo);
+  
+  orp.dom.setKeywordValueForElement(divElementOne, "foo", 34);
+  var fooValueOne = orp.dom.getKeywordValueForElement(divElementOne, "foo");
+  var fooValueTwo = orp.dom.getKeywordValueForElement(divElementTwo, "foo");
+ 
+  assertTrue('divElementOne has a "foo" value of 34', (fooValueOne === 34));
+  assertTrue('divElementTwo does not have a "foo" value', (fooValueTwo === null));
+
+  var barValueOne = {a: 1, b: 2};
+  var barValueTwo = "Kermit the Frog";
+  orp.dom.setKeywordValueForElement(divElementOne, "bar", barValueOne);
+  orp.dom.setKeywordValueForElement(divElementTwo, "bar", barValueTwo);
+  
+  var barOneToo = orp.dom.getKeywordValueForElement(divElementOne, "bar");
+  var barTwoToo = orp.dom.getKeywordValueForElement(divElementTwo, "bar");
+  
+  assertTrue('divElementOne has a "foo" value of 34', (barValueOne === barOneToo));
+  assertTrue('divElementTwo does not have a "foo" value', (barValueTwo === barTwoToo));
+
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/lang/LangTest.js
===================================================================
--- trunk/tests/lang/LangTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/lang/LangTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -34,7 +34,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.lang.Lang");
 }
@@ -181,7 +181,50 @@
   orp.lang.assert(false, "This is an example of an assert that fails.");
 }
 
+function testBind() {
+  function Box(boxName) {
+    this._boxName = boxName;
+  }
+  Box.prototype.setDimensions = function(x, y, z, etc) {
+    this._dimensions = [];
+    for (var i = 0; i < arguments.length; ++i) {
+      this._dimensions[i] = arguments[i];
+    }
+  };
+  Box.prototype.getVolume = function() {
+    var volume = 1;
+    for (var i in this._dimensions) {
+      volume = volume * this._dimensions[i];
+    }
+    return volume;
+  };
+  
+  var box = new Box();
+  
+  // make the box be a two-dimensional square
+  var square = orp.lang.bind(box, "setDimensions", 2, 3);
+  square();
+  assertTrue("Bind works with 2 arguments.", (box.getVolume() == (2 * 3)) );
+  
+  // make the box be a three-dimensional cube
+  var cube = orp.lang.bind(box, "setDimensions", 2, 3, 4);
+  cube();
+  assertTrue("Bind works with 3 arguments.", (box.getVolume() == (2 * 3 * 4)) );
+  
+  // make the box be a one-dimensional line
+  var line = orp.lang.bind(box, "setDimensions", 2);
+  line();
+  assertTrue("Bind works with 1 argument.", (box.getVolume() == (2)) );
+  
+  // make the box be a zero-dimensional point
+  var point = orp.lang.bind(box, "setDimensions");
+  point();
+  assertTrue("Bind works with 1 argument.", (box.getVolume() == (1)) );  
+}
 
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
 
 // -------------------------------------------------------------------
 // End of file

Modified: trunk/tests/model/LintTest.js
===================================================================
--- trunk/tests/model/LintTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/model/LintTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -40,7 +40,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.LintTool");
 }

Modified: trunk/tests/model/ModelTest.js
===================================================================
--- trunk/tests/model/ModelTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/model/ModelTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -46,7 +46,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.model.World");
   dojo.require("orp.archive.StubArchive");

Modified: trunk/tests/model/RepositoryWritingTest.js
===================================================================
--- trunk/tests/model/RepositoryWritingTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/model/RepositoryWritingTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -42,7 +42,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.archive.DeltaArchive");
   dojo.require("orp.model.World");

Modified: trunk/tests/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/tests/model/TestReorderingForSpecialCases.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/model/TestReorderingForSpecialCases.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -48,7 +48,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");

Modified: trunk/tests/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -52,7 +52,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.archive.StubArchive");
   dojo.require("orp.model.World");

Modified: trunk/tests/storage/LintTest.js
===================================================================
--- trunk/tests/storage/LintTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/storage/LintTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -40,7 +40,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.LintTool");
 }

Modified: trunk/tests/tests_of_external_code/TimingTest.js
===================================================================
--- trunk/tests/tests_of_external_code/TimingTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/tests_of_external_code/TimingTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -78,7 +78,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.Util");
 }

Modified: trunk/tests/util/CsvParserTest.js
===================================================================
--- trunk/tests/util/CsvParserTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/util/CsvParserTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -36,7 +36,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("dojo.lang.*");
   dojo.require("orp.util.CsvParser");

Modified: trunk/tests/util/DateValueTest.js
===================================================================
--- trunk/tests/util/DateValueTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/util/DateValueTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -36,7 +36,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.Util");
   dojo.require("orp.util.DateValue");

Modified: trunk/tests/util/LintTest.js
===================================================================
--- trunk/tests/util/LintTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/util/LintTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -40,7 +40,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.LintTool");
 }

Modified: trunk/tests/util/UtilTest.js
===================================================================
--- trunk/tests/util/UtilTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/util/UtilTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -38,7 +38,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.Util");
   dojo.require("dojo.lang.*");

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.js
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -39,7 +39,7 @@
 
 function setUp() {
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.require("orp.util.XmlConverter");
   dojo.require("orp.util.Util");
   dojo.require("orp.archive.StubArchive");

Modified: trunk/tests/util/XmlConverterTest.js
===================================================================
--- trunk/tests/util/XmlConverterTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/util/XmlConverterTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -37,7 +37,7 @@
 
 function setUp() {
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.require("orp.util.XmlConverter");
   dojo.require("orp.util.Util");
   dojo.require("orp.archive.StubArchive");

Modified: trunk/tests/uuid/LintTest.js
===================================================================
--- trunk/tests/uuid/LintTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/uuid/LintTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -40,7 +40,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.LintTool");
 }

Modified: trunk/tests/uuid/UuidTest.js
===================================================================
--- trunk/tests/uuid/UuidTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/uuid/UuidTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -40,7 +40,7 @@
 
 function setUp() {
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.require("orp.uuid.factory");
   dojo.require("orp.uuid.Uuid");
   dojo.require("orp.uuid.RandomUuid");

Modified: trunk/tests/view/LintTest.js
===================================================================
--- trunk/tests/view/LintTest.js	2005-10-17 21:30:58 UTC (rev 363)
+++ trunk/tests/view/LintTest.js	2005-10-18 02:15:08 UTC (rev 364)
@@ -40,7 +40,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.LintTool");
 }



From skinner at berlios.de  Tue Oct 18 05:28:04 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 18 Oct 2005 05:28:04 +0200
Subject: [openrecord-svn] r365 - in trunk/source: . view
Message-ID: <200510180328.j9I3S4TT019024@sheep.berlios.de>

Author: skinner
Date: 2005-10-18 05:27:59 +0200 (Tue, 18 Oct 2005)
New Revision: 365

Modified:
   trunk/source/TablePlugin.js
   trunk/source/view/EntryView.js
   trunk/source/view/ItemView.js
   trunk/source/view/MultiEntriesView.js
Log:
Updated ItemView from DOM level 0 to DOM level 2.  In places where we add properties to DOM nodes, change our prefix from .or_ to .orp_

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-10-18 02:15:08 UTC (rev 364)
+++ trunk/source/TablePlugin.js	2005-10-18 03:27:59 UTC (rev 365)
@@ -332,7 +332,7 @@
   var oldProvisionalRow = this._table.rows[this._listOfItems.length];
   for (var i=0; i < oldProvisionalRow.cells.length; ++i) {
     var aCell = oldProvisionalRow.cells[i];
-    aCell.or_entriesView.noLongerProvisional();
+    aCell.orp_entriesView.noLongerProvisional();
   }
 
   // create new provisional item now that old one has become real
@@ -365,7 +365,7 @@
   // object in the script.aculo.us dragdrop.js library.
   // We set "revert" to false to prevent the UI animation where the dragged 
   // column header goes "flying" home again
-  var draggable = elementThatWasDragged.or_draggable;
+  var draggable = elementThatWasDragged.orp_draggable;
   draggable.options.revert = false;
 
   // Now we need to save the new column order to the repository.
@@ -444,7 +444,7 @@
     if (this.isInEditMode()) {
       var listener = this;
       var draggable = new Draggable(headerCellContentSpan, {revert:true});
-      headerCellContentSpan.or_draggable = draggable;
+      headerCellContentSpan.orp_draggable = draggable;
       Droppables.add(headerCell, {
         accept: "headerCellContentSpan",
         hoverclass: 'drophover',
@@ -528,7 +528,7 @@
 /**
  * Inserts a table cell into table's row & col, with data from a given item and
  * attribute. Each table cell is displayed with a EntryView object.  The HTML 
- * table cell links to the EntryView object with the attribute "or_entryView"
+ * table cell links to the EntryView object with the attribute "orp_entryView"
  *
  * @scope    private instance method
  * @return   An HTML image element
@@ -545,7 +545,7 @@
   
   var aCell = row.insertCell(col);
   var multiEntriesView = new orp.view.MultiEntriesView(this, aCell, item, attribute);
-  aCell.or_entriesView = multiEntriesView;
+  aCell.orp_entriesView = multiEntriesView;
   multiEntriesView.refresh();
   if (this.isInEditMode()) {
     var listener = this;
@@ -845,7 +845,7 @@
       nextCell = nextRow.cells[cellElement.cellIndex];
     }
     
-    var nextMultiEntryView = nextCell.or_entriesView;
+    var nextMultiEntryView = nextCell.orp_entriesView;
     nextMultiEntryView.select(move != MOVE_LEFT);
   }
   return move;

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-10-18 02:15:08 UTC (rev 364)
+++ trunk/source/view/EntryView.js	2005-10-18 03:27:59 UTC (rev 365)
@@ -283,11 +283,11 @@
           if (orp.view.EntryView._PENDING_temporaryHackToDecreaseLayoutTime) {
             // if (this.getRootView().isInShowToolsMode()) {
             if (orp.view.EntryView._PENDING_enableDragging) {
-              this._textSpan.or_entryView = this; 
+              this._textSpan.orp_entryView = this; 
               this._draggable = new Draggable(this._textSpan, {revert:true});
             }
           } else {
-            this._textSpan.or_entryView = this; 
+            this._textSpan.orp_entryView = this; 
             this._draggable = new Draggable(this._textSpan, {revert:true});
           }
         }

Modified: trunk/source/view/ItemView.js
===================================================================
--- trunk/source/view/ItemView.js	2005-10-18 02:15:08 UTC (rev 364)
+++ trunk/source/view/ItemView.js	2005-10-18 03:27:59 UTC (rev 365)
@@ -79,12 +79,6 @@
 
 
 // -------------------------------------------------------------------
-// Public constants
-// -------------------------------------------------------------------
-orp.view.ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX = "detail_plugin_div_for_item_";
-
-
-// -------------------------------------------------------------------
 // Public methods
 // -------------------------------------------------------------------
 
@@ -108,23 +102,14 @@
  */
 orp.view.ItemView.prototype.refresh = function() {
   orp.lang.assert(this._item instanceof orp.model.Item);
-  
-  // PENDING: this needs to be changed from DOM level 0 to DOM level 2.
-  var listOfStrings = [];
+  orp.lang.assert(this.getHtmlElement() instanceof HTMLElement);
 
-  // add an <h1> heading with the name of the page
-  listOfStrings.push("<h1 id=\"" + orp.view.RootView.URL_ITEM_PREFIX + this._item.getUuidString() + "\">" + this._item.getDisplayName() + "</h1>");
-
-  // add a <div> element for the detail plugin
-  var detailDivId = orp.view.ItemView.ELEMENT_ID_DETAIL_DIV_PREFIX + this._item.getUuidString();
-  listOfStrings.push("<div id=\"" + detailDivId + "\"></div>");
-
-  // write out all the new content 
-  var finalString = listOfStrings.join("");
-  this.getHtmlElement().innerHTML = finalString;
-
-  // let the detailPlugin add its own content
-  var detailPluginElement = document.getElementById(detailDivId);
+  
+  var itemDivElement = this.getHtmlElement();
+  orp.view.View.removeChildrenOfElement(itemDivElement);
+  var headerElement = orp.view.View.appendNewElement(itemDivElement, "h1", null, null, this._item.getDisplayName());
+  var detailPluginElement = orp.view.View.appendNewElement(itemDivElement, "div");
+  
   this._pluginView = new orp.DetailPlugin(this, detailPluginElement, [this._item]);
   this._pluginView.refresh();
 };

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-10-18 02:15:08 UTC (rev 364)
+++ trunk/source/view/MultiEntriesView.js	2005-10-18 03:27:59 UTC (rev 365)
@@ -233,7 +233,7 @@
  *
  */
 orp.view.MultiEntriesView.prototype._handleDrop = function(element) {
-  var draggedEntryView = element.or_entryView;
+  var draggedEntryView = element.orp_entryView;
   if (!draggedEntryView) {orp.lang.assert(false);}
   var droppedEntry = draggedEntryView._entry;
   if (!droppedEntry) {orp.lang.assert(false);}



From skinner at berlios.de  Thu Oct 20 20:52:21 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 20 Oct 2005 20:52:21 +0200
Subject: [openrecord-svn] r366 - trunk/documentation
Message-ID: <200510201852.j9KIqLAZ002076@sheep.berlios.de>

Author: skinner
Date: 2005-10-20 20:52:21 +0200 (Thu, 20 Oct 2005)
New Revision: 366

Modified:
   trunk/documentation/release_planning.txt
Log:
Updated to-do list.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-10-18 03:27:59 UTC (rev 365)
+++ trunk/documentation/release_planning.txt	2005-10-20 18:52:21 UTC (rev 366)
@@ -403,7 +403,7 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
 brian  |          | 1    IED|  1. get djConfig.debugAtAllCosts to work
-brian  |          | done (0.25+) |  2. replace orpBindAsEventListener() with dojo.event.connect()
+brian  |          | 0.75 IED|  2. replace orpBindAsEventListener() with dojo.event.connect()
 brian  |          | 0.1  IED|  3. move UUID files from source/util to source/uuid
 brian  | 0.5  IED | (0.5+)  |  4. Make Item.js use namedParameter based API
 brian  |          | 0.5  IED|  5. split half the code in source/model off into source/_____



From mignon at berlios.de  Tue Oct 25 05:17:20 2005
From: mignon at berlios.de (Mignon Belongie at BerliOS)
Date: Tue, 25 Oct 2005 05:17:20 +0200
Subject: [openrecord-svn] r367 - in trunk: source/archive source/storage tests tests/model tests/storage tests/storage/directory_1 tests/storage/directory_1/subdirectory_1
Message-ID: <200510250317.j9P3HKHU000881@sheep.berlios.de>

Author: mignon
Date: 2005-10-25 05:17:18 +0200 (Tue, 25 Oct 2005)
New Revision: 367

Added:
   trunk/source/storage/FileSystem.js
   trunk/source/storage/get_list_of_files_in_dir.php
   trunk/tests/storage/DirectoryReadingTest.html
   trunk/tests/storage/DirectoryReadingTest.js
   trunk/tests/storage/StorageTest.html
   trunk/tests/storage/StorageTest.js
   trunk/tests/storage/TestSuite.html
   trunk/tests/storage/directory_1/
   trunk/tests/storage/directory_1/subdirectory_1/
   trunk/tests/storage/directory_1/subdirectory_1/javascript_file_1.js
   trunk/tests/storage/directory_1/subdirectory_1/javascript_file_2.js
   trunk/tests/storage/directory_1/subdirectory_1/suffixless_file_1
   trunk/tests/storage/directory_1/subdirectory_1/text_file_1.txt
   trunk/tests/storage/directory_1/subdirectory_1/text_file_2.txt
   trunk/tests/storage/directory_1/subdirectory_1/text_file_3.txt
Modified:
   trunk/source/archive/DeltaArchive.js
   trunk/source/storage/FakeStorage.js
   trunk/source/storage/FileStorage.js
   trunk/source/storage/HttpStorage.js
   trunk/source/storage/Storage.js
   trunk/tests/LintTest.js
   trunk/tests/TestSuite.html
   trunk/tests/model/RepositoryWritingTest.js
   trunk/tests/storage/LintTest.js
Log:
Added FileSystem.js and get_list_of_files_in_dir.php for getting directory listings, and DirectoryReadingTest to test them.  Moved the storage-only parts of RepositoryWritingTest to new test StorageTest.  Removed FileStorage's dependency on DeltaArchive.  Added orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK.


Modified: trunk/source/archive/DeltaArchive.js
===================================================================
--- trunk/source/archive/DeltaArchive.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/source/archive/DeltaArchive.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -153,10 +153,14 @@
   }
   if (window.location) {
     if (window.location.protocol == "http:") {
-      this._saverObject = new orp.storage.HttpStorage(this._repositoryName, this._pathToTrunkDirectory);
+      this._saverObject = new orp.storage.HttpStorage(this._repositoryName,
+                                                      orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
+                                                      this._pathToTrunkDirectory);
     }
     if (window.location.protocol == "file:") {
-      this._saverObject = new orp.storage.FileStorage(this._repositoryName, this._pathToTrunkDirectory);
+      this._saverObject = new orp.storage.FileStorage(this._repositoryName,
+                                                      orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
+                                                      this._pathToTrunkDirectory);
     }
   }
   if (!this._saverObject) {
@@ -190,10 +194,14 @@
   if (!this._saverObject) {
     if (window.location) {
       if (window.location.protocol == "http:") {
-        this._saverObject = new orp.storage.HttpStorage(this._repositoryName, this._pathToTrunkDirectory);
+        this._saverObject = new orp.storage.HttpStorage(this._repositoryName,
+                                                        orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
+                                                        this._pathToTrunkDirectory);
       }
       if (window.location.protocol == "file:") {
-        this._saverObject = new orp.storage.FileStorage(this._repositoryName, this._pathToTrunkDirectory);
+        this._saverObject = new orp.storage.FileStorage(this._repositoryName,
+                                                        orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY,
+                                                        this._pathToTrunkDirectory);
       }
     }
   }

Modified: trunk/source/storage/FakeStorage.js
===================================================================
--- trunk/source/storage/FakeStorage.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/source/storage/FakeStorage.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -47,8 +47,8 @@
  * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
  * @scope    public instance constructor
  */
-orp.storage.FakeStorage = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
-  orp.storage.Storage.call(this, repositoryName, pathToTrunkDirectoryFromWindowLocation);
+orp.storage.FakeStorage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation) {
+  orp.storage.Storage.call(this, repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation);
   
   this._fakeFileContents = "";
 };

Modified: trunk/source/storage/FileStorage.js
===================================================================
--- trunk/source/storage/FileStorage.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/source/storage/FileStorage.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -56,7 +56,6 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.storage.FileStorage");
 dojo.require("orp.storage.Storage");
-dojo.require("orp.archive.DeltaArchive");
 dojo.require("orp.lang.Lang");
 
 
@@ -70,8 +69,8 @@
  * @param    pathToTrunkDirectory           // Not needed if window.location.pathname is in the trunk directory.
  * @scope    public instance constructor
  */
-orp.storage.FileStorage = function(repositoryName, pathToTrunkDirectory) {
-  orp.storage.Storage.call(this, repositoryName, pathToTrunkDirectory);
+orp.storage.FileStorage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectory) {
+  orp.storage.Storage.call(this, repositoryName, repositoryDirectoryName, pathToTrunkDirectory);
   
   // Step 1: Build the fileUrl
   // 
@@ -91,7 +90,7 @@
   if (pathToTrunkDirectory && pathToTrunkDirectory !== "") {
     listOfAdditions.push(pathToTrunkDirectory);
   }
-  listOfAdditions.push(orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY);
+  listOfAdditions.push(this._repositoryDirectoryName);
   listOfAdditions.push(this.getRepositoryName() + ".json");
   this._fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
 };

Added: trunk/source/storage/FileSystem.js
===================================================================
--- trunk/source/storage/FileSystem.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/source/storage/FileSystem.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,131 @@
+/*****************************************************************************
+ FileSystem.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+dojo.provide("orp.storage.FileSystem");
+dojo.require("orp.storage.Storage");
+
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+/*global window, document  */
+// -------------------------------------------------------------------
+
+/**
+ * @scope    public function
+ * @param    dirNameRelativeToWindowLocation
+ * @param    suffix                                   // if null or undefined, all files will be listed
+ * @return   an array of the files in the directory
+ * @throws   Throws an Error if directory doesn't exist, isn't a directory, or can't be read.
+ */
+orp.storage.getDirList = function(dirNameRelativeToWindowLocation, suffix) {
+  var dirList = [];
+  var thisUrl = window.location.pathname; // e.g .../someDirectory/currentWindow.html
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  var thisDirectory = arrayOfPathComponents.join('/'); // e.g .../someDirectory
+  if (window.location.protocol == "http:") {
+    var response = this._getDirListFromPhp(thisDirectory, dirNameRelativeToWindowLocation, suffix);
+    if (response[0] != '[') { // i.e. get_list_of_files_in_dir.php returned a message instead of an array
+      throw new Error(response);
+    }
+    eval("dirList = " + response);
+  }
+  else {
+    if (window.Components) {
+      dirList = this._getDirListFromMozillaComponent(thisDirectory, dirNameRelativeToWindowLocation, suffix);
+    }
+    else {
+      throw new Error("window.Components == null");
+    }
+  }
+  return dirList;
+};
+
+// FIXME: This hack should be replaced by something better, perhaps using dojo.hostenv.getBaseScriptUri().
+orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION = null;
+orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY = null;
+
+orp.storage._getDirListFromPhp = function(thisDirectory, dirNameRelativeToWindowLocation, suffix) {
+  var newXMLHttpRequestObject = new XMLHttpRequest();
+  var pathToTrunkFromPhpFile = "../..";
+  
+  var dirNameRelativeToPhpFile = pathToTrunkFromPhpFile + '/';
+  if (orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY) {
+    dirNameRelativeToPhpFile += orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY + '/';
+  }
+  dirNameRelativeToPhpFile += dirNameRelativeToWindowLocation;
+  
+  var pathToPhpDirectoryFromWindowLocation = "";
+  if (orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION) {
+    pathToPhpDirectoryFromWindowLocation += orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION + '/';
+  }
+  pathToPhpDirectoryFromWindowLocation += orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK + '/';
+
+  var pathToPhpFileFromWindowLocation = pathToPhpDirectoryFromWindowLocation + "get_list_of_files_in_dir.php";
+  var url = thisDirectory + '/' + pathToPhpFileFromWindowLocation + 
+            "?dir=" + dirNameRelativeToPhpFile;
+  if (suffix) {
+    url += "&suffix=" + suffix;
+  }
+  newXMLHttpRequestObject.open("GET", url, false);
+  newXMLHttpRequestObject.send(null);
+  return newXMLHttpRequestObject.responseText;
+};
+
+orp.storage._getDirListFromMozillaComponent = function(thisDirectory, dirNameRelativeToWindowLocation, suffix) {
+  var dirList = [];
+  netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
+  var file = Components.classes["@mozilla.org/file/local;1"].createInstance(Components.interfaces.nsILocalFile);
+  var dirPath = thisDirectory + "/" + dirNameRelativeToWindowLocation;
+  file.initWithPath(dirPath);
+  if (!file.exists()) {
+    throw new Error(dirPath + " not found.");
+  }
+  if (!file.isDirectory()) {
+    throw new Error(dirPath + " is not a directory.");
+  }
+  // file is the given directory (nsIFile)
+  var entries = file.directoryEntries;
+  while(entries.hasMoreElements()) {
+    var entry = entries.getNext();
+    entry.QueryInterface(Components.interfaces.nsIFile);
+    if (suffix) {
+      var parts = entry.leafName.split('.');
+      if (parts.length != 2 || parts[1] != suffix) {
+        continue;
+      }
+    }
+    dirList.push(entry.leafName); // could be entry.path instead, if needed...
+  }
+  return dirList;
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/storage/HttpStorage.js
===================================================================
--- trunk/source/storage/HttpStorage.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/source/storage/HttpStorage.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -47,8 +47,8 @@
  * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
  * @scope    public instance constructor
  */
-orp.storage.HttpStorage = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
-  orp.storage.Storage.call(this, repositoryName, pathToTrunkDirectoryFromWindowLocation);
+orp.storage.HttpStorage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation) {
+  orp.storage.Storage.call(this, repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation);
 
   var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
   var arrayOfPathComponents = thisUrl.split('/');
@@ -75,7 +75,9 @@
  */
 orp.storage.HttpStorage.prototype.appendText = function(textToAppend) {
   var url = this._completePathToTrunkDirectory;
-  url += "/source/storage/append_to_repository_file.php?file=" + this.getRepositoryName();
+  url += '/' + orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK;
+  // FIXME: Should also pass in this._repositoryDirectoryName, rather than having "repositories" hardcoded in append_to_repository_file.php.
+  url += "/append_to_repository_file.php?file=" + this.getRepositoryName();
   
   // PENDING: 
   // It might be more efficient to re-use the XMLHttpRequestObject,
@@ -98,7 +100,9 @@
  */
 orp.storage.HttpStorage.prototype.writeText = function(textToWrite, overwriteIfExists) {
   var url = this._completePathToTrunkDirectory;
-  url += "/source/storage/write_to_repository_file.php?file=" + this.getRepositoryName();
+  url += '/' + orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK;
+  // FIXME: Should also pass in this._repositoryDirectoryName, rather than having "repositories" hardcoded in write_to_repository_file.php.
+  url += "/write_to_repository_file.php?file=" + this.getRepositoryName();
   if (overwriteIfExists) {
     url += "&overwrite=T";
   }

Modified: trunk/source/storage/Storage.js
===================================================================
--- trunk/source/storage/Storage.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/source/storage/Storage.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -46,11 +46,16 @@
  * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
  * @scope    public instance constructor
  */
-orp.storage.Storage = function(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
+orp.storage.Storage = function(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromWindowLocation) {
   this._repositoryName = repositoryName;
+  this._repositoryDirectoryName = repositoryDirectoryName;
   this._pathToTrunkDirectory = pathToTrunkDirectoryFromWindowLocation;
 };
 
+// -------------------------------------------------------------------
+// Public constants
+// -------------------------------------------------------------------
+orp.storage.PATH_TO_PHP_FILES_FROM_TRUNK = "source/storage";
 
 // -------------------------------------------------------------------
 // Public methods

Added: trunk/source/storage/get_list_of_files_in_dir.php
===================================================================
--- trunk/source/storage/get_list_of_files_in_dir.php	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/source/storage/get_list_of_files_in_dir.php	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,25 @@
+<?php
+$url_of_this_php_script = $_SERVER['REQUEST_URI'];
+$dir = $_GET['dir'];
+$suffix_specified = array_key_exists('suffix', $_GET);
+if ($suffix_specified) {
+  $suffix = $_GET['suffix'];
+}
+if (!file_exists($dir)) {
+  exit("$dir not found."); 
+}
+;
+if (!($dh = opendir($dir))) {
+  exit("Could not open $dir."); 
+}
+while (false !== ($filename = readdir($dh))) {
+  if ($filename == "." || $filename == "..") {
+    continue;
+  }
+  $array_of_file_name_parts = explode(".", $filename);
+  if (!$suffix_specified || $array_of_file_name_parts[1] == $suffix) {
+    $array_js[] = "\"" . $filename . "\"";
+  }
+}
+echo "[" . implode(',', $array_js) . "]";
+?>

Modified: trunk/tests/LintTest.js
===================================================================
--- trunk/tests/LintTest.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/LintTest.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -34,7 +34,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
-  dojo.hostenv.setModulePrefix("dojo", "../../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("dojo", "../../../../dojo/dojo-rev1759/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../../source");
   dojo.require("orp.util.LintTool");
 }

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/TestSuite.html	2005-10-25 03:17:18 UTC (rev 367)
@@ -31,7 +31,7 @@
         testSuite.addTestPage("../../../tests/uuid/TestSuite.html");
         testSuite.addTestPage("../../../tests/model/TestSuite.html");
         testSuite.addTestPage("../../../tests/archive/LintTest.html");
-        testSuite.addTestPage("../../../tests/storage/LintTest.html");
+        testSuite.addTestPage("../../../tests/storage/TestSuite.html");
         testSuite.addTestPage("../../../tests/view/LintTest.html");
         testSuite.addTestPage("../../../tests/LintTest.html");
         return testSuite;

Modified: trunk/tests/model/RepositoryWritingTest.js
===================================================================
--- trunk/tests/model/RepositoryWritingTest.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/model/RepositoryWritingTest.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -30,7 +30,6 @@
 var pathToTrunkDirectoryFromThisDirectory   = "../..";
 var fileName = "FakeRepository";
 var fileUrl;
-var saver;
 var expectedRepositoryHeader = '{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", \n';
 expectedRepositoryHeader +=    '  "records": [\n';
 expectedRepositoryHeader +=    '  // =======================================================================\n';
@@ -50,10 +49,6 @@
   utilAssertReportedError = false;
   orp.util.setErrorReportCallback(errorReporter)
 
-  var isHttp = window.location.protocol == "http:";
-  saver = isHttp? new orp.storage.HttpStorage(fileName, pathToTrunkDirectoryFromThisDirectory) 
-                : new orp.storage.FileStorage(fileName, pathToTrunkDirectoryFromThisDirectory);
-
   // Examples of what window.location.pathname should look like:
   // for http: protocol: /openrecord/trunk/source/model/TestRepositoryWriting.html
   // for file: protocol on a Mac: /Libraries/.../openrecord/trunk/source/model/TestRepositoryWriting.html
@@ -65,7 +60,9 @@
 
   // fileUrl must specify a file /repositories/*.json relative to the trunk directory, because
   // that's where FileSaver and HttpSaver will write
-  fileUrl = thisDirectory + '/' + pathToTrunkDirectoryFromThisDirectory + "/repositories/" + fileName + ".json";
+  fileUrl = thisDirectory + '/' + pathToTrunkDirectoryFromThisDirectory
+                          + '/' + orp.archive.DeltaArchive.PATH_TO_REPOSITORY_DIRECTORY
+                          + '/' + fileName + ".json";
 }
 
 function tearDown() {
@@ -77,37 +74,6 @@
 // Test functions
 // -------------------------------------------------------------------
 
-function testCreateNewFile() {
-  var now = new Date();
-  var timestamp = now.toString() + " " + now.valueOf();
-  var overwriteIfExists = true;
-  saver.writeText(timestamp, overwriteIfExists);
-  assertTrue("Contents should be timestamp.", fileHasExpectedContents(timestamp));
-}
-
-function testOverwriteFile() {
-  var overwriteIfExists = true;
-  saver.writeText("123", overwriteIfExists);
-  assertTrue("Contents should be '123'.", fileHasExpectedContents('123'));
-  var now = new Date();
-  var timestamp = now.toString() + " " + now.valueOf();
-  saver.writeText(timestamp, overwriteIfExists);
-  assertTrue("Contents should be timestamp.", fileHasExpectedContents(timestamp));
-}
-
-function testAppendToFile() {
-  var now = new Date();
-  var timestamp1 = now.toString() + " " + now.valueOf();
-  var overwriteIfExists = true;
-  saver.writeText(timestamp1, overwriteIfExists);
-  assertTrue("Contents should be timestamp1.", fileHasExpectedContents(timestamp1));
-  now = new Date();
-  var timestamp2 = now.toString() + " " + now.valueOf();
-  saver.appendText("\n" + timestamp2);
-  var expectedContents = timestamp1 + "\n" + timestamp2;
-  assertTrue("Contents should be timestamp1 & timestamp2.", fileHasExpectedContents(expectedContents));
-}
-
 function testCreateNewRepository() {
   var archive = new orp.archive.DeltaArchive(fileName, pathToTrunkDirectoryFromThisDirectory);
   var overwriteIfExists = true;

Added: trunk/tests/storage/DirectoryReadingTest.html
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.html	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/DirectoryReadingTest.html	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Test reading directories</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="DirectoryReadingTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Test reading directories</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>

Added: trunk/tests/storage/DirectoryReadingTest.js
===================================================================
--- trunk/tests/storage/DirectoryReadingTest.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/DirectoryReadingTest.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,84 @@
+/*****************************************************************************
+ DirectoryReadingTest.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie
+
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.storage.FileSystem");
+  dojo.require("orp.util.Util");
+  orp.storage.PATH_TO_TRUNK_DIRECTORY_FROM_WINDOW_LOCATION = "../..";
+  orp.storage.PATH_TO_WINDOW_LOCATION_FROM_TRUNK_DIRECTORY = "tests/storage";
+}
+
+function tearDown() {
+}
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testGetDirListWithSuffix() {
+  var dirList = orp.storage.getDirList("directory_1/subdirectory_1", "js");
+  assertTrue("List should include 'javascript_file_1.js'.", orp.util.isObjectInSet("javascript_file_1.js", dirList));
+  assertTrue("List should include 'javascript_file_2.js'.", orp.util.isObjectInSet("javascript_file_2.js", dirList));
+  assertTrue("List should include exactly two files.", dirList.length == 2);
+}
+
+function testGetDirListWithoutSuffix() {
+  var dirList = orp.storage.getDirList("directory_1/subdirectory_1");
+  assertTrue("List should include 'suffixless_file_1'.", orp.util.isObjectInSet("suffixless_file_1", dirList));
+  assertTrue("List should include 'javascript_file_2.js'.", orp.util.isObjectInSet("javascript_file_2.js", dirList));
+  assertTrue("List should include 'text_file_1.txt'.", orp.util.isObjectInSet("text_file_1.txt", dirList));
+  assertTrue("List should include exactly six files.", dirList.length == 6);
+}
+
+function testGetDirListForMissingDir() {
+  var exceptionCaught = false;
+  try {
+    var dirList = orp.storage.getDirList("nonexistent");
+  }
+  catch (exception) {
+    exceptionCaught = true;
+  }
+  assertTrue("Exception should have been caught.", exceptionCaught);    
+}
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/storage/LintTest.js
===================================================================
--- trunk/tests/storage/LintTest.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/LintTest.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -58,7 +58,8 @@
     "Storage.js",
     "FakeStorage.js",
     "FileStorage.js",
-    "HttpStorage.js"];
+    "HttpStorage.js",
+    "FileSystem.js"];
   var prefix = "../../../source/storage/";
   var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
   var message = "Lint check \n" + errorReport;

Added: trunk/tests/storage/StorageTest.html
===================================================================
--- trunk/tests/storage/StorageTest.html	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/StorageTest.html	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Test writing to repositories</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-rev1759/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="StorageTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Test writing to repositories.</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/storage/StorageTest.js
===================================================================
--- trunk/tests/storage/StorageTest.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/StorageTest.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,151 @@
+/*****************************************************************************
+ StorageTest.js
+ 
+******************************************************************************
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+var utilAssertReportedError;
+var pathToTrunkDirectoryFromThisDirectory   = "../..";
+var repositoryName = "FakeRepository";
+var repositoryDirectoryName = "repositories";
+var fileUrl;
+var saver;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-rev1759/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.Util");
+  dojo.require("orp.storage.FileStorage");
+  dojo.require("orp.storage.HttpStorage");
+
+  utilAssertReportedError = false;
+  orp.util.setErrorReportCallback(errorReporter)
+
+  var isHttp = window.location.protocol == "http:";
+  saver = isHttp? new orp.storage.HttpStorage(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromThisDirectory) 
+                : new orp.storage.FileStorage(repositoryName, repositoryDirectoryName, pathToTrunkDirectoryFromThisDirectory);
+
+  // Examples of what window.location.pathname should look like:
+  // for http: protocol: /openrecord/trunk/source/model/TestRepositoryWriting.html
+  // for file: protocol on a Mac: /Libraries/.../openrecord/trunk/source/model/TestRepositoryWriting.html
+  // for file: protocol on a PC:  /C:/Documents and Settings/.../source/model/TestRepositoryWriting.html
+  var thisUrl = window.location.pathname;
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
+
+  // fileUrl must specify a file /repositories/*.json relative to the trunk directory, because
+  // that's where FileSaver and HttpSaver will write
+  fileUrl = thisDirectory + '/' + pathToTrunkDirectoryFromThisDirectory
+                          + '/' + repositoryDirectoryName
+                          + '/' + repositoryName + ".json";
+}
+
+function tearDown() {
+  assertFalse(utilAssertReportedError);
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testCreateNewFile() {
+  var now = new Date();
+  var timestamp = now.toString() + " " + now.valueOf();
+  var overwriteIfExists = true;
+  saver.writeText(timestamp, overwriteIfExists);
+  assertTrue("Contents should be timestamp.", fileHasExpectedContents(timestamp));
+}
+
+function testOverwriteFile() {
+  var overwriteIfExists = true;
+  saver.writeText("123", overwriteIfExists);
+  assertTrue("Contents should be '123'.", fileHasExpectedContents('123'));
+  var now = new Date();
+  var timestamp = now.toString() + " " + now.valueOf();
+  saver.writeText(timestamp, overwriteIfExists);
+  assertTrue("Contents should be timestamp.", fileHasExpectedContents(timestamp));
+}
+
+function testAppendToFile() {
+  var now = new Date();
+  var timestamp1 = now.toString() + " " + now.valueOf();
+  var overwriteIfExists = true;
+  saver.writeText(timestamp1, overwriteIfExists);
+  assertTrue("Contents should be timestamp1.", fileHasExpectedContents(timestamp1));
+  now = new Date();
+  var timestamp2 = now.toString() + " " + now.valueOf();
+  saver.appendText("\n" + timestamp2);
+  var expectedContents = timestamp1 + "\n" + timestamp2;
+  assertTrue("Contents should be timestamp1 & timestamp2.", fileHasExpectedContents(expectedContents));
+}
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function errorReporter() {
+  utilAssertReportedError = true;
+}
+
+function waitASecond() {
+  var now = new Date();
+  var then = now;
+  while (now.valueOf() - then.valueOf() < 1000) {
+    now = new Date();
+  }
+}
+
+function fileHasExpectedContents(expectedContents) {
+  // var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+  var contents = dojo.hostenv.getText(fileUrl);
+  for (var i = 0; contents != expectedContents && i < 5; ++i) {
+    waitASecond();
+    // contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+    contents = dojo.hostenv.getText(fileUrl);
+  }
+  return (contents == expectedContents);
+}
+
+function fileHasExpectedSubstring(expectedSubstring) {
+  // var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+  var contents = dojo.hostenv.getText(fileUrl);
+  for (var i = 0; contents.indexOf(expectedSubstring) == -1 && i < 5; ++i) {
+    waitASecond();
+    // contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
+    contents = dojo.hostenv.getText(fileUrl);
+  }
+  return (contents.indexOf(expectedSubstring) != -1);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/storage/TestSuite.html
===================================================================
--- trunk/tests/storage/TestSuite.html	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/TestSuite.html	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Storage Test Suite</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestSuite(storageTestSuite());
+        return testSuite;
+      }
+      
+      function storageTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../../tests/storage/StorageTest.html");
+        testSuite.addTestPage("../../../tests/storage/DirectoryReadingTest.html");
+        testSuite.addTestPage("../../../tests/storage/LintTest.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>Storage Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>

Added: trunk/tests/storage/directory_1/subdirectory_1/javascript_file_1.js
===================================================================
--- trunk/tests/storage/directory_1/subdirectory_1/javascript_file_1.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/directory_1/subdirectory_1/javascript_file_1.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,2 @@
+line 1
+

Added: trunk/tests/storage/directory_1/subdirectory_1/javascript_file_2.js
===================================================================
--- trunk/tests/storage/directory_1/subdirectory_1/javascript_file_2.js	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/directory_1/subdirectory_1/javascript_file_2.js	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,2 @@
+line 1
+

Added: trunk/tests/storage/directory_1/subdirectory_1/suffixless_file_1
===================================================================
--- trunk/tests/storage/directory_1/subdirectory_1/suffixless_file_1	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/directory_1/subdirectory_1/suffixless_file_1	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,2 @@
+line 1
+

Added: trunk/tests/storage/directory_1/subdirectory_1/text_file_1.txt
===================================================================
--- trunk/tests/storage/directory_1/subdirectory_1/text_file_1.txt	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/directory_1/subdirectory_1/text_file_1.txt	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,2 @@
+line 1
+

Added: trunk/tests/storage/directory_1/subdirectory_1/text_file_2.txt
===================================================================
--- trunk/tests/storage/directory_1/subdirectory_1/text_file_2.txt	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/directory_1/subdirectory_1/text_file_2.txt	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,2 @@
+line 1
+

Added: trunk/tests/storage/directory_1/subdirectory_1/text_file_3.txt
===================================================================
--- trunk/tests/storage/directory_1/subdirectory_1/text_file_3.txt	2005-10-20 18:52:21 UTC (rev 366)
+++ trunk/tests/storage/directory_1/subdirectory_1/text_file_3.txt	2005-10-25 03:17:18 UTC (rev 367)
@@ -0,0 +1,2 @@
+line 1
+



