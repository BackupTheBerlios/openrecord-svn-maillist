From skinner at berlios.de  Thu Sep  1 22:59:55 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 1 Sep 2005 22:59:55 +0200
Subject: [openrecord-svn] r311 - trunk/documentation
Message-ID: <200509012059.j81KxtNd003364@sheep.berlios.de>

Author: skinner
Date: 2005-09-01 22:59:54 +0200 (Thu, 01 Sep 2005)
New Revision: 311

Modified:
   trunk/documentation/release_planning.txt
Log:
added task to release_planning.txt

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-08-31 20:09:23 UTC (rev 310)
+++ trunk/documentation/release_planning.txt	2005-09-01 20:59:54 UTC (rev 311)
@@ -368,6 +368,7 @@
        |          |         | 14. Make RootView subclass from View, or add comments explaining why it doesn't
        |          |         | 15. Make DateValue subclass from Date, or wrap an internal Date object
 -------+----------+---------+----------------------------------------------
+       |          |         |     Fix the message that says "Sorry, for some reason OpenRecrod was not able to launch."
        |          |         | 16. Assign system attributes & categories to a "System" category
        |          |         | 17. Hide "System" items most of the time
        |          |         | 18. improve UI for creating a new category



From skinner at berlios.de  Fri Sep  2 01:01:28 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 2 Sep 2005 01:01:28 +0200
Subject: [openrecord-svn] r312 - in trunk/source: scrap_yard util
Message-ID: <200509012301.j81N1Sj0011566@sheep.berlios.de>

Author: skinner
Date: 2005-09-02 01:01:19 +0200 (Fri, 02 Sep 2005)
New Revision: 312

Modified:
   trunk/source/scrap_yard/TimingTest.html
   trunk/source/scrap_yard/TimingTest.js
   trunk/source/util/UtilTest.html
Log:
Timing tests for different object definition idioms. 

Modified: trunk/source/scrap_yard/TimingTest.html
===================================================================
--- trunk/source/scrap_yard/TimingTest.html	2005-09-01 20:59:54 UTC (rev 311)
+++ trunk/source/scrap_yard/TimingTest.html	2005-09-01 23:01:19 UTC (rev 312)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../Util.js"></script>
-    <script type="text/javascript" src="../model/Entry.js"></script>
     <script type="text/javascript" src="TimingTest.js"></script>
   </head>
   
@@ -27,6 +26,11 @@
     
     <p>&nbsp;</p>
     <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
     <p>To see the tests, open this .html file in a text editor. Or, within a  
     web browser, you should be able see the source for this file by using 
     some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
@@ -39,19 +43,6 @@
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../../../third_party/jsunit/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 

Modified: trunk/source/scrap_yard/TimingTest.js
===================================================================
--- trunk/source/scrap_yard/TimingTest.js	2005-09-01 20:59:54 UTC (rev 311)
+++ trunk/source/scrap_yard/TimingTest.js	2005-09-01 23:01:19 UTC (rev 312)
@@ -28,8 +28,20 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
-// Results from running this test, using Brian's Dell 4600:
+// Results from running this test circa Sept 2005, using Brian's Dell Inspiron 9300:
 //  0   microseconds for EMPTY_LOOP
+//  6.0 microseconds for ARRAY_CREATION
+//  4.4 microseconds for OBJECT_CREATION
+//  4.3 microseconds for OBJECT_CREATION_WITH_STRINGS
+//  2.9 microseconds for DATE_CREATION
+//  1.3 microseconds for METHOD_CALL
+//  1.1 microseconds for GLOBAL_VARIABLE_LOOKUP
+//  0.7 microseconds for DATE_VALUEOF
+//  7.5 microseconds for TEST_TYPE_ONE_BOX
+//  5.9 microseconds for TEST_TYPE_TWO_BOX
+
+// Results from running this test circa May 2005, using Brian's Dell Dimension 4600:
+//  0   microseconds for EMPTY_LOOP
 // 16   microseconds for ARRAY_CREATION
 // 15   microseconds for OBJECT_CREATION
 // 14   microseconds for OBJECT_CREATION_WITH_STRINGS
@@ -39,7 +51,7 @@
 //  1.2 microseconds for DATE_VALUEOF
 // 16    microseconds for ENTRY_COMPAREORDINALS
 
-// Results from a different test program, using Brian's Dell 4600:
+// Results from a different test program circa May 2005, using Brian's Dell Dimension 4600:
 //  0.78 microseconds to create a new Array:   var a = [x, y];
 //  0.59 microseconds to create a new Object:  var o = {here: x, there: y};
 //  0.59 microseconds to create a new Object:  var o = {"here": x, "there": y};
@@ -57,7 +69,9 @@
 var TEST_METHOD_CALL = "METHOD_CALL";
 var TEST_GLOBAL_VARIABLE_LOOKUP = "GLOBAL_VARIABLE_LOOKUP";
 var TEST_DATE_VALUEOF = "DATE_VALUEOF";
-var TEST_ENTRY_COMPAREORDINALS = "ENTRY_COMPAREORDINALS";
+// var TEST_ENTRY_COMPAREORDINALS = "ENTRY_COMPAREORDINALS";
+var TEST_TYPE_ONE_BOX = "TYPE_ONE_BOX";
+var TEST_TYPE_TWO_BOX = "TYPE_TWO_BOX";
 
 function testTimes() {
   var testName;
@@ -70,7 +84,9 @@
   hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_METHOD_CALL] = null;
   hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_GLOBAL_VARIABLE_LOOKUP] = null;
   hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_DATE_VALUEOF] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_ENTRY_COMPAREORDINALS] = null;
+  // hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_ENTRY_COMPAREORDINALS] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_TYPE_ONE_BOX] = null;
+  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_TYPE_TWO_BOX] = null;
   for (testName in hashTableOfOperationsPerMillisecondKeyedByTestName) {
     var opsPerMS = getOpsPerMS(testName);
     hashTableOfOperationsPerMillisecondKeyedByTestName[testName] = opsPerMS;
@@ -100,6 +116,7 @@
   var operationsPerWhileLoopIteration = numberOfForLoopIterations * operationsPerForLoopIteration;
   var totalOperations = 0;
   
+/*
   if (inTestName == TEST_ENTRY_COMPAREORDINALS) {
     var world = {};
     world.getCurrentUser = function () { return this; };
@@ -110,7 +127,7 @@
     e1._initializeEntry();
     e2._initializeEntry();
   }
-
+*/
   var start = new Date();
   var startMS = start.valueOf();
   var nowMS = startMS;
@@ -229,6 +246,7 @@
         foo = now.valueOf();
       }
     }
+/*
     if (inTestName == TEST_ENTRY_COMPAREORDINALS) {
       for (i = 0; i < numberOfForLoopIterations; i += 1) {
         foo = Entry.compareOrdinals(e1, e2);
@@ -243,6 +261,35 @@
         foo = Entry.compareOrdinals(e1, e2);
       }
     }
+ */
+    if (inTestName == TEST_TYPE_ONE_BOX) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+        foo = new shapes.TypeOneBox(10, 10);
+      }
+    }
+    if (inTestName == TEST_TYPE_TWO_BOX) {
+      for (i = 0; i < numberOfForLoopIterations; i += 1) {
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+        foo = new shapes.TypeTwoBox(10, 10);
+      }
+    }
     now = new Date();
     nowMS = now.valueOf();
     totalOperations += operationsPerWhileLoopIteration;
@@ -258,6 +305,47 @@
   return operationsPerMillisecond;  
 }
 
+function testBoxConstruction() {
+  var boxA = new shapes.TypeOneBox(10, 10);
+  var boxB = new shapes.TypeOneBox(10, 10);
+  assertTrue("'TypeOneBox' objects each have their own 'getValue' method", boxA.getArea != boxB.getArea);
+  
+  boxA = new shapes.TypeTwoBox(10, 10);
+  boxB = new shapes.TypeTwoBox(10, 10);
+  assertTrue("'TypeTwoBox' objects share a common 'getValue' method", boxA.getArea == boxB.getArea);
+}
+
+shapes = {
+  TypeOneBox: function(width, height) {
+    this._width = width;
+    this._height = height;
+    
+    this.getArea = function() {
+      // do some busy work
+      var foo = [10];
+      for (var i in foo) {
+        var area = (this._width * this._height);
+      }
+      return area;
+    }
+  }
+};
+
+shapes.TypeTwoBox = function(width, height) {
+  this._width = width;
+  this._height = height;
+}
+
+shapes.TypeTwoBox.prototype.getArea = function() {
+  // do some busy work
+  var foo = [10];
+  for (var i in foo) {
+    var area = (this._width * this._height);
+  }
+  return area;
+};
+
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/util/UtilTest.html
===================================================================
--- trunk/source/util/UtilTest.html	2005-09-01 20:59:54 UTC (rev 311)
+++ trunk/source/util/UtilTest.html	2005-09-01 23:01:19 UTC (rev 312)
@@ -30,6 +30,11 @@
     
     <p>&nbsp;</p>
     <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
     <p>To see the tests, open this .html file in a text editor. Or, within a  
     web browser, you should be able see the source for this file by using 
     some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
@@ -42,19 +47,6 @@
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 



From mignon at berlios.de  Mon Sep  5 20:01:58 2005
From: mignon at berlios.de (Mignon Belongie at BerliOS)
Date: Mon, 5 Sep 2005 20:01:58 +0200
Subject: [openrecord-svn] r313 - trunk/source/model
Message-ID: <200509051801.j85I1weg028120@sheep.berlios.de>

Author: mignon
Date: 2005-09-05 20:01:58 +0200 (Mon, 05 Sep 2005)
New Revision: 313

Modified:
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/StubVirtualServer.js
Log:
Minor changes involving coding conventions and comments.


Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-09-01 23:01:19 UTC (rev 312)
+++ trunk/source/model/DeltaVirtualServer.js	2005-09-05 18:01:58 UTC (rev 313)
@@ -63,7 +63,7 @@
   var axiomaticFileName = "2005_june_axiomatic_items.json";
   var urlForAxiomaticFile = this._pathToTrunkDirectory + "source/model/" + axiomaticFileName;
   
-  this._dehydratedAxiomFileURL = urlForAxiomaticFile;  
+  this._dehydratedAxiomFileURL = urlForAxiomaticFile;
   this._repositoryName = repositoryName;
   this._hasEverFailedToSaveFlag = false;
 }
@@ -119,17 +119,17 @@
   
   this._rehydrateRecords(listOfRecords);
 };
-  
 
+
 /**
  * Given a string, returns a copy of the string that is less than
- * 25 characters long.
+ * 80 characters long.
  *
- * @scope    public instance method
+ * @scope    private instance method
  * @param    string    A string that may need truncating.
- * @return   A string that is. 
+ * @return   A string that is no longer than 80 characters long.
  */
-DeltaVirtualServer.prototype.truncateString = function(string) {
+DeltaVirtualServer.prototype._truncateString = function(string) {
   var maxLength = 80;
   var ellipsis = "...";
   var returnString = "";
@@ -184,9 +184,9 @@
     if (item instanceof Item) {
       var category = item.getFirstCategory();
       if (category) {
-        returnString += this.truncateString(category.getDisplayString("???")) + ": ";
+        returnString += this._truncateString(category.getDisplayString("???")) + ": ";
       }
-      returnString += this.truncateString(item.getDisplayString("???"));
+      returnString += this._truncateString(item.getDisplayString("???"));
     }
     if (item instanceof Entry) {
       returnString += "Entry";
@@ -236,7 +236,7 @@
       var item = record;
       if (generateComments) {
         listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(item) + '\n');
-        listOfStrings.push(indent + '//           by (' + this.truncateString(item.getUserstamp().getDisplayString()) + ')');
+        listOfStrings.push(indent + '//           by (' + this._truncateString(item.getUserstamp().getDisplayString()) + ')');
         listOfStrings.push(' on (' + DateValue.getStringMonthDayYear(item.getCreationDate()) + ')\n');
       }
       if (!this._jsonFragmentForItemPrefix) {
@@ -329,10 +329,10 @@
         listOfStringsForEntry.push(indent + '    "' + StubVirtualServer.JSON_MEMBER_ATTRIBUTE + '": [' + firstAttribute._getUuidInQuotes() + ', ' + secondAttribute._getUuidInQuotes() + ']');
         if (generateComments) {
           commentString += indent + '// ' + this._getTypedDisplayStringForItem(firstItem);
-          commentString += ".(" + this.truncateString(firstAttribute.getDisplayString("???")) + ")";
+          commentString += ".(" + this._truncateString(firstAttribute.getDisplayString("???")) + ")";
           commentString += " = " + this._getTypedDisplayStringForItem(secondItem) + "\n";
           commentString += indent + '// ' + this._getTypedDisplayStringForItem(secondItem);
-          commentString += ".(" + this.truncateString(secondAttribute.getDisplayString("???")) + ")";
+          commentString += ".(" + this._truncateString(secondAttribute.getDisplayString("???")) + ")";
           commentString += " = " + this._getTypedDisplayStringForItem(firstItem) + "\n";
         }
       } else {
@@ -353,7 +353,7 @@
             break;
           case World.UUID_FOR_TYPE_TEXT: 
             valueString = '"' + this.encodeText(contentData) + '"';
-            if (generateComments) {valueComment = '"' + this.truncateString(contentData) + '"';}
+            if (generateComments) {valueComment = '"' + this._truncateString(contentData) + '"';}
             break;
           case World.UUID_FOR_TYPE_DATE: 
             valueString = '"' + contentData.toString() + '"';
@@ -369,12 +369,12 @@
         listOfStringsForEntry.push(indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString);
         if (generateComments) {
           commentString += indent + '// ' + this._getTypedDisplayStringForItem(entry.getItem());
-          commentString += ".(" + this.truncateString(attribute.getDisplayString("???")) + ")";
+          commentString += ".(" + this._truncateString(attribute.getDisplayString("???")) + ")";
           commentString += " = " + valueComment + "\n";
         }
       }
       if (generateComments) {
-        commentString += indent + '//           by (' + this.truncateString(entry.getUserstamp().getDisplayString()) + ')';
+        commentString += indent + '//           by (' + this._truncateString(entry.getUserstamp().getDisplayString()) + ')';
         commentString += ' on (' + DateValue.getStringMonthDayYear(entry.getCreationDate()) + ')\n';
         listOfStrings.push(commentString);
         for (var j in listOfStringsForEntry) {
@@ -396,11 +396,11 @@
  * Sends all the changes to the server, so that the server can record the
  * changes.
  *
- * @scope    public instance method
+ * @scope    private instance method
  * @param    forceSave    Optional. Forces a save if set to true. 
  * @return   The list of changes made. 
  */
-DeltaVirtualServer.prototype.saveChangesToServer = function(forceSave) {
+DeltaVirtualServer.prototype._saveChangesToServer = function(forceSave) {
   var currentTransaction = this.getCurrentTransaction();
   var listOfChangesMade = currentTransaction.getRecords();
   if (!forceSave && listOfChangesMade.length === 0) {

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-01 23:01:19 UTC (rev 312)
+++ trunk/source/model/StubVirtualServer.js	2005-09-05 18:01:58 UTC (rev 313)
@@ -258,7 +258,7 @@
   Util.assert(this._countOfNestedTransactions >= 0);
 
   if (this._countOfNestedTransactions === 0) {
-    var listOfChangesMade = this.saveChangesToServer();
+    var listOfChangesMade = this._saveChangesToServer();
     this._currentTransaction = null;
     if (listOfChangesMade.length > 0) {
       // alert(listOfChangesMade.length + " changes made");
@@ -600,9 +600,9 @@
  * Sends all the changes to the server, so that the server can record the
  * changes.
  *
- * @scope    public instance method
+ * @scope    private instance method
  */
-StubVirtualServer.prototype.saveChangesToServer = function () {
+StubVirtualServer.prototype._saveChangesToServer = function () {
   // The StubVirtualServer doesn't ever actually talk to a server.
   // Other VirtualServer implementations would be expected to actually
   // implement this method such that it saves changes to the server
@@ -610,8 +610,8 @@
   this._currentTransaction = null;
   return listOfChangesMade;
 };
-  
 
+
 // -------------------------------------------------------------------
 // Query methods
 // -------------------------------------------------------------------



From mignon at berlios.de  Mon Sep  5 20:30:14 2005
From: mignon at berlios.de (Mignon Belongie at BerliOS)
Date: Mon, 5 Sep 2005 20:30:14 +0200
Subject: [openrecord-svn] r314 - trunk/third_party/gtd_tiddlywiki
Message-ID: <200509051830.j85IUEGE029882@sheep.berlios.de>

Author: mignon
Date: 2005-09-05 20:30:13 +0200 (Mon, 05 Sep 2005)
New Revision: 314

Modified:
   trunk/third_party/gtd_tiddlywiki/FileSaver.js
Log:
Minor changes involving coding conventions and comments.


Modified: trunk/third_party/gtd_tiddlywiki/FileSaver.js
===================================================================
--- trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-05 18:01:58 UTC (rev 313)
+++ trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-05 18:30:13 UTC (rev 314)
@@ -52,8 +52,9 @@
 
 
 /**
- * The FileSaver class knows how to save text to local file.
+ * The FileSaver class knows how to save text to a local file.
  *
+ * @param    repositoryName                 // e.g. demo_page
  * @scope    public instance constructor
  */
 function FileSaver(repositoryName) {
@@ -84,28 +85,28 @@
   var listOfAdditions = [];
   listOfAdditions.push(DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY);
   listOfAdditions.push(this._repositoryName + ".json");
-  var fileUrl = this.getLocalPathFromWindowLocation(listOfAdditions);
+  var fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
   
   var append = true;
-  this.saveTextToFile(textToAppend, fileUrl, append);
+  this._saveTextToFile(textToAppend, fileUrl, append);
 };
-  
 
+
 /**
  * Save the text to the file at the given URL.
  *
- * @scope    public instance method
+ * @scope    private instance method
  * @return   Returns true if the text was saved.
  */
-FileSaver.prototype.saveTextToFile = function(text, fileUrl, append) {
+FileSaver.prototype._saveTextToFile = function(text, fileUrl, append) {
   // Make sure we were loaded from a "file:" URL
   if (window.location.protocol != "file:") {
     Util.assert(false, 'FileSaver.js can only be used for pages loaded from a "file:///" location');
   }
 
-  var success = this.mozillaSaveToFile(text, fileUrl, append);
+  var success = this._mozillaSaveToFile(text, fileUrl, append);
   if (!success) {
-    success = this.ieSaveToFile(text, fileUrl, append);
+    success = this._ieSaveToFile(text, fileUrl, append);
   }
   return(success);
 };
@@ -114,10 +115,10 @@
 /**
  * Save the text to the file at the given filePath.
  *
- * @scope    public instance method
+ * @scope    private instance method
  * @return   Returns true if the text was saved, false if there was an error, or null if we couldn't even try.
  */
-FileSaver.prototype.mozillaSaveToFile = function(text, filePath, append) {
+FileSaver.prototype._mozillaSaveToFile = function(text, filePath, append) {
   if (window.Components) {
     try {
       netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
@@ -151,10 +152,10 @@
 /**
  * Save the text to the file at the given filePath.
  *
- * @scope    public instance method
+ * @scope    private instance method
  * @return   Returns true if the text was saved, or false if there was an error.
  */
-FileSaver.prototype.ieSaveToFile = function(text, filePath, append) {
+FileSaver.prototype._ieSaveToFile = function(text, filePath, append) {
   try {
     var fileSystemObject = new ActiveXObject("Scripting.FileSystemObject");
   }
@@ -179,10 +180,10 @@
  * converts the whole thing to a format that is compatible with the 
  * local file system, and returns the new local path.
  *
- * @scope    public instance method
+ * @scope    private instance method
  * @return   Returns a full local pathname.
  */
-FileSaver.prototype.getLocalPathFromWindowLocation = function(listOfAdditions) {
+FileSaver.prototype._getLocalPathFromWindowLocation = function(listOfAdditions) {
   // Example location:
   //   location.href     == file:///D:/amy/openrecord/foo.html#bar
   //   location.protocol == file:



From mignon at berlios.de  Tue Sep  6 00:58:31 2005
From: mignon at berlios.de (Mignon Belongie at BerliOS)
Date: Tue, 6 Sep 2005 00:58:31 +0200
Subject: [openrecord-svn] r315 - in trunk: source/model third_party/gtd_tiddlywiki
Message-ID: <200509052258.j85MwVhN029346@sheep.berlios.de>

Author: mignon
Date: 2005-09-06 00:58:28 +0200 (Tue, 06 Sep 2005)
New Revision: 315

Added:
   trunk/source/model/RepositoryWritingTest.html
   trunk/source/model/RepositoryWritingTest.js
   trunk/source/model/write_to_repository_file.php
Modified:
   trunk/source/model/HttpSaver.js
   trunk/third_party/gtd_tiddlywiki/FileSaver.js
Log:
Added RepositoryWritingTest to test FileSaver and HttpSaver.  Added write_to_repository_file.php and made as few changes as possible to HttpSaver and FileSaver to get the correct file saving behavior and have the functionality to test it.  RepositoryWritingTest should be run in both 'file:' mode and 'http:' mode, in order to test both FileSaver and HttpSaver.  


Modified: trunk/source/model/HttpSaver.js
===================================================================
--- trunk/source/model/HttpSaver.js	2005-09-05 18:30:13 UTC (rev 314)
+++ trunk/source/model/HttpSaver.js	2005-09-05 22:58:28 UTC (rev 315)
@@ -62,9 +62,19 @@
   newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
   newXMLHttpRequestObject.send(textToAppend);
 };
-  
-  
-  
+
+HttpSaver.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  var url = this._pathToTrunkDirectory + "source/model/write_to_repository_file.php?file=" + this._repositoryName;
+  if (overwriteIfExists) {
+    url += "&overwrite=T";
+  }
+  var newXMLHttpRequestObject = this._newXMLHttpRequestObject();
+  var asynchronous = true;
+  newXMLHttpRequestObject.open("POST", url, asynchronous);
+  newXMLHttpRequestObject.setRequestHeader("Content-Type", "text/plain");
+  newXMLHttpRequestObject.send(textToWrite);
+};
+
 /**
  * Returns a newly created XMLHttpRequest object.
  *

Added: trunk/source/model/RepositoryWritingTest.html
===================================================================
--- trunk/source/model/RepositoryWritingTest.html	2005-09-05 18:30:13 UTC (rev 314)
+++ trunk/source/model/RepositoryWritingTest.html	2005-09-05 22:58:28 UTC (rev 315)
@@ -0,0 +1,99 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Test writing to repositories</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
+    <script type="text/javascript" src="../util/Util.js"></script>
+    <script type="text/javascript" src="../util/Uuid.js"></script>
+    <script type="text/javascript" src="../util/DateValue.js"></script>
+    <script type="text/javascript" src="HttpSaver.js"></script>
+    <script type="text/javascript" src="Record.js"></script>
+    <script type="text/javascript" src="Ordinal.js"></script>
+    <script type="text/javascript" src="Vote.js"></script>
+    <script type="text/javascript" src="ContentRecord.js"></script>
+    <script type="text/javascript" src="Item.js"></script>
+    <script type="text/javascript" src="Entry.js"></script>
+    <script type="text/javascript" src="Transaction.js"></script>
+    <script type="text/javascript" src="QueryRunner.js"></script>
+    <script type="text/javascript" src="World.js"></script>
+    <script type="text/javascript" src="StubVirtualServer.js"></script>
+    <script type="text/javascript" src="DeltaVirtualServer.js"></script>
+    <script type="text/javascript" src="RepositoryWritingTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Test writing to repositories.</h1>
+    <h2>This suite should be run in both 'file:' mode and 'http:' mode.</h2>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>If you're looking at this page across an "http://" connection, rather
+    than having loaded it as a "file:///", then you may be able to run the
+    unit tests. The web server that served you this page may also have a
+    JsUnit testRunner available. If so, you should be able to run these unit
+    tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>You can also run these unit tests on your local computer. To do that you 
+    first need to download <a href="http://www.edwardh.com/jsunit/" 
+    rel="external">JsUnit</a>.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/source/model/RepositoryWritingTest.js
===================================================================
--- trunk/source/model/RepositoryWritingTest.js	2005-09-05 18:30:13 UTC (rev 314)
+++ trunk/source/model/RepositoryWritingTest.js	2005-09-05 22:58:28 UTC (rev 315)
@@ -0,0 +1,120 @@
+/*****************************************************************************
+ RepositoryWritingTest.js
+ 
+******************************************************************************
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+var utilAssertReportedError;
+var pathToTrunkDirectory;
+var fileName;
+var universalFileSaver;
+var fileUrl;
+var saver;
+
+function errorReporter() {
+  utilAssertReportedError = true;
+}
+
+function waitASecond() {
+  var now = new Date();
+  var then = now;
+  while (now.valueOf() - then.valueOf() < 1000) {
+    now = new Date();
+  }
+}
+
+function fileHasExpectedContents(expectedContents) {
+  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  for (var i = 0; contents != expectedContents && i < 5; ++i) {
+    waitASecond();
+    contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  }
+  return (contents == expectedContents);
+}
+
+function setUp() {
+  utilAssertReportedError = false;
+  Util.setErrorReportCallback(errorReporter)
+  
+  pathToTrunkDirectoryFromFileSaver       = "../..";
+  pathToTrunkDirectoryFromThisDirectory   = "../..";
+  pathToTrunkDirectoryFromTestRunner      = "../../../";
+  fileName = "FakeRepository";
+  var isHttp = window.location.protocol == "http:";
+  saver = isHttp? new HttpSaver(pathToTrunkDirectoryFromTestRunner, fileName) 
+                : new FileSaver(fileName, pathToTrunkDirectoryFromThisDirectory);
+
+  // fileUrl must specify a file /repositories/*.json relative to the trunk directory, because
+  // that's where FileSaver and HttpSaver will write
+  if (isHttp) {
+    // pathToTrunkDirectoryFromTestRunner is used by HttpSaver only to find the php files.
+    var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/source/model/TestRepositoryWriting.html.    
+    var arrayOfPathComponents = thisUrl.split('/');
+    arrayOfPathComponents.pop();
+    var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
+    fileUrl = thisDirectory + '/' + pathToTrunkDirectoryFromThisDirectory + "/repositories/" + fileName + ".json";
+  } else {
+    fileUrl = saver._getLocalPathFromWindowLocation([pathToTrunkDirectoryFromFileSaver, "repositories", fileName + ".json"]);
+  }
+}
+
+function tearDown() {
+  assertFalse(utilAssertReportedError);
+}
+
+function testCreateNewFile() {
+  var now = new Date();
+  var timestamp = now.toString() + " " + now.valueOf();
+  var overwriteIfExists = true;
+  saver.writeText(timestamp, overwriteIfExists);
+  assertTrue("Contents should be timestamp.", fileHasExpectedContents(timestamp));
+}
+
+function testOverwriteFile() {
+  var overwriteIfExists = true;
+  saver.writeText("123", overwriteIfExists);
+  assertTrue("Contents should be '123'.", fileHasExpectedContents('123'));
+  var now = new Date();
+  var timestamp = now.toString() + " " + now.valueOf();
+  saver.writeText(timestamp, overwriteIfExists);
+  assertTrue("Contents should be timestamp.", fileHasExpectedContents(timestamp));
+}
+
+function testAppendToFile() {
+  var now = new Date();
+  var timestamp1 = now.toString() + " " + now.valueOf();
+  var overwriteIfExists = true;
+  saver.writeText(timestamp1, overwriteIfExists);
+  assertTrue("Contents should be timestamp1.", fileHasExpectedContents(timestamp1));
+  now = new Date();
+  var timestamp2 = now.toString() + " " + now.valueOf();
+  saver.appendText("\n" + timestamp2);
+  var expectedContents = timestamp1 + "\n" + timestamp2;
+  assertTrue("Contents should be timestamp1 & timestamp2.", fileHasExpectedContents(expectedContents));
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/source/model/write_to_repository_file.php
===================================================================
--- trunk/source/model/write_to_repository_file.php	2005-09-05 18:30:13 UTC (rev 314)
+++ trunk/source/model/write_to_repository_file.php	2005-09-05 22:58:28 UTC (rev 315)
@@ -0,0 +1,37 @@
+<?php
+$contentToWrite = "" . $HTTP_RAW_POST_DATA . "";
+
+$url_of_this_php_script = $_SERVER['REQUEST_URI'];
+$file_name_parameter = $_GET['file'];
+$array_of_file_name_parameter_parts = explode("/", $file_name_parameter);
+$safe_file_name_with_no_path_exploits = $array_of_file_name_parameter_parts[0];
+$overwrite_parameter = $_GET['overwrite'];
+
+$file_path = "../../repositories/"; /* relative to this php file */
+$file_suffix = ".json";
+$repository_file_name = $file_path . $safe_file_name_with_no_path_exploits . $file_suffix;
+
+if ($overwrite_parameter != 'T') {
+  if (file_exists($repository_file_name)) {
+    exit("File $repository_file_name already exists."); 
+  }
+}
+if ($fileHandle = fopen($repository_file_name, "wb")) { /* wb == write in binary mode */
+  /* It would be nice if this could be 0664, but then it won't be openable with 'file:' protocol,
+     unless the user is the same as the user of httpd (typically 'nobody').  I'm assuming chmod is 
+     ignored on non-unix systems, and that this note is relevant only on unix systems.  
+     Even if the user is in the same group as nobody, nsIFileOutputStream (called by 
+     FileSaver._mozillaSaveToFile) still won't open the file, at least on Mignon's Mac. */
+  chmod($repository_file_name, 0666);
+  if (fwrite($fileHandle, $contentToWrite)) {
+    fclose($fileHandle);
+    exit("Wrote to file ($repository_file_name)");
+  } else {
+    fclose($fileHandle);
+    exit("Unable to write to file ($repository_file_name)");
+  }
+} else {
+  exit("Unable to open file: $repository_file_name"); 
+}
+?>
+

Modified: trunk/third_party/gtd_tiddlywiki/FileSaver.js
===================================================================
--- trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-05 18:30:13 UTC (rev 314)
+++ trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-05 22:58:28 UTC (rev 315)
@@ -55,10 +55,14 @@
  * The FileSaver class knows how to save text to a local file.
  *
  * @param    repositoryName                 // e.g. demo_page
+ * @param    pathToTrunkDirectory           // Not needed if window.location.pathname is in the trunk directory.
  * @scope    public instance constructor
  */
-function FileSaver(repositoryName) {
+function FileSaver(repositoryName, pathToTrunkDirectory) {
   this._repositoryName = repositoryName;
+  if (pathToTrunkDirectory) {
+    this._pathToTrunkDirectory = pathToTrunkDirectory;
+  }
 }
 
 
@@ -83,6 +87,9 @@
   //   fileUrl = "K:/www/htdocs/openrecord/demo/current/trunk/repositories/demo_page.json";
 
   var listOfAdditions = [];
+  if (this._pathToTrunkDirectory) {
+    listOfAdditions.push(this._pathToTrunkDirectory);
+  }
   listOfAdditions.push(DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY);
   listOfAdditions.push(this._repositoryName + ".json");
   var fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
@@ -91,7 +98,19 @@
   this._saveTextToFile(textToAppend, fileUrl, append);
 };
 
+FileSaver.prototype.writeText = function(textToWrite, overwriteIfExists) {
+  var listOfAdditions = [];
+  if (this._pathToTrunkDirectory) {
+    listOfAdditions.push(this._pathToTrunkDirectory);
+  }
+  listOfAdditions.push(DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY);
+  listOfAdditions.push(this._repositoryName + ".json");
+  var fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
 
+  var append = false;
+  this._saveTextToFile(textToWrite, fileUrl, append);
+}
+
 /**
  * Save the text to the file at the given URL.
  *
@@ -126,6 +145,7 @@
       file.initWithPath(filePath);
       if (!file.exists()) {
         file.create(0, 0664);
+        file.permissions = 0664; // Because create ignores the permissions argument, at least on Mignon's Mac.
       }
       var outputStream = Components.classes["@mozilla.org/network/file-output-stream;1"].createInstance(Components.interfaces.nsIFileOutputStream);
       if (append) {



From skinner at berlios.de  Thu Sep  8 00:16:35 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 8 Sep 2005 00:16:35 +0200
Subject: [openrecord-svn] r317 - trunk/source/scrap_yard
Message-ID: <200509072216.j87MGZ63021580@sheep.berlios.de>

Author: skinner
Date: 2005-09-08 00:16:34 +0200 (Thu, 08 Sep 2005)
New Revision: 317

Modified:
   trunk/source/scrap_yard/TimingTest.js
Log:
Added timing tests to compare two different coding styles for creating constructors.

Modified: trunk/source/scrap_yard/TimingTest.js
===================================================================
--- trunk/source/scrap_yard/TimingTest.js	2005-09-07 21:41:44 UTC (rev 316)
+++ trunk/source/scrap_yard/TimingTest.js	2005-09-07 22:16:34 UTC (rev 317)
@@ -334,7 +334,7 @@
 shapes.TypeTwoBox = function(width, height) {
   this._width = width;
   this._height = height;
-}
+};
 
 shapes.TypeTwoBox.prototype.getArea = function() {
   // do some busy work



From skinner at berlios.de  Thu Sep  8 02:18:55 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 8 Sep 2005 02:18:55 +0200
Subject: [openrecord-svn] r318 - in trunk: . source source/util tests tests/dojo tests/util
Message-ID: <200509080018.j880ItLs029483@sheep.berlios.de>

Author: skinner
Date: 2005-09-08 02:18:49 +0200 (Thu, 08 Sep 2005)
New Revision: 318

Added:
   trunk/tests/
   trunk/tests/SimpleTest.html
   trunk/tests/SimpleTest.js
   trunk/tests/dojo/
   trunk/tests/dojo/SimpleDojoTest.html
   trunk/tests/dojo/SimpleDojoTest.js
   trunk/tests/util/
   trunk/tests/util/CsvParserTest.html
   trunk/tests/util/CsvParserTest.js
   trunk/tests/util/movies.csv
Removed:
   trunk/source/util/CsvParserTest.html
   trunk/source/util/CsvParserTest.js
Modified:
   trunk/dashboard.html
   trunk/demo_page.html
   trunk/dogfood.html
   trunk/open_agenda.html
   trunk/sandbox.html
   trunk/source/OpenRecordLoader.js
   trunk/source/TablePlugin.js
   trunk/source/TestSuite.html
   trunk/source/util/CsvParser.js
   trunk/tobacco.html
   trunk/tuscany.html
Log:
Created new tests directory parallel to source, as per Dojo convention.  Added a couple very basic unit tests.  Started using Dojo-style namespaces.  Changed CsvParser to be orp.util.CsvParser.  Moved CsvParser unit tests over to the new tests directory.

Modified: trunk/dashboard.html
===================================================================
--- trunk/dashboard.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/dashboard.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -12,6 +12,7 @@
 
   <head>
     <title>Dashboard Demo Page</title>
+    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/demo_page.html
===================================================================
--- trunk/demo_page.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/demo_page.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -12,6 +12,7 @@
 
   <head>
     <title>openrecord.org - Demo Page</title>
+    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/dogfood.html
===================================================================
--- trunk/dogfood.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/dogfood.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -12,6 +12,7 @@
 
   <head>
     <title>openrecord.org - Dogfood Page</title>
+    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/open_agenda.html
===================================================================
--- trunk/open_agenda.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/open_agenda.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -12,6 +12,7 @@
 
   <head>
     <title>Collaborative Philanthropy</title>
+    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/sandbox.html
===================================================================
--- trunk/sandbox.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/sandbox.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -12,6 +12,7 @@
 
   <head>
     <title>openrecord.org - Sandbox Page</title>
+    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/source/OpenRecordLoader.js	2005-09-08 00:18:49 UTC (rev 318)
@@ -93,6 +93,7 @@
   var listOfSourceCodeFiles = [
     // third_party
     "third_party/md5/md5.js",
+    /* "third_party/dojo/dojo-0.1.0/dojo.js", */
     "third_party/scriptaculous/prototype.js",
     "third_party/scriptaculous/effects.js",
     "third_party/scriptaculous/dragdrop.js",
@@ -104,7 +105,6 @@
     "source/util/Util.js",
     "source/util/Cookie.js",
     "source/util/DateValue.js",
-    "source/util/CsvParser.js",
     // view
     "source/view/View.js",
     "source/view/RootView.js",
@@ -146,6 +146,8 @@
 // -------------------------------------------------------------------
 // This code is immediately executed when this file is first loaded.
 // -------------------------------------------------------------------
+dojo.hostenv.setModulePrefix("orp", "../../../source");
+// dojo.require("orp.util.CsvParser");
 OpenRecordLoader.loadEverything();
 window.onload = function() { 
   var world = new World();

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/source/TablePlugin.js	2005-09-08 00:18:49 UTC (rev 318)
@@ -41,6 +41,7 @@
 /*global CsvParser  */
 /*global View, MultiEntriesView, EntryView, RootView  */
 // -------------------------------------------------------------------
+dojo.require("orp.util.CsvParser");
 
 
 // -------------------------------------------------------------------
@@ -579,7 +580,7 @@
   var startTime = new Date();
   
   var fileContents = Util.getStringContentsOfFileAtURL('file://' + fileButton.value);
-  var csvParser = new CsvParser();
+  var csvParser = new orp.util.CsvParser();
   var listOfRecords = csvParser.getStringValuesFromCsvData(fileContents);
   if (!listOfRecords) {
     return;

Modified: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/source/TestSuite.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -23,6 +23,9 @@
       
       function openRecordTestSuite() {
         var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../../tests/SimpleTest.html");
+        testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
+        testSuite.addTestPage("../../../tests/util/CsvParserTest.html");
         testSuite.addTestPage("../../../source/LintTest.html");
         testSuite.addTestPage("../../../source/model/TestSuite.html");
         testSuite.addTestPage("../../../source/util/TestSuite.html");

Modified: trunk/source/util/CsvParser.js
===================================================================
--- trunk/source/util/CsvParser.js	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/source/util/CsvParser.js	2005-09-08 00:18:49 UTC (rev 318)
@@ -28,6 +28,7 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+dojo.provide("orp.util.CsvParser");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -43,7 +44,7 @@
  *
  * @scope    public instance constructor
  */
-function CsvParser() {
+orp.util.CsvParser = function() {
 }
 
 
@@ -69,7 +70,7 @@
  * @param    csvData    A string containing CSV records. 
  * @return   Returns an array containing sub-arrays containing strings.
  */
-CsvParser.prototype.getStringValuesFromCsvData = function(csvData) {
+orp.util.CsvParser.prototype.getStringValuesFromCsvData = function(csvData) {
   Util.assert(Util.isString(csvData));
   
   var lineEndingCharacters = new RegExp("\r\n|\n|\r");

Deleted: trunk/source/util/CsvParserTest.html
===================================================================
--- trunk/source/util/CsvParserTest.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/source/util/CsvParserTest.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -1,85 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests for CsvParser.js</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="Util.js"></script>
-    <script type="text/javascript" src="CsvParser.js"></script>
-    <script type="text/javascript" src="CsvParserTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests for CsvParser.js</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/util/CsvParserTest.js
===================================================================
--- trunk/source/util/CsvParserTest.js	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/source/util/CsvParserTest.js	2005-09-08 00:18:49 UTC (rev 318)
@@ -1,72 +0,0 @@
-/*****************************************************************************
- CsvParserTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-var CsvData = null;
-
-function setUp() {
-  var CsvRecords = ['Title, Year, Producer',
-                    '2001: A Space Odyssey, 1968, Stanley Kubrick',
-                    '"This is a ""fake"" movie title", 1957, Sidney Lumet',
-                    'Alien, 1979, Ridley Scott  ',
-                    '"The Sequel to ""Dances With Wolves.""", 1982, Ridley Scott',
-                    '"Caine Mutiny, The", 1954, "Dymtryk ""the King"", Edward"',
-                    '',
-                    ''];
-  CsvData = CsvRecords.join('\n');
-}
-
-function testCsvParser() {
-  var csvParser = new CsvParser();
-  var listOfRecords = csvParser.getStringValuesFromCsvData(CsvData);
-  var whiteSpaceCharacters = " \t\n\r";
-  
-  assertTrue('CsvData has 5 lines', listOfRecords.length == 5);
-  for (var i in listOfRecords) {
-    var row = listOfRecords[i];
-    assertTrue('Each row has 3 fields', row.length == 3);
-    for (var j in row) {
-      var field = row[j];
-      assertTrue('Each field is a string', Util.isString(field));
-      var firstChar = field.charAt(0);
-      var lastChar = field.charAt(field.length - 1);
-      assertTrue('The first character is not white space', whiteSpaceCharacters.indexOf(firstChar) == -1);
-      assertTrue('The last character is not white space', whiteSpaceCharacters.indexOf(lastChar) == -1);
-    };
-  }
-}
-
-
-function tearDown() {
-  CsvData = null;
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Added: trunk/tests/SimpleTest.html
===================================================================
--- trunk/tests/SimpleTest.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/tests/SimpleTest.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -0,0 +1,75 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Simple unit test</title>
+
+    <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="SimpleTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Simple unit test</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/SimpleTest.js
===================================================================
--- trunk/tests/SimpleTest.js	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/tests/SimpleTest.js	2005-09-08 00:18:49 UTC (rev 318)
@@ -0,0 +1,45 @@
+/*****************************************************************************
+ SimpleTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+function setUp() {
+  // do nothing
+}
+
+function testSimplestCase() {
+  assertTrue("Two and two is four", (2 + 2) == 4);
+}
+
+function tearDown() {
+  // do nothing
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/dojo/SimpleDojoTest.html
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/tests/dojo/SimpleDojoTest.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit test - Dojo code availability</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="SimpleDojoTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit test - Dojo code availability</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    <p>See also:</p>
+    <p><a href="http://article.gmane.org/gmane.comp.web.dojo.devel/426">http://article.gmane.org/gmane.comp.web.dojo.devel/426</a></p>
+    <p><a href="http://dojo.jot.com/DojoPackageSystem">http://dojo.jot.com/DojoPackageSystem</a></p>
+    <p><a href="http://dojotoolkit.org/docs/apis/hostenv.shtml">http://dojotoolkit.org/docs/apis/hostenv.shtml</a></p>
+
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-09-08 00:18:49 UTC (rev 318)
@@ -0,0 +1,48 @@
+/*****************************************************************************
+ SimpleDojoTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.require("dojo.text.*");
+}
+
+function testDojoTextTrim() {
+  var string = "     Just Foo    ";
+  var trimmedString = dojo.text.trim(string);
+  assertTrue("'Just Foo' remains after trimming.", trimmedString == "Just Foo");
+}
+
+function tearDown() {
+  // do nothing
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/tests/util/CsvParserTest.html (from rev 315, trunk/source/util/CsvParserTest.html)
===================================================================
--- trunk/source/util/CsvParserTest.html	2005-09-05 22:58:28 UTC (rev 315)
+++ trunk/tests/util/CsvParserTest.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for CsvParser.js</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="../../tests/util/CsvParserTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for CsvParser.js</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/util/CsvParserTest.js (from rev 315, trunk/source/util/CsvParserTest.js)
===================================================================
--- trunk/source/util/CsvParserTest.js	2005-09-05 22:58:28 UTC (rev 315)
+++ trunk/tests/util/CsvParserTest.js	2005-09-08 00:18:49 UTC (rev 318)
@@ -0,0 +1,103 @@
+/*****************************************************************************
+ CsvParserTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var CsvData = null;
+
+function setUp() {
+  var CsvRecords = ['Title, Year, Producer',
+                    '2001: A Space Odyssey, 1968, Stanley Kubrick',
+                    '"This is a ""fake"" movie title", 1957, Sidney Lumet',
+                    'Alien, 1979, Ridley Scott  ',
+                    '"The Sequel to ""Dances With Wolves.""", 1982, Ridley Scott',
+                    '"Caine Mutiny, The", 1954, "Dymtryk ""the King"", Edward"',
+                    '',
+                    ''];
+  CsvData = CsvRecords.join('\n');
+}
+
+function testDojoAccess() {
+  // alert("Dojo version: " + dojo.version.toString()); 
+    // Dojo version: 0.1.0 (1321)
+  // alert("dojo.hostenv.getBaseScriptUri() = " + dojo.hostenv.getBaseScriptUri());
+    // dojo.hostenv.getBaseScriptUri() = ../../third_party/dojo/dojo-0.1.0
+  
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.require("dojo.text.*");
+  
+  var string = "     Just Foo    ";
+  var trimmedString = dojo.text.trim(string);
+  assertTrue("'Just Foo' remains after trimming.", trimmedString == "Just Foo");
+}
+
+/*
+function testShapesAccess() {
+  dojo.hostenv.setModulePrefix("shapes", "../../../../source/shapes");
+  
+  dojo.require("shapes.Ship");
+  var ship = new shapes.Ship();
+  var box1 = new shapes.Box(4, 5); // area == 20
+  var box2 = new shapes.Box(5, 6); // area == 30
+  ship.addBox(box1);
+  ship.addBox(box2);
+  assertTrue("The ship has an area of 50.", ship.getArea() == 50);
+}
+*/
+
+function testCsvParser() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.CsvParser");
+
+  var csvParser = new orp.util.CsvParser();
+  var listOfRecords = csvParser.getStringValuesFromCsvData(CsvData);
+  var whiteSpaceCharacters = " \t\n\r";
+  
+  assertTrue('CsvData has 5 lines', listOfRecords.length == 5);
+  for (var i in listOfRecords) {
+    var row = listOfRecords[i];
+    assertTrue('Each row has 3 fields', row.length == 3);
+    for (var j in row) {
+      var field = row[j];
+      assertTrue('Each field is a string', Util.isString(field));
+      var firstChar = field.charAt(0);
+      var lastChar = field.charAt(field.length - 1);
+      assertTrue('The first character is not white space', whiteSpaceCharacters.indexOf(firstChar) == -1);
+      assertTrue('The last character is not white space', whiteSpaceCharacters.indexOf(lastChar) == -1);
+    };
+  }
+}
+
+
+function tearDown() {
+  CsvData = null;
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Added: trunk/tests/util/movies.csv
===================================================================
--- trunk/tests/util/movies.csv	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/tests/util/movies.csv	2005-09-08 00:18:49 UTC (rev 318)
@@ -0,0 +1,4 @@
+Title, Year, Producer,
+City of God, 2002, Katia Lund
+Rain, 2001, Christine Jeffs
+

Modified: trunk/tobacco.html
===================================================================
--- trunk/tobacco.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/tobacco.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -12,6 +12,7 @@
 
   <head>
     <title>openrecord.org - Tobacco Control</title>
+    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   

Modified: trunk/tuscany.html
===================================================================
--- trunk/tuscany.html	2005-09-07 22:16:34 UTC (rev 317)
+++ trunk/tuscany.html	2005-09-08 00:18:49 UTC (rev 318)
@@ -12,6 +12,7 @@
 
   <head>
     <title>openrecord.org - Tuscany</title>
+    <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="source/OpenRecordLoader.js"></script>
   </head>
   



From mignon at berlios.de  Mon Sep 12 03:29:51 2005
From: mignon at berlios.de (Mignon Belongie at BerliOS)
Date: Mon, 12 Sep 2005 03:29:51 +0200
Subject: [openrecord-svn] r319 - in trunk: source/model third_party/gtd_tiddlywiki
Message-ID: <200509120129.j8C1TpAi004179@sheep.berlios.de>

Author: mignon
Date: 2005-09-12 03:29:38 +0200 (Mon, 12 Sep 2005)
New Revision: 319

Modified:
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/HttpSaver.js
   trunk/source/model/ModelTest.js
   trunk/source/model/RepositoryWritingTest.html
   trunk/source/model/RepositoryWritingTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/TestReorderingForSpecialCases.js
   trunk/source/model/TestReorderingForTypicalOrdinals.js
   trunk/source/model/TestSuite.html
   trunk/third_party/gtd_tiddlywiki/FileSaver.js
Log:
Modified FileSaver and HttpSaver to be more similar.  Made related changes in various files, in particular StubVirtualServer and DeltaVirtualServer.  Added DeltaVirtualServer.prototype._createNewRepository and two unit tests for it.  Changed RepositoryWritingTest to work with Windows (I hope).




Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/DeltaVirtualServer.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -55,16 +55,11 @@
 DeltaVirtualServer.prototype = new StubVirtualServer();  // makes DeltaVirtualServer be a subclass of StubVirtualServer
 function DeltaVirtualServer(repositoryName, pathToTrunkDirectory, optionalDefaultOverrides) {
   StubVirtualServer.call(this, pathToTrunkDirectory, optionalDefaultOverrides);
+  this._repositoryName = repositoryName;
   this._pathToTrunkDirectory = "";
   if (pathToTrunkDirectory) {
     this._pathToTrunkDirectory = pathToTrunkDirectory;
   }
-  
-  var axiomaticFileName = "2005_june_axiomatic_items.json";
-  var urlForAxiomaticFile = this._pathToTrunkDirectory + "source/model/" + axiomaticFileName;
-  
-  this._dehydratedAxiomFileURL = urlForAxiomaticFile;
-  this._repositoryName = repositoryName;
   this._hasEverFailedToSaveFlag = false;
 }
 
@@ -82,7 +77,11 @@
   this._loadAxiomaticItemsFromFileAtURL(this._dehydratedAxiomFileURL);
 
   var repositoryFileName = this._repositoryName + ".json";
-  var repositoryUrl = this._pathToTrunkDirectory + DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY + "/" + repositoryFileName;
+  var repositoryUrl = "";
+  if (this._needCompletePath) {
+    repositoryUrl = this._completePathToTrunkDirectory + '/';
+  }
+  repositoryUrl += DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY + "/" + repositoryFileName;
   var repositoryContentString = Util.getStringContentsOfFileAtURL(repositoryUrl);
   repositoryContentString += " ] }";
 
@@ -393,6 +392,40 @@
 
 
 /**
+ * @scope    private instance method
+ * @param    overwriteIfExists    Optional
+ * @return   success
+ */
+DeltaVirtualServer.prototype._createNewRepository = function(overwriteIfExists) {
+  if (this._saverObject) {
+    alert("this._saverObject is already initialized.");
+    return false;
+  }
+  if (window.location) {
+    if (window.location.protocol == "http:") {
+      this._saverObject = new HttpSaver(this._repositoryName, this._pathToTrunkDirectory);
+    }
+    if (window.location.protocol == "file:") {
+      this._saverObject = new FileSaver(this._repositoryName, this._pathToTrunkDirectory);
+    }
+  }
+  if (!this._saverObject) {
+    if (!this._hasEverFailedToSaveFlag) {
+      window.alert("I can't save changes to server, because this page was loaded from a \"file:///\" location, not a real \"http://\" location.  Sorry."); 
+      this._hasEverFailedToSaveFlag = true;
+    }
+    return false;
+  }
+  var text = '{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", \n';
+  text +=    '  "records": [\n';
+  text +=    '  // =======================================================================\n';
+  text +=    '  { "Transaction": [ ]\n';
+  text +=    '  }';
+  return this._saverObject.writeText(text, overwriteIfExists);
+};
+
+
+/**
  * Sends all the changes to the server, so that the server can record the
  * changes.
  *
@@ -410,11 +443,10 @@
   if (!this._saverObject) {
     if (window.location) {
       if (window.location.protocol == "http:") {
-        this._saverObject = new HttpSaver(this._pathToTrunkDirectory, this._repositoryName);
+        this._saverObject = new HttpSaver(this._repositoryName, this._pathToTrunkDirectory);
       }
       if (window.location.protocol == "file:") {
-        // var fileName = this._repositoryName + ".json";
-        this._saverObject = new FileSaver(this._repositoryName);
+        this._saverObject = new FileSaver(this._repositoryName, this._pathToTrunkDirectory);
       }
     }
   }

Modified: trunk/source/model/HttpSaver.js
===================================================================
--- trunk/source/model/HttpSaver.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/HttpSaver.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -33,22 +33,32 @@
  * The HttpSaver class knows how to save content to a server by using
  * XMLHttpRequest to call a PHP script.
  *
+ * @param    repositoryName                         // e.g. demo_page
+ * @param    pathToTrunkDirectoryFromWindowLocation // Not needed if window location is at the root of the trunk directory.
  * @scope    public instance constructor
  */
-function HttpSaver(pathToTrunkDirectory, repositoryName) {
-  this._pathToTrunkDirectory = pathToTrunkDirectory;
+function HttpSaver(repositoryName, pathToTrunkDirectoryFromWindowLocation) {
   this._repositoryName = repositoryName;
+  var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/demo_page.html or /openrecord/trunk/source/model/TestRepositoryWriting.html.
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk or /openrecord/trunk/source/model
+  if (pathToTrunkDirectoryFromWindowLocation) {
+    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectoryFromWindowLocation;
+  } else {
+    this._completePathToTrunkDirectory = thisDirectory;
+  }
 }
 
-
 /**
  * Returns a newly created XMLHttpRequest object.
  *
  * @scope    public instance method
- * @return   A newly created XMLHttpRequest object. 
+ * @return   A newly created XMLHttpRequest object.
  */
 HttpSaver.prototype.appendText = function(textToAppend) {
-    var url = this._pathToTrunkDirectory + "source/model/append_to_repository_file.php?file=" + this._repositoryName;
+  var url = this._completePathToTrunkDirectory;
+  url += "/source/model/append_to_repository_file.php?file=" + this._repositoryName;
   
   // PENDING: 
   // It might be more efficient to re-use the XMLHttpRequestObject,
@@ -64,7 +74,8 @@
 };
 
 HttpSaver.prototype.writeText = function(textToWrite, overwriteIfExists) {
-  var url = this._pathToTrunkDirectory + "source/model/write_to_repository_file.php?file=" + this._repositoryName;
+  var url = this._completePathToTrunkDirectory;
+  url += "/source/model/write_to_repository_file.php?file=" + this._repositoryName;
   if (overwriteIfExists) {
     url += "&overwrite=T";
   }

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/ModelTest.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -45,7 +45,7 @@
 function setUp() {
   ModelTestVars = {};
 
-  var pathToTrunkDirectory = "../../../";
+  var pathToTrunkDirectory = "../..";
   var stubVirtualServer = new StubVirtualServer(pathToTrunkDirectory);
   world = new World(stubVirtualServer);
 }

Modified: trunk/source/model/RepositoryWritingTest.html
===================================================================
--- trunk/source/model/RepositoryWritingTest.html	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/RepositoryWritingTest.html	2005-09-12 01:29:38 UTC (rev 319)
@@ -16,6 +16,8 @@
     <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
     <script type="text/javascript" src="../util/Util.js"></script>
     <script type="text/javascript" src="../util/Uuid.js"></script>
+    <script type="text/javascript" src="../util/TimeBasedUuid.js"></script>
+    <script type="text/javascript" src="../util/RandomUuid.js"></script>
     <script type="text/javascript" src="../util/DateValue.js"></script>
     <script type="text/javascript" src="HttpSaver.js"></script>
     <script type="text/javascript" src="Record.js"></script>

Modified: trunk/source/model/RepositoryWritingTest.js
===================================================================
--- trunk/source/model/RepositoryWritingTest.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/RepositoryWritingTest.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -27,11 +27,15 @@
 *****************************************************************************/
 
 var utilAssertReportedError;
-var pathToTrunkDirectory;
-var fileName;
-var universalFileSaver;
+var pathToTrunkDirectoryFromThisDirectory   = "../..";
+var fileName = "FakeRepository";
 var fileUrl;
 var saver;
+var expectedRepositoryHeader = '{ "format": "2005_JUNE_CHRONOLOGICAL_LIST", \n';
+expectedRepositoryHeader +=    '  "records": [\n';
+expectedRepositoryHeader +=    '  // =======================================================================\n';
+expectedRepositoryHeader +=    '  { "Transaction": [ ]\n';
+expectedRepositoryHeader +=    '  }';
 
 function errorReporter() {
   utilAssertReportedError = true;
@@ -54,30 +58,35 @@
   return (contents == expectedContents);
 }
 
+function fileHasExpectedSubstring(expectedSubstring) {
+  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  for (var i = 0; contents.indexOf(expectedSubstring) == -1 && i < 5; ++i) {
+    waitASecond();
+    contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  }
+  return (contents.indexOf(expectedSubstring) != -1);
+}
+
 function setUp() {
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter)
-  
-  pathToTrunkDirectoryFromFileSaver       = "../..";
-  pathToTrunkDirectoryFromThisDirectory   = "../..";
-  pathToTrunkDirectoryFromTestRunner      = "../../../";
-  fileName = "FakeRepository";
+
   var isHttp = window.location.protocol == "http:";
-  saver = isHttp? new HttpSaver(pathToTrunkDirectoryFromTestRunner, fileName) 
+  saver = isHttp? new HttpSaver(fileName, pathToTrunkDirectoryFromThisDirectory) 
                 : new FileSaver(fileName, pathToTrunkDirectoryFromThisDirectory);
 
+  // Examples of what window.location.pathname should look like:
+  // for http: protocol: /openrecord/trunk/source/model/TestRepositoryWriting.html
+  // for file: protocol on a Mac: /Libraries/.../openrecord/trunk/source/model/TestRepositoryWriting.html
+  // for file: protocol on a PC:  /C:/Documents and Settings/.../source/model/TestRepositoryWriting.html
+  var thisUrl = window.location.pathname;
+  var arrayOfPathComponents = thisUrl.split('/');
+  arrayOfPathComponents.pop();
+  var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
+
   // fileUrl must specify a file /repositories/*.json relative to the trunk directory, because
   // that's where FileSaver and HttpSaver will write
-  if (isHttp) {
-    // pathToTrunkDirectoryFromTestRunner is used by HttpSaver only to find the php files.
-    var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/source/model/TestRepositoryWriting.html.    
-    var arrayOfPathComponents = thisUrl.split('/');
-    arrayOfPathComponents.pop();
-    var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
-    fileUrl = thisDirectory + '/' + pathToTrunkDirectoryFromThisDirectory + "/repositories/" + fileName + ".json";
-  } else {
-    fileUrl = saver._getLocalPathFromWindowLocation([pathToTrunkDirectoryFromFileSaver, "repositories", fileName + ".json"]);
-  }
+  fileUrl = thisDirectory + '/' + pathToTrunkDirectoryFromThisDirectory + "/repositories/" + fileName + ".json";
 }
 
 function tearDown() {
@@ -115,6 +124,34 @@
   assertTrue("Contents should be timestamp1 & timestamp2.", fileHasExpectedContents(expectedContents));
 }
 
+function testCreateNewRepository() {
+  var virtualServer = new DeltaVirtualServer(fileName, pathToTrunkDirectoryFromThisDirectory);
+  var overwriteIfExists = true;
+  virtualServer._createNewRepository(overwriteIfExists);
+  assertTrue("Contents should be '{ \"format\": \"2005_JUNE_CHRONOLOGICAL_LIST\", ...'.", fileHasExpectedContents(expectedRepositoryHeader));
+}
+
+function testAppendToRepository() {
+  var virtualServer = new DeltaVirtualServer(fileName, pathToTrunkDirectoryFromThisDirectory);
+  var overwriteIfExists = true;
+  virtualServer._createNewRepository(overwriteIfExists);
+  var world = new World(virtualServer);
+  var listOfUsers = world.getUsers();
+  var mignon = null;
+  for (var key in listOfUsers) {
+    if (listOfUsers[key].getDisplayName() == "Mignon Belongie") {
+      mignon = listOfUsers[key];
+    }
+  }
+  assertTrue("mignon should not be null", mignon != null);
+  world.login(mignon, "");
+  world.beginTransaction();
+  var apple = world.newItem("Apple");
+  world.endTransaction();
+  assertTrue("Contents should include expectedRepositoryHeader.", fileHasExpectedSubstring(expectedRepositoryHeader));
+  assertTrue("Contents should include '\"value\": \"Apple\"'.", fileHasExpectedSubstring('"value": "Apple"'));
+}
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/StubVirtualServer.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -97,13 +97,20 @@
  */
 function StubVirtualServer(pathToTrunkDirectory) {
   var fileName = "2005_june_axiomatic_items.json";
-  var urlForAxiomaticFile = "";
+  var relUrlForAxiomaticFile = "source/model/" + fileName;
   if (pathToTrunkDirectory) {
-    urlForAxiomaticFile = pathToTrunkDirectory;
+    this._needCompletePath = true;
+    var thisUrl = window.location.pathname; //e.g. /openrecord/trunk/source/model/TestRepositoryWriting.html.
+    var arrayOfPathComponents = thisUrl.split('/');
+    arrayOfPathComponents.pop();
+    var thisDirectory = arrayOfPathComponents.join('/'); //e.g. /openrecord/trunk/source/model
+    this._completePathToTrunkDirectory = thisDirectory + '/' + pathToTrunkDirectory;
+    this._dehydratedAxiomFileURL = this._completePathToTrunkDirectory + '/' + relUrlForAxiomaticFile;
+  } else {
+    this._needCompletePath = false;
+    this._dehydratedAxiomFileURL = relUrlForAxiomaticFile;    
   }
-  urlForAxiomaticFile += "source/model/" + fileName;
   
-  this._dehydratedAxiomFileURL = urlForAxiomaticFile;
   /*
   if (optionalDefaultOverrides) {
     this._processOptionalDefaultOverrides(optionalDefaultOverrides, "Stub");

Modified: trunk/source/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/source/model/TestReorderingForSpecialCases.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/TestReorderingForSpecialCases.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -50,7 +50,7 @@
 function setUp() {
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter);
-  var pathToTrunkDirectory = "../../../";
+  var pathToTrunkDirectory = "../..";
   // var virtualServer = new StubVirtualServer(pathToTrunkDirectory, {"_generateUuid":mockUuidGenerator});
   var virtualServer = new StubVirtualServer(pathToTrunkDirectory);
   StubVirtualServer.prototype._generateUuid = mockUuidGenerator;

Modified: trunk/source/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -54,7 +54,7 @@
 function setUp() {
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter);
-  var pathToTrunkDirectory = "../../../";
+  var pathToTrunkDirectory = "../..";
   // var virtualServer = new StubVirtualServer(pathToTrunkDirectory, {"_generateUuid":mockUuidGenerator});
   var virtualServer = new StubVirtualServer(pathToTrunkDirectory);
   StubVirtualServer.prototype._generateUuid = mockUuidGenerator;

Modified: trunk/source/model/TestSuite.html
===================================================================
--- trunk/source/model/TestSuite.html	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/source/model/TestSuite.html	2005-09-12 01:29:38 UTC (rev 319)
@@ -24,6 +24,7 @@
       function dataModelTestSuite() {
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../source/model/ModelTest.html");
+        testSuite.addTestPage("../../../source/model/RepositoryWritingTest.html");
         testSuite.addTestPage("../../../source/model/TestReorderingForTypicalOrdinals.html");
         testSuite.addTestPage("../../../source/model/TestReorderingForSpecialCases.html");
         testSuite.addTestPage("../../../source/model/LintTest.html");

Modified: trunk/third_party/gtd_tiddlywiki/FileSaver.js
===================================================================
--- trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-08 00:18:49 UTC (rev 318)
+++ trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-12 01:29:38 UTC (rev 319)
@@ -60,18 +60,7 @@
  */
 function FileSaver(repositoryName, pathToTrunkDirectory) {
   this._repositoryName = repositoryName;
-  if (pathToTrunkDirectory) {
-    this._pathToTrunkDirectory = pathToTrunkDirectory;
-  }
-}
-
-
-/**
- * Appends text to a file.
- *
- * @scope    public instance method
- */
-FileSaver.prototype.appendText = function(textToAppend) {
+  
   // Step 1: Build the fileUrl
   // 
   // Our saveTextToFile() method needs a fileUrl that looks like this:
@@ -87,28 +76,28 @@
   //   fileUrl = "K:/www/htdocs/openrecord/demo/current/trunk/repositories/demo_page.json";
 
   var listOfAdditions = [];
-  if (this._pathToTrunkDirectory) {
-    listOfAdditions.push(this._pathToTrunkDirectory);
+  if (pathToTrunkDirectory && pathToTrunkDirectory != "") {
+    listOfAdditions.push(pathToTrunkDirectory);
   }
   listOfAdditions.push(DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY);
   listOfAdditions.push(this._repositoryName + ".json");
-  var fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
-  
+  this._fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
+}
+
+
+/**
+ * Appends text to a file.
+ *
+ * @scope    public instance method
+ */
+FileSaver.prototype.appendText = function(textToAppend) {
   var append = true;
-  this._saveTextToFile(textToAppend, fileUrl, append);
+  this._saveTextToFile(textToAppend, this._fileUrl, append);
 };
 
 FileSaver.prototype.writeText = function(textToWrite, overwriteIfExists) {
-  var listOfAdditions = [];
-  if (this._pathToTrunkDirectory) {
-    listOfAdditions.push(this._pathToTrunkDirectory);
-  }
-  listOfAdditions.push(DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY);
-  listOfAdditions.push(this._repositoryName + ".json");
-  var fileUrl = this._getLocalPathFromWindowLocation(listOfAdditions);
-
   var append = false;
-  this._saveTextToFile(textToWrite, fileUrl, append);
+  this._saveTextToFile(textToWrite, this._fileUrl, append);
 }
 
 /**



From skinner at berlios.de  Tue Sep 13 05:09:40 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 13 Sep 2005 05:09:40 +0200
Subject: [openrecord-svn] r320 - trunk/documentation
Message-ID: <200509130309.j8D39elD019061@sheep.berlios.de>

Author: skinner
Date: 2005-09-13 05:09:36 +0200 (Tue, 13 Sep 2005)
New Revision: 320

Modified:
   trunk/documentation/release_planning.txt
Log:
updated release_planning.txt

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-12 01:29:38 UTC (rev 319)
+++ trunk/documentation/release_planning.txt	2005-09-13 03:09:36 UTC (rev 320)
@@ -352,23 +352,30 @@
 -------+----------+---------+----------------------------------------------
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
-       |          |         |  1. look into using the Dojo Package System
+brian  |          | done    |  1. look into using the Dojo Package System
+       |          |         |     convert code to use Dojo Package System
+brian  | 0.25 IED |         |     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
+brian  | 0.25 IED |         |     refactor UUID constructor API
        |          |         |  2. create a FakeStorage class, + rename FileSaver + HttpSaver
        |          |         |  3. rename Dehydrate and Rehydrate to Serialize and Deserialize
        |          |         |  4. merge StubVirtualServer + DeltaVirtualServer, and re-name
-       |          |         |  5. consider a different JSON representation for DateValues
+       |          |         |  5. research standard text representations for DateValues
        |          |         |  6. make ordinal value strings not grow long so quickly
        |          |         |  7. Do lazy creation of layout data items
-       |          |         |  8. Improve and document the Data model public api
+brian  | 0.5  IED |         |     Make Item.js use namedParameter based API
+brian  |          |         |     Decide whether or not to replace bi-directional connection entries with twin-entries
+       |          |         |  8. Document the Data model public API
        |          |         |  9. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
        |          |         | 10. Pick one file, and do a group code review on it
        |          |         | 11. Implement a good URL-to-content mapping, so that URLs won't go bad in future releases
-       |          |         | 12. Rationalize the View api and document public api
-       |          |         | 13. Create a "plugin" or "plugin_view" directory 
+       |          |         | 12. Rationalize the View API and document public API
+mignon | 1    IED |         |     Rationalize the ViewPlugin API
+mignon | 0.25 IED |         | 13. Create a "view_plugins" directory & change "TablePlugin" to "TableView", etc. 
+mignon | 2    IED |         |     Automatically load ViewPlugins found in the view_plugins directory 
        |          |         | 14. Make RootView subclass from View, or add comments explaining why it doesn't
        |          |         | 15. Make DateValue subclass from Date, or wrap an internal Date object
 -------+----------+---------+----------------------------------------------
-       |          |         |     Fix the message that says "Sorry, for some reason OpenRecrod was not able to launch."
+       |          |         |     Fix the message that says "Sorry, for some reason OpenRecord was not able to launch."
        |          |         | 16. Assign system attributes & categories to a "System" category
        |          |         | 17. Hide "System" items most of the time
        |          |         | 18. improve UI for creating a new category



From skinner at berlios.de  Tue Sep 13 22:55:49 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 13 Sep 2005 22:55:49 +0200
Subject: [openrecord-svn] r321 - trunk/source/model
Message-ID: <200509132055.j8DKtn08002826@sheep.berlios.de>

Author: skinner
Date: 2005-09-13 22:55:48 +0200 (Tue, 13 Sep 2005)
New Revision: 321

Modified:
   trunk/source/model/RepositoryWritingTest.js
Log:
Added comments to test file.

Modified: trunk/source/model/RepositoryWritingTest.js
===================================================================
--- trunk/source/model/RepositoryWritingTest.js	2005-09-13 03:09:36 UTC (rev 320)
+++ trunk/source/model/RepositoryWritingTest.js	2005-09-13 20:55:48 UTC (rev 321)
@@ -37,6 +37,11 @@
 expectedRepositoryHeader +=    '  { "Transaction": [ ]\n';
 expectedRepositoryHeader +=    '  }';
 
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
 function errorReporter() {
   utilAssertReportedError = true;
 }
@@ -67,6 +72,11 @@
   return (contents.indexOf(expectedSubstring) != -1);
 }
 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter)
@@ -93,6 +103,11 @@
   assertFalse(utilAssertReportedError);
 }
 
+
+// -------------------------------------------------------------------
+// Test methods
+// -------------------------------------------------------------------
+
 function testCreateNewFile() {
   var now = new Date();
   var timestamp = now.toString() + " " + now.valueOf();



From skinner at berlios.de  Tue Sep 13 22:59:27 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 13 Sep 2005 22:59:27 +0200
Subject: [openrecord-svn] r322 - in trunk/source: . model util
Message-ID: <200509132059.j8DKxRtW003102@sheep.berlios.de>

Author: skinner
Date: 2005-09-13 22:59:27 +0200 (Tue, 13 Sep 2005)
New Revision: 322

Modified:
   trunk/source/OpenRecordLoader.js
   trunk/source/model/Item.js
   trunk/source/util/CsvParser.js
   trunk/source/util/TimeBasedUuid.js
Log:
Added comments with notes about changes to make.

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-09-13 20:55:48 UTC (rev 321)
+++ trunk/source/OpenRecordLoader.js	2005-09-13 20:59:27 UTC (rev 322)
@@ -147,11 +147,22 @@
 // This code is immediately executed when this file is first loaded.
 // -------------------------------------------------------------------
 dojo.hostenv.setModulePrefix("orp", "../../../source");
-// dojo.require("orp.util.CsvParser");
 OpenRecordLoader.loadEverything();
 window.onload = function() { 
-  var world = new World();
-  new RootView(world);
+  // figure out if we're running in IE or Firefox
+  var firefox = true;  // PENDING: hack!
+  var errorMessage;
+  if (!firefox) {
+    errorMessage = "IE error message";
+    // display errorMessage
+    return;
+  }
+  if (firefox) {
+    errorMessage = "Loading...";
+    // display errorMessage
+    var world = new World();
+    new RootView(world);
+  }
 };    
 
 

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-09-13 20:55:48 UTC (rev 321)
+++ trunk/source/model/Item.js	2005-09-13 20:59:27 UTC (rev 322)
@@ -91,6 +91,62 @@
 // Entry adding methods
 // -------------------------------------------------------------------
 
+/* PENDING: refactor these methods as per Sept 12 plan:
+// OLD
+item.addEntry(value)
+item.addEntry(value, type)
+item.addEntryForAttribute(attribute, value)
+item.addEntryForAttribute(attribute, value, type)
+
+item.replaceEntry(previousEntry, value)
+item.replaceEntry(previousEntry, value, type)
+item.replaceEntryWithEntryForAttribute(previousEntry, attribute, value)
+item.replaceEntryWithEntryForAttribute(previousEntry, attribute, value, type)
+
+item.addConnectionEntry(myAttribute, otherItem, otherAttribute)
+Item.replaceEntryWithConnection(previousEntry, myAttribute, otherItem, otherAttribute)
+
+// NEW
+ **
+ * Creates a new entry object ...
+ *
+ * @scope    public instance method
+ * @namedParam    value    ... 
+ * @namedParam    type    ... 
+ * @namedParam    attribute    Optional. ...
+ * @return   The new entry object.
+ * @throws   Throws an Error if no user is logged in.
+ *
+Item.prototype.addEntry = function(namedParameters) {
+// function initializer
+// input/parameter/argument hash table
+// input/parameter/argument hash
+// anonymous object
+// input/parameter/argument dictionary
+// input/parameter/argument initializer
+// named parameters
+// keyword parameters
+};
+
+item.addEntry({value:
+               type:
+               attribute: })
+
+item.replaceEntry({value:
+               type:
+               attribute:
+               previousEntry: })
+
+item.addConnectionEntry({myAttribute:
+                        otherItem:
+                        otherAttribute: })
+
+item.replaceEntryWithConnection({previousEntry: 
+                        myAttribute:
+                        otherItem:
+                        otherAttribute: })
+*/
+
 /**
  * Creates a new entry object and adds the new entry to the item's 
  * list of entries.
@@ -300,7 +356,15 @@
 // -------------------------------------------------------------------
 // Accessor methods where the answer depends on the retrieval filter
 // -------------------------------------------------------------------
+/* PENDING: add this API
 
+var entries = item.getValuesForAttribute(height);
+for (var i in values) {
+  var value = value[i];
+  // display value on screen
+}
+*/
+
 /**
  * Given an attribute, this method returns the list of all the entries that 
  * have been assigned to that attribute for this item.

Modified: trunk/source/util/CsvParser.js
===================================================================
--- trunk/source/util/CsvParser.js	2005-09-13 20:55:48 UTC (rev 321)
+++ trunk/source/util/CsvParser.js	2005-09-13 20:59:27 UTC (rev 322)
@@ -29,6 +29,7 @@
 *****************************************************************************/
 
 dojo.provide("orp.util.CsvParser");
+// dojo.require("orp.util.Util");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-13 20:55:48 UTC (rev 321)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-13 20:59:27 UTC (rev 322)
@@ -51,6 +51,44 @@
  *
  * @scope    public instance constructor
  */
+/*
+ * PENDING: refactor constructor API
+ // OLD API
+var uuid = new orp.util.TimeBasedUuid();                 // new
+var uuid = new orp.util.TimeBasedUuid("917BF397618A");   // pseudonode
+var uuid = new orp.util.TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A")
+
+// NEW API
+var uuid = new orp.util.TimeBasedUuid();
+var uuid = new orp.util.TimeBasedUuid({pseudoNode: "917BF397618A"});
+var uuid = new orp.util.TimeBasedUuid({node: "917BF397618A"});
+var uuid = new orp.util.TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+
+
+var uuid = new orp.util.RandomUuid();
+var uuid = new orp.util.RandomUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+
+var uuid = new orp.util.Uuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+var version = orp.util.Uuid.getVersionFromUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
+var version = orp.util.Uuid.getVariantFromUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
+var boolean = orp.util.Uuid.isRandomUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
+var boolean = orp.util.Uuid.isTimeBasedUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
+
+// in Uuid.js
+var Version = {
+  TimeBased: 1,
+  DCESecurity: 2,
+  NameBasedMD5: 3,
+  Random: 4,
+  NameBasedSHA1: 5
+}
+
+var Variant = {
+  NCS: "0",
+  DCE: "10",
+  Microsoft: "110"
+}
+*/
 TimeBasedUuid.prototype = new Uuid();  // makes TimeBasedUuid be a subclass of Uuid
 function TimeBasedUuid(uuidStringOrPseudoNode) {
   if (uuidStringOrPseudoNode) {



From skinner at berlios.de  Tue Sep 13 23:05:20 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 13 Sep 2005 23:05:20 +0200
Subject: [openrecord-svn] r323 - in trunk: source/scrap_yard tests tests/tests_of_external_code
Message-ID: <200509132105.j8DL5KZk003576@sheep.berlios.de>

Author: skinner
Date: 2005-09-13 23:05:19 +0200 (Tue, 13 Sep 2005)
New Revision: 323

Added:
   trunk/tests/tests_of_external_code/
   trunk/tests/tests_of_external_code/TimingTest.html
   trunk/tests/tests_of_external_code/TimingTest.js
Removed:
   trunk/source/scrap_yard/Timestamp.js
   trunk/source/scrap_yard/TimingTest.html
   trunk/source/scrap_yard/TimingTest.js
Log:
Moved TimingTest code to test directory, and deleted Timestamp.js.

Deleted: trunk/source/scrap_yard/Timestamp.js
===================================================================
--- trunk/source/scrap_yard/Timestamp.js	2005-09-13 20:59:27 UTC (rev 322)
+++ trunk/source/scrap_yard/Timestamp.js	2005-09-13 21:05:19 UTC (rev 323)
@@ -1,88 +0,0 @@
-/*****************************************************************************
- Timestamp.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-
-// -------------------------------------------------------------------
-// Dependencies:
-//   Date
-// -------------------------------------------------------------------
-
-
-/**
- * A Timestamp instance records when it was created.  Each Timestamp
- * includes a Date object, which records the time in milliseconds since
- * 1970.  In some use cases, thousands of Timestamp objects may be
- * created within a single millisecond.  All of these Timestamps 
- * will have Date objects with identical values.  To determine the
- * sequence in which the Timestamps were created, we need each 
- * Timestamp to have not only a Date object, but also a "sequence
- * number".  Given two Timestamps with identical Date values, the 
- * sequence number tells which was created first.
- *
- * @scope    public instance constructor
- * @param    inDate    Optional. A Date object. 
- * @param    inSubMillisecondSequenceNumber    Optional. A number. 
- */
-function Timestamp(inDate, inSequenceNumber) {
-  if (inDate && inSubMillisecondSequenceNumber) {
-    // We're "rehydrating" an old Timestamp that we already know
-    // the internal state information of.
-    this.__myDate = inDate;
-    this.__mySequenceNumber = inSequenceNumber;
-  } else {
-    // We creating a brand new Timestamp, so we need to stamp it
-    // with the current time.
-    this.__myDate = new Date();
-    if (!Timestamp.__ourCurrentMillisecond) {
-      // This is the first Timestamp to ever be created
-      Timestamp.__ourCurrentMillisecond = this.__myDate.valueOf();
-      this.__mySequenceNumber = 1;
-      Timestamp.__ourNextAvailableSequenceNumber = 2;
-    } else {
-      var dateInMilliseconds = this.__myDate.valueOf();
-      if (dateInMilliseconds == Timestamp.__ourCurrentMillisecond) {
-        // We've already created a previous Timestamp in this same
-        // millisecond, so this new Timestamp needs a bigger 
-        // sequence number.
-        this.__mySequenceNumber = Timestamp.__ourNextAvailableSequenceNumber;
-        Timestamp.__ourNextAvailableSequenceNumber += 1;
-      } else {
-        // The last Timestamp we gave out happened long ago.
-        Timestamp.__ourCurrentMillisecond = dateInMilliseconds;
-        this.__mySequenceNumber = 1;
-        Timestamp.__ourNextAvailableSequenceNumber = 2;
-      }
-    }
-  }
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/scrap_yard/TimingTest.html
===================================================================
--- trunk/source/scrap_yard/TimingTest.html	2005-09-13 20:59:27 UTC (rev 322)
+++ trunk/source/scrap_yard/TimingTest.html	2005-09-13 21:05:19 UTC (rev 323)
@@ -1,76 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>JavaScript timing tests</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../Util.js"></script>
-    <script type="text/javascript" src="TimingTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>JavaScript timing tests</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>You should be able to run these unit tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/scrap_yard/TimingTest.js
===================================================================
--- trunk/source/scrap_yard/TimingTest.js	2005-09-13 20:59:27 UTC (rev 322)
+++ trunk/source/scrap_yard/TimingTest.js	2005-09-13 21:05:19 UTC (rev 323)
@@ -1,351 +0,0 @@
-/*****************************************************************************
- TimingTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-// Results from running this test circa Sept 2005, using Brian's Dell Inspiron 9300:
-//  0   microseconds for EMPTY_LOOP
-//  6.0 microseconds for ARRAY_CREATION
-//  4.4 microseconds for OBJECT_CREATION
-//  4.3 microseconds for OBJECT_CREATION_WITH_STRINGS
-//  2.9 microseconds for DATE_CREATION
-//  1.3 microseconds for METHOD_CALL
-//  1.1 microseconds for GLOBAL_VARIABLE_LOOKUP
-//  0.7 microseconds for DATE_VALUEOF
-//  7.5 microseconds for TEST_TYPE_ONE_BOX
-//  5.9 microseconds for TEST_TYPE_TWO_BOX
-
-// Results from running this test circa May 2005, using Brian's Dell Dimension 4600:
-//  0   microseconds for EMPTY_LOOP
-// 16   microseconds for ARRAY_CREATION
-// 15   microseconds for OBJECT_CREATION
-// 14   microseconds for OBJECT_CREATION_WITH_STRINGS
-// 11   microseconds for DATE_CREATION
-//  2.3 microseconds for METHOD_CALL
-//  1.3 microseconds for GLOBAL_VARIABLE_LOOKUP
-//  1.2 microseconds for DATE_VALUEOF
-// 16    microseconds for ENTRY_COMPAREORDINALS
-
-// Results from a different test program circa May 2005, using Brian's Dell Dimension 4600:
-//  0.78 microseconds to create a new Array:   var a = [x, y];
-//  0.59 microseconds to create a new Object:  var o = {here: x, there: y};
-//  0.59 microseconds to create a new Object:  var o = {"here": x, "there": y};
-//  0.49 microseconds to create a new Date:    var d = new Date();
-//  0.18 microseconds to call a global method: noop();
-//  0.15 microseconds to look up a global:     ModelTestVars = null;
-//  0.06 microseconds to call Date.valueOf:    var foo = now.valueOf();
-//  0.88 microseconds to call compareOrdinals: var foo = Entry.compareOrdinals(e1, e2);
-
-var TEST_EMPTY_LOOP = "EMPTY_LOOP";
-var TEST_ARRAY_CREATION = "ARRAY_CREATION";
-var TEST_OBJECT_CREATION = "OBJECT_CREATION";
-var TEST_OBJECT_CREATION_WITH_STRINGS = "OBJECT_CREATION_WITH_STRINGS";
-var TEST_DATE_CREATION = "DATE_CREATION";
-var TEST_METHOD_CALL = "METHOD_CALL";
-var TEST_GLOBAL_VARIABLE_LOOKUP = "GLOBAL_VARIABLE_LOOKUP";
-var TEST_DATE_VALUEOF = "DATE_VALUEOF";
-// var TEST_ENTRY_COMPAREORDINALS = "ENTRY_COMPAREORDINALS";
-var TEST_TYPE_ONE_BOX = "TYPE_ONE_BOX";
-var TEST_TYPE_TWO_BOX = "TYPE_TWO_BOX";
-
-function testTimes() {
-  var testName;
-  var hashTableOfOperationsPerMillisecondKeyedByTestName = {};
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_EMPTY_LOOP] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_ARRAY_CREATION] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_OBJECT_CREATION] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_OBJECT_CREATION_WITH_STRINGS] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_DATE_CREATION] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_METHOD_CALL] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_GLOBAL_VARIABLE_LOOKUP] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_DATE_VALUEOF] = null;
-  // hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_ENTRY_COMPAREORDINALS] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_TYPE_ONE_BOX] = null;
-  hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_TYPE_TWO_BOX] = null;
-  for (testName in hashTableOfOperationsPerMillisecondKeyedByTestName) {
-    var opsPerMS = getOpsPerMS(testName);
-    hashTableOfOperationsPerMillisecondKeyedByTestName[testName] = opsPerMS;
-  }
-  var resultMessage = "";
-  for (testName in hashTableOfOperationsPerMillisecondKeyedByTestName) {
-    var opsPerMS = hashTableOfOperationsPerMillisecondKeyedByTestName[testName];
-    var emptyLoopsPerMS = hashTableOfOperationsPerMillisecondKeyedByTestName[TEST_EMPTY_LOOP];
-    var microSecondsPerEmptyLoop = 1000 / emptyLoopsPerMS;
-    var microSecondsPerOperationGross = 1000 / opsPerMS;
-    var microSecondsPerOperationNet = microSecondsPerOperationGross - microSecondsPerEmptyLoop;
-    resultMessage += microSecondsPerOperationNet.toFixed(1) + " microseconds for " + testName + "\n";
-  }
-  
-  alert(resultMessage);
-}
-
-function noop() {
-  return 0;
-}
-
-function getOpsPerMS(inTestName) {
-
-  var numberOfMillisecondsWorthOfTrials = 500;
-  var operationsPerForLoopIteration = 10;
-  var numberOfForLoopIterations = 5;
-  var operationsPerWhileLoopIteration = numberOfForLoopIterations * operationsPerForLoopIteration;
-  var totalOperations = 0;
-  
-/*
-  if (inTestName == TEST_ENTRY_COMPAREORDINALS) {
-    var world = {};
-    world.getCurrentUser = function () { return this; };
-    var e1 = new Entry();
-    var e2 = new Entry();
-    e1._Entry(world, 1);
-    e2._Entry(world, 2);
-    e1._initializeEntry();
-    e2._initializeEntry();
-  }
-*/
-  var start = new Date();
-  var startMS = start.valueOf();
-  var nowMS = startMS;
-  var i;
-  var now;
-  var foo;
-  
-  while (nowMS == startMS) {
-    now = new Date();
-    nowMS = now.valueOf();
-  }
-  
-  startMS = nowMS;
-  
-  while ((nowMS - startMS) < numberOfMillisecondsWorthOfTrials) {
-    if (inTestName == TEST_EMPTY_LOOP) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        // empty: do nothing
-      }
-    }
-    if (inTestName == TEST_ARRAY_CREATION) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-        foo = [nowMS, startMS];
-      }
-    }
-    if (inTestName == TEST_OBJECT_CREATION) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-        foo = {now: nowMS, start: startMS};
-      }
-    }
-    if (inTestName == TEST_OBJECT_CREATION_WITH_STRINGS) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-        foo = {"now": nowMS, "start": startMS};
-      }
-    }
-    if (inTestName == TEST_DATE_CREATION) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-        foo = new Date();
-      }
-    }
-    if (inTestName == TEST_METHOD_CALL) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = noop();
-        foo = noop();
-        foo = noop();
-        foo = noop();
-        foo = noop();
-        foo = noop();
-        foo = noop();
-        foo = noop();
-        foo = noop();
-        foo = noop();
-      }
-    }
-    if (inTestName == TEST_GLOBAL_VARIABLE_LOOKUP) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-        foo = TEST_EMPTY_LOOP;
-      }
-    }
-    if (inTestName == TEST_DATE_VALUEOF) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-        foo = now.valueOf();
-      }
-    }
-/*
-    if (inTestName == TEST_ENTRY_COMPAREORDINALS) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-        foo = Entry.compareOrdinals(e1, e2);
-      }
-    }
- */
-    if (inTestName == TEST_TYPE_ONE_BOX) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-        foo = new shapes.TypeOneBox(10, 10);
-      }
-    }
-    if (inTestName == TEST_TYPE_TWO_BOX) {
-      for (i = 0; i < numberOfForLoopIterations; i += 1) {
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-        foo = new shapes.TypeTwoBox(10, 10);
-      }
-    }
-    now = new Date();
-    nowMS = now.valueOf();
-    totalOperations += operationsPerWhileLoopIteration;
-  }
-     
-//  now = new Date();
-//  nowMS = now.valueOf();   
-//  var elapsedMS = nowMS - startMS;
-//  var totalOperations = operationsPerForLoopIteration * numberOfForLoopIterations;
-//  var operationsPerMillisecond = totalOperations / elapsedMS;
-
-  var operationsPerMillisecond = totalOperations / numberOfMillisecondsWorthOfTrials;
-  return operationsPerMillisecond;  
-}
-
-function testBoxConstruction() {
-  var boxA = new shapes.TypeOneBox(10, 10);
-  var boxB = new shapes.TypeOneBox(10, 10);
-  assertTrue("'TypeOneBox' objects each have their own 'getValue' method", boxA.getArea != boxB.getArea);
-  
-  boxA = new shapes.TypeTwoBox(10, 10);
-  boxB = new shapes.TypeTwoBox(10, 10);
-  assertTrue("'TypeTwoBox' objects share a common 'getValue' method", boxA.getArea == boxB.getArea);
-}
-
-shapes = {
-  TypeOneBox: function(width, height) {
-    this._width = width;
-    this._height = height;
-    
-    this.getArea = function() {
-      // do some busy work
-      var foo = [10];
-      for (var i in foo) {
-        var area = (this._width * this._height);
-      }
-      return area;
-    }
-  }
-};
-
-shapes.TypeTwoBox = function(width, height) {
-  this._width = width;
-  this._height = height;
-};
-
-shapes.TypeTwoBox.prototype.getArea = function() {
-  // do some busy work
-  var foo = [10];
-  for (var i in foo) {
-    var area = (this._width * this._height);
-  }
-  return area;
-};
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Copied: trunk/tests/tests_of_external_code/TimingTest.html (from rev 319, trunk/source/scrap_yard/TimingTest.html)

Copied: trunk/tests/tests_of_external_code/TimingTest.js (from rev 319, trunk/source/scrap_yard/TimingTest.js)



From skinner at berlios.de  Tue Sep 13 23:07:04 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 13 Sep 2005 23:07:04 +0200
Subject: [openrecord-svn] r324 - trunk/source
Message-ID: <200509132107.j8DL74RI003761@sheep.berlios.de>

Author: skinner
Date: 2005-09-13 23:07:04 +0200 (Tue, 13 Sep 2005)
New Revision: 324

Removed:
   trunk/source/scrap_yard/
Log:
Deleted scrap_yard directory



From skinner at berlios.de  Wed Sep 14 03:25:52 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 14 Sep 2005 03:25:52 +0200
Subject: [openrecord-svn] r325 - in trunk: documentation source source/model source/util tests/util
Message-ID: <200509140125.j8E1PqUS020376@sheep.berlios.de>

Author: skinner
Date: 2005-09-14 03:25:38 +0200 (Wed, 14 Sep 2005)
New Revision: 325

Added:
   trunk/tests/util/TestSuite.html
   trunk/tests/util/UuidTest.html
   trunk/tests/util/UuidTest.js
Modified:
   trunk/documentation/release_planning.txt
   trunk/source/TestSuite.html
   trunk/source/model/ContentRecord.js
   trunk/source/model/MockUuidGenerator.js
   trunk/source/model/ModelTest.html
   trunk/source/model/ModelTest.js
   trunk/source/model/Record.js
   trunk/source/model/RepositoryWritingTest.html
   trunk/source/model/RepositoryWritingTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/TestReorderingForSpecialCases.html
   trunk/source/model/TestReorderingForSpecialCases.js
   trunk/source/model/TestReorderingForTypicalOrdinals.html
   trunk/source/model/TestReorderingForTypicalOrdinals.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Util.js
   trunk/source/util/UtilTest.js
   trunk/source/util/Uuid.js
Log:
Converted the three UUID classes to use the Dojo inheritance mechanism and the Dojo package system.  Moved UUID tests over into the test directory.  Fixed up other code as needed.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/documentation/release_planning.txt	2005-09-14 01:25:38 UTC (rev 325)
@@ -354,7 +354,7 @@
 -------+----------+---------+----------------------------------------------
 brian  |          | done    |  1. look into using the Dojo Package System
        |          |         |     convert code to use Dojo Package System
-brian  | 0.25 IED |         |     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
+brian  | 0.25 IED | 0   IED |     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
 brian  | 0.25 IED |         |     refactor UUID constructor API
        |          |         |  2. create a FakeStorage class, + rename FileSaver + HttpSaver
        |          |         |  3. rename Dehydrate and Rehydrate to Serialize and Deserialize

Modified: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/TestSuite.html	2005-09-14 01:25:38 UTC (rev 325)
@@ -25,7 +25,7 @@
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../tests/SimpleTest.html");
         testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
-        testSuite.addTestPage("../../../tests/util/CsvParserTest.html");
+        testSuite.addTestPage("../../../tests/util/TestSuite.html");
         testSuite.addTestPage("../../../source/LintTest.html");
         testSuite.addTestPage("../../../source/model/TestSuite.html");
         testSuite.addTestPage("../../../source/util/TestSuite.html");
@@ -43,6 +43,11 @@
     
     <p>&nbsp;</p>
     <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
     <p>To see the tests, open this .html file in a text editor. Or, within a  
     web browser, you should be able see the source for this file by using 
     some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
@@ -55,19 +60,6 @@
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/ContentRecord.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -255,6 +255,8 @@
  * @param    contentRecordThird    The contentRecord that should come after this one. 
  */
 ContentRecord.prototype.reorderBetween = function(contentRecordFirst, contentRecordThird) {
+  var RandomUuid = orp.util.RandomUuid;
+  
   var firstOrdinalNumber = null;
   var secondOrdinalNumber = null;
   var thirdOrdinalNumber = null;

Modified: trunk/source/model/MockUuidGenerator.js
===================================================================
--- trunk/source/model/MockUuidGenerator.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/MockUuidGenerator.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -29,19 +29,22 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
+// dojo.require("orp.util.TimeBasedUuid");
 
-mockUuidGenerator.queueOfUuids = new Array();
-
 function mockUuidGenerator() {
+  dojo.require("orp.util.TimeBasedUuid");
+  
   if (mockUuidGenerator.queueOfUuids.length === 0) {
     // This should probably throw an exception instead.    
     return "00000000-0000-0000-0000-000000000000";
   }
   var uuidString = mockUuidGenerator.queueOfUuids.shift();
-  var uuid = new TimeBasedUuid(uuidString);
+  var uuid = new orp.util.TimeBasedUuid(uuidString);
   return uuid;
 }
 
+mockUuidGenerator.queueOfUuids = new Array();
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/ModelTest.html
===================================================================
--- trunk/source/model/ModelTest.html	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/ModelTest.html	2005-09-14 01:25:38 UTC (rev 325)
@@ -14,11 +14,9 @@
     <title>Unit tests for the data model</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="../util/Util.js"></script>
-    <script type="text/javascript" src="../util/Uuid.js"></script>
-    <script type="text/javascript" src="../util/TimeBasedUuid.js"></script>
-    <script type="text/javascript" src="../util/RandomUuid.js"></script>
     <script type="text/javascript" src="../util/DateValue.js"></script>
     <script type="text/javascript" src="Record.js"></script>
     <script type="text/javascript" src="Ordinal.js"></script>
@@ -42,6 +40,11 @@
     
     <p>&nbsp;</p>
     <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
     <p>To see the tests, open this .html file in a text editor. Or, within a  
     web browser, you should be able see the source for this file by using 
     some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
@@ -54,19 +57,6 @@
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/ModelTest.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -42,7 +42,12 @@
 var ModelTestVars = null;
 var world;
 
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
   ModelTestVars = {};
 
   var pathToTrunkDirectory = "../..";
@@ -50,6 +55,15 @@
   world = new World(stubVirtualServer);
 }
 
+function tearDown() {
+  ModelTestVars = null;
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
 function testUuids() {
   var janesPassword = "jane's password";
   var userJane = world.newUser("Jane Doe", janesPassword);  
@@ -93,14 +107,6 @@
   assertTrue("The user that created 'starWars' should be Jane", recoveredUser == userJane);  
 }
 
-function waitForNextMillisecond() {
-  var now = new Date();
-  var then = now;
-  while (now.valueOf() == then.valueOf()) {
-    now = new Date();
-  }
-}
-
 function testGetTimestamp() {
   var tZero = new Date();
   var janesPassword = "jane's password";
@@ -251,10 +257,9 @@
   hasAll = Util.areObjectsInSet([luck, c3po, r2d2], listOfEntries);
   assertTrue('"Star Wars" has entries: luck, c3po, r2d2', hasAll);  
   
-  // PENDING: broken by new UUID code
-  // var ordinalA = starWars.getOrdinalNumberAtCreation();
-  // var ordinalB = starWars.getOrdinalNumber();
-  // assertTrue('"Star Wars" ordinal values match', ordinalA == ordinalB);  
+  var ordinalA = starWars.getOrdinalNumberAtCreation();
+  var ordinalB = starWars.getOrdinalNumber();
+  assertTrue('"Star Wars" ordinal values match', ordinalA == ordinalB);  
   
   var starWarsTimestamp = starWars.getTimestamp();
   var now = new Date();
@@ -644,8 +649,17 @@
   var numAttachmentsEntry = anEmail.addEntryForAttribute(noOfAttachments, 4);
 }
 
-function tearDown() {
-  ModelTestVars = null;
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function waitForNextMillisecond() {
+  var now = new Date();
+  var then = now;
+  while (now.valueOf() == then.valueOf()) {
+    now = new Date();
+  }
 }
 
 

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/Record.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -30,6 +30,7 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+// dojo.require("orp.util.TimeBasedUuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -65,11 +66,13 @@
  * @param    uuid    The UUID for this Record. 
  */
 Record.prototype._Record = function(world, uuid) {
+  dojo.require("orp.util.TimeBasedUuid");
+
   Util.assert(Util.isUuidValue(uuid));
   if (Util.isString(uuid)) {
     var uuidString = uuid;
     Util.assert(uuidString.length == 36);
-    uuid = new TimeBasedUuid(uuidString);
+    uuid = new orp.util.TimeBasedUuid(uuidString);
   }
   Util.assert(Util.isUuid(uuid));
   

Modified: trunk/source/model/RepositoryWritingTest.html
===================================================================
--- trunk/source/model/RepositoryWritingTest.html	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/RepositoryWritingTest.html	2005-09-14 01:25:38 UTC (rev 325)
@@ -12,12 +12,10 @@
     <title>Test writing to repositories</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
     <script type="text/javascript" src="../util/Util.js"></script>
-    <script type="text/javascript" src="../util/Uuid.js"></script>
-    <script type="text/javascript" src="../util/TimeBasedUuid.js"></script>
-    <script type="text/javascript" src="../util/RandomUuid.js"></script>
     <script type="text/javascript" src="../util/DateValue.js"></script>
     <script type="text/javascript" src="HttpSaver.js"></script>
     <script type="text/javascript" src="Record.js"></script>

Modified: trunk/source/model/RepositoryWritingTest.js
===================================================================
--- trunk/source/model/RepositoryWritingTest.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/RepositoryWritingTest.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -37,47 +37,13 @@
 expectedRepositoryHeader +=    '  { "Transaction": [ ]\n';
 expectedRepositoryHeader +=    '  }';
 
-
 // -------------------------------------------------------------------
-// Helper functions
-// -------------------------------------------------------------------
-
-function errorReporter() {
-  utilAssertReportedError = true;
-}
-
-function waitASecond() {
-  var now = new Date();
-  var then = now;
-  while (now.valueOf() - then.valueOf() < 1000) {
-    now = new Date();
-  }
-}
-
-function fileHasExpectedContents(expectedContents) {
-  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
-  for (var i = 0; contents != expectedContents && i < 5; ++i) {
-    waitASecond();
-    contents = Util.getStringContentsOfFileAtURL(fileUrl);
-  }
-  return (contents == expectedContents);
-}
-
-function fileHasExpectedSubstring(expectedSubstring) {
-  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
-  for (var i = 0; contents.indexOf(expectedSubstring) == -1 && i < 5; ++i) {
-    waitASecond();
-    contents = Util.getStringContentsOfFileAtURL(fileUrl);
-  }
-  return (contents.indexOf(expectedSubstring) != -1);
-}
-
-
-// -------------------------------------------------------------------
 // setUp and tearDown
 // -------------------------------------------------------------------
 
 function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter)
 
@@ -105,7 +71,7 @@
 
 
 // -------------------------------------------------------------------
-// Test methods
+// Test functions
 // -------------------------------------------------------------------
 
 function testCreateNewFile() {
@@ -167,6 +133,42 @@
   assertTrue("Contents should include '\"value\": \"Apple\"'.", fileHasExpectedSubstring('"value": "Apple"'));
 }
 
+
 // -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function errorReporter() {
+  utilAssertReportedError = true;
+}
+
+function waitASecond() {
+  var now = new Date();
+  var then = now;
+  while (now.valueOf() - then.valueOf() < 1000) {
+    now = new Date();
+  }
+}
+
+function fileHasExpectedContents(expectedContents) {
+  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  for (var i = 0; contents != expectedContents && i < 5; ++i) {
+    waitASecond();
+    contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  }
+  return (contents == expectedContents);
+}
+
+function fileHasExpectedSubstring(expectedSubstring) {
+  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  for (var i = 0; contents.indexOf(expectedSubstring) == -1 && i < 5; ++i) {
+    waitASecond();
+    contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  }
+  return (contents.indexOf(expectedSubstring) != -1);
+}
+
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/StubVirtualServer.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -28,6 +28,7 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
+// dojo.require("orp.util.TimeBasedUuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -782,7 +783,7 @@
  * @param    pseudoNode    The pseudoNode value that the new UUID should have. 
  */
 StubVirtualServer.prototype._generateUuid = function(pseudoNode) {
-  return new TimeBasedUuid(pseudoNode);
+  return new orp.util.TimeBasedUuid(pseudoNode);
 };
 
 

Modified: trunk/source/model/TestReorderingForSpecialCases.html
===================================================================
--- trunk/source/model/TestReorderingForSpecialCases.html	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/TestReorderingForSpecialCases.html	2005-09-14 01:25:38 UTC (rev 325)
@@ -12,11 +12,9 @@
     <title>Test reordering of items for special cases of the corresponding ordinals (via a mock)</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="../util/Util.js"></script>
-    <script type="text/javascript" src="../util/Uuid.js"></script>
-    <script type="text/javascript" src="../util/RandomUuid.js"></script>
-    <script type="text/javascript" src="../util/TimeBasedUuid.js"></script>
     <script type="text/javascript" src="../util/DateValue.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="HttpSaver.js"></script>
@@ -42,6 +40,11 @@
     
     <p>&nbsp;</p>
     <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
     <p>To see the tests, open this .html file in a text editor. Or, within a  
     web browser, you should be able see the source for this file by using 
     some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
@@ -54,19 +57,6 @@
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 

Modified: trunk/source/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/source/model/TestReorderingForSpecialCases.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/TestReorderingForSpecialCases.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -43,15 +43,17 @@
 var categoryCalledFood = null;
 var utilAssertReportedError;
 
-errorReporter = function() {
-  utilAssertReportedError = true;
-}
 
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
-  // var virtualServer = new StubVirtualServer(pathToTrunkDirectory, {"_generateUuid":mockUuidGenerator});
   var virtualServer = new StubVirtualServer(pathToTrunkDirectory);
   StubVirtualServer.prototype._generateUuid = mockUuidGenerator;
   world = new World(virtualServer);
@@ -82,6 +84,11 @@
   world.logout();
 }
 
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
 function testReorderBetweenTwoItemsWithTheSameOrdinal() {
   sushiUuid     = "40000000-2222-3333-4444-555555555555";
   sushiNameUuid = "40000001-2222-3333-4444-555555555555";
@@ -148,6 +155,16 @@
   assertTrue('After 2nd reordering, Guava is third in the list.', foodItems[2] == guava);
 }
 
+
 // -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+errorReporter = function() {
+  utilAssertReportedError = true;
+}
+
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/model/TestReorderingForTypicalOrdinals.html
===================================================================
--- trunk/source/model/TestReorderingForTypicalOrdinals.html	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/TestReorderingForTypicalOrdinals.html	2005-09-14 01:25:38 UTC (rev 325)
@@ -12,11 +12,9 @@
     <title>Test reordering items with typical ordinals (via a mock)</title>
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="../util/Util.js"></script>
-    <script type="text/javascript" src="../util/Uuid.js"></script>
-    <script type="text/javascript" src="../util/RandomUuid.js"></script>
-    <script type="text/javascript" src="../util/TimeBasedUuid.js"></script>
     <script type="text/javascript" src="../util/DateValue.js"></script>
     <script type="text/javascript" src="MockUuidGenerator.js"></script>
     <script type="text/javascript" src="HttpSaver.js"></script>
@@ -42,6 +40,11 @@
     
     <p>&nbsp;</p>
     <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
     <p>To see the tests, open this .html file in a text editor. Or, within a  
     web browser, you should be able see the source for this file by using 
     some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
@@ -54,19 +57,6 @@
     written by 
     <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
 
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
     <p>&nbsp;</p>
     <hr/>
     <p class="copyright">You can copy freely from this work &mdash; copyright 

Modified: trunk/source/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -47,11 +47,14 @@
 var taffy;
 var utilAssertReportedError;
 
-errorReporter = function() {
-  utilAssertReportedError = true;
-}
 
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
@@ -131,6 +134,11 @@
   world.logout();
 }
 
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
 function testReorderBetweenTwoItems() {
   guava.reorderBetween(sushi, pesto);
   foodItems = world.getItemsInCategory(categoryCalledFood);
@@ -199,6 +207,16 @@
   assertTrue(ContentRecord.compareOrdinals(taffy, guava) != 0);
 }
 
+
 // -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+errorReporter = function() {
+  utilAssertReportedError = true;
+}
+
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/util/RandomUuid.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -29,6 +29,8 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+dojo.provide("orp.util.RandomUuid");
+dojo.require("orp.util.Uuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -46,22 +48,25 @@
  *
  * @scope    public instance constructor
  */
-RandomUuid.prototype = new Uuid();  // makes RandomUuid be a subclass of Uuid
-function RandomUuid(uuidString) {
+// orp.util.RandomUuid.prototype = new orp.util.Uuid();  
+orp.util.RandomUuid = function(uuidString) {
+  orp.util.Uuid.call(this);
   if (uuidString) {
     Util.assert(Util.isString(uuidString));
     Util.assert(uuidString.length == 36);
     this._uuidString = uuidString;
   } else {
-    this._uuidString = RandomUuid._generateUuidString();
+    this._uuidString = orp.util.RandomUuid._generateUuidString();
   }
-}
+};
 
+dj_inherits(orp.util.RandomUuid, orp.util.Uuid);  // makes RandomUuid be a subclass of Uuid
 
+
 // -------------------------------------------------------------------
 // Public class constants
 // -------------------------------------------------------------------
-RandomUuid.HEX_RADIX = 16;
+orp.util.RandomUuid.HEX_RADIX = 16;
 
 
 // -------------------------------------------------------------------
@@ -75,16 +80,16 @@
  * @scope    public class method
  * @return   Returns a 36-character string, which will look something like "3B12F1DF-5232-4804-897E-917BF397618A".
  */
-RandomUuid._generateUuidString = function() {
+orp.util.RandomUuid._generateUuidString = function() {
   var hyphen = "-";
   var versionCodeForRandomlyGeneratedUuids = "4"; // 8 == binary2hex("0100")
   var variantCodeForDCEUuids = "8"; // 8 == binary2hex("1000")
-  var a = RandomUuid._generateRandomEightCharacterHexString();
-  var b = RandomUuid._generateRandomEightCharacterHexString();
+  var a = orp.util.RandomUuid._generateRandomEightCharacterHexString();
+  var b = orp.util.RandomUuid._generateRandomEightCharacterHexString();
   b = b.substring(0, 4) + hyphen + versionCodeForRandomlyGeneratedUuids + b.substring(5, 8);
-  var c = RandomUuid._generateRandomEightCharacterHexString();
+  var c = orp.util.RandomUuid._generateRandomEightCharacterHexString();
   c = variantCodeForDCEUuids + c.substring(1, 4) + hyphen + c.substring(4, 8);
-  var d = RandomUuid._generateRandomEightCharacterHexString();
+  var d = orp.util.RandomUuid._generateRandomEightCharacterHexString();
   var result = a + hyphen + b + hyphen + c + d;
   
   return result;
@@ -97,7 +102,7 @@
  *
  * @scope    private class method
  */
-RandomUuid._generateRandom32bitNumber = function() {
+orp.util.RandomUuid._generateRandom32bitNumber = function() {
   return Math.floor( (Math.random() % 1) * Math.pow(2, 32) );
 };
 
@@ -107,11 +112,11 @@
  *
  * @scope    private class method
  */
-RandomUuid._generateRandomEightCharacterHexString = function() {
+orp.util.RandomUuid._generateRandomEightCharacterHexString = function() {
   // PENDING: 
   // This isn't really random.  We should find some source of real 
   // randomness, and feed it to an MD5 hash algorithm.     
-  var eightCharacterString = RandomUuid._generateRandom32bitNumber().toString(RandomUuid.HEX_RADIX);
+  var eightCharacterString = orp.util.RandomUuid._generateRandom32bitNumber().toString(orp.util.RandomUuid.HEX_RADIX);
   while (eightCharacterString.length < 8) {
     eightCharacterString = "0" + eightCharacterString;
   }

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -30,6 +30,9 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+dojo.provide("orp.util.TimeBasedUuid");
+dojo.require("orp.util.Uuid");
+dojo.require("orp.util.RandomUuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -89,42 +92,45 @@
   Microsoft: "110"
 }
 */
-TimeBasedUuid.prototype = new Uuid();  // makes TimeBasedUuid be a subclass of Uuid
-function TimeBasedUuid(uuidStringOrPseudoNode) {
+// orp.util.TimeBasedUuid.prototype = new orp.util.Uuid();  // makes TimeBasedUuid be a subclass of Uuid
+orp.util.TimeBasedUuid = function(uuidStringOrPseudoNode) {
+  orp.util.Uuid.call(this);
   if (uuidStringOrPseudoNode) {
     Util.assert(Util.isString(uuidStringOrPseudoNode));
     var lengthOfPseudoNodeString = 12;
     if (uuidStringOrPseudoNode.length == lengthOfPseudoNodeString) {
       var pseudoNode = uuidStringOrPseudoNode;
-      this._uuidString = TimeBasedUuid._generateUuidString(pseudoNode);
+      this._uuidString = orp.util.TimeBasedUuid._generateUuidString(pseudoNode);
     } else {
       Util.assert(uuidStringOrPseudoNode.length == 36);
       this._uuidString = uuidStringOrPseudoNode;
     }
   } else {
-    this._uuidString = TimeBasedUuid._generateUuidString();
+    this._uuidString = orp.util.TimeBasedUuid._generateUuidString();
   }
-}
+};
 
+dj_inherits(orp.util.TimeBasedUuid, orp.util.Uuid);  // makes RandomUuid be a subclass of Uuid
 
+
 // -------------------------------------------------------------------
 // TimeBasedUuid public class constants
 // -------------------------------------------------------------------
 // Number of seconds between October 15, 1582 and January 1, 1970
 // Util.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
-TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;
-TimeBasedUuid.HEX_RADIX = 16;
+orp.util.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;
+orp.util.TimeBasedUuid.HEX_RADIX = 16;
 
 
 // -------------------------------------------------------------------
 // Uuid private global class variables
 // -------------------------------------------------------------------
-TimeBasedUuid._ourUuidClockSeqString = null;
-TimeBasedUuid._ourDateValueOfPreviousUuid = null;
-TimeBasedUuid._ourNextIntraMillisecondIncrement = 0;
+orp.util.TimeBasedUuid._ourUuidClockSeqString = null;
+orp.util.TimeBasedUuid._ourDateValueOfPreviousUuid = null;
+orp.util.TimeBasedUuid._ourNextIntraMillisecondIncrement = 0;
 
-TimeBasedUuid._ourCachedMillisecondsBetween1582and1970 = null;
-TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond = null;
+orp.util.TimeBasedUuid._ourCachedMillisecondsBetween1582and1970 = null;
+orp.util.TimeBasedUuid._ourCachedHundredNanosecondIntervalsPerMillisecond = null;
 
 
 // -------------------------------------------------------------------
@@ -138,8 +144,8 @@
  * @scope    public instance method
  * @return   Returns a 12-character string, which will look something like "917BF397618A".
  */
-TimeBasedUuid.prototype.getNode = function() {
-  return TimeBasedUuid._getNodeFromUuidString(this._uuidString);
+orp.util.TimeBasedUuid.prototype.getNode = function() {
+  return orp.util.TimeBasedUuid._getNodeFromUuidString(this._uuidString);
 };
 
 
@@ -150,9 +156,9 @@
  * @scope    public instance method
  * @return   Returns a JavaScript Date object.
  */
-TimeBasedUuid.prototype.getDate = function() {
+orp.util.TimeBasedUuid.prototype.getDate = function() {
   if (!this._date) {
-    this._date = TimeBasedUuid._getDateFromUuidString(this._uuidString);
+    this._date = orp.util.TimeBasedUuid._getDateFromUuidString(this._uuidString);
   } 
   return this._date;
 };
@@ -165,9 +171,9 @@
  * @scope    public instance method
  * @return   A 15-character string of hex digits.
  */
-TimeBasedUuid.prototype.getTimestampAsHexString = function() {
+orp.util.TimeBasedUuid.prototype.getTimestampAsHexString = function() {
   if (!this._timestampAsHexString) {
-    this._timestampAsHexString = TimeBasedUuid._getTimestampAsHexString(this.toString());
+    this._timestampAsHexString = orp.util.TimeBasedUuid._getTimestampAsHexString(this.toString());
   }
   return this._timestampAsHexString;
 };
@@ -188,7 +194,9 @@
  * @param    pseudoNode    Optional. A 12-character string to use as the node in the new UUID.
  * @return   Returns a 36 character string, which will look something like "3B12F1DF-5232-1804-897E-917BF397618A".
  */
-TimeBasedUuid._generateUuidString = function(pseudoNode) {
+orp.util.TimeBasedUuid._generateUuidString = function(pseudoNode) {
+  var TimeBasedUuid = orp.util.TimeBasedUuid;
+  
   Util.assert(!pseudoNode || Util.isString(pseudoNode));  
   if (pseudoNode) {
     Util.assert(pseudoNode.length == 12);  
@@ -196,7 +204,7 @@
     var pseudoNodeIndicatorBit = 0x8000;
     var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
     var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(TimeBasedUuid.HEX_RADIX);
-    pseudoNode = leftmost4HexCharacters + RandomUuid._generateRandomEightCharacterHexString();
+    pseudoNode = leftmost4HexCharacters + orp.util.RandomUuid._generateRandomEightCharacterHexString();
   }
   if (!TimeBasedUuid._ourUuidClockSeqString) {
     var variantCodeForDCEUuids = 0x8000; // 10--------------, i.e. uses only first two of 16 bits.
@@ -271,7 +279,7 @@
  * @param    uuidString    A 36-character UUID string.
  * @return   Returns a 12-character string, which will look something like "917BF397618A".
  */
-TimeBasedUuid._getNodeFromUuidString = function(uuidString) {
+orp.util.TimeBasedUuid._getNodeFromUuidString = function(uuidString) {
   var arrayOfStrings = uuidString.split('-');
   var nodeString = arrayOfStrings[4];
   return nodeString;
@@ -286,7 +294,9 @@
  * @param    uuidString    A 36-character UUID string for a time-based UUID.
  * @return   Returns a JavaScript Date objects
  */
-TimeBasedUuid._getDateFromUuidString = function(uuidString) {
+orp.util.TimeBasedUuid._getDateFromUuidString = function(uuidString) {
+  var TimeBasedUuid = orp.util.TimeBasedUuid;
+  
   var hexTimeLow = uuidString.split('-')[0];
   var hexTimeMid = uuidString.split('-')[1];
   var hexTimeHigh = uuidString.split('-')[2];
@@ -323,7 +333,7 @@
  * @scope    private class method
  * @return   A 15-character string of hex digits.
  */
-TimeBasedUuid._getTimestampAsHexString = function(uuidString) {
+orp.util.TimeBasedUuid._getTimestampAsHexString = function(uuidString) {
   var arrayOfParts = uuidString.split('-');
   var hexTimeLow = arrayOfParts[0];
   var hexTimeMid = arrayOfParts[1];
@@ -348,7 +358,7 @@
  * @scope    private class method
  * @param    arrayA    An array with 4 elements, each of which is a 16-bit number.
  */
-TimeBasedUuid._carry = function(arrayA) {
+orp.util.TimeBasedUuid._carry = function(arrayA) {
   arrayA[2] += arrayA[3] >>> 16;
   arrayA[3] &= 0xFFFF;
   arrayA[1] += arrayA[2] >>> 16;
@@ -367,7 +377,7 @@
  * @param    x    A floating point number.
  * @return   An array with 4 elements, each of which is a 16-bit number.
  */
-TimeBasedUuid._get64bitArrayFromFloat = function(x) {
+orp.util.TimeBasedUuid._get64bitArrayFromFloat = function(x) {
   var result = new Array(0, 0, 0, 0);
   result[3] = x % 0x10000;
   x -= result[3];
@@ -393,7 +403,7 @@
  * @param    arrayB    An array with 4 elements, each of which is a 16-bit number.
  * @return   An array with 4 elements, each of which is a 16-bit number.
  */
-TimeBasedUuid._addTwo64bitArrays = function(arrayA, arrayB) {
+orp.util.TimeBasedUuid._addTwo64bitArrays = function(arrayA, arrayB) {
   Util.assert(Util.isArray(arrayA));
   Util.assert(arrayA.length == 4);
   Util.assert(Util.isArray(arrayB));
@@ -403,7 +413,7 @@
   result[2] = arrayA[2] + arrayB[2];
   result[1] = arrayA[1] + arrayB[1];
   result[0] = arrayA[0] + arrayB[0];
-  TimeBasedUuid._carry(result);
+  orp.util.TimeBasedUuid._carry(result);
   return result;
 };
 
@@ -418,7 +428,9 @@
  * @param    arrayB    An array with 4 elements, each of which is a 16-bit number.
  * @return   An array with 4 elements, each of which is a 16-bit number.
  */
-TimeBasedUuid._multiplyTwo64bitArrays = function(arrayA, arrayB) {
+orp.util.TimeBasedUuid._multiplyTwo64bitArrays = function(arrayA, arrayB) {
+  var TimeBasedUuid = orp.util.TimeBasedUuid;
+
   Util.assert(Util.isArray(arrayA));
   Util.assert(arrayA.length == 4);
   Util.assert(Util.isArray(arrayB));
@@ -470,7 +482,7 @@
  * @param    desiredLength    The number of characters the return string should have.
  * @return   A string.
  */
-TimeBasedUuid._padWithLeadingZeros = function(string, desiredLength) {
+orp.util.TimeBasedUuid._padWithLeadingZeros = function(string, desiredLength) {
   while (string.length < desiredLength) {
     string = "0" + string;
   }

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/util/Util.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -31,6 +31,7 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
  
+// dojo.require("orp.util.Uuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -289,7 +290,8 @@
  * @return   A boolean value. True if value is a UUID object.
  */
 Util.isUuid = function(value) {
-  return (value instanceof Uuid);
+  // return (value instanceof orp.util.Uuid);
+  return true; // PENDING: FIXME.
 };
 
 
@@ -303,7 +305,7 @@
  * @return   A boolean value. True if value is a UUID.
  */
 Util.isUuidValue = function(value) {
-  if (value instanceof Uuid) {
+  if (Util.isUuid(value)) {
     return true;
   }
   if ((typeof value) == "string") {

Modified: trunk/source/util/UtilTest.js
===================================================================
--- trunk/source/util/UtilTest.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/util/UtilTest.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -32,11 +32,25 @@
  
 var UtilTestVars = null;
 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
   UtilTestVars = {};
   UtilTestVars.theHobbit = "The Hobbit";
 }
 
+function tearDown() {
+  UtilTestVars = null;
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
 function testSimplestCase() {
   assertTrue("This is true", true);
 }
@@ -66,7 +80,6 @@
   assertTrue('78.9 is in setNumber2', Util.isObjectInSet(78.9, setNumber2));
   assertTrue('78.9 and "The Hobbit" is in setNumber2', Util.areObjectsInSet([78.9, theHobbit], setNumber2));
   assertTrue('All members of setNumber2 are in setNumber2', Util.areObjectsInSet(setNumber2, setNumber2));
-  
 }
 
 function testEncryptionMethods() {
@@ -76,235 +89,7 @@
   assertTrue('md5 of longString is correct', (Util.hex_md5(longString) == "4d694e03af399831c6f0c1f1bcc2fc93"));
 }
 
-function testGet64bitArrayFromFloat() {
-  var x = Math.pow(2, 63) + Math.pow(2, 15);
-  var result = TimeBasedUuid._get64bitArrayFromFloat(x);
-  assertTrue("result[0] == 0x8000", result[0] === 0x8000);
-  assertTrue("result[1] == 0x0000", result[1] === 0x0000);
-  assertTrue("result[2] == 0x0000", result[2] === 0x0000);
-  assertTrue("result[3] == 0x8000", result[3] === 0x8000);
-  
-  var date = new Date();
-  x = date.valueOf();
-  result = TimeBasedUuid._get64bitArrayFromFloat(x);
-  var reconstructedFloat = result[0];
-  reconstructedFloat *= 0x10000;
-  reconstructedFloat += result[1];
-  reconstructedFloat *= 0x10000;
-  reconstructedFloat += result[2];
-  reconstructedFloat *= 0x10000;
-  reconstructedFloat += result[3];
-  
-  assertTrue("reconstructedFloat === x", reconstructedFloat === x);
-}
 
-function testAddTwo64bitArrays() {
-  var a = [0x0000, 0x0000, 0x0000, 0x0001];
-  var b = [0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF];
-  var result = TimeBasedUuid._addTwo64bitArrays(a, b);
-  assert(result[0] === 0x1000);
-  assert(result[1] === 0x0000);
-  assert(result[2] === 0x0000);
-  assert(result[3] === 0x0000);
-  
-  a = [0x4000, 0x8000, 0x8000, 0x8000];
-  b = [0x8000, 0x8000, 0x8000, 0x8000];
-  result = TimeBasedUuid._addTwo64bitArrays(a, b);
-  assert(result[0] === 0xC001);
-  assert(result[1] === 0x0001);
-  assert(result[2] === 0x0001);
-  assert(result[3] === 0x0000);
-  
-  a = [7, 6, 2, 5];
-  b = [1, 0, 3, 4];
-  result = TimeBasedUuid._addTwo64bitArrays(a, b);
-  assert(result[0] === 8);
-  assert(result[1] === 6);
-  assert(result[2] === 5);
-  assert(result[3] === 9);  
-}  
-
-function testMultiplyTwo64bitArrays() {
-  var a = [     0, 0x0000, 0x0000, 0x0003];
-  var b = [0x1111, 0x1234, 0x0000, 0xFFFF];
-  var result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
-  assert(result[0] === 0x3333);
-  assert(result[1] === 0x369C);
-  assert(result[2] === 0x0002);
-  assert(result[3] === 0xFFFD);
-  
-  a = [0, 0, 0, 5];
-  b = [0, 0, 0, 4];
-  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
-  assert(result[0] === 0);
-  assert(result[1] === 0);
-  assert(result[2] === 0);
-  assert(result[3] === 20);  
-  
-  a = [0, 0, 2, 5];
-  b = [0, 0, 3, 4];
-  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
-  assert(result[0] === 0);
-  assert(result[1] === 6);
-  assert(result[2] === 23);
-  assert(result[3] === 20);  
-}  
-
-function subtestOnUuid(uuid) {
-  assertTrue('UUIDs have 36 characters', (uuid.length == 36));
-
-  var validCharacters = "0123456789abcedfABCDEF-";
-  var character;
-  var position;
-  for (var i = 0; i < 36; ++i) {
-    character = uuid.charAt(i);
-    position = validCharacters.indexOf(character);
-    assertTrue('UUIDs have only valid characters', (position != -1));
-  }
-  
-  var arrayOfParts = uuid.split("-");
-  assertTrue('UUIDs have 5 sections separated by 4 hyphens', (arrayOfParts.length == 5));
-  assertTrue('Section 0 has 8 characters', (arrayOfParts[0].length == 8));
-  assertTrue('Section 1 has 4 characters', (arrayOfParts[1].length == 4));
-  assertTrue('Section 2 has 4 characters', (arrayOfParts[2].length == 4));
-  assertTrue('Section 3 has 4 characters', (arrayOfParts[3].length == 4));
-  assertTrue('Section 4 has 8 characters', (arrayOfParts[4].length == 12));
-  
-  var section3 = arrayOfParts[3];
-  var hex3 = parseInt(section3, TimeBasedUuid.HEX_RADIX);
-  var binaryString = hex3.toString(2);
-  // alert("section3 = " + section3 + "\n binaryString = " + binaryString);
-  assertTrue('section 3 has 16 bits', binaryString.length == 16);
-  assertTrue("first bit of section 3 is 1", binaryString.charAt(0) == '1');
-  assertTrue("second bit of section 3 is 0", binaryString.charAt(1) == '0');
-  
-}
-
-function testMethodsForWorkingWithRandomUuids() {
-  var uuid1 = new RandomUuid();
-  var uuid2 = new RandomUuid();
-  uuid1 = uuid1.toString();
-  uuid2 = uuid2.toString();
-
-  // alert(uuid1 + "\n" + uuid2);
-  subtestOnUuid(uuid1);
-  subtestOnUuid(uuid2);
-  
-  var arrayOfParts = uuid1.split("-");
-  var section2 = arrayOfParts[2];
-  assertTrue('Section 2 starts with a 4', (section2.charAt(0) == "4"));
-  
-  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
-}
-
-function testMethodsForWorkingWithTimeBasedUuids() {
-  var uuid1 = new TimeBasedUuid();
-  var uuid2 = new TimeBasedUuid();
-  var uuid3 = new TimeBasedUuid();
-  uuid1 = uuid1.toString();
-  uuid2 = uuid2.toString();
-  uuid3 = uuid3.toString();
-  
-  subtestOnUuid(uuid1);
-  subtestOnUuid(uuid2);
-  subtestOnUuid(uuid3);
-
-  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
-  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
-  
-  var arrayOfParts = uuid1.split("-");
-  var section2 = arrayOfParts[2];
-  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
-
-  var section4 = arrayOfParts[4];
-  var firstChar = section4.charAt(0);
-  var hexFirstChar = parseInt(firstChar, TimeBasedUuid.HEX_RADIX);
-  binaryString = hexFirstChar.toString(2);
-  var firstBit;
-  if (binaryString.length == 4) {
-    firstBit = binaryString.charAt(0);
-  } else {
-    firstBit = '0';
-  }
-  // alert("firstChar = " + firstChar + "\n as number = " + hexFirstChar + 
-  //      "\n in binary = " + binaryString + "\n first bit = " + firstBit);
-  assertTrue("first bit of section 4 is 1", firstBit == '1');
-
-  var uuid4 = new TimeBasedUuid("123456789ABC");
-  uuid4 = uuid4.toString();
-  subtestOnUuid(uuid4);
-  arrayOfParts = uuid4.split("-");
-  section4 = arrayOfParts[4];
-  assertTrue('Section 4 = pseudoNode input', section4 == "123456789ABC");
-
-  /* 
-  // Old code that Brian wrote to try to get a sense of how
-  // many UUIDs we can create in a single millisecond 
-  var array = [];
-  var now = new Date();
-  var then = new Date();
-  while (now.valueOf() == then.valueOf()) {
-    then = new Date();
-  }
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  array.push(Uuid.generateTimeBasedUuid());
-  alert(array[0] + "\n" + 
-        array[1] + "\n" + 
-        array[2] + "\n" + 
-        array[3] + "\n" + 
-        array[4] + "\n" + 
-        array[5] + "\n" + 
-        array[6] + "\n" + 
-        array[7] + "\n" + 
-        array[8] + "\n" + 
-        array[9] + "\n" + 
-        array[10] + "\n" + 
-        array[11] + "\n" + 
-        array[12] + "\n" + 
-        array[13] + "\n" + 
-        array[14] + "\n" + 
-        array[15] + "\n" + 
-        array[16] + "\n" + 
-        array[17] + "\n" + 
-        array[18] + "\n" + 
-        array[19] + "\n");
-  */
-}
-
-function testUuidObjects() {
-  var uuid1 = new TimeBasedUuid();
-  var timestampAsHexString = uuid1.getTimestampAsHexString();
-  assertTrue("A UUID's timestamp hex string is 15-characters long.", timestampAsHexString.length == 15);
-
-  
-}
-
-function tearDown() {
-  test = null;
-}
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/source/util/Uuid.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -30,6 +30,7 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+dojo.provide("orp.util.Uuid");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -45,9 +46,9 @@
  *
  * @scope    public instance constructor
  */
-function Uuid() {
+orp.util.Uuid = function() {
   this._uuidString = null;
-}
+};
 
 
 // -------------------------------------------------------------------
@@ -63,7 +64,7 @@
  * @scope    public instance method
  * @return   Returns a 36-character UUID string.
  */
-Uuid.prototype.toString = function() {
+orp.util.Uuid.prototype.toString = function() {
   return this._uuidString;
 };
 

Added: trunk/tests/util/TestSuite.html
===================================================================
--- trunk/tests/util/TestSuite.html	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/tests/util/TestSuite.html	2005-09-14 01:25:38 UTC (rev 325)
@@ -0,0 +1,88 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Util Test Suite</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript">
+      function suite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestSuite(utilTestSuite());
+        return testSuite;
+      }
+      
+      function utilTestSuite() {
+        var testSuite = new window.top.jsUnitTestSuite();
+        testSuite.addTestPage("../../../tests/util/CsvParserTest.html");
+        testSuite.addTestPage("../../../tests/util/UuidTest.html");
+        return testSuite;
+      }
+    </script>
+  </head>
+  
+  <body>
+    <h1>Util Test Suite</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/util/UuidTest.html
===================================================================
--- trunk/tests/util/UuidTest.html	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/tests/util/UuidTest.html	2005-09-14 01:25:38 UTC (rev 325)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for UUIDs</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="../../tests/util/UuidTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for UUIDs</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/util/UuidTest.js
===================================================================
--- trunk/tests/util/UuidTest.js	2005-09-13 21:07:04 UTC (rev 324)
+++ trunk/tests/util/UuidTest.js	2005-09-14 01:25:38 UTC (rev 325)
@@ -0,0 +1,288 @@
+/*****************************************************************************
+ UuidTest.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var RandomUuid = null;
+var TimeBasedUuid = null;
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.RandomUuid");
+  dojo.require("orp.util.TimeBasedUuid");
+
+  RandomUuid = orp.util.RandomUuid;
+  TimeBasedUuid = orp.util.TimeBasedUuid;
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testGet64bitArrayFromFloat() {
+  var x = Math.pow(2, 63) + Math.pow(2, 15);
+  var result = TimeBasedUuid._get64bitArrayFromFloat(x);
+  assertTrue("result[0] == 0x8000", result[0] === 0x8000);
+  assertTrue("result[1] == 0x0000", result[1] === 0x0000);
+  assertTrue("result[2] == 0x0000", result[2] === 0x0000);
+  assertTrue("result[3] == 0x8000", result[3] === 0x8000);
+  
+  var date = new Date();
+  x = date.valueOf();
+  result = TimeBasedUuid._get64bitArrayFromFloat(x);
+  var reconstructedFloat = result[0];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[1];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[2];
+  reconstructedFloat *= 0x10000;
+  reconstructedFloat += result[3];
+  
+  assertTrue("reconstructedFloat === x", reconstructedFloat === x);
+}
+
+function testAddTwo64bitArrays() {
+  var a = [0x0000, 0x0000, 0x0000, 0x0001];
+  var b = [0x0FFF, 0xFFFF, 0xFFFF, 0xFFFF];
+  var result = TimeBasedUuid._addTwo64bitArrays(a, b);
+  assert(result[0] === 0x1000);
+  assert(result[1] === 0x0000);
+  assert(result[2] === 0x0000);
+  assert(result[3] === 0x0000);
+  
+  a = [0x4000, 0x8000, 0x8000, 0x8000];
+  b = [0x8000, 0x8000, 0x8000, 0x8000];
+  result = TimeBasedUuid._addTwo64bitArrays(a, b);
+  assert(result[0] === 0xC001);
+  assert(result[1] === 0x0001);
+  assert(result[2] === 0x0001);
+  assert(result[3] === 0x0000);
+  
+  a = [7, 6, 2, 5];
+  b = [1, 0, 3, 4];
+  result = TimeBasedUuid._addTwo64bitArrays(a, b);
+  assert(result[0] === 8);
+  assert(result[1] === 6);
+  assert(result[2] === 5);
+  assert(result[3] === 9);  
+}  
+
+function testMultiplyTwo64bitArrays() {
+  var a = [     0, 0x0000, 0x0000, 0x0003];
+  var b = [0x1111, 0x1234, 0x0000, 0xFFFF];
+  var result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0x3333);
+  assert(result[1] === 0x369C);
+  assert(result[2] === 0x0002);
+  assert(result[3] === 0xFFFD);
+  
+  a = [0, 0, 0, 5];
+  b = [0, 0, 0, 4];
+  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0);
+  assert(result[1] === 0);
+  assert(result[2] === 0);
+  assert(result[3] === 20);  
+  
+  a = [0, 0, 2, 5];
+  b = [0, 0, 3, 4];
+  result = TimeBasedUuid._multiplyTwo64bitArrays(a, b);
+  assert(result[0] === 0);
+  assert(result[1] === 6);
+  assert(result[2] === 23);
+  assert(result[3] === 20);  
+}  
+
+function testMethodsForWorkingWithRandomUuids() {
+  var uuid1 = new RandomUuid();
+  var uuid2 = new RandomUuid();
+  uuid1 = uuid1.toString();
+  uuid2 = uuid2.toString();
+
+  // alert(uuid1 + "\n" + uuid2);
+  checkUuidValidity(uuid1);
+  checkUuidValidity(uuid2);
+  
+  var arrayOfParts = uuid1.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 4', (section2.charAt(0) == "4"));
+  
+  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
+}
+
+function testMethodsForWorkingWithTimeBasedUuids() {
+  var uuid1 = new TimeBasedUuid();
+  var uuid2 = new TimeBasedUuid();
+  var uuid3 = new TimeBasedUuid();
+  uuid1 = uuid1.toString();
+  uuid2 = uuid2.toString();
+  uuid3 = uuid3.toString();
+  
+  checkUuidValidity(uuid1);
+  checkUuidValidity(uuid2);
+  checkUuidValidity(uuid3);
+
+  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
+  assertTrue("uuid2 != uuid3", uuid1 != uuid2);
+  
+  var arrayOfParts = uuid1.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
+
+  var section4 = arrayOfParts[4];
+  var firstChar = section4.charAt(0);
+  var hexFirstChar = parseInt(firstChar, TimeBasedUuid.HEX_RADIX);
+  binaryString = hexFirstChar.toString(2);
+  var firstBit;
+  if (binaryString.length == 4) {
+    firstBit = binaryString.charAt(0);
+  } else {
+    firstBit = '0';
+  }
+  // alert("firstChar = " + firstChar + "\n as number = " + hexFirstChar + 
+  //      "\n in binary = " + binaryString + "\n first bit = " + firstBit);
+  assertTrue("first bit of section 4 is 1", firstBit == '1');
+
+  var uuid4 = new TimeBasedUuid("123456789ABC");
+  uuid4 = uuid4.toString();
+  checkUuidValidity(uuid4);
+  arrayOfParts = uuid4.split("-");
+  section4 = arrayOfParts[4];
+  assertTrue('Section 4 = pseudoNode input', section4 == "123456789ABC");
+
+  /* 
+  // Old code that Brian wrote to try to get a sense of how
+  // many UUIDs we can create in a single millisecond 
+  var array = [];
+  var now = new Date();
+  var then = new Date();
+  while (now.valueOf() == then.valueOf()) {
+    then = new Date();
+  }
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  array.push(Uuid.generateTimeBasedUuid());
+  alert(array[0] + "\n" + 
+        array[1] + "\n" + 
+        array[2] + "\n" + 
+        array[3] + "\n" + 
+        array[4] + "\n" + 
+        array[5] + "\n" + 
+        array[6] + "\n" + 
+        array[7] + "\n" + 
+        array[8] + "\n" + 
+        array[9] + "\n" + 
+        array[10] + "\n" + 
+        array[11] + "\n" + 
+        array[12] + "\n" + 
+        array[13] + "\n" + 
+        array[14] + "\n" + 
+        array[15] + "\n" + 
+        array[16] + "\n" + 
+        array[17] + "\n" + 
+        array[18] + "\n" + 
+        array[19] + "\n");
+  */
+}
+
+function testUuidObjects() {
+  var uuid1 = new TimeBasedUuid();
+  var timestampAsHexString = uuid1.getTimestampAsHexString();
+  assertTrue("A UUID's timestamp hex string is 15-characters long.", timestampAsHexString.length == 15);
+}
+
+
+// -------------------------------------------------------------------
+// Helper functions
+// -------------------------------------------------------------------
+
+function checkUuidValidity(uuid) {
+  assertTrue('UUIDs have 36 characters', (uuid.length == 36));
+
+  var validCharacters = "0123456789abcedfABCDEF-";
+  var character;
+  var position;
+  for (var i = 0; i < 36; ++i) {
+    character = uuid.charAt(i);
+    position = validCharacters.indexOf(character);
+    assertTrue('UUIDs have only valid characters', (position != -1));
+  }
+  
+  var arrayOfParts = uuid.split("-");
+  assertTrue('UUIDs have 5 sections separated by 4 hyphens', (arrayOfParts.length == 5));
+  assertTrue('Section 0 has 8 characters', (arrayOfParts[0].length == 8));
+  assertTrue('Section 1 has 4 characters', (arrayOfParts[1].length == 4));
+  assertTrue('Section 2 has 4 characters', (arrayOfParts[2].length == 4));
+  assertTrue('Section 3 has 4 characters', (arrayOfParts[3].length == 4));
+  assertTrue('Section 4 has 8 characters', (arrayOfParts[4].length == 12));
+  
+  var section3 = arrayOfParts[3];
+  var hex3 = parseInt(section3, TimeBasedUuid.HEX_RADIX);
+  var binaryString = hex3.toString(2);
+  // alert("section3 = " + section3 + "\n binaryString = " + binaryString);
+  assertTrue('section 3 has 16 bits', binaryString.length == 16);
+  assertTrue("first bit of section 3 is 1", binaryString.charAt(0) == '1');
+  assertTrue("second bit of section 3 is 0", binaryString.charAt(1) == '0');
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at berlios.de  Wed Sep 14 04:13:00 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 14 Sep 2005 04:13:00 +0200
Subject: [openrecord-svn] r326 - in trunk: source/model source/util tests/util
Message-ID: <200509140213.j8E2D0Cu031678@sheep.berlios.de>

Author: skinner
Date: 2005-09-14 04:12:55 +0200 (Wed, 14 Sep 2005)
New Revision: 326

Modified:
   trunk/source/model/ContentRecord.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Uuid.js
   trunk/tests/util/UuidTest.js
Log:
More clean-up work on the UUIDs.

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-09-14 01:25:38 UTC (rev 325)
+++ trunk/source/model/ContentRecord.js	2005-09-14 02:12:55 UTC (rev 326)
@@ -37,7 +37,6 @@
 /*global Util  */
 /*global World  */
 /*global Record  */
-/*global RandomUuid  */
 // -------------------------------------------------------------------
 
 
@@ -255,12 +254,13 @@
  * @param    contentRecordThird    The contentRecord that should come after this one. 
  */
 ContentRecord.prototype.reorderBetween = function(contentRecordFirst, contentRecordThird) {
-  var RandomUuid = orp.util.RandomUuid;
-  
   var firstOrdinalNumber = null;
   var secondOrdinalNumber = null;
   var thirdOrdinalNumber = null;
   
+  // PENDING: this is a hack
+  var sourceOfRandomness = contentRecordFirst ? contentRecordFirst.getUuid() : contentRecordThird.getUuid();
+  
   if (contentRecordFirst) {
     firstOrdinalNumber = contentRecordFirst.getOrdinalNumber();
   }
@@ -278,16 +278,20 @@
         firstOrdinalNumber = thirdOrdinalNumber;
         thirdOrdinalNumber = temp;
       }
-      secondOrdinalNumber = firstOrdinalNumber + RandomUuid._generateRandomEightCharacterHexString();
+      // PENDING: we should not be calling the private method _generateRandomEightCharacterHexString()
+      var randomEightCharacterHexString = sourceOfRandomness._generateRandomEightCharacterHexString();
+      secondOrdinalNumber = firstOrdinalNumber + randomEightCharacterHexString;
       var zeroes = "";
       while (secondOrdinalNumber >= thirdOrdinalNumber) {
         zeroes += "0";
-        secondOrdinalNumber = firstOrdinalNumber + zeroes + RandomUuid._generateRandomEightCharacterHexString();
+        // PENDING: we should not be calling the private method _generateRandomEightCharacterHexString()
+        randomEightCharacterHexString = sourceOfRandomness._generateRandomEightCharacterHexString();
+        secondOrdinalNumber = firstOrdinalNumber + zeroes + randomEightCharacterHexString;
       }
     }
   }
   if (firstOrdinalNumber && !thirdOrdinalNumber) {
-    secondOrdinalNumber = firstOrdinalNumber + RandomUuid._generateRandomEightCharacterHexString();
+    secondOrdinalNumber = firstOrdinalNumber + sourceOfRandomness._generateRandomEightCharacterHexString();
   }
   if (!firstOrdinalNumber && thirdOrdinalNumber) {
     secondOrdinalNumber = thirdOrdinalNumber;
@@ -303,7 +307,7 @@
     while (secondOrdinalNumber.length < origLen) {
       secondOrdinalNumber += "f";
     }
-    secondOrdinalNumber += RandomUuid._generateRandomEightCharacterHexString();
+    secondOrdinalNumber += sourceOfRandomness._generateRandomEightCharacterHexString();
   }
   this.getWorld()._newOrdinal(this, secondOrdinalNumber);
 };

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-14 01:25:38 UTC (rev 325)
+++ trunk/source/util/RandomUuid.js	2005-09-14 02:12:55 UTC (rev 326)
@@ -29,9 +29,14 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
 dojo.provide("orp.util.RandomUuid");
 dojo.require("orp.util.Uuid");
 
+
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
 /*global Util  */
@@ -39,6 +44,10 @@
 // -------------------------------------------------------------------
 
 
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
 /**
  * The RandomUuid class offers methods for working with 
  * random UUIDs, meaning "version 4" UUIDs.
@@ -48,7 +57,6 @@
  *
  * @scope    public instance constructor
  */
-// orp.util.RandomUuid.prototype = new orp.util.Uuid();  
 orp.util.RandomUuid = function(uuidString) {
   orp.util.Uuid.call(this);
   if (uuidString) {
@@ -56,7 +64,7 @@
     Util.assert(uuidString.length == 36);
     this._uuidString = uuidString;
   } else {
-    this._uuidString = orp.util.RandomUuid._generateUuidString();
+    this._uuidString = this._generateUuidString();
   }
 };
 
@@ -64,12 +72,6 @@
 
 
 // -------------------------------------------------------------------
-// Public class constants
-// -------------------------------------------------------------------
-orp.util.RandomUuid.HEX_RADIX = 16;
-
-
-// -------------------------------------------------------------------
 // Private class methods
 // -------------------------------------------------------------------
 
@@ -77,19 +79,19 @@
  * Generates a random UUID, meaning a "version 4" UUID.  Hopefully this 
  * implementation conforms to the existing standards for UUIDs and GUIDs.  
  * 
- * @scope    public class method
+ * @scope    public instance method
  * @return   Returns a 36-character string, which will look something like "3B12F1DF-5232-4804-897E-917BF397618A".
  */
-orp.util.RandomUuid._generateUuidString = function() {
+orp.util.RandomUuid.prototype._generateUuidString = function() {
   var hyphen = "-";
   var versionCodeForRandomlyGeneratedUuids = "4"; // 8 == binary2hex("0100")
   var variantCodeForDCEUuids = "8"; // 8 == binary2hex("1000")
-  var a = orp.util.RandomUuid._generateRandomEightCharacterHexString();
-  var b = orp.util.RandomUuid._generateRandomEightCharacterHexString();
+  var a = this._generateRandomEightCharacterHexString();
+  var b = this._generateRandomEightCharacterHexString();
   b = b.substring(0, 4) + hyphen + versionCodeForRandomlyGeneratedUuids + b.substring(5, 8);
-  var c = orp.util.RandomUuid._generateRandomEightCharacterHexString();
+  var c = this._generateRandomEightCharacterHexString();
   c = variantCodeForDCEUuids + c.substring(1, 4) + hyphen + c.substring(4, 8);
-  var d = orp.util.RandomUuid._generateRandomEightCharacterHexString();
+  var d = this._generateRandomEightCharacterHexString();
   var result = a + hyphen + b + hyphen + c + d;
   
   return result;
@@ -102,28 +104,13 @@
  *
  * @scope    private class method
  */
+/*
 orp.util.RandomUuid._generateRandom32bitNumber = function() {
   return Math.floor( (Math.random() % 1) * Math.pow(2, 32) );
 };
+*/
 
 
-/**
- * Returns a randomly generated 8-character string of hex digits.
- *
- * @scope    private class method
- */
-orp.util.RandomUuid._generateRandomEightCharacterHexString = function() {
-  // PENDING: 
-  // This isn't really random.  We should find some source of real 
-  // randomness, and feed it to an MD5 hash algorithm.     
-  var eightCharacterString = orp.util.RandomUuid._generateRandom32bitNumber().toString(orp.util.RandomUuid.HEX_RADIX);
-  while (eightCharacterString.length < 8) {
-    eightCharacterString = "0" + eightCharacterString;
-  }
-  return eightCharacterString;
-};
-
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-14 01:25:38 UTC (rev 325)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-14 02:12:55 UTC (rev 326)
@@ -30,10 +30,14 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
 dojo.provide("orp.util.TimeBasedUuid");
 dojo.require("orp.util.Uuid");
-dojo.require("orp.util.RandomUuid");
 
+
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
 /*global Util  */
@@ -41,6 +45,10 @@
 // -------------------------------------------------------------------
 
 
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
 /**
  * The TimeBasedUuid class offers methods for working with 
  * time-based UUIDs, meaning "version 1" UUIDs.
@@ -92,7 +100,6 @@
   Microsoft: "110"
 }
 */
-// orp.util.TimeBasedUuid.prototype = new orp.util.Uuid();  // makes TimeBasedUuid be a subclass of Uuid
 orp.util.TimeBasedUuid = function(uuidStringOrPseudoNode) {
   orp.util.Uuid.call(this);
   if (uuidStringOrPseudoNode) {
@@ -100,30 +107,31 @@
     var lengthOfPseudoNodeString = 12;
     if (uuidStringOrPseudoNode.length == lengthOfPseudoNodeString) {
       var pseudoNode = uuidStringOrPseudoNode;
-      this._uuidString = orp.util.TimeBasedUuid._generateUuidString(pseudoNode);
+      this._uuidString = this._generateUuidString(pseudoNode);
     } else {
       Util.assert(uuidStringOrPseudoNode.length == 36);
       this._uuidString = uuidStringOrPseudoNode;
     }
   } else {
-    this._uuidString = orp.util.TimeBasedUuid._generateUuidString();
+    this._uuidString = this._generateUuidString();
   }
 };
 
-dj_inherits(orp.util.TimeBasedUuid, orp.util.Uuid);  // makes RandomUuid be a subclass of Uuid
+dj_inherits(orp.util.TimeBasedUuid, orp.util.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
 
 
 // -------------------------------------------------------------------
-// TimeBasedUuid public class constants
+// Public class constants
 // -------------------------------------------------------------------
-// Number of seconds between October 15, 1582 and January 1, 1970
-// Util.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
+/* // Number of seconds between October 15, 1582 and January 1, 1970
+   Util.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
+*/
+// Number of hours between October 15, 1582 and January 1, 1970
 orp.util.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;
-orp.util.TimeBasedUuid.HEX_RADIX = 16;
 
 
 // -------------------------------------------------------------------
-// Uuid private global class variables
+// Private class variables
 // -------------------------------------------------------------------
 orp.util.TimeBasedUuid._ourUuidClockSeqString = null;
 orp.util.TimeBasedUuid._ourDateValueOfPreviousUuid = null;
@@ -180,7 +188,7 @@
 
 
 // -------------------------------------------------------------------
-// Private class methods
+// Private instance methods
 // -------------------------------------------------------------------
 
 /**
@@ -190,11 +198,12 @@
  * Hopefully this implementation conforms to the existing standards for 
  * UUIDs and GUIDs.  
  * 
- * @scope    private class method
+ * @scope    private instance method
  * @param    pseudoNode    Optional. A 12-character string to use as the node in the new UUID.
  * @return   Returns a 36 character string, which will look something like "3B12F1DF-5232-1804-897E-917BF397618A".
  */
-orp.util.TimeBasedUuid._generateUuidString = function(pseudoNode) {
+orp.util.TimeBasedUuid.prototype._generateUuidString = function(pseudoNode) {
+  var Uuid          = orp.util.Uuid;
   var TimeBasedUuid = orp.util.TimeBasedUuid;
   
   Util.assert(!pseudoNode || Util.isString(pseudoNode));  
@@ -203,13 +212,13 @@
   } else {
     var pseudoNodeIndicatorBit = 0x8000;
     var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
-    var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(TimeBasedUuid.HEX_RADIX);
-    pseudoNode = leftmost4HexCharacters + orp.util.RandomUuid._generateRandomEightCharacterHexString();
+    var leftmost4HexCharacters = (pseudoNodeIndicatorBit | random15bitNumber).toString(Uuid.HEX_RADIX);
+    pseudoNode = leftmost4HexCharacters + this._generateRandomEightCharacterHexString();
   }
   if (!TimeBasedUuid._ourUuidClockSeqString) {
     var variantCodeForDCEUuids = 0x8000; // 10--------------, i.e. uses only first two of 16 bits.
     var random14bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 14) );
-    TimeBasedUuid._ourUuidClockSeqString = (variantCodeForDCEUuids | random14bitNumber).toString(TimeBasedUuid.HEX_RADIX);
+    TimeBasedUuid._ourUuidClockSeqString = (variantCodeForDCEUuids | random14bitNumber).toString(Uuid.HEX_RADIX);
   }
 
   // Maybe someday think about trying to make the code more readable to
@@ -255,12 +264,12 @@
     TimeBasedUuid._ourNextIntraMillisecondIncrement = 1;
   }
   
-  var hexTimeLowLeftHalf  = arrayHundredNanosecondIntervalsSince1582[2].toString(TimeBasedUuid.HEX_RADIX);
-  var hexTimeLowRightHalf = arrayHundredNanosecondIntervalsSince1582[3].toString(TimeBasedUuid.HEX_RADIX);
+  var hexTimeLowLeftHalf  = arrayHundredNanosecondIntervalsSince1582[2].toString(Uuid.HEX_RADIX);
+  var hexTimeLowRightHalf = arrayHundredNanosecondIntervalsSince1582[3].toString(Uuid.HEX_RADIX);
   var hexTimeLow = TimeBasedUuid._padWithLeadingZeros(hexTimeLowLeftHalf, 4) + TimeBasedUuid._padWithLeadingZeros(hexTimeLowRightHalf, 4);
-  var hexTimeMid = arrayHundredNanosecondIntervalsSince1582[1].toString(TimeBasedUuid.HEX_RADIX);
+  var hexTimeMid = arrayHundredNanosecondIntervalsSince1582[1].toString(Uuid.HEX_RADIX);
   hexTimeMid = TimeBasedUuid._padWithLeadingZeros(hexTimeMid, 4);
-  var hexTimeHigh = arrayHundredNanosecondIntervalsSince1582[0].toString(TimeBasedUuid.HEX_RADIX);
+  var hexTimeHigh = arrayHundredNanosecondIntervalsSince1582[0].toString(Uuid.HEX_RADIX);
   hexTimeHigh = TimeBasedUuid._padWithLeadingZeros(hexTimeHigh, 3);
   var hyphen = "-";
   var versionCodeForTimeBasedUuids = "1"; // binary2hex("0001")
@@ -271,6 +280,10 @@
 };
 
 
+// -------------------------------------------------------------------
+// Private class methods
+// -------------------------------------------------------------------
+
 /**
  * Given a 36-character UUID string, this method returns the "node" or 
  * "pseudonode" portion of the UUID, which is the rightmost 12 characters.
@@ -295,14 +308,15 @@
  * @return   Returns a JavaScript Date objects
  */
 orp.util.TimeBasedUuid._getDateFromUuidString = function(uuidString) {
+  var Uuid          = orp.util.Uuid;
   var TimeBasedUuid = orp.util.TimeBasedUuid;
   
   var hexTimeLow = uuidString.split('-')[0];
   var hexTimeMid = uuidString.split('-')[1];
   var hexTimeHigh = uuidString.split('-')[2];
-  var timeLow = parseInt(hexTimeLow, TimeBasedUuid.HEX_RADIX);
-  var timeMid = parseInt(hexTimeMid, TimeBasedUuid.HEX_RADIX);
-  var timeHigh = parseInt(hexTimeHigh, TimeBasedUuid.HEX_RADIX);
+  var timeLow = parseInt(hexTimeLow, Uuid.HEX_RADIX);
+  var timeMid = parseInt(hexTimeMid, Uuid.HEX_RADIX);
+  var timeHigh = parseInt(hexTimeHigh, Uuid.HEX_RADIX);
   var hundredNanosecondIntervalsSince1582 = timeHigh & 0x0FFF;
   hundredNanosecondIntervalsSince1582 <<= 16;
   hundredNanosecondIntervalsSince1582 += timeMid;

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-14 01:25:38 UTC (rev 325)
+++ trunk/source/util/Uuid.js	2005-09-14 02:12:55 UTC (rev 326)
@@ -30,13 +30,17 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
 dojo.provide("orp.util.Uuid");
 
+
 // -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
+// Constructor
 // -------------------------------------------------------------------
 
-
 /**
  * The Uuid class offers methods for generating UUIDs and 
  * inspecting existing UUIDs.
@@ -52,6 +56,12 @@
 
 
 // -------------------------------------------------------------------
+// Public class constants
+// -------------------------------------------------------------------
+orp.util.Uuid.HEX_RADIX = 16;
+
+
+// -------------------------------------------------------------------
 // Public instance methods
 // -------------------------------------------------------------------
 
@@ -70,5 +80,33 @@
 
 
 // -------------------------------------------------------------------
+// Private instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns a randomly generated 8-character string of hex digits.
+ *
+ * @scope    private instance method
+ */
+orp.util.Uuid.prototype._generateRandomEightCharacterHexString = function() {
+  // PENDING: 
+  // This isn't really random.  We should find some source of real 
+  // randomness, and feed it to an MD5 hash algorithm.
+  
+  
+  // random32bitNumber is a randomly generated floating point number 
+  // between 0 and (4,294,967,296 - 1), inclusive.
+  var random32bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 32) );
+  
+  var eightCharacterString = random32bitNumber.toString(orp.util.Uuid.HEX_RADIX);
+  while (eightCharacterString.length < 8) {
+    eightCharacterString = "0" + eightCharacterString;
+  }
+  return eightCharacterString;
+};
+
+
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/util/UuidTest.js
===================================================================
--- trunk/tests/util/UuidTest.js	2005-09-14 01:25:38 UTC (rev 325)
+++ trunk/tests/util/UuidTest.js	2005-09-14 02:12:55 UTC (rev 326)
@@ -167,7 +167,7 @@
 
   var section4 = arrayOfParts[4];
   var firstChar = section4.charAt(0);
-  var hexFirstChar = parseInt(firstChar, TimeBasedUuid.HEX_RADIX);
+  var hexFirstChar = parseInt(firstChar, orp.util.Uuid.HEX_RADIX);
   binaryString = hexFirstChar.toString(2);
   var firstBit;
   if (binaryString.length == 4) {
@@ -176,7 +176,7 @@
     firstBit = '0';
   }
   // alert("firstChar = " + firstChar + "\n as number = " + hexFirstChar + 
-  //      "\n in binary = " + binaryString + "\n first bit = " + firstBit);
+  //       "\n in binary = " + binaryString + "\n first bit = " + firstBit);
   assertTrue("first bit of section 4 is 1", firstBit == '1');
 
   var uuid4 = new TimeBasedUuid("123456789ABC");
@@ -274,7 +274,7 @@
   assertTrue('Section 4 has 8 characters', (arrayOfParts[4].length == 12));
   
   var section3 = arrayOfParts[3];
-  var hex3 = parseInt(section3, TimeBasedUuid.HEX_RADIX);
+  var hex3 = parseInt(section3, orp.util.Uuid.HEX_RADIX);
   var binaryString = hex3.toString(2);
   // alert("section3 = " + section3 + "\n binaryString = " + binaryString);
   assertTrue('section 3 has 16 bits', binaryString.length == 16);



From skinner at berlios.de  Wed Sep 14 23:01:15 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 14 Sep 2005 23:01:15 +0200
Subject: [openrecord-svn] r327 - in trunk: source/model source/util tests/util
Message-ID: <200509142101.j8EL1FlO017600@sheep.berlios.de>

Author: skinner
Date: 2005-09-14 23:01:14 +0200 (Wed, 14 Sep 2005)
New Revision: 327

Modified:
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/TestReorderingForSpecialCases.js
   trunk/source/model/TestReorderingForTypicalOrdinals.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Uuid.js
   trunk/tests/util/UuidTest.js
Log:
More work on UUIDs and unit tests.

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-14 02:12:55 UTC (rev 326)
+++ trunk/source/model/StubVirtualServer.js	2005-09-14 21:01:14 UTC (rev 327)
@@ -780,10 +780,14 @@
  * Returns a newly created UUID.
  *
  * @scope    private instance method
- * @param    pseudoNode    The pseudoNode value that the new UUID should have. 
+ * @param    node    The node value that the new UUID should have. 
  */
-StubVirtualServer.prototype._generateUuid = function(pseudoNode) {
-  return new orp.util.TimeBasedUuid(pseudoNode);
+StubVirtualServer.prototype._generateUuid = function(node) {
+  if (node) {
+    return new orp.util.TimeBasedUuid({'node': node});
+  } else {
+    return new orp.util.TimeBasedUuid();
+  }
 };
 
 
@@ -797,10 +801,8 @@
   var newUuid;
   if (this._currentUser) {
     var uuidOfCurrentUser = this._currentUser.getUuid();
-    // var arrayOfParts = uuidOfCurrentUser.split("-");
-    // var pseudoNodeOfCurrentUser = arrayOfParts[4]; // "0123456789AB";
-    var pseudoNodeOfCurrentUser = uuidOfCurrentUser.getNode(); // "0123456789AB";
-    newUuid = this._generateUuid(pseudoNodeOfCurrentUser);
+    var nodeForCurrentUser = uuidOfCurrentUser.getNode(); // "0123456789AB";
+    newUuid = this._generateUuid(nodeForCurrentUser);
   } else {
     newUuid = this._generateUuid();
   }

Modified: trunk/source/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/source/model/TestReorderingForSpecialCases.js	2005-09-14 02:12:55 UTC (rev 326)
+++ trunk/source/model/TestReorderingForSpecialCases.js	2005-09-14 21:01:14 UTC (rev 327)
@@ -55,12 +55,15 @@
   Util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
   var virtualServer = new StubVirtualServer(pathToTrunkDirectory);
+
+  realUuidGenerator = StubVirtualServer.prototype._generateUuid;
   StubVirtualServer.prototype._generateUuid = mockUuidGenerator;
+
   world = new World(virtualServer);
 
-  annUuid1 = "10000000-2222-3333-4444-555555555555";
-  annUuid2 = "10000001-2222-3333-4444-555555555555";
-  annUuid3 = "10000002-2222-3333-4444-555555555555";
+  annUuid1 = "10000000-2222-1333-F444-555555555555";
+  annUuid2 = "10000001-2222-1333-F444-555555555555";
+  annUuid3 = "10000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(annUuid1);
   mockUuidGenerator.queueOfUuids.push(annUuid2);
   mockUuidGenerator.queueOfUuids.push(annUuid3);
@@ -70,9 +73,9 @@
   assertTrue("Ann has the expected uuid", userAnn.getUuidString() == annUuid1);
   world.login(userAnn, annsPassword);
 
-  foodUuid1    = "20000000-2222-3333-4444-555555555555";
-  foodUuid2    = "20000001-2222-3333-4444-555555555555";
-  foodUuid3    = "20000002-2222-3333-4444-555555555555";
+  foodUuid1    = "20000000-2222-1333-F444-555555555555";
+  foodUuid2    = "20000001-2222-1333-F444-555555555555";
+  foodUuid3    = "20000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(foodUuid1);
   mockUuidGenerator.queueOfUuids.push(foodUuid2);
   mockUuidGenerator.queueOfUuids.push(foodUuid3);
@@ -90,21 +93,24 @@
 // -------------------------------------------------------------------
 
 function testReorderBetweenTwoItemsWithTheSameOrdinal() {
-  sushiUuid     = "40000000-2222-3333-4444-555555555555";
-  sushiNameUuid = "40000001-2222-3333-4444-555555555555";
+  sushiUuid     = "40000000-2222-1333-F444-555555555555";
+  sushiNameUuid = "40000001-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(sushiUuid);
   mockUuidGenerator.queueOfUuids.push(sushiNameUuid);
-  pestoUuid     = "40000000-2222-3333-9999-555555555555";
-  pestoNameUuid = "40000001-2222-3333-9999-555555555555";
+  pestoUuid     = "40000000-2222-1333-9999-555555555555";
+  pestoNameUuid = "40000001-2222-1333-9999-555555555555";
   mockUuidGenerator.queueOfUuids.push(pestoUuid);
   mockUuidGenerator.queueOfUuids.push(pestoNameUuid);
-  guavaUuid     = "50000000-2222-3333-4444-555555555555";
-  guavaNameUuid = "50000001-2222-3333-4444-555555555555";
+  guavaUuid     = "50000000-2222-1333-F444-555555555555";
+  guavaNameUuid = "50000001-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(guavaUuid);
   mockUuidGenerator.queueOfUuids.push(guavaNameUuid);
   var sushi = world.newItem("Sushi");
   var pesto = world.newItem("Pesto");
   var guava = world.newItem("Guava");
+
+  StubVirtualServer.prototype._generateUuid = realUuidGenerator;
+  
   assertTrue(sushi.getOrdinalNumber() == pesto.getOrdinalNumber());
   guava.reorderBetween(sushi, pesto);
   assertTrue(utilAssertReportedError);
@@ -112,16 +118,16 @@
 }
 
 function testReorderBetweenTwoItemsWithTheSameTimestamp() {
-  sushiUuid     = "40000000-2222-3333-4444-555555555555";
-  sushiNameUuid = "40000001-2222-3333-4444-555555555555";
+  sushiUuid     = "40000000-2222-1333-F444-555555555555";
+  sushiNameUuid = "40000001-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(sushiUuid);
   mockUuidGenerator.queueOfUuids.push(sushiNameUuid);
-  pestoUuid     = "40000002-2222-3333-4444-555555555555";
-  pestoNameUuid = "40000003-2222-3333-4444-555555555555";
+  pestoUuid     = "40000002-2222-1333-F444-555555555555";
+  pestoNameUuid = "40000003-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(pestoUuid);
   mockUuidGenerator.queueOfUuids.push(pestoNameUuid);
-  guavaUuid     = "40000004-2222-3333-4444-555555555555";
-  guavaNameUuid = "40000005-2222-3333-4444-555555555555";
+  guavaUuid     = "40000004-2222-1333-F444-555555555555";
+  guavaNameUuid = "40000005-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(guavaUuid);
   mockUuidGenerator.queueOfUuids.push(guavaNameUuid);
   var sushi = world.newItem("Sushi");
@@ -130,16 +136,23 @@
   assertTrue('Sushi and Pesto have same timestamp', sushi.getTimestamp() == pesto.getTimestamp());
   assertTrue('Sushi and Guava have same timestamp', sushi.getTimestamp() == guava.getTimestamp());
 
+  StubVirtualServer.prototype._generateUuid = realUuidGenerator;
+
   guava.reorderBetween(sushi, pesto);
 
-  sushiLinkUuid    = "60000000-2222-3333-4444-555555555555";
+  StubVirtualServer.prototype._generateUuid = mockUuidGenerator;
+
+  sushiLinkUuid    = "60000000-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(sushiLinkUuid);
   sushi.assignToCategory(categoryCalledFood);
-  pestoLinkUuid    = "60000001-2222-3333-4444-555555555555";
+  pestoLinkUuid    = "60000001-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(pestoLinkUuid);
   pesto.assignToCategory(categoryCalledFood);
-  guavaLinkUuid    = "60000002-2222-3333-4444-555555555555";
+  guavaLinkUuid    = "60000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(guavaLinkUuid);
+  
+  StubVirtualServer.prototype._generateUuid = realUuidGenerator;
+
   guava.assignToCategory(categoryCalledFood);
 
   guava.reorderBetween(sushi, pesto);

Modified: trunk/source/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-14 02:12:55 UTC (rev 326)
+++ trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-14 21:01:14 UTC (rev 327)
@@ -58,8 +58,8 @@
   utilAssertReportedError = false;
   Util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
-  // var virtualServer = new StubVirtualServer(pathToTrunkDirectory, {"_generateUuid":mockUuidGenerator});
   var virtualServer = new StubVirtualServer(pathToTrunkDirectory);
+  var realUuidGenerator = StubVirtualServer.prototype._generateUuid;
   StubVirtualServer.prototype._generateUuid = mockUuidGenerator;
 /*
 You can use DeltaVirtualServer instead if you want to append all transactions to a file for debugging purposes.
@@ -70,9 +70,9 @@
 
   world = new World(virtualServer);
 
-  annUuid1 = "10000000-2222-3333-4444-555555555555";
-  annUuid2 = "10000001-2222-3333-4444-555555555555";
-  annUuid3 = "10000002-2222-3333-4444-555555555555";
+  annUuid1 = "10000000-2222-1333-F444-555555555555";
+  annUuid2 = "10000001-2222-1333-F444-555555555555";
+  annUuid3 = "10000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(annUuid1);
   mockUuidGenerator.queueOfUuids.push(annUuid2);
   mockUuidGenerator.queueOfUuids.push(annUuid3);
@@ -82,28 +82,28 @@
   assertTrue("Ann has the expected uuid", userAnn.getUuidString() == annUuid1);
   world.login(userAnn, annsPassword);
 
-  foodUuid1    = "20000000-2222-3333-4444-555555555555";
-  foodUuid2    = "20000001-2222-3333-4444-555555555555";
-  foodUuid3    = "20000002-2222-3333-4444-555555555555";
+  foodUuid1    = "20000000-2222-1333-F444-555555555555";
+  foodUuid2    = "20000001-2222-1333-F444-555555555555";
+  foodUuid3    = "20000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(foodUuid1);
   mockUuidGenerator.queueOfUuids.push(foodUuid2);
   mockUuidGenerator.queueOfUuids.push(foodUuid3);
   categoryCalledFood = world.newCategory("Food");
 
-  sushiUuid     = "40000000-2222-3333-4444-555555555555";
-  sushiNameUuid = "40000001-2222-3333-4444-555555555555";
+  sushiUuid     = "40000000-2222-1333-F444-555555555555";
+  sushiNameUuid = "40000001-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(sushiUuid);
   mockUuidGenerator.queueOfUuids.push(sushiNameUuid);
-  pestoUuid     = "40000010-2222-3333-4444-555555555555";
-  pestoNameUuid = "40000011-2222-3333-4444-555555555555";
+  pestoUuid     = "40000010-2222-1333-F444-555555555555";
+  pestoNameUuid = "40000011-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(pestoUuid);
   mockUuidGenerator.queueOfUuids.push(pestoNameUuid);
-  guavaUuid     = "40000020-2222-3333-4444-555555555555";
-  guavaNameUuid = "40000021-2222-3333-4444-555555555555";
+  guavaUuid     = "40000020-2222-1333-F444-555555555555";
+  guavaNameUuid = "40000021-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(guavaUuid);
   mockUuidGenerator.queueOfUuids.push(guavaNameUuid);
-  taffyUuid     = "40000030-2222-3333-4444-555555555555";
-  taffyNameUuid = "40000031-2222-3333-4444-555555555555";
+  taffyUuid     = "40000030-2222-1333-F444-555555555555";
+  taffyNameUuid = "40000031-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(taffyUuid);
   mockUuidGenerator.queueOfUuids.push(taffyNameUuid);
   sushi = world.newItem("Sushi");
@@ -115,18 +115,20 @@
   taffy = world.newItem("Taffy");
   assertTrue("taffy has the expected uuid", taffy.getUuidString() == taffyUuid);
 
-  sushiLinkUuid    = "60000000-2222-3333-4444-555555555555";
+  sushiLinkUuid    = "60000000-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(sushiLinkUuid);
   sushi.assignToCategory(categoryCalledFood);
-  pestoLinkUuid    = "60000001-2222-3333-4444-555555555555";
+  pestoLinkUuid    = "60000001-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(pestoLinkUuid);
   pesto.assignToCategory(categoryCalledFood);
-  guavaLinkUuid    = "60000002-2222-3333-4444-555555555555";
+  guavaLinkUuid    = "60000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(guavaLinkUuid);
   guava.assignToCategory(categoryCalledFood);
-  taffyLinkUuid    = "60000002-2222-3333-4444-555555555555";
+  taffyLinkUuid    = "60000002-2222-1333-F444-555555555555";
   mockUuidGenerator.queueOfUuids.push(taffyLinkUuid);
   taffy.assignToCategory(categoryCalledFood);
+
+  StubVirtualServer.prototype._generateUuid = realUuidGenerator;
 }
 
 function tearDown() {

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-14 02:12:55 UTC (rev 326)
+++ trunk/source/util/RandomUuid.js	2005-09-14 21:01:14 UTC (rev 327)
@@ -55,17 +55,31 @@
  * For more info, see 
  * http://www.webdav.org/specs/draft-leach-uuids-guids-01.txt
  *
+ * Examples:
+ * <pre>
+ *   var uuid = new orp.util.RandomUuid();
+ *   var uuid = new orp.util.RandomUuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var uuid = new orp.util.RandomUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+ * </pre>
+ *
  * @scope    public instance constructor
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
  */
 orp.util.RandomUuid = function(uuidString) {
   orp.util.Uuid.call(this);
   if (uuidString) {
+    if (Util.isObject(uuidString)) {
+      var namedParameters = uuidString;
+      uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
+    }
     Util.assert(Util.isString(uuidString));
     Util.assert(uuidString.length == 36);
     this._uuidString = uuidString;
   } else {
     this._uuidString = this._generateUuidString();
   }
+  Util.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
 };
 
 dj_inherits(orp.util.RandomUuid, orp.util.Uuid);  // makes RandomUuid be a subclass of Uuid

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-14 02:12:55 UTC (rev 326)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-14 21:01:14 UTC (rev 327)
@@ -60,61 +60,63 @@
  *   http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagcjh_20
  *   http://jakarta.apache.org/commons/sandbox/id/apidocs/org/apache/commons/id/uuid/clock/Clock.html
  *
+ * Examples:
+ * <pre>
+ *   var uuid = new orp.util.TimeBasedUuid();
+ *   var uuid = new orp.util.TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A");
+ *   var uuid = new orp.util.TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+ *   var uuid = new orp.util.TimeBasedUuid({node: "017BF397618A"});
+ *   var uuid = new orp.util.TimeBasedUuid({node: "F17BF397618A"});
+ *   var uuid = new orp.util.TimeBasedUuid({hardwareNode: "017BF397618A"});
+ *   var uuid = new orp.util.TimeBasedUuid({pseudoNode:   "F17BF397618A"});
+ * </pre>
+ *
  * @scope    public instance constructor
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    node    A 12-character hex string representing a pseudoNode or hardwareNode. 
+ * @namedParam    hardwareNode    A 12-character hex string containing an IEEE 802.3 network node identificator. 
+ * @namedParam    pseudoNode    A 12-character hex string representing a pseudoNode. 
  */
-/*
- * PENDING: refactor constructor API
- // OLD API
-var uuid = new orp.util.TimeBasedUuid();                 // new
-var uuid = new orp.util.TimeBasedUuid("917BF397618A");   // pseudonode
-var uuid = new orp.util.TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A")
-
-// NEW API
-var uuid = new orp.util.TimeBasedUuid();
-var uuid = new orp.util.TimeBasedUuid({pseudoNode: "917BF397618A"});
-var uuid = new orp.util.TimeBasedUuid({node: "917BF397618A"});
-var uuid = new orp.util.TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
-
-
-var uuid = new orp.util.RandomUuid();
-var uuid = new orp.util.RandomUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
-
-var uuid = new orp.util.Uuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
-var version = orp.util.Uuid.getVersionFromUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
-var version = orp.util.Uuid.getVariantFromUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
-var boolean = orp.util.Uuid.isRandomUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
-var boolean = orp.util.Uuid.isTimeBasedUuidString("3B12F1DF-5232-1804-897E-917BF397618A");
-
-// in Uuid.js
-var Version = {
-  TimeBased: 1,
-  DCESecurity: 2,
-  NameBasedMD5: 3,
-  Random: 4,
-  NameBasedSHA1: 5
-}
-
-var Variant = {
-  NCS: "0",
-  DCE: "10",
-  Microsoft: "110"
-}
-*/
-orp.util.TimeBasedUuid = function(uuidStringOrPseudoNode) {
+orp.util.TimeBasedUuid = function(namedParameter) {
   orp.util.Uuid.call(this);
-  if (uuidStringOrPseudoNode) {
-    Util.assert(Util.isString(uuidStringOrPseudoNode));
-    var lengthOfPseudoNodeString = 12;
-    if (uuidStringOrPseudoNode.length == lengthOfPseudoNodeString) {
-      var pseudoNode = uuidStringOrPseudoNode;
-      this._uuidString = this._generateUuidString(pseudoNode);
+  var uuidString;
+  if (namedParameter) {
+    if (Util.isObject(namedParameter)) {
+      uuidString = namedParameter[orp.util.Uuid.NamedParameters.uuidString];
+      var node = namedParameter["node"];
+      var pseudoNode = namedParameter["pseudoNode"];
+      var hardwareNode = namedParameter["hardwareNode"];
+      var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
+      Util.assert(atLeastOneParameter);
+      if (uuidString) {
+        Util.assert(!node && !pseudoNode && !hardwareNode);
+        Util.assert(uuidString.length == 36);
+        this._uuidString = uuidString;
+      }
+      if (node || pseudoNode || hardwareNode) {
+        Util.assert((node || pseudoNode).length == 12);
+        var firstCharacter = (node || pseudoNode).charAt(0);
+        var firstDigit = parseInt(firstCharacter, orp.util.Uuid.HEX_RADIX);
+        if (hardwareNode) { 
+          Util.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
+        }
+        if (pseudoNode) { 
+          Util.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
+        }
+        this._uuidString = this._generateUuidString(node || pseudoNode || hardwareNode);
+      }
     } else {
-      Util.assert(uuidStringOrPseudoNode.length == 36);
-      this._uuidString = uuidStringOrPseudoNode;
+      uuidString = namedParameter;
+      Util.assert(Util.isString(uuidString));
+      Util.assert(uuidString.length == 36);
+      this._uuidString = uuidString;
     }
   } else {
     this._uuidString = this._generateUuidString();
   }
+    
+  Util.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
 };
 
 dj_inherits(orp.util.TimeBasedUuid, orp.util.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
@@ -123,10 +125,10 @@
 // -------------------------------------------------------------------
 // Public class constants
 // -------------------------------------------------------------------
-/* // Number of seconds between October 15, 1582 and January 1, 1970
-   Util.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
-*/
-// Number of hours between October 15, 1582 and January 1, 1970
+// Number of seconds between October 15, 1582 and January 1, 1970:
+// orp.util.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_SECONDS = 12219292800;
+//
+// Number of hours between October 15, 1582 and January 1, 1970:
 orp.util.TimeBasedUuid.GREGORIAN_CHANGE_OFFSET_IN_HOURS = 3394248;
 
 
@@ -357,7 +359,7 @@
   // time-based UUIDs.
   hexTimeHigh = hexTimeHigh.slice(1); 
   
-  returnString = hexTimeHigh + hexTimeMid + hexTimeLow;
+  var returnString = hexTimeHigh + hexTimeMid + hexTimeLow;
   
   Util.assert(returnString.length == 15);
   return returnString;

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-14 02:12:55 UTC (rev 326)
+++ trunk/source/util/Uuid.js	2005-09-14 21:01:14 UTC (rev 327)
@@ -45,13 +45,30 @@
  * The Uuid class offers methods for generating UUIDs and 
  * inspecting existing UUIDs.
  *
- * THIS IS AN ABSTRACT SUPERCLASS.  
- * DO NOT CALL THIS CONSTRUCTOR.
+ * Examples:
+ * <pre>
+ *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var uuid = new orp.util.Uuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+ * </pre>
  *
  * @scope    public instance constructor
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
  */
-orp.util.Uuid = function() {
+orp.util.Uuid = function(uuidString) {
   this._uuidString = null;
+  if (uuidString) {
+    if (Util.isObject(uuidString)) {
+      var namedParameters = uuidString;
+      uuidString = namedParameters["uuidString"];
+    }
+    if (Util.isString(uuidString)) {
+      this._uuidString = uuidString;
+    } else {
+      Util.assert(false);
+    }
+  }
+  this._uuidString = uuidString;
 };
 
 
@@ -59,16 +76,66 @@
 // Public class constants
 // -------------------------------------------------------------------
 orp.util.Uuid.HEX_RADIX = 16;
+orp.util.Uuid.Version = {
+  UNKNOWN: 0,
+  TIME_BASED: 1,
+  DCE_SECURITY: 2,
+  NAME_BASED_MD5: 3,
+  RANDOM: 4,
+  NAME_BASED_SHA1: 5 };
+orp.util.Uuid.Variant = {
+  NCS: "0",
+  DCE: "10",
+  MICROSOFT: "110",
+  UNKNOWN: "111" };
+orp.util.Uuid.NamedParameters = {
+  uuidString: "uuidString" };
 
+// -------------------------------------------------------------------
+// Public class methods
+// -------------------------------------------------------------------
 
+/**
+ * Given a 36-character string representing a UUID, returns a new UUID object.
+ *
+ * @scope    public class method
+ * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @return   A new instance of Uuid, TimeBasedUuid, or RandomUuid.
+ */
+orp.util.Uuid.newUuid = function(uuidString) {
+  dojo.require("orp.util.RandomUuid");
+  dojo.require("orp.util.TimeBasedUuid");
+  if (Util.isObject(uuidString)) {
+    var namedParameters = uuidString;
+    uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
+  }
+  Util.assert(Util.isString(uuidString));
+
+  var uuid = new orp.util.Uuid(uuidString);
+  if (uuid.getVersion() == orp.util.Uuid.Version.TIME_BASED) {
+    uuid = new orp.util.TimeBasedUuid(uuidString);
+  }
+  if (uuid.getVersion() == orp.util.Uuid.Version.RANDOM) {
+    uuid = new orp.util.RandomUuid(uuidString);
+  }
+  return uuid;
+};
+
+
 // -------------------------------------------------------------------
+// Private class constants
+// -------------------------------------------------------------------
+orp.util.Uuid._ourVariantLookupTable = null;
+
+
+// -------------------------------------------------------------------
 // Public instance methods
 // -------------------------------------------------------------------
 
 /**
  * Returns a 36-character string representing the UUID, such as: 
  * <pre>
- *   3B12F1DF-5232-1804-897E-917BF397618A
+ *   "3B12F1DF-5232-1804-897E-917BF397618A"
  * </pre>
  *
  * @scope    public instance method
@@ -79,6 +146,80 @@
 };
 
 
+/**
+ * Returns a version number that indicates what type of UUID this is. 
+ * For example:
+ * <pre>
+ *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var version = uuid.getVersion();
+ *   Util.assert(version == orp.util.Uuid.Version.TIME_BASED);
+ * </pre>
+ *
+ * @scope    public instance method
+ * @return   Returns one of the enumarted orp.util.Uuid.Version values.
+ */
+orp.util.Uuid.prototype.getVersion = function() {
+  // "3B12F1DF-5232-1804-897E-917BF397618A"
+  //                ^
+  //                |
+  //       (version 1 == TIME_BASED)
+  var versionCharacter = this._uuidString.charAt(14);
+  var versionNumber = parseInt(versionCharacter, orp.util.Uuid.HEX_RADIX);
+  return versionNumber;
+};
+
+
+/**
+ * Returns a variant code that indicates what type of UUID this is. 
+ * For example:
+ * <pre>
+ *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+ *   var variant = uuid.getVariant();
+ *   Util.assert(variant == orp.util.Uuid.Variant.DCE);
+ * </pre>
+ *
+ * @scope    public instance method
+ * @return   Returns one of the enumarted orp.util.Uuid.Variant values.
+ */
+orp.util.Uuid.prototype.getVariant = function() {
+  // "3B12F1DF-5232-1804-897E-917BF397618A"
+  //                     ^
+  //                     |
+  //         (variant "10__" == DCE)
+  var variantCharacter = this._uuidString.charAt(19);
+  var variantNumber = parseInt(variantCharacter, orp.util.Uuid.HEX_RADIX);
+  Util.assert((variantNumber >= 0) && (variantNumber <= 16));
+  
+  if (!orp.util.Uuid._ourVariantLookupTable) {
+    var Variant = orp.util.Uuid.Variant;
+    var lookupTable = [];
+    orp.util.Uuid._ourVariantLookupTable = lookupTable;
+    
+    lookupTable[0x0] = Variant.NCS;       // 0000
+    lookupTable[0x1] = Variant.NCS;       // 0001
+    lookupTable[0x2] = Variant.NCS;       // 0010
+    lookupTable[0x3] = Variant.NCS;       // 0011
+    
+    lookupTable[0x4] = Variant.NCS;       // 0100
+    lookupTable[0x5] = Variant.NCS;       // 0101
+    lookupTable[0x6] = Variant.NCS;       // 0110
+    lookupTable[0x7] = Variant.NCS;       // 0111
+
+    lookupTable[0x8] = Variant.DCE;       // 1000
+    lookupTable[0x9] = Variant.DCE;       // 1001
+    lookupTable[0xA] = Variant.DCE;       // 1010
+    lookupTable[0xB] = Variant.DCE;       // 1011
+    
+    lookupTable[0xC] = Variant.MICROSOFT; // 1100
+    lookupTable[0xD] = Variant.MICROSOFT; // 1101
+    lookupTable[0xE] = Variant.UNKNOWN;   // 1110
+    lookupTable[0xF] = Variant.UNKNOWN;   // 1111
+  }
+  
+  return orp.util.Uuid._ourVariantLookupTable[variantNumber];
+};
+
+
 // -------------------------------------------------------------------
 // Private instance methods
 // -------------------------------------------------------------------

Modified: trunk/tests/util/UuidTest.js
===================================================================
--- trunk/tests/util/UuidTest.js	2005-09-14 02:12:55 UTC (rev 326)
+++ trunk/tests/util/UuidTest.js	2005-09-14 21:01:14 UTC (rev 327)
@@ -40,9 +40,11 @@
 
 function setUp() {
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.Uuid");
   dojo.require("orp.util.RandomUuid");
   dojo.require("orp.util.TimeBasedUuid");
 
+  Uuid = orp.util.Uuid;
   RandomUuid = orp.util.RandomUuid;
   TimeBasedUuid = orp.util.TimeBasedUuid;
 }
@@ -129,42 +131,56 @@
   assert(result[3] === 20);  
 }  
 
-function testMethodsForWorkingWithRandomUuids() {
+function testRandomUuids() {
   var uuid1 = new RandomUuid();
   var uuid2 = new RandomUuid();
-  uuid1 = uuid1.toString();
-  uuid2 = uuid2.toString();
+  var uuid3 = new RandomUuid("3B12F1DF-5232-4804-897E-917BF397618A");
+  var uuid4 = new RandomUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
 
   // alert(uuid1 + "\n" + uuid2);
-  checkUuidValidity(uuid1);
-  checkUuidValidity(uuid2);
+  checkRandomUuidValidity(uuid1);
+  checkRandomUuidValidity(uuid2);
+  checkRandomUuidValidity(uuid3);
+  checkRandomUuidValidity(uuid4);
+
+  var uuidString1 = uuid1.toString();
+  var uuidString2 = uuid2.toString();
   
-  var arrayOfParts = uuid1.split("-");
-  var section2 = arrayOfParts[2];
-  assertTrue('Section 2 starts with a 4', (section2.charAt(0) == "4"));
-  
-  assertTrue("uuid1 != uuid2", uuid1 != uuid2);
+  assertTrue("uuid1 != uuid2", uuidString1 != uuidString2);
 }
 
-function testMethodsForWorkingWithTimeBasedUuids() {
+function testTimeBasedUuids() {
   var uuid1 = new TimeBasedUuid();
   var uuid2 = new TimeBasedUuid();
   var uuid3 = new TimeBasedUuid();
+  var uuid4 = new TimeBasedUuid({node: "123456789ABC"});
+  var uuid5 = new TimeBasedUuid({'node': "123456789ABC"});
+  var uuid6 = new TimeBasedUuid({pseudoNode: "823456789ABC"});
+  var uuid7 = new TimeBasedUuid({'pseudoNode': "823456789ABC"});
+  var uuid8 = new TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid9 = new TimeBasedUuid({'uuidString': "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid10 = new TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A");
+  
+  checkTimeBasedUuidValidity(uuid1);
+  checkTimeBasedUuidValidity(uuid2);
+  checkTimeBasedUuidValidity(uuid3);
+  checkTimeBasedUuidValidity(uuid4);
+  checkTimeBasedUuidValidity(uuid5);
+  checkTimeBasedUuidValidity(uuid6);
+  checkTimeBasedUuidValidity(uuid7);
+  checkTimeBasedUuidValidity(uuid8);
+  checkTimeBasedUuidValidity(uuid9);
+  checkTimeBasedUuidValidity(uuid10);
+
   uuid1 = uuid1.toString();
   uuid2 = uuid2.toString();
   uuid3 = uuid3.toString();
-  
-  checkUuidValidity(uuid1);
-  checkUuidValidity(uuid2);
-  checkUuidValidity(uuid3);
+  uuid4 = uuid4.toString();
 
   assertTrue("uuid1 != uuid2", uuid1 != uuid2);
   assertTrue("uuid2 != uuid3", uuid1 != uuid2);
   
   var arrayOfParts = uuid1.split("-");
-  var section2 = arrayOfParts[2];
-  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
-
   var section4 = arrayOfParts[4];
   var firstChar = section4.charAt(0);
   var hexFirstChar = parseInt(firstChar, orp.util.Uuid.HEX_RADIX);
@@ -179,12 +195,10 @@
   //       "\n in binary = " + binaryString + "\n first bit = " + firstBit);
   assertTrue("first bit of section 4 is 1", firstBit == '1');
 
-  var uuid4 = new TimeBasedUuid("123456789ABC");
-  uuid4 = uuid4.toString();
-  checkUuidValidity(uuid4);
+
   arrayOfParts = uuid4.split("-");
   section4 = arrayOfParts[4];
-  assertTrue('Section 4 = pseudoNode input', section4 == "123456789ABC");
+  assertTrue('Section 4 = node input', section4 == "123456789ABC");
 
   /* 
   // Old code that Brian wrote to try to get a sense of how
@@ -242,30 +256,71 @@
   */
 }
 
-function testUuidObjects() {
-  var uuid1 = new TimeBasedUuid();
-  var timestampAsHexString = uuid1.getTimestampAsHexString();
-  assertTrue("A UUID's timestamp hex string is 15-characters long.", timestampAsHexString.length == 15);
+function testGenericUuids() {
+  // Time-based UUIDs
+  var uuid1 = new Uuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid2 = new Uuid("3B12F1DF-5232-1804-897E-917BF397618A");
+
+  // Random UUIDs
+  var uuid3 = new Uuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+  var uuid4 = new Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
+  
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid1.getVersion() == Uuid.Version.TIME_BASED));    
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid2.getVersion() == Uuid.Version.TIME_BASED));    
+
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid3.getVersion() == Uuid.Version.RANDOM));    
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid4.getVersion() == Uuid.Version.RANDOM));    
+
+  checkUuidValidity(uuid1);
+  checkUuidValidity(uuid2);
+  checkUuidValidity(uuid3);
+  checkUuidValidity(uuid4);
 }
 
+function testUuidFactory() {
+  // Time-based UUIDs
+  var uuid1 = Uuid.newUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
+  var uuid2 = Uuid.newUuid("3B12F1DF-5232-1804-897E-917BF397618A");
 
+  // Random UUIDs
+  var uuid3 = Uuid.newUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+  var uuid4 = Uuid.newUuid("3B12F1DF-5232-4804-897E-917BF397618A");
+  
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid1.getVersion() == Uuid.Version.TIME_BASED));    
+  assertTrue('Time-based UUIDs return Uuid.Version.TIME_BASED', (uuid2.getVersion() == Uuid.Version.TIME_BASED));    
+
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid3.getVersion() == Uuid.Version.RANDOM));    
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (uuid4.getVersion() == Uuid.Version.RANDOM));    
+
+  checkTimeBasedUuidValidity(uuid1);
+  checkTimeBasedUuidValidity(uuid2);
+  
+  checkRandomUuidValidity(uuid3);
+  checkRandomUuidValidity(uuid4);
+}
+
 // -------------------------------------------------------------------
 // Helper functions
 // -------------------------------------------------------------------
 
 function checkUuidValidity(uuid) {
-  assertTrue('UUIDs have 36 characters', (uuid.length == 36));
+  var variant = uuid.getVariant();
+  assertTrue('All of our UUIDs are DCE UUIDs', (variant == Uuid.Variant.DCE));  
+  
+  var uuidString = uuid.toString();
+  
+  assertTrue('UUIDs have 36 characters', (uuidString.length == 36));
 
   var validCharacters = "0123456789abcedfABCDEF-";
   var character;
   var position;
   for (var i = 0; i < 36; ++i) {
-    character = uuid.charAt(i);
+    character = uuidString.charAt(i);
     position = validCharacters.indexOf(character);
     assertTrue('UUIDs have only valid characters', (position != -1));
   }
   
-  var arrayOfParts = uuid.split("-");
+  var arrayOfParts = uuidString.split("-");
   assertTrue('UUIDs have 5 sections separated by 4 hyphens', (arrayOfParts.length == 5));
   assertTrue('Section 0 has 8 characters', (arrayOfParts[0].length == 8));
   assertTrue('Section 1 has 4 characters', (arrayOfParts[1].length == 4));
@@ -282,7 +337,42 @@
   assertTrue("second bit of section 3 is 0", binaryString.charAt(1) == '0');
 }
 
+function checkRandomUuidValidity(uuid) {
+  checkUuidValidity(uuid);
 
+  var version = uuid.getVersion();
+  assertTrue('Random UUIDs return Uuid.Version.RANDOM', (version == Uuid.Version.RANDOM));  
+  
+  var uuidString = uuid.toString();
+  var arrayOfParts = uuidString.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 4', (section2.charAt(0) == "4"));
+}
+
+function checkTimeBasedUuidValidity(uuid) {
+  checkUuidValidity(uuid);
+
+  var version = uuid.getVersion();
+  assertTrue('TimeBased UUIDs return Uuid.Version.TIME_BASED', (version == Uuid.Version.TIME_BASED));  
+
+  var node = uuid.getNode();
+  assertTrue("A UUID's node is a string", (Util.isString(node)));
+  assertTrue("A UUID's node string is 12 characters long.", node.length == 12);
+
+  var date = uuid.getDate();
+  assertTrue("TimeBased UUIDs can return a Date", (date instanceof Date));
+
+  var timestampAsHexString = uuid.getTimestampAsHexString();
+  assertTrue("A UUID's timestamp hex string is 15 characters long.", timestampAsHexString.length == 15);
+  
+  var uuidString = uuid.toString();
+  var arrayOfParts = uuidString.split("-");
+  var section2 = arrayOfParts[2];
+  assertTrue('Section 2 starts with a 1', (section2.charAt(0) == "1"));  
+
+
+}
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------



From skinner at berlios.de  Thu Sep 15 00:50:25 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 15 Sep 2005 00:50:25 +0200
Subject: [openrecord-svn] r328 - in trunk: documentation source/model source/util tests/dojo tests/util
Message-ID: <200509142250.j8EMoPdI018029@sheep.berlios.de>

Author: skinner
Date: 2005-09-15 00:50:16 +0200 (Thu, 15 Sep 2005)
New Revision: 328

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/model/ModelTest.js
   trunk/source/model/RepositoryWritingTest.js
   trunk/source/model/TestReorderingForSpecialCases.js
   trunk/source/model/TestReorderingForTypicalOrdinals.js
   trunk/source/util/CsvParser.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Uuid.js
   trunk/tests/dojo/SimpleDojoTest.js
   trunk/tests/util/CsvParserTest.js
   trunk/tests/util/UuidTest.js
Log:
More conversion to Dojo, plus bug fixes and more unit tests. 

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/documentation/release_planning.txt	2005-09-14 22:50:16 UTC (rev 328)
@@ -352,10 +352,10 @@
 -------+----------+---------+----------------------------------------------
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
-brian  |          | done    |  1. look into using the Dojo Package System
-       |          |         |     convert code to use Dojo Package System
-brian  | 0.25 IED | 0   IED |     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
-brian  | 0.25 IED |         |     refactor UUID constructor API
+brian  |          | 0.5  IED|  1. look into using the Dojo Package System
+       |          | 0.5+    |     convert code to use Dojo Package System
+brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
+brian  | 0.25 IED | 0.25 IED|     refactor UUID constructor API, and other UUID improvements
        |          |         |  2. create a FakeStorage class, + rename FileSaver + HttpSaver
        |          |         |  3. rename Dehydrate and Rehydrate to Serialize and Deserialize
        |          |         |  4. merge StubVirtualServer + DeltaVirtualServer, and re-name

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/model/ModelTest.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -48,6 +48,8 @@
 
 function setUp() {
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+
   ModelTestVars = {};
 
   var pathToTrunkDirectory = "../..";

Modified: trunk/source/model/RepositoryWritingTest.js
===================================================================
--- trunk/source/model/RepositoryWritingTest.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/model/RepositoryWritingTest.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -42,6 +42,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
 
   utilAssertReportedError = false;

Modified: trunk/source/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/source/model/TestReorderingForSpecialCases.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/model/TestReorderingForSpecialCases.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -49,6 +49,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
 
   utilAssertReportedError = false;

Modified: trunk/source/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -53,6 +53,7 @@
 // -------------------------------------------------------------------
 
 function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
 
   utilAssertReportedError = false;

Modified: trunk/source/util/CsvParser.js
===================================================================
--- trunk/source/util/CsvParser.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/util/CsvParser.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -28,9 +28,15 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
 dojo.provide("orp.util.CsvParser");
+dojo.require("dojo.lang.*");
 // dojo.require("orp.util.Util");
 
+
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
 /*global Util  */
@@ -72,7 +78,7 @@
  * @return   Returns an array containing sub-arrays containing strings.
  */
 orp.util.CsvParser.prototype.getStringValuesFromCsvData = function(csvData) {
-  Util.assert(Util.isString(csvData));
+  Util.assert(dojo.lang.isString(csvData));
   
   var lineEndingCharacters = new RegExp("\r\n|\n|\r");
   var leadingWhiteSpaceCharacters = new RegExp("^\\s+",'g');

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/util/RandomUuid.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -66,14 +66,20 @@
  * @param    uuidString    A 36-character string that conforms to the UUID spec. 
  * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
  */
-orp.util.RandomUuid = function(uuidString) {
+orp.util.RandomUuid = function(namedParameters) {
   orp.util.Uuid.call(this);
-  if (uuidString) {
-    if (Util.isObject(uuidString)) {
-      var namedParameters = uuidString;
-      uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
+  var uuidString;
+  if (namedParameters) {
+    if (dojo.lang.isString(namedParameters)) {
+      uuidString = namedParameters;
+    } else {
+      if (dojo.lang.isObject(namedParameters)) {
+        uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
+      } else {
+        Util.assert(false);
+      }
     }
-    Util.assert(Util.isString(uuidString));
+    Util.assert(dojo.lang.isString(uuidString));
     Util.assert(uuidString.length == 36);
     this._uuidString = uuidString;
   } else {

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -78,39 +78,42 @@
  * @namedParam    hardwareNode    A 12-character hex string containing an IEEE 802.3 network node identificator. 
  * @namedParam    pseudoNode    A 12-character hex string representing a pseudoNode. 
  */
-orp.util.TimeBasedUuid = function(namedParameter) {
+orp.util.TimeBasedUuid = function(namedParameters) {
   orp.util.Uuid.call(this);
   var uuidString;
-  if (namedParameter) {
-    if (Util.isObject(namedParameter)) {
-      uuidString = namedParameter[orp.util.Uuid.NamedParameters.uuidString];
-      var node = namedParameter["node"];
-      var pseudoNode = namedParameter["pseudoNode"];
-      var hardwareNode = namedParameter["hardwareNode"];
-      var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
-      Util.assert(atLeastOneParameter);
-      if (uuidString) {
-        Util.assert(!node && !pseudoNode && !hardwareNode);
-        Util.assert(uuidString.length == 36);
-        this._uuidString = uuidString;
-      }
-      if (node || pseudoNode || hardwareNode) {
-        Util.assert((node || pseudoNode).length == 12);
-        var firstCharacter = (node || pseudoNode).charAt(0);
-        var firstDigit = parseInt(firstCharacter, orp.util.Uuid.HEX_RADIX);
-        if (hardwareNode) { 
-          Util.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
+  if (namedParameters) {
+    if (dojo.lang.isString(namedParameters)) {
+      uuidString = namedParameters;
+      Util.assert(uuidString.length == 36);
+      this._uuidString = uuidString;
+    } else {
+      if (dojo.lang.isObject(namedParameters)) {
+        uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
+        var node = namedParameters["node"];
+        var pseudoNode = namedParameters["pseudoNode"];
+        var hardwareNode = namedParameters["hardwareNode"];
+        var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
+        Util.assert(atLeastOneParameter);
+        if (uuidString) {
+          Util.assert(!node && !pseudoNode && !hardwareNode);
+          Util.assert(uuidString.length == 36);
+          this._uuidString = uuidString;
         }
-        if (pseudoNode) { 
-          Util.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
+        if (node || pseudoNode || hardwareNode) {
+          Util.assert((node || pseudoNode).length == 12);
+          var firstCharacter = (node || pseudoNode).charAt(0);
+          var firstDigit = parseInt(firstCharacter, orp.util.Uuid.HEX_RADIX);
+          if (hardwareNode) { 
+            Util.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
+          }
+          if (pseudoNode) { 
+            Util.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
+          }
+          this._uuidString = this._generateUuidString(node || pseudoNode || hardwareNode);
         }
-        this._uuidString = this._generateUuidString(node || pseudoNode || hardwareNode);
+      } else {
+        Util.assert(false);
       }
-    } else {
-      uuidString = namedParameter;
-      Util.assert(Util.isString(uuidString));
-      Util.assert(uuidString.length == 36);
-      this._uuidString = uuidString;
     }
   } else {
     this._uuidString = this._generateUuidString();

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/source/util/Uuid.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -35,6 +35,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.util.Uuid");
+dojo.require("dojo.lang.*");
 
 
 // -------------------------------------------------------------------
@@ -58,17 +59,17 @@
 orp.util.Uuid = function(uuidString) {
   this._uuidString = null;
   if (uuidString) {
-    if (Util.isObject(uuidString)) {
-      var namedParameters = uuidString;
-      uuidString = namedParameters["uuidString"];
-    }
-    if (Util.isString(uuidString)) {
+    if (dojo.lang.isString(uuidString)) {
       this._uuidString = uuidString;
     } else {
-      Util.assert(false);
+      if (dojo.lang.isObject(uuidString)) {
+        var namedParameters = uuidString;
+        this._uuidString = namedParameters["uuidString"];
+      } else {
+        Util.assert(false);
+      }
     }
   }
-  this._uuidString = uuidString;
 };
 
 
@@ -100,16 +101,21 @@
  *
  * @scope    public class method
  * @param    uuidString    A 36-character string that conforms to the UUID spec. 
+ * @namedParam    uuidString    A 36-character string that conforms to the UUID spec. 
  * @return   A new instance of Uuid, TimeBasedUuid, or RandomUuid.
  */
-orp.util.Uuid.newUuid = function(uuidString) {
+orp.util.Uuid.newUuid = function(namedParameters) {
   dojo.require("orp.util.RandomUuid");
   dojo.require("orp.util.TimeBasedUuid");
-  if (Util.isObject(uuidString)) {
-    var namedParameters = uuidString;
+  
+  var uuidString;
+  if (dojo.lang.isString(namedParameters)) {
+    uuidString = namedParameters;
+  } else {
+    Util.assert(dojo.lang.isObject(namedParameters));
     uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
+    Util.assert(dojo.lang.isString(uuidString));
   }
-  Util.assert(Util.isString(uuidString));
 
   var uuid = new orp.util.Uuid(uuidString);
   if (uuid.getVersion() == orp.util.Uuid.Version.TIME_BASED) {

Modified: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -30,15 +30,27 @@
 
 function setUp() {
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
-  dojo.require("dojo.text.*");
 }
 
 function testDojoTextTrim() {
+  // alert("Dojo version: " + dojo.version.toString()); 
+    // Dojo version: 0.1.0 (1321)
+  // alert("dojo.hostenv.getBaseScriptUri() = " + dojo.hostenv.getBaseScriptUri());
+    // dojo.hostenv.getBaseScriptUri() = ../../third_party/dojo/dojo-0.1.0
+
+  dojo.require("dojo.text.*");
+
   var string = "     Just Foo    ";
   var trimmedString = dojo.text.trim(string);
   assertTrue("'Just Foo' remains after trimming.", trimmedString == "Just Foo");
 }
 
+function testDojoLang() {
+  dojo.require("dojo.lang.*");
+
+  assertTrue("'Iggy Pop' is a string.", dojo.lang.isString("Iggy Pop"));
+}
+
 function tearDown() {
   // do nothing
 }

Modified: trunk/tests/util/CsvParserTest.js
===================================================================
--- trunk/tests/util/CsvParserTest.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/tests/util/CsvParserTest.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -30,7 +30,17 @@
  
 var CsvData = null;
 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("dojo.lang.*");
+  dojo.require("orp.util.CsvParser");
+
   var CsvRecords = ['Title, Year, Producer',
                     '2001: A Space Odyssey, 1968, Stanley Kubrick',
                     '"This is a ""fake"" movie title", 1957, Sidney Lumet',
@@ -42,38 +52,16 @@
   CsvData = CsvRecords.join('\n');
 }
 
-function testDojoAccess() {
-  // alert("Dojo version: " + dojo.version.toString()); 
-    // Dojo version: 0.1.0 (1321)
-  // alert("dojo.hostenv.getBaseScriptUri() = " + dojo.hostenv.getBaseScriptUri());
-    // dojo.hostenv.getBaseScriptUri() = ../../third_party/dojo/dojo-0.1.0
-  
-  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
-  dojo.require("dojo.text.*");
-  
-  var string = "     Just Foo    ";
-  var trimmedString = dojo.text.trim(string);
-  assertTrue("'Just Foo' remains after trimming.", trimmedString == "Just Foo");
+function tearDown() {
+  CsvData = null;
 }
 
-/*
-function testShapesAccess() {
-  dojo.hostenv.setModulePrefix("shapes", "../../../../source/shapes");
-  
-  dojo.require("shapes.Ship");
-  var ship = new shapes.Ship();
-  var box1 = new shapes.Box(4, 5); // area == 20
-  var box2 = new shapes.Box(5, 6); // area == 30
-  ship.addBox(box1);
-  ship.addBox(box2);
-  assertTrue("The ship has an area of 50.", ship.getArea() == 50);
-}
-*/
 
-function testCsvParser() {
-  dojo.hostenv.setModulePrefix("orp", "../../../../source");
-  dojo.require("orp.util.CsvParser");
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
 
+function testCsvParser() {
   var csvParser = new orp.util.CsvParser();
   var listOfRecords = csvParser.getStringValuesFromCsvData(CsvData);
   var whiteSpaceCharacters = " \t\n\r";
@@ -84,7 +72,7 @@
     assertTrue('Each row has 3 fields', row.length == 3);
     for (var j in row) {
       var field = row[j];
-      assertTrue('Each field is a string', Util.isString(field));
+      assertTrue('Each field is a string', dojo.lang.isString(field));
       var firstChar = field.charAt(0);
       var lastChar = field.charAt(field.length - 1);
       assertTrue('The first character is not white space', whiteSpaceCharacters.indexOf(firstChar) == -1);
@@ -93,11 +81,21 @@
   }
 }
 
-
-function tearDown() {
-  CsvData = null;
+/*
+function testShapesAccess() {
+  dojo.hostenv.setModulePrefix("shapes", "../../../../source/shapes");
+  
+  dojo.require("shapes.Ship");
+  var ship = new shapes.Ship();
+  var box1 = new shapes.Box(4, 5); // area == 20
+  var box2 = new shapes.Box(5, 6); // area == 30
+  ship.addBox(box1);
+  ship.addBox(box2);
+  assertTrue("The ship has an area of 50.", ship.getArea() == 50);
 }
+*/
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/util/UuidTest.js
===================================================================
--- trunk/tests/util/UuidTest.js	2005-09-14 21:01:14 UTC (rev 327)
+++ trunk/tests/util/UuidTest.js	2005-09-14 22:50:16 UTC (rev 328)
@@ -40,9 +40,11 @@
 
 function setUp() {
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.require("orp.util.Uuid");
   dojo.require("orp.util.RandomUuid");
   dojo.require("orp.util.TimeBasedUuid");
+  dojo.require("dojo.lang.*");
 
   Uuid = orp.util.Uuid;
   RandomUuid = orp.util.RandomUuid;
@@ -136,12 +138,14 @@
   var uuid2 = new RandomUuid();
   var uuid3 = new RandomUuid("3B12F1DF-5232-4804-897E-917BF397618A");
   var uuid4 = new RandomUuid({uuidString: "3B12F1DF-5232-4804-897E-917BF397618A"});
+  var uuid5 = new RandomUuid(new String("3B12F1DF-5232-4804-897E-917BF397618A"));
 
   // alert(uuid1 + "\n" + uuid2);
   checkRandomUuidValidity(uuid1);
   checkRandomUuidValidity(uuid2);
   checkRandomUuidValidity(uuid3);
   checkRandomUuidValidity(uuid4);
+  checkRandomUuidValidity(uuid5);
 
   var uuidString1 = uuid1.toString();
   var uuidString2 = uuid2.toString();
@@ -160,6 +164,7 @@
   var uuid8 = new TimeBasedUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
   var uuid9 = new TimeBasedUuid({'uuidString': "3B12F1DF-5232-1804-897E-917BF397618A"});
   var uuid10 = new TimeBasedUuid("3B12F1DF-5232-1804-897E-917BF397618A");
+  var uuid11 = new TimeBasedUuid(new String("3B12F1DF-5232-1804-897E-917BF397618A"));
   
   checkTimeBasedUuidValidity(uuid1);
   checkTimeBasedUuidValidity(uuid2);
@@ -171,6 +176,7 @@
   checkTimeBasedUuidValidity(uuid8);
   checkTimeBasedUuidValidity(uuid9);
   checkTimeBasedUuidValidity(uuid10);
+  checkTimeBasedUuidValidity(uuid11);
 
   uuid1 = uuid1.toString();
   uuid2 = uuid2.toString();
@@ -304,6 +310,8 @@
 // -------------------------------------------------------------------
 
 function checkUuidValidity(uuid) {
+  assertTrue('All UUIDs are instances of Uuid', (uuid instanceof Uuid));
+
   var variant = uuid.getVariant();
   assertTrue('All of our UUIDs are DCE UUIDs', (variant == Uuid.Variant.DCE));  
   
@@ -340,6 +348,8 @@
 function checkRandomUuidValidity(uuid) {
   checkUuidValidity(uuid);
 
+  assertTrue('Random UUIDs are instances of RandomUuid', (uuid instanceof RandomUuid));
+  
   var version = uuid.getVersion();
   assertTrue('Random UUIDs return Uuid.Version.RANDOM', (version == Uuid.Version.RANDOM));  
   
@@ -352,11 +362,13 @@
 function checkTimeBasedUuidValidity(uuid) {
   checkUuidValidity(uuid);
 
+  assertTrue('TimeBased UUIDs are instances of RandomUuid', (uuid instanceof TimeBasedUuid));
+
   var version = uuid.getVersion();
   assertTrue('TimeBased UUIDs return Uuid.Version.TIME_BASED', (version == Uuid.Version.TIME_BASED));  
 
   var node = uuid.getNode();
-  assertTrue("A UUID's node is a string", (Util.isString(node)));
+  assertTrue("A UUID's node is a string", dojo.lang.isString(node));
   assertTrue("A UUID's node string is 12 characters long.", node.length == 12);
 
   var date = uuid.getDate();



From skinner at berlios.de  Fri Sep 16 03:43:30 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 16 Sep 2005 03:43:30 +0200
Subject: [openrecord-svn] r329 - in trunk: source source/model source/util source/view tests tests/dojo tests/model tests/util tests/view
Message-ID: <200509160143.j8G1hUx2021174@sheep.berlios.de>

Author: skinner
Date: 2005-09-16 03:43:17 +0200 (Fri, 16 Sep 2005)
New Revision: 329

Added:
   trunk/tests/LintTest.html
   trunk/tests/LintTest.js
   trunk/tests/model/
   trunk/tests/model/LintTest.html
   trunk/tests/model/LintTest.js
   trunk/tests/util/DateValueTest.html
   trunk/tests/util/DateValueTest.js
   trunk/tests/util/LintTest.html
   trunk/tests/util/LintTest.js
   trunk/tests/view/
   trunk/tests/view/LintTest.html
   trunk/tests/view/LintTest.js
Removed:
   trunk/source/LintTest.html
   trunk/source/LintTest.js
   trunk/source/model/LintTest.html
   trunk/source/model/LintTest.js
   trunk/source/util/DateValueTest.html
   trunk/source/util/DateValueTest.js
   trunk/source/util/LintTest.html
   trunk/source/util/LintTest.js
   trunk/source/view/LintTest.html
   trunk/source/view/LintTest.js
Modified:
   trunk/source/TestSuite.html
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/TestSuite.html
   trunk/source/util/DateValue.js
   trunk/source/util/LintTool.js
   trunk/source/util/TestSuite.html
   trunk/source/view/EntryView.js
   trunk/tests/SimpleTest.js
   trunk/tests/dojo/SimpleDojoTest.js
   trunk/tests/util/TestSuite.html
Log:
Converted the DateValue class to use the Dojo package system.  Converted the lint tests to use the Dojo package system.

Deleted: trunk/source/LintTest.html
===================================================================
--- trunk/source/LintTest.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests using jslint</title>
-
-    <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="util/Util.js"></script>
-    <script type="text/javascript" src="util/LintTool.js"></script>
-    <script type="text/javascript" src="LintTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests using jslint</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/LintTest.js
===================================================================
--- trunk/source/LintTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,75 +0,0 @@
-/*****************************************************************************
- LintTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-
-function setUp() {
-}
-
-function testJsLintOnGoodCodeFragment() {
-  var textToRunLintOn = "function iggy() { var pop = 'no fun'; }";
-  assertTrue("jslint says clean code is clean", !LintTool.getErrorReportForCodeInString(textToRunLintOn));
-}
-
-function testJsLintOnBadCodeFragment() {
-  // badFragmentOne has THIS_SYMBOL_IS_BAD, which JSLint should catch
-  var badFragmentOne = "function iggy() { var pop = 'no fun'; } THIS_SYMBOL_IS_BAD";
-
-  // badFragmentTwo has tab characters in it, which our own isCodeCleanInString()
-  // method should catch
-  var badFragmentTwo = "function iggy()		{ var pop = 'no fun'; } ";
-  
-  // badFragmentThree has a carriage return character in it, which our own 
-  // isCodeCleanInString() method should catch
-  var badFragmentThree = "function iggy() \r { var pop = 'no fun'; } ";
-  
-  assertFalse("jslint says dirty code is dirty", !LintTool.getErrorReportForCodeInString(badFragmentOne));
-  assertFalse("jslint says dirty code is dirty", !LintTool.getErrorReportForCodeInString(badFragmentTwo));
-  assertFalse("jslint says dirty code is dirty", !LintTool.getErrorReportForCodeInString(badFragmentThree));
-}
-
-function testJsLintOnOpenRecordCode() {
-  var listOfSourceCodeFiles = [
-    "OpenRecordLoader.js",
-    "TablePlugin.js",
-    "OutlinePlugin.js",
-    "DetailPlugin.js",
-    "BarChartPlugin.js"];
-  var prefix = "../../../source/";
-  var errorReport = LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
-  var message = "Lint check \n" + errorReport;
-  assertTrue(message, !errorReport);
-}
-
-function tearDown() {
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/TestSuite.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -26,10 +26,11 @@
         testSuite.addTestPage("../../../tests/SimpleTest.html");
         testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
         testSuite.addTestPage("../../../tests/util/TestSuite.html");
-        testSuite.addTestPage("../../../source/LintTest.html");
+        testSuite.addTestPage("../../../tests/model/LintTest.html");
+        testSuite.addTestPage("../../../tests/view/LintTest.html");
+        testSuite.addTestPage("../../../tests/LintTest.html");
         testSuite.addTestPage("../../../source/model/TestSuite.html");
         testSuite.addTestPage("../../../source/util/TestSuite.html");
-        testSuite.addTestPage("../../../source/view/LintTest.html");
         return testSuite;
       }
     </script>

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/model/DeltaVirtualServer.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -236,7 +236,7 @@
       if (generateComments) {
         listOfStrings.push(indent + '// ' + this._getTypedDisplayStringForItem(item) + '\n');
         listOfStrings.push(indent + '//           by (' + this._truncateString(item.getUserstamp().getDisplayString()) + ')');
-        listOfStrings.push(' on (' + DateValue.getStringMonthDayYear(item.getCreationDate()) + ')\n');
+        listOfStrings.push(' on (' + orp.util.DateValue.getStringMonthDayYear(item.getCreationDate()) + ')\n');
       }
       if (!this._jsonFragmentForItemPrefix) {
         this._jsonFragmentForItemPrefix = indent + '{ "' + StubVirtualServer.JSON_MEMBER_ITEM_CLASS + '": ';
@@ -374,7 +374,7 @@
       }
       if (generateComments) {
         commentString += indent + '//           by (' + this._truncateString(entry.getUserstamp().getDisplayString()) + ')';
-        commentString += ' on (' + DateValue.getStringMonthDayYear(entry.getCreationDate()) + ')\n';
+        commentString += ' on (' + orp.util.DateValue.getStringMonthDayYear(entry.getCreationDate()) + ')\n';
         listOfStrings.push(commentString);
         for (var j in listOfStringsForEntry) {
           listOfStrings.push(listOfStringsForEntry[j]);

Deleted: trunk/source/model/LintTest.html
===================================================================
--- trunk/source/model/LintTest.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/model/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests using jslint</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="../util/Util.js"></script>
-    <script type="text/javascript" src="../util/LintTool.js"></script>
-    <script type="text/javascript" src="LintTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests using jslint</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/model/LintTest.js
===================================================================
--- trunk/source/model/LintTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/model/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,66 +0,0 @@
-/*****************************************************************************
- LintTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-// 
-/*global LintTool, assertTrue, setUp, tearDown */
-// -------------------------------------------------------------------
-
-function setUp() {
-}
-
-function testJsLintOnOpenRecordCode() {
-  var listOfSourceCodeFiles = [
-    "Ordinal.js",
-    "Vote.js",
-    "ContentRecord.js",
-    "Record.js",
-    "Item.js",
-    "Entry.js",
-    "Transaction.js",
-    "QueryRunner.js",
-    "World.js",
-    "StubVirtualServer.js",
-    "DeltaVirtualServer.js",
-    "HttpSaver.js"];
-  var prefix = "../../../source/model/";
-  var errorReport = LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
-  var message = "Lint check \n" + errorReport;
-  assertTrue(message, !errorReport);
-}
-
-function tearDown() {
-}
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/model/ModelTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -647,7 +647,7 @@
   var aPerson = world.newItem("John Doe");
   var subjectEntry = anEmail.addEntryForAttribute(subjectAttribute, "Money saved for you at Nigerian Bank");
   var fromEntry = anEmail.addEntryForAttribute(fromAttribute, aPerson);
-  var receivedEntry = anEmail.addEntryForAttribute(dateReceivedAttribute, new DateValue("6/8/05"));
+  var receivedEntry = anEmail.addEntryForAttribute(dateReceivedAttribute, new orp.util.DateValue("6/8/05"));
   var numAttachmentsEntry = anEmail.addEntryForAttribute(noOfAttachments, 4);
 }
 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/model/StubVirtualServer.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -1032,7 +1032,7 @@
               finalData = parseFloat(rawData);
               break;
             case World.UUID_FOR_TYPE_DATE:
-              finalData = new DateValue(rawData);
+              finalData = new orp.util.DateValue(rawData);
               // if (!finalData.isValid()) {
               //   alert(rawData + " " + finalData);
               // }

Modified: trunk/source/model/TestSuite.html
===================================================================
--- trunk/source/model/TestSuite.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/model/TestSuite.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -27,7 +27,6 @@
         testSuite.addTestPage("../../../source/model/RepositoryWritingTest.html");
         testSuite.addTestPage("../../../source/model/TestReorderingForTypicalOrdinals.html");
         testSuite.addTestPage("../../../source/model/TestReorderingForSpecialCases.html");
-        testSuite.addTestPage("../../../source/model/LintTest.html");
         return testSuite;
       }
     </script>

Modified: trunk/source/util/DateValue.js
===================================================================
--- trunk/source/util/DateValue.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/util/DateValue.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -30,28 +30,16 @@
 
 
 // -------------------------------------------------------------------
-// Util public class constants
+// Provides and Requires
 // -------------------------------------------------------------------
-DateValue.MONTH_JAN = 0;
-DateValue.MONTH_FEB = 1;
-DateValue.MONTH_MAR = 2;
-DateValue.MONTH_APR = 3;
-DateValue.MONTH_MAY = 4;
-DateValue.MONTH_JUN = 5;
-DateValue.MONTH_JUL = 6;
-DateValue.MONTH_AUG = 7;
-DateValue.MONTH_SEP = 8;
-DateValue.MONTH_OCT = 9;
-DateValue.MONTH_NOV = 10;
-DateValue.MONTH_DEC = 11;
+dojo.provide("orp.util.DateValue");
+dojo.require("dojo.lang.*");
 
-DateValue.MILLISECS_IN_A_DAY = 86400000;
-DateValue.TIMEZONE_OFFSET = new Date().getTimezoneOffset()*60*1000;
 
-DateValue.ARRAY_OF_MONTH_SHORT_NAMES = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
-DateValue.ARRAY_OF_MONTH_NAMES = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
 
-
 /**
  * The DateValue class is similar to the JavaScript built-in Date class. 
  * DateValue objects can be used to represent "fuzzy" dates, such as "1999"
@@ -60,7 +48,8 @@
  * @scope    public instance constructor
  * @param    year-etc    Any of the same values that the Date class accepts. 
  */
-function DateValue(year, month, day, hours, minutes, seconds, ms) {
+orp.util.DateValue = function(year, month, day, hours, minutes, seconds, ms) {
+  var DateValue = orp.util.DateValue;
   var date;
 
   // Step 1: 
@@ -168,7 +157,7 @@
           var yearAsInt = parseInt(year);
           if ((year.length == 4) && !isNaN(yearAsInt) && (year == yearAsInt)) {
             // This code handles strings like "1944" and "2340"
-            date = new Date(yearAsInt, DateValue.MONTH_JAN);
+            date = new Date(yearAsInt, DateValue.Month.JAN);
             date._hasTime = false;
             date._hasDay = false;
             date._hasMonth = false;
@@ -266,10 +255,35 @@
   };
 
   return date;
-}
+};
 
 
 // -------------------------------------------------------------------
+// Public class constants
+// -------------------------------------------------------------------
+orp.util.DateValue.Month = {
+  JAN: 0,
+  FEB: 1,
+  MAR: 2,
+  APR: 3,
+  MAY: 4,
+  JUN: 5,
+  JUL: 6,
+  AUG: 7,
+  SEP: 8,
+  OCT: 9,
+  NOV: 10,
+  DEC: 11 };
+
+orp.util.DateValue.MILLISECS_IN_A_DAY = 86400000;
+orp.util.DateValue.TIMEZONE_OFFSET = new Date().getTimezoneOffset()*60*1000;
+
+orp.util.DateValue.ARRAY_OF_MONTH_SHORT_NAMES = new Array("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");
+orp.util.DateValue.ARRAY_OF_MONTH_NAMES = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
+
+
+
+// -------------------------------------------------------------------
 // Public class methods
 // -------------------------------------------------------------------
 
@@ -280,8 +294,8 @@
  * @param    date    Either a Date or DateValue object. 
  * @return   A string like "Feb 14, 1944". 
  */
-DateValue.getStringMonthDayYear = function(date) {
-  return DateValue.ARRAY_OF_MONTH_SHORT_NAMES[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
+orp.util.DateValue.getStringMonthDayYear = function(date) {
+  return orp.util.DateValue.ARRAY_OF_MONTH_SHORT_NAMES[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
 };
 
 

Deleted: trunk/source/util/DateValueTest.html
===================================================================
--- trunk/source/util/DateValueTest.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/util/DateValueTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,85 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests for DateValue.js</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="Util.js"></script>
-    <script type="text/javascript" src="DateValue.js"></script>
-    <script type="text/javascript" src="DateValueTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests for DateValue.js</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/util/DateValueTest.js
===================================================================
--- trunk/source/util/DateValueTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/util/DateValueTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,96 +0,0 @@
-/*****************************************************************************
- DateValueTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-var TestVars = null;
-
-function setUp() {
-  // TestVars = {};
-  // TestVars.theHobbit = "The Hobbit";
-}
-
-function testDateValueConstructor() {
-  var year = 1944;
-  var month = DateValue.MONTH_FEB;
-  var day = 14;
-  var hours = 9;
-  var minutes = 30;
-  var seconds = 15;
-  var ms = 444;
-  var dates = new Array();
-  dates[0] = new DateValue("1944");
-  dates[1] = new DateValue("2/14/1944");
-  dates[2] = new DateValue("Feb 14 1944");
-  dates[3] = new DateValue(-816710400000);
-  dates[4] = new DateValue(year, month);
-  dates[5] = new DateValue(year, month, day);
-  dates[6] = new DateValue(year, month, day, hours);
-  dates[7] = new DateValue(year, month, day, hours, minutes);
-  dates[8] = new DateValue(year, month, day, hours, minutes, seconds);
-  dates[9] = new DateValue(year, month, day, hours, minutes, seconds, ms);
-  dates[10] = new DateValue(' today  ');
-  dates[11] = new DateValue(Date.now());
-  dates[12] = new DateValue('tomorrow');
-  dates[13] = new DateValue('April 2006');
-  dates[14] = new DateValue('7/2003');
-  for (var i in dates) {
-    var dateValue = dates[i];
-    assertTrue('DateValue is valid', dateValue.isValid());
-    assertTrue('Util.isDate() returns true', Util.isDate(dateValue));
-  }
-  assertTrue('Time display is right', dates[8].toShortLocaleDateString() == 'Feb 14, 1944 9:30 am');
-  assertTrue('Today is parsed correctly', dates[10].toShortLocaleDateString() =='Today');
-  assertTrue('Today displays correctly', dates[11].toShortLocaleDateString().indexOf('Today') === 0);
-  assertTrue('Tomorrow is parsed correctly', dates[12].toShortLocaleDateString().toLowerCase() == 'tomorrow');
-  assertTrue('today is correct in millisecs', Date.now() - dates[10].getTime() < DateValue.MILLISECS_IN_A_DAY);
-  assertTrue('Month/Year parsing is right', dates[13].getYear() == 106 && dates[13].getMonth() == 3);
-  assertTrue('Numeric month/year parsing correct', dates[14].getYear() == 103 && dates[14].getMonth() == 6);
-
-  var notDates = new Array();
-  notDates[0] = new DateValue("194z");
-  notDates[1] = new DateValue("");
-  notDates[2] = new DateValue("8979789");
-  notDates[3] = new DateValue("April");
-  for (var j in notDates) {
-    var notDateValue = notDates[j];
-    assertTrue('DateValue is not valid', !notDateValue.isValid());
-  }
-  
-  // var alertString = dates.join('\n');
-  // alert(alertString);
-}
-
-
-function tearDown() {
-  // TestVars = null;
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/util/LintTest.html
===================================================================
--- trunk/source/util/LintTest.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/util/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests using jslint</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="../util/Util.js"></script>
-    <script type="text/javascript" src="../util/LintTool.js"></script>
-    <script type="text/javascript" src="LintTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests using jslint</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/util/LintTest.js
===================================================================
--- trunk/source/util/LintTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/util/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,63 +0,0 @@
-/*****************************************************************************
- LintTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-// 
-/*global LintTool, assertTrue, setUp, tearDown */
-// -------------------------------------------------------------------
-
-function setUp() {
-}
-
-function testJsLintOnOpenRecordCode() {
-  var listOfSourceCodeFiles = [
-    "XmlConverter.js",
-    "Util.js",
-    "UtilTest.js",
-    "DateValue.js",
-    "DateValueTest.js",
-    "Uuid.js",
-    "RandomUuid.js",
-    "TimeBasedUuid.js",
-    "LintTool.js"];
-  var prefix = "../../../source/util/";
-  var errorReport = LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
-  var message = "Lint check \n" + errorReport;
-  assertTrue(message, !errorReport);
-}
-
-function tearDown() {
-}
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/util/LintTool.js
===================================================================
--- trunk/source/util/LintTool.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/util/LintTool.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -30,10 +30,21 @@
  
 
 // -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.util.LintTool");
+dojo.require("dojo.lang.*");
+
+// -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
 /*global Util, jslint */
 // -------------------------------------------------------------------
 
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
 /**
  * The LintTool class is just a thin wrapper around Douglas Crockford's
  * JSLint utility.
@@ -47,9 +58,9 @@
  * @scope    public instance constructor
  * @syntax   DO NOT CALL THIS CONSTRUCTOR
  */
-function LintTool() {
+orp.util.LintTool = function() {
   throw new Error("LintTool is a static class. You can't create instances of it.");
-}
+};
 
 
 // -------------------------------------------------------------------
@@ -64,7 +75,7 @@
  * @param    codeString    A string containing JavaScript code. 
  * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
  */
-LintTool.getErrorReportForCodeInString = function(codeString) {
+orp.util.LintTool.getErrorReportForCodeInString = function(codeString) {
   var errorMessage = "";
 
   // Call jslint, and see if it reported errors.
@@ -80,17 +91,17 @@
   }
   
   // Check for tabs, backspaces, etc.
-  errorMessage += LintTool.checkForString(codeString, '\t', "There are tab characters in the file.");
-  errorMessage += LintTool.checkForString(codeString, '\b', "There are backspace characters in the file.");
-  errorMessage += LintTool.checkForString(codeString, '\r', "There are carriage return characters in the file.");
-  errorMessage += LintTool.checkForString(codeString, '\f', "There are form feed characters in the file.");
+  errorMessage += orp.util.LintTool.checkForString(codeString, '\t', "There are tab characters in the file.");
+  errorMessage += orp.util.LintTool.checkForString(codeString, '\b', "There are backspace characters in the file.");
+  errorMessage += orp.util.LintTool.checkForString(codeString, '\r', "There are carriage return characters in the file.");
+  errorMessage += orp.util.LintTool.checkForString(codeString, '\f', "There are form feed characters in the file.");
   
   // Check for discouraged code
   // We have to break 'document' + '.write' into two parts, or else this LintTool.js
   // file won't pass its own lint test.
-  errorMessage += LintTool.checkForString(codeString, 'document' + '.write');
-  errorMessage += LintTool.checkForString(codeString, 'document' + '.all');
-  errorMessage += LintTool.checkForString(codeString, 'document' + '.layers');
+  errorMessage += orp.util.LintTool.checkForString(codeString, 'document' + '.write');
+  errorMessage += orp.util.LintTool.checkForString(codeString, 'document' + '.all');
+  errorMessage += orp.util.LintTool.checkForString(codeString, 'document' + '.layers');
 
   return errorMessage;
 }; 
@@ -107,7 +118,7 @@
  * @param    errorMessage    Optional. The error message to return if the memberString was found in codeString. 
  * @return   Returns an error message string, or returns an empty string if there are no errors.
  */
-LintTool.checkForString = function(codeString, memberString, errorMessage) {
+orp.util.LintTool.checkForString = function(codeString, memberString, errorMessage) {
   var returnString = "";
   var clean = (codeString.indexOf(memberString) == -1);
   if (!clean) {
@@ -128,9 +139,9 @@
  * @param    url    A string with the URL of a file containing JavaScript code. 
  * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
  */
-LintTool.getErrorReportForCodeAtUrl = function(url) {
+orp.util.LintTool.getErrorReportForCodeAtUrl = function(url) {
   var fileContents = Util.getStringContentsOfFileAtURL(url);
-  return LintTool.getErrorReportForCodeInString(fileContents);
+  return orp.util.LintTool.getErrorReportForCodeInString(fileContents);
 };
 
         
@@ -143,10 +154,10 @@
  * @param    path    Optional.  A path prefix string to prepend to the filename strings. 
  * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
  */
-LintTool.getErrorReportFromListOfFilesnames = function(listOfFilenames, path) {
+orp.util.LintTool.getErrorReportFromListOfFilesnames = function(listOfFilenames, path) {
   Util.assert(Util.isArray(listOfFilenames));
   if (path) {
-    Util.assert(Util.isString(path));
+    Util.assert(dojo.lang.isString(path));
   } else {
     path = "";
   }
@@ -156,7 +167,7 @@
   for (var key in listOfFilenames) {
     var filename = listOfFilenames[key];
     var url = path + filename;
-    var errorReportForFile = LintTool.getErrorReportForCodeAtUrl(url);
+    var errorReportForFile = orp.util.LintTool.getErrorReportForCodeAtUrl(url);
     if (errorReportForFile) {
       var message = separatorLine + filename + "\n" + errorReportForFile;
       aggregateErrorReport += message;

Modified: trunk/source/util/TestSuite.html
===================================================================
--- trunk/source/util/TestSuite.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/util/TestSuite.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -24,8 +24,6 @@
       function utilTestSuite() {
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../source/util/UtilTest.html");
-        testSuite.addTestPage("../../../source/util/DateValueTest.html");
-        testSuite.addTestPage("../../../source/util/LintTest.html");
         return testSuite;
       }
     </script>

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/view/EntryView.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -469,7 +469,7 @@
           if (!isNaN(floatVal)) {return floatVal;}
           break;
         case typeCalledDate:
-          var dateValue = new DateValue(value);
+          var dateValue = new orp.util.DateValue(value);
           if (dateValue.isValid()) {return dateValue;}
           break;
         default:

Deleted: trunk/source/view/LintTest.html
===================================================================
--- trunk/source/view/LintTest.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/view/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,86 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests using jslint</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="../util/Util.js"></script>
-    <script type="text/javascript" src="../util/LintTool.js"></script>
-    <script type="text/javascript" src="LintTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests using jslint</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/view/LintTest.js
===================================================================
--- trunk/source/view/LintTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/source/view/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -1,64 +0,0 @@
-/*****************************************************************************
- LintTest.js
- 
-******************************************************************************
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-// -------------------------------------------------------------------
-// Dependencies, expressed in the syntax that JSLint understands:
-// 
-/*global LintTool, assertTrue, setUp, tearDown */
-// -------------------------------------------------------------------
-
-function setUp() {
-}
-
-function testJsLintOnOpenRecordCode() {
-  var listOfSourceCodeFiles = [
-    "View.js",
-    "RootView.js",
-    "ItemView.js",
-    "PageView.js",
-    "LoginView.js",
-    "NavbarView.js",
-    "SectionView.js",
-    "MultiEntriesView.js",
-    "EntryView.js",
-    "SuggestionBox.js"];
-  var prefix = "../../../source/view/";
-  var errorReport = LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
-  var message = "Lint check \n" + errorReport;
-  assertTrue(message, !errorReport);
-}
-
-function tearDown() {
-}
-
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Copied: trunk/tests/LintTest.html (from rev 323, trunk/source/LintTest.html)
===================================================================
--- trunk/source/LintTest.html	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="../source/util/Util.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/LintTest.js (from rev 323, trunk/source/LintTest.js)
===================================================================
--- trunk/source/LintTest.js	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,88 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnGoodCodeFragment() {
+  var textToRunLintOn = "function iggy() { var pop = 'no fun'; }";
+  assertTrue("jslint says clean code is clean", !orp.util.LintTool.getErrorReportForCodeInString(textToRunLintOn));
+}
+
+function testJsLintOnBadCodeFragment() {
+  // badFragmentOne has THIS_SYMBOL_IS_BAD, which JSLint should catch
+  var badFragmentOne = "function iggy() { var pop = 'no fun'; } THIS_SYMBOL_IS_BAD";
+
+  // badFragmentTwo has tab characters in it, which our own isCodeCleanInString()
+  // method should catch
+  var badFragmentTwo = "function iggy()		{ var pop = 'no fun'; } ";
+  
+  // badFragmentThree has a carriage return character in it, which our own 
+  // isCodeCleanInString() method should catch
+  var badFragmentThree = "function iggy() \r { var pop = 'no fun'; } ";
+  
+  assertFalse("jslint says dirty code is dirty", !orp.util.LintTool.getErrorReportForCodeInString(badFragmentOne));
+  assertFalse("jslint says dirty code is dirty", !orp.util.LintTool.getErrorReportForCodeInString(badFragmentTwo));
+  assertFalse("jslint says dirty code is dirty", !orp.util.LintTool.getErrorReportForCodeInString(badFragmentThree));
+}
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "OpenRecordLoader.js",
+    "TablePlugin.js",
+    "OutlinePlugin.js",
+    "DetailPlugin.js",
+    "BarChartPlugin.js"];
+  var prefix = "../../../source/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/SimpleTest.js
===================================================================
--- trunk/tests/SimpleTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/tests/SimpleTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -28,18 +28,27 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
   // do nothing
 }
 
-function testSimplestCase() {
-  assertTrue("Two and two is four", (2 + 2) == 4);
-}
-
 function tearDown() {
   // do nothing
 }
 
+
 // -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testSimplestCase() {
+  assertTrue("Two and two is four", (2 + 2) == 4);
+}
+
+// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/dojo/SimpleDojoTest.js
===================================================================
--- trunk/tests/dojo/SimpleDojoTest.js	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/tests/dojo/SimpleDojoTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -28,10 +28,23 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
 function setUp() {
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
 }
 
+function tearDown() {
+  // do nothing
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
 function testDojoTextTrim() {
   // alert("Dojo version: " + dojo.version.toString()); 
     // Dojo version: 0.1.0 (1321)
@@ -51,10 +64,6 @@
   assertTrue("'Iggy Pop' is a string.", dojo.lang.isString("Iggy Pop"));
 }
 
-function tearDown() {
-  // do nothing
-}
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Copied: trunk/tests/model/LintTest.html (from rev 323, trunk/source/model/LintTest.html)
===================================================================
--- trunk/source/model/LintTest.html	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/model/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/model/LintTest.js (from rev 323, trunk/source/model/LintTest.js)
===================================================================
--- trunk/source/model/LintTest.js	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/model/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,79 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "Ordinal.js",
+    "Vote.js",
+    "ContentRecord.js",
+    "Record.js",
+    "Item.js",
+    "Entry.js",
+    "Transaction.js",
+    "QueryRunner.js",
+    "World.js",
+    "StubVirtualServer.js",
+    "DeltaVirtualServer.js",
+    "HttpSaver.js"];
+  var prefix = "../../../source/model/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/tests/util/DateValueTest.html (from rev 323, trunk/source/util/DateValueTest.html)
===================================================================
--- trunk/source/util/DateValueTest.html	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/util/DateValueTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for DateValue.js</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="DateValueTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for DateValue.js</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/util/DateValueTest.js (from rev 323, trunk/source/util/DateValueTest.js)
===================================================================
--- trunk/source/util/DateValueTest.js	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/util/DateValueTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,110 @@
+/*****************************************************************************
+ DateValueTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var TestVars = null;
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.DateValue");
+  // TestVars = {};
+}
+
+function tearDown() {
+  // TestVars = null;
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDateValueConstructor() {
+  var DateValue = orp.util.DateValue;
+  
+  var year = 1944;
+  var month = DateValue.Month.FEB;
+  var day = 14;
+  var hours = 9;
+  var minutes = 30;
+  var seconds = 15;
+  var ms = 444;
+  var dates = new Array();
+  dates[0] = new DateValue("1944");
+  dates[1] = new DateValue("2/14/1944");
+  dates[2] = new DateValue("Feb 14 1944");
+  dates[3] = new DateValue(-816710400000);
+  dates[4] = new DateValue(year, month);
+  dates[5] = new DateValue(year, month, day);
+  dates[6] = new DateValue(year, month, day, hours);
+  dates[7] = new DateValue(year, month, day, hours, minutes);
+  dates[8] = new DateValue(year, month, day, hours, minutes, seconds);
+  dates[9] = new DateValue(year, month, day, hours, minutes, seconds, ms);
+  dates[10] = new DateValue(' today  ');
+  dates[11] = new DateValue(Date.now());
+  dates[12] = new DateValue('tomorrow');
+  dates[13] = new DateValue('April 2006');
+  dates[14] = new DateValue('7/2003');
+  for (var i in dates) {
+    var dateValue = dates[i];
+    assertTrue('DateValue is valid', dateValue.isValid());
+    assertTrue('Util.isDate() returns true', Util.isDate(dateValue));
+  }
+  assertTrue('Time display is right', dates[8].toShortLocaleDateString() == 'Feb 14, 1944 9:30 am');
+  assertTrue('Today is parsed correctly', dates[10].toShortLocaleDateString() =='Today');
+  assertTrue('Today displays correctly', dates[11].toShortLocaleDateString().indexOf('Today') === 0);
+  assertTrue('Tomorrow is parsed correctly', dates[12].toShortLocaleDateString().toLowerCase() == 'tomorrow');
+  assertTrue('today is correct in millisecs', Date.now() - dates[10].getTime() < DateValue.MILLISECS_IN_A_DAY);
+  assertTrue('Month/Year parsing is right', dates[13].getYear() == 106 && dates[13].getMonth() == 3);
+  assertTrue('Numeric month/year parsing correct', dates[14].getYear() == 103 && dates[14].getMonth() == 6);
+
+  var notDates = new Array();
+  notDates[0] = new DateValue("194z");
+  notDates[1] = new DateValue("");
+  notDates[2] = new DateValue("8979789");
+  notDates[3] = new DateValue("April");
+  for (var j in notDates) {
+    var notDateValue = notDates[j];
+    assertTrue('DateValue is not valid', !notDateValue.isValid());
+  }
+  
+  // var alertString = dates.join('\n');
+  // alert(alertString);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/tests/util/LintTest.html (from rev 323, trunk/source/util/LintTest.html)
===================================================================
--- trunk/source/util/LintTest.html	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/util/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/util/LintTest.js (from rev 323, trunk/source/util/LintTest.js)
===================================================================
--- trunk/source/util/LintTest.js	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/util/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,75 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "XmlConverter.js",
+    "Util.js",
+    "DateValue.js",
+    "Uuid.js",
+    "RandomUuid.js",
+    "TimeBasedUuid.js",
+    "LintTool.js"];
+  var prefix = "../../../source/util/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/util/TestSuite.html
===================================================================
--- trunk/tests/util/TestSuite.html	2005-09-14 22:50:16 UTC (rev 328)
+++ trunk/tests/util/TestSuite.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -24,6 +24,8 @@
       function utilTestSuite() {
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../tests/util/CsvParserTest.html");
+        testSuite.addTestPage("../../../tests/util/DateValueTest.html");
+        testSuite.addTestPage("../../../tests/util/LintTest.html");
         testSuite.addTestPage("../../../tests/util/UuidTest.html");
         return testSuite;
       }

Copied: trunk/tests/view/LintTest.html (from rev 323, trunk/source/view/LintTest.html)
===================================================================
--- trunk/source/view/LintTest.html	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/view/LintTest.html	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,78 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests using jslint</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="LintTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests using jslint</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/view/LintTest.js (from rev 323, trunk/source/view/LintTest.js)
===================================================================
--- trunk/source/view/LintTest.js	2005-09-13 21:05:19 UTC (rev 323)
+++ trunk/tests/view/LintTest.js	2005-09-16 01:43:17 UTC (rev 329)
@@ -0,0 +1,78 @@
+/*****************************************************************************
+ LintTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+// -------------------------------------------------------------------
+// Dependencies, expressed in the syntax that JSLint understands:
+// 
+/*global LintTool, assertTrue, setUp, tearDown */
+// -------------------------------------------------------------------
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.LintTool");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testJsLintOnOpenRecordCode() {
+  var listOfSourceCodeFiles = [
+    "View.js",
+    "RootView.js",
+    "ItemView.js",
+    "PageView.js",
+    "LoginView.js",
+    "NavbarView.js",
+    "SectionView.js",
+    "MultiEntriesView.js",
+    "EntryView.js",
+    "SuggestionBox.js"];
+  var prefix = "../../../source/view/";
+  var errorReport = orp.util.LintTool.getErrorReportFromListOfFilesnames(listOfSourceCodeFiles, prefix);
+  var message = "Lint check \n" + errorReport;
+  assertTrue(message, !errorReport);
+}
+
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at berlios.de  Tue Sep 20 03:56:34 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 20 Sep 2005 03:56:34 +0200
Subject: [openrecord-svn] r330 - in trunk/source: . model util view
Message-ID: <200509200156.j8K1uYIV006132@sheep.berlios.de>

Author: skinner
Date: 2005-09-20 03:56:25 +0200 (Tue, 20 Sep 2005)
New Revision: 330

Modified:
   trunk/source/CodingConventions.js
   trunk/source/TablePlugin.js
   trunk/source/model/Item.js
   trunk/source/model/ModelTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Util.js
   trunk/source/util/UtilTest.js
   trunk/source/util/Uuid.js
   trunk/source/util/XmlConverter.js
   trunk/source/util/XmlConverterTest.js
   trunk/source/view/EntryView.js
   trunk/source/view/PageView.js
   trunk/source/view/RootView.js
   trunk/source/view/SectionView.js
Log:
Changed item.addEntry methods to use namedParameter arguments.


Modified: trunk/source/CodingConventions.js
===================================================================
--- trunk/source/CodingConventions.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/CodingConventions.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -1,74 +1,100 @@
-// -------------------------------------------------------------------
 // OpenRecord 2005 JavaScript Coding Conventions
-//
-// + jslint approved
-//    + jslint should return "ok" when it looks at the code (with strictest settings)
-//    + do not use "with"
-//    + do not use "new Function"
-//    + use ++i and --i instead of i++ and i-- (prefix instead of postfix)
-// 
-// + naming conventions
-//    + capitalization
-//       + classes are initial caps (CamelCaps): "Rectangle", "FillPattern"
-//       + all variable names and methods names are mixedCaps: "fillPattern"
-//       + acronyms appear in initial caps: "htmlString", not "HTMLString"
-//         (see http://www.dojotoolkit.org/pipermail/dojo-interest/2005-July/000534.html
-//         (see http://www.dojotoolkit.org/pipermail/dojo-interest/2005-July/000535.html)
-//       + constants are all caps, with underscores: FILL_PATTERN_SOLID
-//    + file names
-//       + each file has just one public class
-//       + file names exactly match the name of the class they contain: "Rectangle.js", "FillPattern.js"
-//       + directories are all lower case, with underscores: "basic_shapes"
-//    + unit tests
-//       + a JavaScript code file typically has two associated unit test files
-//       + the unit test files have the suffix "Test"
-//       + example: Book.js has unit test files BookTest.html and BookTest.js
-//    + variable scoping prefixes
-//       + class variables are prefixed with "our"
-//       + [DEPRECATED: instance variables are prefixed with "my"]
-//       + global variables are prefixed with "window.global"
-//       + locally scoped variables are not prefixed
-//       + non-public variables and methods are prefixed with "_" (use "_" for private, protected, or package)
-//       + [DEPRECATED: function input parameters are prefixed with "in"]
-//       + [DEPRECATED: private variables and methods are prefixed with "__"]
-//       + [DEPRECATED: protected variables and methods are prefixed with "_"]
-//    + class constants are prefixed with the type of the constant -- see LAYOUT_PORTRAIT
-//    + array variables are prefixed with "listOf" or "hashTableOf" or "arrayOf"
-//       + var listOfBooks = []; <-- a "List" has only values, no keys ["Apple", "Orange", "Banana"]
-//       + var hashTableOfBooksKeyedByTitle = {}; <-- a "HashTable" is an associative array with key-value pairs
-//       + var arrayOfBooks = new Array(); <-- an "Array" has values that are indexed by number arrayOfFruit[23] = "Apple"
-//    + accessor methods are prefixed with "get" or "is" -- e.g. oval.getArea(), oval.isCircle()
-//       + any method that returns a value and does not change an object's state should be a "get" or "is" method
-//       + any method that does change an object's state should be a "set" method
-//    + problems are marked with "PENDING"
-//
-// + compatiblity with other browsers and other JavaScript libraries 
-//    + use "get" and "set" accessors -- do *not* assign Mozilla "getter" and "setter" methods
-//    + [DEPRECATED: add methods in your own namespace -- do *not* extend built-in objects: String.prototype.toEsperanto = function ...]
-//    + do *not* extend Object.prototype
-//      (see http://erik.eae.net/archives/2005/06/06/22.13.54/)
-//      (see http://sourceforge.net/forum/forum.php?thread_id=1315559&forum_id=379297)
-//
-// + indenting, tabs, and line ending characters
-//    + 2-space indenting
-//    + only spaces, no tabs
-//    + Unix style line endings: just \n -- not \r or \r\n
-//
-// + file header and footer conventions
-//    + file name is given
-//    + copyright and license statements are included
-//    + file dependencies are listed
-//    + sections for: class constants, class properties, constructor, instance methods
-//    + "End of file" ending
-//
-// + scoping
-//    + locally scoped variables are declared before being used: "var foo", not "foo"
-//    + global variables are not used, except for class names
-//    + instance methods are defined on the prototype -- see getArea()
-//    + accessor methods never have side-effects
-//
-// + PENDING
-//    + private instance properties?
-//    + private instance methods?
-//    + class methods?
-// -------------------------------------------------------------------
+/*
+-----------------------------------------------------------------------------
+Dojo Conventions
+
+  The OpenRecord coding conventions are almost identical to the Dojo 
+  JavaScript conventions, listed here:
+     http://www.dojotoolkit.org/js_style_guide.html
+
+Differences
+
+  Here's a list of the OpenRecord conventions that differ from the Dojo conventions:
+  
+  + constants
+     + Dojo uses either UpperLower or UPPER_UPPER capitalization
+     + OpenRecord always uses UPPER_UPPER capitalization
+     + for an example, in DateValue.js see orp.util.DateValue.Month
+  
+  + private class variables (instance variables)
+     + Dojo says private class variables (instance variables) MAY have a leading underscore
+     + OpenRecord 
+
+
+   
+   
+
+-----------------------------------------------------------------------------
+OpenRecord Conventions
+
++ jslint approved
+   + jslint should return "ok" when it looks at the code (with strictest settings)
+   + do not use "with"
+   + do not use "new Function"
+   + use ++i and --i instead of i++ and i-- (prefix instead of postfix)
+
++ naming conventions
+   + capitalization
+      + classes are initial caps (CamelCaps): "Rectangle", "FillPattern"
+      + all variable names and methods names are mixedCaps: "fillPattern"
+      + acronyms appear in initial caps: "htmlString", not "HTMLString"
+        (see http://www.dojotoolkit.org/pipermail/dojo-interest/2005-July/000534.html
+        (see http://www.dojotoolkit.org/pipermail/dojo-interest/2005-July/000535.html)
+      + constants are all caps, with underscores: FILL_PATTERN_SOLID
+   + file names
+      + each file has just one public class
+      + file names exactly match the name of the class they contain: "Rectangle.js", "FillPattern.js"
+      + directories are all lower case, with underscores: "basic_shapes"
+   + unit tests
+      + a JavaScript code file typically has two associated unit test files
+      + the unit test files have the suffix "Test"
+      + example: Book.js has unit test files BookTest.html and BookTest.js
+   + variable scoping prefixes
+      + class variables are prefixed with "our"
+      + [DEPRECATED: instance variables are prefixed with "my"]
+      + global variables are prefixed with "window.global"
+      + locally scoped variables are not prefixed
+      + non-public variables and methods are prefixed with "_" (use "_" for private, protected, or package)
+      + [DEPRECATED: function input parameters are prefixed with "in"]
+      + [DEPRECATED: private variables and methods are prefixed with "__"]
+      + [DEPRECATED: protected variables and methods are prefixed with "_"]
+   + class constants are prefixed with the type of the constant -- see LAYOUT_PORTRAIT
+   + array variables are prefixed with "listOf" or "hashTableOf" or "arrayOf"
+      + var listOfBooks = []; <-- a "List" has only values, no keys ["Apple", "Orange", "Banana"]
+      + var hashTableOfBooksKeyedByTitle = {}; <-- a "HashTable" is an associative array with key-value pairs
+      + var arrayOfBooks = new Array(); <-- an "Array" has values that are indexed by number arrayOfFruit[23] = "Apple"
+   + accessor methods are prefixed with "get" or "is" -- e.g. oval.getArea(), oval.isCircle()
+      + any method that returns a value and does not change an object's state should be a "get" or "is" method
+      + any method that does change an object's state should be a "set" method
+   + problems are marked with "PENDING"
+
++ compatiblity with other browsers and other JavaScript libraries 
+   + use "get" and "set" accessors -- do *not* assign Mozilla "getter" and "setter" methods
+   + [DEPRECATED: add methods in your own namespace -- do *not* extend built-in objects: String.prototype.toEsperanto = function ...]
+   + do *not* extend Object.prototype
+     (see http://erik.eae.net/archives/2005/06/06/22.13.54/)
+     (see http://sourceforge.net/forum/forum.php?thread_id=1315559&forum_id=379297)
+
++ indenting, tabs, and line ending characters
+   + 2-space indenting
+   + only spaces, no tabs
+   + Unix style line endings: just \n -- not \r or \r\n
+
++ file header and footer conventions
+   + file name is given
+   + copyright and license statements are included
+   + file dependencies are listed
+   + sections for: class constants, class properties, constructor, instance methods
+   + "End of file" ending
+
++ scoping
+   + locally scoped variables are declared before being used: "var foo", not "foo"
+   + global variables are not used, except for class names
+   + instance methods are defined on the prototype -- see getArea()
+   + accessor methods never have side-effects
+
++ PENDING
+   + private instance properties?
+   + private instance methods?
+   + class methods?
+*/

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/TablePlugin.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -388,7 +388,8 @@
     // alertString = "";
     for (var i in this._displayAttributes) {
       var attribute = this._displayAttributes[i];
-      this._layout.addEntryForAttribute(attributeTableColumns, attribute);
+      // this._layout.addEntryForAttribute(attributeTableColumns, attribute);
+      this._layout.addEntry({attribute:attributeTableColumns, value:attribute});
       // alertString += attribute.getDisplayString() + '\n';
     }
     // alert(alertString);
@@ -651,7 +652,8 @@
           var inverseAttribute = inverseAttributeEntry.getValue(attribute);
           newItem.addConnectionEntry(attribute, value, inverseAttribute);
         } else {
-          newItem.addEntryForAttribute(attribute, value);
+          // newItem.addEntryForAttribute(attribute, value);
+          newItem.addEntry({attribute:attribute, value:value});
         }
       }
     }
@@ -705,11 +707,13 @@
     if (noStoredColumns) {
       for (i in this._displayAttributes) {
         var anAttribute = this._displayAttributes[i];
-        this._layout.addEntryForAttribute(attributeTableColumns,anAttribute,typeCalledItem);
+        // this._layout.addEntryForAttribute(attributeTableColumns,anAttribute,typeCalledItem);
+        this._layout.addEntry({attribute:attributeTableColumns, value:anAttribute, type:typeCalledItem});
       }
     } else {
       if (!removeAttribute) {
-        this._layout.addEntryForAttribute(attributeTableColumns,changedAttribute,typeCalledItem);
+        // this._layout.addEntryForAttribute(attributeTableColumns,changedAttribute,typeCalledItem);
+        this._layout.addEntry({attribute:attributeTableColumns, value:changedAttribute, type:typeCalledItem});
       }
     }
     this._buildTable(true);

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/model/Item.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -37,7 +37,17 @@
 /*global World, Entry */
 // -------------------------------------------------------------------
 
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+// dojo.provide("orp.util.Item");
+// dojo.require("dojo.lang.*");
 
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
 /**
  * Instances of the Item class know how to store and retrieve their
  * attribute entries.
@@ -63,6 +73,19 @@
 }
 
 
+// -------------------------------------------------------------------
+// Public class constants
+// -------------------------------------------------------------------
+Item.NamedParameters = {
+  attribute:      "attribute",
+  value:          "value",
+  type:           "type",
+  previousEntry:  "previousEntry",
+  myAttribute:    "myAttribute",
+  otherItem:      "otherItem",
+  otherAttribute: "otherAttribute"};
+
+
 /**
  * Initializes a new item that has just been created by a user action.
  *
@@ -93,50 +116,10 @@
 
 /* PENDING: refactor these methods as per Sept 12 plan:
 // OLD
-item.addEntry(value)
-item.addEntry(value, type)
-item.addEntryForAttribute(attribute, value)
-item.addEntryForAttribute(attribute, value, type)
-
-item.replaceEntry(previousEntry, value)
-item.replaceEntry(previousEntry, value, type)
-item.replaceEntryWithEntryForAttribute(previousEntry, attribute, value)
-item.replaceEntryWithEntryForAttribute(previousEntry, attribute, value, type)
-
 item.addConnectionEntry(myAttribute, otherItem, otherAttribute)
 Item.replaceEntryWithConnection(previousEntry, myAttribute, otherItem, otherAttribute)
 
 // NEW
- **
- * Creates a new entry object ...
- *
- * @scope    public instance method
- * @namedParam    value    ... 
- * @namedParam    type    ... 
- * @namedParam    attribute    Optional. ...
- * @return   The new entry object.
- * @throws   Throws an Error if no user is logged in.
- *
-Item.prototype.addEntry = function(namedParameters) {
-// function initializer
-// input/parameter/argument hash table
-// input/parameter/argument hash
-// anonymous object
-// input/parameter/argument dictionary
-// input/parameter/argument initializer
-// named parameters
-// keyword parameters
-};
-
-item.addEntry({value:
-               type:
-               attribute: })
-
-item.replaceEntry({value:
-               type:
-               attribute:
-               previousEntry: })
-
 item.addConnectionEntry({myAttribute:
                         otherItem:
                         otherAttribute: })
@@ -151,24 +134,113 @@
  * Creates a new entry object and adds the new entry to the item's 
  * list of entries.
  *
+ * For example, to make Kermit green, you could use any of these:
+ * <pre>
+ *    kermit.addEntry({value: "green"});
+ *    kermit.addEntry({attribute: color, value: "green"});
+ *    kermit.addEntry({attribute: color, value: "green", type: string});
+ * </pre>
+ *
+ * Attributes can always have more than one assigned entry, so
+ * you can make Kermit be both blue and green by doing:
+ * <pre>
+ *    kermit.addEntry({attribute: color, value: "green"});
+ *    kermit.addEntry({attribute: color, value: "blue"});
+ * </pre>
+ * 
  * @scope    public instance method
+ * @namedParam    value    The value to initialize the entry to. 
+ * @namedParam    type    Optional. An item representing a data type.
+ * @namedParam    attribute    Optional.  The attribute to assign the entry to. 
+ * @return   An entry object.
+ * @throws   Throws an Error if no user is logged in.
+ */
+Item.prototype.addEntry = function(namedParameters) {
+  Util.assert(dojo.lang.isObject(namedParameters));
+  var arg = Item.NamedParameters;
+  var value = namedParameters[arg.value];
+  var attribute = namedParameters[arg.attribute];
+  var type = namedParameters[arg.type];
+  
+  // Check for typos in parameter names
+  Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type]));
+  
+  if (!attribute) {
+    attribute = this.getWorld().getAttributeCalledUnfiled();
+  }
+  return this._createNewEntry(null, attribute, value, type);
+};
+ 
+
+/**
+ * Replaces an existing entry with a new entry.
+ *
+ * Examples:
+ * <pre>
+ *    var entry = item.addEntry({value: "green"});
+ *    entry = item.replaceEntry({previousEntry: entry, value: "green"});
+ *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "green"});
+ *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "green", type: string});
+ * </pre>
+ * 
+ * @scope    public instance method
+ * @namedParam    previousEntry    The old entry to be replaced.
+ * @namedParam    value    The value to initialize the entry to. 
+ * @namedParam    type    Optional. An item representing a data type.
+ * @namedParam    attribute    Optional.  The attribute to assign the entry to. 
+ * @return   An entry object.
+ * @throws   Throws an Error if no user is logged in.
+ */
+Item.prototype.replaceEntry = function(namedParameters) {
+  Util.assert(dojo.lang.isObject(namedParameters));
+  var arg = Item.NamedParameters;
+  var value = namedParameters[arg.value];
+  var attribute = namedParameters[arg.attribute];
+  var type = namedParameters[arg.type];
+  var previousEntry = namedParameters[arg.previousEntry];
+
+  // Check for typos in parameter names
+  Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type, arg.previousEntry]));
+  
+  Util.assert(dojo.lang.isObject(previousEntry));
+  if (!attribute) {
+    attribute = previousEntry.getAttributeForItem(this);
+  }
+  return this._createNewEntry(previousEntry, attribute, value, type);
+};
+
+
+// -------------------------------------------------------------------
+// DEPRECATED methods
+// -------------------------------------------------------------------
+
+/**
+ * DEPRECATED: use addEntry instead.
+ * 
+ * Creates a new entry object and adds the new entry to the item's 
+ * list of entries.
+ *
+ * @scope    public instance method
  * @param    value    The value to initialize the entry to.
  * @param    type    Optional. An item representing a data type.
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
+ /*
 Item.prototype.addEntry = function(value, type) {
   var attributeCalledUnfiled = this.getWorld().getAttributeCalledUnfiled();
   return this._createNewEntry(null, attributeCalledUnfiled, value, type);
 };
+*/
 
-
 /**
+ * DEPRECATED: use addEntry instead.
+ * 
  * Assigns an entry to an attribute in this item.
  *
  * Given an attribute and value, creates an entry object with the 
  * value, and sets the item's attribute to the new entry.
- * For example, to make a Kermit green:
+ * For example, to make Kermit green:
  * <pre>
  *    kermit.addEntryForAttribute(color, "green");
  * </pre>
@@ -186,12 +258,16 @@
  * @return   An entry object.
  * @throws   Throws an Error if no user is logged in.
  */
+ /*
 Item.prototype.addEntryForAttribute = function(attribute, value, type) {
   return this._createNewEntry(null, attribute, value, type);
 };
+*/
 
 
 /**
+ * DEPRECATED: use replaceEntry instead.
+ *
  * Replaces an existing entry with a new entry.
  *
  * @scope    public instance method
@@ -201,13 +277,17 @@
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
+ /*
 Item.prototype.replaceEntry = function(previousEntry, value, type) {
   var attribute = previousEntry.getAttributeForItem(this);
   return this._createNewEntry(previousEntry, attribute, value, type);
 };
+*/
 
 
 /**
+ * DEPRECATED: use replaceEntry instead.
+ *
  * Replaces an existing entry with a new entry, and assigns the new entry
  * to an attribute.
  *
@@ -219,9 +299,11 @@
  * @return   The new replacement entry object.
  * @throws   Throws an Error if no user is logged in.
  */
+ /*
 Item.prototype.replaceEntryWithEntryForAttribute = function(previousEntry, attribute, value, type) {
   return this._createNewEntry(previousEntry, attribute, value, type);
 };
+*/
 
 
 /**

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/model/ModelTest.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -243,9 +243,9 @@
   var starWars = world.newItem("Star Wars");
   assertTrue('getDisplayName() works for "Star Wars"', (starWars.getDisplayName() == "Star Wars"));
 
-  var luck = starWars.addEntryForAttribute(characterAttribute, "Luck Skywalker");
-  var c3po = starWars.addEntryForAttribute(characterAttribute, "C3PO");
-  var r2d2 = starWars.addEntry("R2D2");
+  var luck = starWars.addEntry({attribute:characterAttribute, value:"Luck Skywalker"});
+  var c3po = starWars.addEntry({attribute:characterAttribute, value:"C3PO"});
+  var r2d2 = starWars.addEntry({value:"R2D2"});
   assertTrue('"Star Wars" has not been deleted', !starWars.hasBeenDeleted());
   assertTrue('"R2D2" has not been deleted', !r2d2.hasBeenDeleted());
   assertTrue('"R2D2" has not been replaced', !r2d2.hasBeenReplaced());
@@ -279,7 +279,7 @@
   worldRetrievalFilter = world.getRetrievalFilter();
   assertTrue('Default retrieval filter is "last edit wins"', worldRetrievalFilter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS);
   
-  var luke = starWars.replaceEntry(luck, "Luke Skywalker");
+  var luke = starWars.replaceEntry({previousEntry:luck, value:"Luke Skywalker"});
   var previousEntry = luke.getPreviousEntry();
   assertTrue('"Luke" has the previous version "Luck"', previousEntry !== null);
   assertTrue('"Luck" has been replaced', luck.hasBeenReplaced());
@@ -301,10 +301,11 @@
   var userChris = world.newUser("Chris Kringle", passwordForChris);
   world.login(userChris, passwordForChris);
 
-  r2d2 = starWars.replaceEntryWithEntryForAttribute(r2d2, characterAttribute, "R2D2");
+  // r2d2 = starWars.replaceEntryWithEntryForAttribute(r2d2, characterAttribute, "R2D2");
+  r2d2 = starWars.replaceEntry({previousEntry:r2d2, attribute:characterAttribute, value:"R2D2"});
   assertTrue('"R2D2" is now character', r2d2.getAttribute() == characterAttribute);
 
-  var failure = starWars.replaceEntry(r2d2, "R2D2");
+  var failure = starWars.replaceEntry({previousEntry:r2d2, value:"R2D2"});
   assertTrue("Can't replace a value with an identical value", failure === null);
 
   listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
@@ -316,7 +317,7 @@
   
   var attributeCalledName = world.getAttributeCalledName();
   var theHobbit = world.newItem("The Hobbit");
-  theHobbit.addEntryForAttribute(attributeCalledName, "There and Back Again");
+  theHobbit.addEntry({attribute:attributeCalledName, value:"There and Back Again"});
   listOfEntries = theHobbit.getEntriesForAttribute(attributeCalledName);
   assertTrue('"The Hobbit" has two names', listOfEntries.length == 2);
   assertTrue('getDisplayName() returns the first name', (starWars.getDisplayName() == "Star Wars"));
@@ -465,7 +466,7 @@
   changesObservedByFunction = null;
   world.beginTransaction();
   tokyo.voteToRetain();
-  tokyo.addEntry("Japan");
+  tokyo.addEntry({value:"Japan"});
   assertTrue('tokyoObserverObject does not yet see changes', (changesObservedByObject === null));
   assertTrue('tokyoObserverFunction does not yet see changes', (changesObservedByFunction === null));
   world.endTransaction();
@@ -518,19 +519,19 @@
   };
   var alsoFoodItems = world.getItemsInCategory(categoryCalledFood, foodObserverFunction);
   
-  apple.addEntry("Red");
+  apple.addEntry({value:"Red"});
   assertTrue('foodObserverObject sees a change to apple', (changesObservedByObject !== null));
   assertTrue('foodObserverFunction sees a change to apple', (changesObservedByFunction !== null));
 
   changesObservedByObject = null;
   changesObservedByFunction = null;
-  tokyo.addEntry("Japan");
+  tokyo.addEntry({value:"Japan"});
   assertTrue('foodObserverObject does not see a change to tokyo', (changesObservedByObject === null));
   assertTrue('foodObserverFunction does not see a change to tokyo', (changesObservedByFunction === null));
 
   world.removeListObserver(foodItems, foodObserverObject);
   world.removeListObserver(alsoFoodItems, foodObserverFunction);
-  brownie.addEntry("Brown");
+  brownie.addEntry({value:"Brown"});
   assertTrue('foodObserverObject no longer sees changes to food items', (changesObservedByObject === null));
   assertTrue('foodObserverFunction no longer sees changes to food items', (changesObservedByFunction === null));
   
@@ -577,10 +578,10 @@
 
   // test for queries using non-category attribute e.g. continent
   var attributeCalledContinent = world.newItem("Continent");
-  tokyo.addEntryForAttribute(attributeCalledContinent, "Asia");
+  tokyo.addEntry({attribute:attributeCalledContinent, value:"Asia"});
   var beijing = world.newItem("Beijing");
-  beijing.addEntryForAttribute(attributeCalledContinent, "Asia");
-  var seattleEntry = seattle.addEntryForAttribute(attributeCalledContinent, "North America");
+  beijing.addEntry({attribute:attributeCalledContinent, value:"Asia"});
+  var seattleEntry = seattle.addEntry({attribute:attributeCalledContinent, value:"North America"});
   var queryRunnerForAsia = world.newQueryRunner({attribute: attributeCalledContinent, values:["Asia"]});
   var listOfCountries = queryRunnerForAsia.getResultItems();
   
@@ -594,7 +595,7 @@
   assertTrue('North America query returned only Seattle',
   listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
     
-  seattle.addEntryForAttribute(attributeCalledContinent, "Asia");
+  seattle.addEntry({attribute:attributeCalledContinent, value:"Asia"});
   listOfCountries = queryRunnerForAsia.getResultItems();
   assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
   hasAll = Util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
@@ -645,10 +646,10 @@
   var noOfAttachments = world.newAttribute("Number of attachments");
   var subjectAttribute = world.newAttribute("Subject");
   var aPerson = world.newItem("John Doe");
-  var subjectEntry = anEmail.addEntryForAttribute(subjectAttribute, "Money saved for you at Nigerian Bank");
-  var fromEntry = anEmail.addEntryForAttribute(fromAttribute, aPerson);
-  var receivedEntry = anEmail.addEntryForAttribute(dateReceivedAttribute, new orp.util.DateValue("6/8/05"));
-  var numAttachmentsEntry = anEmail.addEntryForAttribute(noOfAttachments, 4);
+  var subjectEntry = anEmail.addEntry({attribute:subjectAttribute, value:"Money saved for you at Nigerian Bank"});
+  var fromEntry = anEmail.addEntry({attribute:fromAttribute, value:aPerson});
+  var receivedEntry = anEmail.addEntry({attribute:dateReceivedAttribute, value:(new orp.util.DateValue("6/8/05"))});
+  var numAttachmentsEntry = anEmail.addEntry({attribute:noOfAttachments, value:4});
 }
 
 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/model/StubVirtualServer.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -306,7 +306,8 @@
   var item = this._createNewItem(observer, false);
   if (name) { 
     var attributeCalledName = this._world.getAttributeCalledName();
-    item.addEntryForAttribute(attributeCalledName, name);
+    // item.addEntryForAttribute(attributeCalledName, name);
+    item.addEntry({attribute:attributeCalledName, value:name});
   }
   return item;
 };
@@ -484,7 +485,8 @@
   newUser.assignToCategory(categoryCalledPerson); 
   if (name) { 
     var attributeCalledName = this.getItemFromUuid(World.UUID_FOR_ATTRIBUTE_NAME);
-    var entry = newUser.addEntryForAttribute(attributeCalledName, name);
+    // var entry = newUser.addEntryForAttribute(attributeCalledName, name);
+    var entry = newUser.addEntry({attribute:attributeCalledName, value:name});
   }
   this._currentUser = null;
   
@@ -710,7 +712,8 @@
       if ((matchingAttribute == attributeCalledCategory) && (match instanceof Item) && (match.isInCategory(categoryCalledCategory))) {
         item.assignToCategory(match);
       } else {
-        item.addEntryForAttribute(matchingAttribute, match);
+        // item.addEntryForAttribute(matchingAttribute, match);
+        item.addEntry({attribute:matchingAttribute, value:match});
       }
     }
   }

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/model/World.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -714,17 +714,20 @@
   var attributeCalledQueryMatchingAttribute = this.getAttributeCalledQueryMatchingAttribute();
   var attributeCalledQueryMatchingValue = this.getAttributeCalledQueryMatchingValue();
   var matchingEntry;
-  item.addEntryForAttribute(attributeCalledQueryMatchingAttribute, matchingAttribute);
+  // item.addEntryForAttribute(attributeCalledQueryMatchingAttribute, matchingAttribute);
+  item.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:matchingAttribute});
   if (matchingEntryOrListOfEntries) {
     if (Util.isArray(matchingEntryOrListOfEntries)) {
       for (var key in matchingEntryOrListOfEntries) {
         matchingEntry = matchingEntryOrListOfEntries[key];
-        item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
+        // item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
+        item.addEntry({attribute:attributeCalledQueryMatchingValue, value:matchingEntry});
       }
     }
     else {
       matchingEntry = matchingEntryOrListOfEntries;
-      item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
+      // item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
+      item.addEntry({attribute:attributeCalledQueryMatchingValue, value:matchingEntry});
     }
   }
 

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/util/RandomUuid.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -75,6 +75,7 @@
     } else {
       if (dojo.lang.isObject(namedParameters)) {
         uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
+        Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
       } else {
         Util.assert(false);
       }
@@ -118,19 +119,6 @@
 };
 
 
-/**
- * Returns a randomly generated floating point number 
- * between 0 and (4,294,967,296 - 1), inclusive.
- *
- * @scope    private class method
- */
-/*
-orp.util.RandomUuid._generateRandom32bitNumber = function() {
-  return Math.floor( (Math.random() % 1) * Math.pow(2, 32) );
-};
-*/
-
-
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -94,6 +94,7 @@
         var hardwareNode = namedParameters["hardwareNode"];
         var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
         Util.assert(atLeastOneParameter);
+        Util.assert(Util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
         if (uuidString) {
           Util.assert(!node && !pseudoNode && !hardwareNode);
           Util.assert(uuidString.length == 36);

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/util/Util.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -345,6 +345,38 @@
 };
 
 
+Util.isEmpty = function(object) {
+  for (var key in object) {
+    return false;
+  }
+  return true;
+};
+
+
+Util.hasProperty = function(object, property) {
+  return (object[property] !== undefined);
+};
+
+Util.hasProperties = function(object, properties) {
+  for (var i in properties) {
+    if (object[properties[i]] === undefined) { return false; }
+  }
+  return true;
+};
+
+Util.hasNoUnexpectedProperties = function(object, expectedProperties) {
+  for (var key in object) {
+    if (!Util.isObjectInSet(key, expectedProperties)) { return false; }
+  }
+  return true;
+};
+  
+Util.hasExactlyTheseProperties = function(object, properties) {
+  if (!Util.hasProperties(object, properties)) { return false; }
+  if (!Util.hasNoUnexpectedProperties(object, properties)) { return false; }
+  return true;
+};
+
 // -------------------------------------------------------------------
 // Methods that operate on Arrays
 // -------------------------------------------------------------------
@@ -383,11 +415,6 @@
 Util.isObjectInSet = function(object, set) {
   Util.assert(Util.isArray(set));
   
-//  for (var i=0; i<set.length; i+=1) {
-//    if (set[i] == object) {
-//      return true;
-//    }
-//  }
   for (var key in set) {
     if (set[key] == object) {
       return true;

Modified: trunk/source/util/UtilTest.js
===================================================================
--- trunk/source/util/UtilTest.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/util/UtilTest.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -89,7 +89,41 @@
   assertTrue('md5 of longString is correct', (Util.hex_md5(longString) == "4d694e03af399831c6f0c1f1bcc2fc93"));
 }
 
+function testIsEmpty() {
+  var canada = {name:"Canada", provinces:8};
+  var atlantis = {};
+  
+  assertTrue('Canada has properties', !Util.isEmpty(canada));
+  assertTrue('Atlantis does not have properties', Util.isEmpty(atlantis));
+  
+  delete canada.name;
+  delete canada.provinces;
+  assertTrue('Canada does not have properties', Util.isEmpty(canada));
+}
 
+function testHasProperty() {
+  var canada = {name:"Canada", provinces:8};
+  var atlantis = {};
+
+  assertTrue('Canada has a name', Util.hasProperty(canada, "name"));
+  assertTrue('Canada does not have a foo', !Util.hasProperty(canada, "foo"));
+  
+  assertTrue('Atlantis does not have a name', !Util.hasProperty(atlantis, "name"));
+
+  assertTrue('Atlantis has []', Util.hasProperties(atlantis, []));
+  assertTrue('Canada has ["name", "provinces"]', Util.hasProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada has ["name"]', Util.hasProperties(canada, ["name"]));
+  assertTrue('Canada has []', Util.hasProperties(canada, []));
+  assertTrue('Canada does not have ["foo", "bar"]', !Util.hasProperties(canada, ["foo", "bar"]));
+
+  assertTrue('Canada has only ["name", "provinces"]', Util.hasNoUnexpectedProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada does not have just ["name"]', !Util.hasNoUnexpectedProperties(canada, ["name"]));
+  
+  assertTrue('Canada does not have just ["name"]', !Util.hasExactlyTheseProperties(canada, ["name"]));
+  assertTrue('Canada has ["name", "provinces"]', Util.hasExactlyTheseProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada does not have ["name", "provinces", "foo"]', !Util.hasExactlyTheseProperties(canada, ["name", "provinces", "foo"]));
+}
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/util/Uuid.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -65,6 +65,9 @@
       if (dojo.lang.isObject(uuidString)) {
         var namedParameters = uuidString;
         this._uuidString = namedParameters["uuidString"];
+        
+        // Check for typos in parameter names
+        Util.assert(Util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
       } else {
         Util.assert(false);
       }
@@ -115,6 +118,9 @@
     Util.assert(dojo.lang.isObject(namedParameters));
     uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
     Util.assert(dojo.lang.isString(uuidString));
+    
+    // Check for typos in parameter names
+    Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
   }
 
   var uuid = new orp.util.Uuid(uuidString);

Modified: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/util/XmlConverter.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -178,7 +178,8 @@
           var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
           var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
           if (xmlAttributeValue !== "") {
-            newItem.addEntryForAttribute(xmlAttributeToAttributeSpecifiers[j]._attribute, xmlAttributeValue);
+            // newItem.addEntryForAttribute(xmlAttributeToAttributeSpecifiers[j]._attribute, xmlAttributeValue);
+            newItem.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
           }
         }
       }
@@ -232,7 +233,8 @@
     } else {
       item = world.newItem();
       item.assignToCategory(this._itemCategory);
-      item.addEntryForAttribute(equalitySpecifier._attribute, matchString);
+      // item.addEntryForAttribute(equalitySpecifier._attribute, matchString);
+      item.addEntry({attribute:equalitySpecifier._attribute, value:matchString});
     }
     for (j in xmlToAttributeSpecifiers) {
       var tagPath = xmlToAttributeSpecifiers[j]._tagPath;
@@ -243,7 +245,8 @@
         var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
         var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
         if (xmlAttributeValue !== "") {
-          item.addEntryForAttribute(xmlAttributeToAttributeSpecifiers[j]._attribute, xmlAttributeValue);
+          // item.addEntryForAttribute(xmlAttributeToAttributeSpecifiers[j]._attribute, xmlAttributeValue);
+          item.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
         }
       }
     }
@@ -269,7 +272,8 @@
           attr = world.newAttribute(attrName);
           hashTableOfAttributesKeyedByName[attrName] = attr;
         }
-        newItem.addEntryForAttribute(attr, node.firstChild.nodeValue);
+        // newItem.addEntryForAttribute(attr, node.firstChild.nodeValue);
+        newItem.addEntry({attribute:attr, value:node.firstChild.nodeValue});
       }
     }
     listOfOutputItems.push(newItem);
@@ -284,7 +288,8 @@
       if (xmlToAttributeSpecifier._inverseAttribute) {
         newItem.addConnectionEntry(xmlToAttributeSpecifier._attribute, value, xmlToAttributeSpecifier._inverseAttribute);
       } else {
-        newItem.addEntryForAttribute(xmlToAttributeSpecifier._attribute, value);
+        // newItem.addEntryForAttribute(xmlToAttributeSpecifier._attribute, value);
+        newItem.addEntry({attribute:xmlToAttributeSpecifier._attribute, value:value});
       }
     }
     return;

Modified: trunk/source/util/XmlConverterTest.js
===================================================================
--- trunk/source/util/XmlConverterTest.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/util/XmlConverterTest.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -167,7 +167,8 @@
   xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
   var colorAttribute = world.newAttribute("Color");
   var foodColorCategory = world.newCategory("Food color");
-  colorAttribute.addEntryForAttribute(world.getAttributeCalledExpectedType(), foodColorCategory);
+  // colorAttribute.addEntryForAttribute(world.getAttributeCalledExpectedType(), foodColorCategory);
+  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
   xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
   var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
   assertTrue('3 items should have been created', listOfItems.length == 3);
@@ -184,9 +185,11 @@
   xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
   var colorAttribute = world.newAttribute("Color");
   var foodColorCategory = world.newCategory("Food Color");
-  colorAttribute.addEntryForAttribute(world.getAttributeCalledExpectedType(), foodColorCategory);
+  // colorAttribute.addEntryForAttribute(world.getAttributeCalledExpectedType(), foodColorCategory);
+  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
   var foodsOfThisColorCategory = world.newCategory("Foods of this color");
-  colorAttribute.addEntryForAttribute(world.getAttributeCalledInverseAttribute(), foodsOfThisColorCategory);
+  // colorAttribute.addEntryForAttribute(world.getAttributeCalledInverseAttribute(), foodsOfThisColorCategory);
+  colorAttribute.addEntry({attribute:world.getAttributeCalledInverseAttribute(), value:foodsOfThisColorCategory});
   xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
   var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
   var colorCategories = world.getItemsInCategory(foodColorCategory);

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/view/EntryView.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -514,7 +514,8 @@
         var inverseAttr = inverseAttributeEntry.getValue(this._attribute);
         this._entry = this._item.replaceEntryWithConnection(this._entry, this._attribute, value, inverseAttr);
       } else {
-        this._entry = this._item.replaceEntryWithEntryForAttribute(this._entry, this._attribute, value);
+        // this._entry = this._item.replaceEntryWithEntryForAttribute(this._entry, this._attribute, value);
+        this._entry = this._item.replaceEntry({previousEntry:this._entry, attribute:this._attribute, value:value});
       }
       var superview = this.getSuperview();
       if (this._isProvisional && superview._provisionalItemJustBecomeReal) {

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/view/PageView.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -69,7 +69,8 @@
   var newSection = repository.newItem("New Section");
   newSection.assignToCategory(categoryCalledSection);
   inPage.addConnectionEntry(attributeCalledSectionsInPage, newSection, attributeCalledPageThisSectionAppearsOn);
-  newSection.addEntryForAttribute(attributeCalledPluginView, tablePluginView);
+  // newSection.addEntryForAttribute(attributeCalledPluginView, tablePluginView);
+  newSection.addEntry({attribute:attributeCalledPluginView, value:tablePluginView});
 
   var newQuery = repository.newItem("New Query");
   newQuery.assignToCategory(categoryCalledQuery);

Modified: trunk/source/view/RootView.js
===================================================================
--- trunk/source/view/RootView.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/view/RootView.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -415,7 +415,8 @@
   var attributeCalledSummary = repository.getAttributeCalledSummary();
   var categoryCalledPage = repository.getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
   newPage.assignToCategory(categoryCalledPage);
-  newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
+  //newPage.addEntryForAttribute(attributeCalledSummary, "This is a new page.");
+  newPage.addEntry({attribute:attributeCalledSummary, value:"This is a new page."});
 
   if (hasAtLeastOnePage) {
     PageView.newSection(repository, newPage);

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/source/view/SectionView.js	2005-09-20 01:56:25 UTC (rev 330)
@@ -283,7 +283,8 @@
   repository.beginTransaction();
   layoutItem = repository.newItem("Layout data for " + pluginTypeItem.getDisplayString() + " of " + this._section.getDisplayString());
   layoutItem.assignToCategory(categoryCalledLayoutData);
-  layoutItem.addEntryForAttribute(attributeAppliesToPlugin, pluginTypeItem);
+  // layoutItem.addEntryForAttribute(attributeAppliesToPlugin, pluginTypeItem);
+  layoutItem.addEntry({attribute:attributeAppliesToPlugin, value:pluginTypeItem});
   // this._section.addEntryForAttribute(attributeLayoutData, layoutItem, repository.getTypeCalledItem());
   this._section.addConnectionEntry(attributeLayoutData, layoutItem, attributeCalledSectionThisLayoutDataBelongsTo);
   repository.endTransaction();
@@ -408,19 +409,11 @@
 
     var oldEntry = this._section.getSingleEntryFromAttribute(attributeCalledPluginView);
     if (oldEntry) {
-      this._section.replaceEntry(oldEntry, newPluginViewItem);
+      this._section.replaceEntry({previousEntry:oldEntry, value:newPluginViewItem});
     } else {
-      this._section.addEntryForAttribute(attributeCalledPluginView, newPluginViewItem);
+      // this._section.addEntryForAttribute(attributeCalledPluginView, newPluginViewItem);
+      this._section.addEntry({attribute:attributeCalledPluginView, value:newPluginViewItem});
     }
-    /*
-    var pluginNameEntries = this._section.getEntriesForAttribute(attributeCalledPluginName);
-    if (pluginNameEntries && pluginNameEntries[0]) {
-      var oldEntry = pluginNameEntries[0];
-      this._section.replaceEntry(oldEntry, newChoiceName);
-    } else {
-      this._section.addEntryForAttribute(attributeCalledPluginName, newChoiceName);
-    }
-    */
     this.refresh();
   }
 };
@@ -458,9 +451,11 @@
   }
   if (matchingAttribute.getDisplayString() != newChoiceName) {
     if (listOfMatchingAttrs.length === 0) {
-      myQuery.addEntryForAttribute(attributeCalledQueryMatchingAttribute, newQueryMatchingAttribute);
+      // myQuery.addEntryForAttribute(attributeCalledQueryMatchingAttribute, newQueryMatchingAttribute);
+      myQuery.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:newQueryMatchingAttribute});
     } else {
-      myQuery.replaceEntry(listOfMatchingAttrs[0], newQueryMatchingAttribute);
+      // myQuery.replaceEntry(listOfMatchingAttrs[0], newQueryMatchingAttribute);
+      myQuery.replaceEntry({previousEntry:listOfMatchingAttrs[0], value:newQueryMatchingAttribute});
     }
 
     /* PENDING, PROBLEM to check Can't delete entries already created by previous matching attribute */



From skinner at berlios.de  Tue Sep 20 05:36:32 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 20 Sep 2005 05:36:32 +0200
Subject: [openrecord-svn] r331 - in trunk: source/util tests/util
Message-ID: <200509200336.j8K3aWFk027065@sheep.berlios.de>

Author: skinner
Date: 2005-09-20 05:36:30 +0200 (Tue, 20 Sep 2005)
New Revision: 331

Added:
   trunk/tests/util/XmlConverterMultiplePassesTest.html
   trunk/tests/util/XmlConverterMultiplePassesTest.js
   trunk/tests/util/XmlConverterTest.html
   trunk/tests/util/XmlConverterTest.js
Removed:
   trunk/source/util/XmlConverterMultiplePassesTest.html
   trunk/source/util/XmlConverterMultiplePassesTest.js
   trunk/source/util/XmlConverterTest.html
   trunk/source/util/XmlConverterTest.js
Modified:
   trunk/source/util/XmlConverter.js
   trunk/tests/util/TestSuite.html
Log:
Converted the XmlConverter class to use the Dojo package system.  Moved the unit tests over to the test tree.

Modified: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/source/util/XmlConverter.js	2005-09-20 03:36:30 UTC (rev 331)
@@ -28,13 +28,21 @@
  connection with the use or distribution of the work.
 *****************************************************************************/
 
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.util.XmlConverter");
+// dojo.provide("orp.util.XmlTextNodeToAttributeSpecifier");
+// dojo.provide("orp.util.XmlAttributeToAttributeSpecifier");
+
 /**
  * @param    tagPath    A sequence of nested XML tags (relative to an 'item-element'; see below).
  * @param    attribute  Will be assigned a value for every text node whose path equals the tag path.
  *
  * @scope    public instance constructor
  */
-function XmlTextNodeToAttributeSpecifier(tagPath, attribute) {
+orp.util.XmlTextNodeToAttributeSpecifier = function(tagPath, attribute) {
   Util.assert(tagPath instanceof Array);
   Util.assert(attribute instanceof Item);
   this._tagPath = tagPath;
@@ -49,15 +57,16 @@
   var attributeCalledInverseAttribute = attribute.getWorld().getAttributeCalledInverseAttribute();
   var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
   this._inverseAttribute = inverseAttributeEntry? inverseAttributeEntry.getValue(attribute) : null;
-}
+};
 
+
 /**
  * @param    xmlAttributeName    Each value corresponding to the xmlAttributeName will be converted an entry of the current item.
  * @param    attribute           The attribute of the created entries.
  *
  * @scope    public instance constructor
  */
-function XmlAttributeToAttributeSpecifier(xmlAttributeName, attribute) {
+orp.util.XmlAttributeToAttributeSpecifier = function(xmlAttributeName, attribute) {
   Util.assert(attribute instanceof Item);
   this._xmlAttributeName = xmlAttributeName;
   this._attribute = attribute;
@@ -71,20 +80,25 @@
   var attributeCalledInverseAttribute = attribute.getWorld().getAttributeCalledInverseAttribute();
   var inverseAttributeEntry = attribute.getSingleEntryFromAttribute(attributeCalledInverseAttribute);
   this._inverseAttribute = inverseAttributeEntry? inverseAttributeEntry.getValue(attribute) : null;
-}
+};
 
+
+// -------------------------------------------------------------------
+// Constructor
+// -------------------------------------------------------------------
+
 /**
  * The XmlConverter class knows how to load an XML file and make items
  * out of specified parts of the data.
  *
+ * @scope    public instance constructor
  * @param    world             
  * @param    url                                (of an XML file)
  * @param    nameSpace                          If null, the name of the file will be used.
  * @param    itemTagName                        Items will be made from elements with this tag name.
  * @param    itemCategory                       If null, a new category is created from 'namespace' and 'itemTagName'.
- * @scope    public instance constructor
  */
-function XmlConverter(world, url, nameSpace, itemTagName, itemCategory) {
+orp.util.XmlConverter = function(world, url, nameSpace, itemTagName, itemCategory) {
   Util.assert(world instanceof World);
   var urlSeparators = new RegExp("\\.|\\/");
   var urlParts = url.split(urlSeparators);
@@ -109,17 +123,20 @@
   }
   this._world = world;
   this._nameSpace = nameSpace;
-}
+};
 
+
 /**
+ * Returns the category that new items are assigned to.
+ * 
  * @scope    public instance method
- *
  * @return   Returns the category that new items are assigned to.
  */
-XmlConverter.prototype.getItemCategory = function() {
+orp.util.XmlConverter.prototype.getItemCategory = function() {
   return this._itemCategory;
 };
 
+
 /**
  * Given the URL of an XML file, a tag name used in the file, and optionally
  * a list of tag paths, items are created from the elements with the given
@@ -145,19 +162,19 @@
  * then makeItemsFromXmlFile("file:.../file.xml", "food", "Record") would result
  * in three items each with attributes called 'food:name', 'food:color' and 'food:flavor',
  * while makeItemsFromXmlFile("file:.../file.xml", "food", "Record", [["name"], ["vitamins", "C"]) 
- *                            [new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()),
- *                             new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))],
- *                             new XmlAttributeToAttributeSpecifier("id", world.newAttribute("Food ID"));
+ *                            [new orp.util.XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()),
+ *                             new orp.util.XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))],
+ *                             new orp.util.XmlAttributeToAttributeSpecifier("id", world.newAttribute("Food ID"));
  * would result in three items each with attributes called 'name', 'Vitamin C' and 'Food ID'.
  * In both cases, the three items are assigned to the category food:Record.
  *
  * @scope    public instance method
- * @param    xmlToAttributeSpecifiers           Array of type XmlTextNodeToAttributeSpecifier
- * @param    xmlAttributeToAttributeSpecifiers  Array of type XmlAttributeToAttributeSpecifier
+ * @param    xmlToAttributeSpecifiers           Array of type orp.util.XmlTextNodeToAttributeSpecifier
+ * @param    xmlAttributeToAttributeSpecifiers  Array of type orp.util.XmlAttributeToAttributeSpecifier
  *
  * @return   Returns an array of created items.
  */
-XmlConverter.prototype.makeItemsFromXmlFile = function(xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
+orp.util.XmlConverter.prototype.makeItemsFromXmlFile = function(xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
   world.beginTransaction();
   var listOfOutputItems = [];
   if (!xmlToAttributeSpecifiers) {
@@ -165,7 +182,7 @@
   }
   else {
     Util.assert(xmlToAttributeSpecifiers instanceof Array);
-    Util.assert(xmlToAttributeSpecifiers[0] instanceof XmlTextNodeToAttributeSpecifier);
+    Util.assert(xmlToAttributeSpecifiers[0] instanceof orp.util.XmlTextNodeToAttributeSpecifier);
     for (var i = 0; i < this._itemElements.length; ++i) {
       var newItem = world.newItem();
       newItem.assignToCategory(this._itemCategory);
@@ -178,7 +195,6 @@
           var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
           var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
           if (xmlAttributeValue !== "") {
-            // newItem.addEntryForAttribute(xmlAttributeToAttributeSpecifiers[j]._attribute, xmlAttributeValue);
             newItem.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
           }
         }
@@ -190,22 +206,23 @@
   return listOfOutputItems;
 };
 
+
 /**
  * @scope    public instance method
- * @param    equalitySpecifier                  type XmlTextNodeToAttributeSpecifier or XmlAttributeToAttributeSpecifier
- * @param    xmlToAttributeSpecifiers           Array of type XmlTextNodeToAttributeSpecifier
- * @param    xmlAttributeToAttributeSpecifiers  Array of type XmlAttributeToAttributeSpecifier
+ * @param    equalitySpecifier                  type orp.util.XmlTextNodeToAttributeSpecifier or orp.util.XmlAttributeToAttributeSpecifier
+ * @param    xmlToAttributeSpecifiers           Array of type orp.util.XmlTextNodeToAttributeSpecifier
+ * @param    xmlAttributeToAttributeSpecifiers  Array of type orp.util.XmlAttributeToAttributeSpecifier
  *
  * @return   Returns an array of modified or created items.
  */
-XmlConverter.prototype.makeOrModifyItemsFromXmlFile = function(equalitySpecifier, xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
+orp.util.XmlConverter.prototype.makeOrModifyItemsFromXmlFile = function(equalitySpecifier, xmlToAttributeSpecifiers, xmlAttributeToAttributeSpecifiers) {
   var matchXmlAttribute;
-  if (equalitySpecifier instanceof XmlAttributeToAttributeSpecifier) {
+  if (equalitySpecifier instanceof orp.util.XmlAttributeToAttributeSpecifier) {
     matchXmlAttribute = true;
     var xmlAttributeToMatch = equalitySpecifier._xmlAttributeName;
   } else {
-    Util.assert(equalitySpecifier instanceof XmlTextNodeToAttributeSpecifier,
-                "equalitySpecifier should be of type XmlTextNodeToAttributeSpecifier or XmlAttributeToAttributeSpecifier.");
+    Util.assert(equalitySpecifier instanceof orp.util.XmlTextNodeToAttributeSpecifier,
+                "equalitySpecifier should be of type orp.util.XmlTextNodeToAttributeSpecifier or orp.util.XmlAttributeToAttributeSpecifier.");
     matchXmlAttribute = false;
     var xmlTagPathToMatch = equalitySpecifier._tagPath;
   }
@@ -233,7 +250,6 @@
     } else {
       item = world.newItem();
       item.assignToCategory(this._itemCategory);
-      // item.addEntryForAttribute(equalitySpecifier._attribute, matchString);
       item.addEntry({attribute:equalitySpecifier._attribute, value:matchString});
     }
     for (j in xmlToAttributeSpecifiers) {
@@ -245,7 +261,6 @@
         var xmlAttributeName = xmlAttributeToAttributeSpecifiers[j]._xmlAttributeName;
         var xmlAttributeValue = this._itemElements[i].getAttribute(xmlAttributeName);
         if (xmlAttributeValue !== "") {
-          // item.addEntryForAttribute(xmlAttributeToAttributeSpecifiers[j]._attribute, xmlAttributeValue);
           item.addEntry({attribute:xmlAttributeToAttributeSpecifiers[j]._attribute, value:xmlAttributeValue});
         }
       }
@@ -256,7 +271,15 @@
   return listOfOutputItems;
 };
 
-XmlConverter.prototype._doDefaultConversion = function(world, nameSpace, itemElements, itemCategory) {
+
+// -------------------------------------------------------------------
+// Private instance methods
+// -------------------------------------------------------------------
+
+/**
+ * @scope    private instance method
+ */
+orp.util.XmlConverter.prototype._doDefaultConversion = function(world, nameSpace, itemElements, itemCategory) {
   var listOfOutputItems = [];
   var hashTableOfAttributesKeyedByName = [];
   for (var i = 0; i < itemElements.length; ++i) {
@@ -272,7 +295,6 @@
           attr = world.newAttribute(attrName);
           hashTableOfAttributesKeyedByName[attrName] = attr;
         }
-        // newItem.addEntryForAttribute(attr, node.firstChild.nodeValue);
         newItem.addEntry({attribute:attr, value:node.firstChild.nodeValue});
       }
     }
@@ -281,14 +303,17 @@
   return listOfOutputItems;
 };
 
-XmlConverter.prototype._processElementTree = function(level, maxLevel, node, newItem, xmlToAttributeSpecifier) {
+
+/**
+ * @scope    private instance method
+ */
+orp.util.XmlConverter.prototype._processElementTree = function(level, maxLevel, node, newItem, xmlToAttributeSpecifier) {
   if (level == maxLevel) {
     if (node.childNodes && node.childNodes.length > 0 && node.childNodes[0].nodeType == Node.TEXT_NODE) {
       value = EntryView._transformValueToExpectedType(world, node.childNodes[0].nodeValue, xmlToAttributeSpecifier._listOfTypes);
       if (xmlToAttributeSpecifier._inverseAttribute) {
         newItem.addConnectionEntry(xmlToAttributeSpecifier._attribute, value, xmlToAttributeSpecifier._inverseAttribute);
       } else {
-        // newItem.addEntryForAttribute(xmlToAttributeSpecifier._attribute, value);
         newItem.addEntry({attribute:xmlToAttributeSpecifier._attribute, value:value});
       }
     }
@@ -306,7 +331,11 @@
   }
 };
 
-XmlConverter.prototype._getTextForTagPath = function(itemElement, xmlTagPathToMatch) {
+
+/**
+ * @scope    private instance method
+ */
+orp.util.XmlConverter.prototype._getTextForTagPath = function(itemElement, xmlTagPathToMatch) {
   var node = itemElement;
   for (var i in xmlTagPathToMatch) {
     var tagName = xmlTagPathToMatch[i];
@@ -323,6 +352,7 @@
   }
 };
 
+
 // -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Deleted: trunk/source/util/XmlConverterMultiplePassesTest.html
===================================================================
--- trunk/source/util/XmlConverterMultiplePassesTest.html	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/source/util/XmlConverterMultiplePassesTest.html	2005-09-20 03:36:30 UTC (rev 331)
@@ -1,105 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Additional unit tests for XmlConverter.js</title>
-<!-- 
--->
-    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
-    <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
-    <script type="text/javascript" src="Util.js"></script>
-    <script type="text/javascript" src="Uuid.js"></script>
-    <script type="text/javascript" src="DateValue.js"></script>
-    <script type="text/javascript" src="../model/Record.js"></script>
-    <script type="text/javascript" src="../model/Ordinal.js"></script>
-    <script type="text/javascript" src="../model/Vote.js"></script>
-    <script type="text/javascript" src="../model/ContentRecord.js"></script>
-    <script type="text/javascript" src="../model/Item.js"></script>
-    <script type="text/javascript" src="../model/Entry.js"></script>
-    <script type="text/javascript" src="../model/Transaction.js"></script>
-    <script type="text/javascript" src="../model/QueryRunner.js"></script>
-    <script type="text/javascript" src="../model/World.js"></script>
-    <script type="text/javascript" src="../model/HttpSaver.js"></script>
-    <script type="text/javascript" src="../model/StubVirtualServer.js"></script>
-    <script type="text/javascript" src="../model/DeltaVirtualServer.js"></script>
-    <script type="text/javascript" src="../view/View.js"></script>
-    <script type="text/javascript" src="../view/EntryView.js"></script>
-    <script type="text/javascript" src="XmlConverter.js"></script>
-    <script type="text/javascript" src="XmlConverterMultiplePassesTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Additional unit tests for XmlConverter.js, testing multiple passes through an XML file.</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/util/XmlConverterMultiplePassesTest.js
===================================================================
--- trunk/source/util/XmlConverterMultiplePassesTest.js	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/source/util/XmlConverterMultiplePassesTest.js	2005-09-20 03:36:30 UTC (rev 331)
@@ -1,125 +0,0 @@
-/*****************************************************************************
- XmlConverterMultiplePassesTest.js
- 
-******************************************************************************
- Written in 2005 by Mignon Belongie.
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-var world;
-var foodIdAttribute;
-var itemCategory;
-var xmlConverterForSecondPass;
-
-function setUp() {
-  var pathToTrunkDirectoryFromThisFile = "../../../";
-  var virtualServer = new StubVirtualServer(pathToTrunkDirectoryFromThisFile);  
-  world = new World(virtualServer);
-  var annsPassword = "Ann's password";
-  var userAnn = world.newUser("Ann Doe", annsPassword);
-  world.login(userAnn, annsPassword);
-  var xmlFile = "../../../source/util/food.xml";
-  var xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var xmlAttributeToAttributeSpecifiers = new Array();
-  foodIdAttribute = world.newAttribute("Food ID");
-  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
-                                                      xmlAttributeToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  itemCategory = xmlConverter.getItemCategory();
-  xmlConverterForSecondPass = new XmlConverter(world, xmlFile, null, "Record", itemCategory);
-}
-
-function testNewItemsNotCreatedForRecordsWithMatchingXmlAttribute() {
-  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
-  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
-  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
-}
-
-function testNewItemsNotCreatedForRecordsWithMatchingXmlTextNode() {
-  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
-  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
-  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
-}
-
-function testNewItemCreatedForRecordWithNonMatchingXmlTextNode() {
-  var firstItem = world.getItemsInCategory(itemCategory)[0];
-  var nameEntry = firstItem.getSingleEntryFromAttribute(world.getAttributeCalledName());
-  firstItem.replaceEntry(nameEntry, "parsnip");
-
-  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
-  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  var itemsInItemCategory = world.getItemsInCategory(itemCategory);
-  assertTrue('The category "itemCategory" should now have exactly 4 items.', itemsInItemCategory.length == 4);
-  var names = [];
-  for (var i in itemsInItemCategory) {
-    names.push(itemsInItemCategory[i].getDisplayName());
-  }
-  hasAll = Util.areObjectsInSet(["carrot", "cheese puff", "radish", "parsnip"], names);
-  assertTrue('Item names should include "carrot", "cheese puff", "radish" and "parsnip".', hasAll);  
-}
-
-function testModifiedItemsHaveAllExpectedAttributes() {
-  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
-  var xmlTextNodeToAttributeSpecifiers = new Array();
-  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "A"], world.newAttribute("Vitamin A")));
-  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
-  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
-                                                                                   xmlTextNodeToAttributeSpecifiers);
-  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
-  for (var i in listOfModifiedItems) {
-    var item = listOfModifiedItems[i];
-    assertTrue('Each item should be in the category "itemCategory".', item.isInCategory(itemCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 5 attributes.', listOfAttributes.length == 5);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    hasAll = Util.areObjectsInSet(["Category", "Name", "Food ID", "Vitamin A", "Vitamin C"], names);
-    assertTrue('Each item should have attributes called "Category", "Name", "Food ID", "Vitamin A" and "Vitamin C".', hasAll);  
-  }
-}
-
-function tearDown() {
-  world.logout();
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Deleted: trunk/source/util/XmlConverterTest.html
===================================================================
--- trunk/source/util/XmlConverterTest.html	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/source/util/XmlConverterTest.html	2005-09-20 03:36:30 UTC (rev 331)
@@ -1,105 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests for XmlConverter.js</title>
-<!-- 
--->
-    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
-    <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
-    <script type="text/javascript" src="Util.js"></script>
-    <script type="text/javascript" src="Uuid.js"></script>
-    <script type="text/javascript" src="DateValue.js"></script>
-    <script type="text/javascript" src="../model/Record.js"></script>
-    <script type="text/javascript" src="../model/Ordinal.js"></script>
-    <script type="text/javascript" src="../model/Vote.js"></script>
-    <script type="text/javascript" src="../model/ContentRecord.js"></script>
-    <script type="text/javascript" src="../model/Item.js"></script>
-    <script type="text/javascript" src="../model/Entry.js"></script>
-    <script type="text/javascript" src="../model/Transaction.js"></script>
-    <script type="text/javascript" src="../model/QueryRunner.js"></script>
-    <script type="text/javascript" src="../model/World.js"></script>
-    <script type="text/javascript" src="../model/HttpSaver.js"></script>
-    <script type="text/javascript" src="../model/StubVirtualServer.js"></script>
-    <script type="text/javascript" src="../model/DeltaVirtualServer.js"></script>
-    <script type="text/javascript" src="../view/View.js"></script>
-    <script type="text/javascript" src="../view/EntryView.js"></script>
-    <script type="text/javascript" src="XmlConverter.js"></script>
-    <script type="text/javascript" src="XmlConverterTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests for XmlConverter.js</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/util/XmlConverterTest.js
===================================================================
--- trunk/source/util/XmlConverterTest.js	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/source/util/XmlConverterTest.js	2005-09-20 03:36:30 UTC (rev 331)
@@ -1,213 +0,0 @@
-/*****************************************************************************
- XmlConverterTest.js
- 
-******************************************************************************
- Written in 2005 by Mignon Belongie.
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
-
-var world;
-var xmlConverter;
-
-function setUp() {
-  var pathToTrunkDirectoryFromThisFile = "../../../";
-  var virtualServer = new StubVirtualServer(pathToTrunkDirectoryFromThisFile);  
-  world = new World(virtualServer);
-  var annsPassword = "Ann's password";
-  var userAnn = world.newUser("Ann Doe", annsPassword);
-  world.login(userAnn, annsPassword);
-  var xmlFile = "../../../source/util/food.xml";
-  xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
-}
-
-function testDefaultConversionOfTagsToAttributes() {
-  var listOfItems = xmlConverter.makeItemsFromXmlFile();
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var expectedNewCategory = null;
-  var listOfCategories = world.getCategories();
-  for (var i in listOfCategories) {
-    if (listOfCategories[i].getDisplayName() == "food:Record") {
-      expectedNewCategory = listOfCategories[i];
-      break;
-    }
-  }
-  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);  
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 4 attributes.', listOfAttributes.length == 4);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    hasAll = Util.areObjectsInSet(["food:name", "food:color", "food:flavor"], names);
-    assertTrue('Each item should have attributes called "food:name", "food:color" and "food:flavor".', hasAll);  
-  }
-}
-
-function testSimpleXmlToAttributeSpecifiers() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], world.newAttribute("Flavor")));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var expectedNewCategory = null;
-  var listOfCategories = world.getCategories();
-  for (var i in listOfCategories) {
-    if (listOfCategories[i].getDisplayName() == "food:Record") {
-      expectedNewCategory = listOfCategories[i];
-      break;
-    }
-  }
-  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Flavor".', Util.areObjectsInSet(["Category", "Name", "Flavor"], names));
-  }
-}
-
-function testMultipleValuesForAnAttribute() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var flavorAttribute = world.newAttribute("Flavor");
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], flavorAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    if (item.getDisplayName() == 'cheese puff') {
-      var cheesePuff = item;
-    } else if (item.getDisplayName() == 'carrot') {
-      var carrot = item;
-    }
-  }
-  var listOfFlavors = carrot.getEntriesForAttribute(flavorAttribute);
-  assertTrue("'carrot' should have exactly one flavor.", listOfFlavors.length == 1);
-  listOfFlavors = cheesePuff.getEntriesForAttribute(flavorAttribute);
-  assertTrue("'cheese puff' should have 2 flavors.", listOfFlavors.length == 2);
-  var flavorNames = [listOfFlavors[0].getValue(), listOfFlavors[1].getValue()];
-  assertTrue("'cheese puff' should have flavors called 'salty' and 'cheesy'.", Util.areObjectsInSet(['salty', 'cheesy'], flavorNames));
-}
-
-function testNestedXmlConversion() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Vitamin C".', Util.areObjectsInSet(["Category", "Name", "Vitamin C"], names));
-  }
-}
-
-function testXmlAttributeConversion() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var xmlAttributeToAttributeSpecifiers = new Array();
-  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", world.newAttribute("Food ID")));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
-                                                      xmlAttributeToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  var listOfIds = [];
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var listOfAttributes = item.getAttributes();
-    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
-    var names = [];
-    for (var j in listOfAttributes) {
-      names.push(listOfAttributes[j].getDisplayName());
-      if (listOfAttributes[j].getDisplayName() == "Food ID") {
-        listOfIds.push(item.getSingleEntryFromAttribute(listOfAttributes[j]).getValue());
-      }
-    }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Food ID".', Util.areObjectsInSet(["Category", "Name", "Food ID"], names));
-  }
-  assertTrue('Values of the "Food ID" attribute should include "32", "47" and "114".', Util.areObjectsInSet(["32", "47", "114"], listOfIds));
-}
-
-function testExpectedType() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var colorAttribute = world.newAttribute("Color");
-  var foodColorCategory = world.newCategory("Food color");
-  // colorAttribute.addEntryForAttribute(world.getAttributeCalledExpectedType(), foodColorCategory);
-  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  assertTrue('3 items should have been created', listOfItems.length == 3);
-  for (var i in listOfItems) {
-    var item = listOfItems[i];
-    var entryForColorAttribute = item.getSingleEntryFromAttribute(colorAttribute);
-    var valueOfColorAttribute = entryForColorAttribute.getValue();
-    assertTrue("The values of the color attribute should be in the category 'Food color'.", valueOfColorAttribute.isInCategory(foodColorCategory));
-  }
-}
-
-function testInverseAttribute() {
-  var xmlToAttributeSpecifiers = new Array();
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
-  var colorAttribute = world.newAttribute("Color");
-  var foodColorCategory = world.newCategory("Food Color");
-  // colorAttribute.addEntryForAttribute(world.getAttributeCalledExpectedType(), foodColorCategory);
-  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
-  var foodsOfThisColorCategory = world.newCategory("Foods of this color");
-  // colorAttribute.addEntryForAttribute(world.getAttributeCalledInverseAttribute(), foodsOfThisColorCategory);
-  colorAttribute.addEntry({attribute:world.getAttributeCalledInverseAttribute(), value:foodsOfThisColorCategory});
-  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
-  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
-  var colorCategories = world.getItemsInCategory(foodColorCategory);
-  assertTrue('2 color categories should have been created', colorCategories.length == 2);
-  var red = colorCategories[0].getDisplayName() == 'red'? colorCategories[0] : colorCategories[1].getDisplayName() == 'red'? colorCategories[1] : null;
-  assertFalse('A color category named "red" should have been created', red == null);
-  var orange = colorCategories[0].getDisplayName() == 'orange'? colorCategories[0] : colorCategories[1].getDisplayName() == 'orange'? colorCategories[1] : null;
-  assertFalse('A color category named "orange" should have been created', orange == null);
-  var redFoods = red.getEntriesForAttribute(foodsOfThisColorCategory);
-  assertTrue('There should be one red food.', redFoods.length == 1);
-  var orangeFoods = orange.getEntriesForAttribute(foodsOfThisColorCategory);
-  assertTrue('There should be two orange foods.', orangeFoods.length == 2);
-}
-
-function tearDown() {
-  world.logout();
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/tests/util/TestSuite.html
===================================================================
--- trunk/tests/util/TestSuite.html	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/tests/util/TestSuite.html	2005-09-20 03:36:30 UTC (rev 331)
@@ -27,6 +27,8 @@
         testSuite.addTestPage("../../../tests/util/DateValueTest.html");
         testSuite.addTestPage("../../../tests/util/LintTest.html");
         testSuite.addTestPage("../../../tests/util/UuidTest.html");
+        testSuite.addTestPage("../../../tests/util/XmlConverterTest.html");
+        testSuite.addTestPage("../../../tests/util/XmlConverterMultiplePassesTest.html");
         return testSuite;
       }
     </script>

Copied: trunk/tests/util/XmlConverterMultiplePassesTest.html (from rev 329, trunk/source/util/XmlConverterMultiplePassesTest.html)
===================================================================
--- trunk/source/util/XmlConverterMultiplePassesTest.html	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-09-20 03:36:30 UTC (rev 331)
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Additional unit tests for XmlConverter.js</title>
+
+    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="../../source/util/Uuid.js"></script>
+    <script type="text/javascript" src="../../source/util/DateValue.js"></script>
+    <script type="text/javascript" src="../../source/model/Record.js"></script>
+    <script type="text/javascript" src="../../source/model/Ordinal.js"></script>
+    <script type="text/javascript" src="../../source/model/Vote.js"></script>
+    <script type="text/javascript" src="../../source/model/ContentRecord.js"></script>
+    <script type="text/javascript" src="../../source/model/Item.js"></script>
+    <script type="text/javascript" src="../../source/model/Entry.js"></script>
+    <script type="text/javascript" src="../../source/model/Transaction.js"></script>
+    <script type="text/javascript" src="../../source/model/QueryRunner.js"></script>
+    <script type="text/javascript" src="../../source/model/World.js"></script>
+    <script type="text/javascript" src="../../source/model/HttpSaver.js"></script>
+    <script type="text/javascript" src="../../source/model/StubVirtualServer.js"></script>
+    <script type="text/javascript" src="../../source/model/DeltaVirtualServer.js"></script>
+    <script type="text/javascript" src="../../source/view/View.js"></script>
+    <script type="text/javascript" src="../../source/view/EntryView.js"></script>
+    <script type="text/javascript" src="../../source/util/XmlConverter.js"></script>
+    <script type="text/javascript" src="XmlConverterMultiplePassesTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Additional unit tests for XmlConverter.js, testing multiple passes through an XML file.</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/util/XmlConverterMultiplePassesTest.js (from rev 329, trunk/source/util/XmlConverterMultiplePassesTest.js)
===================================================================
--- trunk/source/util/XmlConverterMultiplePassesTest.js	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-09-20 03:36:30 UTC (rev 331)
@@ -0,0 +1,145 @@
+/*****************************************************************************
+ XmlConverterMultiplePassesTest.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie.
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+var world;
+var foodIdAttribute;
+var itemCategory;
+var xmlConverterForSecondPass;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.require("orp.util.XmlConverter");
+
+  XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
+  XmlAttributeToAttributeSpecifier = orp.util.XmlAttributeToAttributeSpecifier;
+  XmlConverter = orp.util.XmlConverter;
+  
+  // var pathToTrunkDirectoryFromThisFile = "../../../";
+  var pathToTrunkDirectoryFromThisFile = "../..";
+  
+  var virtualServer = new StubVirtualServer(pathToTrunkDirectoryFromThisFile);  
+  world = new World(virtualServer);
+  var annsPassword = "Ann's password";
+  var userAnn = world.newUser("Ann Doe", annsPassword);
+  world.login(userAnn, annsPassword);
+  var xmlFile = "../../../source/util/food.xml";
+  var xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var xmlAttributeToAttributeSpecifiers = new Array();
+  foodIdAttribute = world.newAttribute("Food ID");
+  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute));
+  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
+                                                      xmlAttributeToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  itemCategory = xmlConverter.getItemCategory();
+  xmlConverterForSecondPass = new XmlConverter(world, xmlFile, null, "Record", itemCategory);
+}
+
+function tearDown() {
+  world.logout();
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testNewItemsNotCreatedForRecordsWithMatchingXmlAttribute() {
+  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
+  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
+  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
+  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
+}
+
+function testNewItemsNotCreatedForRecordsWithMatchingXmlTextNode() {
+  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
+  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
+  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  var listOfAllItemsInItemCategory = world.getItemsInCategory(itemCategory);
+  assertTrue('The category "itemCategory" should still have exactly 3 items.', listOfAllItemsInItemCategory.length == 3);
+}
+
+function testNewItemCreatedForRecordWithNonMatchingXmlTextNode() {
+  var firstItem = world.getItemsInCategory(itemCategory)[0];
+  var nameEntry = firstItem.getSingleEntryFromAttribute(world.getAttributeCalledName());
+  firstItem.replaceEntry({previousEntry:nameEntry, value:"parsnip"});
+
+  var equalitySpecifier = new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName());
+  var xmlTextNodeToAttributeSpecifiers = [new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C"))];
+  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  var itemsInItemCategory = world.getItemsInCategory(itemCategory);
+  assertTrue('The category "itemCategory" should now have exactly 4 items.', itemsInItemCategory.length == 4);
+  var names = [];
+  for (var i in itemsInItemCategory) {
+    names.push(itemsInItemCategory[i].getDisplayName());
+  }
+  hasAll = Util.areObjectsInSet(["carrot", "cheese puff", "radish", "parsnip"], names);
+  assertTrue('Item names should include "carrot", "cheese puff", "radish" and "parsnip".', hasAll);  
+}
+
+function testModifiedItemsHaveAllExpectedAttributes() {
+  var equalitySpecifier = new XmlAttributeToAttributeSpecifier("food_id", foodIdAttribute);
+  var xmlTextNodeToAttributeSpecifiers = new Array();
+  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "A"], world.newAttribute("Vitamin A")));
+  xmlTextNodeToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
+  var listOfModifiedItems = xmlConverterForSecondPass.makeOrModifyItemsFromXmlFile(equalitySpecifier,
+                                                                                   xmlTextNodeToAttributeSpecifiers);
+  assertTrue('3 items should have been returned.', listOfModifiedItems.length == 3);
+  for (var i in listOfModifiedItems) {
+    var item = listOfModifiedItems[i];
+    assertTrue('Each item should be in the category "itemCategory".', item.isInCategory(itemCategory));
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 5 attributes.', listOfAttributes.length == 5);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    hasAll = Util.areObjectsInSet(["Category", "Name", "Food ID", "Vitamin A", "Vitamin C"], names);
+    assertTrue('Each item should have attributes called "Category", "Name", "Food ID", "Vitamin A" and "Vitamin C".', hasAll);  
+  }
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Copied: trunk/tests/util/XmlConverterTest.html (from rev 329, trunk/source/util/XmlConverterTest.html)
===================================================================
--- trunk/source/util/XmlConverterTest.html	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/tests/util/XmlConverterTest.html	2005-09-20 03:36:30 UTC (rev 331)
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for XmlConverter.js</title>
+
+    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
+    <script type="text/javascript" src="../../source/util/Util.js"></script>
+    <script type="text/javascript" src="../../source/util/Uuid.js"></script>
+    <script type="text/javascript" src="../../source/util/DateValue.js"></script>
+    <script type="text/javascript" src="../../source/model/Record.js"></script>
+    <script type="text/javascript" src="../../source/model/Ordinal.js"></script>
+    <script type="text/javascript" src="../../source/model/Vote.js"></script>
+    <script type="text/javascript" src="../../source/model/ContentRecord.js"></script>
+    <script type="text/javascript" src="../../source/model/Item.js"></script>
+    <script type="text/javascript" src="../../source/model/Entry.js"></script>
+    <script type="text/javascript" src="../../source/model/Transaction.js"></script>
+    <script type="text/javascript" src="../../source/model/QueryRunner.js"></script>
+    <script type="text/javascript" src="../../source/model/World.js"></script>
+    <script type="text/javascript" src="../../source/model/HttpSaver.js"></script>
+    <script type="text/javascript" src="../../source/model/StubVirtualServer.js"></script>
+    <script type="text/javascript" src="../../source/model/DeltaVirtualServer.js"></script>
+    <script type="text/javascript" src="../../source/view/View.js"></script>
+    <script type="text/javascript" src="../../source/view/EntryView.js"></script>
+    <script type="text/javascript" src="../../source/util/XmlConverter.js"></script>
+    <script type="text/javascript" src="XmlConverterTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for XmlConverter.js</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button.</p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/util/XmlConverterTest.js (from rev 330, trunk/source/util/XmlConverterTest.js)
===================================================================
--- trunk/source/util/XmlConverterTest.js	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/tests/util/XmlConverterTest.js	2005-09-20 03:36:30 UTC (rev 331)
@@ -0,0 +1,230 @@
+/*****************************************************************************
+ XmlConverterTest.js
+ 
+******************************************************************************
+ Written in 2005 by Mignon Belongie.
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+var world;
+var xmlConverter;
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.require("orp.util.XmlConverter");
+
+  XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
+  XmlAttributeToAttributeSpecifier = orp.util.XmlAttributeToAttributeSpecifier;
+  XmlConverter = orp.util.XmlConverter;
+
+  // var pathToTrunkDirectoryFromThisFile = "../../../";
+  pathToTrunkDirectoryFromThisFile = "../..";
+  
+  var virtualServer = new StubVirtualServer(pathToTrunkDirectoryFromThisFile);  
+  world = new World(virtualServer);
+  var annsPassword = "Ann's password";
+  var userAnn = world.newUser("Ann Doe", annsPassword);
+  world.login(userAnn, annsPassword);
+  var xmlFile = "../../../source/util/food.xml";
+  xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
+}
+
+function tearDown() {
+  world.logout();
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testDefaultConversionOfTagsToAttributes() {
+  var listOfItems = xmlConverter.makeItemsFromXmlFile();
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  var expectedNewCategory = null;
+  var listOfCategories = world.getCategories();
+  for (var i in listOfCategories) {
+    if (listOfCategories[i].getDisplayName() == "food:Record") {
+      expectedNewCategory = listOfCategories[i];
+      break;
+    }
+  }
+  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);  
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 4 attributes.', listOfAttributes.length == 4);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    hasAll = Util.areObjectsInSet(["food:name", "food:color", "food:flavor"], names);
+    assertTrue('Each item should have attributes called "food:name", "food:color" and "food:flavor".', hasAll);  
+  }
+}
+
+function testSimpleXmlToAttributeSpecifiers() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new orp.util.XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], world.newAttribute("Flavor")));
+  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  var expectedNewCategory = null;
+  var listOfCategories = world.getCategories();
+  for (var i in listOfCategories) {
+    if (listOfCategories[i].getDisplayName() == "food:Record") {
+      expectedNewCategory = listOfCategories[i];
+      break;
+    }
+  }
+  assertFalse('A category named "food:Record" should have been created', expectedNewCategory == null);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    assertTrue('Each item should be in the category "food:Record".', item.isInCategory(expectedNewCategory));
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    assertTrue('Each item should have attributes called "Category", "Name" and "Flavor".', Util.areObjectsInSet(["Category", "Name", "Flavor"], names));
+  }
+}
+
+function testMultipleValuesForAnAttribute() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var flavorAttribute = world.newAttribute("Flavor");
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["flavor"], flavorAttribute));
+  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    if (item.getDisplayName() == 'cheese puff') {
+      var cheesePuff = item;
+    } else if (item.getDisplayName() == 'carrot') {
+      var carrot = item;
+    }
+  }
+  var listOfFlavors = carrot.getEntriesForAttribute(flavorAttribute);
+  assertTrue("'carrot' should have exactly one flavor.", listOfFlavors.length == 1);
+  listOfFlavors = cheesePuff.getEntriesForAttribute(flavorAttribute);
+  assertTrue("'cheese puff' should have 2 flavors.", listOfFlavors.length == 2);
+  var flavorNames = [listOfFlavors[0].getValue(), listOfFlavors[1].getValue()];
+  assertTrue("'cheese puff' should have flavors called 'salty' and 'cheesy'.", Util.areObjectsInSet(['salty', 'cheesy'], flavorNames));
+}
+
+function testNestedXmlConversion() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["vitamins", "C"], world.newAttribute("Vitamin C")));
+  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+    }
+    assertTrue('Each item should have attributes called "Category", "Name" and "Vitamin C".', Util.areObjectsInSet(["Category", "Name", "Vitamin C"], names));
+  }
+}
+
+function testXmlAttributeConversion() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var xmlAttributeToAttributeSpecifiers = new Array();
+  xmlAttributeToAttributeSpecifiers.push(new XmlAttributeToAttributeSpecifier("food_id", world.newAttribute("Food ID")));
+  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers,
+                                                      xmlAttributeToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  var listOfIds = [];
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    var listOfAttributes = item.getAttributes();
+    assertTrue('Each item should have 3 attributes.', listOfAttributes.length == 3);
+    var names = [];
+    for (var j in listOfAttributes) {
+      names.push(listOfAttributes[j].getDisplayName());
+      if (listOfAttributes[j].getDisplayName() == "Food ID") {
+        listOfIds.push(item.getSingleEntryFromAttribute(listOfAttributes[j]).getValue());
+      }
+    }
+    assertTrue('Each item should have attributes called "Category", "Name" and "Food ID".', Util.areObjectsInSet(["Category", "Name", "Food ID"], names));
+  }
+  assertTrue('Values of the "Food ID" attribute should include "32", "47" and "114".', Util.areObjectsInSet(["32", "47", "114"], listOfIds));
+}
+
+function testExpectedType() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var colorAttribute = world.newAttribute("Color");
+  var foodColorCategory = world.newCategory("Food color");
+  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
+  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  assertTrue('3 items should have been created', listOfItems.length == 3);
+  for (var i in listOfItems) {
+    var item = listOfItems[i];
+    var entryForColorAttribute = item.getSingleEntryFromAttribute(colorAttribute);
+    var valueOfColorAttribute = entryForColorAttribute.getValue();
+    assertTrue("The values of the color attribute should be in the category 'Food color'.", valueOfColorAttribute.isInCategory(foodColorCategory));
+  }
+}
+
+function testInverseAttribute() {
+  var xmlToAttributeSpecifiers = new Array();
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));
+  var colorAttribute = world.newAttribute("Color");
+  var foodColorCategory = world.newCategory("Food Color");
+  colorAttribute.addEntry({attribute:world.getAttributeCalledExpectedType(), value:foodColorCategory});
+  var foodsOfThisColorCategory = world.newCategory("Foods of this color");
+  colorAttribute.addEntry({attribute:world.getAttributeCalledInverseAttribute(), value:foodsOfThisColorCategory});
+  xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["color"], colorAttribute));
+  var listOfItems = xmlConverter.makeItemsFromXmlFile(xmlToAttributeSpecifiers);
+  var colorCategories = world.getItemsInCategory(foodColorCategory);
+  assertTrue('2 color categories should have been created', colorCategories.length == 2);
+  var red = colorCategories[0].getDisplayName() == 'red'? colorCategories[0] : colorCategories[1].getDisplayName() == 'red'? colorCategories[1] : null;
+  assertFalse('A color category named "red" should have been created', red == null);
+  var orange = colorCategories[0].getDisplayName() == 'orange'? colorCategories[0] : colorCategories[1].getDisplayName() == 'orange'? colorCategories[1] : null;
+  assertFalse('A color category named "orange" should have been created', orange == null);
+  var redFoods = red.getEntriesForAttribute(foodsOfThisColorCategory);
+  assertTrue('There should be one red food.', redFoods.length == 1);
+  var orangeFoods = orange.getEntriesForAttribute(foodsOfThisColorCategory);
+  assertTrue('There should be two orange foods.', orangeFoods.length == 2);
+}
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------



From skinner at berlios.de  Tue Sep 20 05:39:13 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 20 Sep 2005 05:39:13 +0200
Subject: [openrecord-svn] r332 - in trunk: source/util tests/util
Message-ID: <200509200339.j8K3dDf6027861@sheep.berlios.de>

Author: skinner
Date: 2005-09-20 05:39:12 +0200 (Tue, 20 Sep 2005)
New Revision: 332

Added:
   trunk/tests/util/food.xml
Removed:
   trunk/source/util/food.xml
Modified:
   trunk/tests/util/XmlConverterMultiplePassesTest.js
   trunk/tests/util/XmlConverterTest.js
Log:
Converted the XmlConverter class to use the Dojo package system.  Moved the unit tests over to the test tree.

Deleted: trunk/source/util/food.xml
===================================================================
--- trunk/source/util/food.xml	2005-09-20 03:36:30 UTC (rev 331)
+++ trunk/source/util/food.xml	2005-09-20 03:39:12 UTC (rev 332)
@@ -1,13 +0,0 @@
-<?xml version="1.0" encoding="US-ASCII" ?>
-<Food_Glossary>
-<Record food_id="32">
-<name>carrot</name><color>orange</color><flavor>sweet</flavor><vitamins><A>lots</A><C>lots</C></vitamins>
-</Record>
-<Record food_id="47">
-<name>cheese puff</name><color>orange</color><flavor>salty</flavor><flavor>cheesy</flavor><vitamins><A>0.0</A><C>0.0</C></vitamins>
-</Record>
-<Record food_id="114">
-<name>radish</name><color>red</color><flavor>hot</flavor><vitamins><A>maybe</A><C>some</C></vitamins>
-</Record>
-</Food_Glossary>
-

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.js
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-09-20 03:36:30 UTC (rev 331)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-09-20 03:39:12 UTC (rev 332)
@@ -54,7 +54,7 @@
   var annsPassword = "Ann's password";
   var userAnn = world.newUser("Ann Doe", annsPassword);
   world.login(userAnn, annsPassword);
-  var xmlFile = "../../../source/util/food.xml";
+  var xmlFile = "../../../tests/util/food.xml";
   var xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
   var xmlToAttributeSpecifiers = new Array();
   xmlToAttributeSpecifiers.push(new XmlTextNodeToAttributeSpecifier(["name"], world.getAttributeCalledName()));

Modified: trunk/tests/util/XmlConverterTest.js
===================================================================
--- trunk/tests/util/XmlConverterTest.js	2005-09-20 03:36:30 UTC (rev 331)
+++ trunk/tests/util/XmlConverterTest.js	2005-09-20 03:39:12 UTC (rev 332)
@@ -52,7 +52,7 @@
   var annsPassword = "Ann's password";
   var userAnn = world.newUser("Ann Doe", annsPassword);
   world.login(userAnn, annsPassword);
-  var xmlFile = "../../../source/util/food.xml";
+  var xmlFile = "../../../tests/util/food.xml";
   xmlConverter = new XmlConverter(world, xmlFile, "food", "Record");
 }
 

Copied: trunk/tests/util/food.xml (from rev 329, trunk/source/util/food.xml)



From skinner at berlios.de  Tue Sep 20 22:36:12 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 20 Sep 2005 22:36:12 +0200
Subject: [openrecord-svn] r333 - in trunk: source source/model source/util source/view tests tests/model tests/util tests/view third_party/gtd_tiddlywiki
Message-ID: <200509202036.j8KKaCTZ006518@sheep.berlios.de>

Author: skinner
Date: 2005-09-20 22:36:08 +0200 (Tue, 20 Sep 2005)
New Revision: 333

Added:
   trunk/tests/util/UtilTest.html
   trunk/tests/util/UtilTest.js
Removed:
   trunk/source/util/TestSuite.html
   trunk/source/util/UtilTest.html
   trunk/source/util/UtilTest.js
Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/OutlinePlugin.js
   trunk/source/TablePlugin.js
   trunk/source/TestSuite.html
   trunk/source/model/ContentRecord.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/ModelTest.js
   trunk/source/model/QueryRunner.js
   trunk/source/model/Record.js
   trunk/source/model/RepositoryWritingTest.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/TestReorderingForSpecialCases.js
   trunk/source/model/TestReorderingForTypicalOrdinals.js
   trunk/source/model/World.js
   trunk/source/util/CsvParser.js
   trunk/source/util/DateValue.js
   trunk/source/util/LintTool.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Util.js
   trunk/source/util/Uuid.js
   trunk/source/util/XmlConverter.js
   trunk/source/view/EntryView.js
   trunk/source/view/ItemView.js
   trunk/source/view/LoginView.js
   trunk/source/view/MultiEntriesView.js
   trunk/source/view/NavbarView.js
   trunk/source/view/PageView.js
   trunk/source/view/RootView.js
   trunk/source/view/SectionView.js
   trunk/source/view/SuggestionBox.js
   trunk/source/view/View.js
   trunk/tests/LintTest.html
   trunk/tests/model/LintTest.html
   trunk/tests/util/CsvParserTest.html
   trunk/tests/util/DateValueTest.html
   trunk/tests/util/DateValueTest.js
   trunk/tests/util/LintTest.html
   trunk/tests/util/TestSuite.html
   trunk/tests/util/UuidTest.html
   trunk/tests/util/XmlConverterMultiplePassesTest.html
   trunk/tests/util/XmlConverterMultiplePassesTest.js
   trunk/tests/util/XmlConverterTest.html
   trunk/tests/util/XmlConverterTest.js
   trunk/tests/view/LintTest.html
   trunk/third_party/gtd_tiddlywiki/FileSaver.js
Log:
Converted Util.js to use the Dojo package system, and updated everything else accordingly.

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/BarChartPlugin.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -123,7 +123,7 @@
         firstEntry = listOfEntries[0];
         if (firstEntry) {
           var value = firstEntry.getValue(contentItem);
-          if (Util.isNumber(value)) {
+          if (orp.util.isNumber(value)) {
             var count = hashTableOfNumericValueIncidenceKeyedByUuid[attributeUuid];
             if (!count) {
               count = 0;
@@ -156,7 +156,7 @@
       if (listOfEntries && listOfEntries[0]) {
         var nextEntry = listOfEntries[0];
         var nextValue = nextEntry.getValue();
-        if (Util.isNumber(nextValue)) {
+        if (orp.util.isNumber(nextValue)) {
           maxValue = Math.max(maxValue, nextValue);
         }     
       }
@@ -186,7 +186,7 @@
       if (listOfEntries && listOfEntries[0]) {
         firstEntry = listOfEntries[0];
         var firstValue = firstEntry.getValue();
-        if (Util.isNumber(firstValue)) {
+        if (orp.util.isNumber(firstValue)) {
           numericValue = firstValue;
         }
       }

Modified: trunk/source/OutlinePlugin.js
===================================================================
--- trunk/source/OutlinePlugin.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/OutlinePlugin.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -118,7 +118,7 @@
 
     // View.appendNewTextNode(anchorElement, "(more &#8658;)");
     anchorElement.innerHTML = "(more &#8658;)";
-    Util.addEventListener(anchorElement, "click", RootView.clickOnLocalLink);
+    orp.util.addEventListener(anchorElement, "click", RootView.clickOnLocalLink);
   }
 };
 

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/TablePlugin.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -121,7 +121,7 @@
  * @return   This method returns 0 if the items are comparable. If _ascendingOrder is true, itemA is less than itemB, this method returns -1, otherwise it returns +1. 
  */
 TablePlugin.prototype.compareItemsBySortAttribute = function(itemA, itemB) {
-  Util.assert(this._sortAttribute !== null);
+  orp.util.assert(this._sortAttribute !== null);
   var strA = itemA.getSingleStringValueFromAttribute(this._sortAttribute).toLowerCase();
   var strB = itemB.getSingleStringValueFromAttribute(this._sortAttribute).toLowerCase();
   var ascendingInt = this._ascendingOrder ? -1 : 1;
@@ -147,7 +147,7 @@
     // columns, and we just want to use that list.
     for (var i in listOfTableColumnEntries) {
       anAttribute = listOfTableColumnEntries[i].getValue();
-      Util.assert(anAttribute instanceof Item);
+      orp.util.assert(anAttribute instanceof Item);
       displayAttributes.push(anAttribute);
     }
   } else {
@@ -170,7 +170,7 @@
       }
     }
     
-    if (Util.lengthOfHashTable(hashTableOfAttributesKeyedByUuid) < 1) {
+    if (orp.util.lengthOfHashTable(hashTableOfAttributesKeyedByUuid) < 1) {
       // If we have not yet identified any display attributes to use as
       // column headers, then we'll just use the "Name" attribute so that
       // our table will have at least one column.
@@ -201,7 +201,7 @@
   for (var key in listOfAttributes) {
     var attribute = listOfAttributes[key];
     optionElt = View.appendNewElement(selectElt, "option");
-    if (Util.isObjectInSet(attribute, this._displayAttributes)) {
+    if (orp.util.isObjectInSet(attribute, this._displayAttributes)) {
       optionElt.text = '* ';
     }
     optionElt.text += attribute.getDisplayString();
@@ -331,8 +331,8 @@
   var headerCellElement = droppableObject.element;
   var headerCellUuid = headerCellElement.getAttribute('uuid');
   var droppedOnAttribute = world.getItemFromUuid(headerCellUuid);
-  var indexOfDraggedAttribute = Util.getArrayIndex(this._displayAttributes, draggedAttribute);
-  var indexOfDroppedOnAttribute = Util.getArrayIndex(this._displayAttributes, droppedOnAttribute);
+  var indexOfDraggedAttribute = orp.util.getArrayIndex(this._displayAttributes, draggedAttribute);
+  var indexOfDroppedOnAttribute = orp.util.getArrayIndex(this._displayAttributes, droppedOnAttribute);
 
   // If the user dragged a column header and dropped it on the same column 
   // header, then we don't need to change the column order.
@@ -353,7 +353,7 @@
   if (listOfTableColumnEntries.length > 0) {
     // If we get here, it means this table has a saved list of user-selected
     // columns, and we just want to re-order that list.
-    Util.assert(this._displayAttributes.length == listOfTableColumnEntries.length);
+    orp.util.assert(this._displayAttributes.length == listOfTableColumnEntries.length);
     var draggedEntry = listOfTableColumnEntries[indexOfDraggedAttribute];
     var droppedOnEntry = listOfTableColumnEntries[indexOfDroppedOnAttribute];
     if (indexOfDraggedAttribute > indexOfDroppedOnAttribute) {
@@ -496,7 +496,7 @@
  */
 TablePlugin.prototype.getSortIcon = function() {
   var imageName = this._ascendingOrder ? TablePlugin.ASCENDING_GIF : TablePlugin.DESCENDING_GIF;
-  var image =  Util.createImageElement(imageName);
+  var image =  orp.util.createImageElement(imageName);
   //image.align = "right";
   return image;
 };
@@ -557,7 +557,7 @@
  * @scope    public instance method
  */
 TablePlugin.prototype.selectRow = function(rowElement) {
-  Util.assert(rowElement instanceof HTMLTableRowElement);
+  orp.util.assert(rowElement instanceof HTMLTableRowElement);
   if (rowElement != this._lastSelectedRow) {
     if (this._lastSelectedRow) {
       this._lastSelectedRow.className = "";
@@ -580,7 +580,7 @@
   var listOfAttributes = this._displayAttributes;
   var startTime = new Date();
   
-  var fileContents = Util.getStringContentsOfFileAtURL('file://' + fileButton.value);
+  var fileContents = orp.util.getStringContentsOfFileAtURL('file://' + fileButton.value);
   var csvParser = new orp.util.CsvParser();
   var listOfRecords = csvParser.getStringValuesFromCsvData(fileContents);
   if (!listOfRecords) {
@@ -638,7 +638,7 @@
       world.beginTransaction();
     }
     listOfFields = listOfRecords[i];
-    Util.assert(listOfFields.length == listOfAttributes.length);
+    orp.util.assert(listOfFields.length == listOfAttributes.length);
     var newItem = world.newItem();
     world.setItemToBeIncludedInQueryResultList(newItem, this.getQuerySpec());
     for (j in listOfAttributes) {
@@ -692,7 +692,7 @@
     var entriesTableColumns = this._layout.getEntriesForAttribute(attributeTableColumns);
     var noStoredColumns = (entriesTableColumns.length === 0);
     var changedAttribute = this.getWorld().getItemFromUuid(attributeUuid);
-    var removeAttribute = Util.removeObjectFromSet(changedAttribute,this._displayAttributes);
+    var removeAttribute = orp.util.removeObjectFromSet(changedAttribute,this._displayAttributes);
     var typeCalledItem = repository.getTypeCalledItem();
     if (removeAttribute) {
       for (var i in entriesTableColumns) {
@@ -751,22 +751,22 @@
   
   var move = null;
   switch (asciiValueOfKey) {
-    case Util.ASCII_VALUE_FOR_LEFT_ARROW:
+    case orp.util.ASCII.LEFT_ARROW:
       move = MOVE_LEFT;
       break;
-    case Util.ASCII_VALUE_FOR_UP_ARROW:
+    case orp.util.ASCII.UP_ARROW:
       move = MOVE_UP;
       break;
-    case Util.ASCII_VALUE_FOR_RIGHT_ARROW:
+    case orp.util.ASCII.RIGHT_ARROW:
       move = MOVE_RIGHT;
       break;
-    case Util.ASCII_VALUE_FOR_DOWN_ARROW:
+    case orp.util.ASCII.DOWN_ARROW:
       move = MOVE_DOWN;
       break;
-    case Util.ASCII_VALUE_FOR_RETURN:
+    case orp.util.ASCII.RETURN:
       move = (shiftKeyPressed) ? MOVE_UP : MOVE_DOWN;
       break;
-    case Util.ASCII_VALUE_FOR_TAB:
+    case orp.util.ASCII.TAB:
       move = (shiftKeyPressed) ? MOVE_LEFT : MOVE_RIGHT;
       break;
     default:
@@ -775,8 +775,8 @@
   }
   
   if (move) {
-    Util.isNumber(this._numberOfColumns);
-    Util.isArray(this._listOfItems);
+    orp.util.isNumber(this._numberOfColumns);
+    orp.util.isArray(this._listOfItems);
     
     // line below needs to be called here i.e. early because stopping an edit may change a provisional item
     // to become a "real" one thereby  creating new row for the next provisional item, e.g. this._listOfItems changes

Modified: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/TestSuite.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -30,7 +30,6 @@
         testSuite.addTestPage("../../../tests/view/LintTest.html");
         testSuite.addTestPage("../../../tests/LintTest.html");
         testSuite.addTestPage("../../../source/model/TestSuite.html");
-        testSuite.addTestPage("../../../source/util/TestSuite.html");
         return testSuite;
       }
     </script>

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/ContentRecord.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -162,19 +162,19 @@
       break;
     case World.RETRIEVAL_FILTER_SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
   }
   return ordinalNumber;
@@ -225,18 +225,18 @@
       break;
     case World.RETRIEVAL_FILTER_SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
       hasBeenDeleted = false;
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
   }
   return hasBeenDeleted;
@@ -270,7 +270,7 @@
   
   if (firstOrdinalNumber && thirdOrdinalNumber) {
     if (firstOrdinalNumber == thirdOrdinalNumber) {
-      Util.assert(false, "Tried to reorder between two items with the same ordinal.");
+      orp.util.assert(false, "Tried to reorder between two items with the same ordinal.");
     }
     else {
       if (firstOrdinalNumber > thirdOrdinalNumber) {

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/DeltaVirtualServer.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -82,7 +82,7 @@
     repositoryUrl = this._completePathToTrunkDirectory + '/';
   }
   repositoryUrl += DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY + "/" + repositoryFileName;
-  var repositoryContentString = Util.getStringContentsOfFileAtURL(repositoryUrl);
+  var repositoryContentString = orp.util.getStringContentsOfFileAtURL(repositoryUrl);
   repositoryContentString += " ] }";
 
   this._loadWorldFromJsonString(repositoryContentString);
@@ -105,14 +105,14 @@
 DeltaVirtualServer.prototype._loadWorldFromJsonString = function(jsonRepositoryString) {
 
   // load the list of records
-  Util.assert(Util.isString(jsonRepositoryString));
+  orp.util.assert(orp.util.isString(jsonRepositoryString));
   var dehydratedRecords = null;
   eval("dehydratedRecords = " + jsonRepositoryString + ";");
-  Util.assert(Util.isObject(dehydratedRecords));
+  orp.util.assert(orp.util.isObject(dehydratedRecords));
   var recordFormat = dehydratedRecords[StubVirtualServer.JSON_MEMBER_FORMAT];
-  Util.assert(recordFormat == StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
+  orp.util.assert(recordFormat == StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
   var listOfRecords = dehydratedRecords[StubVirtualServer.JSON_MEMBER_RECORDS];
-  Util.assert(Util.isArray(listOfRecords));
+  orp.util.assert(orp.util.isArray(listOfRecords));
   
   var listOfUsers = null;
   
@@ -249,7 +249,7 @@
       if (!listOfUsers) {
         listOfUsers = this.getUsers();
       }
-      if (Util.isObjectInSet(item, listOfUsers)) {
+      if (orp.util.isObjectInSet(item, listOfUsers)) {
         var user = item;
         var password = this._hashTableOfUserAuthenticationInfo[user.getUuid()];
         var passwordString = "null";
@@ -363,7 +363,7 @@
             if (generateComments) {valueComment = this._getTypedDisplayStringForItem(contentData);}
             break;
           default:
-            Util.assert(false, "no such type: " + entryType.getDisplayString());
+            orp.util.assert(false, "no such type: " + entryType.getDisplayString());
         }
         listOfStringsForEntry.push(indent + '        "' + StubVirtualServer.JSON_MEMBER_VALUE + '": ' + valueString);
         if (generateComments) {

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/Entry.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -99,19 +99,19 @@
   if (type) {
     this._type = type;
   } else {
-    if (Util.isNumber(value)) {
+    if (orp.util.isNumber(value)) {
       this._type = this.getWorld().getTypeCalledNumber();
     }
-    else if (Util.isString(value)) {
+    else if (orp.util.isString(value)) {
       this._type = this.getWorld().getTypeCalledText();
     }
-    else if (Util.isDate(value)) {
+    else if (orp.util.isDate(value)) {
       this._type = this.getWorld().getTypeCalledDate();
     }
     else if (value instanceof Item) {
       this._type = this.getWorld().getTypeCalledItem();
     }
-    else {Util.assert(false, "unknown data type:" + (typeof value) + ' value: ' + value);}
+    else {orp.util.assert(false, "unknown data type:" + (typeof value) + ' value: ' + value);}
   }
   this._value = value;
 };
@@ -181,10 +181,10 @@
   if (this._item instanceof Item) {
     this._item._addRehydratedEntry(this, this._attribute);
   } else {
-    Util.assert(Util.isArray(this._item));
-    Util.assert(this._item.length == 2);
-    Util.assert(Util.isArray(this._attribute));
-    Util.assert(this._attribute.length == 2);
+    orp.util.assert(orp.util.isArray(this._item));
+    orp.util.assert(this._item.length == 2);
+    orp.util.assert(orp.util.isArray(this._attribute));
+    orp.util.assert(this._attribute.length == 2);
     
     var firstItem = this._item[0];
     var secondItem = this._item[1];
@@ -255,7 +255,7 @@
   if (this._item == item) {
     return this._attribute;
   }
-  if (Util.isArray(this._item)) {
+  if (orp.util.isArray(this._item)) {
     if (this._item[0] == item) {
       return this._attribute[0];
     }
@@ -276,13 +276,13 @@
  * @return   The item that is connected to the given item.
  */
 Entry.prototype.getConnectedItem = function(item) {
-  Util.assert(item instanceof Item);
+  orp.util.assert(item instanceof Item);
   if (this._item == item) {
     if (this._type == this.getWorld().getTypeCalledItem()) {
       return this._value;
     }
   }
-  if (Util.isArray(this._item)) {
+  if (orp.util.isArray(this._item)) {
     if (this._item[0] == item) {
       return this._item[1];
     }
@@ -302,14 +302,14 @@
  * @return   The value this entry was initialized to hold.
  */
 Entry.prototype.getValue = function(item) {
-  if (Util.isArray(this._item)) {
+  if (orp.util.isArray(this._item)) {
     if (this._item[0] == item) {
       return this._item[1];
     }
     if (this._item[1] == item) {
       return this._item[0];
     }
-    Util.assert(false, "Entry.getValue() was called on a connection entry, but was not passed an item as a parameter.");
+    orp.util.assert(false, "Entry.getValue() was called on a connection entry, but was not passed an item as a parameter.");
   }
   return this._value; 
 };
@@ -327,7 +327,7 @@
     case this.getWorld().getTypeCalledNumber():
       var originalString = this._value.toString();
       var arrayOfTwoStrings = originalString.split('.');
-      Util.assert(arrayOfTwoStrings.length < 3);
+      orp.util.assert(arrayOfTwoStrings.length < 3);
       wholeNumberString = arrayOfTwoStrings[0];
       fractionalNumberString = null;
       if (arrayOfTwoStrings.length == 2) {
@@ -359,7 +359,7 @@
       break;
     case this.getWorld().getTypeCalledDate():
       var aDate = this._value;
-      // returnString = Util.getStringMonthDayYear(aDate);
+      // returnString = orp.util.getStringMonthDayYear(aDate);
       returnString = aDate.toShortLocaleDateString();
       break;
     case this.getWorld().getTypeCalledItem():
@@ -371,7 +371,7 @@
       if (callingItem) {
         if (callingItem == firstItem) {returnString = secondItem.getDisplayString();}
         else if (callingItem == secondItem) {returnString = firstItem.getDisplayString();}
-        else {Util.assert(false, "callingItem isn't part of this Entry");}
+        else {orp.util.assert(false, "callingItem isn't part of this Entry");}
       }
       else {
         returnString = 'connection between "' + firstItem.getDisplayString() + '" and "' + secondItem.getDisplayString() + '"';
@@ -415,17 +415,17 @@
       return true;
     case World.RETRIEVAL_FILTER_SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
       return false;
     default:
       // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
   }
 };

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/Item.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -156,14 +156,14 @@
  * @throws   Throws an Error if no user is logged in.
  */
 Item.prototype.addEntry = function(namedParameters) {
-  Util.assert(dojo.lang.isObject(namedParameters));
+  orp.util.assert(dojo.lang.isObject(namedParameters));
   var arg = Item.NamedParameters;
   var value = namedParameters[arg.value];
   var attribute = namedParameters[arg.attribute];
   var type = namedParameters[arg.type];
   
   // Check for typos in parameter names
-  Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type]));
+  orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type]));
   
   if (!attribute) {
     attribute = this.getWorld().getAttributeCalledUnfiled();
@@ -192,7 +192,7 @@
  * @throws   Throws an Error if no user is logged in.
  */
 Item.prototype.replaceEntry = function(namedParameters) {
-  Util.assert(dojo.lang.isObject(namedParameters));
+  orp.util.assert(dojo.lang.isObject(namedParameters));
   var arg = Item.NamedParameters;
   var value = namedParameters[arg.value];
   var attribute = namedParameters[arg.attribute];
@@ -200,9 +200,9 @@
   var previousEntry = namedParameters[arg.previousEntry];
 
   // Check for typos in parameter names
-  Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type, arg.previousEntry]));
+  orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type, arg.previousEntry]));
   
-  Util.assert(dojo.lang.isObject(previousEntry));
+  orp.util.assert(dojo.lang.isObject(previousEntry));
   if (!attribute) {
     attribute = previousEntry.getAttributeForItem(this);
   }
@@ -369,8 +369,8 @@
  *
  */
 Item.prototype.replaceEntryWithConnection = function(previousEntry, myAttribute, otherItem, otherAttribute) {
-  Util.assert(otherItem instanceof Item);
-  Util.assert(myAttribute instanceof Item);
+  orp.util.assert(otherItem instanceof Item);
+  orp.util.assert(myAttribute instanceof Item);
 
   // If we've just been asked to replace the string "Foo" with the string "Foo",
   // then don't even bother creating a new entry. 
@@ -378,10 +378,10 @@
     // var oldValue = previousEntry.getValue(this);
     var oldPairOfAttributes = previousEntry.getAttribute();
     var oldPairOfItems = previousEntry.getItem();
-    if (Util.isArray(oldPairOfAttributes)) {
-      Util.assert(Util.isArray(oldPairOfAttributes));
-      Util.assert(oldPairOfAttributes.length == 2);
-      Util.assert(oldPairOfItems.length == 2);
+    if (orp.util.isArray(oldPairOfAttributes)) {
+      orp.util.assert(orp.util.isArray(oldPairOfAttributes));
+      orp.util.assert(oldPairOfAttributes.length == 2);
+      orp.util.assert(oldPairOfItems.length == 2);
       if (((oldPairOfAttributes[0] == myAttribute) &&  (oldPairOfAttributes[1] == otherAttribute) &&
         oldPairOfItems[0] == this && oldPairOfItems[1] == otherItem) ||
         ((oldPairOfAttributes[1] == myAttribute) &&  (oldPairOfAttributes[0] == otherAttribute) &&
@@ -413,7 +413,7 @@
     if (oldItemOrPairOfItems instanceof Item) {
       oldItemOrPairOfItems._noteChanges(null);
     }
-    if (Util.isArray(oldItemOrPairOfItems)) {
+    if (orp.util.isArray(oldItemOrPairOfItems)) {
       oldItemOrPairOfItems[0]._noteChanges(null);
       oldItemOrPairOfItems[1]._noteChanges(null);
     }
@@ -464,7 +464,7 @@
  * @return   A list of entry objects.
  */
 Item.prototype.getEntriesForAttribute = function(attribute) {
-  Util.assert(attribute instanceof Item);
+  orp.util.assert(attribute instanceof Item);
   
   if (this._cachedEntriesKeyedByAttributeUuid !== null) {
     var listOfCachedEntries = this._cachedEntriesKeyedByAttributeUuid[attribute.getUuid()];
@@ -494,18 +494,18 @@
       break;
     case World.RETRIEVAL_FILTER_SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
       filteredListOfEntries = listOfEntriesForAttribute;
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
   }
   filteredListOfEntries.sort(ContentRecord.compareOrdinals);
@@ -640,7 +640,7 @@
  *
  */
 Item.prototype.getDisplayStringForEntry = function(entry) {
-  Util.assert(entry instanceof Entry);
+  orp.util.assert(entry instanceof Entry);
   return entry.getDisplayString(this);
 };
 
@@ -732,7 +732,7 @@
  * @return Boolean. True if this item has an attribute with the entry
  */
 Item.prototype.hasAttributeValue = function(attribute, value) {
-  Util.assert(attribute instanceof Item);
+  orp.util.assert(attribute instanceof Item);
   var entryList = this.getEntriesForAttribute(attribute);
 
   // look at all the entries this item's attribute is assigned to, 
@@ -755,7 +755,7 @@
  * @return   A boolean.  True if the item has been assigned to the category.
  */
 Item.prototype.isInCategory = function(category) {
-  Util.assert(category instanceof Item);
+  orp.util.assert(category instanceof Item);
 
   var categoryAttribute = this.getWorld().getAttributeCalledCategory();
   return this.hasAttributeValue(categoryAttribute, category);

Modified: trunk/source/model/ModelTest.js
===================================================================
--- trunk/source/model/ModelTest.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/ModelTest.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -199,11 +199,11 @@
   for (key in listOfAttributes) {
     item = listOfAttributes[key];
     listOfAssignedNames = item.getNameEntries();
-    assertTrue('Every axiomatic attribute has an array of names', Util.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic attribute has an array of names', orp.util.isArray(listOfAssignedNames));
     assertTrue('Every axiomatic attribute has one name assigned', listOfAssignedNames.length == 1);
     nameEntry = listOfAssignedNames[0];
     assertTrue('Every axiomatic attribute has a name which is an entry', (nameEntry instanceof Entry));
-    assertTrue('Every entry can be displayed as a string', Util.isString(nameEntry.getDisplayString()));
+    assertTrue('Every entry can be displayed as a string', orp.util.isString(nameEntry.getDisplayString()));
   }
   
   var listOfCategories = [];
@@ -212,11 +212,11 @@
   for (key in listOfCategories) {
     item = listOfCategories[key];
     listOfAssignedNames = item.getNameEntries();
-    assertTrue('Every axiomatic category has an array of names', Util.isArray(listOfAssignedNames));
+    assertTrue('Every axiomatic category has an array of names', orp.util.isArray(listOfAssignedNames));
     assertTrue('Every axiomatic category has one name assigned', listOfAssignedNames.length == 1);
     nameEntry = listOfAssignedNames[0];
     assertTrue('Every axiomatic category has a name which is entry', (nameEntry instanceof Entry));
-    assertTrue('Every entry can be displayed as a string', Util.isString(nameEntry.getDisplayString()));
+    assertTrue('Every entry can be displayed as a string', orp.util.isString(nameEntry.getDisplayString()));
   }
 }
 
@@ -251,12 +251,12 @@
   assertTrue('"R2D2" has not been replaced', !r2d2.hasBeenReplaced());
 
   listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
-  hasAll = Util.areObjectsInSet([luck, c3po], listOfCharacters);
+  hasAll = orp.util.areObjectsInSet([luck, c3po], listOfCharacters);
   assertTrue('"Star Wars" has characters: luck, c3po', hasAll);
   assertTrue('Exactly 2 characters in Star Wars', listOfCharacters.length == 2);
 
   listOfEntries = starWars.getEntries();
-  hasAll = Util.areObjectsInSet([luck, c3po, r2d2], listOfEntries);
+  hasAll = orp.util.areObjectsInSet([luck, c3po, r2d2], listOfEntries);
   assertTrue('"Star Wars" has entries: luck, c3po, r2d2', hasAll);  
   
   var ordinalA = starWars.getOrdinalNumberAtCreation();
@@ -273,7 +273,7 @@
   assertTrue('"Star Wars" was made by Jane', starWarsUserstamp == userJane);    
 
   listOfAttributes = starWars.getAttributes();
-  hasAll = Util.areObjectsInSet([nameAttribute, characterAttribute], listOfAttributes);
+  hasAll = orp.util.areObjectsInSet([nameAttribute, characterAttribute], listOfAttributes);
   assertTrue('"Star Wars" has both expected attributes', hasAll);
   
   worldRetrievalFilter = world.getRetrievalFilter();
@@ -286,11 +286,11 @@
   assertTrue('"Luck" is a entry in "Star Wars"', luck.getItem() == starWars);
 
   listOfEntries = starWars.getEntries();
-  hasAll = Util.areObjectsInSet([luke, c3po, r2d2], listOfEntries);
+  hasAll = orp.util.areObjectsInSet([luke, c3po, r2d2], listOfEntries);
   assertTrue('"Star Wars" has entries: luke, c3po, r2d2', hasAll);  
 
   listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
-  hasAll = Util.areObjectsInSet([luke, c3po], listOfCharacters);
+  hasAll = orp.util.areObjectsInSet([luke, c3po], listOfCharacters);
   assertTrue('"Star Wars" has characters: luke, c3po', hasAll);
   assertTrue('Exactly 2 characters in the star wars', listOfCharacters.length == 2);
 
@@ -309,8 +309,8 @@
   assertTrue("Can't replace a value with an identical value", failure === null);
 
   listOfCharacters = starWars.getEntriesForAttribute(characterAttribute);
-  var hasR2d2 = Util.isObjectInSet(r2d2, listOfCharacters);
-  hasAll = Util.areObjectsInSet([luke, c3po, r2d2], listOfCharacters);
+  var hasR2d2 = orp.util.isObjectInSet(r2d2, listOfCharacters);
+  hasAll = orp.util.areObjectsInSet([luke, c3po, r2d2], listOfCharacters);
   assertTrue('Chris sees R2D2 as a character', hasR2d2);
   assertTrue('Chris sees characters: luke, c3po, r2d2', hasAll);
   assertTrue('Chris sees 3 characters in "Star Wars"', listOfCharacters.length == 3);
@@ -323,8 +323,8 @@
   assertTrue('getDisplayName() returns the first name', (starWars.getDisplayName() == "Star Wars"));
   var listOfNames = theHobbit.getNameEntries();
   assertTrue('getContentData() returns a string', listOfNames[0].getValue() == "The Hobbit");
-  hasAll = Util.areObjectsInSet(listOfNames, listOfEntries);
-  hasAll = hasAll && Util.areObjectsInSet(listOfEntries, listOfNames);
+  hasAll = orp.util.areObjectsInSet(listOfNames, listOfEntries);
+  hasAll = hasAll && orp.util.areObjectsInSet(listOfEntries, listOfNames);
   assertTrue('getName() matches getEntriesForAttribute(attributeCalledName)', hasAll);
   
   world.logout();
@@ -363,7 +363,7 @@
   assertTrue('"The Hobbit" is in the category "Book"', isInCategory);
  
   var allBooks = world.getItemsInCategory(categoryCalledBook);
-  var hasAll = Util.areObjectsInSet([theHobbit, theWisdomOfCrowds, theTransparentSociety], allBooks);
+  var hasAll = orp.util.areObjectsInSet([theHobbit, theWisdomOfCrowds, theTransparentSociety], allBooks);
   assertTrue('All three books are in the category "Book"', hasAll);
   
   world.logout();
@@ -564,7 +564,7 @@
   var queryRunnerForFoods = world.newQueryRunner(queryForFoods);
   var listOfFoods = queryRunnerForFoods.getResultItems();
   
-  hasAll = Util.areObjectsInSet([apple, brownie, cupcake], listOfFoods);
+  hasAll = orp.util.areObjectsInSet([apple, brownie, cupcake], listOfFoods);
   assertTrue('Food query returns 3 foods', listOfFoods.length == 3);
   assertTrue('Food query returns all 3 foods', hasAll);
 
@@ -572,7 +572,7 @@
   assertTrue('Tokyo is now a food', tokyo.isInCategory(categoryCalledFood));
 
   listOfFoods = queryRunnerForFoods.getResultItems();
-  hasAll = Util.areObjectsInSet([apple, brownie, cupcake, tokyo], listOfFoods);
+  hasAll = orp.util.areObjectsInSet([apple, brownie, cupcake, tokyo], listOfFoods);
   assertTrue('Food query returns 4 foods', listOfFoods.length == 4);
   assertTrue('Food query returns all 4 foods', hasAll);
 
@@ -586,24 +586,24 @@
   var listOfCountries = queryRunnerForAsia.getResultItems();
   
   assertTrue('Asia query returns 2 countries', listOfCountries.length == 2);
-  hasAll = Util.areObjectsInSet([tokyo,beijing], listOfCountries);
+  hasAll = orp.util.areObjectsInSet([tokyo,beijing], listOfCountries);
   assertTrue('Asia query returns all 2 countries', hasAll);
   
   var northAmericaQuery = world.newQuery(attributeCalledContinent, "North America");
   var queryRunnerForNorthAmerica = world.newQueryRunner(northAmericaQuery);
   listOfCountries = queryRunnerForNorthAmerica.getResultItems();
   assertTrue('North America query returned only Seattle',
-  listOfCountries.length == 1 && Util.isObjectInSet(seattle, listOfCountries));
+  listOfCountries.length == 1 && orp.util.isObjectInSet(seattle, listOfCountries));
     
   seattle.addEntry({attribute:attributeCalledContinent, value:"Asia"});
   listOfCountries = queryRunnerForAsia.getResultItems();
   assertTrue('Asia query returns 3 countries', listOfCountries.length == 3);
-  hasAll = Util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
+  hasAll = orp.util.areObjectsInSet([tokyo,beijing,seattle], listOfCountries);
   assertTrue('Asia query returns all 3 countries', hasAll);
   
   world.setItemToBeIncludedInQueryResultList(beijing, northAmericaQuery);
   listOfCountries = queryRunnerForNorthAmerica.getResultItems();
-  assertTrue('Beijing is now in North America',Util.isObjectInSet(beijing, listOfCountries));
+  assertTrue('Beijing is now in North America',orp.util.isObjectInSet(beijing, listOfCountries));
   assertTrue('North America query returns 2 countries', listOfCountries.length == 2);
   world.setItemToBeIncludedInQueryResultList(seattle, northAmericaQuery);
   listOfCountries = queryRunnerForNorthAmerica.getResultItems();

Modified: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/QueryRunner.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -67,7 +67,7 @@
  * @param    observer    Optional. An object or method to be registered as an observer of the query. 
  */
 function QueryRunner(world, querySpec, observer) {
-  Util.assert(world instanceof World);
+  orp.util.assert(world instanceof World);
   
   this._world = world;
   this._querySpec = querySpec;
@@ -151,7 +151,7 @@
   var matchingAttribute = this.getMatchingAttribute();
   var listOfMatchingValues = this.getMatchingValues();
   if (matchingAttribute == QueryRunner.EXPLICIT_LIST_OF_ITEMS) {
-    return Util.isObjectInSet(item, listOfMatchingValues);
+    return orp.util.isObjectInSet(item, listOfMatchingValues);
   } else {
     for (var key in listOfMatchingValues) {
       var matchingValue = listOfMatchingValues[key];
@@ -187,7 +187,7 @@
  * @param    listOfChangeRecords    A list of the records that impacted the querySpec. 
  */
 QueryRunner.prototype.observedItemHasChanged = function(querySpec, listOfChangeRecords) {
-  Util.assert(querySpec == this._querySpec);
+  orp.util.assert(querySpec == this._querySpec);
   this._readQuerySpec();
   this._runQuery();
 };
@@ -236,7 +236,7 @@
       this._matchingAttribute = this.getWorld().getAttributeCalledCategory();
     }
     else {
-      Util.assert(listOfMatchingAttributeEntries.length == 1, 'There should only be one matching attribute on a Query Spec item.');
+      orp.util.assert(listOfMatchingAttributeEntries.length == 1, 'There should only be one matching attribute on a Query Spec item.');
       this._matchingAttribute = listOfMatchingAttributeEntries[0].getValue();
     }
 
@@ -255,7 +255,7 @@
   
   // Handle the case where we have an ad-hoc query 
   // that just has a list of items.
-  if (Util.isArray(this._querySpec)) {
+  if (orp.util.isArray(this._querySpec)) {
     var querySpecArray = this._querySpec;
     this._matchingAttribute = QueryRunner.EXPLICIT_LIST_OF_ITEMS;
     this._listOfMatchingValues = querySpecArray;
@@ -265,7 +265,7 @@
   
   // Handle the case where we have an ad-hoc query that
   // povides a matching attribute and matching values.
-  if (Util.isObject(this._querySpec)) {
+  if (orp.util.isObject(this._querySpec)) {
     var querySpecJson = this._querySpec;
     this._matchingAttribute = querySpecJson[QueryRunner.JSON_MEMBER_ATTRIBUTE];
     if (!this._matchingAttribute) {

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/Record.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -68,13 +68,13 @@
 Record.prototype._Record = function(world, uuid) {
   dojo.require("orp.util.TimeBasedUuid");
 
-  Util.assert(Util.isUuidValue(uuid));
-  if (Util.isString(uuid)) {
+  orp.util.assert(orp.util.isUuidValue(uuid));
+  if (orp.util.isString(uuid)) {
     var uuidString = uuid;
-    Util.assert(uuidString.length == 36);
+    orp.util.assert(uuidString.length == 36);
     uuid = new orp.util.TimeBasedUuid(uuidString);
   }
-  Util.assert(Util.isUuid(uuid));
+  orp.util.assert(orp.util.isUuid(uuid));
   
   this._world = world;
   this._uuid = uuid;

Modified: trunk/source/model/RepositoryWritingTest.js
===================================================================
--- trunk/source/model/RepositoryWritingTest.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/RepositoryWritingTest.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -46,7 +46,7 @@
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
 
   utilAssertReportedError = false;
-  Util.setErrorReportCallback(errorReporter)
+  orp.util.setErrorReportCallback(errorReporter)
 
   var isHttp = window.location.protocol == "http:";
   saver = isHttp? new HttpSaver(fileName, pathToTrunkDirectoryFromThisDirectory) 
@@ -152,19 +152,19 @@
 }
 
 function fileHasExpectedContents(expectedContents) {
-  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
   for (var i = 0; contents != expectedContents && i < 5; ++i) {
     waitASecond();
-    contents = Util.getStringContentsOfFileAtURL(fileUrl);
+    contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
   }
   return (contents == expectedContents);
 }
 
 function fileHasExpectedSubstring(expectedSubstring) {
-  var contents = Util.getStringContentsOfFileAtURL(fileUrl);
+  var contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
   for (var i = 0; contents.indexOf(expectedSubstring) == -1 && i < 5; ++i) {
     waitASecond();
-    contents = Util.getStringContentsOfFileAtURL(fileUrl);
+    contents = orp.util.getStringContentsOfFileAtURL(fileUrl);
   }
   return (contents.indexOf(expectedSubstring) != -1);
 }

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/StubVirtualServer.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -184,7 +184,7 @@
  * @return   A copy of the rawText string, with the special characters escaped. 
  */
 StubVirtualServer.prototype.encodeText = function(rawText) {
-  Util.assert(Util.isString(rawText));
+  orp.util.assert(orp.util.isString(rawText));
 
   var returnString = rawText;
   // Note: it's important that we do '&' first, otherwise we'll accidentally
@@ -218,7 +218,7 @@
  * @return   A copy of the encodedText string, with the escaped characters replaced by the original special characters. 
  */
 StubVirtualServer.prototype.decodeText = function(encodedText) {
-  Util.assert(Util.isString(encodedText));
+  orp.util.assert(orp.util.isString(encodedText));
 
   var returnString = encodedText;
   returnString = returnString.replace(new RegExp('&#13;','g'), "\r");
@@ -263,14 +263,14 @@
  */
 StubVirtualServer.prototype.endTransaction = function() {
   this._countOfNestedTransactions -= 1;
-  Util.assert(this._countOfNestedTransactions >= 0);
+  orp.util.assert(this._countOfNestedTransactions >= 0);
 
   if (this._countOfNestedTransactions === 0) {
     var listOfChangesMade = this._saveChangesToServer();
     this._currentTransaction = null;
     if (listOfChangesMade.length > 0) {
       // alert(listOfChangesMade.length + " changes made");
-      // Util.displayStatusBlurb(listOfChangesMade.length + " changes made");
+      // orp.util.displayStatusBlurb(listOfChangesMade.length + " changes made");
       this._world._notifyObserversOfChanges(listOfChangesMade);
     }
   }
@@ -476,7 +476,7 @@
   
   var md5Authentication = null;
   if (authentication) {
-    md5Authentication = Util.hex_md5(authentication);
+    md5Authentication = orp.util.hex_md5(authentication);
   }
   this._hashTableOfUserAuthenticationInfo[newUser.getUuid()] = md5Authentication;
 
@@ -533,10 +533,10 @@
   // Only one user can be logged in at once.  We consider it an error
   // if you try to log in a new user before logging out the old one.
   if (this._currentUser) {
-    Util.assert(false);
+    orp.util.assert(false);
   }
   
-  var isKnownUser = Util.isObjectInSet(user, this._listOfUsers);
+  var isKnownUser = orp.util.isObjectInSet(user, this._listOfUsers);
   if (!isKnownUser) {
     return false;
   }
@@ -548,7 +548,7 @@
   
   var md5hashOfPassword = null;
   if (password) {
-    md5hashOfPassword = Util.hex_md5(password);
+    md5hashOfPassword = orp.util.hex_md5(password);
   }
   var realAuthentication = this._getAuthenticationInfoForUser(user);
   var successfulAuthentication = ((realAuthentication == md5hashOfPassword) || !realAuthentication);
@@ -596,7 +596,7 @@
  * @return   The item identified by the given UUID.
  */
 StubVirtualServer.prototype.getItemFromUuid = function(uuid, observer) {
-  Util.assert(Util.isUuidValue(uuid));
+  orp.util.assert(orp.util.isUuidValue(uuid));
   
   var item = this._hashTableOfItemsKeyedByUuid[uuid];
   if (item && observer) {
@@ -656,7 +656,7 @@
       for (var innerKey in listOfEntriesForItemsInCategory) {
         var entry = listOfEntriesForItemsInCategory[innerKey];
         var itemInCategory = entry.getValue(category);
-        Util.addObjectToSet(itemInCategory, listOfQueryResultItems);
+        orp.util.addObjectToSet(itemInCategory, listOfQueryResultItems);
       }
     }
   } else {
@@ -684,8 +684,8 @@
  * @param    query    A query item. 
  */
 StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList = function(item, query) {
-  Util.assert(item instanceof Item);
-  Util.assert(query instanceof Item);
+  orp.util.assert(item instanceof Item);
+  orp.util.assert(query instanceof Item);
   
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
@@ -701,7 +701,7 @@
     matchingAttribute = attributeCalledCategory;
   }
   else {
-    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    orp.util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
 
@@ -729,7 +729,7 @@
  * @return   A list of items.
  */
 StubVirtualServer.prototype.getItemsInCategory = function(category) {
-  Util.assert(category instanceof Item);
+  orp.util.assert(category instanceof Item);
 
   var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
   var listOfEntries = category.getEntriesForAttribute(attributeCalledItemsInCategory);
@@ -853,18 +853,18 @@
  * @scope    private instance method
  */
 StubVirtualServer.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
-  var fileContentString = Util.getStringContentsOfFileAtURL(url);
-  Util.assert(Util.isString(fileContentString));
+  var fileContentString = orp.util.getStringContentsOfFileAtURL(url);
+  orp.util.assert(orp.util.isString(fileContentString));
   fileContentString += " ] }";
 
-  Util.assert(Util.isString(fileContentString));
+  orp.util.assert(orp.util.isString(fileContentString));
   var dehydratedRecords = null;
   eval("dehydratedRecords = " + fileContentString + ";");
-  Util.assert(Util.isObject(dehydratedRecords));
+  orp.util.assert(orp.util.isObject(dehydratedRecords));
   var recordFormat = dehydratedRecords[StubVirtualServer.JSON_MEMBER_FORMAT];
-  Util.assert(recordFormat == StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
+  orp.util.assert(recordFormat == StubVirtualServer.JSON_FORMAT_2005_JUNE_RECORDS);
   var listOfRecords = dehydratedRecords[StubVirtualServer.JSON_MEMBER_RECORDS];
-  Util.assert(Util.isArray(listOfRecords));
+  orp.util.assert(orp.util.isArray(listOfRecords));
   
   this._rehydrateRecords(listOfRecords);
 };
@@ -967,7 +967,7 @@
         if (retainFlagString == "false") {
           retainFlag = false;
         }
-        Util.assert(retainFlag !== null);
+        orp.util.assert(retainFlag !== null);
         contentRecordUuid = dehydratedVote[StubVirtualServer.JSON_MEMBER_RECORD];
         contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
         var vote = new Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
@@ -993,7 +993,7 @@
         }
  
         var dataTypeUuid = dehydratedEntry[StubVirtualServer.JSON_MEMBER_TYPE];
-        Util.assert(Util.isUuidValue(dataTypeUuid));
+        orp.util.assert(orp.util.isUuidValue(dataTypeUuid));
         var dataType = this.__getItemFromUuidOrBootstrapItem(dataTypeUuid);
         
         if (dataTypeUuid == World.UUID_FOR_TYPE_CONNECTION) {
@@ -1020,7 +1020,7 @@
           if (attributeUuid) {
             attribute = this.__getItemFromUuidOrBootstrapItem(attributeUuid);
           } else {
-            Util.assert(false); // the attributeUuid should always be there
+            orp.util.assert(false); // the attributeUuid should always be there
           }
           var rawData = dehydratedEntry[StubVirtualServer.JSON_MEMBER_VALUE];
           var finalData = null;
@@ -1039,10 +1039,10 @@
               // if (!finalData.isValid()) {
               //   alert(rawData + " " + finalData);
               // }
-              Util.assert(finalData.isValid());
+              orp.util.assert(finalData.isValid());
               break;
             default:
-              Util.assert(false, 'Unknown data type while _rehydrating()');
+              orp.util.assert(false, 'Unknown data type while _rehydrating()');
           }
           entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
         }

Modified: trunk/source/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/source/model/TestReorderingForSpecialCases.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/TestReorderingForSpecialCases.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -53,7 +53,7 @@
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
 
   utilAssertReportedError = false;
-  Util.setErrorReportCallback(errorReporter);
+  orp.util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
   var virtualServer = new StubVirtualServer(pathToTrunkDirectory);
 

Modified: trunk/source/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/TestReorderingForTypicalOrdinals.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -57,7 +57,7 @@
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
 
   utilAssertReportedError = false;
-  Util.setErrorReportCallback(errorReporter);
+  orp.util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
   var virtualServer = new StubVirtualServer(pathToTrunkDirectory);
   var realUuidGenerator = StubVirtualServer.prototype._generateUuid;

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/model/World.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -235,7 +235,7 @@
       if (itemOrPairOfItems instanceof Item) {
         listOfItems.push(itemOrPairOfItems); 
       }
-      if (Util.isArray(itemOrPairOfItems)) {
+      if (orp.util.isArray(itemOrPairOfItems)) {
         listOfItems.push(itemOrPairOfItems[0]);
         listOfItems.push(itemOrPairOfItems[1]);
       }
@@ -267,14 +267,14 @@
     var listOfObserversForItem = this._hashTableOfObserverListsKeyedByItemUuid[uuid];
     for (key in listOfObserversForItem) {
       observer = listOfObserversForItem[key];
-      if (Util.isFunction(observer)) {
+      if (orp.util.isFunction(observer)) {
         observer.call(null, item, listOfRecordsForItem);
       } else {
-        if (Util.isObject(observer)) {
+        if (orp.util.isObject(observer)) {
           observer.observedItemHasChanged(item, listOfRecordsForItem);
         } else {
           // We should never get here.  If we do, consider it an error.
-          Util.assert(false);
+          orp.util.assert(false);
         }
       }
     }
@@ -302,14 +302,14 @@
     if (listOfItemChangeReports) {
       for (key in setOfObservers) {
         observer = setOfObservers[key];
-        if (Util.isFunction(observer)) {
+        if (orp.util.isFunction(observer)) {
           observer.call(null, listBeingObserved, listOfItemChangeReports);
         } else {
-          if (Util.isObject(observer)) {
+          if (orp.util.isObject(observer)) {
             observer.observedListHasChanged(listBeingObserved, listOfItemChangeReports);
           } else {
             // We should never get here.  If we do, consider it an error.
-            Util.assert(false);
+            orp.util.assert(false);
           }
         }
       }
@@ -324,7 +324,7 @@
     var reportChange = false;
     for (uuid in hashTableOfNewlyCreatedRecordsKeyedByItemUuid) {
       item = this.getItemFromUuid(uuid);
-      if (Util.isObjectInSet(item, oldListOfResultItems)) {
+      if (orp.util.isObjectInSet(item, oldListOfResultItems)) {
         reportChange = true;
         break;
       } else {
@@ -365,7 +365,7 @@
  * @param    filter    A string constant representing one of the three supported retrieval filters.
  */
 World.prototype.setRetrievalFilter = function(filter) {
-  Util.assert(filter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS ||
+  orp.util.assert(filter == World.RETRIEVAL_FILTER_LAST_EDIT_WINS ||
               filter == World.RETRIEVAL_FILTER_SINGLE_USER ||
               filter == World.RETRIEVAL_FILTER_DEMOCRATIC ||
               filter == World.RETRIEVAL_FILTER_UNABRIDGED);
@@ -396,18 +396,18 @@
       break;
     case World.RETRIEVAL_FILTER_SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
     case World.RETRIEVAL_FILTER_UNABRIDGED:
       filteredList = unfilteredList;
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      Util.assert(false);
+      orp.util.assert(false);
       break;
   }
 
@@ -705,7 +705,7 @@
  * @return   A newly created item representing a query.
  */
 World.prototype.newQuery = function(matchingAttribute, matchingEntryOrListOfEntries) {
-  Util.assert(matchingAttribute instanceof Item);
+  orp.util.assert(matchingAttribute instanceof Item);
   this.beginTransaction();
   var item = this._virtualServer.newItem("A query");
   var categoryCalledQuery = this.getCategoryCalledQuery();
@@ -717,7 +717,7 @@
   // item.addEntryForAttribute(attributeCalledQueryMatchingAttribute, matchingAttribute);
   item.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:matchingAttribute});
   if (matchingEntryOrListOfEntries) {
-    if (Util.isArray(matchingEntryOrListOfEntries)) {
+    if (orp.util.isArray(matchingEntryOrListOfEntries)) {
       for (var key in matchingEntryOrListOfEntries) {
         matchingEntry = matchingEntryOrListOfEntries[key];
         // item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
@@ -771,9 +771,9 @@
  * @param    queryRunner    A QueryRunner object. 
  */
 World.prototype._registerQueryRunner = function(queryRunner) {
-  Util.assert(queryRunner instanceof QueryRunner);
-  var success = Util.addObjectToSet(queryRunner, this._registeredQueryRunners);
-  Util.assert(success);
+  orp.util.assert(queryRunner instanceof QueryRunner);
+  var success = orp.util.addObjectToSet(queryRunner, this._registeredQueryRunners);
+  orp.util.assert(success);
 };
 
 
@@ -785,9 +785,9 @@
  * @param    queryRunner    A previously registered QueryRunner object. 
  */
 World.prototype._unregisterQueryRunner = function(queryRunner) {
-  Util.assert(queryRunner instanceof QueryRunner);
-  var success = Util.removeObjectFromSet(queryRunner, this._registeredQueryRunners);
-  Util.assert(success);
+  orp.util.assert(queryRunner instanceof QueryRunner);
+  var success = orp.util.removeObjectFromSet(queryRunner, this._registeredQueryRunners);
+  orp.util.assert(success);
 };
 
 
@@ -982,7 +982,7 @@
     var listOfItems = this.getItemsInCategory(category);
     for (var keyToo in listOfItems) {
       var item = listOfItems[keyToo];
-      Util.addObjectToSet(item, listOfSuggestedItems);
+      orp.util.addObjectToSet(item, listOfSuggestedItems);
     }
   }
   this.__addListObserver(listOfSuggestedItems, observer);
@@ -1022,7 +1022,7 @@
     if (tuple[World.__TUPLE_KEY_LIST] == listOfItems) {
       weNeedToMakeANewTupleForThisList = false;
       var setOfObservers = tuple[World.__TUPLE_KEY_OBSERVERS];
-      observerWasAdded = Util.addObjectToSet(observer, setOfObservers);
+      observerWasAdded = orp.util.addObjectToSet(observer, setOfObservers);
     }
   }
   if (weNeedToMakeANewTupleForThisList) {
@@ -1051,7 +1051,7 @@
     var tuple = listOfTuples[key];
     if (tuple[World.__TUPLE_KEY_LIST] == listOfItems) {
       var setOfObservers = tuple[World.__TUPLE_KEY_OBSERVERS];
-      observerWasRemoved = Util.removeObjectFromSet(observer, setOfObservers);
+      observerWasRemoved = orp.util.removeObjectFromSet(observer, setOfObservers);
     }
   }
   return observerWasRemoved;
@@ -1072,7 +1072,7 @@
     observerList = [];
     this._hashTableOfObserverListsKeyedByItemUuid[item.getUuid()] = observerList;
   }
-  var observerWasAdded = Util.addObjectToSet(observer, observerList);
+  var observerWasAdded = orp.util.addObjectToSet(observer, observerList);
   return observerWasAdded;
 };
 
@@ -1089,7 +1089,7 @@
   var observerWasRemoved = false;
   var observerList = this._hashTableOfObserverListsKeyedByItemUuid[item.getUuid()];
   if (observerList) {
-    observerWasRemoved = Util.removeObjectFromSet(observer, observerList);
+    observerWasRemoved = orp.util.removeObjectFromSet(observer, observerList);
   } 
   return observerWasRemoved;
 };

Modified: trunk/source/util/CsvParser.js
===================================================================
--- trunk/source/util/CsvParser.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/CsvParser.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -34,7 +34,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.util.CsvParser");
 dojo.require("dojo.lang.*");
-// dojo.require("orp.util.Util");
+dojo.require("orp.util.Util");
 
 
 // -------------------------------------------------------------------
@@ -78,7 +78,7 @@
  * @return   Returns an array containing sub-arrays containing strings.
  */
 orp.util.CsvParser.prototype.getStringValuesFromCsvData = function(csvData) {
-  Util.assert(dojo.lang.isString(csvData));
+  orp.util.assert(dojo.lang.isString(csvData));
   
   var lineEndingCharacters = new RegExp("\r\n|\n|\r");
   var leadingWhiteSpaceCharacters = new RegExp("^\\s+",'g');

Modified: trunk/source/util/DateValue.js
===================================================================
--- trunk/source/util/DateValue.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/DateValue.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -34,6 +34,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.util.DateValue");
 dojo.require("dojo.lang.*");
+dojo.require("orp.util.Util");
 
 
 // -------------------------------------------------------------------
@@ -78,7 +79,7 @@
   // Create a conventional JavaScript Date object.
   switch (argumentType) {
     case STRING:
-      var evalStr = Util.trimString(year).toLowerCase();
+      var evalStr = orp.util.trimString(year).toLowerCase();
       if (evalStr == 'today') {
         date = new Date(Math.floor((Date.now()-DateValue.TIMEZONE_OFFSET)/DateValue.MILLISECS_IN_A_DAY) *
           DateValue.MILLISECS_IN_A_DAY + DateValue.TIMEZONE_OFFSET);
@@ -172,9 +173,9 @@
             var matchArray = year.match(regExpr);
             var monthIndex;
             if (matchArray) {
-              monthIndex = Util.getArrayIndex(DateValue.ARRAY_OF_MONTH_SHORT_NAMES,matchArray[1]);
+              monthIndex = orp.util.getArrayIndex(DateValue.ARRAY_OF_MONTH_SHORT_NAMES,matchArray[1]);
               if (monthIndex == -1) {
-                monthIndex = Util.getArrayIndex(DateValue.ARRAY_OF_MONTH_NAMES,matchArray[1]);
+                monthIndex = orp.util.getArrayIndex(DateValue.ARRAY_OF_MONTH_NAMES,matchArray[1]);
               }
             }
             else {

Modified: trunk/source/util/LintTool.js
===================================================================
--- trunk/source/util/LintTool.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/LintTool.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -34,6 +34,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.util.LintTool");
 dojo.require("dojo.lang.*");
+dojo.require("orp.util.Util");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -140,7 +141,7 @@
  * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
  */
 orp.util.LintTool.getErrorReportForCodeAtUrl = function(url) {
-  var fileContents = Util.getStringContentsOfFileAtURL(url);
+  var fileContents = orp.util.getStringContentsOfFileAtURL(url);
   return orp.util.LintTool.getErrorReportForCodeInString(fileContents);
 };
 
@@ -155,9 +156,9 @@
  * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
  */
 orp.util.LintTool.getErrorReportFromListOfFilesnames = function(listOfFilenames, path) {
-  Util.assert(Util.isArray(listOfFilenames));
+  orp.util.assert(orp.util.isArray(listOfFilenames));
   if (path) {
-    Util.assert(dojo.lang.isString(path));
+    orp.util.assert(dojo.lang.isString(path));
   } else {
     path = "";
   }

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/RandomUuid.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -35,8 +35,8 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.util.RandomUuid");
 dojo.require("orp.util.Uuid");
+dojo.require("orp.util.Util");
 
-
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
 /*global Util  */
@@ -75,18 +75,18 @@
     } else {
       if (dojo.lang.isObject(namedParameters)) {
         uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-        Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
+        orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
       } else {
-        Util.assert(false);
+        orp.util.assert(false);
       }
     }
-    Util.assert(dojo.lang.isString(uuidString));
-    Util.assert(uuidString.length == 36);
+    orp.util.assert(dojo.lang.isString(uuidString));
+    orp.util.assert(uuidString.length == 36);
     this._uuidString = uuidString;
   } else {
     this._uuidString = this._generateUuidString();
   }
-  Util.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
+  orp.util.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
 };
 
 dj_inherits(orp.util.RandomUuid, orp.util.Uuid);  // makes RandomUuid be a subclass of Uuid

Deleted: trunk/source/util/TestSuite.html
===================================================================
--- trunk/source/util/TestSuite.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/TestSuite.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -1,95 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Util Test Suite</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript">
-      function suite() {
-        var testSuite = new window.top.jsUnitTestSuite();
-        testSuite.addTestSuite(utilTestSuite());
-        return testSuite;
-      }
-      
-      function utilTestSuite() {
-        var testSuite = new window.top.jsUnitTestSuite();
-        testSuite.addTestPage("../../../source/util/UtilTest.html");
-        return testSuite;
-      }
-    </script>
-  </head>
-  
-  <body>
-    <h1>Util Test Suite</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>If you're looking at this page across an "http://" connection, rather
-    than having loaded it as a "file:///", then you may be able to run the
-    unit tests. The web server that served you this page may also have a
-    JsUnit testRunner available. If so, you should be able to run these unit
-    tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>You can also run these unit tests on your local computer. To do that you 
-    first need to download <a href="http://www.edwardh.com/jsunit/" 
-    rel="external">JsUnit</a>.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -36,6 +36,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.util.TimeBasedUuid");
 dojo.require("orp.util.Uuid");
+dojo.require("orp.util.Util");
 
 
 // -------------------------------------------------------------------
@@ -84,7 +85,7 @@
   if (namedParameters) {
     if (dojo.lang.isString(namedParameters)) {
       uuidString = namedParameters;
-      Util.assert(uuidString.length == 36);
+      orp.util.assert(uuidString.length == 36);
       this._uuidString = uuidString;
     } else {
       if (dojo.lang.isObject(namedParameters)) {
@@ -93,34 +94,34 @@
         var pseudoNode = namedParameters["pseudoNode"];
         var hardwareNode = namedParameters["hardwareNode"];
         var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
-        Util.assert(atLeastOneParameter);
-        Util.assert(Util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
+        orp.util.assert(atLeastOneParameter);
+        orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
         if (uuidString) {
-          Util.assert(!node && !pseudoNode && !hardwareNode);
-          Util.assert(uuidString.length == 36);
+          orp.util.assert(!node && !pseudoNode && !hardwareNode);
+          orp.util.assert(uuidString.length == 36);
           this._uuidString = uuidString;
         }
         if (node || pseudoNode || hardwareNode) {
-          Util.assert((node || pseudoNode).length == 12);
+          orp.util.assert((node || pseudoNode).length == 12);
           var firstCharacter = (node || pseudoNode).charAt(0);
           var firstDigit = parseInt(firstCharacter, orp.util.Uuid.HEX_RADIX);
           if (hardwareNode) { 
-            Util.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
+            orp.util.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
           }
           if (pseudoNode) { 
-            Util.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
+            orp.util.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
           }
           this._uuidString = this._generateUuidString(node || pseudoNode || hardwareNode);
         }
       } else {
-        Util.assert(false);
+        orp.util.assert(false);
       }
     }
   } else {
     this._uuidString = this._generateUuidString();
   }
     
-  Util.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
+  orp.util.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
 };
 
 dj_inherits(orp.util.TimeBasedUuid, orp.util.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
@@ -212,9 +213,9 @@
   var Uuid          = orp.util.Uuid;
   var TimeBasedUuid = orp.util.TimeBasedUuid;
   
-  Util.assert(!pseudoNode || Util.isString(pseudoNode));  
+  orp.util.assert(!pseudoNode || orp.util.isString(pseudoNode));  
   if (pseudoNode) {
-    Util.assert(pseudoNode.length == 12);  
+    orp.util.assert(pseudoNode.length == 12);  
   } else {
     var pseudoNodeIndicatorBit = 0x8000;
     var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
@@ -365,7 +366,7 @@
   
   var returnString = hexTimeHigh + hexTimeMid + hexTimeLow;
   
-  Util.assert(returnString.length == 15);
+  orp.util.assert(returnString.length == 15);
   return returnString;
 };
 
@@ -385,7 +386,7 @@
   arrayA[2] &= 0xFFFF;
   arrayA[0] += arrayA[1] >>> 16;
   arrayA[1] &= 0xFFFF;
-  Util.assert((arrayA[0] >>> 16) === 0);
+  orp.util.assert((arrayA[0] >>> 16) === 0);
 };
 
 
@@ -424,10 +425,10 @@
  * @return   An array with 4 elements, each of which is a 16-bit number.
  */
 orp.util.TimeBasedUuid._addTwo64bitArrays = function(arrayA, arrayB) {
-  Util.assert(Util.isArray(arrayA));
-  Util.assert(arrayA.length == 4);
-  Util.assert(Util.isArray(arrayB));
-  Util.assert(arrayB.length == 4);
+  orp.util.assert(orp.util.isArray(arrayA));
+  orp.util.assert(arrayA.length == 4);
+  orp.util.assert(orp.util.isArray(arrayB));
+  orp.util.assert(arrayB.length == 4);
   var result = new Array(0, 0, 0, 0);
   result[3] = arrayA[3] + arrayB[3];
   result[2] = arrayA[2] + arrayB[2];
@@ -451,10 +452,10 @@
 orp.util.TimeBasedUuid._multiplyTwo64bitArrays = function(arrayA, arrayB) {
   var TimeBasedUuid = orp.util.TimeBasedUuid;
 
-  Util.assert(Util.isArray(arrayA));
-  Util.assert(arrayA.length == 4);
-  Util.assert(Util.isArray(arrayB));
-  Util.assert(arrayB.length == 4);
+  orp.util.assert(orp.util.isArray(arrayA));
+  orp.util.assert(arrayA.length == 4);
+  orp.util.assert(orp.util.isArray(arrayB));
+  orp.util.assert(arrayB.length == 4);
   var overflow = false;
   if (arrayA[0] * arrayB[0] !== 0) { overflow = true; }
   if (arrayA[0] * arrayB[1] !== 0) { overflow = true; }
@@ -462,7 +463,7 @@
   if (arrayA[1] * arrayB[0] !== 0) { overflow = true; }
   if (arrayA[1] * arrayB[1] !== 0) { overflow = true; }
   if (arrayA[2] * arrayB[0] !== 0) { overflow = true; }
-  Util.assert(!overflow);
+  orp.util.assert(!overflow);
   
   var result = new Array(0, 0, 0, 0);
   result[0] += arrayA[0] * arrayB[3];
@@ -494,7 +495,7 @@
  * For example:
  * <pre>
  *   result = TimeBasedUuid._padWithLeadingZeros("abc", 6);
- *   Util.assert(result == "000abc");
+ *   orp.util.assert(result == "000abc");
  * </pre>
  * 
  * @scope    private class method

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/Util.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -30,7 +30,8 @@
  liability, or tort (including negligence), arising in any way out of or in 
  connection with the use or distribution of the work.
 *****************************************************************************/
- 
+
+dojo.provide("orp.util.Util");
 // dojo.require("orp.util.Uuid");
 
 // -------------------------------------------------------------------
@@ -53,27 +54,29 @@
  * @scope    public instance constructor
  * @syntax   DO NOT CALL THIS CONSTRUCTOR
  */
+ /*
 function Util() {
   throw new Error("Util is a static class. You can't create instances of it.");
 }
+*/
 
-
 // -------------------------------------------------------------------
-// Util public class constants
+// Public class constants
 // -------------------------------------------------------------------
-Util.ASCII_VALUE_FOR_RETURN = 13;
-Util.ASCII_VALUE_FOR_TAB = 9;
-Util.ASCII_VALUE_FOR_ESCAPE = 27;
+orp.util.ASCII = {
+  RETURN: 13,
+  TAB: 9,
+  ESCAPE: 27,
+  LEFT_ARROW: 37,  // 123
+  UP_ARROW: 38,    // 126
+  RIGHT_ARROW: 39, // 124
+  DOWN_ARROW: 40,  // 125
+  BACKSPACE: 8,
+DELETE: 46 };
 // &#37; = %
 // &#38; = &
 // &#39; = '
 // &#40; = (
-Util.ASCII_VALUE_FOR_LEFT_ARROW = 37;  // 123
-Util.ASCII_VALUE_FOR_UP_ARROW = 38;    // 126
-Util.ASCII_VALUE_FOR_RIGHT_ARROW = 39; // 124
-Util.ASCII_VALUE_FOR_DOWN_ARROW = 40;  // 125
-Util.KEYCODE_FOR_BACKSPACE = 8;
-Util.KEYCODE_FOR_DELETE = 46;
 
 
 
@@ -87,8 +90,8 @@
  * @scope    public class method
  * @param    errorReporterFunction    A function which takes a single string argument. 
  */
-Util.setErrorReportCallback = function(errorReporterFunction) {
-  Util.ourErrorReporter = errorReporterFunction;
+orp.util.setErrorReportCallback = function(errorReporterFunction) {
+  orp.util.ourErrorReporter = errorReporterFunction;
 };
 
 
@@ -98,10 +101,10 @@
  * @scope    public class method
  * @param    inText    The error message to be reported. 
  */
-Util.defaultErrorReporter = function(text) {
+orp.util.defaultErrorReporter = function(text) {
   window.alert(text);
 };
-Util.ourErrorReporter = Util.defaultErrorReporter;
+orp.util.ourErrorReporter = orp.util.defaultErrorReporter;
 
  
  /**
@@ -112,8 +115,8 @@
  * @param    url    A string that gives the name of the file where the error was found.
  * @param    line    The line number where the error was found.
  */
-Util.handleError = function(message, url, line) {
-  Util.ourErrorReporter("Util.handleError()\n" + message + "\nline: " + line + "\nURL: " + url);
+orp.util.handleError = function(message, url, line) {
+  orp.util.ourErrorReporter("orp.util.handleError()\n" + message + "\nline: " + line + "\nURL: " + url);
 };
 
 
@@ -129,8 +132,8 @@
  * @param    booleanValue    A boolean value, which needs to be true for the assertion to succeed. 
  * @param    message    Optional. A string describing the assertion.
  */
-Util.assert = function(booleanValue, message) {
-  if (Util.isBoolean(booleanValue)) {
+orp.util.assert = function(booleanValue, message) {
+  if (orp.util.isBoolean(booleanValue)) {
     if (!booleanValue) {    
       var exception = new Error();  // create an exception, just to get a stack trace
       var stackString = exception.stack;
@@ -146,10 +149,10 @@
       }
       stackString = stackList.join("\n");
 
-      Util.ourErrorReporter("An assert statement failed with message: \n" + message + " \nThe method Util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
+      orp.util.ourErrorReporter("An assert statement failed with message: \n" + message + " \nThe method orp.util.assert() was called with a 'false' value.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
     }
   } else {
-    Util.ourErrorReporter("An assert statement went sour.\nThe method Util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
+    orp.util.ourErrorReporter("An assert statement went sour.\nThe method orp.util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
   }
 };
 
@@ -160,8 +163,8 @@
  * @scope    public class method
  * @param    statusReporterFunction    A function which takes a single string argument. 
  */
-Util.setStatusReporter = function(statusReporterFunction) {
-  Util.ourStatusReporter = statusReporterFunction;
+orp.util.setStatusReporter = function(statusReporterFunction) {
+  orp.util.ourStatusReporter = statusReporterFunction;
 };
 
 
@@ -171,8 +174,8 @@
  * @scope    public class method
  * @param    message    A string with a status message.
  */
-Util.displayStatusBlurb = function(message) {
-  Util.ourStatusReporter(message);
+orp.util.displayStatusBlurb = function(message) {
+  orp.util.ourStatusReporter(message);
 };
 
 
@@ -182,10 +185,10 @@
  * @scope    public class method
  * @param    text    The status message to be reported. 
  */
-Util.defaultStatusReporter = function(text) {
+orp.util.defaultStatusReporter = function(text) {
   // do nothing!
 };
-Util.ourStatusReporter = Util.defaultStatusReporter;
+orp.util.ourStatusReporter = orp.util.defaultStatusReporter;
 
 
 // -------------------------------------------------------------------
@@ -199,7 +202,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a function.
  */
-Util.isFunction = function(value) {
+orp.util.isFunction = function(value) {
   return ((typeof value) == "function");
 };
 
@@ -211,7 +214,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a string.
  */
-Util.isString = function(value) {
+orp.util.isString = function(value) {
   return ((typeof value) == "string");
 };
 
@@ -223,7 +226,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a number.
  */
-Util.isNumber = function(value) {
+orp.util.isNumber = function(value) {
   return (((typeof value) == "number") && isFinite(value));
 };
 
@@ -236,12 +239,12 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a number or a string that represents a number.
  */
-Util.isNumeric = function(value) {
-  var isNumber = Util.isNumber(value);
+orp.util.isNumeric = function(value) {
+  var isNumber = orp.util.isNumber(value);
   if (isNumber) {
     return true;
   }
-  var isNumeric = Util.isString(value) && Util.isNumber(parseInt(value));
+  var isNumeric = orp.util.isString(value) && orp.util.isNumber(parseInt(value));
   return isNumeric;
 };
 
@@ -253,7 +256,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a boolean.
  */
-Util.isBoolean = function(value) {
+orp.util.isBoolean = function(value) {
   return ((typeof value) == "boolean");
 };
 
@@ -265,7 +268,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is an object.
  */
-Util.isObject = function(value) {
+orp.util.isObject = function(value) {
   return (value && ((typeof value) == "object"));
 };
 
@@ -277,7 +280,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a Date.
  */
-Util.isDate = function(value) {
+orp.util.isDate = function(value) {
   return (value instanceof Date);
 };
 
@@ -289,7 +292,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if value is a UUID object.
  */
-Util.isUuid = function(value) {
+orp.util.isUuid = function(value) {
   // return (value instanceof orp.util.Uuid);
   return true; // PENDING: FIXME.
 };
@@ -304,8 +307,8 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if value is a UUID.
  */
-Util.isUuidValue = function(value) {
-  if (Util.isUuid(value)) {
+orp.util.isUuidValue = function(value) {
+  if (orp.util.isUuid(value)) {
     return true;
   }
   if ((typeof value) == "string") {
@@ -325,7 +328,7 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is an array.
  */
-Util.isArray = function(value) {
+orp.util.isArray = function(value) {
   if (!value) {
     return false;
   }
@@ -340,12 +343,12 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a hash table.
  */
-Util.isHashTable = function(value) {
+orp.util.isHashTable = function(value) {
   return (value && ((typeof value) == "object"));  // PENDING: we should be more restrictive!
 };
 
 
-Util.isEmpty = function(object) {
+orp.util.isEmpty = function(object) {
   for (var key in object) {
     return false;
   }
@@ -353,27 +356,27 @@
 };
 
 
-Util.hasProperty = function(object, property) {
+orp.util.hasProperty = function(object, property) {
   return (object[property] !== undefined);
 };
 
-Util.hasProperties = function(object, properties) {
+orp.util.hasProperties = function(object, properties) {
   for (var i in properties) {
     if (object[properties[i]] === undefined) { return false; }
   }
   return true;
 };
 
-Util.hasNoUnexpectedProperties = function(object, expectedProperties) {
+orp.util.hasNoUnexpectedProperties = function(object, expectedProperties) {
   for (var key in object) {
-    if (!Util.isObjectInSet(key, expectedProperties)) { return false; }
+    if (!orp.util.isObjectInSet(key, expectedProperties)) { return false; }
   }
   return true;
 };
   
-Util.hasExactlyTheseProperties = function(object, properties) {
-  if (!Util.hasProperties(object, properties)) { return false; }
-  if (!Util.hasNoUnexpectedProperties(object, properties)) { return false; }
+orp.util.hasExactlyTheseProperties = function(object, properties) {
+  if (!orp.util.hasProperties(object, properties)) { return false; }
+  if (!orp.util.hasNoUnexpectedProperties(object, properties)) { return false; }
   return true;
 };
 
@@ -390,7 +393,7 @@
  * @param    value    The array element to find the position of. 
  * @return   Returns a number between 0 and array.length, or -1 if the element was not in the array.
  */
-Util.getArrayIndex = function(array, value) {
+orp.util.getArrayIndex = function(array, value) {
   for (var i=0; i<array.length; ++i) {
     if (array[i] == value) {
       return i;
@@ -412,8 +415,8 @@
  * @param    set    The Array to look for the object in. 
  * @return   Returns true if the object was found in the set.
  */
-Util.isObjectInSet = function(object, set) {
-  Util.assert(Util.isArray(set));
+orp.util.isObjectInSet = function(object, set) {
+  orp.util.assert(orp.util.isArray(set));
   
   for (var key in set) {
     if (set[key] == object) {
@@ -432,13 +435,13 @@
  * @param    set    The Array to look for the objects in. 
  * @return   Returns true if each of the objects was found in the set.
  */
-Util.areObjectsInSet = function(array, set) {
-  Util.assert(Util.isArray(array));
-  Util.assert(Util.isArray(set));
+orp.util.areObjectsInSet = function(array, set) {
+  orp.util.assert(orp.util.isArray(array));
+  orp.util.assert(orp.util.isArray(set));
   
   for (var key in array) {
     var object = array[key];
-    var objectIsInSet = Util.isObjectInSet(object, set);
+    var objectIsInSet = orp.util.isObjectInSet(object, set);
     if (!objectIsInSet) {
       return false;
     }
@@ -455,8 +458,8 @@
  * @param    set    The Array that the object should be removed from. 
  * @return   Returns true if the object was removed from the array.
  */
-Util.removeObjectFromSet = function(object, set) {
-  Util.assert(Util.isArray(set));
+orp.util.removeObjectFromSet = function(object, set) {
+  orp.util.assert(orp.util.isArray(set));
   
   if (!object) {
     return false;
@@ -480,13 +483,13 @@
  * @param    set    The Array that the object should be added to. 
  * @return   Returns true if the object was added to the array.
  */
-Util.addObjectToSet = function(object, set) {
-  Util.assert(Util.isArray(set));
+orp.util.addObjectToSet = function(object, set) {
+  orp.util.assert(orp.util.isArray(set));
 
   if (!object) {
     return false;
   }
-  if (Util.isObjectInSet(object, set)) {
+  if (orp.util.isObjectInSet(object, set)) {
     return false;
   }
   set.push(object);
@@ -501,8 +504,8 @@
  * @param    hashTable   A hashTable containing values.
  * @return   The number of values in inHashTable.
  */
-Util.lengthOfHashTable = function(hashTable) {
-  Util.assert(Util.isHashTable(hashTable));
+orp.util.lengthOfHashTable = function(hashTable) {
+  orp.util.assert(orp.util.isHashTable(hashTable));
   var count = 0;
   for (var key in hashTable) {
     count += 1;
@@ -519,8 +522,8 @@
  * @param    hashTable   A hashTable containing values.
  * @return   An array containing the values that are in inHashTable.
  */
-Util.hashTableValues = function(hashTable) {
-  Util.assert(Util.isHashTable(hashTable));
+orp.util.hashTableValues = function(hashTable) {
+  orp.util.assert(orp.util.isHashTable(hashTable));
   var returnArray = [];
   for (var key in hashTable) {
     returnArray.push(hashTable[key]);
@@ -528,26 +531,16 @@
   return returnArray;
 };
 
-Util.trimString = function(str) {
-   return str.replace(/^\s*|\s*$/g,"");
+orp.util.trimString = function(str) {
+  return str.replace(/^\s*|\s*$/g,"");
 };
 
 
 // -------------------------------------------------------------------
-// Methods that operate on Dates
-// -------------------------------------------------------------------
-
-// Util.getStringMonthDayYear = function(date) {
-//   var returnString = Util.ABBREV_MONTHS_ARRAY[date.getMonth()] + ' ' + date.getDate() + ', ' + date.getFullYear();
-//   return returnString;
-// };
-
-
-// -------------------------------------------------------------------
 // Methods for doing encryption
 // -------------------------------------------------------------------
 
-Util.hex_md5 = function(string) {
+orp.util.hex_md5 = function(string) {
   // Calls the hex_md5() function in .../trunk/third_party/md5/md5.js
   return hex_md5(string);
 };
@@ -568,7 +561,7 @@
  * @param    eventObject    An event object. 
  * @return   An HTML element.
  */
-Util.getTargetFromEvent = function(eventObject) {
+orp.util.getTargetFromEvent = function(eventObject) {
   var target = null;
   if (eventObject.target) {
     target = eventObject.target;
@@ -593,7 +586,7 @@
  * @param callback    The function to call when the event happens.
  * @param captures    True if the event should be captured by this function.
  */
-Util.addEventListener = function(element, eventType, callback, captures) {
+orp.util.addEventListener = function(element, eventType, callback, captures) {
   if (element.addEventListener) {
     // for DOM Level 2 browsers, like Firefox
     element.addEventListener(eventType, callback, captures);
@@ -641,7 +634,7 @@
  * @param    url    A string with the URL of a file containing JavaScript code. 
  * @return   A string containing the contents of the file.
  */
-Util.getStringContentsOfFileAtURL = function(url) {
+orp.util.getStringContentsOfFileAtURL = function(url) {
   var anXMLHttpRequestObject = new window.XMLHttpRequest();
   anXMLHttpRequestObject.open("GET", url, false);
   anXMLHttpRequestObject.send(null);
@@ -661,7 +654,7 @@
  * 
  * @scope    public class method
  */
-Util.setTargetsForExternalLinks = function() {
+orp.util.setTargetsForExternalLinks = function() {
   if (!window.document.getElementsByTagName) {
     return;
   }
@@ -682,7 +675,7 @@
  * @scope    public class method
  * @return   An HTML "img" element.
  */
-Util.createImageElement = function(imageFileName) {
+orp.util.createImageElement = function(imageFileName) {
   var imagesDirectory = "images/"; // PENDING: this shouldn't be hard-coded in Util
   var imageElement = document.createElement("img");
   imageElement.src = imagesDirectory + imageFileName;
@@ -698,7 +691,7 @@
  * @param    htmlElement    The HTML element that we want the left offest of. 
  * @return   An integer value equal to the number of pixels from the left of the page to htmlElement.
  */
-Util.getOffsetLeftFromElement = function(htmlElement) {
+orp.util.getOffsetLeftFromElement = function(htmlElement) {
   var cumulativeOffset = 0;
   if (htmlElement.offsetParent) {
     while (htmlElement.offsetParent) {
@@ -722,7 +715,7 @@
  * @param    htmlElement    The HTML element that we want the top offest of. 
  * @return   An integer value equal to the number of pixels from the top of the page to htmlElement.
  */
-Util.getOffsetTopFromElement = function(htmlElement) {
+orp.util.getOffsetTopFromElement = function(htmlElement) {
   var cumulativeOffset = 0;
   if (htmlElement.offsetParent) {
     while (htmlElement.offsetParent) {
@@ -744,7 +737,7 @@
  * @param htmlElement The HTML element to check on
  * @param aClass The String representing class name to check on
  */
-Util.css_hasClass = function(htmlElement, aClass) {
+orp.util.css_hasClass = function(htmlElement, aClass) {
   var matchingRegex = new RegExp("(^|\\s)" + aClass + "($|\\s)");
   return htmlElement.className.match(matchingRegex);
 };
@@ -754,8 +747,8 @@
  * @param htmlElement The HTML element whose class is to be added
  * @param newClass The String representing class name to add
  */
-Util.css_addClass = function(htmlElement, newClass) {
-  if (!Util.css_hasClass(htmlElement,newClass)) {
+orp.util.css_addClass = function(htmlElement, newClass) {
+  if (!orp.util.css_hasClass(htmlElement,newClass)) {
     htmlElement.className += ' ' + newClass;
     return true;
   }
@@ -767,15 +760,15 @@
  * @param htmlElement The HTML element whose class is to be removed
  * @param oldClass The String representing class name to remove
  */
-Util.css_removeClass = function(htmlElement, oldClass) {
-  if (Util.css_hasClass(htmlElement,oldClass)) {
+orp.util.css_removeClass = function(htmlElement, oldClass) {
+  if (orp.util.css_hasClass(htmlElement,oldClass)) {
     var matchingRegex = new RegExp("(^|\\s)" + oldClass); //BUG need to avoid replacing classNames that are a superset of oldClass
     htmlElement.className = htmlElement.className.replace(matchingRegex,'');
   }
 };
 
 // String Utilities
-Util.getStringFromKeyEvent = function(eventObj) {
+orp.util.getStringFromKeyEvent = function(eventObj) {
   return String.fromCharCode(eventObj.charCode); //Mozilla only call
 };
 

Deleted: trunk/source/util/UtilTest.html
===================================================================
--- trunk/source/util/UtilTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/UtilTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -1,80 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>Unit tests for Util.js</title>
-
-    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
-    <script type="text/javascript" src="Util.js"></script>
-    <script type="text/javascript" src="Uuid.js"></script>
-    <script type="text/javascript" src="RandomUuid.js"></script>
-    <script type="text/javascript" src="TimeBasedUuid.js"></script>
-    <script type="text/javascript" src="UtilTest.js"></script>
-  </head>
-  
-  <body>
-    <h1>Unit tests for Util.js</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>You should be able to run these unit tests by going to
-    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button. </p>
-
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Deleted: trunk/source/util/UtilTest.js
===================================================================
--- trunk/source/util/UtilTest.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/UtilTest.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -1,129 +0,0 @@
-/*****************************************************************************
- UtilTest.js
- 
-******************************************************************************
- Written in 2005 by 
-    Brian Douglas Skinner <brian.skinner at gumption.org>
-    Mignon Belongie
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
-  
- You can copy freely from this file.  This work may be freely reproduced, 
- distributed, transmitted, used, modified, built upon, or otherwise exploited
- by anyone for any purpose.
-  
- This work is provided on an "AS IS" basis, without warranties or conditions 
- of any kind, either express or implied, including, without limitation, any 
- warranties or conditions of title, non-infringement, merchantability, or 
- fitness for a particular purpose. You are solely responsible for determining 
- the appropriateness of using or distributing the work and assume all risks 
- associated with use of this work, including but not limited to the risks and 
- costs of errors, compliance with applicable laws, damage to or loss of data 
- or equipment, and unavailability or interruption of operations.
-
- In no event shall the authors or contributors have any liability for any 
- direct, indirect, incidental, special, exemplary, or consequential damages,
- however caused and on any theory of liability, whether in contract, strict 
- liability, or tort (including negligence), arising in any way out of or in 
- connection with the use or distribution of the work.
-*****************************************************************************/
- 
-var UtilTestVars = null;
-
-
-// -------------------------------------------------------------------
-// setUp and tearDown
-// -------------------------------------------------------------------
-
-function setUp() {
-  UtilTestVars = {};
-  UtilTestVars.theHobbit = "The Hobbit";
-}
-
-function tearDown() {
-  UtilTestVars = null;
-}
-
-
-// -------------------------------------------------------------------
-// Test functions
-// -------------------------------------------------------------------
-
-function testSimplestCase() {
-  assertTrue("This is true", true);
-}
-
-function testTypeCheckingMethods() {
-  assertTrue('"The Hobbit" is a string', Util.isString("The Hobbit"));
-  assertFalse('"The Hobbit" is not a number', Util.isNumber("The Hobbit"));
-  assertFalse('"The Hobbit" is not numeric', Util.isNumeric("The Hobbit"));
-  assertFalse('"The Hobbit" is not a boolean', Util.isBoolean("The Hobbit"));
-  assertFalse('"The Hobbit" is not an object', Util.isObject("The Hobbit"));
-  assertFalse('"The Hobbit" is not an array', Util.isArray("The Hobbit"));
-  assertFalse('"The Hobbit" is not a hash table', Util.isHashTable("The Hobbit"));
-}
-
-function testMethodsThatOperateOnSets() {
-  var aTinySet = [];
-  var theHobbit = UtilTestVars.theHobbit;
-  assertFalse('"The Hobbit" is not in an empty set', Util.isObjectInSet(theHobbit, aTinySet));
-  assertTrue('"The Hobbit" can be added to an empty set', Util.addObjectToSet(theHobbit, aTinySet));
-  assertTrue('"The Hobbit" is in the set after being added', Util.isObjectInSet(theHobbit, aTinySet));
-  assertTrue('"The Hobbit" can be removed from a set it is in', Util.removeObjectFromSet(theHobbit, aTinySet));
-  assertFalse('"The Hobbit" is no longer in a set it was removed from', Util.isObjectInSet(theHobbit, aTinySet));
-  assertFalse('"The Hobbit" can not be removed twice', Util.removeObjectFromSet(theHobbit, aTinySet));
-
-  var setNumber2 = [123, "456", 78.9, new Date(), theHobbit];
-  assertTrue('"The Hobbit" is in setNumber2', Util.isObjectInSet(theHobbit, setNumber2));
-  assertTrue('78.9 is in setNumber2', Util.isObjectInSet(78.9, setNumber2));
-  assertTrue('78.9 and "The Hobbit" is in setNumber2', Util.areObjectsInSet([78.9, theHobbit], setNumber2));
-  assertTrue('All members of setNumber2 are in setNumber2', Util.areObjectsInSet(setNumber2, setNumber2));
-}
-
-function testEncryptionMethods() {
-  var longString = "When in the course of human events: d41d8cd98f00b204e9800998ecf8427e";
-  assertTrue('md5 of "" is correct', (Util.hex_md5("") == "d41d8cd98f00b204e9800998ecf8427e"));
-  assertTrue('md5 of "iggy" is correct', (Util.hex_md5("iggy") == "0e026f55a72c0861a93e750c2a5427b1"));
-  assertTrue('md5 of longString is correct', (Util.hex_md5(longString) == "4d694e03af399831c6f0c1f1bcc2fc93"));
-}
-
-function testIsEmpty() {
-  var canada = {name:"Canada", provinces:8};
-  var atlantis = {};
-  
-  assertTrue('Canada has properties', !Util.isEmpty(canada));
-  assertTrue('Atlantis does not have properties', Util.isEmpty(atlantis));
-  
-  delete canada.name;
-  delete canada.provinces;
-  assertTrue('Canada does not have properties', Util.isEmpty(canada));
-}
-
-function testHasProperty() {
-  var canada = {name:"Canada", provinces:8};
-  var atlantis = {};
-
-  assertTrue('Canada has a name', Util.hasProperty(canada, "name"));
-  assertTrue('Canada does not have a foo', !Util.hasProperty(canada, "foo"));
-  
-  assertTrue('Atlantis does not have a name', !Util.hasProperty(atlantis, "name"));
-
-  assertTrue('Atlantis has []', Util.hasProperties(atlantis, []));
-  assertTrue('Canada has ["name", "provinces"]', Util.hasProperties(canada, ["name", "provinces"]));
-  assertTrue('Canada has ["name"]', Util.hasProperties(canada, ["name"]));
-  assertTrue('Canada has []', Util.hasProperties(canada, []));
-  assertTrue('Canada does not have ["foo", "bar"]', !Util.hasProperties(canada, ["foo", "bar"]));
-
-  assertTrue('Canada has only ["name", "provinces"]', Util.hasNoUnexpectedProperties(canada, ["name", "provinces"]));
-  assertTrue('Canada does not have just ["name"]', !Util.hasNoUnexpectedProperties(canada, ["name"]));
-  
-  assertTrue('Canada does not have just ["name"]', !Util.hasExactlyTheseProperties(canada, ["name"]));
-  assertTrue('Canada has ["name", "provinces"]', Util.hasExactlyTheseProperties(canada, ["name", "provinces"]));
-  assertTrue('Canada does not have ["name", "provinces", "foo"]', !Util.hasExactlyTheseProperties(canada, ["name", "provinces", "foo"]));
-}
-
-// -------------------------------------------------------------------
-// End of file
-// -------------------------------------------------------------------

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/Uuid.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -36,6 +36,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.util.Uuid");
 dojo.require("dojo.lang.*");
+dojo.require("orp.util.Util");
 
 
 // -------------------------------------------------------------------
@@ -67,9 +68,9 @@
         this._uuidString = namedParameters["uuidString"];
         
         // Check for typos in parameter names
-        Util.assert(Util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
+        orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
       } else {
-        Util.assert(false);
+        orp.util.assert(false);
       }
     }
   }
@@ -115,12 +116,12 @@
   if (dojo.lang.isString(namedParameters)) {
     uuidString = namedParameters;
   } else {
-    Util.assert(dojo.lang.isObject(namedParameters));
+    orp.util.assert(dojo.lang.isObject(namedParameters));
     uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-    Util.assert(dojo.lang.isString(uuidString));
+    orp.util.assert(dojo.lang.isString(uuidString));
     
     // Check for typos in parameter names
-    Util.assert(Util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
+    orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
   }
 
   var uuid = new orp.util.Uuid(uuidString);
@@ -164,7 +165,7 @@
  * <pre>
  *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
  *   var version = uuid.getVersion();
- *   Util.assert(version == orp.util.Uuid.Version.TIME_BASED);
+ *   orp.util.assert(version == orp.util.Uuid.Version.TIME_BASED);
  * </pre>
  *
  * @scope    public instance method
@@ -187,7 +188,7 @@
  * <pre>
  *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
  *   var variant = uuid.getVariant();
- *   Util.assert(variant == orp.util.Uuid.Variant.DCE);
+ *   orp.util.assert(variant == orp.util.Uuid.Variant.DCE);
  * </pre>
  *
  * @scope    public instance method
@@ -200,7 +201,7 @@
   //         (variant "10__" == DCE)
   var variantCharacter = this._uuidString.charAt(19);
   var variantNumber = parseInt(variantCharacter, orp.util.Uuid.HEX_RADIX);
-  Util.assert((variantNumber >= 0) && (variantNumber <= 16));
+  orp.util.assert((variantNumber >= 0) && (variantNumber <= 16));
   
   if (!orp.util.Uuid._ourVariantLookupTable) {
     var Variant = orp.util.Uuid.Variant;

Modified: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/util/XmlConverter.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -33,6 +33,7 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.util.XmlConverter");
+dojo.require("orp.util.Util");
 // dojo.provide("orp.util.XmlTextNodeToAttributeSpecifier");
 // dojo.provide("orp.util.XmlAttributeToAttributeSpecifier");
 
@@ -43,8 +44,8 @@
  * @scope    public instance constructor
  */
 orp.util.XmlTextNodeToAttributeSpecifier = function(tagPath, attribute) {
-  Util.assert(tagPath instanceof Array);
-  Util.assert(attribute instanceof Item);
+  orp.util.assert(tagPath instanceof Array);
+  orp.util.assert(attribute instanceof Item);
   this._tagPath = tagPath;
   this._attribute = attribute;
   var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
@@ -67,7 +68,7 @@
  * @scope    public instance constructor
  */
 orp.util.XmlAttributeToAttributeSpecifier = function(xmlAttributeName, attribute) {
-  Util.assert(attribute instanceof Item);
+  orp.util.assert(attribute instanceof Item);
   this._xmlAttributeName = xmlAttributeName;
   this._attribute = attribute;
   var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
@@ -99,15 +100,15 @@
  * @param    itemCategory                       If null, a new category is created from 'namespace' and 'itemTagName'.
  */
 orp.util.XmlConverter = function(world, url, nameSpace, itemTagName, itemCategory) {
-  Util.assert(world instanceof World);
+  orp.util.assert(world instanceof World);
   var urlSeparators = new RegExp("\\.|\\/");
   var urlParts = url.split(urlSeparators);
   var len = urlParts.length;
-  Util.assert(urlParts[len-1] == "xml");
+  orp.util.assert(urlParts[len-1] == "xml");
   if (!nameSpace) {
     nameSpace = urlParts[len-2];
   }
-  Util.assert(Util.isString(itemTagName));
+  orp.util.assert(orp.util.isString(itemTagName));
 
   var xmlDoc = document.implementation.createDocument("", "doc", null);
   var objXMLHTTP = new XMLHttpRequest();
@@ -181,8 +182,8 @@
     listOfOutputItems = this._doDefaultConversion(this._world, this._nameSpace, this._itemElements, this._itemCategory);
   }
   else {
-    Util.assert(xmlToAttributeSpecifiers instanceof Array);
-    Util.assert(xmlToAttributeSpecifiers[0] instanceof orp.util.XmlTextNodeToAttributeSpecifier);
+    orp.util.assert(xmlToAttributeSpecifiers instanceof Array);
+    orp.util.assert(xmlToAttributeSpecifiers[0] instanceof orp.util.XmlTextNodeToAttributeSpecifier);
     for (var i = 0; i < this._itemElements.length; ++i) {
       var newItem = world.newItem();
       newItem.assignToCategory(this._itemCategory);
@@ -221,7 +222,7 @@
     matchXmlAttribute = true;
     var xmlAttributeToMatch = equalitySpecifier._xmlAttributeName;
   } else {
-    Util.assert(equalitySpecifier instanceof orp.util.XmlTextNodeToAttributeSpecifier,
+    orp.util.assert(equalitySpecifier instanceof orp.util.XmlTextNodeToAttributeSpecifier,
                 "equalitySpecifier should be of type orp.util.XmlTextNodeToAttributeSpecifier or orp.util.XmlAttributeToAttributeSpecifier.");
     matchXmlAttribute = false;
     var xmlTagPathToMatch = equalitySpecifier._tagPath;

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/EntryView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -83,9 +83,9 @@
  */
 EntryView.prototype = new View();  // makes EntryView be a subclass of View
 function EntryView(superview, htmlElement, item, attribute, entry, isMultiLine) {
-  Util.assert((!entry) || entry instanceof Entry);
-  Util.assert(item instanceof Item);
-  Util.assert(attribute instanceof Item); // PENDING need to check that attribute is an attribute
+  orp.util.assert((!entry) || entry instanceof Entry);
+  orp.util.assert(item instanceof Item);
+  orp.util.assert(attribute instanceof Item); // PENDING need to check that attribute is an attribute
   
   View.call(this, superview, htmlElement, "EntryView");
 
@@ -169,9 +169,9 @@
  *
  */
 EntryView.prototype.setExpectedTypeEntries = function(expectedTypeEntries) {
-  Util.assert(Util.isArray(expectedTypeEntries));
+  orp.util.assert(orp.util.isArray(expectedTypeEntries));
   for (var key in expectedTypeEntries) {
-    Util.assert(expectedTypeEntries[key] instanceof Entry);
+    orp.util.assert(expectedTypeEntries[key] instanceof Entry);
   }
   this._expectedTypeEntries = expectedTypeEntries;
 };
@@ -181,7 +181,7 @@
  *
  */
 EntryView.prototype.setSuggestions = function(listOfSuggestions) {
-  if (listOfSuggestions) {Util.assert(Util.isArray(listOfSuggestions));}
+  if (listOfSuggestions) {orp.util.assert(orp.util.isArray(listOfSuggestions));}
   this._suggestions = listOfSuggestions;
 };
 
@@ -279,7 +279,7 @@
     var typeNumber = this.getWorld().getItemFromUuid(World.UUID_FOR_TYPE_NUMBER);
     if (dataType == typeNumber) {
       if (this._entry.getValue() < 0) {
-        Util.css_addClass(this._textSpan,EntryView.CSS_CLASS_NEGATIVE_NUMBER);
+        orp.util.css_addClass(this._textSpan,EntryView.CSS_CLASS_NEGATIVE_NUMBER);
       }
     }
   }
@@ -293,9 +293,9 @@
 }; */
 
 EntryView.prototype.unSelect = function() {
-  Util.assert(this._isLozenge());
+  orp.util.assert(this._isLozenge());
   this._setClassName();
-  //Util.css_removeClass(this._textSpan, EntryView.CSS_CLASS_SELECTED);
+  //orp.util.css_removeClass(this._textSpan, EntryView.CSS_CLASS_SELECTED);
 };
 
 /** Select this Entry
@@ -391,7 +391,7 @@
         newValue = this._provisionalText;
       }
       var newValueDisplayString = "";
-      if (Util.isString(newValue)) {
+      if (orp.util.isString(newValue)) {
         newValueDisplayString = newValue;
       }
       else if (newValue instanceof Item) {
@@ -422,7 +422,7 @@
  * @param    value    The new value to be saved. 
  */
 EntryView.prototype._transformToExpectedType = function(value) {
-  if (value && Util.isString(value)) {
+  if (value && orp.util.isString(value)) {
     var world = this.getWorld();
     var listOfExpectedTypeEntries;
     if (this._expectedTypeEntries) {
@@ -453,7 +453,7 @@
  * @param    listOfTypes    The new value to be saved. 
  */
 EntryView._transformValueToExpectedType = function(world, value, listOfTypes) {
-  if (value && Util.isString(value) && listOfTypes && Util.isArray(listOfTypes)) {
+  if (value && orp.util.isString(value) && listOfTypes && orp.util.isArray(listOfTypes)) {
     var categoryCalledCategory = world.getCategoryCalledCategory();
     var typeCalledText = world.getTypeCalledText();
     var typeCalledDate = world.getTypeCalledDate();
@@ -585,7 +585,7 @@
  * @param    onClickFunction    A function to call. 
  */
 EntryView.prototype.setClickFunction = function(onClickFunction) {
-  Util.assert(onClickFunction instanceof Function);
+  orp.util.assert(onClickFunction instanceof Function);
   this._clickFunction = onClickFunction;
 };
 
@@ -678,15 +678,15 @@
  * @param    inEventObject    An event object. 
  */
 EntryView.prototype.onKeyPress = function(eventObject) {
-  if (eventObject.keyCode == Util.ASCII_VALUE_FOR_ESCAPE) {
+  if (eventObject.keyCode == orp.util.ASCII.ESCAPE) {
     this._restoreText();
     return true;
   }
   if (this._suggestionBox && this._suggestionBox._keyPressOnInputField(eventObject)) {
     return true;
   }
-  var ignoreKeyPressFunc = this._isEditing && (eventObject.keyCode == Util.ASCII_VALUE_FOR_LEFT_ARROW || 
-    eventObject.keyCode == Util.ASCII_VALUE_FOR_RIGHT_ARROW);
+  var ignoreKeyPressFunc = this._isEditing && (eventObject.keyCode == orp.util.ASCII.LEFT_ARROW || 
+    eventObject.keyCode == orp.util.ASCII.RIGHT_ARROW);
   if (!ignoreKeyPressFunc && this._keyPressFunction && this._keyPressFunction(eventObject, this)) {
     return true;
   }
@@ -746,15 +746,15 @@
   if (this._keyPressFunction && this._keyPressFunction(myEvent, this)) {
     return true;
   }
-  if (myEvent.keyCode ==  Util.KEYCODE_FOR_BACKSPACE || myEvent.keyCode == Util.KEYCODE_FOR_DELETE ||
+  if (myEvent.keyCode ==  orp.util.KEYCODE_FOR_BACKSPACE || myEvent.keyCode == orp.util.KEYCODE_FOR_DELETE ||
       myEvent.keyCode === 0) {
-    Util.assert(this._entry !== null);
+    orp.util.assert(this._entry !== null);
     this._entry.voteToDelete();
     this._entry = null;
     this._valueIsItem = false;
     this._setClassName();
     this.getRootView().removeFromSelection(this);
-    if ((myEvent.keyCode ==  Util.KEYCODE_FOR_BACKSPACE || myEvent.keyCode == Util.KEYCODE_FOR_DELETE) &&
+    if ((myEvent.keyCode ==  orp.util.KEYCODE_FOR_BACKSPACE || myEvent.keyCode == orp.util.KEYCODE_FOR_DELETE) &&
         this.getSuperview().entryRemoved) {
       this.getSuperview().entryRemoved(this);
     }
@@ -762,7 +762,7 @@
       this._buildView();
     }
     if (myEvent.keyCode === 0) {
-      this.startEditing(true,Util.getStringFromKeyEvent(myEvent));
+      this.startEditing(true, orp.util.getStringFromKeyEvent(myEvent));
       return true;
     }
     return false;

Modified: trunk/source/view/ItemView.js
===================================================================
--- trunk/source/view/ItemView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/ItemView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -58,8 +58,8 @@
  */
 ItemView.prototype = new View();  // makes ItemView be a subclass of View
 function ItemView(superview, htmlElement, item) {
-  Util.assert(htmlElement instanceof HTMLElement);
-  Util.assert(item instanceof Item);
+  orp.util.assert(htmlElement instanceof HTMLElement);
+  orp.util.assert(item instanceof Item);
 
   View.call(this, superview, htmlElement, "ItemView");
 
@@ -88,7 +88,7 @@
  * @scope    public instance method
  */
 ItemView.prototype.refresh = function() {
-  Util.assert(this._item instanceof Item);
+  orp.util.assert(this._item instanceof Item);
   
   // PENDING: this needs to be changed from DOM level 0 to DOM level 2.
   var listOfStrings = [];

Modified: trunk/source/view/LoginView.js
===================================================================
--- trunk/source/view/LoginView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/LoginView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -212,7 +212,7 @@
  */
 LoginView.prototype._signinPasswordKeyPress = function(eventObject) {
   // see if <return> is pressed, if so, similate clicking on sign in button
-  if (eventObject.keyCode == Util.ASCII_VALUE_FOR_RETURN) {
+  if (eventObject.keyCode == orp.util.ASCII.RETURN) {
     this._clickOnSignInButton(eventObject);
   }
 };
@@ -225,7 +225,7 @@
  */
 LoginView.prototype._createAccountPasswordKeyPress = function(eventObject) {
   // see if <return> is pressed, if so, similate clicking on sign in button
-  if (eventObject.keyCode == Util.ASCII_VALUE_FOR_RETURN) {
+  if (eventObject.keyCode == orp.util.ASCII.RETURN) {
     this._clickOnNewAcctButton(eventObject);
   }
 };
@@ -479,8 +479,8 @@
     this._userSuggestionBoxDivElement.appendChild(table);
     
     // set-up the suggestion box to open just below the input field it comes from
-    var suggestionBoxTop = Util.getOffsetTopFromElement(this._inputField) + this._inputField.offsetHeight;
-    var suggestionBoxLeft = Util.getOffsetLeftFromElement(this._inputField);
+    var suggestionBoxTop = orp.util.getOffsetTopFromElement(this._inputField) + this._inputField.offsetHeight;
+    var suggestionBoxLeft = orp.util.getOffsetLeftFromElement(this._inputField);
     this._userSuggestionBoxDivElement.style.top = suggestionBoxTop + "px"; 
     this._userSuggestionBoxDivElement.style.left = suggestionBoxLeft + "px";
     // alert(this._inputField.offsetWidth);

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/MultiEntriesView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -65,8 +65,8 @@
 function MultiEntriesView(superview, htmlElement, item, attribute) {
   View.call(this, superview, htmlElement, "MultiEntriesView");
 
-  Util.assert(item instanceof Item);
-  Util.assert(attribute instanceof Item); // PENDING need to check that attribute is an attribute
+  orp.util.assert(item instanceof Item);
+  orp.util.assert(attribute instanceof Item); // PENDING need to check that attribute is an attribute
   
   this._item = item;
   this._attribute = attribute;
@@ -103,7 +103,7 @@
  * @param    item      The Item which just became real. 
  */
 MultiEntriesView.prototype._provisionalItemJustBecomeReal = function(item) {
-  Util.assert(item == this._item);
+  orp.util.assert(item == this._item);
   var superview = this.getSuperview();
   if (superview._provisionalItemJustBecomeReal) {
     superview._provisionalItemJustBecomeReal(item);
@@ -124,7 +124,7 @@
  *
  */
 MultiEntriesView.prototype.noLongerProvisional = function() {
-  Util.assert(this._entryViews.length == 1); // provisional item should only have one entry
+  orp.util.assert(this._entryViews.length == 1); // provisional item should only have one entry
   for (var key in this._entryViews) {
     var entry = this._entryViews[key];
     entry.noLongerProvisional();
@@ -159,7 +159,7 @@
  *
  */
 MultiEntriesView.prototype.setKeyPressFunction = function(keyPressFunction) {
-  Util.assert(keyPressFunction instanceof Function);
+  orp.util.assert(keyPressFunction instanceof Function);
   this._keyPressFunction = keyPressFunction;
 };
 
@@ -171,7 +171,7 @@
  * @param    onClickFunction    A function to call. 
  */
 MultiEntriesView.prototype.setClickFunction = function(onClickFunction) {
-  Util.assert(onClickFunction instanceof Function);
+  orp.util.assert(onClickFunction instanceof Function);
   this._clickFunction = onClickFunction;
 };
 
@@ -210,9 +210,9 @@
  */
 MultiEntriesView.prototype._handleDrop = function(element) {
   var draggedEntryView = element.or_entryView;
-  if (!draggedEntryView) {Util.assert(false);}
+  if (!draggedEntryView) {orp.util.assert(false);}
   var droppedEntry = draggedEntryView._entry;
-  if (!droppedEntry) {Util.assert(false);}
+  if (!droppedEntry) {orp.util.assert(false);}
   if (!this.hasEntry(droppedEntry)) {
     var newEntry;
     if (droppedEntry.getType() == this.getWorld().getTypeCalledConnection()) {
@@ -243,13 +243,13 @@
  *
  */
 MultiEntriesView.prototype._keyPressOnEditField = function(eventObject, entryView) {
-  Util.assert(entryView instanceof EntryView);
+  orp.util.assert(entryView instanceof EntryView);
   var asciiValueOfKey = eventObject.keyCode;
   var move, doCreateNewEntry;
   switch (asciiValueOfKey) {
-    case Util.ASCII_VALUE_FOR_LEFT_ARROW: move = -1; break;
-    case Util.ASCII_VALUE_FOR_RIGHT_ARROW: move = 1; break;
-    case Util.ASCII_VALUE_FOR_RETURN:
+    case orp.util.ASCII.LEFT_ARROW: move = -1; break;
+    case orp.util.ASCII.RIGHT_ARROW: move = 1; break;
+    case orp.util.ASCII.RETURN:
       if (eventObject.altKey) {
         doCreateNewEntry = true;
         break;
@@ -266,8 +266,8 @@
     return true;
   }
   if (move !== 0) {
-    var index = Util.getArrayIndex(this._entryViews, entryView);
-    Util.assert(index != -1);
+    var index = orp.util.getArrayIndex(this._entryViews, entryView);
+    orp.util.assert(index != -1);
     index += move;
     if (index >= 0 && index < this._entryViews.length) {
       entryView.stopEditing();

Modified: trunk/source/view/NavbarView.js
===================================================================
--- trunk/source/view/NavbarView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/NavbarView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -117,7 +117,7 @@
  * @param    ulElement    The "ul" HTMLElement for the menu of menu items. 
  */
 NavbarView.prototype._sortOrderUpdate = function(ulElement) {
-  Util.assert(this._liElementBeingTouched !== null);
+  orp.util.assert(this._liElementBeingTouched !== null);
   
   var liElementPrefixString = NavbarView.ELEMENT_ID_MENU + '_';
   var menuItemElementId = this._liElementBeingTouched.id;
@@ -126,8 +126,8 @@
   
   var listOfPages = this._getNewOrderingForPageList(ulElement);
   
-  var arrayIndex = Util.getArrayIndex(listOfPages, pageToReorder);
-  Util.assert(arrayIndex != -1);
+  var arrayIndex = orp.util.getArrayIndex(listOfPages, pageToReorder);
+  orp.util.assert(arrayIndex != -1);
   var pageAbove = (arrayIndex === 0) ? null : listOfPages[arrayIndex-1];
   var pageBelow = (arrayIndex > listOfPages.length) ? null : listOfPages[arrayIndex+1];
   pageToReorder.reorderBetween(pageAbove, pageBelow);
@@ -195,7 +195,7 @@
     // the id for the individual menu item to the right of the underscore.
     var menuItemId = NavbarView.ELEMENT_ID_MENU + '_' + page.getUuidString();
     var liElement = View.appendNewElement(ulElement, "li", NavbarView.CSS_CLASS_MENU_ITEM, {id: menuItemId});
-    if (page == this.getRootView().getCurrentPage()) {Util.css_addClass(liElement,NavbarView.CSS_CLASS_SELECTED);}
+    if (page == this.getRootView().getCurrentPage()) {orp.util.css_addClass(liElement,NavbarView.CSS_CLASS_SELECTED);}
     var anchorElement = View.appendNewElement(liElement, "a", null, {href: menuUrl}, menuText);
     Event.observe(anchorElement, "click", RootView.clickOnLocalLink.bindAsEventListener());
     Event.observe(liElement, "mousedown", this._mouseDownOnMenuItem.bindAsEventListener(this, liElement));

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/PageView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -92,8 +92,8 @@
  */
 PageView.prototype = new View();  // makes PageView be a subclass of View
 function PageView(superview, htmlElement, pageItem) {
-  Util.assert(htmlElement instanceof HTMLElement);
-  Util.assert(pageItem instanceof Item);
+  orp.util.assert(htmlElement instanceof HTMLElement);
+  orp.util.assert(pageItem instanceof Item);
 
   View.call(this, superview, htmlElement, "PageView");
 
@@ -145,7 +145,7 @@
  * @scope    public instance method
  */
 PageView.prototype.doInitialDisplay = function() {
-  Util.assert(this.getHtmlElement() instanceof HTMLElement);
+  orp.util.assert(this.getHtmlElement() instanceof HTMLElement);
   
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   var attributeCalledSummary = this.getWorld().getAttributeCalledSummary();

Modified: trunk/source/view/RootView.js
===================================================================
--- trunk/source/view/RootView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/RootView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -74,16 +74,16 @@
  * @syntax   var rootView = new RootView()
  */
 function RootView(world) {
-  window.onerror = Util.handleError;
+  window.onerror = orp.util.handleError;
   // window.onunload = window.doOnunloadActions;
   // window.onfocus = window.doOnfocusActions;
   // window.onblur = window.doOnblurActions;
   // window.onresize = window.doOnresizeActions;  
-  Util.setTargetsForExternalLinks();
+  orp.util.setTargetsForExternalLinks();
   
   RootView._ourSingleInstance = this;
    
-  Util.assert(world instanceof World);
+  orp.util.assert(world instanceof World);
 
   // instance properties
   this._world = world;
@@ -136,7 +136,7 @@
   this._anchorSpan = anchorSpan;
   this._rootDiv = rootDiv;
   
-  Util.setErrorReportCallback(RootView.displayTextInDebugTextarea);
+  orp.util.setErrorReportCallback(RootView.displayTextInDebugTextarea);
   this.setCurrentContentViewFromUrl();
 }
 
@@ -293,7 +293,7 @@
  * @param    item    Any item.
  */
 RootView.prototype.getUrlForItem = function(item) {
-  Util.assert(item instanceof Item);
+  orp.util.assert(item instanceof Item);
   var categoryCalledPage = this.getWorld().getItemFromUuid(RootView.UUID_FOR_CATEGORY_PAGE);
   var prefix;
   if (item.isInCategory(categoryCalledPage)) {
@@ -389,7 +389,7 @@
     this._displayNavbar();
     this._displayDebugArea();
     if (this._currentContentView) {
-      Util.assert(this._currentContentView instanceof Object);
+      orp.util.assert(this._currentContentView instanceof Object);
       document.title = this._currentContentView.getPageTitle() + " - openrecord.org";
       this._currentContentView.includeOnScreen(true);
     }
@@ -471,7 +471,7 @@
  * @scope    private instance method
  */
 RootView.prototype._displayDebugArea = function() {
-  Util.assert(this._debugDivElement instanceof HTMLDivElement);
+  orp.util.assert(this._debugDivElement instanceof HTMLDivElement);
 
   var listOfStrings = [];
   listOfStrings.push("<textarea readonly id=\"" + RootView.ELEMENT_ID_DEBUG_TEXTAREA + "\" rows=\"20\" cols=\"100\" wrap=\"virtual\"></textarea>");
@@ -568,7 +568,7 @@
     this._selections[i].unSelect();
   }
   if (aView) {
-    Util.assert(aView instanceof View);
+    orp.util.assert(aView instanceof View);
     this._selections = [aView];
   }
   else {this._selections = [];}
@@ -580,8 +580,8 @@
  * @param    aView    A selectable object
  */
 RootView.prototype.addToSelection = function(aView) {
-  Util.assert(aView instanceof View);
-  Util.addObjectToSet(aView,this._selections);
+  orp.util.assert(aView instanceof View);
+  orp.util.addObjectToSet(aView,this._selections);
 };
 
 /**
@@ -590,8 +590,8 @@
  * @param    aView    A selectable object
  */
 RootView.prototype.removeFromSelection = function(aView) {
-  Util.assert(aView instanceof View);
-  Util.assert(Util.removeObjectFromSet(aView,this._selections));
+  orp.util.assert(aView instanceof View);
+  orp.util.assert(orp.util.removeObjectFromSet(aView,this._selections));
 };
   
 // -------------------------------------------------------------------
@@ -619,7 +619,7 @@
   // "ne-resize", "se-resize", "nw-resize", "sw-resize"
   // window.document.body.style.cursor = "wait";
 
-  var htmlAnchorElement = Util.getTargetFromEvent(eventObject);
+  var htmlAnchorElement = orp.util.getTargetFromEvent(eventObject);
   
   window.location = htmlAnchorElement.href;
   RootView._ourSingleInstance.setCurrentContentViewFromUrl();

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/SectionView.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -94,7 +94,7 @@
   View.call(this, superview, htmlElement, "SectionView");
 
   // instance properties
-  Util.assert(sectionItem instanceof Item);
+  orp.util.assert(sectionItem instanceof Item);
   this._section = sectionItem;
 
   this._pluginView = null;
@@ -147,7 +147,7 @@
  * @return   A newly created plugin object, initialized to be the plugin for this section.
  */
 SectionView.prototype.getPluginInstanceFromPluginItem = function(pluginItem, pluginDiv) {
-  Util.assert(pluginItem instanceof Item);
+  orp.util.assert(pluginItem instanceof Item);
   
   var newPlugin = null;
   var pluginClass;
@@ -240,7 +240,7 @@
     var pluginItem = this.getWorld().getItemFromUuid(pluginClass.getPluginItemUuid());
     optionElement.text = pluginItem.getDisplayString();
     listener = this; 
-    Util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
+    orp.util.addEventListener(optionElement, "click", function(event) {listener.clickOnPluginSelectionMenu(event);});
   }
   View.appendNewTextNode(controlArea," of items whose ");
   this._queryEditSpan = View.appendNewElement(controlArea, "span");
@@ -270,7 +270,7 @@
     for (var i=0; i < entriesLayoutData.length; ++i) {
       var layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
       var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attributeAppliesToPlugin);
-      Util.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
+      orp.util.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
       if (entriesAppliesToPlugin[0].getValue() == pluginTypeItem) {
         return layoutItem;
       }
@@ -309,7 +309,7 @@
     matchingAttribute = this.getWorld().getAttributeCalledCategory();
   }
   else {
-    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    orp.util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
@@ -359,7 +359,7 @@
  * @return   Returns true if the user pressed the return key, or false otherwise.
  */
 SectionView.prototype.keyPressOnMatchingValueField = function(event, anEntryView) {
-  if (event.keyCode == Util.ASCII_VALUE_FOR_RETURN) {
+  if (event.keyCode == orp.util.ASCII.RETURN) {
     anEntryView.stopEditing();
     return true;
   }
@@ -375,7 +375,7 @@
 SectionView.prototype.observedItemHasChanged = function(item) {
   item.removeObserver(this); //item no longer needs to be observed as query editor span is rebuilt
   var myQuery = this.getQuerySpec();
-  Util.assert(item == myQuery);
+  orp.util.assert(item == myQuery);
   var pluginItem = this._pluginView.getPluginItem();
   this._pluginView.endOfLife();
   this._pluginView = this.getPluginInstanceFromPluginItem(pluginItem, this._pluginDiv);
@@ -392,7 +392,7 @@
  */
 SectionView.prototype.clickOnPluginSelectionMenu = function(eventObject) {
   eventObject = eventObject || window.event;
-  var optionElement = Util.getTargetFromEvent(eventObject);
+  var optionElement = orp.util.getTargetFromEvent(eventObject);
   // PENDING: We could replace the lines above with "var optionElement = this;"
   // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
   
@@ -428,7 +428,7 @@
  */
 SectionView.prototype.clickOnAttributeMenu = function(eventObject) {
   eventObject = eventObject || window.event;
-  var optionElement = Util.getTargetFromEvent(eventObject);
+  var optionElement = orp.util.getTargetFromEvent(eventObject);
   // PENDING: We could replace the lines above with "var optionElement = this;"
   // That would work fine in Firefox, but maybe it wouldn't work in other browsers?  
   
@@ -446,7 +446,7 @@
     matchingAttribute = this.getWorld().getAttributeCalledCategory();
   }
   else {
-    Util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    orp.util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
   if (matchingAttribute.getDisplayString() != newChoiceName) {
@@ -464,10 +464,10 @@
     for (var i in listOfMatchingEntries) {
       var anEntry = listOfMatchingEntries[i];
       anEntry.voteToDelete();
-      Util.assert(anEntry.hasBeenDeleted());
+      orp.util.assert(anEntry.hasBeenDeleted());
     }
     listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
-    Util.assert(listOfMatchingEntries.length === 0);
+    orp.util.assert(listOfMatchingEntries.length === 0);
     
     // I think we need these next 3 lines in to make sure the view gets updated  
     // to reflect the new query.  When we get a chance we should probably do 

Modified: trunk/source/view/SuggestionBox.js
===================================================================
--- trunk/source/view/SuggestionBox.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/SuggestionBox.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -115,35 +115,35 @@
   var index = -1;
   var doSelectItem = false;
   switch (asciiValueOfKey) {
-    case Util.ASCII_VALUE_FOR_DOWN_ARROW:
+    case orp.util.ASCII.DOWN_ARROW:
       if (this._selectedItem) {
-        index = (Util.getArrayIndex(this._listOfMatchingItems, this._selectedItem)+1) % numberOfMatchingItems;
+        index = (orp.util.getArrayIndex(this._listOfMatchingItems, this._selectedItem)+1) % numberOfMatchingItems;
       }
       else {
         index = 0;
       }
       break;
-    case Util.ASCII_VALUE_FOR_UP_ARROW:
+    case orp.util.ASCII.UP_ARROW:
       if (this._selectedItem) {
-        index = Util.getArrayIndex(this._listOfMatchingItems, this._selectedItem)-1;
+        index = orp.util.getArrayIndex(this._listOfMatchingItems, this._selectedItem)-1;
         if (index < 0) {index = numberOfMatchingItems-1;}
       }
       else {
         index = numberOfMatchingItems-1;
       }
       break;
-      case Util.ASCII_VALUE_FOR_TAB:
+      case orp.util.ASCII.TAB:
       if (this._inputField.value.length === 0) {return false;}
       if (!this._selectedItem) {
         this._selectedItem = this._listOfMatchingItems[0];
         doSelectItem = true;
       }
       break;
-    case Util.ASCII_VALUE_FOR_RETURN:
+    case orp.util.ASCII.RETURN:
       if (this._selectedItem) {doSelectItem = true;}
       break;
-    case Util.ASCII_VALUE_FOR_LEFT_ARROW:
-    case Util.ASCII_VALUE_FOR_RIGHT_ARROW:
+    case orp.util.ASCII.LEFT_ARROW:
+    case orp.util.ASCII.RIGHT_ARROW:
       // if left or right arrow keys, then hide suggestion box
       this._setShouldHide(true);
       return false;
@@ -252,8 +252,8 @@
     this._suggestionBoxDivElement.appendChild(table);
 
     // set-up the suggestion box to open just below the input field it comes from
-    var suggestionBoxTop = Util.getOffsetTopFromElement(this._inputField) + this._inputField.offsetHeight;
-    var suggestionBoxLeft = Util.getOffsetLeftFromElement(this._inputField);
+    var suggestionBoxTop = orp.util.getOffsetTopFromElement(this._inputField) + this._inputField.offsetHeight;
+    var suggestionBoxLeft = orp.util.getOffsetLeftFromElement(this._inputField);
     this._suggestionBoxDivElement.style.top = suggestionBoxTop + "px"; 
     this._suggestionBoxDivElement.style.left = (suggestionBoxLeft-2) + "px";
     this._suggestionBoxDivElement.style.width = (this._inputField.offsetWidth + 4)+ "px"; //HACK: Need to fix +4

Modified: trunk/source/view/View.js
===================================================================
--- trunk/source/view/View.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/source/view/View.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -162,7 +162,7 @@
  * @param    visibleFlag    True if the view should be visible on screen. False if the view should be hidden off screen.
  */
 View.prototype.includeOnScreen = function(visibleFlag) {
-  Util.assert(Util.isBoolean(visibleFlag));
+  orp.util.assert(orp.util.isBoolean(visibleFlag));
 
   if (visibleFlag) {
     this.refresh();
@@ -185,7 +185,7 @@
  * @param    element    An HTML element. 
  */
 View.removeChildrenOfElement = function(element) {
-  Util.assert(element instanceof HTMLElement);
+  orp.util.assert(element instanceof HTMLElement);
   element.innerHTML = '';
 };
 
@@ -202,10 +202,10 @@
  * @return   The newly created HTML element.
  */
 View.newElement = function(tagName, cssClassName, attributesInJson, text) {
-  Util.assert(Util.isString(tagName));
-  Util.assert(!cssClassName || Util.isString(cssClassName));
-  Util.assert(!attributesInJson || Util.isObject(attributesInJson));
-  Util.assert(!text|| Util.isString(text));
+  orp.util.assert(orp.util.isString(tagName));
+  orp.util.assert(!cssClassName || orp.util.isString(cssClassName));
+  orp.util.assert(!attributesInJson || orp.util.isObject(attributesInJson));
+  orp.util.assert(!text|| orp.util.isString(text));
 
   var newElement = window.document.createElement(tagName);
   if (cssClassName) {
@@ -249,7 +249,7 @@
  * @return   The newly created HTML element.
  */
 View.appendNewElement = function(parentElement, tagName, cssClassName, attributesInJson, text) {
-  Util.assert(parentElement instanceof HTMLElement);
+  orp.util.assert(parentElement instanceof HTMLElement);
   
   var newElement = View.newElement(tagName, cssClassName, attributesInJson, text);
   parentElement.appendChild(newElement);
@@ -268,8 +268,8 @@
  * @return   The newly created text node.
  */
 View.appendNewTextNode = function(parentElement, textString) {
-  Util.assert(parentElement instanceof HTMLElement);
-  Util.assert(Util.isString(textString));
+  orp.util.assert(parentElement instanceof HTMLElement);
+  orp.util.assert(orp.util.isString(textString));
 
   var newTextNode = window.document.createTextNode(textString);
   parentElement.appendChild(newTextNode);

Modified: trunk/tests/LintTest.html
===================================================================
--- trunk/tests/LintTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/LintTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -16,7 +16,6 @@
     <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="../source/util/Util.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>
   

Modified: trunk/tests/model/LintTest.html
===================================================================
--- trunk/tests/model/LintTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/model/LintTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -16,7 +16,6 @@
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>
   

Modified: trunk/tests/util/CsvParserTest.html
===================================================================
--- trunk/tests/util/CsvParserTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/CsvParserTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
     <script type="text/javascript" src="../../tests/util/CsvParserTest.js"></script>
   </head>
   

Modified: trunk/tests/util/DateValueTest.html
===================================================================
--- trunk/tests/util/DateValueTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/DateValueTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -15,7 +15,6 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
     <script type="text/javascript" src="DateValueTest.js"></script>
   </head>
   

Modified: trunk/tests/util/DateValueTest.js
===================================================================
--- trunk/tests/util/DateValueTest.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/DateValueTest.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -38,6 +38,7 @@
 function setUp() {
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.Util");
   dojo.require("orp.util.DateValue");
   // TestVars = {};
 }
@@ -80,7 +81,7 @@
   for (var i in dates) {
     var dateValue = dates[i];
     assertTrue('DateValue is valid', dateValue.isValid());
-    assertTrue('Util.isDate() returns true', Util.isDate(dateValue));
+    assertTrue('orp.util.isDate() returns true', orp.util.isDate(dateValue));
   }
   assertTrue('Time display is right', dates[8].toShortLocaleDateString() == 'Feb 14, 1944 9:30 am');
   assertTrue('Today is parsed correctly', dates[10].toShortLocaleDateString() =='Today');

Modified: trunk/tests/util/LintTest.html
===================================================================
--- trunk/tests/util/LintTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/LintTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -16,7 +16,6 @@
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>
   

Modified: trunk/tests/util/TestSuite.html
===================================================================
--- trunk/tests/util/TestSuite.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/TestSuite.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -26,6 +26,7 @@
         testSuite.addTestPage("../../../tests/util/CsvParserTest.html");
         testSuite.addTestPage("../../../tests/util/DateValueTest.html");
         testSuite.addTestPage("../../../tests/util/LintTest.html");
+        testSuite.addTestPage("../../../tests/util/UtilTest.html");
         testSuite.addTestPage("../../../tests/util/UuidTest.html");
         testSuite.addTestPage("../../../tests/util/XmlConverterTest.html");
         testSuite.addTestPage("../../../tests/util/XmlConverterMultiplePassesTest.html");

Copied: trunk/tests/util/UtilTest.html (from rev 329, trunk/source/util/UtilTest.html)
===================================================================
--- trunk/source/util/UtilTest.html	2005-09-16 01:43:17 UTC (rev 329)
+++ trunk/tests/util/UtilTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -0,0 +1,77 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for Util.js</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
+    <script type="text/javascript" src="UtilTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for Util.js</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Copied: trunk/tests/util/UtilTest.js (from rev 330, trunk/source/util/UtilTest.js)
===================================================================
--- trunk/source/util/UtilTest.js	2005-09-20 01:56:25 UTC (rev 330)
+++ trunk/tests/util/UtilTest.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -0,0 +1,132 @@
+/*****************************************************************************
+ UtilTest.js
+ 
+******************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Mignon Belongie
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+var UtilTestVars = null;
+
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.util.Util");
+  UtilTestVars = {};
+  UtilTestVars.theHobbit = "The Hobbit";
+}
+
+function tearDown() {
+  UtilTestVars = null;
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testSimplestCase() {
+  assertTrue("This is true", true);
+}
+
+function testTypeCheckingMethods() {
+  assertTrue('"The Hobbit" is a string', orp.util.isString("The Hobbit"));
+  assertFalse('"The Hobbit" is not a number', orp.util.isNumber("The Hobbit"));
+  assertFalse('"The Hobbit" is not numeric', orp.util.isNumeric("The Hobbit"));
+  assertFalse('"The Hobbit" is not a boolean', orp.util.isBoolean("The Hobbit"));
+  assertFalse('"The Hobbit" is not an object', orp.util.isObject("The Hobbit"));
+  assertFalse('"The Hobbit" is not an array', orp.util.isArray("The Hobbit"));
+  assertFalse('"The Hobbit" is not a hash table', orp.util.isHashTable("The Hobbit"));
+}
+
+function testMethodsThatOperateOnSets() {
+  var aTinySet = [];
+  var theHobbit = UtilTestVars.theHobbit;
+  assertFalse('"The Hobbit" is not in an empty set', orp.util.isObjectInSet(theHobbit, aTinySet));
+  assertTrue('"The Hobbit" can be added to an empty set', orp.util.addObjectToSet(theHobbit, aTinySet));
+  assertTrue('"The Hobbit" is in the set after being added', orp.util.isObjectInSet(theHobbit, aTinySet));
+  assertTrue('"The Hobbit" can be removed from a set it is in', orp.util.removeObjectFromSet(theHobbit, aTinySet));
+  assertFalse('"The Hobbit" is no longer in a set it was removed from', orp.util.isObjectInSet(theHobbit, aTinySet));
+  assertFalse('"The Hobbit" can not be removed twice', orp.util.removeObjectFromSet(theHobbit, aTinySet));
+
+  var setNumber2 = [123, "456", 78.9, new Date(), theHobbit];
+  assertTrue('"The Hobbit" is in setNumber2', orp.util.isObjectInSet(theHobbit, setNumber2));
+  assertTrue('78.9 is in setNumber2', orp.util.isObjectInSet(78.9, setNumber2));
+  assertTrue('78.9 and "The Hobbit" is in setNumber2', orp.util.areObjectsInSet([78.9, theHobbit], setNumber2));
+  assertTrue('All members of setNumber2 are in setNumber2', orp.util.areObjectsInSet(setNumber2, setNumber2));
+}
+
+function testEncryptionMethods() {
+  var longString = "When in the course of human events: d41d8cd98f00b204e9800998ecf8427e";
+  assertTrue('md5 of "" is correct', (orp.util.hex_md5("") == "d41d8cd98f00b204e9800998ecf8427e"));
+  assertTrue('md5 of "iggy" is correct', (orp.util.hex_md5("iggy") == "0e026f55a72c0861a93e750c2a5427b1"));
+  assertTrue('md5 of longString is correct', (orp.util.hex_md5(longString) == "4d694e03af399831c6f0c1f1bcc2fc93"));
+}
+
+function testIsEmpty() {
+  var canada = {name:"Canada", provinces:8};
+  var atlantis = {};
+  
+  assertTrue('Canada has properties', !orp.util.isEmpty(canada));
+  assertTrue('Atlantis does not have properties', orp.util.isEmpty(atlantis));
+  
+  delete canada.name;
+  delete canada.provinces;
+  assertTrue('Canada does not have properties', orp.util.isEmpty(canada));
+}
+
+function testHasProperty() {
+  var canada = {name:"Canada", provinces:8};
+  var atlantis = {};
+
+  assertTrue('Canada has a name', orp.util.hasProperty(canada, "name"));
+  assertTrue('Canada does not have a foo', !orp.util.hasProperty(canada, "foo"));
+  
+  assertTrue('Atlantis does not have a name', !orp.util.hasProperty(atlantis, "name"));
+
+  assertTrue('Atlantis has []', orp.util.hasProperties(atlantis, []));
+  assertTrue('Canada has ["name", "provinces"]', orp.util.hasProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada has ["name"]', orp.util.hasProperties(canada, ["name"]));
+  assertTrue('Canada has []', orp.util.hasProperties(canada, []));
+  assertTrue('Canada does not have ["foo", "bar"]', !orp.util.hasProperties(canada, ["foo", "bar"]));
+
+  assertTrue('Canada has only ["name", "provinces"]', orp.util.hasNoUnexpectedProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada does not have just ["name"]', !orp.util.hasNoUnexpectedProperties(canada, ["name"]));
+  
+  assertTrue('Canada does not have just ["name"]', !orp.util.hasExactlyTheseProperties(canada, ["name"]));
+  assertTrue('Canada has ["name", "provinces"]', orp.util.hasExactlyTheseProperties(canada, ["name", "provinces"]));
+  assertTrue('Canada does not have ["name", "provinces", "foo"]', !orp.util.hasExactlyTheseProperties(canada, ["name", "provinces", "foo"]));
+}
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/util/UuidTest.html
===================================================================
--- trunk/tests/util/UuidTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/UuidTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -15,8 +15,7 @@
 
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
-    <script type="text/javascript" src="../../tests/util/UuidTest.js"></script>
+    <script type="text/javascript" src="UuidTest.js"></script>
   </head>
   
   <body>

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.html
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -13,12 +13,11 @@
   <head>
     <title>Additional unit tests for XmlConverter.js</title>
 
-    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
     <script type="text/javascript" src="../../source/util/Uuid.js"></script>
     <script type="text/javascript" src="../../source/util/DateValue.js"></script>
     <script type="text/javascript" src="../../source/model/Record.js"></script>

Modified: trunk/tests/util/XmlConverterMultiplePassesTest.js
===================================================================
--- trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/XmlConverterMultiplePassesTest.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -41,6 +41,7 @@
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.require("orp.util.XmlConverter");
+  dojo.require("orp.util.Util");
 
   XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
   XmlAttributeToAttributeSpecifier = orp.util.XmlAttributeToAttributeSpecifier;
@@ -113,7 +114,7 @@
   for (var i in itemsInItemCategory) {
     names.push(itemsInItemCategory[i].getDisplayName());
   }
-  hasAll = Util.areObjectsInSet(["carrot", "cheese puff", "radish", "parsnip"], names);
+  hasAll = orp.util.areObjectsInSet(["carrot", "cheese puff", "radish", "parsnip"], names);
   assertTrue('Item names should include "carrot", "cheese puff", "radish" and "parsnip".', hasAll);  
 }
 
@@ -134,7 +135,7 @@
     for (var j in listOfAttributes) {
       names.push(listOfAttributes[j].getDisplayName());
     }
-    hasAll = Util.areObjectsInSet(["Category", "Name", "Food ID", "Vitamin A", "Vitamin C"], names);
+    hasAll = orp.util.areObjectsInSet(["Category", "Name", "Food ID", "Vitamin A", "Vitamin C"], names);
     assertTrue('Each item should have attributes called "Category", "Name", "Food ID", "Vitamin A" and "Vitamin C".', hasAll);  
   }
 }

Modified: trunk/tests/util/XmlConverterTest.html
===================================================================
--- trunk/tests/util/XmlConverterTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/XmlConverterTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -13,12 +13,11 @@
   <head>
     <title>Unit tests for XmlConverter.js</title>
 
-    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="../../source/OpenRecordLoader.js"></script>
     <script type="text/javascript" src="../../third_party/md5/md5.js"></script>
     <script type="text/javascript" src="../../third_party/gtd_tiddlywiki/FileSaver.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
     <script type="text/javascript" src="../../source/util/Uuid.js"></script>
     <script type="text/javascript" src="../../source/util/DateValue.js"></script>
     <script type="text/javascript" src="../../source/model/Record.js"></script>

Modified: trunk/tests/util/XmlConverterTest.js
===================================================================
--- trunk/tests/util/XmlConverterTest.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/util/XmlConverterTest.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -39,6 +39,7 @@
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.require("orp.util.XmlConverter");
+  dojo.require("orp.util.Util");
 
   XmlTextNodeToAttributeSpecifier = orp.util.XmlTextNodeToAttributeSpecifier;
   XmlAttributeToAttributeSpecifier = orp.util.XmlAttributeToAttributeSpecifier;
@@ -86,7 +87,7 @@
     for (var j in listOfAttributes) {
       names.push(listOfAttributes[j].getDisplayName());
     }
-    hasAll = Util.areObjectsInSet(["food:name", "food:color", "food:flavor"], names);
+    hasAll = orp.util.areObjectsInSet(["food:name", "food:color", "food:flavor"], names);
     assertTrue('Each item should have attributes called "food:name", "food:color" and "food:flavor".', hasAll);  
   }
 }
@@ -115,7 +116,7 @@
     for (var j in listOfAttributes) {
       names.push(listOfAttributes[j].getDisplayName());
     }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Flavor".', Util.areObjectsInSet(["Category", "Name", "Flavor"], names));
+    assertTrue('Each item should have attributes called "Category", "Name" and "Flavor".', orp.util.areObjectsInSet(["Category", "Name", "Flavor"], names));
   }
 }
 
@@ -139,7 +140,7 @@
   listOfFlavors = cheesePuff.getEntriesForAttribute(flavorAttribute);
   assertTrue("'cheese puff' should have 2 flavors.", listOfFlavors.length == 2);
   var flavorNames = [listOfFlavors[0].getValue(), listOfFlavors[1].getValue()];
-  assertTrue("'cheese puff' should have flavors called 'salty' and 'cheesy'.", Util.areObjectsInSet(['salty', 'cheesy'], flavorNames));
+  assertTrue("'cheese puff' should have flavors called 'salty' and 'cheesy'.", orp.util.areObjectsInSet(['salty', 'cheesy'], flavorNames));
 }
 
 function testNestedXmlConversion() {
@@ -156,7 +157,7 @@
     for (var j in listOfAttributes) {
       names.push(listOfAttributes[j].getDisplayName());
     }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Vitamin C".', Util.areObjectsInSet(["Category", "Name", "Vitamin C"], names));
+    assertTrue('Each item should have attributes called "Category", "Name" and "Vitamin C".', orp.util.areObjectsInSet(["Category", "Name", "Vitamin C"], names));
   }
 }
 
@@ -180,9 +181,9 @@
         listOfIds.push(item.getSingleEntryFromAttribute(listOfAttributes[j]).getValue());
       }
     }
-    assertTrue('Each item should have attributes called "Category", "Name" and "Food ID".', Util.areObjectsInSet(["Category", "Name", "Food ID"], names));
+    assertTrue('Each item should have attributes called "Category", "Name" and "Food ID".', orp.util.areObjectsInSet(["Category", "Name", "Food ID"], names));
   }
-  assertTrue('Values of the "Food ID" attribute should include "32", "47" and "114".', Util.areObjectsInSet(["32", "47", "114"], listOfIds));
+  assertTrue('Values of the "Food ID" attribute should include "32", "47" and "114".', orp.util.areObjectsInSet(["32", "47", "114"], listOfIds));
 }
 
 function testExpectedType() {

Modified: trunk/tests/view/LintTest.html
===================================================================
--- trunk/tests/view/LintTest.html	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/tests/view/LintTest.html	2005-09-20 20:36:08 UTC (rev 333)
@@ -16,7 +16,6 @@
     <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
     <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script type="text/javascript" src="../../third_party/jslint/fulljslint.js"></script>
-    <script type="text/javascript" src="../../source/util/Util.js"></script>
     <script type="text/javascript" src="LintTest.js"></script>
   </head>
   

Modified: trunk/third_party/gtd_tiddlywiki/FileSaver.js
===================================================================
--- trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-20 03:39:12 UTC (rev 332)
+++ trunk/third_party/gtd_tiddlywiki/FileSaver.js	2005-09-20 20:36:08 UTC (rev 333)
@@ -109,7 +109,7 @@
 FileSaver.prototype._saveTextToFile = function(text, fileUrl, append) {
   // Make sure we were loaded from a "file:" URL
   if (window.location.protocol != "file:") {
-    Util.assert(false, 'FileSaver.js can only be used for pages loaded from a "file:///" location');
+    orp.util.assert(false, 'FileSaver.js can only be used for pages loaded from a "file:///" location');
   }
 
   var success = this._mozillaSaveToFile(text, fileUrl, append);
@@ -173,7 +173,7 @@
     return false;
   }
   if (append) {
-    Util.assert(false, "PENDING: still need to write code for this");
+    orp.util.assert(false, "PENDING: still need to write code for this");
   } else {
     var file = fileSystemObject.OpenTextFile(filePath, 2, -1, 0);
   }



From skinner at berlios.de  Thu Sep 22 05:48:53 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 22 Sep 2005 05:48:53 +0200
Subject: [openrecord-svn] r335 - trunk/source
Message-ID: <200509220348.j8M3mrTT022411@sheep.berlios.de>

Author: skinner
Date: 2005-09-22 05:48:47 +0200 (Thu, 22 Sep 2005)
New Revision: 335

Modified:
   trunk/source/OpenRecordLoader.js
Log:
Finished porting everything over to use the Dojo package system.  Moved the unit test for the model code over into the tests directory.  Moved FileSaver.js out of third_party and into model, because that made life easier for loading it via Dojo.

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-09-22 03:46:27 UTC (rev 334)
+++ trunk/source/OpenRecordLoader.js	2005-09-22 03:48:47 UTC (rev 335)
@@ -118,8 +118,10 @@
 dojo.hostenv.setModulePrefix("orp", "../../../source");
 
 OpenRecordLoader.loadEverything();
+
 dojo.require("orp.model.World");
 dojo.require("orp.view.RootView");
+
 dojo.hostenv.writeIncludes(); // needed when using "debugAtAllCosts: true"
 
 window.onload = function() { 



From skinner at berlios.de  Thu Sep 22 22:41:47 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 22 Sep 2005 22:41:47 +0200
Subject: [openrecord-svn] r336 - trunk/web_pages/content
Message-ID: <200509222041.j8MKflFB007778@sheep.berlios.de>

Author: skinner
Date: 2005-09-22 22:41:46 +0200 (Thu, 22 Sep 2005)
New Revision: 336

Modified:
   trunk/web_pages/content/dev.html
Log:
On http://openrecord.org/dev.html, added a link to the WebSVN source code browser.


Modified: trunk/web_pages/content/dev.html
===================================================================
--- trunk/web_pages/content/dev.html	2005-09-22 03:48:47 UTC (rev 335)
+++ trunk/web_pages/content/dev.html	2005-09-22 20:41:46 UTC (rev 336)
@@ -23,7 +23,8 @@
   <p>All of the OpenRecord source code is publicly available on the web.  You can
   use your web browser to look at the code.</p>
   <ul>
-    <li class="detail"><a href="http://svn.berlios.de/viewcvs/openrecord/" rel="external">browse the source code</a></li>
+    <li class="detail"><a href="http://svn.berlios.de/viewcvs/openrecord/" rel="external">browse the source code (using ViewCVS)</a></li>
+    <li class="detail"><a href="http://svn.berlios.de/wsvn/openrecord" rel="external">browse the source code (using WebSVN)</a></li>
   </ul>
 
   <h2>Source code: downloading</h2>



From skinner at berlios.de  Thu Sep 22 22:52:48 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Thu, 22 Sep 2005 22:52:48 +0200
Subject: [openrecord-svn] r337 - in trunk: documentation source source/model tests
Message-ID: <200509222052.j8MKqmTn008995@sheep.berlios.de>

Author: skinner
Date: 2005-09-22 22:52:47 +0200 (Thu, 22 Sep 2005)
New Revision: 337

Added:
   trunk/tests/TestSuite.html
Removed:
   trunk/source/TestSuite.html
Modified:
   trunk/documentation/release_planning.txt
   trunk/source/model/ContentRecord.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/Ordinal.js
   trunk/source/model/Record.js
   trunk/source/model/Vote.js
Log:
Added tasks to release_planning.txt.  In model, replaced old ._Record() and ._ContentRecord() methods with standard superclass constructor calls: Record.call() and ContentRecord.call().  Moved TestSuite.html over to the tests directory.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/documentation/release_planning.txt	2005-09-22 20:52:47 UTC (rev 337)
@@ -353,7 +353,14 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
 brian  |          | 0.5  IED|  1. look into using the Dojo Package System
-       |          | 0.5+    |     convert code to use Dojo Package System
+brian  |          | 0.5+    |     convert code to use Dojo Package System
+       |          |         |     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
+       |          |         |     try to get djConfig.debugAtAllCosts to work (see sandbox.html)
+       |          |         |     try to replace /source/util/Cookie.js with dojo.io.cookies
+       |          |         |     try to replace Util.js functions with dojo.lang functions
+       |          |         |     move isUuid out of Util.js
+brian  |          | 0    IED|     in model, get rid of ._Record() and ._ContentRecord()
+       |          |         |     make some sort of assertType() method
 brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
 brian  | 0.25 IED | 0.25 IED|     refactor UUID constructor API, and other UUID improvements
        |          |         |  2. create a FakeStorage class, + rename FileSaver + HttpSaver

Deleted: trunk/source/TestSuite.html
===================================================================
--- trunk/source/TestSuite.html	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/source/TestSuite.html	2005-09-22 20:52:47 UTC (rev 337)
@@ -1,92 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
-<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
-
-<!-- 
- Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
-  
- Copyright rights relinquished under the Creative Commons  
- Public Domain Dedication:
-    http://creativecommons.org/licenses/publicdomain/
--->
-
-  <head>
-    <title>OpenRecord Test Suite</title>
-
-    <script type="text/javascript" src="../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
-    <script type="text/javascript">
-      function suite() {
-        var testSuite = new top.jsUnitTestSuite();
-        testSuite.addTestSuite(openRecordTestSuite());
-        return testSuite;
-      }
-      
-      function openRecordTestSuite() {
-        var testSuite = new window.top.jsUnitTestSuite();
-        testSuite.addTestPage("../../../tests/SimpleTest.html");
-        testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
-        testSuite.addTestPage("../../../tests/util/TestSuite.html");
-        testSuite.addTestPage("../../../tests/model/TestSuite.html");
-        testSuite.addTestPage("../../../tests/view/LintTest.html");
-        testSuite.addTestPage("../../../tests/LintTest.html");
-        return testSuite;
-      }
-    </script>
-  </head>
-  
-  <body>
-    <h1>OpenRecord Test Suite</h1>
-
-    <p>This page is used to run unit tests for the JavaScript code in the 
-    OpenRecord project.</p>
-    
-    <p>&nbsp;</p>
-    <hr/>
-    <p>You should be able to run these unit tests by going to
-    <a href="../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
-    onclick="href+=window.location.href;" rel="external">the local testRunner 
-    page</a>, and hitting the <b>Run</b> button.</p>
-
-    <p>To see the tests, open this .html file in a text editor. Or, within a  
-    web browser, you should be able see the source for this file by using 
-    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
-    may be in this file, or they may be in a separate file that has the
-    same name as this one, except with a .js extension instead of a .html
-    extension.</p>
- 
-    <p>The unit tests are set up to run in the
-    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
-    written by 
-    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
-
-    <p>&nbsp;</p>
-    <hr/>
-    <p class="copyright">You can copy freely from this work &mdash; copyright 
-    rights relinquished under the Creative Commons  
-    <a rel="license external" 
-    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
-    Dedication</a>.</p>
-
-<!-- Creative Commons metadata for Public Domain License 
-
-<rdf:RDF xmlns="http://web.resource.org/cc/"
-    xmlns:dc="http://purl.org/dc/elements/1.1/"
-    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
-<Work rdf:about="">
-   <dc:title>openrecord.org</dc:title>
-   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
-   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
-</Work>
-
-<License rdf:about="http://web.resource.org/cc/PublicDomain">
-   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
-   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
-   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
-</License>
-
-</rdf:RDF>
-
--->
-  </body>
-</html>
-

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/source/model/ContentRecord.js	2005-09-22 20:52:47 UTC (rev 337)
@@ -55,10 +55,12 @@
  * and the class Entry.
  *
  * @scope    public instance constructor
- * @syntax   DO NOT CALL THIS CONSTRUCTOR
+ * @param    world    The world that this ContentRecord is a part of. 
+ * @param    uuid    The UUID for this ContentRecord. 
  */
-orp.model.ContentRecord = function() {
-  orp.model.Record.call(this);
+orp.model.ContentRecord = function(world, uuid) {
+  orp.model.Record.call(this, world, uuid);
+  
   // Don't create these properties until we know we need them.
   // this._setOfVotes = null;
   // this._setOfOrdinals = null;
@@ -72,18 +74,6 @@
 // -------------------------------------------------------------------
 
 /**
- * Called from the constructor function of each subclass of ContentRecord.
- *
- * @scope    protected instance method
- * @param    world    The world that this ContentRecord is a part of. 
- * @param    uuid    The UUID for this ContentRecord. 
- */
-orp.model.ContentRecord.prototype._ContentRecord = function(world, uuid) {
-  this._Record(world, uuid);
-};
-
-
-/**
  * Records a user's vote to retain or delete this ContentRecord.
  *
  * @scope    protected instance method

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/source/model/Entry.js	2005-09-22 20:52:47 UTC (rev 337)
@@ -63,8 +63,7 @@
  * @param    uuid    The UUID for this entry. 
  */
 orp.model.Entry = function(world, uuid) {
-  orp.model.ContentRecord.call(this);
-  this._ContentRecord(world, uuid);
+  orp.model.ContentRecord.call(this, world, uuid);
  
   this._previousEntry = null;
   this._listOfSubsequentEntries = [];

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/source/model/Item.js	2005-09-22 20:52:47 UTC (rev 337)
@@ -65,8 +65,7 @@
  * @param    uuid    The UUID for this item. 
  */
 orp.model.Item = function(world, uuid) {
-  orp.model.ContentRecord.call(this);
-  this._ContentRecord(world, uuid);
+  orp.model.ContentRecord.call(this, world, uuid);
   
   this._hashTableOfEntryListsKeyedByAttributeUuid = {};
   this._provisionalFlag = false;

Modified: trunk/source/model/Ordinal.js
===================================================================
--- trunk/source/model/Ordinal.js	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/source/model/Ordinal.js	2005-09-22 20:52:47 UTC (rev 337)
@@ -56,7 +56,7 @@
  * @param    inOrdinalNumber    The ordinal number itself. 
  */
 orp.model.Ordinal = function(world, uuid, contentRecord, ordinalNumber) {
-  this._Record(world, uuid);
+  orp.model.Record.call(this, world, uuid);
 
   this._contentRecord = contentRecord;
   this._ordinalNumber = ordinalNumber;

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/source/model/Record.js	2005-09-22 20:52:47 UTC (rev 337)
@@ -53,27 +53,10 @@
  * for Item and Entry.
  *
  * @scope    public instance constructor
- * @syntax   DO NOT CALL THIS CONSTRUCTOR
- */
-orp.model.Record = function() {
-  // Don't create these properties until we know we need them.
-  // this._creationTimestamp = null;
-  // this._creationUserstamp = null;
-};
-
-
-// -------------------------------------------------------------------
-// Package/module methods           
-// -------------------------------------------------------------------
-
-/**
- * Called from the constructor function of each subclass of Record.
- *
- * @scope    protected instance method
  * @param    world    The world that this Record is a part of. 
  * @param    uuid    The UUID for this Record. 
  */
-orp.model.Record.prototype._Record = function(world, uuid) {
+orp.model.Record = function(world, uuid) {
   orp.util.assert(orp.util.isUuidValue(uuid));
   if (orp.util.isString(uuid)) {
     var uuidString = uuid;
@@ -84,10 +67,13 @@
   
   this._world = world;
   this._uuid = uuid;
+
+  // Don't create these properties until we know we need them.
+  // this._creationTimestamp = null;
+  // this._creationUserstamp = null;
 };
 
 
-
 // -------------------------------------------------------------------
 // Simple accessor methods
 // -------------------------------------------------------------------

Modified: trunk/source/model/Vote.js
===================================================================
--- trunk/source/model/Vote.js	2005-09-22 20:41:46 UTC (rev 336)
+++ trunk/source/model/Vote.js	2005-09-22 20:52:47 UTC (rev 337)
@@ -56,7 +56,7 @@
  * @param    retainFlag    True if this is a vote to retain. False if this is a vote to delete. 
  */
 orp.model.Vote = function(world, uuid, contentRecord, retainFlag) {
-  this._Record(world, uuid);
+  orp.model.Record.call(this, world, uuid);
 
   this._contentRecord = contentRecord;
   this._retainFlag = retainFlag;

Copied: trunk/tests/TestSuite.html (from rev 334, trunk/source/TestSuite.html)



From skinner at berlios.de  Fri Sep 23 22:39:01 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Fri, 23 Sep 2005 22:39:01 +0200
Subject: [openrecord-svn] r338 - in trunk: documentation source source/lang source/model source/util source/view tests tests/lang tests/model tests/util
Message-ID: <200509232039.j8NKd1Zx004524@sheep.berlios.de>

Author: skinner
Date: 2005-09-23 22:38:57 +0200 (Fri, 23 Sep 2005)
New Revision: 338

Added:
   trunk/source/lang/
   trunk/source/lang/Lang.js
   trunk/tests/lang/
   trunk/tests/lang/LangTest.html
   trunk/tests/lang/LangTest.js
Modified:
   trunk/documentation/release_planning.txt
   trunk/source/DetailPlugin.js
   trunk/source/TablePlugin.js
   trunk/source/model/ContentRecord.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Entry.js
   trunk/source/model/FileSaver.js
   trunk/source/model/Item.js
   trunk/source/model/QueryRunner.js
   trunk/source/model/Record.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/model/World.js
   trunk/source/util/Cookie.js
   trunk/source/util/CsvParser.js
   trunk/source/util/LintTool.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Util.js
   trunk/source/util/Uuid.js
   trunk/source/util/XmlConverter.js
   trunk/source/view/EntryView.js
   trunk/source/view/ItemView.js
   trunk/source/view/MultiEntriesView.js
   trunk/source/view/NavbarView.js
   trunk/source/view/PageView.js
   trunk/source/view/RootView.js
   trunk/source/view/SectionView.js
   trunk/source/view/View.js
   trunk/tests/TestSuite.html
   trunk/tests/model/TestReorderingForSpecialCases.js
   trunk/tests/model/TestReorderingForTypicalOrdinals.js
   trunk/tests/util/UtilTest.js
Log:
Created source/lang/Lang.js, which has a few assertion methods.  Switched from orp.util.isXXX() methods to dojo.lang.isXXX() methods.  Switched from orp.util.assert() to orp.lang.assert().

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/documentation/release_planning.txt	2005-09-23 20:38:57 UTC (rev 338)
@@ -358,7 +358,10 @@
        |          |         |     try to get djConfig.debugAtAllCosts to work (see sandbox.html)
        |          |         |     try to replace /source/util/Cookie.js with dojo.io.cookies
        |          |         |     try to replace Util.js functions with dojo.lang functions
+       |          |         |     try using Ant and the Dojo build system to build OpenRecord into a single-file 
        |          |         |     move isUuid out of Util.js
+       |          |         |     change "endOfLife()" to "destroy()"
+       |          |         |     move XmlConverter.js out of util, because it depends on model code
 brian  |          | 0    IED|     in model, get rid of ._Record() and ._ContentRecord()
        |          |         |     make some sort of assertType() method
 brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard

Modified: trunk/source/DetailPlugin.js
===================================================================
--- trunk/source/DetailPlugin.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/DetailPlugin.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -37,6 +37,7 @@
 dojo.require("orp.view.SectionView");
 dojo.require("orp.util.Util");
 dojo.require("orp.model.Item");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -134,7 +135,7 @@
  * @return   A string containing the XHTML to display the item.
  */
 orp.DetailPlugin.prototype.createTableForItem = function (inItem) {
-  orp.util.assert(inItem instanceof orp.model.Item);
+  orp.lang.assert(inItem instanceof orp.model.Item);
   
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/TablePlugin.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -36,11 +36,12 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.TablePlugin");
 dojo.require("orp.view.PluginView");
-dojo.require("orp.util.CsvParser");
 dojo.require("orp.view.RootView");
 dojo.require("orp.view.SectionView");
 dojo.require("orp.view.MultiEntriesView");
 dojo.require("orp.model.Item");
+dojo.require("orp.util.CsvParser");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -139,7 +140,7 @@
  * @return   This method returns 0 if the items are comparable. If _ascendingOrder is true, itemA is less than itemB, this method returns -1, otherwise it returns +1. 
  */
 orp.TablePlugin.prototype.compareItemsBySortAttribute = function(itemA, itemB) {
-  orp.util.assert(this._sortAttribute !== null);
+  orp.lang.assert(this._sortAttribute !== null);
   var strA = itemA.getSingleStringValueFromAttribute(this._sortAttribute).toLowerCase();
   var strB = itemB.getSingleStringValueFromAttribute(this._sortAttribute).toLowerCase();
   var ascendingInt = this._ascendingOrder ? -1 : 1;
@@ -165,7 +166,7 @@
     // columns, and we just want to use that list.
     for (var i in listOfTableColumnEntries) {
       anAttribute = listOfTableColumnEntries[i].getValue();
-      orp.util.assert(anAttribute instanceof orp.model.Item);
+      orp.lang.assert(anAttribute instanceof orp.model.Item);
       displayAttributes.push(anAttribute);
     }
   } else {
@@ -371,7 +372,7 @@
   if (listOfTableColumnEntries.length > 0) {
     // If we get here, it means this table has a saved list of user-selected
     // columns, and we just want to re-order that list.
-    orp.util.assert(this._displayAttributes.length == listOfTableColumnEntries.length);
+    orp.lang.assert(this._displayAttributes.length == listOfTableColumnEntries.length);
     var draggedEntry = listOfTableColumnEntries[indexOfDraggedAttribute];
     var droppedOnEntry = listOfTableColumnEntries[indexOfDroppedOnAttribute];
     if (indexOfDraggedAttribute > indexOfDroppedOnAttribute) {
@@ -575,7 +576,7 @@
  * @scope    public instance method
  */
 orp.TablePlugin.prototype.selectRow = function(rowElement) {
-  orp.util.assert(rowElement instanceof HTMLTableRowElement);
+  orp.lang.assert(rowElement instanceof HTMLTableRowElement);
   if (rowElement != this._lastSelectedRow) {
     if (this._lastSelectedRow) {
       this._lastSelectedRow.className = "";
@@ -656,7 +657,7 @@
       world.beginTransaction();
     }
     listOfFields = listOfRecords[i];
-    orp.util.assert(listOfFields.length == listOfAttributes.length);
+    orp.lang.assert(listOfFields.length == listOfAttributes.length);
     var newItem = world.newItem();
     world.setItemToBeIncludedInQueryResultList(newItem, this.getQuerySpec());
     for (j in listOfAttributes) {

Added: trunk/source/lang/Lang.js
===================================================================
--- trunk/source/lang/Lang.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/lang/Lang.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -0,0 +1,174 @@
+/*****************************************************************************
+ Lang.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+
+// -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.lang.Lang");
+dojo.require("dojo.lang.Lang");
+
+
+// -------------------------------------------------------------------
+// Public Functions
+// -------------------------------------------------------------------
+
+orp.lang.throwError = function(message) {
+  var extendedMessage = "";
+  var exception = new Error(message);  // create an exception, just to get a stack trace
+  if (exception.stack) {
+    // We're in Firefox
+    extendedMessage += "\nHere's a trimmed version of the stack trace:\n";
+    var stackString = exception.stack;
+    var stackList = stackString.split("\n");
+    stackList.shift(); // get rid of the 1st line: "Error(...message...)@:0"
+    stackList.shift(); // get rid of the 2nd line: "(false)@file ... Lang.js:45" from: var exception = new Error(message);
+    stackList.shift(); // get rid of the 3rd line: "(false)@file ... Lang.js:88" from: orp.lang.throwError(errorMessage);
+    //stackList.pop();   // get rid of the trailing "\n"
+    //stackList.pop();   // get rid of the "@:0" at the end of the list
+    for (var key in stackList) {
+      var string = stackList[key];
+      var result = string.match(/[^\/]*$/);
+      stackList[key] = result[0];
+    }
+    stackString = stackList.join("\n");
+    extendedMessage += stackString;
+    throw new Error(message + extendedMessage);
+  } else {
+    // We're in IE
+    throw exception;
+  }
+};
+
+
+/**
+ * Throws an exception if the assertion fails.
+ *
+ * If the asserted condition is true, this method does nothing. If the 
+ * condition is false, this throws an error with a error message.
+ *
+ * @scope    public function
+ * @param    booleanValue    A boolean value, which needs to be true for the assertion to succeed. 
+ * @param    message    Optional. A string describing the assertion.
+ */
+orp.lang.assert = function(booleanValue, message) {
+  if (dojo.lang.isBoolean(booleanValue)) {
+    if (!booleanValue) {
+      var errorMessage = "An assert statement failed.\n" +
+        "The method orp.lang.assert() was called with a 'false' value.\n";
+      if (message) {
+        errorMessage += "Here's the assert message:\n" + message + "\n";
+      }
+      orp.lang.throwError(errorMessage);
+    }
+  } else {
+    throw new Error("Badly formed assert statement.\n" +
+      "The method orp.lang.assert() was passed a non-boolean argument.");
+  }
+};
+
+
+/**
+ * Given a value and a data type, this method checks the type of the value
+ * to make sure it matches the data type, and throws an exception if there
+ * is a mismatch.
+ *
+ * Examples:
+ * <pre>
+ *   orp.lang.assertType("foo", String);
+ *   orp.lang.assertType(12345, Number);
+ *   orp.lang.assertType(false, Boolean);
+ *   orp.lang.assertType([6, 8], Array);
+ *   orp.lang.assertType(orp.lang.assertType, Function);
+ *   orp.lang.assertType({foo: "bar"}, Object);
+ *   orp.lang.assertType(new Date(), Date);
+ * </pre>
+ *
+ * @scope    public function
+ * @param    value    Any literal value or object instance. 
+ * @param    type    A class of object, or a literal type.
+ */
+orp.lang.assertType = function(value, type) {
+  if (!orp.lang.assertType._errorMessage) {
+    orp.lang.assertType._errorMessage = "Type mismatch: orp.lang.assertType() failed.";
+  }
+  var errorMessage = orp.lang.assertType._errorMessage;
+  switch (type) {
+    case Array:
+      orp.lang.assert(dojo.lang.isArray(value), errorMessage);
+      break;
+    case Function:
+      orp.lang.assert(dojo.lang.isFunction(value), errorMessage);
+      break;
+    case String:
+      orp.lang.assert(dojo.lang.isString(value), errorMessage);
+      break;
+    case Number:
+      orp.lang.assert(dojo.lang.isNumber(value), errorMessage);
+      break;
+    case Boolean:
+      orp.lang.assert(dojo.lang.isBoolean(value), errorMessage);
+      break;     
+    case Object:
+      orp.lang.assert(dojo.lang.isObject(value), errorMessage);
+      break;
+    default:
+      orp.lang.assert((value instanceof type), errorMessage);
+      break;
+  }
+};
+
+
+/**
+ * Given a value and a data type, this method checks the type of the value
+ * to make sure it matches the data type, and throws an exception if there
+ * is a mismatch.  If the value is 'undefined', this method does not throw
+ * an exception.
+ *
+ * Examples:
+ * <pre>
+ *   var foo;
+ *   orp.lang.assertType(foo, String);
+ *   foo = "bar";
+ *   orp.lang.assertType(foo, String);
+ * </pre>
+ *
+ * @scope    public function
+ * @param    value    Optional.  Any literal value, or any object instance, or the value 'undefined'. 
+ * @param    type    A class of object, or a literal type.
+ */
+orp.lang.assertTypeForOptionalValue = function(value, type) {
+  if (!dojo.lang.isUndefined(value)) {
+    orp.lang.assertType(value, type);
+  }
+};
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/model/ContentRecord.js
===================================================================
--- trunk/source/model/ContentRecord.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/ContentRecord.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -37,6 +37,7 @@
 dojo.provide("orp.model.ContentRecord");
 dojo.require("orp.model.Record");
 dojo.require("orp.model.World");
+dojo.require("orp.lang.Lang");
 
 
 // -------------------------------------------------------------------
@@ -164,19 +165,19 @@
       break;
     case orp.model.World.RetrievalFilter.SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.UNABRIDGED:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
   }
   return ordinalNumber;
@@ -227,18 +228,18 @@
       break;
     case orp.model.World.RetrievalFilter.SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.UNABRIDGED:
       hasBeenDeleted = false;
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
   }
   return hasBeenDeleted;
@@ -272,7 +273,7 @@
   
   if (firstOrdinalNumber && thirdOrdinalNumber) {
     if (firstOrdinalNumber == thirdOrdinalNumber) {
-      orp.util.assert(false, "Tried to reorder between two items with the same ordinal.");
+      orp.lang.assert(false, "Tried to reorder between two items with the same ordinal.");
     }
     else {
       if (firstOrdinalNumber > thirdOrdinalNumber) {

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/DeltaVirtualServer.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -38,6 +38,7 @@
 dojo.require("orp.model.Vote");
 dojo.require("orp.model.FileSaver");
 dojo.require("orp.model.HttpSaver");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -122,14 +123,14 @@
 orp.model.DeltaVirtualServer.prototype._loadWorldFromJsonString = function(jsonRepositoryString) {
 
   // load the list of records
-  orp.util.assert(orp.util.isString(jsonRepositoryString));
+  orp.lang.assertType(jsonRepositoryString, String);
   var dehydratedRecords = null;
   eval("dehydratedRecords = " + jsonRepositoryString + ";");
-  orp.util.assert(orp.util.isObject(dehydratedRecords));
+  orp.lang.assertType(dehydratedRecords, Object);
   var recordFormat = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.FORMAT];
-  orp.util.assert(recordFormat == orp.model.StubVirtualServer.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
+  orp.lang.assert(recordFormat == orp.model.StubVirtualServer.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
   var listOfRecords = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.RECORDS];
-  orp.util.assert(orp.util.isArray(listOfRecords));
+  orp.lang.assertType(listOfRecords, Array);
   
   var listOfUsers = null;
   
@@ -381,7 +382,7 @@
             if (generateComments) {valueComment = this._getTypedDisplayStringForItem(contentData);}
             break;
           default:
-            orp.util.assert(false, "no such type: " + entryType.getDisplayString());
+            orp.lang.assert(false, "no such type: " + entryType.getDisplayString());
         }
         listOfStringsForEntry.push(indent + '        "' + JSON_MEMBER.VALUE + '": ' + valueString);
         if (generateComments) {

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/Entry.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -35,6 +35,7 @@
 dojo.provide("orp.model.Entry");
 dojo.require("orp.model.ContentRecord");
 dojo.require("orp.model.World");
+dojo.require("orp.lang.Lang");
 
 
 // -------------------------------------------------------------------
@@ -125,7 +126,7 @@
     else if (value instanceof orp.model.Item) {
       this._type = this.getWorld().getTypeCalledItem();
     }
-    else {orp.util.assert(false, "unknown data type:" + (typeof value) + ' value: ' + value);}
+    else {orp.lang.assert(false, "unknown data type:" + (typeof value) + ' value: ' + value);}
   }
   this._value = value;
 };
@@ -195,10 +196,10 @@
   if (this._item instanceof orp.model.Item) {
     this._item._addRehydratedEntry(this, this._attribute);
   } else {
-    orp.util.assert(orp.util.isArray(this._item));
-    orp.util.assert(this._item.length == 2);
-    orp.util.assert(orp.util.isArray(this._attribute));
-    orp.util.assert(this._attribute.length == 2);
+    orp.lang.assertType(this._item, Array);
+    orp.lang.assertType(this._attribute, Array);
+    orp.lang.assert(this._item.length == 2);
+    orp.lang.assert(this._attribute.length == 2);
     
     var firstItem = this._item[0];
     var secondItem = this._item[1];
@@ -290,13 +291,13 @@
  * @return   The item that is connected to the given item.
  */
 orp.model.Entry.prototype.getConnectedItem = function(item) {
-  orp.util.assert(item instanceof orp.model.Item);
+  orp.lang.assert(item instanceof orp.model.Item);
   if (this._item == item) {
     if (this._type == this.getWorld().getTypeCalledItem()) {
       return this._value;
     }
   }
-  if (orp.util.isArray(this._item)) {
+  if (dojo.lang.isArray(this._item)) {
     if (this._item[0] == item) {
       return this._item[1];
     }
@@ -323,7 +324,7 @@
     if (this._item[1] == item) {
       return this._item[0];
     }
-    orp.util.assert(false, "orp.model.Entry.getValue() was called on a connection entry, but was not passed an item as a parameter.");
+    orp.lang.assert(false, "orp.model.Entry.getValue() was called on a connection entry, but was not passed an item as a parameter.");
   }
   return this._value; 
 };
@@ -341,7 +342,7 @@
     case this.getWorld().getTypeCalledNumber():
       var originalString = this._value.toString();
       var arrayOfTwoStrings = originalString.split('.');
-      orp.util.assert(arrayOfTwoStrings.length < 3);
+      orp.lang.assert(arrayOfTwoStrings.length < 3);
       wholeNumberString = arrayOfTwoStrings[0];
       fractionalNumberString = null;
       if (arrayOfTwoStrings.length == 2) {
@@ -385,7 +386,7 @@
       if (callingItem) {
         if (callingItem == firstItem) {returnString = secondItem.getDisplayString();}
         else if (callingItem == secondItem) {returnString = firstItem.getDisplayString();}
-        else {orp.util.assert(false, "callingItem isn't part of this orp.model.Entry");}
+        else {orp.lang.assert(false, "callingItem isn't part of this orp.model.Entry");}
       }
       else {
         returnString = 'connection between "' + firstItem.getDisplayString() + '" and "' + secondItem.getDisplayString() + '"';
@@ -429,17 +430,17 @@
       return true;
     case orp.model.World.RetrievalFilter.SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.UNABRIDGED:
       return false;
     default:
       // We should never get here.  If we get here, it's an error.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
   }
 };

Modified: trunk/source/model/FileSaver.js
===================================================================
--- trunk/source/model/FileSaver.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/FileSaver.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -56,6 +56,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.model.FileSaver");
 dojo.require("orp.model.DeltaVirtualServer");
+dojo.require("orp.lang.Lang");
 
 /**
  * The FileSaver class knows how to save text to a local file.
@@ -115,7 +116,7 @@
 orp.model.FileSaver.prototype._saveTextToFile = function(text, fileUrl, append) {
   // Make sure we were loaded from a "file:" URL
   if (window.location.protocol != "file:") {
-    orp.util.assert(false, 'FileSaver.js can only be used for pages loaded from a "file:///" location');
+    orp.lang.assert(false, 'FileSaver.js can only be used for pages loaded from a "file:///" location');
   }
 
   var success = this._mozillaSaveToFile(text, fileUrl, append);
@@ -183,7 +184,7 @@
     return false;
   }
   if (append) {
-    orp.util.assert(false, "PENDING: still need to write code for this");
+    orp.lang.assert(false, "PENDING: still need to write code for this");
   } else {
     var file = fileSystemObject.OpenTextFile(filePath, 2, -1, 0);
   }

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/Item.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -35,6 +35,7 @@
 dojo.provide("orp.model.Item");
 dojo.require("orp.model.ContentRecord");
 dojo.require("orp.model.World");
+dojo.require("orp.lang.Lang");
 dojo.require("dojo.lang.*");
 
 // -------------------------------------------------------------------
@@ -163,14 +164,14 @@
  * @throws   Throws an Error if no user is logged in.
  */
 orp.model.Item.prototype.addEntry = function(namedParameters) {
-  orp.util.assert(dojo.lang.isObject(namedParameters));
+  orp.lang.assert(dojo.lang.isObject(namedParameters));
   var arg = orp.model.Item.NamedParameters;
   var value = namedParameters[arg.value];
   var attribute = namedParameters[arg.attribute];
   var type = namedParameters[arg.type];
   
   // Check for typos in parameter names
-  orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type]));
+  orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type]));
   
   if (!attribute) {
     attribute = this.getWorld().getAttributeCalledUnfiled();
@@ -199,7 +200,7 @@
  * @throws   Throws an Error if no user is logged in.
  */
 orp.model.Item.prototype.replaceEntry = function(namedParameters) {
-  orp.util.assert(dojo.lang.isObject(namedParameters));
+  orp.lang.assert(dojo.lang.isObject(namedParameters));
   var arg = orp.model.Item.NamedParameters;
   var value = namedParameters[arg.value];
   var attribute = namedParameters[arg.attribute];
@@ -207,9 +208,9 @@
   var previousEntry = namedParameters[arg.previousEntry];
 
   // Check for typos in parameter names
-  orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type, arg.previousEntry]));
+  orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [arg.value, arg.attribute, arg.type, arg.previousEntry]));
   
-  orp.util.assert(dojo.lang.isObject(previousEntry));
+  orp.lang.assert(dojo.lang.isObject(previousEntry));
   if (!attribute) {
     attribute = previousEntry.getAttributeForItem(this);
   }
@@ -280,8 +281,8 @@
  *
  */
 orp.model.Item.prototype.replaceEntryWithConnection = function(previousEntry, myAttribute, otherItem, otherAttribute) {
-  orp.util.assert(otherItem instanceof orp.model.Item);
-  orp.util.assert(myAttribute instanceof orp.model.Item);
+  orp.lang.assert(otherItem instanceof orp.model.Item);
+  orp.lang.assert(myAttribute instanceof orp.model.Item);
 
   // If we've just been asked to replace the string "Foo" with the string "Foo",
   // then don't even bother creating a new entry. 
@@ -290,9 +291,9 @@
     var oldPairOfAttributes = previousEntry.getAttribute();
     var oldPairOfItems = previousEntry.getItem();
     if (orp.util.isArray(oldPairOfAttributes)) {
-      orp.util.assert(orp.util.isArray(oldPairOfAttributes));
-      orp.util.assert(oldPairOfAttributes.length == 2);
-      orp.util.assert(oldPairOfItems.length == 2);
+      orp.lang.assertType(oldPairOfAttributes, Array);
+      orp.lang.assert(oldPairOfAttributes.length == 2);
+      orp.lang.assert(oldPairOfItems.length == 2);
       if (((oldPairOfAttributes[0] == myAttribute) &&  (oldPairOfAttributes[1] == otherAttribute) &&
         oldPairOfItems[0] == this && oldPairOfItems[1] == otherItem) ||
         ((oldPairOfAttributes[1] == myAttribute) &&  (oldPairOfAttributes[0] == otherAttribute) &&
@@ -375,7 +376,7 @@
  * @return   A list of entry objects.
  */
 orp.model.Item.prototype.getEntriesForAttribute = function(attribute) {
-  orp.util.assert(attribute instanceof orp.model.Item);
+  orp.lang.assert(attribute instanceof orp.model.Item);
   
   if (this._cachedEntriesKeyedByAttributeUuid !== null) {
     var listOfCachedEntries = this._cachedEntriesKeyedByAttributeUuid[attribute.getUuid()];
@@ -405,18 +406,18 @@
       break;
     case orp.model.World.RetrievalFilter.SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.UNABRIDGED:
       filteredListOfEntries = listOfEntriesForAttribute;
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
   }
   filteredListOfEntries.sort(orp.model.ContentRecord.compareOrdinals);
@@ -551,7 +552,7 @@
  *
  */
 orp.model.Item.prototype.getDisplayStringForEntry = function(entry) {
-  orp.util.assert(entry instanceof orp.model.Entry);
+  orp.lang.assert(entry instanceof orp.model.Entry);
   return entry.getDisplayString(this);
 };
 
@@ -643,7 +644,7 @@
  * @return Boolean. True if this item has an attribute with the entry
  */
 orp.model.Item.prototype.hasAttributeValue = function(attribute, value) {
-  orp.util.assert(attribute instanceof orp.model.Item);
+  orp.lang.assert(attribute instanceof orp.model.Item);
   var entryList = this.getEntriesForAttribute(attribute);
 
   // look at all the entries this item's attribute is assigned to, 
@@ -666,7 +667,7 @@
  * @return   A boolean.  True if the item has been assigned to the category.
  */
 orp.model.Item.prototype.isInCategory = function(category) {
-  orp.util.assert(category instanceof orp.model.Item);
+  orp.lang.assert(category instanceof orp.model.Item);
 
   var categoryAttribute = this.getWorld().getAttributeCalledCategory();
   return this.hasAttributeValue(categoryAttribute, category);

Modified: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/QueryRunner.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -33,6 +33,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.model.QueryRunner");
 dojo.require("orp.model.World");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -66,7 +67,7 @@
  * @param    observer    Optional. An object or method to be registered as an observer of the query. 
  */
 orp.model.QueryRunner = function(world, querySpec, observer) {
-  orp.util.assert(world instanceof orp.model.World);
+  orp.lang.assert(world instanceof orp.model.World);
   
   this._world = world;
   this._querySpec = querySpec;
@@ -195,7 +196,7 @@
  * @param    listOfChangeRecords    A list of the records that impacted the querySpec. 
  */
 orp.model.QueryRunner.prototype.observedItemHasChanged = function(querySpec, listOfChangeRecords) {
-  orp.util.assert(querySpec == this._querySpec);
+  orp.lang.assert(querySpec == this._querySpec);
   this._readQuerySpec();
   this._runQuery();
 };
@@ -243,7 +244,7 @@
       // by default the matching attribute is category
       this._matchingAttribute = this.getWorld().getAttributeCalledCategory();
     } else {
-      orp.util.assert(listOfMatchingAttributeEntries.length == 1, 'There should only be one matching attribute on a Query Spec item.');
+      orp.lang.assert(listOfMatchingAttributeEntries.length == 1, 'There should only be one matching attribute on a Query Spec item.');
       this._matchingAttribute = listOfMatchingAttributeEntries[0].getValue();
     }
 

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/Record.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -36,6 +36,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.model.Record");
 dojo.require("orp.util.TimeBasedUuid");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -57,14 +58,18 @@
  * @param    uuid    The UUID for this Record. 
  */
 orp.model.Record = function(world, uuid) {
-  orp.util.assert(orp.util.isUuidValue(uuid));
   if (orp.util.isString(uuid)) {
     var uuidString = uuid;
-    orp.util.assert(uuidString.length == 36);
     uuid = new orp.util.TimeBasedUuid(uuidString);
   }
-  orp.util.assert(orp.util.isUuid(uuid));
   
+  // Unfortunately, we need to treat 'world' and 'uuid' as 'Optional'. 
+  // I think this constructor is invoked by dj_inherits() calls 
+  // (in ContentRecord, Vote, and Ordinal), which do not pass
+  // in any values for world and uuid.
+  orp.lang.assertTypeForOptionalValue(uuid, orp.util.TimeBasedUuid);
+  orp.lang.assertTypeForOptionalValue(world, orp.model.World);
+  
   this._world = world;
   this._uuid = uuid;
 

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/StubVirtualServer.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -38,6 +38,7 @@
 dojo.require("orp.model.Transaction");
 dojo.require("orp.util.TimeBasedUuid");
 dojo.require("orp.util.DateValue");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -193,7 +194,8 @@
  * @return   A copy of the rawText string, with the special characters escaped. 
  */
 orp.model.StubVirtualServer.prototype.encodeText = function(rawText) {
-  orp.util.assert(orp.util.isString(rawText));
+  // orp.util.assert(orp.util.isString(rawText));
+  orp.lang.assertType(rawText, String);
 
   var returnString = rawText;
   // Note: it's important that we do '&' first, otherwise we'll accidentally
@@ -227,8 +229,9 @@
  * @return   A copy of the encodedText string, with the escaped characters replaced by the original special characters. 
  */
 orp.model.StubVirtualServer.prototype.decodeText = function(encodedText) {
-  orp.util.assert(orp.util.isString(encodedText));
-
+  // orp.util.assert(orp.util.isString(encodedText));
+  orp.lang.assertType(encodedText, String);
+  
   var returnString = encodedText;
   returnString = returnString.replace(new RegExp('&#13;','g'), "\r");
   returnString = returnString.replace(new RegExp('&#10;','g'), "\n");
@@ -272,7 +275,7 @@
  */
 orp.model.StubVirtualServer.prototype.endTransaction = function() {
   this._countOfNestedTransactions -= 1;
-  orp.util.assert(this._countOfNestedTransactions >= 0);
+  orp.lang.assert(this._countOfNestedTransactions >= 0);
 
   if (this._countOfNestedTransactions === 0) {
     var listOfChangesMade = this._saveChangesToServer();
@@ -541,7 +544,7 @@
   // Only one user can be logged in at once.  We consider it an error
   // if you try to log in a new user before logging out the old one.
   if (this._currentUser) {
-    orp.util.assert(false);
+    orp.lang.assert(false);
   }
   
   var isKnownUser = orp.util.isObjectInSet(user, this._listOfUsers);
@@ -604,7 +607,7 @@
  * @return   The item identified by the given UUID.
  */
 orp.model.StubVirtualServer.prototype.getItemFromUuid = function(uuid, observer) {
-  orp.util.assert(orp.util.isUuidValue(uuid));
+  orp.lang.assert(orp.util.isUuidValue(uuid));
   
   var item = this._hashTableOfItemsKeyedByUuid[uuid];
   if (item && observer) {
@@ -692,8 +695,8 @@
  * @param    query    A query item. 
  */
 orp.model.StubVirtualServer.prototype.setItemToBeIncludedInQueryResultList = function(item, query) {
-  orp.util.assert(item instanceof orp.model.Item);
-  orp.util.assert(query instanceof orp.model.Item);
+  orp.lang.assert(item instanceof orp.model.Item);
+  orp.lang.assert(query instanceof orp.model.Item);
   
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
   var attributeCalledQueryMatchingAttribute = this.getWorld().getAttributeCalledQueryMatchingAttribute();
@@ -709,7 +712,7 @@
     matchingAttribute = attributeCalledCategory;
   }
   else {
-    orp.util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    orp.lang.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
 
@@ -737,7 +740,7 @@
  * @return   A list of items.
  */
 orp.model.StubVirtualServer.prototype.getItemsInCategory = function(category) {
-  orp.util.assert(category instanceof orp.model.Item);
+  orp.lang.assert(category instanceof orp.model.Item);
 
   var attributeCalledItemsInCategory = this.getWorld().getAttributeCalledItemsInCategory();
   var listOfEntries = category.getEntriesForAttribute(attributeCalledItemsInCategory);
@@ -862,17 +865,19 @@
  */
 orp.model.StubVirtualServer.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
   var fileContentString = orp.util.getStringContentsOfFileAtURL(url);
-  orp.util.assert(orp.util.isString(fileContentString));
+  // orp.util.assert(orp.util.isString(fileContentString));
+  orp.lang.assertType(fileContentString, String);
   fileContentString += " ] }";
 
-  orp.util.assert(orp.util.isString(fileContentString));
   var dehydratedRecords = null;
   eval("dehydratedRecords = " + fileContentString + ";");
-  orp.util.assert(orp.util.isObject(dehydratedRecords));
+  // orp.util.assert(orp.util.isObject(dehydratedRecords));
+  orp.lang.assertType(dehydratedRecords, Object);
   var recordFormat = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.FORMAT];
-  orp.util.assert(recordFormat == orp.model.StubVirtualServer.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
+  orp.lang.assert(recordFormat == orp.model.StubVirtualServer.JSON_FORMAT.FORMAT_2005_JUNE_CHRONOLOGICAL_LIST);
   var listOfRecords = dehydratedRecords[orp.model.StubVirtualServer.JSON_MEMBER.RECORDS];
-  orp.util.assert(orp.util.isArray(listOfRecords));
+  // orp.util.assert(orp.util.isArray(listOfRecords));
+  orp.lang.assertType(listOfRecords, Array);
   
   this._rehydrateRecords(listOfRecords);
 };
@@ -976,7 +981,7 @@
         if (retainFlagString == "false") {
           retainFlag = false;
         }
-        orp.util.assert(retainFlag !== null);
+        orp.lang.assert(retainFlag !== null);
         contentRecordUuid = dehydratedVote[JSON_MEMBER.RECORD];
         contentRecord = this._getContentRecordFromUuid(contentRecordUuid);
         var vote = new orp.model.Vote(this.getWorld(), voteUuid, contentRecord, retainFlag);
@@ -1002,7 +1007,7 @@
         }
  
         var dataTypeUuid = dehydratedEntry[JSON_MEMBER.TYPE];
-        orp.util.assert(orp.util.isUuidValue(dataTypeUuid));
+        orp.lang.assert(orp.util.isUuidValue(dataTypeUuid));
         var dataType = this._getItemFromUuidOrBootstrapItem(dataTypeUuid);
         
         if (dataTypeUuid == orp.model.World.UUID.TYPE_CONNECTION) {
@@ -1029,7 +1034,7 @@
           if (attributeUuid) {
             attribute = this._getItemFromUuidOrBootstrapItem(attributeUuid);
           } else {
-            orp.util.assert(false); // the attributeUuid should always be there
+            orp.lang.assert(false); // the attributeUuid should always be there
           }
           var rawData = dehydratedEntry[JSON_MEMBER.VALUE];
           var finalData = null;
@@ -1048,10 +1053,10 @@
               // if (!finalData.isValid()) {
               //   alert(rawData + " " + finalData);
               // }
-              orp.util.assert(finalData.isValid());
+              orp.lang.assert(finalData.isValid());
               break;
             default:
-              orp.util.assert(false, 'Unknown data type while _rehydrating()');
+              orp.lang.assert(false, 'Unknown data type while _rehydrating()');
           }
           entry._rehydrate(item, attribute, finalData, previousEntry, dataType);
         }

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/model/World.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -37,6 +37,7 @@
 dojo.require("orp.model.QueryRunner");
 dojo.require("orp.model.Vote");
 dojo.require("orp.model.Ordinal");
+//-- dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -297,7 +298,7 @@
           observer.observedItemHasChanged(item, listOfRecordsForItem);
         } else {
           // We should never get here.  If we do, consider it an error.
-          orp.util.assert(false);
+          orp.lang.assert(false);
         }
       }
     }
@@ -332,7 +333,7 @@
             observer.observedListHasChanged(listBeingObserved, listOfItemChangeReports);
           } else {
             // We should never get here.  If we do, consider it an error.
-            orp.util.assert(false);
+            orp.lang.assert(false);
           }
         }
       }
@@ -388,7 +389,7 @@
  * @param    filter    A string constant representing one of the three supported retrieval filters.
  */
 orp.model.World.prototype.setRetrievalFilter = function(filter) {
-  orp.util.assert(filter == orp.model.World.RetrievalFilter.LAST_EDIT_WINS ||
+  orp.lang.assert(filter == orp.model.World.RetrievalFilter.LAST_EDIT_WINS ||
               filter == orp.model.World.RetrievalFilter.SINGLE_USER ||
               filter == orp.model.World.RetrievalFilter.DEMOCRATIC ||
               filter == orp.model.World.RetrievalFilter.UNABRIDGED);
@@ -419,18 +420,18 @@
       break;
     case orp.model.World.RetrievalFilter.SINGLE_USER:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.DEMOCRATIC:
       // PENDING: This still needs to be implemented.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
     case orp.model.World.RetrievalFilter.UNABRIDGED:
       filteredList = unfilteredList;
       break;
     default:
       // We should never get here.  If we get here, it's an error.
-      orp.util.assert(false);
+      orp.lang.assert(false);
       break;
   }
 
@@ -728,7 +729,7 @@
  * @return   A newly created item representing a query.
  */
 orp.model.World.prototype.newQuery = function(matchingAttribute, matchingEntryOrListOfEntries) {
-  orp.util.assert(matchingAttribute instanceof orp.model.Item);
+  orp.lang.assert(matchingAttribute instanceof orp.model.Item);
   this.beginTransaction();
   var item = this._virtualServer.newItem("A query");
   var categoryCalledQuery = this.getCategoryCalledQuery();
@@ -794,9 +795,9 @@
  * @param    queryRunner    A QueryRunner object. 
  */
 orp.model.World.prototype._registerQueryRunner = function(queryRunner) {
-  orp.util.assert(queryRunner instanceof orp.model.QueryRunner);
+  orp.lang.assert(queryRunner instanceof orp.model.QueryRunner);
   var success = orp.util.addObjectToSet(queryRunner, this._registeredQueryRunners);
-  orp.util.assert(success);
+  orp.lang.assert(success);
 };
 
 
@@ -808,9 +809,9 @@
  * @param    queryRunner    A previously registered QueryRunner object. 
  */
 orp.model.World.prototype._unregisterQueryRunner = function(queryRunner) {
-  orp.util.assert(queryRunner instanceof orp.model.QueryRunner);
+  orp.lang.assert(queryRunner instanceof orp.model.QueryRunner);
   var success = orp.util.removeObjectFromSet(queryRunner, this._registeredQueryRunners);
-  orp.util.assert(success);
+  orp.lang.assert(success);
 };
 
 

Modified: trunk/source/util/Cookie.js
===================================================================
--- trunk/source/util/Cookie.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/Cookie.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -138,8 +138,8 @@
   userCookie.store();
 }
 else {
-  orp.util.assert(userCookie.load());
-  orp.util.assert(userCookie.username == "chao");
-  orp.util.assert(userCookie.editMode == "true");
+  orp.lang.assert(userCookie.load());
+  orp.lang.assert(userCookie.username == "chao");
+  orp.lang.assert(userCookie.editMode == "true");
 }
 */

Modified: trunk/source/util/CsvParser.js
===================================================================
--- trunk/source/util/CsvParser.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/CsvParser.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -35,6 +35,7 @@
 dojo.provide("orp.util.CsvParser");
 dojo.require("dojo.lang.*");
 dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
 
 
 // -------------------------------------------------------------------
@@ -78,7 +79,8 @@
  * @return   Returns an array containing sub-arrays containing strings.
  */
 orp.util.CsvParser.prototype.getStringValuesFromCsvData = function(csvData) {
-  orp.util.assert(dojo.lang.isString(csvData));
+  // orp.util.assert(dojo.lang.isString(csvData));
+  orp.lang.assertType(csvData, String);
   
   var lineEndingCharacters = new RegExp("\r\n|\n|\r");
   var leadingWhiteSpaceCharacters = new RegExp("^\\s+",'g');

Modified: trunk/source/util/LintTool.js
===================================================================
--- trunk/source/util/LintTool.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/LintTool.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -35,6 +35,7 @@
 dojo.provide("orp.util.LintTool");
 dojo.require("dojo.lang.*");
 dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -156,9 +157,10 @@
  * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
  */
 orp.util.LintTool.getErrorReportFromListOfFilesnames = function(listOfFilenames, path) {
-  orp.util.assert(orp.util.isArray(listOfFilenames));
+  orp.lang.assertType(listOfFilenames, Array);
   if (path) {
-    orp.util.assert(dojo.lang.isString(path));
+    // orp.util.assert(dojo.lang.isString(path));
+    orp.lang.assertType(path, String);
   } else {
     path = "";
   }

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/RandomUuid.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -36,6 +36,7 @@
 dojo.provide("orp.util.RandomUuid");
 dojo.require("orp.util.Uuid");
 dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -75,18 +76,19 @@
     } else {
       if (dojo.lang.isObject(namedParameters)) {
         uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-        orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
+        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
       } else {
-        orp.util.assert(false);
+        orp.lang.assert(false);
       }
     }
-    orp.util.assert(dojo.lang.isString(uuidString));
-    orp.util.assert(uuidString.length == 36);
+    // orp.lang.assert(dojo.lang.isString(uuidString));
+    orp.lang.assertType(uuidString, String);
+    orp.lang.assert(uuidString.length == 36);
     this._uuidString = uuidString;
   } else {
     this._uuidString = this._generateUuidString();
   }
-  orp.util.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
+  orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
 };
 
 dj_inherits(orp.util.RandomUuid, orp.util.Uuid);  // makes RandomUuid be a subclass of Uuid

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -37,6 +37,7 @@
 dojo.provide("orp.util.TimeBasedUuid");
 dojo.require("orp.util.Uuid");
 dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
 
 
 // -------------------------------------------------------------------
@@ -85,7 +86,7 @@
   if (namedParameters) {
     if (dojo.lang.isString(namedParameters)) {
       uuidString = namedParameters;
-      orp.util.assert(uuidString.length == 36);
+      orp.lang.assert(uuidString.length == 36);
       this._uuidString = uuidString;
     } else {
       if (dojo.lang.isObject(namedParameters)) {
@@ -94,34 +95,34 @@
         var pseudoNode = namedParameters["pseudoNode"];
         var hardwareNode = namedParameters["hardwareNode"];
         var atLeastOneParameter = (uuidString || node || pseudoNode || hardwareNode) ? true : false;
-        orp.util.assert(atLeastOneParameter);
-        orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
+        orp.lang.assert(atLeastOneParameter);
+        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
         if (uuidString) {
-          orp.util.assert(!node && !pseudoNode && !hardwareNode);
-          orp.util.assert(uuidString.length == 36);
+          orp.lang.assert(!node && !pseudoNode && !hardwareNode);
+          orp.lang.assert(uuidString.length == 36);
           this._uuidString = uuidString;
         }
         if (node || pseudoNode || hardwareNode) {
-          orp.util.assert((node || pseudoNode).length == 12);
+          orp.lang.assert((node || pseudoNode).length == 12);
           var firstCharacter = (node || pseudoNode).charAt(0);
           var firstDigit = parseInt(firstCharacter, orp.util.Uuid.HEX_RADIX);
           if (hardwareNode) { 
-            orp.util.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
+            orp.lang.assert((firstDigit >= 0x0) && (firstDigit <= 0x7)); 
           }
           if (pseudoNode) { 
-            orp.util.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
+            orp.lang.assert((firstDigit >= 0x8) && (firstDigit <= 0xF)); 
           }
           this._uuidString = this._generateUuidString(node || pseudoNode || hardwareNode);
         }
       } else {
-        orp.util.assert(false);
+        orp.lang.assert(false);
       }
     }
   } else {
     this._uuidString = this._generateUuidString();
   }
     
-  orp.util.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
+  orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
 };
 
 dj_inherits(orp.util.TimeBasedUuid, orp.util.Uuid);  // makes TimeBasedUuid be a subclass of Uuid
@@ -213,9 +214,10 @@
   var Uuid          = orp.util.Uuid;
   var TimeBasedUuid = orp.util.TimeBasedUuid;
   
-  orp.util.assert(!pseudoNode || orp.util.isString(pseudoNode));  
+  // orp.util.assert(!pseudoNode || orp.util.isString(pseudoNode));
+  orp.lang.assertTypeForOptionalValue(pseudoNode, String);
   if (pseudoNode) {
-    orp.util.assert(pseudoNode.length == 12);  
+    orp.lang.assert(pseudoNode.length == 12);  
   } else {
     var pseudoNodeIndicatorBit = 0x8000;
     var random15bitNumber = Math.floor( (Math.random() % 1) * Math.pow(2, 15) );
@@ -366,7 +368,7 @@
   
   var returnString = hexTimeHigh + hexTimeMid + hexTimeLow;
   
-  orp.util.assert(returnString.length == 15);
+  orp.lang.assert(returnString.length == 15);
   return returnString;
 };
 
@@ -386,7 +388,7 @@
   arrayA[2] &= 0xFFFF;
   arrayA[0] += arrayA[1] >>> 16;
   arrayA[1] &= 0xFFFF;
-  orp.util.assert((arrayA[0] >>> 16) === 0);
+  orp.lang.assert((arrayA[0] >>> 16) === 0);
 };
 
 
@@ -425,10 +427,15 @@
  * @return   An array with 4 elements, each of which is a 16-bit number.
  */
 orp.util.TimeBasedUuid._addTwo64bitArrays = function(arrayA, arrayB) {
-  orp.util.assert(orp.util.isArray(arrayA));
-  orp.util.assert(arrayA.length == 4);
-  orp.util.assert(orp.util.isArray(arrayB));
-  orp.util.assert(arrayB.length == 4);
+  // orp.util.assert(orp.util.isArray(arrayA));
+  // orp.util.assert(arrayA.length == 4);
+  // orp.util.assert(orp.util.isArray(arrayB));
+  // orp.util.assert(arrayB.length == 4);
+  orp.lang.assertType(arrayA, Array);
+  orp.lang.assertType(arrayB, Array);
+  orp.lang.assert(arrayA.length == 4);
+  orp.lang.assert(arrayB.length == 4);
+
   var result = new Array(0, 0, 0, 0);
   result[3] = arrayA[3] + arrayB[3];
   result[2] = arrayA[2] + arrayB[2];
@@ -452,10 +459,15 @@
 orp.util.TimeBasedUuid._multiplyTwo64bitArrays = function(arrayA, arrayB) {
   var TimeBasedUuid = orp.util.TimeBasedUuid;
 
-  orp.util.assert(orp.util.isArray(arrayA));
-  orp.util.assert(arrayA.length == 4);
-  orp.util.assert(orp.util.isArray(arrayB));
-  orp.util.assert(arrayB.length == 4);
+  //orp.util.assert(orp.util.isArray(arrayA));
+  //orp.util.assert(arrayA.length == 4);
+  //orp.util.assert(orp.util.isArray(arrayB));
+  //orp.util.assert(arrayB.length == 4);
+  orp.lang.assertType(arrayA, Array);
+  orp.lang.assertType(arrayB, Array);
+  orp.lang.assert(arrayA.length == 4);
+  orp.lang.assert(arrayB.length == 4);
+
   var overflow = false;
   if (arrayA[0] * arrayB[0] !== 0) { overflow = true; }
   if (arrayA[0] * arrayB[1] !== 0) { overflow = true; }
@@ -463,7 +475,7 @@
   if (arrayA[1] * arrayB[0] !== 0) { overflow = true; }
   if (arrayA[1] * arrayB[1] !== 0) { overflow = true; }
   if (arrayA[2] * arrayB[0] !== 0) { overflow = true; }
-  orp.util.assert(!overflow);
+  orp.lang.assert(!overflow);
   
   var result = new Array(0, 0, 0, 0);
   result[0] += arrayA[0] * arrayB[3];
@@ -495,7 +507,7 @@
  * For example:
  * <pre>
  *   result = TimeBasedUuid._padWithLeadingZeros("abc", 6);
- *   orp.util.assert(result == "000abc");
+ *   orp.lang.assert(result == "000abc");
  * </pre>
  * 
  * @scope    private class method

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/Util.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -32,6 +32,8 @@
 *****************************************************************************/
 
 dojo.provide("orp.util.Util");
+dojo.require("orp.lang.Lang");
+dojo.require("dojo.lang.*");
 // dojo.require("orp.util.Uuid");
 
 // -------------------------------------------------------------------
@@ -72,7 +74,7 @@
   RIGHT_ARROW: 39, // 124
   DOWN_ARROW: 40,  // 125
   BACKSPACE: 8,
-DELETE: 46 };
+  DELETE: 46 };
 // &#37; = %
 // &#38; = &
 // &#39; = '
@@ -132,6 +134,7 @@
  * @param    booleanValue    A boolean value, which needs to be true for the assertion to succeed. 
  * @param    message    Optional. A string describing the assertion.
  */
+/*
 orp.util.assert = function(booleanValue, message) {
   if (orp.util.isBoolean(booleanValue)) {
     if (!booleanValue) {    
@@ -155,8 +158,12 @@
     orp.util.ourErrorReporter("An assert statement went sour.\nThe method orp.util.assert() was passed a non-boolean argument.\nHere's the stack trace, with the line number where the assert statement failed:\n" + (stackString || ""));
   }
 };
+*/
+orp.util.assert = function(booleanValue, message) {
+  dj_deprecated("orp.util.assert() is deprecated. Use orp.lang.assert().");
+  orp.lang.assert(booleanValue, message);
+};
 
-
 /**
  * Registers a function to be used to report status messages to the user.
  *
@@ -202,11 +209,16 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a function.
  */
+ /*
 orp.util.isFunction = function(value) {
   return ((typeof value) == "function");
 };
+*/
+orp.util.isFunction = function(value) {
+  dj_deprecated("orp.util.isFunction() is deprecated. Use dojo.lang.isFunction().");
+  return dojo.lang.isFunction(value);
+};
 
-
 /**
  * Returns true if the given value is a string.
  *
@@ -214,9 +226,15 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a string.
  */
+ /*
 orp.util.isString = function(value) {
   return ((typeof value) == "string");
 };
+*/
+orp.util.isString = function(value) {
+  dj_deprecated("orp.util.isString() is deprecated. Use dojo.lang.isString().");
+  return dojo.lang.isString(value);
+};
 
 
 /**
@@ -226,9 +244,15 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a number.
  */
+/*
 orp.util.isNumber = function(value) {
   return (((typeof value) == "number") && isFinite(value));
 };
+*/
+orp.util.isNumber = function(value) {
+  dj_deprecated("orp.util.isNumber() is deprecated. Use dojo.lang.isNumber().");
+  return dojo.lang.isNumber(value);
+};
 
 
 /**
@@ -240,12 +264,16 @@
  * @return   A boolean value. True if inValue is a number or a string that represents a number.
  */
 orp.util.isNumeric = function(value) {
-  var isNumber = orp.util.isNumber(value);
+  var isNumber = dojo.lang.isNumber(value);
   if (isNumber) {
     return true;
   }
-  var isNumeric = orp.util.isString(value) && orp.util.isNumber(parseInt(value));
-  return isNumeric;
+  if (dojo.lang.isString(value)) {
+    var asNumber = parseInt(value);
+    var isNumeric = dojo.lang.isNumber(asNumber) && isFinite(asNumber);
+    return isNumeric;
+  }
+  return false;
 };
 
 
@@ -256,11 +284,16 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is a boolean.
  */
+/*
 orp.util.isBoolean = function(value) {
   return ((typeof value) == "boolean");
 };
+*/
+orp.util.isBoolean = function(value) {
+  dj_deprecated("orp.util.isBoolean() is deprecated. Use dojo.lang.isBoolean().");
+  return dojo.lang.isBoolean(value);
+};
 
-
 /**
  * Returns true if the given value is an object.
  *
@@ -268,11 +301,16 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is an object.
  */
+ /*
 orp.util.isObject = function(value) {
   return (value && ((typeof value) == "object"));
 };
+*/
+orp.util.isObject = function(value) {
+  dj_deprecated("orp.util.isObject() is deprecated. Use dojo.lang.isObject().");
+  return dojo.lang.isObject(value);
+};
 
-
 /**
  * Returns true if the given value is a Date.
  *
@@ -328,14 +366,19 @@
  * @param    value    Any object or literal value. 
  * @return   A boolean value. True if inValue is an array.
  */
+ /*
 orp.util.isArray = function(value) {
   if (!value) {
     return false;
   }
   return (((typeof value) == "object") && (value.constructor == Array));
 };
+*/
+orp.util.isArray = function(value) {
+  dj_deprecated("orp.util.isArray() is deprecated. Use dojo.lang.isArray().");
+  return dojo.lang.isArray(value);
+};
 
-
 /**
  * Returns true if the given value is a hash table.
  *
@@ -416,7 +459,8 @@
  * @return   Returns true if the object was found in the set.
  */
 orp.util.isObjectInSet = function(object, set) {
-  orp.util.assert(orp.util.isArray(set));
+  // orp.util.assert(orp.util.isArray(set));
+  orp.lang.assertType(set, Array);
   
   for (var key in set) {
     if (set[key] == object) {
@@ -436,8 +480,10 @@
  * @return   Returns true if each of the objects was found in the set.
  */
 orp.util.areObjectsInSet = function(array, set) {
-  orp.util.assert(orp.util.isArray(array));
-  orp.util.assert(orp.util.isArray(set));
+  // orp.util.assert(orp.util.isArray(array));
+  // orp.util.assert(orp.util.isArray(set));
+  orp.lang.assertType(array, Array);
+  orp.lang.assertType(set, Array);
   
   for (var key in array) {
     var object = array[key];
@@ -459,7 +505,8 @@
  * @return   Returns true if the object was removed from the array.
  */
 orp.util.removeObjectFromSet = function(object, set) {
-  orp.util.assert(orp.util.isArray(set));
+  // orp.util.assert(orp.util.isArray(set));
+  orp.lang.assertType(set, Array);
   
   if (!object) {
     return false;
@@ -484,7 +531,8 @@
  * @return   Returns true if the object was added to the array.
  */
 orp.util.addObjectToSet = function(object, set) {
-  orp.util.assert(orp.util.isArray(set));
+  // orp.util.assert(orp.util.isArray(set));
+  orp.lang.assertType(set, Array);
 
   if (!object) {
     return false;
@@ -505,7 +553,7 @@
  * @return   The number of values in inHashTable.
  */
 orp.util.lengthOfHashTable = function(hashTable) {
-  orp.util.assert(orp.util.isHashTable(hashTable));
+  orp.lang.assert(orp.util.isHashTable(hashTable));
   var count = 0;
   for (var key in hashTable) {
     count += 1;
@@ -523,7 +571,7 @@
  * @return   An array containing the values that are in inHashTable.
  */
 orp.util.hashTableValues = function(hashTable) {
-  orp.util.assert(orp.util.isHashTable(hashTable));
+  orp.lang.assert(orp.util.isHashTable(hashTable));
   var returnArray = [];
   for (var key in hashTable) {
     returnArray.push(hashTable[key]);

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/Uuid.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -35,8 +35,9 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.util.Uuid");
+dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
 dojo.require("dojo.lang.*");
-dojo.require("orp.util.Util");
 
 
 // -------------------------------------------------------------------
@@ -68,9 +69,9 @@
         this._uuidString = namedParameters["uuidString"];
         
         // Check for typos in parameter names
-        orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
+        orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
       } else {
-        orp.util.assert(false);
+        orp.lang.assert(false);
       }
     }
   }
@@ -116,12 +117,14 @@
   if (dojo.lang.isString(namedParameters)) {
     uuidString = namedParameters;
   } else {
-    orp.util.assert(dojo.lang.isObject(namedParameters));
+    // orp.util.assert(dojo.lang.isObject(namedParameters));
+    orp.lang.assertType(namedParameters, Object);
     uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-    orp.util.assert(dojo.lang.isString(uuidString));
+    // orp.util.assert(dojo.lang.isString(uuidString));
+    orp.lang.assertType(uuidString, String);
     
     // Check for typos in parameter names
-    orp.util.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
+    orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, [orp.util.Uuid.NamedParameters.uuidString]));
   }
 
   var uuid = new orp.util.Uuid(uuidString);
@@ -165,7 +168,7 @@
  * <pre>
  *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
  *   var version = uuid.getVersion();
- *   orp.util.assert(version == orp.util.Uuid.Version.TIME_BASED);
+ *   orp.lang.assert(version == orp.util.Uuid.Version.TIME_BASED);
  * </pre>
  *
  * @scope    public instance method
@@ -188,7 +191,7 @@
  * <pre>
  *   var uuid = new orp.util.Uuid("3B12F1DF-5232-4804-897E-917BF397618A");
  *   var variant = uuid.getVariant();
- *   orp.util.assert(variant == orp.util.Uuid.Variant.DCE);
+ *   orp.lang.assert(variant == orp.util.Uuid.Variant.DCE);
  * </pre>
  *
  * @scope    public instance method
@@ -201,7 +204,7 @@
   //         (variant "10__" == DCE)
   var variantCharacter = this._uuidString.charAt(19);
   var variantNumber = parseInt(variantCharacter, orp.util.Uuid.HEX_RADIX);
-  orp.util.assert((variantNumber >= 0) && (variantNumber <= 16));
+  orp.lang.assert((variantNumber >= 0) && (variantNumber <= 16));
   
   if (!orp.util.Uuid._ourVariantLookupTable) {
     var Variant = orp.util.Uuid.Variant;

Modified: trunk/source/util/XmlConverter.js
===================================================================
--- trunk/source/util/XmlConverter.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/util/XmlConverter.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -33,8 +33,9 @@
 // Provides and Requires
 // -------------------------------------------------------------------
 dojo.provide("orp.util.XmlConverter");
+dojo.require("orp.model.World");
 dojo.require("orp.util.Util");
-dojo.require("orp.model.World");
+dojo.require("orp.lang.Lang");
 // dojo.provide("orp.util.XmlTextNodeToAttributeSpecifier");
 // dojo.provide("orp.util.XmlAttributeToAttributeSpecifier");
 
@@ -45,8 +46,9 @@
  * @scope    public instance constructor
  */
 orp.util.XmlTextNodeToAttributeSpecifier = function(tagPath, attribute) {
-  orp.util.assert(tagPath instanceof Array);
-  orp.util.assert(attribute instanceof orp.model.Item);
+  // orp.util.assert(tagPath instanceof Array);
+  orp.lang.assertType(tagPath, Array);
+  orp.lang.assert(attribute instanceof orp.model.Item);
   this._tagPath = tagPath;
   this._attribute = attribute;
   var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
@@ -69,7 +71,7 @@
  * @scope    public instance constructor
  */
 orp.util.XmlAttributeToAttributeSpecifier = function(xmlAttributeName, attribute) {
-  orp.util.assert(attribute instanceof orp.model.Item);
+  orp.lang.assert(attribute instanceof orp.model.Item);
   this._xmlAttributeName = xmlAttributeName;
   this._attribute = attribute;
   var attributeCalledExpectedType = attribute.getWorld().getAttributeCalledExpectedType();
@@ -101,15 +103,15 @@
  * @param    itemCategory                       If null, a new category is created from 'namespace' and 'itemTagName'.
  */
 orp.util.XmlConverter = function(world, url, nameSpace, itemTagName, itemCategory) {
-  orp.util.assert(world instanceof orp.model.World);
+  orp.lang.assert(world instanceof orp.model.World);
   var urlSeparators = new RegExp("\\.|\\/");
   var urlParts = url.split(urlSeparators);
   var len = urlParts.length;
-  orp.util.assert(urlParts[len-1] == "xml");
+  orp.lang.assert(urlParts[len-1] == "xml");
   if (!nameSpace) {
     nameSpace = urlParts[len-2];
   }
-  orp.util.assert(orp.util.isString(itemTagName));
+  orp.lang.assertType(itemTagName, String);
 
   var xmlDoc = document.implementation.createDocument("", "doc", null);
   var objXMLHTTP = new XMLHttpRequest();
@@ -183,8 +185,9 @@
     listOfOutputItems = this._doDefaultConversion(this._world, this._nameSpace, this._itemElements, this._itemCategory);
   }
   else {
-    orp.util.assert(xmlToAttributeSpecifiers instanceof Array);
-    orp.util.assert(xmlToAttributeSpecifiers[0] instanceof orp.util.XmlTextNodeToAttributeSpecifier);
+    // orp.lang.assert(xmlToAttributeSpecifiers instanceof Array);
+    orp.lang.assertType(xmlToAttributeSpecifiers, Array);
+    orp.lang.assert(xmlToAttributeSpecifiers[0] instanceof orp.util.XmlTextNodeToAttributeSpecifier);
     for (var i = 0; i < this._itemElements.length; ++i) {
       var newItem = this._world.newItem();
       newItem.assignToCategory(this._itemCategory);
@@ -223,7 +226,7 @@
     matchXmlAttribute = true;
     var xmlAttributeToMatch = equalitySpecifier._xmlAttributeName;
   } else {
-    orp.util.assert(equalitySpecifier instanceof orp.util.XmlTextNodeToAttributeSpecifier,
+    orp.lang.assert(equalitySpecifier instanceof orp.util.XmlTextNodeToAttributeSpecifier,
                 "equalitySpecifier should be of type orp.util.XmlTextNodeToAttributeSpecifier or orp.util.XmlAttributeToAttributeSpecifier.");
     matchXmlAttribute = false;
     var xmlTagPathToMatch = equalitySpecifier._tagPath;

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/EntryView.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -39,6 +39,7 @@
 dojo.require("orp.view.SuggestionBox");
 dojo.require("orp.model.World");
 dojo.require("orp.model.Item");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -67,9 +68,10 @@
  * @param    isMultiLine     a boolean indicating if text view is single line or multi-line
  */
 orp.view.EntryView = function(superview, htmlElement, item, attribute, entry, isMultiLine) {
-  orp.util.assert((!entry) || entry instanceof orp.model.Entry);
-  orp.util.assert(item instanceof orp.model.Item);
-  orp.util.assert(attribute instanceof orp.model.Item); // PENDING need to check that attribute is an attribute
+  // orp.util.assert((!entry) || entry instanceof orp.model.Entry);
+  orp.lang.assert(item instanceof orp.model.Item);
+  orp.lang.assert(attribute instanceof orp.model.Item); // PENDING need to check that attribute is an attribute
+  orp.lang.assertTypeForOptionalValue(entry, orp.model.Entry);
   
   orp.view.View.call(this, superview, htmlElement, "EntryView");
 
@@ -189,9 +191,10 @@
  *
  */
 orp.view.EntryView.prototype.setExpectedTypeEntries = function(expectedTypeEntries) {
-  orp.util.assert(orp.util.isArray(expectedTypeEntries));
+  // orp.util.assert(orp.util.isArray(expectedTypeEntries));
+  orp.lang.assertType(expectedTypeEntries, Array);
   for (var key in expectedTypeEntries) {
-    orp.util.assert(expectedTypeEntries[key] instanceof orp.model.Entry);
+    orp.lang.assert(expectedTypeEntries[key] instanceof orp.model.Entry);
   }
   this._expectedTypeEntries = expectedTypeEntries;
 };
@@ -201,7 +204,8 @@
  *
  */
 orp.view.EntryView.prototype.setSuggestions = function(listOfSuggestions) {
-  if (listOfSuggestions) {orp.util.assert(orp.util.isArray(listOfSuggestions));}
+  // if (listOfSuggestions) {orp.util.assert(orp.util.isArray(listOfSuggestions));}
+  orp.lang.assertTypeForOptionalValue(listOfSuggestions, Array);
   this._suggestions = listOfSuggestions;
 };
 
@@ -313,7 +317,7 @@
 }; */
 
 orp.view.EntryView.prototype.unSelect = function() {
-  orp.util.assert(this._isLozenge());
+  orp.lang.assert(this._isLozenge());
   this._setClassName();
   //orp.util.css_removeClass(this._textSpan, orp.view.EntryView.cssClass.SELECTED);
 };
@@ -555,7 +559,7 @@
  * @param    onClickFunction    A function to call. 
  */
 orp.view.EntryView.prototype.setClickFunction = function(onClickFunction) {
-  orp.util.assert(onClickFunction instanceof Function);
+  orp.lang.assert(onClickFunction instanceof Function);
   this._clickFunction = onClickFunction;
 };
 
@@ -718,7 +722,7 @@
   }
   if (myEvent.keyCode ==  orp.util.KEYCODE_FOR_BACKSPACE || myEvent.keyCode == orp.util.KEYCODE_FOR_DELETE ||
       myEvent.keyCode === 0) {
-    orp.util.assert(this._entry !== null);
+    orp.lang.assert(this._entry !== null);
     this._entry.voteToDelete();
     this._entry = null;
     this._valueIsItem = false;

Modified: trunk/source/view/ItemView.js
===================================================================
--- trunk/source/view/ItemView.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/ItemView.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -37,6 +37,7 @@
 dojo.require("orp.view.RootView");
 dojo.require("orp.model.Item");
 dojo.require("orp.DetailPlugin");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -64,8 +65,8 @@
  * @param    item    The item to be displayed by this view. 
  */
 orp.view.ItemView = function(superview, htmlElement, item) {
-  orp.util.assert(htmlElement instanceof HTMLElement);
-  orp.util.assert(item instanceof orp.model.Item);
+  orp.lang.assert(htmlElement instanceof HTMLElement);
+  orp.lang.assert(item instanceof orp.model.Item);
 
   orp.view.View.call(this, superview, htmlElement, "ItemView");
 
@@ -106,7 +107,7 @@
  * @scope    public instance method
  */
 orp.view.ItemView.prototype.refresh = function() {
-  orp.util.assert(this._item instanceof orp.model.Item);
+  orp.lang.assert(this._item instanceof orp.model.Item);
   
   // PENDING: this needs to be changed from DOM level 0 to DOM level 2.
   var listOfStrings = [];

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/MultiEntriesView.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -38,6 +38,7 @@
 dojo.require("orp.view.View");
 dojo.require("orp.view.EntryView");
 dojo.require("orp.model.Item");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -68,8 +69,8 @@
 orp.view.MultiEntriesView = function(superview, htmlElement, item, attribute) {
   orp.view.View.call(this, superview, htmlElement, "MultiEntriesView");
 
-  orp.util.assert(item instanceof orp.model.Item);
-  orp.util.assert(attribute instanceof orp.model.Item); // PENDING need to check that attribute is an attribute
+  orp.lang.assert(item instanceof orp.model.Item);
+  orp.lang.assert(attribute instanceof orp.model.Item); // PENDING need to check that attribute is an attribute
   
   this._item = item;
   this._attribute = attribute;
@@ -119,7 +120,7 @@
  * @param    item      The Item which just became real. 
  */
 orp.view.MultiEntriesView.prototype._provisionalItemJustBecomeReal = function(item) {
-  orp.util.assert(item == this._item);
+  orp.lang.assert(item == this._item);
   var superview = this.getSuperview();
   if (superview._provisionalItemJustBecomeReal) {
     superview._provisionalItemJustBecomeReal(item);
@@ -140,7 +141,7 @@
  *
  */
 orp.view.MultiEntriesView.prototype.noLongerProvisional = function() {
-  orp.util.assert(this._entryViews.length == 1); // provisional item should only have one entry
+  orp.lang.assert(this._entryViews.length == 1); // provisional item should only have one entry
   for (var key in this._entryViews) {
     var entry = this._entryViews[key];
     entry.noLongerProvisional();
@@ -181,7 +182,7 @@
  *
  */
 orp.view.MultiEntriesView.prototype.setKeyPressFunction = function(keyPressFunction) {
-  orp.util.assert(keyPressFunction instanceof Function);
+  orp.lang.assert(keyPressFunction instanceof Function);
   this._keyPressFunction = keyPressFunction;
 };
 
@@ -193,7 +194,7 @@
  * @param    onClickFunction    A function to call. 
  */
 orp.view.MultiEntriesView.prototype.setClickFunction = function(onClickFunction) {
-  orp.util.assert(onClickFunction instanceof Function);
+  orp.lang.assert(onClickFunction instanceof Function);
   this._clickFunction = onClickFunction;
 };
 
@@ -232,9 +233,9 @@
  */
 orp.view.MultiEntriesView.prototype._handleDrop = function(element) {
   var draggedEntryView = element.or_entryView;
-  if (!draggedEntryView) {orp.util.assert(false);}
+  if (!draggedEntryView) {orp.lang.assert(false);}
   var droppedEntry = draggedEntryView._entry;
-  if (!droppedEntry) {orp.util.assert(false);}
+  if (!droppedEntry) {orp.lang.assert(false);}
   if (!this.hasEntry(droppedEntry)) {
     var newEntry;
     if (droppedEntry.getType() == this.getWorld().getTypeCalledConnection()) {
@@ -265,7 +266,7 @@
  *
  */
 orp.view.MultiEntriesView.prototype._keyPressOnEditField = function(eventObject, entryView) {
-  orp.util.assert(entryView instanceof orp.view.EntryView);
+  orp.lang.assert(entryView instanceof orp.view.EntryView);
   var asciiValueOfKey = eventObject.keyCode;
   var move, doCreateNewEntry;
   switch (asciiValueOfKey) {
@@ -289,7 +290,7 @@
   }
   if (move !== 0) {
     var index = orp.util.getArrayIndex(this._entryViews, entryView);
-    orp.util.assert(index != -1);
+    orp.lang.assert(index != -1);
     index += move;
     if (index >= 0 && index < this._entryViews.length) {
       entryView.stopEditing();

Modified: trunk/source/view/NavbarView.js
===================================================================
--- trunk/source/view/NavbarView.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/NavbarView.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -37,6 +37,7 @@
 dojo.provide("orp.view.NavbarView");
 dojo.require("orp.view.View");
 dojo.require("orp.view.RootView");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -137,7 +138,7 @@
  * @param    ulElement    The "ul" HTMLElement for the menu of menu items. 
  */
 orp.view.NavbarView.prototype._sortOrderUpdate = function(ulElement) {
-  orp.util.assert(this._liElementBeingTouched !== null);
+  orp.lang.assert(this._liElementBeingTouched !== null);
   
   var liElementPrefixString = orp.view.NavbarView.elementId.MENU + '_';
   var menuItemElementId = this._liElementBeingTouched.id;
@@ -147,7 +148,7 @@
   var listOfPages = this._getNewOrderingForPageList(ulElement);
   
   var arrayIndex = orp.util.getArrayIndex(listOfPages, pageToReorder);
-  orp.util.assert(arrayIndex != -1);
+  orp.lang.assert(arrayIndex != -1);
   var pageAbove = (arrayIndex === 0) ? null : listOfPages[arrayIndex-1];
   var pageBelow = (arrayIndex > listOfPages.length) ? null : listOfPages[arrayIndex+1];
   pageToReorder.reorderBetween(pageAbove, pageBelow);

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/PageView.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -40,6 +40,7 @@
 dojo.require("orp.view.SectionView");
 dojo.require("orp.view.EntryView");
 dojo.require("orp.model.Item");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -65,8 +66,8 @@
  * @param    pageItem        The page item to be displayed by this view. 
  */
 orp.view.PageView = function(superview, htmlElement, pageItem) {
-  orp.util.assert(htmlElement instanceof HTMLElement);
-  orp.util.assert(pageItem instanceof orp.model.Item);
+  orp.lang.assert(htmlElement instanceof HTMLElement);
+  orp.lang.assert(pageItem instanceof orp.model.Item);
 
   orp.view.View.call(this, superview, htmlElement, "PageView");
 
@@ -166,7 +167,7 @@
  * @scope    public instance method
  */
 orp.view.PageView.prototype.doInitialDisplay = function() {
-  orp.util.assert(this.getHtmlElement() instanceof HTMLElement);
+  orp.lang.assert(this.getHtmlElement() instanceof HTMLElement);
   
   var attributeCalledName = this.getWorld().getAttributeCalledName();
   var attributeCalledSummary = this.getWorld().getAttributeCalledSummary();

Modified: trunk/source/view/RootView.js
===================================================================
--- trunk/source/view/RootView.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/RootView.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -41,6 +41,7 @@
 dojo.require("orp.view.NavbarView");
 dojo.require("orp.view.ItemView");
 dojo.require("orp.model.World");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -72,7 +73,7 @@
   
   orp.view.RootView._ourSingleInstance = this;
    
-  orp.util.assert(world instanceof orp.model.World);
+  orp.lang.assert(world instanceof orp.model.World);
 
   // instance properties
   this._world = world;
@@ -310,7 +311,7 @@
  * @param    item    Any item.
  */
 orp.view.RootView.prototype.getUrlForItem = function(item) {
-  orp.util.assert(item instanceof orp.model.Item);
+  orp.lang.assert(item instanceof orp.model.Item);
   var categoryCalledPage = this.getWorld().getItemFromUuid(orp.view.RootView.UUID.CATEGORY_PAGE);
   var prefix;
   if (item.isInCategory(categoryCalledPage)) {
@@ -406,7 +407,7 @@
     this._displayNavbar();
     this._displayDebugArea();
     if (this._currentContentView) {
-      orp.util.assert(this._currentContentView instanceof Object);
+      orp.lang.assert(this._currentContentView instanceof Object);
       document.title = this._currentContentView.getPageTitle() + " - openrecord.org";
       this._currentContentView.includeOnScreen(true);
     }
@@ -487,7 +488,7 @@
  * @scope    private instance method
  */
 orp.view.RootView.prototype._displayDebugArea = function() {
-  orp.util.assert(this._debugDivElement instanceof HTMLDivElement);
+  orp.lang.assert(this._debugDivElement instanceof HTMLDivElement);
 
   var listOfStrings = [];
   listOfStrings.push("<textarea readonly id=\"" + orp.view.RootView.elementId.DEBUG_TEXTAREA + "\" rows=\"20\" cols=\"100\" wrap=\"virtual\"></textarea>");
@@ -584,7 +585,7 @@
     this._selections[i].unSelect();
   }
   if (aView) {
-    orp.util.assert(aView instanceof orp.view.View);
+    orp.lang.assert(aView instanceof orp.view.View);
     this._selections = [aView];
   }
   else {this._selections = [];}
@@ -596,7 +597,7 @@
  * @param    aView    A selectable object
  */
 orp.view.RootView.prototype.addToSelection = function(aView) {
-  orp.util.assert(aView instanceof orp.view.View);
+  orp.lang.assert(aView instanceof orp.view.View);
   orp.util.addObjectToSet(aView,this._selections);
 };
 
@@ -606,8 +607,8 @@
  * @param    aView    A selectable object
  */
 orp.view.RootView.prototype.removeFromSelection = function(aView) {
-  orp.util.assert(aView instanceof orp.view.View);
-  orp.util.assert(orp.util.removeObjectFromSet(aView,this._selections));
+  orp.lang.assert(aView instanceof orp.view.View);
+  orp.lang.assert(orp.util.removeObjectFromSet(aView,this._selections));
 };
   
 // -------------------------------------------------------------------

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/SectionView.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -35,11 +35,12 @@
 // -------------------------------------------------------------------
 // Provides and Requires
 // -------------------------------------------------------------------
+dojo.require("orp.TablePlugin");
 dojo.provide("orp.view.SectionView");
 dojo.require("orp.view.View");
 dojo.require("orp.view.RootView");
-dojo.require("orp.TablePlugin");
 dojo.require("orp.model.Item");
+dojo.require("orp.lang.Lang");
 
 // FIXME: We shouldn't need to include these three lines:
 dojo.require("orp.DetailPlugin");
@@ -74,7 +75,7 @@
   orp.view.View.call(this, superview, htmlElement, "SectionView");
 
   // instance properties
-  orp.util.assert(sectionItem instanceof orp.model.Item);
+  orp.lang.assert(sectionItem instanceof orp.model.Item);
   this._section = sectionItem;
 
   this._pluginView = null;
@@ -185,7 +186,7 @@
  * @return   A newly created plugin object, initialized to be the plugin for this section.
  */
 orp.view.SectionView.prototype.getPluginInstanceFromPluginItem = function(pluginItem, pluginDiv) {
-  orp.util.assert(pluginItem instanceof orp.model.Item);
+  orp.lang.assert(pluginItem instanceof orp.model.Item);
   
   var newPlugin = null;
   var pluginClass;
@@ -308,7 +309,7 @@
     for (var i=0; i < entriesLayoutData.length; ++i) {
       var layoutItem = entriesLayoutData[i].getConnectedItem(this._section);
       var entriesAppliesToPlugin = layoutItem.getEntriesForAttribute(attributeAppliesToPlugin);
-      orp.util.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
+      orp.lang.assert(entriesAppliesToPlugin && entriesAppliesToPlugin.length == 1);
       if (entriesAppliesToPlugin[0].getValue() == pluginTypeItem) {
         return layoutItem;
       }
@@ -345,9 +346,8 @@
   if (listOfMatchingAttrs.length === 0) {
     // by default matching attribute is category
     matchingAttribute = this.getWorld().getAttributeCalledCategory();
-  }
-  else {
-    orp.util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+  } else {
+    orp.lang.assert(listOfMatchingAttrs.length == 1, 'more than one matching attributes');
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
   var attributeCalledQueryMatchingValue = this.getWorld().getAttributeCalledQueryMatchingValue();
@@ -413,7 +413,7 @@
 orp.view.SectionView.prototype.observedItemHasChanged = function(item) {
   item.removeObserver(this); //item no longer needs to be observed as query editor span is rebuilt
   var myQuery = this.getQuerySpec();
-  orp.util.assert(item == myQuery);
+  orp.lang.assert(item == myQuery);
   var pluginItem = this._pluginView.getPluginItem();
   this._pluginView.endOfLife();
   this._pluginView = this.getPluginInstanceFromPluginItem(pluginItem, this._pluginDiv);
@@ -483,7 +483,7 @@
     matchingAttribute = this.getWorld().getAttributeCalledCategory();
   }
   else {
-    orp.util.assert(listOfMatchingAttrs.length==1, 'more than one matching attributes');
+    orp.lang.assert(listOfMatchingAttrs.length == 1, 'more than one matching attributes');
     matchingAttribute = listOfMatchingAttrs[0].getValue();
   }
   if (matchingAttribute.getDisplayString() != newChoiceName) {
@@ -501,10 +501,10 @@
     for (var i in listOfMatchingEntries) {
       var anEntry = listOfMatchingEntries[i];
       anEntry.voteToDelete();
-      orp.util.assert(anEntry.hasBeenDeleted());
+      orp.lang.assert(anEntry.hasBeenDeleted());
     }
     listOfMatchingEntries = myQuery.getEntriesForAttribute(attributeCalledQueryMatchingValue);
-    orp.util.assert(listOfMatchingEntries.length === 0);
+    orp.lang.assert(listOfMatchingEntries.length === 0);
     
     // I think we need these next 3 lines in to make sure the view gets updated  
     // to reflect the new query.  When we get a chance we should probably do 

Modified: trunk/source/view/View.js
===================================================================
--- trunk/source/view/View.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/source/view/View.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -34,6 +34,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.view.View");
 dojo.require("orp.util.Util");
+dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -175,7 +176,8 @@
  * @param    visibleFlag    True if the view should be visible on screen. False if the view should be hidden off screen.
  */
 orp.view.View.prototype.includeOnScreen = function(visibleFlag) {
-  orp.util.assert(orp.util.isBoolean(visibleFlag));
+  // orp.util.assert(orp.util.isBoolean(visibleFlag));
+  orp.lang.assertType(visibleFlag, Boolean);
 
   if (visibleFlag) {
     this.refresh();
@@ -198,7 +200,7 @@
  * @param    element    An HTML element. 
  */
 orp.view.View.removeChildrenOfElement = function(element) {
-  orp.util.assert(element instanceof HTMLElement);
+  orp.lang.assert(element instanceof HTMLElement);
   element.innerHTML = '';
 };
 
@@ -215,10 +217,14 @@
  * @return   The newly created HTML element.
  */
 orp.view.View.newElement = function(tagName, cssClassName, attributesInJson, text) {
-  orp.util.assert(orp.util.isString(tagName));
-  orp.util.assert(!cssClassName || orp.util.isString(cssClassName));
-  orp.util.assert(!attributesInJson || orp.util.isObject(attributesInJson));
-  orp.util.assert(!text|| orp.util.isString(text));
+  // orp.util.assert(orp.util.isString(tagName));
+  // orp.util.assert(!cssClassName || orp.util.isString(cssClassName));
+  // orp.util.assert(!attributesInJson || orp.util.isObject(attributesInJson));
+  // orp.util.assert(!text|| orp.util.isString(text));
+  orp.lang.assertType(tagName, String);
+  orp.lang.assertTypeForOptionalValue(cssClassName, String);
+  orp.lang.assertTypeForOptionalValue(attributesInJson, Object);
+  orp.lang.assertTypeForOptionalValue(text, String);
 
   var newElement = window.document.createElement(tagName);
   if (cssClassName) {
@@ -262,7 +268,7 @@
  * @return   The newly created HTML element.
  */
 orp.view.View.appendNewElement = function(parentElement, tagName, cssClassName, attributesInJson, text) {
-  orp.util.assert(parentElement instanceof HTMLElement);
+  orp.lang.assert(parentElement instanceof HTMLElement);
   
   var newElement = orp.view.View.newElement(tagName, cssClassName, attributesInJson, text);
   parentElement.appendChild(newElement);
@@ -281,8 +287,9 @@
  * @return   The newly created text node.
  */
 orp.view.View.appendNewTextNode = function(parentElement, textString) {
-  orp.util.assert(parentElement instanceof HTMLElement);
-  orp.util.assert(orp.util.isString(textString));
+  orp.lang.assert(parentElement instanceof HTMLElement);
+  // orp.util.assert(orp.util.isString(textString));
+  orp.lang.assertType(textString, String);
 
   var newTextNode = window.document.createTextNode(textString);
   parentElement.appendChild(newTextNode);

Modified: trunk/tests/TestSuite.html
===================================================================
--- trunk/tests/TestSuite.html	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/tests/TestSuite.html	2005-09-23 20:38:57 UTC (rev 338)
@@ -25,6 +25,7 @@
         var testSuite = new window.top.jsUnitTestSuite();
         testSuite.addTestPage("../../../tests/SimpleTest.html");
         testSuite.addTestPage("../../../tests/dojo/SimpleDojoTest.html");
+        testSuite.addTestPage("../../../tests/lang/LangTest.html");
         testSuite.addTestPage("../../../tests/util/TestSuite.html");
         testSuite.addTestPage("../../../tests/model/TestSuite.html");
         testSuite.addTestPage("../../../tests/view/LintTest.html");

Added: trunk/tests/lang/LangTest.html
===================================================================
--- trunk/tests/lang/LangTest.html	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/tests/lang/LangTest.html	2005-09-23 20:38:57 UTC (rev 338)
@@ -0,0 +1,76 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
+<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" >
+
+<!-- 
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+-->
+
+  <head>
+    <title>Unit tests for Lang.js</title>
+
+    <script type="text/javascript" src="../../third_party/jsunit/jsunit2_1/app/jsUnitCore.js"></script>
+    <script type="text/javascript" src="../../third_party/dojo/dojo-0.1.0/dojo.js"></script>
+    <script type="text/javascript" src="LangTest.js"></script>
+  </head>
+  
+  <body>
+    <h1>Unit tests for Lang.js</h1>
+
+    <p>This page is used to run unit tests for the JavaScript code in the 
+    OpenRecord project.</p>
+    
+    <p>&nbsp;</p>
+    <hr/>
+    <p>You should be able to run these unit tests by going to
+    <a href="../../third_party/jsunit/jsunit2_1/testRunner.html?testpage=" 
+    onclick="href+=window.location.href;" rel="external">the local testRunner 
+    page</a>, and hitting the <b>Run</b> button. </p>
+
+    <p>To see the tests, open this .html file in a text editor. Or, within a  
+    web browser, you should be able see the source for this file by using 
+    some menu like <b>View</b> followed by <b>Page Source</b>. The tests 
+    may be in this file, or they may be in a separate file that has the
+    same name as this one, except with a .js extension instead of a .html
+    extension.</p>
+ 
+    <p>The unit tests are set up to run in the
+    <a href="http://www.edwardh.com/jsunit/" rel="external">JsUnit framework</a>
+    written by 
+    <a href="http://www.edwardh.com/" rel="external">Edward Hieatt</a>. </p>
+
+    <p>&nbsp;</p>
+    <hr/>
+    <p class="copyright">You can copy freely from this work &mdash; copyright 
+    rights relinquished under the Creative Commons  
+    <a rel="license external" 
+    href="http://creativecommons.org/licenses/publicdomain/">Public Domain 
+    Dedication</a>.</p>
+
+<!-- Creative Commons metadata for Public Domain License 
+
+<rdf:RDF xmlns="http://web.resource.org/cc/"
+    xmlns:dc="http://purl.org/dc/elements/1.1/"
+    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
+<Work rdf:about="">
+   <dc:title>openrecord.org</dc:title>
+   <dc:type rdf:resource="http://purl.org/dc/dcmitype/Text" />
+   <license rdf:resource="http://web.resource.org/cc/PublicDomain" />
+</Work>
+
+<License rdf:about="http://web.resource.org/cc/PublicDomain">
+   <permits rdf:resource="http://web.resource.org/cc/Reproduction" />
+   <permits rdf:resource="http://web.resource.org/cc/Distribution" />
+   <permits rdf:resource="http://web.resource.org/cc/DerivativeWorks" />
+</License>
+
+</rdf:RDF>
+
+-->
+  </body>
+</html>
+

Added: trunk/tests/lang/LangTest.js
===================================================================
--- trunk/tests/lang/LangTest.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/tests/lang/LangTest.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -0,0 +1,188 @@
+/*****************************************************************************
+ LangTest.js
+ 
+******************************************************************************
+ Written in 2005 by Brian Douglas Skinner <brian.skinner at gumption.org>
+  
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+  
+ You can copy freely from this file.  This work may be freely reproduced, 
+ distributed, transmitted, used, modified, built upon, or otherwise exploited
+ by anyone for any purpose.
+  
+ This work is provided on an "AS IS" basis, without warranties or conditions 
+ of any kind, either express or implied, including, without limitation, any 
+ warranties or conditions of title, non-infringement, merchantability, or 
+ fitness for a particular purpose. You are solely responsible for determining 
+ the appropriateness of using or distributing the work and assume all risks 
+ associated with use of this work, including but not limited to the risks and 
+ costs of errors, compliance with applicable laws, damage to or loss of data 
+ or equipment, and unavailability or interruption of operations.
+
+ In no event shall the authors or contributors have any liability for any 
+ direct, indirect, incidental, special, exemplary, or consequential damages,
+ however caused and on any theory of liability, whether in contract, strict 
+ liability, or tort (including negligence), arising in any way out of or in 
+ connection with the use or distribution of the work.
+*****************************************************************************/
+ 
+
+// -------------------------------------------------------------------
+// setUp and tearDown
+// -------------------------------------------------------------------
+
+function setUp() {
+  dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
+  dojo.hostenv.setModulePrefix("orp", "../../../../source");
+  dojo.require("orp.lang.Lang");
+}
+
+function tearDown() {
+}
+
+
+// -------------------------------------------------------------------
+// Test functions
+// -------------------------------------------------------------------
+
+function testSimpleErrorCatching() {
+  var caughtError = false;
+  try {
+    throw new Error();
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue("We caught an error", caughtError);
+}
+
+function testAbsenceOfErrors() {
+  var caughtError = false;
+  try {
+    var four = 2 + 2;
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue("We did not catch an error", !caughtError);
+}
+
+function testAssertionsThatPass() {
+  var caughtError = false;
+  try {
+    orp.lang.assert(2 + 2 == 4);
+    orp.lang.assert((2 + 2 == 4), "Two plus two is four");
+    orp.lang.assert(dojo.lang.isBoolean(false));
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue("None of the assert statements failed", !caughtError);
+}
+
+function testAssertionsThatFail() {
+  var numberOfFailures = 0;
+  try {
+    orp.lang.assert(2 + 2 == 3);
+  } catch (e) {
+    ++numberOfFailures;
+  }
+  try {
+    orp.lang.assert(2 + 2 == 3, "Two plus two is three");
+  } catch (e) {
+    ++numberOfFailures;
+  }
+  assertTrue("All of the assert statements failed", (numberOfFailures == 2));
+}
+
+function testTypeChecksThatPass() {
+  var caughtError = false;
+  var listOfPairs = [
+    ["foo", String],
+    [new String("foo"), String],
+    [12345, Number],
+    [new Number(12345), Number],
+    [false, Boolean],
+    [[6, 8], Array],
+    [new Array(), Array],
+    [orp.lang.assertType, Function],
+    [testTypeChecksThatFail, Function],
+    [{foo: "bar"}, Object],
+    [new Object(), Object],
+    [new Date(), Object],
+    [new Date(), Date]
+  ];
+  for (var i in listOfPairs) {
+    var pair = listOfPairs[i];
+    var value = pair[0];
+    var type = pair[1];
+    try {
+      orp.lang.assertType(value, type);
+      orp.lang.assertTypeForOptionalValue(value, type);
+    } catch (e) {
+      caughtError = true;
+    }
+  }
+  assertTrue("None of the assertType() calls failed", !caughtError);
+}
+
+function testTypeChecksThatFail() {
+  var numberOfFailures = 0;
+  var listOfPairs = [
+    ["foo", Number],
+    [new String("foo"), Boolean],
+    [12345, String],
+    [new Number(12345), Array],
+    [false, Date],
+    [[6, 8], Function],
+    [new Array(), Date],
+    [orp.lang.assertType, Boolean],
+    [testTypeChecksThatFail, Number],
+    [{foo: "bar"}, Date],
+    [new Object(), String],
+    [new Date(), Array],
+    [new Date(), Number]
+  ];
+  for (var i in listOfPairs) {
+    var pair = listOfPairs[i];
+    var value = pair[0];
+    var type = pair[1];
+    try {
+      orp.lang.assertType(value, type);
+    } catch (e) {
+      ++numberOfFailures;
+    }
+    try {
+      orp.lang.assertTypeForOptionalValue(value, type);
+    } catch (e) {
+      ++numberOfFailures;
+    }
+  }
+  assertTrue("All of the assertType() calls failed", (numberOfFailures == 26));
+}
+
+function testTypeCheckingOptionalValues() {
+  var foo;
+  var caughtError = false;
+  try {
+    orp.lang.assertTypeForOptionalValue(foo, String);
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue("assertTypeForOptionalValue() allows an absent value", !caughtError);
+  try {
+    orp.lang.assertType(foo, String);
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue("assertType() does not allow an absent value", caughtError);
+}
+
+function nop_testFoo() {
+  orp.lang.assert(false, "This is an example of an assert that fails.");
+}
+
+
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/tests/model/TestReorderingForSpecialCases.js
===================================================================
--- trunk/tests/model/TestReorderingForSpecialCases.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/tests/model/TestReorderingForSpecialCases.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -41,7 +41,6 @@
 
 var world;
 var categoryCalledFood = null;
-var utilAssertReportedError;
 
 
 // -------------------------------------------------------------------
@@ -54,8 +53,6 @@
   dojo.require("orp.model.StubVirtualServer");
   dojo.require("orp.model.World");
 
-  utilAssertReportedError = false;
-  orp.util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
   var virtualServer = new orp.model.StubVirtualServer(pathToTrunkDirectory);
 
@@ -86,7 +83,6 @@
 }
 
 function tearDown() {
-  assertFalse(utilAssertReportedError);
   world.logout();
 }
 
@@ -115,9 +111,14 @@
   orp.model.StubVirtualServer.prototype._generateUuid = realUuidGenerator;
   
   assertTrue(sushi.getOrdinalNumber() == pesto.getOrdinalNumber());
-  guava.reorderBetween(sushi, pesto);
-  assertTrue(utilAssertReportedError);
-  utilAssertReportedError = false;
+  
+  var caughtError = false;
+  try {
+    guava.reorderBetween(sushi, pesto);
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue(caughtError);
 }
 
 function testReorderBetweenTwoItemsWithTheSameTimestamp() {
@@ -173,14 +174,5 @@
 
 
 // -------------------------------------------------------------------
-// Helper functions
-// -------------------------------------------------------------------
-
-errorReporter = function() {
-  utilAssertReportedError = true;
-}
-
-
-// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/model/TestReorderingForTypicalOrdinals.js
===================================================================
--- trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/tests/model/TestReorderingForTypicalOrdinals.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -45,7 +45,6 @@
 var pesto;
 var guava;
 var taffy;
-var utilAssertReportedError;
 
 
 // -------------------------------------------------------------------
@@ -60,8 +59,6 @@
   
   ContentRecord = orp.model.ContentRecord;
 
-  utilAssertReportedError = false;
-  orp.util.setErrorReportCallback(errorReporter);
   var pathToTrunkDirectory = "../..";
   var virtualServer = new orp.model.StubVirtualServer(pathToTrunkDirectory);
   var realUuidGenerator = orp.model.StubVirtualServer.prototype._generateUuid;
@@ -137,7 +134,6 @@
 }
 
 function tearDown() {
-  assertFalse(utilAssertReportedError);
   world.logout();
 }
 
@@ -192,9 +188,13 @@
 }
 
 function testReorderBetweenTwoItemsWhichAreTheSame() {
-  pesto.reorderBetween(sushi, sushi);
-  assertTrue(utilAssertReportedError);
-  utilAssertReportedError = false;
+  var caughtError = false;
+  try {
+    pesto.reorderBetween(sushi, sushi);
+  } catch (e) {
+    caughtError = true;
+  }
+  assertTrue(caughtError);
 }
 
 function testReorderBetweenTwoItemsNotInOrder() {
@@ -216,14 +216,5 @@
 
 
 // -------------------------------------------------------------------
-// Helper functions
-// -------------------------------------------------------------------
-
-errorReporter = function() {
-  utilAssertReportedError = true;
-}
-
-
-// -------------------------------------------------------------------
 // End of file
 // -------------------------------------------------------------------

Modified: trunk/tests/util/UtilTest.js
===================================================================
--- trunk/tests/util/UtilTest.js	2005-09-22 20:52:47 UTC (rev 337)
+++ trunk/tests/util/UtilTest.js	2005-09-23 20:38:57 UTC (rev 338)
@@ -41,6 +41,7 @@
   dojo.hostenv.setModulePrefix("dojo", "../../../dojo/dojo-0.1.0/src");
   dojo.hostenv.setModulePrefix("orp", "../../../../source");
   dojo.require("orp.util.Util");
+  dojo.require("dojo.lang.*");
   UtilTestVars = {};
   UtilTestVars.theHobbit = "The Hobbit";
 }
@@ -59,12 +60,12 @@
 }
 
 function testTypeCheckingMethods() {
-  assertTrue('"The Hobbit" is a string', orp.util.isString("The Hobbit"));
-  assertFalse('"The Hobbit" is not a number', orp.util.isNumber("The Hobbit"));
+  assertTrue('"The Hobbit" is a string', dojo.lang.isString("The Hobbit"));
+  assertFalse('"The Hobbit" is not a number', dojo.lang.isNumber("The Hobbit"));
   assertFalse('"The Hobbit" is not numeric', orp.util.isNumeric("The Hobbit"));
-  assertFalse('"The Hobbit" is not a boolean', orp.util.isBoolean("The Hobbit"));
-  assertFalse('"The Hobbit" is not an object', orp.util.isObject("The Hobbit"));
-  assertFalse('"The Hobbit" is not an array', orp.util.isArray("The Hobbit"));
+  assertFalse('"The Hobbit" is not a boolean', dojo.lang.isBoolean("The Hobbit"));
+  assertFalse('"The Hobbit" is not an object', dojo.lang.isObject("The Hobbit"));
+  assertFalse('"The Hobbit" is not an array', dojo.lang.isArray("The Hobbit"));
   assertFalse('"The Hobbit" is not a hash table', orp.util.isHashTable("The Hobbit"));
 }
 



From skinner at berlios.de  Sat Sep 24 01:50:45 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Sat, 24 Sep 2005 01:50:45 +0200
Subject: [openrecord-svn] r339 - trunk/documentation
Message-ID: <200509232350.j8NNojEY031547@sheep.berlios.de>

Author: skinner
Date: 2005-09-24 01:50:41 +0200 (Sat, 24 Sep 2005)
New Revision: 339

Modified:
   trunk/documentation/release_planning.txt
Log:
Added tasks to release_planning.txt

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-23 20:38:57 UTC (rev 338)
+++ trunk/documentation/release_planning.txt	2005-09-23 23:50:41 UTC (rev 339)
@@ -353,17 +353,20 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
 brian  |          | 0.5  IED|  1. look into using the Dojo Package System
-brian  |          | 0.5+    |     convert code to use Dojo Package System
+brian  |          | done (0.5+)   convert code to use Dojo Package System
        |          |         |     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
        |          |         |     try to get djConfig.debugAtAllCosts to work (see sandbox.html)
        |          |         |     try to replace /source/util/Cookie.js with dojo.io.cookies
-       |          |         |     try to replace Util.js functions with dojo.lang functions
+       |          |         |     try to replace orpBindAsEventListener() with dojo.event.connect()
+       |          |         |     try to replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
+       |          |         |     try to replace View.appendNewElement() with Dojo methods
+       |          |         |     move isUuid out of Util.js
+       |          |         |     try to replace remaining Util.js functions with dojo.lang functions
        |          |         |     try using Ant and the Dojo build system to build OpenRecord into a single-file 
-       |          |         |     move isUuid out of Util.js
        |          |         |     change "endOfLife()" to "destroy()"
        |          |         |     move XmlConverter.js out of util, because it depends on model code
 brian  |          | 0    IED|     in model, get rid of ._Record() and ._ContentRecord()
-       |          |         |     make some sort of assertType() method
+brian  |          | done    |     make some sort of assertType() method
 brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
 brian  | 0.25 IED | 0.25 IED|     refactor UUID constructor API, and other UUID improvements
        |          |         |  2. create a FakeStorage class, + rename FileSaver + HttpSaver



From skinner at berlios.de  Mon Sep 26 22:21:08 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Mon, 26 Sep 2005 22:21:08 +0200
Subject: [openrecord-svn] r340 - in trunk/source: . model view
Message-ID: <200509262021.j8QKL8SI002472@sheep.berlios.de>

Author: skinner
Date: 2005-09-26 22:21:06 +0200 (Mon, 26 Sep 2005)
New Revision: 340

Modified:
   trunk/source/BarChartPlugin.js
   trunk/source/TablePlugin.js
   trunk/source/model/Entry.js
   trunk/source/model/Item.js
   trunk/source/model/QueryRunner.js
   trunk/source/model/Record.js
   trunk/source/model/World.js
   trunk/source/view/EntryView.js
Log:
Replaced calls to orp.util.isString() (and friends) with calls to dojo.lang.isString(). 

Modified: trunk/source/BarChartPlugin.js
===================================================================
--- trunk/source/BarChartPlugin.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/BarChartPlugin.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -35,6 +35,7 @@
 dojo.provide("orp.BarChartPlugin");
 dojo.require("orp.view.PluginView");
 dojo.require("orp.view.SectionView");
+dojo.require("dojo.lang.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -136,7 +137,7 @@
         firstEntry = listOfEntries[0];
         if (firstEntry) {
           var value = firstEntry.getValue(contentItem);
-          if (orp.util.isNumber(value)) {
+          if (dojo.lang.isNumber(value)) {
             var count = hashTableOfNumericValueIncidenceKeyedByUuid[attributeUuid];
             if (!count) {
               count = 0;
@@ -169,7 +170,7 @@
       if (listOfEntries && listOfEntries[0]) {
         var nextEntry = listOfEntries[0];
         var nextValue = nextEntry.getValue();
-        if (orp.util.isNumber(nextValue)) {
+        if (dojo.lang.isNumber(nextValue)) {
           maxValue = Math.max(maxValue, nextValue);
         }     
       }
@@ -199,7 +200,7 @@
       if (listOfEntries && listOfEntries[0]) {
         firstEntry = listOfEntries[0];
         var firstValue = firstEntry.getValue();
-        if (orp.util.isNumber(firstValue)) {
+        if (dojo.lang.isNumber(firstValue)) {
           numericValue = firstValue;
         }
       }

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/TablePlugin.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -795,8 +795,8 @@
   }
   
   if (move) {
-    orp.util.isNumber(this._numberOfColumns);
-    orp.util.isArray(this._listOfItems);
+    orp.lang.assertType(this._numberOfColumns, Number);
+    orp.lang.assertType(this._listOfItems, Array);
     
     // line below needs to be called here i.e. early because stopping an edit may change a provisional item
     // to become a "real" one thereby  creating new row for the next provisional item, e.g. this._listOfItems changes

Modified: trunk/source/model/Entry.js
===================================================================
--- trunk/source/model/Entry.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/model/Entry.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -36,6 +36,7 @@
 dojo.require("orp.model.ContentRecord");
 dojo.require("orp.model.World");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.lang.*");
 
 
 // -------------------------------------------------------------------
@@ -114,10 +115,10 @@
   if (type) {
     this._type = type;
   } else {
-    if (orp.util.isNumber(value)) {
+    if (dojo.lang.isNumber(value)) {
       this._type = this.getWorld().getTypeCalledNumber();
     }
-    else if (orp.util.isString(value)) {
+    else if (dojo.lang.isString(value)) {
       this._type = this.getWorld().getTypeCalledText();
     }
     else if (orp.util.isDate(value)) {
@@ -270,7 +271,7 @@
   if (this._item == item) {
     return this._attribute;
   }
-  if (orp.util.isArray(this._item)) {
+  if (dojo.lang.isArray(this._item)) {
     if (this._item[0] == item) {
       return this._attribute[0];
     }
@@ -317,7 +318,7 @@
  * @return   The value this entry was initialized to hold.
  */
 orp.model.Entry.prototype.getValue = function(item) {
-  if (orp.util.isArray(this._item)) {
+  if (dojo.lang.isArray(this._item)) {
     if (this._item[0] == item) {
       return this._item[1];
     }

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/model/Item.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -290,7 +290,7 @@
     // var oldValue = previousEntry.getValue(this);
     var oldPairOfAttributes = previousEntry.getAttribute();
     var oldPairOfItems = previousEntry.getItem();
-    if (orp.util.isArray(oldPairOfAttributes)) {
+    if (dojo.lang.isArray(oldPairOfAttributes)) {
       orp.lang.assertType(oldPairOfAttributes, Array);
       orp.lang.assert(oldPairOfAttributes.length == 2);
       orp.lang.assert(oldPairOfItems.length == 2);
@@ -325,7 +325,7 @@
     if (oldItemOrPairOfItems instanceof orp.model.Item) {
       oldItemOrPairOfItems._noteChanges(null);
     }
-    if (orp.util.isArray(oldItemOrPairOfItems)) {
+    if (dojo.lang.isArray(oldItemOrPairOfItems)) {
       oldItemOrPairOfItems[0]._noteChanges(null);
       oldItemOrPairOfItems[1]._noteChanges(null);
     }

Modified: trunk/source/model/QueryRunner.js
===================================================================
--- trunk/source/model/QueryRunner.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/model/QueryRunner.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -263,7 +263,7 @@
   
   // Handle the case where we have an ad-hoc query 
   // that just has a list of items.
-  if (orp.util.isArray(this._querySpec)) {
+  if (dojo.lang.isArray(this._querySpec)) {
     var querySpecArray = this._querySpec;
     this._matchingAttribute = orp.model.QueryRunner.EXPLICIT_LIST_OF_ITEMS;
     this._listOfMatchingValues = querySpecArray;
@@ -273,7 +273,7 @@
   
   // Handle the case where we have an ad-hoc query that
   // povides a matching attribute and matching values.
-  if (orp.util.isObject(this._querySpec)) {
+  if (dojo.lang.isObject(this._querySpec)) {
     var querySpecJson = this._querySpec;
     this._matchingAttribute = querySpecJson[orp.model.QueryRunner.QuerySpec.ATTRIBUTE];
     if (!this._matchingAttribute) {

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/model/Record.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -58,7 +58,7 @@
  * @param    uuid    The UUID for this Record. 
  */
 orp.model.Record = function(world, uuid) {
-  if (orp.util.isString(uuid)) {
+  if (dojo.lang.isString(uuid)) {
     var uuidString = uuid;
     uuid = new orp.util.TimeBasedUuid(uuidString);
   }

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/model/World.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -37,6 +37,7 @@
 dojo.require("orp.model.QueryRunner");
 dojo.require("orp.model.Vote");
 dojo.require("orp.model.Ordinal");
+dojo.require("dojo.lang.*");
 //-- dojo.require("orp.lang.Lang");
 
 // -------------------------------------------------------------------
@@ -259,7 +260,7 @@
       if (itemOrPairOfItems instanceof orp.model.Item) {
         listOfItems.push(itemOrPairOfItems); 
       }
-      if (orp.util.isArray(itemOrPairOfItems)) {
+      if (dojo.lang.isArray(itemOrPairOfItems)) {
         listOfItems.push(itemOrPairOfItems[0]);
         listOfItems.push(itemOrPairOfItems[1]);
       }
@@ -291,10 +292,10 @@
     var listOfObserversForItem = this._hashTableOfObserverListsKeyedByItemUuid[uuid];
     for (key in listOfObserversForItem) {
       observer = listOfObserversForItem[key];
-      if (orp.util.isFunction(observer)) {
+      if (dojo.lang.isFunction(observer)) {
         observer.call(null, item, listOfRecordsForItem);
       } else {
-        if (orp.util.isObject(observer)) {
+        if (dojo.lang.isObject(observer)) {
           observer.observedItemHasChanged(item, listOfRecordsForItem);
         } else {
           // We should never get here.  If we do, consider it an error.
@@ -326,10 +327,10 @@
     if (listOfItemChangeReports) {
       for (key in setOfObservers) {
         observer = setOfObservers[key];
-        if (orp.util.isFunction(observer)) {
+        if (dojo.lang.isFunction(observer)) {
           observer.call(null, listBeingObserved, listOfItemChangeReports);
         } else {
-          if (orp.util.isObject(observer)) {
+          if (dojo.lang.isObject(observer)) {
             observer.observedListHasChanged(listBeingObserved, listOfItemChangeReports);
           } else {
             // We should never get here.  If we do, consider it an error.
@@ -741,7 +742,7 @@
   // item.addEntryForAttribute(attributeCalledQueryMatchingAttribute, matchingAttribute);
   item.addEntry({attribute:attributeCalledQueryMatchingAttribute, value:matchingAttribute});
   if (matchingEntryOrListOfEntries) {
-    if (orp.util.isArray(matchingEntryOrListOfEntries)) {
+    if (dojo.lang.isArray(matchingEntryOrListOfEntries)) {
       for (var key in matchingEntryOrListOfEntries) {
         matchingEntry = matchingEntryOrListOfEntries[key];
         // item.addEntryForAttribute(attributeCalledQueryMatchingValue, matchingEntry);
@@ -1026,7 +1027,7 @@
  * @return   A number, a DateValue, an item, or the original string value.
  */
 orp.model.World.prototype.transformValueToExpectedType = function(value, listOfTypes) {
-  if (value && orp.util.isString(value) && listOfTypes && orp.util.isArray(listOfTypes)) {
+  if (value && dojo.lang.isString(value) && listOfTypes && dojo.lang.isArray(listOfTypes)) {
     var categoryCalledCategory = this.getCategoryCalledCategory();
     var typeCalledText = this.getTypeCalledText();
     var typeCalledDate = this.getTypeCalledDate();

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-09-23 23:50:41 UTC (rev 339)
+++ trunk/source/view/EntryView.js	2005-09-26 20:21:06 UTC (rev 340)
@@ -415,7 +415,7 @@
         newValue = this._provisionalText;
       }
       var newValueDisplayString = "";
-      if (orp.util.isString(newValue)) {
+      if (dojo.lang.isString(newValue)) {
         newValueDisplayString = newValue;
       }
       else if (newValue instanceof orp.model.Item) {
@@ -446,7 +446,7 @@
  * @param    value    The new value to be saved. 
  */
 orp.view.EntryView.prototype._transformToExpectedType = function(value) {
-  if (value && orp.util.isString(value)) {
+  if (value && dojo.lang.isString(value)) {
     var world = this.getWorld();
     var listOfExpectedTypeEntries;
     if (this._expectedTypeEntries) {



From skinner at berlios.de  Tue Sep 27 03:01:02 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 27 Sep 2005 03:01:02 +0200
Subject: [openrecord-svn] r341 - in trunk: documentation source source/model source/util source/view
Message-ID: <200509270101.j8R112X4003728@sheep.berlios.de>

Author: skinner
Date: 2005-09-27 03:00:25 +0200 (Tue, 27 Sep 2005)
New Revision: 341

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/TablePlugin.js
   trunk/source/model/DeltaVirtualServer.js
   trunk/source/model/Item.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/util/LintTool.js
   trunk/source/util/Util.js
   trunk/source/view/EntryView.js
   trunk/source/view/LoginView.js
   trunk/source/view/MultiEntriesView.js
   trunk/source/view/NavbarView.js
   trunk/source/view/PageView.js
   trunk/source/view/RootView.js
   trunk/source/view/SectionView.js
   trunk/source/view/SuggestionBox.js
Log:
Replaced calls to orp.util.getStringContentsOfFileAtURL() with calls to dojo.hostenv.getText().  Replaced most calls to orpBindAsEventListener() with calls to dojo.event.connect().

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/documentation/release_planning.txt	2005-09-27 01:00:25 UTC (rev 341)
@@ -357,8 +357,8 @@
        |          |         |     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
        |          |         |     try to get djConfig.debugAtAllCosts to work (see sandbox.html)
        |          |         |     try to replace /source/util/Cookie.js with dojo.io.cookies
-       |          |         |     try to replace orpBindAsEventListener() with dojo.event.connect()
-       |          |         |     try to replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
+brian  |          |part done|     try to replace orpBindAsEventListener() with dojo.event.connect()
+brian  |          | 0    IED|     try to replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
        |          |         |     try to replace View.appendNewElement() with Dojo methods
        |          |         |     move isUuid out of Util.js
        |          |         |     try to replace remaining Util.js functions with dojo.lang functions

Modified: trunk/source/TablePlugin.js
===================================================================
--- trunk/source/TablePlugin.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/TablePlugin.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -42,6 +42,7 @@
 dojo.require("orp.model.Item");
 dojo.require("orp.util.CsvParser");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -225,7 +226,8 @@
     }
     optionElt.text += attribute.getDisplayString();
     optionElt.value = attribute.getUuidString();
-    optionElt.onclick = this._attributeEditorChanged.orpBindAsEventListener(this);
+    // optionElt.onclick = this._attributeEditorChanged.orpBindAsEventListener(this);
+    dojo.event.connect(optionElt, "onclick", this, "_attributeEditorChanged");
   }
   this._selectElement = selectElt;
   
@@ -241,9 +243,11 @@
   if (window.location.protocol == "file:") {
     var importDiv = orp.view.View.appendNewElement(htmlElement, "div", orp.view.RootView.cssClass.EDIT_TOOL);
     orp.view.View.appendNewTextNode(importDiv, " Import Data:");
-    var importButton = orp.view.View.appendNewElement(importDiv, "input");
-    importButton.type = "file";
-    importButton.onchange = this._importData.orpBindAsEventListener(this, importButton);
+    this._fileImportButton = orp.view.View.appendNewElement(importDiv, "input");
+    this._fileImportButton.type = "file";
+    
+    // this._fileImportButton.onchange = this._importData.orpBindAsEventListener(this);
+    dojo.event.connect(this._fileImportButton, "onchange", this, "_importData");
   }
 };
 
@@ -436,7 +440,11 @@
     if (this._sortAttribute == attribute) {
       headerCellContentSpan.appendChild(this.getSortIcon());
     }
+    
+    // FIXME: need to figure out how to pass "attribute" via dojo.event.connect()
     Event.observe(headerCell, "click", this.clickOnHeader.orpBindAsEventListener(this, attribute));
+    // dojo.event.connect(headerCell, "onclick", this, "clickOnHeader");
+    
     if (this.isInEditMode()) {
       var listener = this;
       var draggable = new Draggable(headerCellContentSpan, {revert:true});
@@ -595,11 +603,12 @@
  * 
  * @scope    private instance method
  */
-orp.TablePlugin.prototype._importData = function(eventObject, fileButton) {
+orp.TablePlugin.prototype._importData = function(eventObject) {
   var listOfAttributes = this._displayAttributes;
   var startTime = new Date();
   
-  var fileContents = orp.util.getStringContentsOfFileAtURL('file://' + fileButton.value);
+  // var fileContents = orp.util.getStringContentsOfFileAtURL('file://' + this._fileImportButton.value);
+  var fileContents = dojo.hostenv.getText('file://' + this._fileImportButton.value);
   var csvParser = new orp.util.CsvParser();
   var listOfRecords = csvParser.getStringValuesFromCsvData(fileContents);
   if (!listOfRecords) {

Modified: trunk/source/model/DeltaVirtualServer.js
===================================================================
--- trunk/source/model/DeltaVirtualServer.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/model/DeltaVirtualServer.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -100,7 +100,8 @@
     repositoryUrl = this._completePathToTrunkDirectory + '/';
   }
   repositoryUrl += orp.model.DeltaVirtualServer.PATH_TO_REPOSITORY_DIRECTORY + "/" + repositoryFileName;
-  var repositoryContentString = orp.util.getStringContentsOfFileAtURL(repositoryUrl);
+  // var repositoryContentString = orp.util.getStringContentsOfFileAtURL(repositoryUrl);
+  var repositoryContentString = dojo.hostenv.getText(repositoryUrl);
   repositoryContentString += " ] }";
 
   this._loadWorldFromJsonString(repositoryContentString);

Modified: trunk/source/model/Item.js
===================================================================
--- trunk/source/model/Item.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/model/Item.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -188,7 +188,8 @@
  *    var entry = item.addEntry({value: "green"});
  *    entry = item.replaceEntry({previousEntry: entry, value: "green"});
  *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "green"});
- *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "green", type: string});
+ *    var textType = world.getTypeCalledText();
+ *    entry = item.replaceEntry({previousEntry: entry, attribute: color, value: "green", type: textType});
  * </pre>
  * 
  * @scope    public instance method

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/model/StubVirtualServer.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -864,7 +864,8 @@
  * @scope    private instance method
  */
 orp.model.StubVirtualServer.prototype._loadAxiomaticItemsFromFileAtURL = function(url) {
-  var fileContentString = orp.util.getStringContentsOfFileAtURL(url);
+  // var fileContentString = orp.util.getStringContentsOfFileAtURL(url);
+  var fileContentString = dojo.hostenv.getText(url);
   // orp.util.assert(orp.util.isString(fileContentString));
   orp.lang.assertType(fileContentString, String);
   fileContentString += " ] }";

Modified: trunk/source/util/LintTool.js
===================================================================
--- trunk/source/util/LintTool.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/util/LintTool.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -142,7 +142,8 @@
  * @return   Returns an error message string, or returns an empty string if there are no errors (according to jslint).
  */
 orp.util.LintTool.getErrorReportForCodeAtUrl = function(url) {
-  var fileContents = orp.util.getStringContentsOfFileAtURL(url);
+  // var fileContents = orp.util.getStringContentsOfFileAtURL(url);
+  var fileContents = dojo.hostenv.getText(url);
   return orp.util.LintTool.getErrorReportForCodeInString(fileContents);
 };
 

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/util/Util.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -683,11 +683,16 @@
  * @return   A string containing the contents of the file.
  */
 orp.util.getStringContentsOfFileAtURL = function(url) {
+  dj_deprecated("orp.util.getStringContentsOfFileAtURL() is deprecated. Use dojo.hostenv.getText().");
+  return dojo.hostenv.getText(url);
+
+  /* 
   var anXMLHttpRequestObject = new window.XMLHttpRequest();
   anXMLHttpRequestObject.open("GET", url, false);
   anXMLHttpRequestObject.send(null);
   var fileContents = anXMLHttpRequestObject.responseText;
   return fileContents;
+  */
 };
 
 

Modified: trunk/source/view/EntryView.js
===================================================================
--- trunk/source/view/EntryView.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/EntryView.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -40,6 +40,7 @@
 dojo.require("orp.model.World");
 dojo.require("orp.model.Item");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -260,7 +261,8 @@
     this._setClassName();
   }
   
-  htmlElement.onclick = this.onClick.orpBindAsEventListener(this);
+  // htmlElement.onclick = this.onClick.orpBindAsEventListener(this);
+  dojo.event.connect(htmlElement, "onclick", this, "onClick");
   if (this._alwaysUseEditField) {
     this.startEditing(true);
   }
@@ -280,7 +282,9 @@
     var connectionType  = this.getWorld().getItemFromUuid(orp.model.World.UUID.TYPE_CONNECTION);
     if (dataType == itemType || dataType == connectionType) {
       if (this._isLozenge()) {
-        this.getHtmlElement().ondblclick = this.onDoubleClick.orpBindAsEventListener(this);
+        // this.getHtmlElement().ondblclick = this.onDoubleClick.orpBindAsEventListener(this);
+        var htmlElement = this.getHtmlElement();
+        dojo.event.connect(htmlElement, "ondblclick", this, "onDoubleClick");
         if (this.isInEditMode() && !this._draggable) {
           if (orp.view.EntryView._PENDING_temporaryHackToDecreaseLayoutTime) {
             // if (this.getRootView().isInShowToolsMode()) {
@@ -361,10 +365,16 @@
         editField.type = 'text';
       }
       var listener = this; 
-      editField.onblur = this.onBlur.orpBindAsEventListener(this);
-      editField.onkeypress = this.onKeyPress.orpBindAsEventListener(this);
-      editField.onkeyup = this.onKeyUp.orpBindAsEventListener(this);
-      editField.onfocus = this.onFocus.orpBindAsEventListener(this);
+      // editField.onblur = this.onBlur.orpBindAsEventListener(this);
+      // editField.onkeypress = this.onKeyPress.orpBindAsEventListener(this);
+      // editField.onkeyup = this.onKeyUp.orpBindAsEventListener(this);
+      // editField.onfocus = this.onFocus.orpBindAsEventListener(this);
+      dojo.event.connect(editField, "onblur", this, "onBlur");
+      dojo.event.connect(editField, "onkeypress", this, "onKeyPress");
+      dojo.event.connect(editField, "onkeyup", this, "onKeyUp");
+      dojo.event.connect(editField, "onfocus", this, "onFocus");
+      
+      
       editField.value = this._isProvisional ? '' : (initialStr) ? initialStr : this._textNode.data;
       //alert(editField.value)
       if (this.getSuperview().getEntryWidth) {

Modified: trunk/source/view/LoginView.js
===================================================================
--- trunk/source/view/LoginView.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/LoginView.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -37,6 +37,7 @@
 dojo.provide("orp.view.LoginView");
 dojo.provide("orp.view.UserSuggestionBox");
 dojo.require("orp.view.View");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -141,44 +142,52 @@
     //   Enter new name and password:  _username_  _password_  [Create New Account]
     
     orp.view.View.appendNewTextNode(mySpan,"Enter new name and password:");
-    this.usernameInput = orp.view.View.appendNewElement(mySpan,"input",null,{size:20,value:"Albert Einstein"});
+    this.usernameInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:20, value:"Albert Einstein"});
     orp.view.View.appendNewTextNode(mySpan," ");
-    this.passwordInput = orp.view.View.appendNewElement(mySpan,"input",null,{size:10,type:"password",value:"randomdots"});
-    this.passwordInput.onkeypress = this._createAccountPasswordKeyPress.orpBindAsEventListener(this);
-    orp.view.View.appendNewTextNode(mySpan," ");
-    orp.view.View.appendNewElement(mySpan,"input",null,{value:"Create New Account",type:"button"}).onclick = 
-      this._clickOnNewAcctButton.orpBindAsEventListener(this);
+    this.passwordInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:10, type:"password", value:"randomdots"});
+    // this.passwordInput.onkeypress = this._createAccountPasswordKeyPress.orpBindAsEventListener(this);
+    dojo.event.connect(this.passwordInput, "onkeypress", this, "_createAccountPasswordKeyPress");
+    orp.view.View.appendNewTextNode(mySpan, " ");
+    var newAccountButton = orp.view.View.appendNewElement(mySpan ,"input", null, {value:"Create New Account", type:"button"});
+    // newAccountButton.onclick = this._clickOnNewAcctButton.orpBindAsEventListener(this);
+    dojo.event.connect(newAccountButton, "onclick", this, "_clickOnNewAcctButton");
     this.usernameInput.select();
-  }
-  else if (currentUser) { 
+  } else if (currentUser) { 
     // The user is already logged in.
     // Create a line that looks like this:
     //   Hello Jane Doe.  _Sign out_  [Edit]
     
-    orp.view.View.appendNewTextNode(mySpan,"Hello " + currentUser.getDisplayString() + ". ");
-    orp.view.View.appendNewElement(mySpan,"a",null,null,"Sign out").onclick = this._clickOnSignoutLink.orpBindAsEventListener(this);
-    orp.view.View.appendNewTextNode(mySpan," ");
-    orp.view.View.appendNewElement(mySpan,"input",null,{type:"button",value:
-      (this.getRootView().isInShowToolsMode()) ? "Hide Tools" : "Show Tools"}).onclick =
-        this._clickOnShowToolsButton.orpBindAsEventListener(this);
+    orp.view.View.appendNewTextNode(mySpan, "Hello " + currentUser.getDisplayString() + ". ");
+    var signOutLink = orp.view.View.appendNewElement(mySpan, "a", null, null, "Sign out");
+    // signOutLink.onclick = this._clickOnSignoutLink.orpBindAsEventListener(this);
+    dojo.event.connect(signOutLink, "onclick", this, "_clickOnSignoutLink");
+    orp.view.View.appendNewTextNode(mySpan, " ");
+    var showToolsButton = orp.view.View.appendNewElement(mySpan, "input", null, {type:"button", value:
+      (this.getRootView().isInShowToolsMode()) ? "Hide Tools" : "Show Tools"});
+    // showToolsButton.onclick = this._clickOnShowToolsButton.orpBindAsEventListener(this);
+    dojo.event.connect(showToolsButton, "onclick", this, "_clickOnShowToolsButton");
   }
   else {
     // The user has not yet signed in.
     // Create a line that looks like this:
     //   _Create Account_  or sign in:  _username_  _password_  [Sign in]
     
-    orp.view.View.appendNewElement(mySpan,"a",null,null,"Create Account").onclick = 
-      this._clickOnCreateAccountLink.orpBindAsEventListener(this);
-    orp.view.View.appendNewTextNode(mySpan," or sign in: ");
-    this.usernameInput = orp.view.View.appendNewElement(mySpan,"input",null,{size:20,value:"Albert Einstein"});
+    var createAccountLink = orp.view.View.appendNewElement(mySpan, "a", null, null, "Create Account");
+    // createAccountLink.onclick = this._clickOnCreateAccountLink.orpBindAsEventListener(this);
+    dojo.event.connect(createAccountLink, "onclick", this, "_clickOnCreateAccountLink");
+    orp.view.View.appendNewTextNode(mySpan, " or sign in: ");
+    this.usernameInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:20,value:"Albert Einstein"});
     mySpan.appendChild(document.createTextNode(" "));
-    this.passwordInput = orp.view.View.appendNewElement(mySpan,"input",null,{size:10,type:"password",value:"randomdots"});
-    this.passwordInput.onkeypress = this._signinPasswordKeyPress.orpBindAsEventListener(this);
-    this.passwordInput.onfocus = this._signinPasswordFocus.orpBindAsEventListener(this);
+    this.passwordInput = orp.view.View.appendNewElement(mySpan, "input", null, {size:10,type:"password",value:"randomdots"});
+    // this.passwordInput.onkeypress = this._signinPasswordKeyPress.orpBindAsEventListener(this);
+    // this.passwordInput.onfocus = this._signinPasswordFocus.orpBindAsEventListener(this);
+    dojo.event.connect(this.passwordInput, "onkeypress", this, "_signinPasswordKeyPress");
+    dojo.event.connect(this.passwordInput, "onfocus", this, "_signinPasswordFocus");
     this._myUsernameSuggestionBox = new orp.view.UserSuggestionBox(this.usernameInput, this.getWorld().getUsers(), this.passwordInput);
     mySpan.appendChild(document.createTextNode(" "));
-    orp.view.View.appendNewElement(mySpan,"input",null,{value:"Sign in",type:"button"}).onclick =
-      this._clickOnSignInButton.orpBindAsEventListener(this);
+    var signInButton = orp.view.View.appendNewElement(mySpan, "input", null, {value:"Sign in",type:"button"});
+    // signInButton.onclick = this._clickOnSignInButton.orpBindAsEventListener(this);
+    dojo.event.connect(signInButton, "onclick", this, "_clickOnSignInButton");
   }
   
 };
@@ -394,9 +403,12 @@
   this._userSuggestionBoxDivElement.style.display = "none";
   document.body.appendChild(this._userSuggestionBoxDivElement);
   
-  this._inputField.onkeyup = this._keyPressOnInputField.orpBindAsEventListener(this);
-  this._inputField.onfocus = this._focusOnInputField.orpBindAsEventListener(this);
-  this._inputField.onblur = this._blurOnInputField.orpBindAsEventListener(this);
+  // this._inputField.onkeyup = this._keyPressOnInputField.orpBindAsEventListener(this);
+  // this._inputField.onfocus = this._focusOnInputField.orpBindAsEventListener(this);
+  // this._inputField.onblur = this._blurOnInputField.orpBindAsEventListener(this);
+  dojo.event.connect(this._inputField, "onkeyup", this, "_keyPressOnInputField");
+  dojo.event.connect(this._inputField, "onfocus", this, "_focusOnInputField");
+  dojo.event.connect(this._inputField, "onblur", this, "_blurOnInputField");
   //this._keyPressOnInputField();
 };
 

Modified: trunk/source/view/MultiEntriesView.js
===================================================================
--- trunk/source/view/MultiEntriesView.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/MultiEntriesView.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -39,6 +39,7 @@
 dojo.require("orp.view.EntryView");
 dojo.require("orp.model.Item");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -361,7 +362,8 @@
   }
   
   if (this.isInEditMode()) {
-    htmlElement.onclick = this._handleOwnClick.orpBindAsEventListener(this);
+    // htmlElement.onclick = this._handleOwnClick.orpBindAsEventListener(this);
+    dojo.event.connect(htmlElement, "onclick", this, "_handleOwnClick");
     var listener = this;
     Droppables.add(htmlElement, {accept: [orp.view.EntryView.cssClass.CONNECTION_VALUE, orp.view.EntryView.CSS_ITEM_VALUE, orp.view.EntryView.cssClass.SELECTED],
       hoverclass: "test",

Modified: trunk/source/view/NavbarView.js
===================================================================
--- trunk/source/view/NavbarView.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/NavbarView.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -38,6 +38,7 @@
 dojo.require("orp.view.View");
 dojo.require("orp.view.RootView");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -121,10 +122,12 @@
  *
  * @scope    public instance method
  * @param    event    The mousedown event object. 
- * @param    liElement    The HTMLElement for this menu item. 
  */
-orp.view.NavbarView.prototype._mouseDownOnMenuItem = function(event, liElement) {
-  this._liElementBeingTouched = liElement;
+orp.view.NavbarView.prototype._mouseDownOnMenuItem = function(event) {
+  // FIXME: 
+  // Should we be using "event.target" instead of "event.currentTarget"?
+  // Or should we be using orp.util.getTargetFromEvent(event)?
+  this._liElementBeingTouched = event.currentTarget;
 };
 
 
@@ -218,8 +221,9 @@
     var liElement = orp.view.View.appendNewElement(ulElement, "li", orp.view.NavbarView.cssClass.MENU_ITEM, {id: menuItemId});
     if (page == this.getRootView().getCurrentPage()) {orp.util.css_addClass(liElement, orp.view.NavbarView.cssClass.SELECTED);}
     var anchorElement = orp.view.View.appendNewElement(liElement, "a", null, {href: menuUrl}, menuText);
-    Event.observe(anchorElement, "click", orp.view.RootView.clickOnLocalLink.orpBindAsEventListener());
-    Event.observe(liElement, "mousedown", this._mouseDownOnMenuItem.orpBindAsEventListener(this, liElement));
+    
+    dojo.event.connect(anchorElement, "onclick", orp.view.RootView.clickOnLocalLink);
+    dojo.event.connect(liElement, "onmousedown", this, "_mouseDownOnMenuItem");
   }
   var listener = this;
   this._builtForEditMode = this.isInEditMode();
@@ -232,7 +236,8 @@
   var newPageButton = orp.view.View.appendNewElement(divElement, "input", orp.view.RootView.cssClass.EDIT_TOOL);
   newPageButton.type = "button";
   newPageButton.value = "New Page";
-  newPageButton.onclick = this._clickOnNewPageButton.orpBindAsEventListener(this);
+  // newPageButton.onclick = this._clickOnNewPageButton.orpBindAsEventListener(this);
+  dojo.event.connect(newPageButton, "onclick", this, "_clickOnNewPageButton");
 };
 
 

Modified: trunk/source/view/PageView.js
===================================================================
--- trunk/source/view/PageView.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/PageView.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -41,6 +41,7 @@
 dojo.require("orp.view.EntryView");
 dojo.require("orp.model.Item");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -265,7 +266,8 @@
     var editButton = orp.view.View.appendNewElement(this._editModeDiv, "input");
     editButton.type = "Button";
     editButton.value = "New Section";
-    editButton.onclick = this._addNewSection.orpBindAsEventListener(this);
+    // editButton.onclick = this._addNewSection.orpBindAsEventListener(this);
+    dojo.event.connect(editButton, "onclick", this, "_addNewSection");
   }
 };
 

Modified: trunk/source/view/RootView.js
===================================================================
--- trunk/source/view/RootView.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/RootView.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -42,6 +42,7 @@
 dojo.require("orp.view.ItemView");
 dojo.require("orp.model.World");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -91,7 +92,8 @@
   
   this._currentlyInDisplayMethod = false;
   
-  document.addEventListener("keypress", this._onKeyPress.orpBindAsEventListener(this),false);
+  // document.addEventListener("keypress", this._onKeyPress.orpBindAsEventListener(this),false);
+  dojo.event.connect(document, "onkeypress", this, "_onKeyPress");
   
   // window.document.body.innerHTML = "";
   // var rootDiv = orp.view.View.appendNewElement(window.document.body, "div");
@@ -591,6 +593,7 @@
   else {this._selections = [];}
 };
 
+
 /**
  * Adds the selection with the given selectable object (current View) 
  * @scope    public instance method
@@ -598,9 +601,10 @@
  */
 orp.view.RootView.prototype.addToSelection = function(aView) {
   orp.lang.assert(aView instanceof orp.view.View);
-  orp.util.addObjectToSet(aView,this._selections);
+  orp.util.addObjectToSet(aView, this._selections);
 };
 
+
 /**
  * Removes the given selectable object (current View) from selection
  * @scope    public instance method
@@ -608,9 +612,10 @@
  */
 orp.view.RootView.prototype.removeFromSelection = function(aView) {
   orp.lang.assert(aView instanceof orp.view.View);
-  orp.lang.assert(orp.util.removeObjectFromSet(aView,this._selections));
+  orp.lang.assert(orp.util.removeObjectFromSet(aView, this._selections));
 };
   
+
 // -------------------------------------------------------------------
 // Event handler methods
 // -------------------------------------------------------------------

Modified: trunk/source/view/SectionView.js
===================================================================
--- trunk/source/view/SectionView.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/SectionView.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -41,6 +41,7 @@
 dojo.require("orp.view.RootView");
 dojo.require("orp.model.Item");
 dojo.require("orp.lang.Lang");
+dojo.require("dojo.event.*");
 
 // FIXME: We shouldn't need to include these three lines:
 dojo.require("orp.DetailPlugin");
@@ -362,7 +363,8 @@
     var optionElement = orp.view.View.appendNewElement(selectElement, "option");
     optionElement.selected = (matchingAttribute.getDisplayString() == anAttribute.getDisplayString());
     optionElement.value = anAttribute.getUuidString();
-    optionElement.onclick = this.clickOnAttributeMenu.orpBindAsEventListener(this);
+    // optionElement.onclick = this.clickOnAttributeMenu.orpBindAsEventListener(this);
+    dojo.event.connect(optionElement, "onclick", this, "clickOnAttributeMenu");
     optionElement.text = anAttribute.getDisplayString();
   }
   

Modified: trunk/source/view/SuggestionBox.js
===================================================================
--- trunk/source/view/SuggestionBox.js	2005-09-26 20:21:06 UTC (rev 340)
+++ trunk/source/view/SuggestionBox.js	2005-09-27 01:00:25 UTC (rev 341)
@@ -36,6 +36,7 @@
 // -------------------------------------------------------------------
 dojo.provide("orp.view.SuggestionBox");
 dojo.require("orp.util.Util");
+dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
 // Dependencies, expressed in the syntax that JSLint understands:
@@ -254,7 +255,11 @@
       var cell = row.insertCell(columnNumber);
       row.className = (this._selectedItem == item) ? "selected":"";
       cell.appendChild(textNode);
+      
+      // FIXME: need to figure out how to pass "item" as a parameter via dojo.event.connect()
       cell.onmousedown = this._clickOnSelection.orpBindAsEventListener(this, item);
+      // dojo.event.connect(cell, "onmousedown", this, "_clickOnSelection");
+      
       rowNumber += 1;
     }
     this._suggestionBoxDivElement.appendChild(table);



From skinner at berlios.de  Tue Sep 27 03:39:09 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 27 Sep 2005 03:39:09 +0200
Subject: [openrecord-svn] r342 - in trunk: source/model tests/model
Message-ID: <200509270139.j8R1d9dR027770@sheep.berlios.de>

Author: skinner
Date: 2005-09-27 03:39:06 +0200 (Tue, 27 Sep 2005)
New Revision: 342

Modified:
   trunk/source/model/2005_june_axiomatic_items.json
   trunk/source/model/World.js
   trunk/tests/model/ModelTest.js
Log:
Added the new axiomatic attribute "Class Name", to be used for dynamically loading plugins.

Modified: trunk/source/model/2005_june_axiomatic_items.json
===================================================================
--- trunk/source/model/2005_june_axiomatic_items.json	2005-09-27 01:00:25 UTC (rev 341)
+++ trunk/source/model/2005_june_axiomatic_items.json	2005-09-27 01:39:06 UTC (rev 342)
@@ -63,6 +63,10 @@
              "uuid": "0000100e-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Item": {                                               // Attribute: Class Name
+             "uuid": "0000100f-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Item": {                                               // Type: Text
              "uuid": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
     },
@@ -503,6 +507,31 @@
             "value": "00001030-ce7f-11d9-8cd5-0011113ae5d6" }
     },
     // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Class Name"
+             "uuid": "000100fa-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name
+             "item": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Class Name
+             "type": "00001020-ce7f-11d9-8cd5-0011113ae5d6",  // TextValue
+            "value": "Class Name" }
+    },
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              
+             // in item (Attribute: Class Name) assign (Attribute: Category) = (Category: Attribute)
+             // in item (Category: Attribute) assign (Attribute: Items in Category) = (Attribute: Class Name)
+             "uuid": "000100fb-ce7f-11d9-8cd5-0011113ae5d6",
+             "type": "00001050-ce7f-11d9-8cd5-0011113ae5d6",
+             "item": ["0000100f-ce7f-11d9-8cd5-0011113ae5d6", "00001210-ce7f-11d9-8cd5-0011113ae5d6"],
+        "attribute": ["00001005-ce7f-11d9-8cd5-0011113ae5d6", "0000100c-ce7f-11d9-8cd5-0011113ae5d6"]  }
+    },  
+    // -----------------------------------------------------------------------
+    { "Entry": {                                              // "Class Name"
+             "uuid": "000100fc-ce7f-11d9-8cd5-0011113ae5d6",
+        "attribute": "0000100a-ce7f-11d9-8cd5-0011113ae5d6",  // Expected Type
+             "item": "0000100f-ce7f-11d9-8cd5-0011113ae5d6",  // Attribute: Class Name
+             "type": "00001030-ce7f-11d9-8cd5-0011113ae5d6",  // RelatedUuid
+            "value": "00001020-ce7f-11d9-8cd5-0011113ae5d6" }
+    },
+    // -----------------------------------------------------------------------
     { "Entry": {                                              // "Text"
              "uuid": "0001020a-ce7f-11d9-8cd5-0011113ae5d6",
         "attribute": "00001001-ce7f-11d9-8cd5-0011113ae5d6",  // Name

Modified: trunk/source/model/World.js
===================================================================
--- trunk/source/model/World.js	2005-09-27 01:00:25 UTC (rev 341)
+++ trunk/source/model/World.js	2005-09-27 01:39:06 UTC (rev 342)
@@ -118,6 +118,7 @@
   ATTRIBUTE_ITEMS_IN_CATEGORY:        "0000100c-ce7f-11d9-8cd5-0011113ae5d6",
   ATTRIBUTE_TAG:                      "0000100d-ce7f-11d9-8cd5-0011113ae5d6",
   ATTRIBUTE_TAGGED_ITEMS:             "0000100e-ce7f-11d9-8cd5-0011113ae5d6",
+  ATTRIBUTE_CLASS_NAME:               "0000100f-ce7f-11d9-8cd5-0011113ae5d6",
 
   TYPE_TEXT:               "00001020-ce7f-11d9-8cd5-0011113ae5d6",
   TYPE_NUMBER:             "00001021-ce7f-11d9-8cd5-0011113ae5d6",
@@ -167,6 +168,7 @@
   this._attributeCalledItemsInCategory        = server.getItemFromUuid(UUID.ATTRIBUTE_ITEMS_IN_CATEGORY);
   this._attributeCalledTag                    = server.getItemFromUuid(UUID.ATTRIBUTE_TAG);
   this._attributeCalledTaggedItems            = server.getItemFromUuid(UUID.ATTRIBUTE_TAGGED_ITEMS);
+  this._attributeCalledClassName              = server.getItemFromUuid(UUID.ATTRIBUTE_CLASS_NAME);
 
   // load the axiomatic types
   this._typeCalledText       = server.getItemFromUuid(UUID.TYPE_TEXT);
@@ -496,7 +498,12 @@
   return this._attributeCalledTaggedItems;
 };
 
+orp.model.World.prototype.getAttributeCalledClassName = function() {
+  return this._attributeCalledClassName;
+};
 
+
+
 // -------------------------------------------------------------------
 // Accessor methods for axiomatic categories
 // -------------------------------------------------------------------

Modified: trunk/tests/model/ModelTest.js
===================================================================
--- trunk/tests/model/ModelTest.js	2005-09-27 01:00:25 UTC (rev 341)
+++ trunk/tests/model/ModelTest.js	2005-09-27 01:39:06 UTC (rev 342)
@@ -193,11 +193,13 @@
   var listOfAssignedNames;
   var nameEntry;
   
+  var categoryCalledAttribute = world.getCategoryCalledAttribute();
   var listOfAttributes = [];
   listOfAttributes.push(world.getAttributeCalledName());
   listOfAttributes.push(world.getAttributeCalledShortName());
   listOfAttributes.push(world.getAttributeCalledSummary());
   listOfAttributes.push(world.getAttributeCalledCategory());
+  listOfAttributes.push(world.getAttributeCalledClassName());
   for (key in listOfAttributes) {
     item = listOfAttributes[key];
     listOfAssignedNames = item.getNameEntries();
@@ -206,6 +208,7 @@
     nameEntry = listOfAssignedNames[0];
     assertTrue('Every axiomatic attribute has a name which is an entry', (nameEntry instanceof orp.model.Entry));
     assertTrue('Every entry can be displayed as a string', orp.util.isString(nameEntry.getDisplayString()));
+    assertTrue('Every axiomatic attribute is in the category "Attribute"', item.isInCategory(categoryCalledAttribute));
   }
   
   var listOfCategories = [];



From skinner at berlios.de  Tue Sep 27 21:52:24 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Tue, 27 Sep 2005 21:52:24 +0200
Subject: [openrecord-svn] r343 - in trunk: documentation source source/model source/util tests/model tests/util
Message-ID: <200509271952.j8RJqO5w009557@sheep.berlios.de>

Author: skinner
Date: 2005-09-27 21:52:23 +0200 (Tue, 27 Sep 2005)
New Revision: 343

Modified:
   trunk/documentation/release_planning.txt
   trunk/source/OpenRecordLoader.js
   trunk/source/model/Record.js
   trunk/source/model/StubVirtualServer.js
   trunk/source/util/RandomUuid.js
   trunk/source/util/TimeBasedUuid.js
   trunk/source/util/Util.js
   trunk/source/util/Uuid.js
   trunk/tests/model/MockUuidGenerator.js
   trunk/tests/util/UuidTest.js
Log:
More error checking and error handling.

Modified: trunk/documentation/release_planning.txt
===================================================================
--- trunk/documentation/release_planning.txt	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/documentation/release_planning.txt	2005-09-27 19:52:23 UTC (rev 343)
@@ -353,20 +353,20 @@
 Who    | Estimate | Actual  | Task
 -------+----------+---------+----------------------------------------------
 brian  |          | 0.5  IED|  1. look into using the Dojo Package System
-brian  |          | done (0.5+)   convert code to use Dojo Package System
-       |          |         |     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
-       |          |         |     try to get djConfig.debugAtAllCosts to work (see sandbox.html)
-       |          |         |     try to replace /source/util/Cookie.js with dojo.io.cookies
-brian  |          |part done|     try to replace orpBindAsEventListener() with dojo.event.connect()
-brian  |          | 0    IED|     try to replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
-       |          |         |     try to replace View.appendNewElement() with Dojo methods
-       |          |         |     move isUuid out of Util.js
+brian  |          | 2    IED|     convert code to use Dojo Package System
+brian  |          | 0    IED|     try removing all the lines: dojo.hostenv.setModulePrefix("dojo", ... 
+brian  |          | 0    IED|     replace orp.util.getStringContentsOfFileAtURL() with a Dojo method
+brian  |          | 0.5  IED|     move isUuid out of Util.js, and add more error checking code
+brian  |          | (0.25+) |     replace orpBindAsEventListener() with dojo.event.connect()
+       |          | (0.25+) |     try to get djConfig.debugAtAllCosts to work (see sandbox.html)
+       |          |         |     try to replace orp.util.css_xxx functions with dojo.xml.htmlUtil.xxxClass functions
+       |          |         |     try to replace View.appendNewElement() with dojo.xml.domUtil methods
        |          |         |     try to replace remaining Util.js functions with dojo.lang functions
        |          |         |     try using Ant and the Dojo build system to build OpenRecord into a single-file 
        |          |         |     change "endOfLife()" to "destroy()"
        |          |         |     move XmlConverter.js out of util, because it depends on model code
 brian  |          | 0    IED|     in model, get rid of ._Record() and ._ContentRecord()
-brian  |          | done    |     make some sort of assertType() method
+brian  |          | 0.75 IED|     make some sort of assertType() method
 brian  | 0.25 IED | 0    IED|     move scrap_yard contents to the tests_of_external_code directory and delete scrap_yard
 brian  | 0.25 IED | 0.25 IED|     refactor UUID constructor API, and other UUID improvements
        |          |         |  2. create a FakeStorage class, + rename FileSaver + HttpSaver
@@ -375,7 +375,7 @@
        |          |         |  5. research standard text representations for DateValues
        |          |         |  6. make ordinal value strings not grow long so quickly
        |          |         |  7. Do lazy creation of layout data items
-brian  | 0.5  IED |         |     Make Item.js use namedParameter based API
+brian  | 0.5  IED | (0.5+)  |     Make Item.js use namedParameter based API
 brian  |          |         |     Decide whether or not to replace bi-directional connection entries with twin-entries
        |          |         |  8. Document the Data model public API
        |          |         |  9. Do refactoring wherever needed (e.g. SuggestionBox and AttributeSuggestionBox)
@@ -446,6 +446,7 @@
        |          |         | 66. Set up an OpenRecord.org "dogfood" site & hand-copy info into it
        |          |         | 67. Have different documents use different style-sheets
 -------+----------+---------+----------------------------------------------
+       |          |         |     replace /source/util/Cookie.js with dojo.io.cookies
                               
 
 

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/source/OpenRecordLoader.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -136,8 +136,12 @@
   if (firefox) {
     errorMessage = "Loading...";
     // display errorMessage
-    var world = new orp.model.World();
-    new orp.view.RootView(world);
+    try {
+      var world = new orp.model.World();
+      new orp.view.RootView(world);
+    } catch (e) {
+      alert(e);
+    }
   }
 };    
 

Modified: trunk/source/model/Record.js
===================================================================
--- trunk/source/model/Record.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/source/model/Record.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -61,8 +61,9 @@
   if (dojo.lang.isString(uuid)) {
     var uuidString = uuid;
     uuid = new orp.util.TimeBasedUuid(uuidString);
+    orp.lang.assert(uuid instanceof orp.util.TimeBasedUuid);
   }
-  
+
   // Unfortunately, we need to treat 'world' and 'uuid' as 'Optional'. 
   // I think this constructor is invoked by dj_inherits() calls 
   // (in ContentRecord, Vote, and Ordinal), which do not pass

Modified: trunk/source/model/StubVirtualServer.js
===================================================================
--- trunk/source/model/StubVirtualServer.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/source/model/StubVirtualServer.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -607,7 +607,7 @@
  * @return   The item identified by the given UUID.
  */
 orp.model.StubVirtualServer.prototype.getItemFromUuid = function(uuid, observer) {
-  orp.lang.assert(orp.util.isUuidValue(uuid));
+  orp.lang.assert(dojo.lang.isString(uuid) || uuid instanceof orp.util.Uuid);
   
   var item = this._hashTableOfItemsKeyedByUuid[uuid];
   if (item && observer) {
@@ -1008,7 +1008,6 @@
         }
  
         var dataTypeUuid = dehydratedEntry[JSON_MEMBER.TYPE];
-        orp.lang.assert(orp.util.isUuidValue(dataTypeUuid));
         var dataType = this._getItemFromUuidOrBootstrapItem(dataTypeUuid);
         
         if (dataTypeUuid == orp.model.World.UUID.TYPE_CONNECTION) {

Modified: trunk/source/util/RandomUuid.js
===================================================================
--- trunk/source/util/RandomUuid.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/source/util/RandomUuid.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -81,10 +81,9 @@
         orp.lang.assert(false);
       }
     }
-    // orp.lang.assert(dojo.lang.isString(uuidString));
     orp.lang.assertType(uuidString, String);
-    orp.lang.assert(uuidString.length == 36);
     this._uuidString = uuidString;
+    orp.lang.assert(this.isValid());
   } else {
     this._uuidString = this._generateUuidString();
   }
@@ -95,6 +94,28 @@
 
 
 // -------------------------------------------------------------------
+// Public instance methods
+// -------------------------------------------------------------------
+
+/**
+ * Returns true if the UUID was initialized with a valid value. 
+ *
+ * @scope    public instance method
+ * @return   True if the UUID is valid, or false if it is not.
+ */
+orp.util.RandomUuid.prototype.isValid = function() {
+  try {
+    orp.lang.assert(orp.util.Uuid.prototype.isValid.call(this));
+    orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.RANDOM);
+    orp.lang.assert(this.getVariant() == orp.util.Uuid.Variant.DCE);
+    return true;
+  } catch (e) {
+    return false;
+  }
+};
+
+
+// -------------------------------------------------------------------
 // Private class methods
 // -------------------------------------------------------------------
 

Modified: trunk/source/util/TimeBasedUuid.js
===================================================================
--- trunk/source/util/TimeBasedUuid.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/source/util/TimeBasedUuid.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -86,7 +86,7 @@
   if (namedParameters) {
     if (dojo.lang.isString(namedParameters)) {
       uuidString = namedParameters;
-      orp.lang.assert(uuidString.length == 36);
+      // orp.lang.assert(uuidString.length == 36);
       this._uuidString = uuidString;
     } else {
       if (dojo.lang.isObject(namedParameters)) {
@@ -99,7 +99,7 @@
         orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString", "node", "pseudoNode", "hardwareNode"]));
         if (uuidString) {
           orp.lang.assert(!node && !pseudoNode && !hardwareNode);
-          orp.lang.assert(uuidString.length == 36);
+          // orp.lang.assert(uuidString.length == 36);
           this._uuidString = uuidString;
         }
         if (node || pseudoNode || hardwareNode) {
@@ -118,6 +118,7 @@
         orp.lang.assert(false);
       }
     }
+    orp.lang.assert(this.isValid());
   } else {
     this._uuidString = this._generateUuidString();
   }
@@ -154,6 +155,24 @@
 // -------------------------------------------------------------------
 
 /**
+ * Returns true if the UUID was initialized with a valid value. 
+ *
+ * @scope    public instance method
+ * @return   True if the UUID is valid, or false if it is not.
+ */
+orp.util.TimeBasedUuid.prototype.isValid = function() {
+  try {
+    orp.lang.assert(orp.util.Uuid.prototype.isValid.call(this));
+    orp.lang.assert(this.getVersion() == orp.util.Uuid.Version.TIME_BASED);
+    orp.lang.assert(this.getVariant() == orp.util.Uuid.Variant.DCE);
+    return true;
+  } catch (e) {
+    return false;
+  }
+};
+
+
+/**
  * Returns a 12-character string with the "node" or "pseudonode" portion of 
  * the UUID, which is the rightmost 12 characters.
  * 

Modified: trunk/source/util/Util.js
===================================================================
--- trunk/source/util/Util.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/source/util/Util.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -331,6 +331,7 @@
  * @return   A boolean value. True if value is a UUID object.
  */
 orp.util.isUuid = function(value) {
+  dj_deprecated("orp.util.isUuid() is deprecated. Use orp.util.Uuid.prototype.isValid().");
   // return (value instanceof orp.util.Uuid);
   return true; // PENDING: FIXME.
 };
@@ -346,6 +347,7 @@
  * @return   A boolean value. True if value is a UUID.
  */
 orp.util.isUuidValue = function(value) {
+  dj_deprecated("orp.util.isUuidValue() is deprecated. Use orp.util.Uuid.prototype.isValid().");
   if (orp.util.isUuid(value)) {
     return true;
   }

Modified: trunk/source/util/Uuid.js
===================================================================
--- trunk/source/util/Uuid.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/source/util/Uuid.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -71,9 +71,10 @@
         // Check for typos in parameter names
         orp.lang.assert(orp.util.hasNoUnexpectedProperties(namedParameters, ["uuidString"]));
       } else {
-        orp.lang.assert(false);
+        orp.lang.assert(false, "The orp.util.Uuid() constructor must be initializated with a UUID string.");
       }
     }
+    orp.lang.assert(this.isValid());
   }
 };
 
@@ -117,10 +118,8 @@
   if (dojo.lang.isString(namedParameters)) {
     uuidString = namedParameters;
   } else {
-    // orp.util.assert(dojo.lang.isObject(namedParameters));
     orp.lang.assertType(namedParameters, Object);
     uuidString = namedParameters[orp.util.Uuid.NamedParameters.uuidString];
-    // orp.util.assert(dojo.lang.isString(uuidString));
     orp.lang.assertType(uuidString, String);
     
     // Check for typos in parameter names
@@ -163,6 +162,35 @@
 
 
 /**
+ * Returns true if the UUID was initialized with a valid value. 
+ *
+ * @scope    public instance method
+ * @return   True if the UUID is valid, or false if it is not.
+ */
+orp.util.Uuid.prototype.isValid = function() {
+  try {
+    orp.lang.assertType(this._uuidString, String);
+    orp.lang.assert(this._uuidString.length == 36);
+    var arrayOfParts = this._uuidString.split("-");
+    orp.lang.assert(arrayOfParts.length == 5);   
+    orp.lang.assert(arrayOfParts[0].length == 8);
+    orp.lang.assert(arrayOfParts[1].length == 4);
+    orp.lang.assert(arrayOfParts[2].length == 4);
+    orp.lang.assert(arrayOfParts[3].length == 4);
+    orp.lang.assert(arrayOfParts[4].length == 12);
+    for (var i in arrayOfParts) {
+      var part = arrayOfParts[i];
+      var integer = parseInt(part, orp.util.Uuid.HEX_RADIX);
+      orp.lang.assert(isFinite(integer));
+    }
+    return true;
+  } catch (e) {
+    return false;
+  }
+};
+
+
+/**
  * Returns a version number that indicates what type of UUID this is. 
  * For example:
  * <pre>

Modified: trunk/tests/model/MockUuidGenerator.js
===================================================================
--- trunk/tests/model/MockUuidGenerator.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/tests/model/MockUuidGenerator.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -39,7 +39,8 @@
     return "00000000-0000-0000-0000-000000000000";
   }
   var uuidString = mockUuidGenerator.queueOfUuids.shift();
-  var uuid = new orp.util.TimeBasedUuid(uuidString);
+  var uuid = new orp.util.TimeBasedUuid();
+  uuid._uuidString = uuidString;
   return uuid;
 }
 

Modified: trunk/tests/util/UuidTest.js
===================================================================
--- trunk/tests/util/UuidTest.js	2005-09-27 01:39:06 UTC (rev 342)
+++ trunk/tests/util/UuidTest.js	2005-09-27 19:52:23 UTC (rev 343)
@@ -283,6 +283,41 @@
   checkUuidValidity(uuid4);
 }
 
+function testInvalidUuids() {
+  var uuidStrings = [];
+  uuidStrings.push("Hello world!");    // not a UUID
+  uuidStrings.push("3B12F1DF-5232-1804-897E-917BF39761");    // too short
+  uuidStrings.push("3B12F1DF-5232-1804-897E-917BF39761-8A"); // extra '-'
+  uuidStrings.push("3B12F1DF-5232-1804-897E917BF39761-8A");  // last '-' in wrong place
+  uuidStrings.push("HB12F1DF-5232-1804-897E-917BF397618A");  // "HB12F1DF" is not a hex string
+  
+  var numberOfFailures = 0;
+  for (var i in uuidStrings) {
+    var uuidString = uuidStrings[i];
+    try {
+      new Uuid(uuidString);
+    } catch (e) {
+      ++numberOfFailures;
+    }
+  }
+  assertTrue('All of the "new Uuid()" calls failed', (numberOfFailures == uuidStrings.length));  
+
+  
+  uuidStrings.push("3B12F1DF-5232-4804-897E-917BF397618A");  // valid UUID, but not a time based UUID
+  uuidStrings.push("3B12F1DF-5232-1804-F97E-917BF397618A");  // valid UUID, but not a DCE variant
+  numberOfFailures = 0;
+  for (i in uuidStrings) {
+    uuidString = uuidStrings[i];
+    try {
+      new TimeBasedUuid(uuidString);
+    } catch (e) {
+      ++numberOfFailures;
+    }
+  }
+  assertTrue('All of the "new TimeBasedUuid()" calls failed', (numberOfFailures == uuidStrings.length));  
+}
+
+
 function testUuidFactory() {
   // Time-based UUIDs
   var uuid1 = Uuid.newUuid({uuidString: "3B12F1DF-5232-1804-897E-917BF397618A"});
@@ -336,6 +371,7 @@
   assertTrue('Section 3 has 4 characters', (arrayOfParts[3].length == 4));
   assertTrue('Section 4 has 8 characters', (arrayOfParts[4].length == 12));
   
+  // check to see that the "UUID variant code" starts with the binary bits '10'
   var section3 = arrayOfParts[3];
   var hex3 = parseInt(section3, orp.util.Uuid.HEX_RADIX);
   var binaryString = hex3.toString(2);



From skinner at berlios.de  Wed Sep 28 03:22:25 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 28 Sep 2005 03:22:25 +0200
Subject: [openrecord-svn] r344 - in trunk: . source source/util source/view
Message-ID: <200509280122.j8S1MP5q006067@sheep.berlios.de>

Author: skinner
Date: 2005-09-28 03:22:19 +0200 (Wed, 28 Sep 2005)
New Revision: 344

Modified:
   trunk/sandbox.html
   trunk/source/OpenRecordLoader.js
   trunk/source/util/Cookie.js
   trunk/source/view/LoginView.js
Log:
Added a couple lines to Cookie.js to make it available as orp.util.Cookie

Modified: trunk/sandbox.html
===================================================================
--- trunk/sandbox.html	2005-09-27 19:52:23 UTC (rev 343)
+++ trunk/sandbox.html	2005-09-28 01:22:19 UTC (rev 344)
@@ -23,7 +23,6 @@
     <script type="text/javascript" src="third_party/scriptaculous/prototype.js"></script>
     <script type="text/javascript" src="third_party/scriptaculous/effects.js"></script>
     <script type="text/javascript" src="third_party/scriptaculous/dragdrop.js"></script>
-    <script type="text/javascript" src="source/util/Cookie.js"></script>
     <script type="text/javascript" src="third_party/dojo/dojo-0.1.0/dojo.js"></script>
     <script>
       dojo.hostenv.setModulePrefix("dojo", "../../dojo/dojo-0.1.0/src");

Modified: trunk/source/OpenRecordLoader.js
===================================================================
--- trunk/source/OpenRecordLoader.js	2005-09-27 19:52:23 UTC (rev 343)
+++ trunk/source/OpenRecordLoader.js	2005-09-28 01:22:19 UTC (rev 344)
@@ -96,9 +96,7 @@
     /* "third_party/dojo/dojo-0.1.0/dojo.js", */
     "third_party/scriptaculous/prototype.js",
     "third_party/scriptaculous/effects.js",
-    "third_party/scriptaculous/dragdrop.js",
-    // util
-    "source/util/Cookie.js"];
+    "third_party/scriptaculous/dragdrop.js"];
   for (var i in listOfSourceCodeFiles) {
     var fileName = listOfSourceCodeFiles[i];
     var url = path + fileName;

Modified: trunk/source/util/Cookie.js
===================================================================
--- trunk/source/util/Cookie.js	2005-09-27 19:52:23 UTC (rev 343)
+++ trunk/source/util/Cookie.js	2005-09-28 01:22:19 UTC (rev 344)
@@ -120,10 +120,26 @@
 
 
 // -------------------------------------------------------------------
-// Code below this line was written by Chih-Chao Lam, not David Flanagan...
+// Code below this line was not written by David Flanagan.
 // -------------------------------------------------------------------
+/*****************************************************************************
+ Written in 2005 by 
+    Brian Douglas Skinner <brian.skinner at gumption.org>
+    Chih-Chao Lam <chao at cs.stanford.edu>
 
+ Copyright rights relinquished under the Creative Commons  
+ Public Domain Dedication:
+    http://creativecommons.org/licenses/publicdomain/
+*****************************************************************************/
+
 // -------------------------------------------------------------------
+// Provides and Requires
+// -------------------------------------------------------------------
+dojo.provide("orp.util.Cookie");
+
+orp.util.Cookie = Cookie;
+
+// -------------------------------------------------------------------
 // Dependencies:
 //   Util.js [pending: will soon when we add error checking]
 // -------------------------------------------------------------------
@@ -143,3 +159,7 @@
   orp.lang.assert(userCookie.editMode == "true");
 }
 */
+
+// -------------------------------------------------------------------
+// End of file
+// -------------------------------------------------------------------

Modified: trunk/source/view/LoginView.js
===================================================================
--- trunk/source/view/LoginView.js	2005-09-27 19:52:23 UTC (rev 343)
+++ trunk/source/view/LoginView.js	2005-09-28 01:22:19 UTC (rev 344)
@@ -37,6 +37,7 @@
 dojo.provide("orp.view.LoginView");
 dojo.provide("orp.view.UserSuggestionBox");
 dojo.require("orp.view.View");
+dojo.require("orp.util.Cookie");
 dojo.require("dojo.event.*");
 
 // -------------------------------------------------------------------
@@ -73,7 +74,7 @@
   // instance properties
   this._isCreatingNewAccount = false;
   var tenYearCookieExpiration = 10*365*24;   // PENDING: hardcode expiration to 10yrs
-  this._cookie = new Cookie(document, orp.view.LoginView.COOKIE_NAME, tenYearCookieExpiration);
+  this._cookie = new orp.util.Cookie(document, orp.view.LoginView.COOKIE_NAME, tenYearCookieExpiration);
   this._cookie.load();
 };
 



From skinner at berlios.de  Wed Sep 28 09:24:41 2005
From: skinner at berlios.de (Brian Douglas Skinner at BerliOS)
Date: Wed, 28 Sep 2005 09:24:41 +0200
Subject: [openrecord-svn] r345 - trunk/source
Message-ID: <200509280724.j8S7Ofvb003719@sheep.berlios.de>

Author: skinner
Date: 2005-09-28 09:24:38 +0200 (Wed, 28 Sep 2005)
New Revision: 345

Modified:
   trunk/source/CodingConventions.js
Log:
updates to the CodingConventions.js doc

Modified: trunk/source/CodingConventions.js
===================================================================
--- trunk/source/CodingConventions.js	2005-09-28 01:22:19 UTC (rev 344)
+++ trunk/source/CodingConventions.js	2005-09-28 07:24:38 UTC (rev 345)
@@ -9,21 +9,55 @@
 
 Differences
 
-  Here's a list of the OpenRecord conventions that differ from the Dojo conventions:
+  Here's a list of the six OpenRecord conventions that differ from the Dojo conventions:
   
   + constants
      + Dojo uses either UpperLower or UPPER_UPPER capitalization
      + OpenRecord always uses UPPER_UPPER capitalization
-     + for an example, in DateValue.js see orp.util.DateValue.Month
+     + for an example, see orp.util.DateValue.Month in DateValue.js 
   
   + private class variables (instance variables)
      + Dojo says private class variables (instance variables) MAY have a leading underscore
-     + OpenRecord 
+     + OpenRecord always uses a leading underscore.  For example: this._foo = 3;
+  
+  + class-per-file
+     + Dojo says "Class or object-per-file guidelines are not yet determined"
+     + OpenRecord strives to have a one-to-one mapping between classes and files
+     
+  + tabs and spaces
+     + Dojo uses tab characters for indentation, with tabs set to four spaces
+     + OpenRecord uses spaces for indentation, with two spaces per indentation level.
+     + In OpenRecord, tabs are forbidden, and files with tabs will not pass the unit tests.
+     
+  + incomplete lines
+     + Dojo offers these examples:
+       var someExpression = Expression1
+           + Expression2
+           + Expression3 ;
+       var o = someObject.get(
+               Expression1,
+               Expression2,
+               Expression3
+           );
+     + OpenRecord does it slightly differently, so as to pass the JSLint tests:
+       var someExpression = Expression1 + 
+           Expression2 + 
+           Expression3 ;
+       var o = someObject.get(
+               Expression1,
+               Expression2,
+               Expression3 );
+     
+  + for loops
+     + Dojo tends to use this style:  for (var i=0; i < bar.length; i++)
+     + OpenRecord tends to do this:   for (var i in bar)
+     
+Additions
 
-
+  OpenRecord has a number of additional conventions.  See below...
    
-   
 
+
 -----------------------------------------------------------------------------
 OpenRecord Conventions
 
@@ -51,14 +85,9 @@
       + example: Book.js has unit test files BookTest.html and BookTest.js
    + variable scoping prefixes
       + class variables are prefixed with "our"
-      + [DEPRECATED: instance variables are prefixed with "my"]
       + global variables are prefixed with "window.global"
       + locally scoped variables are not prefixed
       + non-public variables and methods are prefixed with "_" (use "_" for private, protected, or package)
-      + [DEPRECATED: function input parameters are prefixed with "in"]
-      + [DEPRECATED: private variables and methods are prefixed with "__"]
-      + [DEPRECATED: protected variables and methods are prefixed with "_"]
-   + class constants are prefixed with the type of the constant -- see LAYOUT_PORTRAIT
    + array variables are prefixed with "listOf" or "hashTableOf" or "arrayOf"
       + var listOfBooks = []; <-- a "List" has only values, no keys ["Apple", "Orange", "Banana"]
       + var hashTableOfBooksKeyedByTitle = {}; <-- a "HashTable" is an associative array with key-value pairs
@@ -70,7 +99,7 @@
 
 + compatiblity with other browsers and other JavaScript libraries 
    + use "get" and "set" accessors -- do *not* assign Mozilla "getter" and "setter" methods
-   + [DEPRECATED: add methods in your own namespace -- do *not* extend built-in objects: String.prototype.toEsperanto = function ...]
+   + add methods in your own namespace -- do *not* extend built-in objects: String.prototype.toEsperanto = function ...
    + do *not* extend Object.prototype
      (see http://erik.eae.net/archives/2005/06/06/22.13.54/)
      (see http://sourceforge.net/forum/forum.php?thread_id=1315559&forum_id=379297)



